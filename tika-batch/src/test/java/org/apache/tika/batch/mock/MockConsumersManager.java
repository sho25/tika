begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|batch
operator|.
name|mock
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|batch
operator|.
name|ConsumersManager
import|;
end_import

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_class
specifier|public
class|class
name|MockConsumersManager
extends|extends
name|ConsumersManager
block|{
specifier|private
specifier|final
name|long
name|HANG_MS
init|=
literal|30000
decl_stmt|;
specifier|private
specifier|final
name|ConsumersManager
name|wrapped
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|hangOnInit
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|hangOnClose
decl_stmt|;
specifier|public
name|MockConsumersManager
parameter_list|(
name|ConsumersManager
name|wrapped
parameter_list|,
name|boolean
name|hangOnInit
parameter_list|,
name|boolean
name|hangOnClose
parameter_list|)
block|{
name|super
argument_list|(
name|wrapped
operator|.
name|getConsumers
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|wrapped
operator|=
name|wrapped
expr_stmt|;
name|this
operator|.
name|hangOnInit
operator|=
name|hangOnInit
expr_stmt|;
name|this
operator|.
name|hangOnClose
operator|=
name|hangOnClose
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|init
parameter_list|()
block|{
if|if
condition|(
name|hangOnInit
condition|)
block|{
comment|//interruptible light hang
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|HANG_MS
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
return|return;
block|}
return|return;
block|}
name|super
operator|.
name|init
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|shutdown
parameter_list|()
block|{
if|if
condition|(
name|hangOnClose
condition|)
block|{
comment|//interruptible light hang
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|HANG_MS
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
return|return;
block|}
return|return;
block|}
name|super
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getConsumersManagerMaxMillis
parameter_list|()
block|{
return|return
name|wrapped
operator|.
name|getConsumersManagerMaxMillis
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setConsumersManagerMaxMillis
parameter_list|(
name|long
name|millis
parameter_list|)
block|{
name|wrapped
operator|.
name|setConsumersManagerMaxMillis
argument_list|(
name|millis
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

