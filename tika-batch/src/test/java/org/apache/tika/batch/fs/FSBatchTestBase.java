begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|batch
operator|.
name|fs
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|Charset
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|DirectoryStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|FileVisitResult
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Paths
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|SimpleFileVisitor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|attribute
operator|.
name|BasicFileAttributes
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Future
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|TikaTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|batch
operator|.
name|BatchProcess
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|batch
operator|.
name|BatchProcessDriverCLI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|batch
operator|.
name|ParallelFileProcessingResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|batch
operator|.
name|builders
operator|.
name|BatchProcessBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|utils
operator|.
name|ProcessUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_comment
comment|/**  * This is the base class for file-system batch tests.  *<p/>  * There are a few areas for improvement in this test suite.  *<ol>  *<li>For the heavy load tests, the test cases leave behind files that  *     cannot be deleted from within the same jvm.  A thread is still actively writing to an  *     OutputStream when tearDown() is called.  The current solution is to create  *     the temp dir within the target/tika-batch/test-classes so that they will at least  *     be removed during each maven&quot;clean&quot;</li>  *<li>The&quot;mock&quot; tests are time-based.  This is not  *     extremely reliable across different machines with different number/power of cpus.  *</li>  *</ol>  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|FSBatchTestBase
extends|extends
name|TikaTest
block|{
specifier|private
specifier|static
name|Path
name|outputRoot
init|=
literal|null
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|Path
name|testOutput
init|=
name|Paths
operator|.
name|get
argument_list|(
literal|"target/test-classes/test-output"
argument_list|)
decl_stmt|;
name|Files
operator|.
name|createDirectories
argument_list|(
name|testOutput
argument_list|)
expr_stmt|;
name|outputRoot
operator|=
name|Files
operator|.
name|createTempDirectory
argument_list|(
name|testOutput
argument_list|,
literal|"tika-batch-output-root-"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
comment|//not ideal, but should be ok for testing
comment|//see caveat in TikaCLITest's textExtract
try|try
block|{
name|FileUtils
operator|.
name|deleteDirectory
argument_list|(
name|outputRoot
operator|.
name|toFile
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|destroyProcess
parameter_list|(
name|Process
name|p
parameter_list|)
block|{
if|if
condition|(
name|p
operator|==
literal|null
condition|)
return|return;
try|try
block|{
name|p
operator|.
name|exitValue
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalThreadStateException
name|e
parameter_list|)
block|{
name|p
operator|.
name|destroy
argument_list|()
expr_stmt|;
block|}
block|}
name|Path
name|getNewOutputDir
parameter_list|(
name|String
name|subdirPrefix
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|outputDir
init|=
name|Files
operator|.
name|createTempDirectory
argument_list|(
name|outputRoot
argument_list|,
name|subdirPrefix
argument_list|)
decl_stmt|;
assert|assert
operator|(
name|countChildren
argument_list|(
name|outputDir
argument_list|)
operator|==
literal|0
operator|)
assert|;
return|return
name|outputDir
return|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getDefaultArgs
parameter_list|(
name|String
name|inputSubDir
parameter_list|,
name|Path
name|outputDir
parameter_list|)
throws|throws
name|Exception
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|args
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|args
operator|.
name|put
argument_list|(
literal|"inputDir"
argument_list|,
literal|"\""
operator|+
name|getInputRoot
argument_list|(
name|inputSubDir
argument_list|)
operator|.
name|toString
argument_list|()
operator|+
literal|"\""
argument_list|)
expr_stmt|;
if|if
condition|(
name|outputDir
operator|!=
literal|null
condition|)
block|{
name|args
operator|.
name|put
argument_list|(
literal|"outputDir"
argument_list|,
literal|"\""
operator|+
name|outputDir
operator|.
name|toString
argument_list|()
operator|+
literal|"\""
argument_list|)
expr_stmt|;
block|}
return|return
name|args
return|;
block|}
specifier|public
name|String
index|[]
name|getDefaultCommandLineArgsArr
parameter_list|(
name|String
name|inputSubDir
parameter_list|,
name|Path
name|outputDir
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|commandLine
parameter_list|)
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|String
argument_list|>
name|args
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
comment|//need to include "-" because these are going to the commandline!
if|if
condition|(
name|inputSubDir
operator|!=
literal|null
condition|)
block|{
name|args
operator|.
name|add
argument_list|(
literal|"-inputDir"
argument_list|)
expr_stmt|;
name|args
operator|.
name|add
argument_list|(
name|getInputRoot
argument_list|(
name|inputSubDir
argument_list|)
operator|.
name|toAbsolutePath
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|outputDir
operator|!=
literal|null
condition|)
block|{
name|args
operator|.
name|add
argument_list|(
literal|"-outputDir"
argument_list|)
expr_stmt|;
name|args
operator|.
name|add
argument_list|(
name|outputDir
operator|.
name|toAbsolutePath
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|commandLine
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|e
range|:
name|commandLine
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|args
operator|.
name|add
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|args
operator|.
name|add
argument_list|(
name|e
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|args
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|args
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
specifier|public
name|Path
name|getInputRoot
parameter_list|(
name|String
name|subdir
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|path
init|=
operator|(
name|subdir
operator|==
literal|null
operator|||
name|subdir
operator|.
name|length
argument_list|()
operator|==
literal|0
operator|)
condition|?
literal|"/test-input"
else|:
literal|"/test-input/"
operator|+
name|subdir
decl_stmt|;
return|return
name|Paths
operator|.
name|get
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getResource
argument_list|(
name|path
argument_list|)
operator|.
name|toURI
argument_list|()
argument_list|)
return|;
block|}
name|BatchProcess
name|getNewBatchRunner
parameter_list|(
name|String
name|testConfig
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|args
parameter_list|)
throws|throws
name|IOException
block|{
name|InputStream
name|is
init|=
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getResourceAsStream
argument_list|(
name|testConfig
argument_list|)
decl_stmt|;
name|BatchProcessBuilder
name|b
init|=
operator|new
name|BatchProcessBuilder
argument_list|()
decl_stmt|;
name|BatchProcess
name|runner
init|=
name|b
operator|.
name|build
argument_list|(
name|is
argument_list|,
name|args
argument_list|)
decl_stmt|;
name|IOUtils
operator|.
name|closeQuietly
argument_list|(
name|is
argument_list|)
expr_stmt|;
return|return
name|runner
return|;
block|}
specifier|public
name|ProcessBuilder
name|getNewBatchRunnerProcess
parameter_list|(
name|String
name|testConfig
parameter_list|,
name|String
name|loggerProps
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|args
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|argList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|e
range|:
name|args
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|argList
operator|.
name|add
argument_list|(
literal|"-"
operator|+
name|e
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|argList
operator|.
name|add
argument_list|(
name|e
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|String
index|[]
name|fullCommandLine
init|=
name|commandLine
argument_list|(
name|testConfig
argument_list|,
name|loggerProps
argument_list|,
name|argList
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|argList
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
decl_stmt|;
return|return
operator|new
name|ProcessBuilder
argument_list|(
name|fullCommandLine
argument_list|)
return|;
block|}
specifier|private
name|String
index|[]
name|commandLine
parameter_list|(
name|String
name|testConfig
parameter_list|,
name|String
name|loggerProps
parameter_list|,
name|String
index|[]
name|args
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|commandLine
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|commandLine
operator|.
name|add
argument_list|(
literal|"java"
argument_list|)
expr_stmt|;
name|commandLine
operator|.
name|add
argument_list|(
literal|"-Djava.awt.headless=true"
argument_list|)
expr_stmt|;
name|commandLine
operator|.
name|add
argument_list|(
literal|"-Dlog4j.configuration=file:"
operator|+
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getResource
argument_list|(
name|loggerProps
argument_list|)
operator|.
name|getFile
argument_list|()
argument_list|)
expr_stmt|;
name|commandLine
operator|.
name|add
argument_list|(
literal|"-Xmx128m"
argument_list|)
expr_stmt|;
name|commandLine
operator|.
name|add
argument_list|(
literal|"-cp"
argument_list|)
expr_stmt|;
name|String
name|cp
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"java.class.path"
argument_list|)
decl_stmt|;
name|cp
operator|=
name|ProcessUtils
operator|.
name|escapeCommandLine
argument_list|(
name|cp
argument_list|)
expr_stmt|;
name|commandLine
operator|.
name|add
argument_list|(
name|cp
argument_list|)
expr_stmt|;
name|commandLine
operator|.
name|add
argument_list|(
literal|"org.apache.tika.batch.fs.FSBatchProcessCLI"
argument_list|)
expr_stmt|;
name|String
name|configFile
init|=
literal|null
decl_stmt|;
try|try
block|{
name|configFile
operator|=
name|Paths
operator|.
name|get
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getResource
argument_list|(
name|testConfig
argument_list|)
operator|.
name|toURI
argument_list|()
argument_list|)
operator|.
name|toAbsolutePath
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
name|commandLine
operator|.
name|add
argument_list|(
literal|"-bc"
argument_list|)
expr_stmt|;
name|commandLine
operator|.
name|add
argument_list|(
name|configFile
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|s
range|:
name|args
control|)
block|{
name|commandLine
operator|.
name|add
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
return|return
name|commandLine
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|commandLine
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
specifier|public
name|BatchProcessDriverCLI
name|getNewDriver
parameter_list|(
name|String
name|testConfig
parameter_list|,
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|String
argument_list|>
name|commandLine
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|commandLine
operator|.
name|add
argument_list|(
literal|"java"
argument_list|)
expr_stmt|;
name|commandLine
operator|.
name|add
argument_list|(
literal|"-Djava.awt.headless=true"
argument_list|)
expr_stmt|;
name|commandLine
operator|.
name|add
argument_list|(
literal|"-Xmx128m"
argument_list|)
expr_stmt|;
name|commandLine
operator|.
name|add
argument_list|(
literal|"-cp"
argument_list|)
expr_stmt|;
name|String
name|cp
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"java.class.path"
argument_list|)
decl_stmt|;
comment|//need to test for " " on *nix, can't just add double quotes
comment|//across platforms.
name|cp
operator|=
name|ProcessUtils
operator|.
name|escapeCommandLine
argument_list|(
name|cp
argument_list|)
expr_stmt|;
name|commandLine
operator|.
name|add
argument_list|(
name|cp
argument_list|)
expr_stmt|;
name|commandLine
operator|.
name|add
argument_list|(
literal|"org.apache.tika.batch.fs.FSBatchProcessCLI"
argument_list|)
expr_stmt|;
name|String
name|configFile
init|=
name|Paths
operator|.
name|get
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getResource
argument_list|(
name|testConfig
argument_list|)
operator|.
name|toURI
argument_list|()
argument_list|)
operator|.
name|toAbsolutePath
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|commandLine
operator|.
name|add
argument_list|(
literal|"-bc"
argument_list|)
expr_stmt|;
name|commandLine
operator|.
name|add
argument_list|(
name|configFile
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|s
range|:
name|args
control|)
block|{
name|commandLine
operator|.
name|add
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
name|BatchProcessDriverCLI
name|driver
init|=
operator|new
name|BatchProcessDriverCLI
argument_list|(
name|commandLine
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|commandLine
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
decl_stmt|;
name|driver
operator|.
name|setRedirectChildProcessToStdOut
argument_list|(
literal|false
argument_list|)
expr_stmt|;
return|return
name|driver
return|;
block|}
specifier|protected
name|ParallelFileProcessingResult
name|run
parameter_list|(
name|BatchProcess
name|process
parameter_list|)
throws|throws
name|Exception
block|{
name|ExecutorService
name|executor
init|=
name|Executors
operator|.
name|newSingleThreadExecutor
argument_list|()
decl_stmt|;
name|Future
argument_list|<
name|ParallelFileProcessingResult
argument_list|>
name|futureResult
init|=
name|executor
operator|.
name|submit
argument_list|(
name|process
argument_list|)
decl_stmt|;
return|return
name|futureResult
operator|.
name|get
argument_list|(
literal|10
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
return|;
block|}
comment|/**      * Counts immediate children only, does not work recursively      * @param p      * @return      * @throws IOException      */
specifier|public
specifier|static
name|int
name|countChildren
parameter_list|(
name|Path
name|p
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|i
init|=
literal|0
decl_stmt|;
try|try
init|(
name|DirectoryStream
argument_list|<
name|Path
argument_list|>
name|ds
init|=
name|Files
operator|.
name|newDirectoryStream
argument_list|(
name|p
argument_list|)
init|)
block|{
name|Iterator
argument_list|<
name|Path
argument_list|>
name|it
init|=
name|ds
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|i
operator|++
expr_stmt|;
name|it
operator|.
name|next
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|i
return|;
block|}
comment|//REMOVE THIS AND USE FileUtils, once a java 7 option has been added.
specifier|public
specifier|static
name|String
name|readFileToString
parameter_list|(
name|Path
name|p
parameter_list|,
name|Charset
name|cs
parameter_list|)
throws|throws
name|IOException
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
try|try
init|(
name|BufferedReader
name|r
init|=
name|Files
operator|.
name|newBufferedReader
argument_list|(
name|p
argument_list|,
name|cs
argument_list|)
init|)
block|{
name|String
name|line
init|=
name|r
operator|.
name|readLine
argument_list|()
decl_stmt|;
while|while
condition|(
name|line
operator|!=
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|line
argument_list|)
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|line
operator|=
name|r
operator|.
name|readLine
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**      * helper method equivalent to File#listFiles()      * grabs children only, does not walk recursively      * @param p      * @return      */
specifier|public
specifier|static
name|List
argument_list|<
name|Path
argument_list|>
name|listPaths
parameter_list|(
name|Path
name|p
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|Path
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
try|try
init|(
name|DirectoryStream
argument_list|<
name|Path
argument_list|>
name|ds
init|=
name|Files
operator|.
name|newDirectoryStream
argument_list|(
name|p
argument_list|)
init|)
block|{
name|Iterator
argument_list|<
name|Path
argument_list|>
name|it
init|=
name|ds
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|list
operator|.
name|add
argument_list|(
name|it
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|list
return|;
block|}
block|}
end_class

end_unit

