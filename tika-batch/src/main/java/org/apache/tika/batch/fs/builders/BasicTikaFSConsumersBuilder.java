begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|batch
operator|.
name|fs
operator|.
name|builders
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Paths
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ArrayBlockingQueue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|batch
operator|.
name|ConsumersManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|batch
operator|.
name|FileResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|batch
operator|.
name|FileResourceConsumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|batch
operator|.
name|OutputStreamFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|batch
operator|.
name|ParserFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|batch
operator|.
name|builders
operator|.
name|AbstractConsumersBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|batch
operator|.
name|builders
operator|.
name|BatchProcessBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|batch
operator|.
name|builders
operator|.
name|IContentHandlerFactoryBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|batch
operator|.
name|builders
operator|.
name|IParserFactoryBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|batch
operator|.
name|fs
operator|.
name|BasicTikaFSConsumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|batch
operator|.
name|fs
operator|.
name|FSConsumersManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|batch
operator|.
name|fs
operator|.
name|FSOutputStreamFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|batch
operator|.
name|fs
operator|.
name|FSUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|batch
operator|.
name|fs
operator|.
name|RecursiveParserWrapperFSConsumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|config
operator|.
name|TikaConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|sax
operator|.
name|ContentHandlerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|util
operator|.
name|ClassLoaderUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|util
operator|.
name|PropsUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|util
operator|.
name|XMLDOMUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|NodeList
import|;
end_import

begin_class
specifier|public
class|class
name|BasicTikaFSConsumersBuilder
extends|extends
name|AbstractConsumersBuilder
block|{
annotation|@
name|Override
specifier|public
name|ConsumersManager
name|build
parameter_list|(
name|Node
name|node
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|runtimeAttributes
parameter_list|,
name|ArrayBlockingQueue
argument_list|<
name|FileResource
argument_list|>
name|queue
parameter_list|)
block|{
comment|//figure out if we're building a recursiveParserWrapper
name|boolean
name|recursiveParserWrapper
init|=
literal|false
decl_stmt|;
name|String
name|recursiveParserWrapperString
init|=
name|runtimeAttributes
operator|.
name|get
argument_list|(
literal|"recursiveParserWrapper"
argument_list|)
decl_stmt|;
if|if
condition|(
name|recursiveParserWrapperString
operator|!=
literal|null
condition|)
block|{
name|recursiveParserWrapper
operator|=
name|PropsUtil
operator|.
name|getBoolean
argument_list|(
name|recursiveParserWrapperString
argument_list|,
name|recursiveParserWrapper
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Node
name|recursiveParserWrapperNode
init|=
name|node
operator|.
name|getAttributes
argument_list|()
operator|.
name|getNamedItem
argument_list|(
literal|"recursiveParserWrapper"
argument_list|)
decl_stmt|;
if|if
condition|(
name|recursiveParserWrapperNode
operator|!=
literal|null
condition|)
block|{
name|recursiveParserWrapper
operator|=
name|PropsUtil
operator|.
name|getBoolean
argument_list|(
name|recursiveParserWrapperNode
operator|.
name|getNodeValue
argument_list|()
argument_list|,
name|recursiveParserWrapper
argument_list|)
expr_stmt|;
block|}
block|}
comment|//how long to let the consumersManager run on init() and shutdown()
name|Long
name|consumersManagerMaxMillis
init|=
literal|null
decl_stmt|;
name|String
name|consumersManagerMaxMillisString
init|=
name|runtimeAttributes
operator|.
name|get
argument_list|(
literal|"consumersManagerMaxMillis"
argument_list|)
decl_stmt|;
if|if
condition|(
name|consumersManagerMaxMillisString
operator|!=
literal|null
condition|)
block|{
name|consumersManagerMaxMillis
operator|=
name|PropsUtil
operator|.
name|getLong
argument_list|(
name|consumersManagerMaxMillisString
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Node
name|consumersManagerMaxMillisNode
init|=
name|node
operator|.
name|getAttributes
argument_list|()
operator|.
name|getNamedItem
argument_list|(
literal|"consumersManagerMaxMillis"
argument_list|)
decl_stmt|;
if|if
condition|(
name|consumersManagerMaxMillis
operator|==
literal|null
operator|&&
name|consumersManagerMaxMillisNode
operator|!=
literal|null
condition|)
block|{
name|consumersManagerMaxMillis
operator|=
name|PropsUtil
operator|.
name|getLong
argument_list|(
name|consumersManagerMaxMillisNode
operator|.
name|getNodeValue
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
name|TikaConfig
name|config
init|=
literal|null
decl_stmt|;
name|String
name|tikaConfigPath
init|=
name|runtimeAttributes
operator|.
name|get
argument_list|(
literal|"c"
argument_list|)
decl_stmt|;
if|if
condition|(
name|tikaConfigPath
operator|==
literal|null
condition|)
block|{
name|Node
name|tikaConfigNode
init|=
name|node
operator|.
name|getAttributes
argument_list|()
operator|.
name|getNamedItem
argument_list|(
literal|"tikaConfig"
argument_list|)
decl_stmt|;
if|if
condition|(
name|tikaConfigNode
operator|!=
literal|null
condition|)
block|{
name|tikaConfigPath
operator|=
name|PropsUtil
operator|.
name|getString
argument_list|(
name|tikaConfigNode
operator|.
name|getNodeValue
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|tikaConfigPath
operator|!=
literal|null
condition|)
block|{
try|try
init|(
name|InputStream
name|is
init|=
name|Files
operator|.
name|newInputStream
argument_list|(
name|Paths
operator|.
name|get
argument_list|(
name|tikaConfigPath
argument_list|)
argument_list|)
init|)
block|{
name|config
operator|=
operator|new
name|TikaConfig
argument_list|(
name|is
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
else|else
block|{
name|config
operator|=
name|TikaConfig
operator|.
name|getDefaultConfig
argument_list|()
expr_stmt|;
block|}
name|List
argument_list|<
name|FileResourceConsumer
argument_list|>
name|consumers
init|=
operator|new
name|LinkedList
argument_list|<
name|FileResourceConsumer
argument_list|>
argument_list|()
decl_stmt|;
name|int
name|numConsumers
init|=
name|BatchProcessBuilder
operator|.
name|getNumConsumers
argument_list|(
name|runtimeAttributes
argument_list|)
decl_stmt|;
name|NodeList
name|nodeList
init|=
name|node
operator|.
name|getChildNodes
argument_list|()
decl_stmt|;
name|Node
name|contentHandlerFactoryNode
init|=
literal|null
decl_stmt|;
name|Node
name|parserFactoryNode
init|=
literal|null
decl_stmt|;
name|Node
name|outputStreamFactoryNode
init|=
literal|null
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nodeList
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Node
name|child
init|=
name|nodeList
operator|.
name|item
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|String
name|cn
init|=
name|child
operator|.
name|getNodeName
argument_list|()
decl_stmt|;
if|if
condition|(
name|cn
operator|.
name|equals
argument_list|(
literal|"parser"
argument_list|)
condition|)
block|{
name|parserFactoryNode
operator|=
name|child
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|cn
operator|.
name|equals
argument_list|(
literal|"contenthandler"
argument_list|)
condition|)
block|{
name|contentHandlerFactoryNode
operator|=
name|child
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|cn
operator|.
name|equals
argument_list|(
literal|"outputstream"
argument_list|)
condition|)
block|{
name|outputStreamFactoryNode
operator|=
name|child
expr_stmt|;
block|}
block|}
if|if
condition|(
name|contentHandlerFactoryNode
operator|==
literal|null
operator|||
name|parserFactoryNode
operator|==
literal|null
operator|||
name|outputStreamFactoryNode
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"You must specify a ContentHandlerFactory, "
operator|+
literal|"a ParserFactory and an OutputStreamFactory"
argument_list|)
throw|;
block|}
name|ContentHandlerFactory
name|contentHandlerFactory
init|=
name|getContentHandlerFactory
argument_list|(
name|contentHandlerFactoryNode
argument_list|,
name|runtimeAttributes
argument_list|)
decl_stmt|;
name|ParserFactory
name|parserFactory
init|=
name|getParserFactory
argument_list|(
name|parserFactoryNode
argument_list|,
name|runtimeAttributes
argument_list|)
decl_stmt|;
name|OutputStreamFactory
name|outputStreamFactory
init|=
name|getOutputStreamFactory
argument_list|(
name|outputStreamFactoryNode
argument_list|,
name|runtimeAttributes
argument_list|)
decl_stmt|;
if|if
condition|(
name|recursiveParserWrapper
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numConsumers
condition|;
name|i
operator|++
control|)
block|{
name|FileResourceConsumer
name|c
init|=
operator|new
name|RecursiveParserWrapperFSConsumer
argument_list|(
name|queue
argument_list|,
name|parserFactory
argument_list|,
name|contentHandlerFactory
argument_list|,
name|outputStreamFactory
argument_list|,
name|config
argument_list|)
decl_stmt|;
name|consumers
operator|.
name|add
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numConsumers
condition|;
name|i
operator|++
control|)
block|{
name|FileResourceConsumer
name|c
init|=
operator|new
name|BasicTikaFSConsumer
argument_list|(
name|queue
argument_list|,
name|parserFactory
argument_list|,
name|contentHandlerFactory
argument_list|,
name|outputStreamFactory
argument_list|,
name|config
argument_list|)
decl_stmt|;
name|consumers
operator|.
name|add
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
block|}
name|ConsumersManager
name|manager
init|=
operator|new
name|FSConsumersManager
argument_list|(
name|consumers
argument_list|)
decl_stmt|;
if|if
condition|(
name|consumersManagerMaxMillis
operator|!=
literal|null
condition|)
block|{
name|manager
operator|.
name|setConsumersManagerMaxMillis
argument_list|(
name|consumersManagerMaxMillis
argument_list|)
expr_stmt|;
block|}
return|return
name|manager
return|;
block|}
specifier|private
name|ContentHandlerFactory
name|getContentHandlerFactory
parameter_list|(
name|Node
name|node
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|runtimeAttributes
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|localAttrs
init|=
name|XMLDOMUtil
operator|.
name|mapifyAttrs
argument_list|(
name|node
argument_list|,
name|runtimeAttributes
argument_list|)
decl_stmt|;
name|String
name|className
init|=
name|localAttrs
operator|.
name|get
argument_list|(
literal|"builderClass"
argument_list|)
decl_stmt|;
if|if
condition|(
name|className
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Must specify builderClass for contentHandler"
argument_list|)
throw|;
block|}
name|IContentHandlerFactoryBuilder
name|builder
init|=
name|ClassLoaderUtil
operator|.
name|buildClass
argument_list|(
name|IContentHandlerFactoryBuilder
operator|.
name|class
argument_list|,
name|className
argument_list|)
decl_stmt|;
return|return
name|builder
operator|.
name|build
argument_list|(
name|node
argument_list|,
name|runtimeAttributes
argument_list|)
return|;
block|}
specifier|private
name|ParserFactory
name|getParserFactory
parameter_list|(
name|Node
name|node
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|runtimeAttributes
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|localAttrs
init|=
name|XMLDOMUtil
operator|.
name|mapifyAttrs
argument_list|(
name|node
argument_list|,
name|runtimeAttributes
argument_list|)
decl_stmt|;
name|String
name|className
init|=
name|localAttrs
operator|.
name|get
argument_list|(
literal|"builderClass"
argument_list|)
decl_stmt|;
name|IParserFactoryBuilder
name|builder
init|=
name|ClassLoaderUtil
operator|.
name|buildClass
argument_list|(
name|IParserFactoryBuilder
operator|.
name|class
argument_list|,
name|className
argument_list|)
decl_stmt|;
return|return
name|builder
operator|.
name|build
argument_list|(
name|node
argument_list|,
name|runtimeAttributes
argument_list|)
return|;
block|}
specifier|private
name|OutputStreamFactory
name|getOutputStreamFactory
parameter_list|(
name|Node
name|node
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|runtimeAttributes
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|attrs
init|=
name|XMLDOMUtil
operator|.
name|mapifyAttrs
argument_list|(
name|node
argument_list|,
name|runtimeAttributes
argument_list|)
decl_stmt|;
name|Path
name|outputDir
init|=
name|PropsUtil
operator|.
name|getPath
argument_list|(
name|attrs
operator|.
name|get
argument_list|(
literal|"outputDir"
argument_list|)
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|/*        FSUtil.HANDLE_EXISTING handleExisting = null;         String handleExistingString = attrs.get("handleExisting");         if (handleExistingString == null) {             handleExistingException();         } else if (handleExistingString.equals("overwrite")){             handleExisting = FSUtil.HANDLE_EXISTING.OVERWRITE;         } else if (handleExistingString.equals("rename")) {             handleExisting = FSUtil.HANDLE_EXISTING.RENAME;         } else if (handleExistingString.equals("skip")) {             handleExisting = FSUtil.HANDLE_EXISTING.SKIP;         } else {             handleExistingException();         } */
name|String
name|compressionString
init|=
name|attrs
operator|.
name|get
argument_list|(
literal|"compression"
argument_list|)
decl_stmt|;
name|FSOutputStreamFactory
operator|.
name|COMPRESSION
name|compression
init|=
name|FSOutputStreamFactory
operator|.
name|COMPRESSION
operator|.
name|NONE
decl_stmt|;
if|if
condition|(
name|compressionString
operator|==
literal|null
condition|)
block|{
comment|//do nothing
block|}
elseif|else
if|if
condition|(
name|compressionString
operator|.
name|contains
argument_list|(
literal|"bz"
argument_list|)
condition|)
block|{
name|compression
operator|=
name|FSOutputStreamFactory
operator|.
name|COMPRESSION
operator|.
name|BZIP2
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|compressionString
operator|.
name|contains
argument_list|(
literal|"gz"
argument_list|)
condition|)
block|{
name|compression
operator|=
name|FSOutputStreamFactory
operator|.
name|COMPRESSION
operator|.
name|GZIP
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|compressionString
operator|.
name|contains
argument_list|(
literal|"zip"
argument_list|)
condition|)
block|{
name|compression
operator|=
name|FSOutputStreamFactory
operator|.
name|COMPRESSION
operator|.
name|ZIP
expr_stmt|;
block|}
name|String
name|suffix
init|=
name|attrs
operator|.
name|get
argument_list|(
literal|"outputSuffix"
argument_list|)
decl_stmt|;
comment|//TODO: possibly open up the different handle-existings in the future
comment|//but for now, lock it down to require skip.  Too dangerous otherwise
comment|//if the driver restarts and this is set to overwrite...
return|return
operator|new
name|FSOutputStreamFactory
argument_list|(
name|outputDir
argument_list|,
name|FSUtil
operator|.
name|HANDLE_EXISTING
operator|.
name|SKIP
argument_list|,
name|compression
argument_list|,
name|suffix
argument_list|)
return|;
block|}
block|}
end_class

end_unit

