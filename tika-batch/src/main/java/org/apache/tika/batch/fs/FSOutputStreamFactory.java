begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|batch
operator|.
name|fs
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|GZIPOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|compress
operator|.
name|archivers
operator|.
name|zip
operator|.
name|ZipArchiveOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|compress
operator|.
name|compressors
operator|.
name|bzip2
operator|.
name|BZip2CompressorOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|batch
operator|.
name|OutputStreamFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|metadata
operator|.
name|Metadata
import|;
end_import

begin_class
specifier|public
class|class
name|FSOutputStreamFactory
implements|implements
name|OutputStreamFactory
block|{
specifier|public
enum|enum
name|COMPRESSION
block|{
name|NONE
block|,
name|BZIP2
block|,
name|GZIP
block|,
name|ZIP
block|}
specifier|private
specifier|final
name|FSUtil
operator|.
name|HANDLE_EXISTING
name|handleExisting
decl_stmt|;
specifier|private
specifier|final
name|File
name|outputRoot
decl_stmt|;
specifier|private
specifier|final
name|String
name|suffix
decl_stmt|;
specifier|private
specifier|final
name|COMPRESSION
name|compression
decl_stmt|;
specifier|public
name|FSOutputStreamFactory
parameter_list|(
name|File
name|outputRoot
parameter_list|,
name|FSUtil
operator|.
name|HANDLE_EXISTING
name|handleExisting
parameter_list|,
name|COMPRESSION
name|compression
parameter_list|,
name|String
name|suffix
parameter_list|)
block|{
name|this
operator|.
name|handleExisting
operator|=
name|handleExisting
expr_stmt|;
name|this
operator|.
name|outputRoot
operator|=
name|outputRoot
operator|.
name|getAbsoluteFile
argument_list|()
expr_stmt|;
name|this
operator|.
name|suffix
operator|=
name|suffix
expr_stmt|;
name|this
operator|.
name|compression
operator|=
name|compression
expr_stmt|;
block|}
comment|/**      * This tries to create a file based on the {@link org.apache.tika.batch.fs.FSUtil.HANDLE_EXISTING}      * value that was passed in during initialization.      *<p>      * If {@link #handleExisting} is set to "SKIP" and the output file already exists,      * this will return null.      *<p>      * If an output file can be found, this will try to mkdirs for that output file.      * If mkdirs() fails, this will throw an IOException.      *<p>      * Finally, this will open an output stream for the appropriate output file.      * @param metadata must have a value set for FSMetadataProperties.FS_ABSOLUTE_PATH or      *                 else NullPointerException will be thrown!      * @return OutputStream      * @throws java.io.IOException, NullPointerException      */
annotation|@
name|Override
specifier|public
name|OutputStream
name|getOutputStream
parameter_list|(
name|Metadata
name|metadata
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|initialRelativePath
init|=
name|metadata
operator|.
name|get
argument_list|(
name|FSProperties
operator|.
name|FS_REL_PATH
argument_list|)
decl_stmt|;
name|File
name|outputFile
init|=
name|FSUtil
operator|.
name|getOutputFile
argument_list|(
name|outputRoot
argument_list|,
name|initialRelativePath
argument_list|,
name|handleExisting
argument_list|,
name|suffix
argument_list|)
decl_stmt|;
if|if
condition|(
name|outputFile
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
operator|!
name|outputFile
operator|.
name|getParentFile
argument_list|()
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|boolean
name|success
init|=
name|outputFile
operator|.
name|getParentFile
argument_list|()
operator|.
name|mkdirs
argument_list|()
decl_stmt|;
comment|//with multithreading, it is possible that the parent file was created between
comment|//the test and the attempt to .mkdirs(); mkdirs() returns false if the dirs already exist
if|if
condition|(
operator|!
name|success
operator|&&
operator|!
name|outputFile
operator|.
name|getParentFile
argument_list|()
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Couldn't create parent directory for:"
operator|+
name|outputFile
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
throw|;
block|}
block|}
name|OutputStream
name|os
init|=
operator|new
name|FileOutputStream
argument_list|(
name|outputFile
argument_list|)
decl_stmt|;
if|if
condition|(
name|compression
operator|==
name|COMPRESSION
operator|.
name|BZIP2
condition|)
block|{
name|os
operator|=
operator|new
name|BZip2CompressorOutputStream
argument_list|(
name|os
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|compression
operator|==
name|COMPRESSION
operator|.
name|GZIP
condition|)
block|{
name|os
operator|=
operator|new
name|GZIPOutputStream
argument_list|(
name|os
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|compression
operator|==
name|COMPRESSION
operator|.
name|ZIP
condition|)
block|{
name|os
operator|=
operator|new
name|ZipArchiveOutputStream
argument_list|(
name|os
argument_list|)
expr_stmt|;
block|}
return|return
name|os
return|;
block|}
block|}
end_class

end_unit

