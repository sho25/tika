begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|batch
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_comment
comment|/**  * Simple class to record the time when a FileResource's processing started.  */
end_comment

begin_class
class|class
name|FileStarted
block|{
specifier|private
specifier|final
name|String
name|resourceId
decl_stmt|;
specifier|private
specifier|final
name|long
name|started
decl_stmt|;
comment|/**      * Initializes a new FileStarted class with {@link #resourceId}      * and sets {@link #started} as new Date().getTime().      *      * @param resourceId string for unique resource id      */
specifier|public
name|FileStarted
parameter_list|(
name|String
name|resourceId
parameter_list|)
block|{
name|this
argument_list|(
name|resourceId
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|FileStarted
parameter_list|(
name|String
name|resourceId
parameter_list|,
name|long
name|started
parameter_list|)
block|{
name|this
operator|.
name|resourceId
operator|=
name|resourceId
expr_stmt|;
name|this
operator|.
name|started
operator|=
name|started
expr_stmt|;
block|}
comment|/**      * @return id of resource      */
specifier|public
name|String
name|getResourceId
parameter_list|()
block|{
return|return
name|resourceId
return|;
block|}
comment|/**      * @return time at which processing on this file started      */
specifier|public
name|long
name|getStarted
parameter_list|()
block|{
return|return
name|started
return|;
block|}
comment|/**      * @return elapsed milliseconds this the start of processing of this      * file resource      */
specifier|public
name|long
name|getElapsedMillis
parameter_list|()
block|{
name|long
name|now
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
return|return
name|now
operator|-
name|started
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
specifier|final
name|int
name|prime
init|=
literal|31
decl_stmt|;
name|int
name|result
init|=
literal|1
decl_stmt|;
name|result
operator|=
name|prime
operator|*
name|result
operator|+
operator|(
operator|(
name|resourceId
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|resourceId
operator|.
name|hashCode
argument_list|()
operator|)
expr_stmt|;
name|result
operator|=
name|prime
operator|*
name|result
operator|+
call|(
name|int
call|)
argument_list|(
name|started
operator|^
operator|(
name|started
operator|>>>
literal|32
operator|)
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|obj
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|obj
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
operator|!
operator|(
name|obj
operator|instanceof
name|FileStarted
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|FileStarted
name|other
init|=
operator|(
name|FileStarted
operator|)
name|obj
decl_stmt|;
if|if
condition|(
name|resourceId
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|other
operator|.
name|resourceId
operator|!=
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
elseif|else
if|if
condition|(
operator|!
name|resourceId
operator|.
name|equals
argument_list|(
name|other
operator|.
name|resourceId
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
name|started
operator|==
name|other
operator|.
name|started
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|builder
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|"FileStarted [resourceId="
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|resourceId
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|", started="
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|started
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|"]"
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

