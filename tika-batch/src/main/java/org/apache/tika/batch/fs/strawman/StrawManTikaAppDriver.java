begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|batch
operator|.
name|fs
operator|.
name|strawman
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|FileVisitResult
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Paths
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|SimpleFileVisitor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|attribute
operator|.
name|BasicFileAttributes
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorCompletionService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Future
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|MarkerFactory
import|;
end_import

begin_comment
comment|/**  * Simple single-threaded class that calls tika-app against every file in a directory.  *  * This is exceedingly robust.  One file per process.  *  * However, you can use this to compare performance against tika-batch fs code.  *  *  */
end_comment

begin_class
specifier|public
class|class
name|StrawManTikaAppDriver
implements|implements
name|Callable
argument_list|<
name|Integer
argument_list|>
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|StrawManTikaAppDriver
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|AtomicInteger
name|threadCount
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|int
name|totalThreads
decl_stmt|;
specifier|private
specifier|final
name|int
name|threadNum
decl_stmt|;
specifier|private
name|Path
name|inputRoot
init|=
literal|null
decl_stmt|;
specifier|private
name|Path
name|outputRoot
init|=
literal|null
decl_stmt|;
specifier|private
name|Path
name|fileList
init|=
literal|null
decl_stmt|;
specifier|private
name|String
index|[]
name|args
init|=
literal|null
decl_stmt|;
specifier|public
name|StrawManTikaAppDriver
parameter_list|(
name|Path
name|inputRoot
parameter_list|,
name|Path
name|outputRoot
parameter_list|,
name|int
name|totalThreads
parameter_list|,
name|Path
name|fileList
parameter_list|,
name|String
index|[]
name|args
parameter_list|)
block|{
name|this
operator|.
name|inputRoot
operator|=
name|inputRoot
expr_stmt|;
name|this
operator|.
name|outputRoot
operator|=
name|outputRoot
expr_stmt|;
name|this
operator|.
name|fileList
operator|=
name|fileList
expr_stmt|;
name|this
operator|.
name|args
operator|=
name|args
expr_stmt|;
name|threadNum
operator|=
name|threadCount
operator|.
name|getAndIncrement
argument_list|()
expr_stmt|;
name|this
operator|.
name|totalThreads
operator|=
name|totalThreads
expr_stmt|;
block|}
specifier|private
class|class
name|TikaVisitor
extends|extends
name|SimpleFileVisitor
argument_list|<
name|Path
argument_list|>
block|{
specifier|private
specifier|volatile
name|int
name|processed
init|=
literal|0
decl_stmt|;
name|int
name|getProcessed
parameter_list|()
block|{
return|return
name|processed
return|;
block|}
annotation|@
name|Override
specifier|public
name|FileVisitResult
name|visitFile
parameter_list|(
name|Path
name|file
parameter_list|,
name|BasicFileAttributes
name|attr
parameter_list|)
block|{
if|if
condition|(
name|totalThreads
operator|>
literal|1
condition|)
block|{
name|int
name|hashCode
init|=
name|file
operator|.
name|toAbsolutePath
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|hashCode
argument_list|()
decl_stmt|;
if|if
condition|(
name|Math
operator|.
name|abs
argument_list|(
name|hashCode
operator|%
name|totalThreads
argument_list|)
operator|!=
name|threadNum
condition|)
block|{
return|return
name|FileVisitResult
operator|.
name|CONTINUE
return|;
block|}
block|}
if|if
condition|(
operator|!
name|file
operator|.
name|startsWith
argument_list|(
name|inputRoot
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"File ("
operator|+
name|file
operator|.
name|toAbsolutePath
argument_list|()
operator|+
literal|") doesn't start with input root ("
operator|+
name|inputRoot
operator|.
name|toAbsolutePath
argument_list|()
operator|+
literal|")"
argument_list|)
expr_stmt|;
return|return
name|FileVisitResult
operator|.
name|CONTINUE
return|;
block|}
name|Path
name|relPath
init|=
name|inputRoot
operator|.
name|relativize
argument_list|(
name|file
argument_list|)
decl_stmt|;
name|String
name|suffix
init|=
literal|".txt"
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|commandLine
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|arg
range|:
name|args
control|)
block|{
name|commandLine
operator|.
name|add
argument_list|(
name|arg
argument_list|)
expr_stmt|;
if|if
condition|(
name|arg
operator|.
name|equals
argument_list|(
literal|"-J"
argument_list|)
condition|)
block|{
name|suffix
operator|=
literal|".json"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|arg
operator|.
name|contains
argument_list|(
literal|"-x"
argument_list|)
condition|)
block|{
name|suffix
operator|=
literal|".html"
expr_stmt|;
block|}
block|}
name|String
name|fullPath
init|=
name|file
operator|.
name|toAbsolutePath
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
name|fullPath
operator|.
name|contains
argument_list|(
literal|" "
argument_list|)
condition|)
block|{
name|fullPath
operator|=
literal|"\""
operator|+
name|fullPath
operator|+
literal|"\""
expr_stmt|;
block|}
name|commandLine
operator|.
name|add
argument_list|(
name|fullPath
argument_list|)
expr_stmt|;
name|Path
name|outputFile
init|=
name|Paths
operator|.
name|get
argument_list|(
name|outputRoot
operator|.
name|toAbsolutePath
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|relPath
operator|.
name|toString
argument_list|()
operator|+
name|suffix
argument_list|)
decl_stmt|;
try|try
block|{
name|Files
operator|.
name|createDirectories
argument_list|(
name|outputFile
operator|.
name|getParent
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|MarkerFactory
operator|.
name|getMarker
argument_list|(
literal|"FATAL"
argument_list|)
argument_list|,
literal|"parent directory for {} was not made!"
argument_list|,
name|outputFile
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"couldn't make parent file for "
operator|+
name|outputFile
argument_list|)
throw|;
block|}
name|ProcessBuilder
name|builder
init|=
operator|new
name|ProcessBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|command
argument_list|(
name|commandLine
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"about to process: {}"
argument_list|,
name|file
operator|.
name|toAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|redirectOutput
argument_list|(
name|outputFile
operator|.
name|toFile
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|redirectError
argument_list|(
name|ProcessBuilder
operator|.
name|Redirect
operator|.
name|INHERIT
argument_list|)
expr_stmt|;
name|Process
name|proc
init|=
literal|null
decl_stmt|;
try|try
block|{
name|proc
operator|=
name|builder
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
name|FileVisitResult
operator|.
name|CONTINUE
return|;
block|}
name|boolean
name|finished
init|=
literal|false
decl_stmt|;
name|long
name|totalTime
init|=
literal|180000
decl_stmt|;
comment|//3 minutes
name|long
name|pulse
init|=
literal|100
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|totalTime
condition|;
name|i
operator|+=
name|pulse
control|)
block|{
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|pulse
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
comment|//swallow
block|}
try|try
block|{
name|int
name|exit
init|=
name|proc
operator|.
name|exitValue
argument_list|()
decl_stmt|;
name|finished
operator|=
literal|true
expr_stmt|;
break|break;
block|}
catch|catch
parameter_list|(
name|IllegalThreadStateException
name|e
parameter_list|)
block|{
comment|//swallow
block|}
block|}
if|if
condition|(
operator|!
name|finished
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Had to kill process working on: {}"
argument_list|,
name|file
operator|.
name|toAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|proc
operator|.
name|destroy
argument_list|()
expr_stmt|;
block|}
try|try
block|{
name|proc
operator|.
name|getOutputStream
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
name|proc
operator|.
name|getOutputStream
argument_list|()
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"couldn't close process outputstream"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|processed
operator|++
expr_stmt|;
return|return
name|FileVisitResult
operator|.
name|CONTINUE
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Integer
name|call
parameter_list|()
throws|throws
name|Exception
block|{
name|long
name|start
init|=
operator|new
name|Date
argument_list|()
operator|.
name|getTime
argument_list|()
decl_stmt|;
name|TikaVisitor
name|v
init|=
operator|new
name|TikaVisitor
argument_list|()
decl_stmt|;
if|if
condition|(
name|fileList
operator|!=
literal|null
condition|)
block|{
name|TikaVisitor
name|tikaVisitor
init|=
operator|new
name|TikaVisitor
argument_list|()
decl_stmt|;
try|try
init|(
name|BufferedReader
name|reader
init|=
name|Files
operator|.
name|newBufferedReader
argument_list|(
name|fileList
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
init|)
block|{
name|String
name|line
init|=
name|reader
operator|.
name|readLine
argument_list|()
decl_stmt|;
while|while
condition|(
name|line
operator|!=
literal|null
condition|)
block|{
name|Path
name|inputFile
init|=
name|inputRoot
operator|.
name|resolve
argument_list|(
name|line
operator|.
name|trim
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|Files
operator|.
name|isReadable
argument_list|(
name|inputFile
argument_list|)
condition|)
block|{
try|try
block|{
name|tikaVisitor
operator|.
name|visitFile
argument_list|(
name|inputFile
argument_list|,
name|Files
operator|.
name|readAttributes
argument_list|(
name|inputFile
argument_list|,
name|BasicFileAttributes
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Problem with: "
operator|+
name|inputFile
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Not readable: "
operator|+
name|inputFile
argument_list|)
expr_stmt|;
block|}
name|line
operator|=
name|reader
operator|.
name|readLine
argument_list|()
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|Files
operator|.
name|walkFileTree
argument_list|(
name|inputRoot
argument_list|,
name|v
argument_list|)
expr_stmt|;
block|}
name|int
name|processed
init|=
name|v
operator|.
name|getProcessed
argument_list|()
decl_stmt|;
name|double
name|elapsedSecs
init|=
operator|(
operator|(
name|double
operator|)
operator|new
name|Date
argument_list|()
operator|.
name|getTime
argument_list|()
operator|-
operator|(
name|double
operator|)
name|start
operator|)
operator|/
operator|(
name|double
operator|)
literal|1000
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Finished processing {} files in {} seconds."
argument_list|,
name|processed
argument_list|,
name|elapsedSecs
argument_list|)
expr_stmt|;
return|return
name|processed
return|;
block|}
specifier|public
specifier|static
name|String
name|usage
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"Example usage:\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"java -cp<CP> org.apache.batch.fs.strawman.StrawManTikaAppDriver "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"<inputDir><outputDir><numThreads> "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"java -jar tika-app-X.Xjar<...commandline arguments for tika-app>\n\n"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
name|long
name|start
init|=
operator|new
name|Date
argument_list|()
operator|.
name|getTime
argument_list|()
decl_stmt|;
if|if
condition|(
name|args
operator|.
name|length
operator|<
literal|6
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|StrawManTikaAppDriver
operator|.
name|usage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Path
name|inputDir
init|=
name|Paths
operator|.
name|get
argument_list|(
name|args
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|Path
name|outputDir
init|=
name|Paths
operator|.
name|get
argument_list|(
name|args
index|[
literal|1
index|]
argument_list|)
decl_stmt|;
name|int
name|totalThreads
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|args
index|[
literal|2
index|]
argument_list|)
decl_stmt|;
name|Path
name|fileList
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|args
operator|.
name|length
operator|>
literal|3
condition|)
block|{
name|fileList
operator|=
name|Paths
operator|.
name|get
argument_list|(
name|args
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|Files
operator|.
name|isReadable
argument_list|(
name|fileList
argument_list|)
condition|)
block|{
name|fileList
operator|=
literal|null
expr_stmt|;
block|}
block|}
name|List
argument_list|<
name|String
argument_list|>
name|commandLine
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|int
name|initialParams
init|=
operator|(
name|fileList
operator|==
literal|null
operator|)
condition|?
literal|3
else|:
literal|4
decl_stmt|;
name|commandLine
operator|.
name|addAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|args
argument_list|)
operator|.
name|subList
argument_list|(
name|initialParams
argument_list|,
name|args
operator|.
name|length
argument_list|)
argument_list|)
expr_stmt|;
name|totalThreads
operator|=
operator|(
name|totalThreads
operator|<
literal|1
operator|)
condition|?
literal|1
else|:
name|totalThreads
expr_stmt|;
name|ExecutorService
name|ex
init|=
name|Executors
operator|.
name|newFixedThreadPool
argument_list|(
name|totalThreads
argument_list|)
decl_stmt|;
name|ExecutorCompletionService
argument_list|<
name|Integer
argument_list|>
name|completionService
init|=
operator|new
name|ExecutorCompletionService
argument_list|<>
argument_list|(
name|ex
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|totalThreads
condition|;
name|i
operator|++
control|)
block|{
name|StrawManTikaAppDriver
name|driver
init|=
operator|new
name|StrawManTikaAppDriver
argument_list|(
name|inputDir
argument_list|,
name|outputDir
argument_list|,
name|totalThreads
argument_list|,
name|fileList
argument_list|,
name|commandLine
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|commandLine
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
decl_stmt|;
name|completionService
operator|.
name|submit
argument_list|(
name|driver
argument_list|)
expr_stmt|;
block|}
name|int
name|totalFilesProcessed
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|totalThreads
condition|;
name|i
operator|++
control|)
block|{
try|try
block|{
name|Future
argument_list|<
name|Integer
argument_list|>
name|future
init|=
name|completionService
operator|.
name|take
argument_list|()
decl_stmt|;
if|if
condition|(
name|future
operator|!=
literal|null
condition|)
block|{
name|totalFilesProcessed
operator|+=
name|future
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|InterruptedException
decl||
name|ExecutionException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
name|double
name|elapsedSeconds
init|=
call|(
name|double
call|)
argument_list|(
operator|new
name|Date
argument_list|()
operator|.
name|getTime
argument_list|()
operator|-
name|start
argument_list|)
operator|/
operator|(
name|double
operator|)
literal|1000
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Processed {} in {} seconds"
argument_list|,
name|totalFilesProcessed
argument_list|,
name|elapsedSeconds
argument_list|)
expr_stmt|;
name|ex
operator|.
name|shutdownNow
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

