begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|batch
operator|.
name|fs
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ArrayBlockingQueue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|batch
operator|.
name|FileResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|batch
operator|.
name|FileResourceCrawler
import|;
end_import

begin_class
specifier|public
class|class
name|FSDirectoryCrawler
extends|extends
name|FileResourceCrawler
block|{
specifier|public
enum|enum
name|CRAWL_ORDER
block|{
name|SORTED
block|,
comment|//alphabetical order; necessary for cross-platform unit tests
name|RANDOM
block|,
comment|//shuffle
name|OS_ORDER
comment|//operating system chooses
block|}
specifier|private
specifier|final
name|File
name|root
decl_stmt|;
specifier|private
specifier|final
name|File
name|startDirectory
decl_stmt|;
specifier|private
specifier|final
name|Comparator
argument_list|<
name|File
argument_list|>
name|fileComparator
init|=
operator|new
name|FileNameComparator
argument_list|()
decl_stmt|;
specifier|private
name|CRAWL_ORDER
name|crawlOrder
decl_stmt|;
specifier|public
name|FSDirectoryCrawler
parameter_list|(
name|ArrayBlockingQueue
argument_list|<
name|FileResource
argument_list|>
name|fileQueue
parameter_list|,
name|int
name|numConsumers
parameter_list|,
name|File
name|root
parameter_list|,
name|CRAWL_ORDER
name|crawlOrder
parameter_list|)
block|{
name|super
argument_list|(
name|fileQueue
argument_list|,
name|numConsumers
argument_list|)
expr_stmt|;
name|this
operator|.
name|root
operator|=
name|root
expr_stmt|;
name|this
operator|.
name|startDirectory
operator|=
name|root
expr_stmt|;
name|this
operator|.
name|crawlOrder
operator|=
name|crawlOrder
expr_stmt|;
if|if
condition|(
operator|!
name|startDirectory
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Crawler couldn't find this directory:"
operator|+
name|startDirectory
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
throw|;
block|}
block|}
specifier|public
name|FSDirectoryCrawler
parameter_list|(
name|ArrayBlockingQueue
argument_list|<
name|FileResource
argument_list|>
name|fileQueue
parameter_list|,
name|int
name|numConsumers
parameter_list|,
name|File
name|root
parameter_list|,
name|File
name|startDirectory
parameter_list|,
name|CRAWL_ORDER
name|crawlOrder
parameter_list|)
block|{
name|super
argument_list|(
name|fileQueue
argument_list|,
name|numConsumers
argument_list|)
expr_stmt|;
name|this
operator|.
name|root
operator|=
name|root
expr_stmt|;
name|this
operator|.
name|startDirectory
operator|=
name|startDirectory
expr_stmt|;
name|this
operator|.
name|crawlOrder
operator|=
name|crawlOrder
expr_stmt|;
assert|assert
operator|(
name|FSUtil
operator|.
name|checkThisIsAncestorOfOrSameAsThat
argument_list|(
name|root
argument_list|,
name|startDirectory
argument_list|)
operator|)
assert|;
if|if
condition|(
operator|!
name|startDirectory
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Crawler couldn't find this directory:"
operator|+
name|startDirectory
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
throw|;
block|}
block|}
specifier|public
name|void
name|start
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|addFiles
argument_list|(
name|startDirectory
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|addFiles
parameter_list|(
name|File
name|directory
parameter_list|)
throws|throws
name|InterruptedException
block|{
if|if
condition|(
name|directory
operator|==
literal|null
operator|||
operator|!
name|directory
operator|.
name|isDirectory
argument_list|()
operator|||
operator|!
name|directory
operator|.
name|canRead
argument_list|()
condition|)
block|{
name|String
name|path
init|=
literal|"null path"
decl_stmt|;
if|if
condition|(
name|directory
operator|!=
literal|null
condition|)
block|{
name|path
operator|=
name|directory
operator|.
name|getAbsolutePath
argument_list|()
expr_stmt|;
block|}
name|logger
operator|.
name|warn
argument_list|(
literal|"FSFileAdder can't read this directory: "
operator|+
name|path
argument_list|)
expr_stmt|;
return|return;
block|}
name|List
argument_list|<
name|File
argument_list|>
name|directories
init|=
operator|new
name|ArrayList
argument_list|<
name|File
argument_list|>
argument_list|()
decl_stmt|;
name|File
index|[]
name|fileArr
init|=
name|directory
operator|.
name|listFiles
argument_list|()
decl_stmt|;
if|if
condition|(
name|fileArr
operator|==
literal|null
condition|)
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"Empty directory: "
operator|+
name|directory
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
name|List
argument_list|<
name|File
argument_list|>
name|files
init|=
operator|new
name|ArrayList
argument_list|<
name|File
argument_list|>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|fileArr
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|crawlOrder
operator|==
name|CRAWL_ORDER
operator|.
name|RANDOM
condition|)
block|{
name|Collections
operator|.
name|shuffle
argument_list|(
name|files
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|crawlOrder
operator|==
name|CRAWL_ORDER
operator|.
name|SORTED
condition|)
block|{
name|Collections
operator|.
name|sort
argument_list|(
name|files
argument_list|,
name|fileComparator
argument_list|)
expr_stmt|;
block|}
name|int
name|numFiles
init|=
literal|0
decl_stmt|;
for|for
control|(
name|File
name|f
range|:
name|files
control|)
block|{
if|if
condition|(
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|isInterrupted
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|InterruptedException
argument_list|(
literal|"file adder interrupted"
argument_list|)
throw|;
block|}
if|if
condition|(
name|f
operator|.
name|isFile
argument_list|()
condition|)
block|{
name|numFiles
operator|++
expr_stmt|;
if|if
condition|(
name|numFiles
operator|==
literal|1
condition|)
block|{
name|handleFirstFileInDirectory
argument_list|(
name|f
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|f
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|directories
operator|.
name|add
argument_list|(
name|f
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|int
name|added
init|=
name|tryToAdd
argument_list|(
operator|new
name|FSFileResource
argument_list|(
name|root
argument_list|,
name|f
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|added
operator|==
name|FileResourceCrawler
operator|.
name|STOP_NOW
condition|)
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"crawler has hit a limit: "
operator|+
name|f
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|" : "
operator|+
name|added
argument_list|)
expr_stmt|;
return|return;
block|}
name|logger
operator|.
name|debug
argument_list|(
literal|"trying to add: "
operator|+
name|f
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|" : "
operator|+
name|added
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|File
name|f
range|:
name|directories
control|)
block|{
name|addFiles
argument_list|(
name|f
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Override this if you have any special handling      * for the first actual file that the crawler comes across      * in a directory.  For example, it might be handy to call      * mkdirs() on an output directory if your FileResourceConsumers      * are writing to a file.      *      * @param f file to handle      */
specifier|public
name|void
name|handleFirstFileInDirectory
parameter_list|(
name|File
name|f
parameter_list|)
block|{
comment|//no-op
block|}
comment|//simple lexical order for the file name, we don't really care about localization.
comment|//we do want this, though, because file.compareTo behaves differently
comment|//on different OS's.
specifier|private
class|class
name|FileNameComparator
implements|implements
name|Comparator
argument_list|<
name|File
argument_list|>
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|File
name|f1
parameter_list|,
name|File
name|f2
parameter_list|)
block|{
if|if
condition|(
name|f1
operator|==
literal|null
operator|||
name|f2
operator|==
literal|null
condition|)
block|{
return|return
literal|0
return|;
block|}
return|return
name|f1
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|f2
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

