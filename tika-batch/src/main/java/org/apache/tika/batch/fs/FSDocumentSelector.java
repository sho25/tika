begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|batch
operator|.
name|fs
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|extractor
operator|.
name|DocumentSelector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|metadata
operator|.
name|Metadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|util
operator|.
name|PropsUtil
import|;
end_import

begin_comment
comment|/**  * Selector that chooses files based on their file name  * and their size, as determined by Metadata.RESOURCE_NAME_KEY and Metadata.CONTENT_LENGTH.  *<p/>  * The {@link #excludeFileName} pattern is applied first (if it isn't null).  * Then the {@link #includeFileName} pattern is applied (if it isn't null),  * and finally, the size limit is applied if it is above 0.  */
end_comment

begin_class
specifier|public
class|class
name|FSDocumentSelector
implements|implements
name|DocumentSelector
block|{
comment|//can be null!
specifier|private
specifier|final
name|Pattern
name|includeFileName
decl_stmt|;
comment|//can be null!
specifier|private
specifier|final
name|Pattern
name|excludeFileName
decl_stmt|;
specifier|private
specifier|final
name|long
name|maxFileSizeBytes
decl_stmt|;
specifier|private
specifier|final
name|long
name|minFileSizeBytes
decl_stmt|;
specifier|public
name|FSDocumentSelector
parameter_list|(
name|Pattern
name|includeFileName
parameter_list|,
name|Pattern
name|excludeFileName
parameter_list|,
name|long
name|minFileSizeBytes
parameter_list|,
name|long
name|maxFileSizeBytes
parameter_list|)
block|{
name|this
operator|.
name|includeFileName
operator|=
name|includeFileName
expr_stmt|;
name|this
operator|.
name|excludeFileName
operator|=
name|excludeFileName
expr_stmt|;
name|this
operator|.
name|minFileSizeBytes
operator|=
name|minFileSizeBytes
expr_stmt|;
name|this
operator|.
name|maxFileSizeBytes
operator|=
name|maxFileSizeBytes
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|select
parameter_list|(
name|Metadata
name|metadata
parameter_list|)
block|{
name|String
name|fName
init|=
name|metadata
operator|.
name|get
argument_list|(
name|Metadata
operator|.
name|RESOURCE_NAME_KEY
argument_list|)
decl_stmt|;
name|long
name|sz
init|=
name|PropsUtil
operator|.
name|getLong
argument_list|(
name|metadata
operator|.
name|get
argument_list|(
name|Metadata
operator|.
name|CONTENT_LENGTH
argument_list|)
argument_list|,
operator|-
literal|1L
argument_list|)
decl_stmt|;
if|if
condition|(
name|maxFileSizeBytes
operator|>
operator|-
literal|1
operator|&&
name|sz
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|sz
operator|>
name|maxFileSizeBytes
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
if|if
condition|(
name|minFileSizeBytes
operator|>
operator|-
literal|1
operator|&&
name|sz
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|sz
operator|<
name|minFileSizeBytes
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
if|if
condition|(
name|excludeFileName
operator|!=
literal|null
operator|&&
name|fName
operator|!=
literal|null
condition|)
block|{
name|Matcher
name|m
init|=
name|excludeFileName
operator|.
name|matcher
argument_list|(
name|fName
argument_list|)
decl_stmt|;
if|if
condition|(
name|m
operator|.
name|find
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
if|if
condition|(
name|includeFileName
operator|!=
literal|null
operator|&&
name|fName
operator|!=
literal|null
condition|)
block|{
name|Matcher
name|m
init|=
name|includeFileName
operator|.
name|matcher
argument_list|(
name|fName
argument_list|)
decl_stmt|;
return|return
name|m
operator|.
name|find
argument_list|()
return|;
block|}
return|return
literal|true
return|;
block|}
block|}
end_class

end_unit

