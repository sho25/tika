begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|batch
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Class that waits for input on System.in.  If this reads  * EOF or if there is an exception from the parent's IO,  * this will send a signal to shutdown the child process.  *<p>  *     This will call System.exit(-1) if the process  *     doesn't stop after {@link #pauseOnEarlyTermination}  *     milliseconds.  *</p>  *  *  */
end_comment

begin_class
specifier|public
class|class
name|Interrupter
implements|implements
name|Callable
argument_list|<
name|IFileProcessorFutureResult
argument_list|>
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|Interrupter
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|long
name|EXTRA_GRACE_PERIOD_MILLIS
init|=
literal|1000
decl_stmt|;
specifier|private
specifier|final
name|long
name|pauseOnEarlyTermination
decl_stmt|;
specifier|public
name|Interrupter
parameter_list|(
name|long
name|pauseOnEarlyTermination
parameter_list|)
block|{
name|this
operator|.
name|pauseOnEarlyTermination
operator|=
name|pauseOnEarlyTermination
expr_stmt|;
block|}
specifier|public
name|IFileProcessorFutureResult
name|call
parameter_list|()
block|{
try|try
block|{
name|InputStream
name|is
init|=
name|System
operator|.
name|in
decl_stmt|;
name|int
name|byt
init|=
name|is
operator|.
name|read
argument_list|()
decl_stmt|;
while|while
condition|(
name|byt
operator|>
operator|-
literal|1
condition|)
block|{
name|byt
operator|=
name|is
operator|.
name|read
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Exception from STDIN in CommandlineInterrupter."
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
operator|new
name|Thread
argument_list|(
operator|new
name|Doomsday
argument_list|()
argument_list|)
operator|.
name|start
argument_list|()
expr_stmt|;
return|return
operator|new
name|InterrupterFutureResult
argument_list|()
return|;
block|}
specifier|private
class|class
name|Doomsday
implements|implements
name|Runnable
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
if|if
condition|(
name|pauseOnEarlyTermination
operator|<
literal|0
condition|)
block|{
return|return;
block|}
name|long
name|start
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|long
name|elapsed
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|start
decl_stmt|;
while|while
condition|(
name|elapsed
operator|<
operator|(
name|pauseOnEarlyTermination
operator|+
name|EXTRA_GRACE_PERIOD_MILLIS
operator|)
condition|)
block|{
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|500
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
return|return;
block|}
name|elapsed
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|start
expr_stmt|;
block|}
name|LOG
operator|.
name|error
argument_list|(
literal|"Interrupter timed out; now calling System.exit."
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

