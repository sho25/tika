begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|batch
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|NumberFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|util
operator|.
name|DurationFormatUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Basic class to use for reporting status from both the crawler and the consumers.  * This wakes up roughly every {@link #sleepMillis} and log.info's a status report.  */
end_comment

begin_class
specifier|public
class|class
name|StatusReporter
implements|implements
name|Callable
argument_list|<
name|IFileProcessorFutureResult
argument_list|>
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|StatusReporter
operator|.
name|class
argument_list|)
decl_stmt|;
comment|//require references to these so that the
comment|//StatusReporter can query them when it wakes up
specifier|private
specifier|final
name|ConsumersManager
name|consumersManager
decl_stmt|;
specifier|private
specifier|final
name|FileResourceCrawler
name|crawler
decl_stmt|;
comment|//local time that the StatusReporter started
specifier|private
specifier|final
name|long
name|start
decl_stmt|;
comment|//how long to sleep between reporting intervals
specifier|private
name|long
name|sleepMillis
init|=
literal|1000
decl_stmt|;
comment|//how long before considering a parse "stale" (potentially hung forever)
specifier|private
name|long
name|staleThresholdMillis
init|=
literal|100000
decl_stmt|;
specifier|private
specifier|volatile
name|boolean
name|isShuttingDown
init|=
literal|false
decl_stmt|;
comment|/**      * Initialize with the crawler and consumers      *      * @param crawler   crawler to ping at intervals      * @param consumersManager consumers to ping at intervals      */
specifier|public
name|StatusReporter
parameter_list|(
name|FileResourceCrawler
name|crawler
parameter_list|,
name|ConsumersManager
name|consumersManager
parameter_list|)
block|{
name|this
operator|.
name|consumersManager
operator|=
name|consumersManager
expr_stmt|;
name|this
operator|.
name|crawler
operator|=
name|crawler
expr_stmt|;
name|start
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
block|}
comment|/**      * Override for different behavior.      *<p/>      * This reports the string at the info level to this class' logger.      *      * @param s string to report      */
specifier|protected
name|void
name|report
parameter_list|(
name|String
name|s
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
comment|/**      * Startup the reporter.      */
specifier|public
name|IFileProcessorFutureResult
name|call
parameter_list|()
block|{
name|NumberFormat
name|numberFormat
init|=
name|NumberFormat
operator|.
name|getNumberInstance
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|)
decl_stmt|;
try|try
block|{
while|while
condition|(
literal|true
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|sleepMillis
argument_list|)
expr_stmt|;
name|int
name|cnt
init|=
name|getRoughCountConsumed
argument_list|()
decl_stmt|;
name|int
name|exceptions
init|=
name|getRoughCountExceptions
argument_list|()
decl_stmt|;
name|long
name|elapsed
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|start
decl_stmt|;
name|double
name|elapsedSecs
init|=
operator|(
name|double
operator|)
name|elapsed
operator|/
operator|(
name|double
operator|)
literal|1000
decl_stmt|;
name|int
name|avg
init|=
operator|(
name|elapsedSecs
operator|>
literal|5
operator|||
name|cnt
operator|>
literal|100
operator|)
condition|?
call|(
name|int
call|)
argument_list|(
operator|(
name|double
operator|)
name|cnt
operator|/
name|elapsedSecs
argument_list|)
else|:
operator|-
literal|1
decl_stmt|;
name|String
name|elapsedString
init|=
name|DurationFormatUtils
operator|.
name|formatMillis
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|start
argument_list|)
decl_stmt|;
name|String
name|docsPerSec
init|=
name|avg
operator|>
operator|-
literal|1
condition|?
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|" (%s docs per sec)"
argument_list|,
name|numberFormat
operator|.
name|format
argument_list|(
name|avg
argument_list|)
argument_list|)
else|:
literal|""
decl_stmt|;
name|String
name|msg
init|=
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"Processed %s documents in %s%s."
argument_list|,
name|numberFormat
operator|.
name|format
argument_list|(
name|cnt
argument_list|)
argument_list|,
name|elapsedString
argument_list|,
name|docsPerSec
argument_list|)
decl_stmt|;
name|report
argument_list|(
name|msg
argument_list|)
expr_stmt|;
if|if
condition|(
name|exceptions
operator|==
literal|1
condition|)
block|{
name|msg
operator|=
literal|"There has been one handled exception."
expr_stmt|;
block|}
else|else
block|{
name|msg
operator|=
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"There have been %s handled exceptions."
argument_list|,
name|numberFormat
operator|.
name|format
argument_list|(
name|exceptions
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|report
argument_list|(
name|msg
argument_list|)
expr_stmt|;
name|reportStale
argument_list|()
expr_stmt|;
name|int
name|stillAlive
init|=
name|getStillAlive
argument_list|()
decl_stmt|;
if|if
condition|(
name|stillAlive
operator|==
literal|1
condition|)
block|{
name|msg
operator|=
literal|"There is one file processor still active."
expr_stmt|;
block|}
else|else
block|{
name|msg
operator|=
literal|"There are "
operator|+
name|numberFormat
operator|.
name|format
argument_list|(
name|stillAlive
argument_list|)
operator|+
literal|" file processors still active."
expr_stmt|;
block|}
name|report
argument_list|(
name|msg
argument_list|)
expr_stmt|;
name|int
name|crawled
init|=
name|crawler
operator|.
name|getConsidered
argument_list|()
decl_stmt|;
name|int
name|added
init|=
name|crawler
operator|.
name|getAdded
argument_list|()
decl_stmt|;
if|if
condition|(
name|crawled
operator|==
literal|1
condition|)
block|{
name|msg
operator|=
literal|"The directory crawler has considered 1 file,"
expr_stmt|;
block|}
else|else
block|{
name|msg
operator|=
literal|"The directory crawler has considered "
operator|+
name|numberFormat
operator|.
name|format
argument_list|(
name|crawled
argument_list|)
operator|+
literal|" files, "
expr_stmt|;
block|}
if|if
condition|(
name|added
operator|==
literal|1
condition|)
block|{
name|msg
operator|+=
literal|"and it has added 1 file."
expr_stmt|;
block|}
else|else
block|{
name|msg
operator|+=
literal|"and it has added "
operator|+
name|numberFormat
operator|.
name|format
argument_list|(
name|crawler
operator|.
name|getAdded
argument_list|()
argument_list|)
operator|+
literal|" files."
expr_stmt|;
block|}
name|msg
operator|+=
literal|"\n"
expr_stmt|;
name|report
argument_list|(
name|msg
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|crawler
operator|.
name|isActive
argument_list|()
condition|)
block|{
name|msg
operator|=
literal|"The directory crawler has completed its crawl.\n"
expr_stmt|;
name|report
argument_list|(
name|msg
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isShuttingDown
condition|)
block|{
name|msg
operator|=
literal|"Process is shutting down now."
expr_stmt|;
name|report
argument_list|(
name|msg
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
comment|//swallow
block|}
return|return
operator|new
name|StatusReporterFutureResult
argument_list|()
return|;
block|}
comment|/**      * Set the amount of time to sleep between reports.      * @param sleepMillis length to sleep btwn reports in milliseconds      */
specifier|public
name|void
name|setSleepMillis
parameter_list|(
name|long
name|sleepMillis
parameter_list|)
block|{
name|this
operator|.
name|sleepMillis
operator|=
name|sleepMillis
expr_stmt|;
block|}
comment|/**      * Set the amount of time in milliseconds to use as the threshold for determining      * a stale parse.      *      * @param staleThresholdMillis threshold for determining whether or not to report a stale      */
specifier|public
name|void
name|setStaleThresholdMillis
parameter_list|(
name|long
name|staleThresholdMillis
parameter_list|)
block|{
name|this
operator|.
name|staleThresholdMillis
operator|=
name|staleThresholdMillis
expr_stmt|;
block|}
specifier|private
name|void
name|reportStale
parameter_list|()
block|{
for|for
control|(
name|FileResourceConsumer
name|consumer
range|:
name|consumersManager
operator|.
name|getConsumers
argument_list|()
control|)
block|{
name|FileStarted
name|fs
init|=
name|consumer
operator|.
name|getCurrentFile
argument_list|()
decl_stmt|;
if|if
condition|(
name|fs
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
name|long
name|elapsed
init|=
name|fs
operator|.
name|getElapsedMillis
argument_list|()
decl_stmt|;
if|if
condition|(
name|elapsed
operator|>
name|staleThresholdMillis
condition|)
block|{
name|String
name|elapsedString
init|=
name|Double
operator|.
name|toString
argument_list|(
operator|(
name|double
operator|)
name|elapsed
operator|/
operator|(
name|double
operator|)
literal|1000
argument_list|)
decl_stmt|;
name|report
argument_list|(
literal|"A thread has been working on "
operator|+
name|fs
operator|.
name|getResourceId
argument_list|()
operator|+
literal|" for "
operator|+
name|elapsedString
operator|+
literal|" seconds."
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/*      * This returns a rough (unsynchronized) count of resources consumed.      */
specifier|private
name|int
name|getRoughCountConsumed
parameter_list|()
block|{
name|int
name|ret
init|=
literal|0
decl_stmt|;
for|for
control|(
name|FileResourceConsumer
name|consumer
range|:
name|consumersManager
operator|.
name|getConsumers
argument_list|()
control|)
block|{
name|ret
operator|+=
name|consumer
operator|.
name|getNumResourcesConsumed
argument_list|()
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
specifier|private
name|int
name|getStillAlive
parameter_list|()
block|{
name|int
name|ret
init|=
literal|0
decl_stmt|;
for|for
control|(
name|FileResourceConsumer
name|consumer
range|:
name|consumersManager
operator|.
name|getConsumers
argument_list|()
control|)
block|{
if|if
condition|(
name|consumer
operator|.
name|isStillActive
argument_list|()
condition|)
block|{
name|ret
operator|++
expr_stmt|;
block|}
block|}
return|return
name|ret
return|;
block|}
comment|/**      * This returns a rough (unsynchronized) count of caught/handled exceptions.      * @return rough count of exceptions      */
specifier|public
name|int
name|getRoughCountExceptions
parameter_list|()
block|{
name|int
name|ret
init|=
literal|0
decl_stmt|;
for|for
control|(
name|FileResourceConsumer
name|consumer
range|:
name|consumersManager
operator|.
name|getConsumers
argument_list|()
control|)
block|{
name|ret
operator|+=
name|consumer
operator|.
name|getNumHandledExceptions
argument_list|()
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
comment|/**      * Set whether the main process is in the process of shutting down.      * @param isShuttingDown      */
specifier|public
name|void
name|setIsShuttingDown
parameter_list|(
name|boolean
name|isShuttingDown
parameter_list|)
block|{
name|this
operator|.
name|isShuttingDown
operator|=
name|isShuttingDown
expr_stmt|;
block|}
block|}
end_class

end_unit

