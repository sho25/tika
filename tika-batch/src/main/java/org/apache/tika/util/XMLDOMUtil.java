begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|util
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|NamedNodeMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Node
import|;
end_import

begin_class
specifier|public
class|class
name|XMLDOMUtil
block|{
comment|/**      * This grabs the attributes from a dom node and overwrites those values with those      * specified by the overwrite map.      *      * @param node node for building      * @param overwrite map of attributes to overwrite      * @return map of attributes      */
specifier|public
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|mapifyAttrs
parameter_list|(
name|Node
name|node
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|overwrite
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|NamedNodeMap
name|nnMap
init|=
name|node
operator|.
name|getAttributes
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nnMap
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Node
name|attr
init|=
name|nnMap
operator|.
name|item
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
name|attr
operator|.
name|getNodeName
argument_list|()
argument_list|,
name|attr
operator|.
name|getNodeValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|overwrite
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|e
range|:
name|overwrite
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|map
operator|.
name|put
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|,
name|e
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|map
return|;
block|}
comment|/**      * Get an int value.  Try the runtime attributes first and then back off to      * the document element.  Throw a RuntimeException if the attribute is not      * found or if the value is not parseable as an int.      *      * @param attrName attribute name to find      * @param runtimeAttributes runtime attributes      * @param docElement correct element that should have specified attribute      * @return specified int value      */
specifier|public
specifier|static
name|int
name|getInt
parameter_list|(
name|String
name|attrName
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|runtimeAttributes
parameter_list|,
name|Node
name|docElement
parameter_list|)
block|{
name|String
name|stringValue
init|=
name|getStringValue
argument_list|(
name|attrName
argument_list|,
name|runtimeAttributes
argument_list|,
name|docElement
argument_list|)
decl_stmt|;
if|if
condition|(
name|stringValue
operator|!=
literal|null
condition|)
block|{
try|try
block|{
return|return
name|Integer
operator|.
name|parseInt
argument_list|(
name|stringValue
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
comment|//swallow
block|}
block|}
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Need to specify a parseable int value in -- "
operator|+
name|attrName
operator|+
literal|" -- in commandline or in config file!"
argument_list|)
throw|;
block|}
comment|/**      * Get a long value.  Try the runtime attributes first and then back off to      * the document element.  Throw a RuntimeException if the attribute is not      * found or if the value is not parseable as a long.      *      * @param attrName attribute name to find      * @param runtimeAttributes runtime attributes      * @param docElement correct element that should have specified attribute      * @return specified long value      */
specifier|public
specifier|static
name|long
name|getLong
parameter_list|(
name|String
name|attrName
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|runtimeAttributes
parameter_list|,
name|Node
name|docElement
parameter_list|)
block|{
name|String
name|stringValue
init|=
name|getStringValue
argument_list|(
name|attrName
argument_list|,
name|runtimeAttributes
argument_list|,
name|docElement
argument_list|)
decl_stmt|;
if|if
condition|(
name|stringValue
operator|!=
literal|null
condition|)
block|{
try|try
block|{
return|return
name|Long
operator|.
name|parseLong
argument_list|(
name|stringValue
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
comment|//swallow
block|}
block|}
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Need to specify a \"long\" value in -- "
operator|+
name|attrName
operator|+
literal|" -- in commandline or in config file!"
argument_list|)
throw|;
block|}
specifier|private
specifier|static
name|String
name|getStringValue
parameter_list|(
name|String
name|attrName
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|runtimeAttributes
parameter_list|,
name|Node
name|docElement
parameter_list|)
block|{
name|String
name|stringValue
init|=
name|runtimeAttributes
operator|.
name|get
argument_list|(
name|attrName
argument_list|)
decl_stmt|;
if|if
condition|(
name|stringValue
operator|==
literal|null
condition|)
block|{
name|Node
name|staleNode
init|=
name|docElement
operator|.
name|getAttributes
argument_list|()
operator|.
name|getNamedItem
argument_list|(
name|attrName
argument_list|)
decl_stmt|;
if|if
condition|(
name|staleNode
operator|!=
literal|null
condition|)
block|{
name|stringValue
operator|=
name|staleNode
operator|.
name|getNodeValue
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|stringValue
return|;
block|}
block|}
end_class

end_unit

