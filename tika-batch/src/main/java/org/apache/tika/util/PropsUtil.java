begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|util
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_comment
comment|/**  * Utility class to handle properties.  If the value is null,  * or if there is a parser error, the defaultMissing value will be returned.  */
end_comment

begin_class
specifier|public
class|class
name|PropsUtil
block|{
comment|/**      * Parses v.  If there is a problem, this returns defaultMissing.      *      * @param v string to parse      * @param defaultMissing value to return if value is null or unparseable      * @return parsed value      */
specifier|public
specifier|static
name|Boolean
name|getBoolean
parameter_list|(
name|String
name|v
parameter_list|,
name|Boolean
name|defaultMissing
parameter_list|)
block|{
if|if
condition|(
name|v
operator|==
literal|null
operator|||
name|v
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
name|defaultMissing
return|;
block|}
if|if
condition|(
name|v
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|)
operator|.
name|equals
argument_list|(
literal|"true"
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|v
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|)
operator|.
name|equals
argument_list|(
literal|"false"
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
name|defaultMissing
return|;
block|}
comment|/**      * Parses v.  If there is a problem, this returns defaultMissing.      *      * @param v string to parse      * @param defaultMissing value to return if value is null or unparseable      * @return parsed value      */
specifier|public
specifier|static
name|Integer
name|getInt
parameter_list|(
name|String
name|v
parameter_list|,
name|Integer
name|defaultMissing
parameter_list|)
block|{
if|if
condition|(
name|v
operator|==
literal|null
operator|||
name|v
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
name|defaultMissing
return|;
block|}
try|try
block|{
return|return
name|Integer
operator|.
name|parseInt
argument_list|(
name|v
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
comment|//NO OP
block|}
return|return
name|defaultMissing
return|;
block|}
comment|/**      * Parses v.  If there is a problem, this returns defaultMissing.      *      * @param v string to parse      * @param defaultMissing value to return if value is null or unparseable      * @return parsed value      */
specifier|public
specifier|static
name|Long
name|getLong
parameter_list|(
name|String
name|v
parameter_list|,
name|Long
name|defaultMissing
parameter_list|)
block|{
if|if
condition|(
name|v
operator|==
literal|null
operator|||
name|v
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
name|defaultMissing
return|;
block|}
try|try
block|{
return|return
name|Long
operator|.
name|parseLong
argument_list|(
name|v
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
comment|//swallow
block|}
return|return
name|defaultMissing
return|;
block|}
comment|/**      * Parses v.  If there is a problem, this returns defaultMissing.      *      * @param v string to parse      * @param defaultMissing value to return if value is null or unparseable      * @return parsed value      */
specifier|public
specifier|static
name|File
name|getFile
parameter_list|(
name|String
name|v
parameter_list|,
name|File
name|defaultMissing
parameter_list|)
block|{
if|if
condition|(
name|v
operator|==
literal|null
operator|||
name|v
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
name|defaultMissing
return|;
block|}
comment|//trim initial and final " if they exist
if|if
condition|(
name|v
operator|.
name|startsWith
argument_list|(
literal|"\""
argument_list|)
condition|)
block|{
name|v
operator|=
name|v
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|v
operator|.
name|endsWith
argument_list|(
literal|"\""
argument_list|)
condition|)
block|{
name|v
operator|=
name|v
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|v
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|File
argument_list|(
name|v
argument_list|)
return|;
block|}
comment|/**      * Parses v.  If v is null, this returns defaultMissing.      *      * @param v string to parse      * @param defaultMissing value to return if value is null      * @return parsed value      */
specifier|public
specifier|static
name|String
name|getString
parameter_list|(
name|String
name|v
parameter_list|,
name|String
name|defaultMissing
parameter_list|)
block|{
if|if
condition|(
name|v
operator|==
literal|null
condition|)
block|{
return|return
name|defaultMissing
return|;
block|}
return|return
name|v
return|;
block|}
block|}
end_class

end_unit

