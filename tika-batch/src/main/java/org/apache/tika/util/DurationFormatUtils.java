begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|util
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_comment
comment|/**  * Functionality and naming conventions (roughly) copied from org.apache.commons.lang3  * so that we didn't have to add another dependency.  */
end_comment

begin_class
specifier|public
class|class
name|DurationFormatUtils
block|{
specifier|public
specifier|static
name|String
name|formatMillis
parameter_list|(
name|long
name|duration
parameter_list|)
block|{
name|duration
operator|=
name|Math
operator|.
name|abs
argument_list|(
name|duration
argument_list|)
expr_stmt|;
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|int
name|secs
init|=
call|(
name|int
call|)
argument_list|(
name|duration
operator|/
literal|1000
argument_list|)
operator|%
literal|60
decl_stmt|;
name|int
name|mins
init|=
call|(
name|int
call|)
argument_list|(
operator|(
name|duration
operator|/
operator|(
literal|1000
operator|*
literal|60
operator|)
operator|)
operator|%
literal|60
argument_list|)
decl_stmt|;
name|int
name|hrs
init|=
call|(
name|int
call|)
argument_list|(
operator|(
name|duration
operator|/
operator|(
literal|1000
operator|*
literal|60
operator|*
literal|60
operator|)
operator|)
operator|%
literal|24
argument_list|)
decl_stmt|;
name|int
name|days
init|=
call|(
name|int
call|)
argument_list|(
operator|(
name|duration
operator|/
operator|(
literal|1000
operator|*
literal|60
operator|*
literal|60
operator|*
literal|24
operator|)
operator|)
operator|%
literal|7
argument_list|)
decl_stmt|;
comment|//sb.append(millis + " milliseconds");
name|addUnitString
argument_list|(
name|sb
argument_list|,
name|days
argument_list|,
literal|"day"
argument_list|)
expr_stmt|;
name|addUnitString
argument_list|(
name|sb
argument_list|,
name|hrs
argument_list|,
literal|"hour"
argument_list|)
expr_stmt|;
name|addUnitString
argument_list|(
name|sb
argument_list|,
name|mins
argument_list|,
literal|"minute"
argument_list|)
expr_stmt|;
name|addUnitString
argument_list|(
name|sb
argument_list|,
name|secs
argument_list|,
literal|"second"
argument_list|)
expr_stmt|;
if|if
condition|(
name|duration
operator|<
literal|1000
condition|)
block|{
name|addUnitString
argument_list|(
name|sb
argument_list|,
name|duration
argument_list|,
literal|"millisecond"
argument_list|)
expr_stmt|;
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|private
specifier|static
name|void
name|addUnitString
parameter_list|(
name|StringBuilder
name|sb
parameter_list|,
name|long
name|unit
parameter_list|,
name|String
name|unitString
parameter_list|)
block|{
comment|//only add unit if>= 1
if|if
condition|(
name|unit
operator|==
literal|1
condition|)
block|{
name|addComma
argument_list|(
name|sb
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"1 "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|unitString
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|unit
operator|>
literal|1
condition|)
block|{
name|addComma
argument_list|(
name|sb
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|unit
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|unitString
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"s"
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|void
name|addComma
parameter_list|(
name|StringBuilder
name|sb
parameter_list|)
block|{
if|if
condition|(
name|sb
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

