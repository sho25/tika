begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|server
package|;
end_package

begin_import
import|import
name|au
operator|.
name|com
operator|.
name|bytecode
operator|.
name|opencsv
operator|.
name|CSVReader
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|jersey
operator|.
name|test
operator|.
name|framework
operator|.
name|JerseyTest
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Reader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_class
specifier|public
class|class
name|MetadataResourceTest
extends|extends
name|JerseyTest
block|{
specifier|private
specifier|static
specifier|final
name|String
name|META_PATH
init|=
literal|"/meta"
decl_stmt|;
specifier|public
name|MetadataResourceTest
parameter_list|()
throws|throws
name|Exception
block|{
name|super
argument_list|(
literal|"org.apache.tika.server"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSimpleWord
parameter_list|()
throws|throws
name|Exception
block|{
name|Reader
name|reader
init|=
name|resource
argument_list|()
operator|.
name|path
argument_list|(
name|META_PATH
argument_list|)
operator|.
name|type
argument_list|(
literal|"application/msword"
argument_list|)
operator|.
name|put
argument_list|(
name|Reader
operator|.
name|class
argument_list|,
name|ClassLoader
operator|.
name|getSystemResourceAsStream
argument_list|(
name|TikaResourceTest
operator|.
name|TEST_DOC
argument_list|)
argument_list|)
decl_stmt|;
name|CSVReader
name|csvReader
init|=
operator|new
name|CSVReader
argument_list|(
name|reader
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|metadata
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|String
index|[]
name|nextLine
decl_stmt|;
while|while
condition|(
operator|(
name|nextLine
operator|=
name|csvReader
operator|.
name|readNext
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
name|metadata
operator|.
name|put
argument_list|(
name|nextLine
index|[
literal|0
index|]
argument_list|,
name|nextLine
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
name|assertNotNull
argument_list|(
name|metadata
operator|.
name|get
argument_list|(
literal|"Author"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Maxim Valyanskiy"
argument_list|,
name|metadata
operator|.
name|get
argument_list|(
literal|"Author"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/*   @Test   public void testXLSX() throws Exception {     Reader reader =             webResource.path(META_PATH)             .type("application/vnd.openxmlformats-officedocument.spreadsheetml.sheet")                     .header("File-Name", TikaResourceTest.TEST_XLSX)                     .put(Reader.class, ClassLoader.getSystemResourceAsStream(TikaResourceTest.TEST_XLSX));      CSVReader csvReader = new CSVReader(reader);      final Map< String, String> metadataActual = new HashMap< String, String> (),             metadataExpected = new HashMap< String, String> ();      String[] nextLine;     while ((nextLine = csvReader.readNext()) != null) {       metadataActual.put(nextLine[0], nextLine[1]);     }     metadataExpected.put("Author", "jet");     metadataExpected.put("Application-Name", "Microsoft Excel");     metadataExpected.put("description", "Тестовый комментарий");     metadataExpected.put("resourceName", TikaResourceTest.TEST_XLSX);     metadataExpected.put("protected", "false");     metadataExpected.put("Creation-Date", "2010-05-11T12:37:42Z");     metadataExpected.put("Last-Modified", "2010-05-11T14:46:20Z");     assertEquals( true, metadataActual.size()>= metadataExpected.size() );     for ( final Map.Entry< String, String> field : metadataExpected.entrySet() ) {       final String key = field.getKey(), valueActual = metadataActual.get(key), valueExpected = field.getValue();       assertNotNull( valueActual );       assertEquals( valueExpected, valueActual );     }   } */
block|}
end_class

end_unit

