begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|server
package|;
end_package

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|jersey
operator|.
name|api
operator|.
name|client
operator|.
name|ClientResponse
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|jersey
operator|.
name|test
operator|.
name|framework
operator|.
name|JerseyTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|codec
operator|.
name|digest
operator|.
name|DigestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|compress
operator|.
name|archivers
operator|.
name|ArchiveEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|compress
operator|.
name|archivers
operator|.
name|ArchiveInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|compress
operator|.
name|archivers
operator|.
name|tar
operator|.
name|TarArchiveInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|compress
operator|.
name|archivers
operator|.
name|zip
operator|.
name|ZipArchiveInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_class
specifier|public
class|class
name|UnpackerResourceTest
extends|extends
name|JerseyTest
block|{
specifier|private
specifier|static
specifier|final
name|String
name|UNPACKER_PATH
init|=
literal|"/unpacker"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|ALL_PATH
init|=
literal|"/all"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|TEST_DOC_WAV
init|=
literal|"Doc1_ole.doc"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|WAV1_MD5
init|=
literal|"bdd0a78a54968e362445364f95d8dc96"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|WAV1_NAME
init|=
literal|"_1310388059/MSj00974840000[1].wav"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|WAV2_MD5
init|=
literal|"3bbd42fb1ac0e46a95350285f16d9596"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|WAV2_NAME
init|=
literal|"_1310388058/MSj00748450000[1].wav"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|APPLICATION_MSWORD
init|=
literal|"application/msword"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|NO_CONTENT
init|=
literal|204
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|JPG_NAME
init|=
literal|"image1.jpg"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|XSL_IMAGE1_MD5
init|=
literal|"68ead8f4995a3555f48a2f738b2b0c3d"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|JPG_MD5
init|=
name|XSL_IMAGE1_MD5
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|JPG2_NAME
init|=
literal|"image2.jpg"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|JPG2_MD5
init|=
literal|"b27a41d12c646d7fc4f3826cf8183c68"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|TEST_DOCX_IMAGE
init|=
literal|"2pic.docx"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|DOCX_IMAGE1_MD5
init|=
literal|"5516590467b069fa59397432677bad4d"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|DOCX_IMAGE2_MD5
init|=
literal|"a5dd81567427070ce0a2ff3e3ef13a4c"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|DOCX_IMAGE1_NAME
init|=
literal|"image1.jpeg"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|DOCX_IMAGE2_NAME
init|=
literal|"image2.jpeg"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|DOCX_EXE1_MD5
init|=
literal|"d71ffa0623014df725f8fd2710de4411"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|DOCX_EXE1_NAME
init|=
literal|"GMapTool.exe"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|DOCX_EXE2_MD5
init|=
literal|"2485435c7c22d35f2de9b4c98c0c2e1a"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|DOCX_EXE2_NAME
init|=
literal|"Setup.exe"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|XSLX_IMAGE1_NAME
init|=
literal|"image1.jpeg"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|XSLX_IMAGE2_NAME
init|=
literal|"image2.jpeg"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|XSL_IMAGE2_MD5
init|=
literal|"8969288f4245120e7c3870287cce0ff3"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|COVER_JPG_MD5SUM
init|=
literal|"4d236dab6e711735ed11686641b1fba9"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|COVER_JPG
init|=
literal|"cover.jpg"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|APPLICATION_XML
init|=
literal|"application/xml"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|CONTENT_TYPE
init|=
literal|"Content-type"
decl_stmt|;
specifier|public
name|UnpackerResourceTest
parameter_list|()
throws|throws
name|Exception
block|{
name|super
argument_list|(
literal|"org.apache.tika.server"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDocWAV
parameter_list|()
throws|throws
name|Exception
block|{
name|InputStream
name|is
init|=
name|resource
argument_list|()
operator|.
name|path
argument_list|(
name|UNPACKER_PATH
argument_list|)
operator|.
name|type
argument_list|(
name|APPLICATION_MSWORD
argument_list|)
operator|.
name|put
argument_list|(
name|InputStream
operator|.
name|class
argument_list|,
name|ClassLoader
operator|.
name|getSystemResourceAsStream
argument_list|(
name|TEST_DOC_WAV
argument_list|)
argument_list|)
decl_stmt|;
name|ArchiveInputStream
name|zip
init|=
operator|new
name|ZipArchiveInputStream
argument_list|(
name|is
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|data
init|=
name|readArchive
argument_list|(
name|zip
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|WAV1_MD5
argument_list|,
name|data
operator|.
name|get
argument_list|(
name|WAV1_NAME
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|WAV2_MD5
argument_list|,
name|data
operator|.
name|get
argument_list|(
name|WAV2_NAME
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|data
operator|.
name|containsKey
argument_list|(
name|UnpackerResource
operator|.
name|TEXT_FILENAME
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDocWAVText
parameter_list|()
throws|throws
name|Exception
block|{
name|InputStream
name|is
init|=
name|resource
argument_list|()
operator|.
name|path
argument_list|(
name|ALL_PATH
argument_list|)
operator|.
name|type
argument_list|(
name|APPLICATION_MSWORD
argument_list|)
operator|.
name|put
argument_list|(
name|InputStream
operator|.
name|class
argument_list|,
name|ClassLoader
operator|.
name|getSystemResourceAsStream
argument_list|(
name|TEST_DOC_WAV
argument_list|)
argument_list|)
decl_stmt|;
name|ArchiveInputStream
name|zip
init|=
operator|new
name|ZipArchiveInputStream
argument_list|(
name|is
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|data
init|=
name|readArchive
argument_list|(
name|zip
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|WAV1_MD5
argument_list|,
name|data
operator|.
name|get
argument_list|(
name|WAV1_NAME
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|WAV2_MD5
argument_list|,
name|data
operator|.
name|get
argument_list|(
name|WAV2_NAME
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|data
operator|.
name|containsKey
argument_list|(
name|UnpackerResource
operator|.
name|TEXT_FILENAME
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDocPicture
parameter_list|()
throws|throws
name|Exception
block|{
name|InputStream
name|is
init|=
name|resource
argument_list|()
operator|.
name|path
argument_list|(
name|UNPACKER_PATH
argument_list|)
operator|.
name|type
argument_list|(
name|APPLICATION_MSWORD
argument_list|)
operator|.
name|put
argument_list|(
name|InputStream
operator|.
name|class
argument_list|,
name|ClassLoader
operator|.
name|getSystemResourceAsStream
argument_list|(
name|TEST_DOC_WAV
argument_list|)
argument_list|)
decl_stmt|;
name|ZipArchiveInputStream
name|zip
init|=
operator|new
name|ZipArchiveInputStream
argument_list|(
name|is
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|data
init|=
name|readArchive
argument_list|(
name|zip
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|JPG_MD5
argument_list|,
name|data
operator|.
name|get
argument_list|(
name|JPG_NAME
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDocPictureNoOle
parameter_list|()
throws|throws
name|Exception
block|{
name|InputStream
name|is
init|=
name|resource
argument_list|()
operator|.
name|path
argument_list|(
name|UNPACKER_PATH
argument_list|)
operator|.
name|type
argument_list|(
name|APPLICATION_MSWORD
argument_list|)
operator|.
name|put
argument_list|(
name|InputStream
operator|.
name|class
argument_list|,
name|ClassLoader
operator|.
name|getSystemResourceAsStream
argument_list|(
literal|"2pic.doc"
argument_list|)
argument_list|)
decl_stmt|;
name|ZipArchiveInputStream
name|zip
init|=
operator|new
name|ZipArchiveInputStream
argument_list|(
name|is
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|data
init|=
name|readArchive
argument_list|(
name|zip
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|JPG2_MD5
argument_list|,
name|data
operator|.
name|get
argument_list|(
name|JPG2_NAME
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testImageDOCX
parameter_list|()
throws|throws
name|Exception
block|{
name|InputStream
name|is
init|=
name|resource
argument_list|()
operator|.
name|path
argument_list|(
name|UNPACKER_PATH
argument_list|)
operator|.
name|put
argument_list|(
name|InputStream
operator|.
name|class
argument_list|,
name|ClassLoader
operator|.
name|getSystemResourceAsStream
argument_list|(
name|TEST_DOCX_IMAGE
argument_list|)
argument_list|)
decl_stmt|;
name|ZipArchiveInputStream
name|zip
init|=
operator|new
name|ZipArchiveInputStream
argument_list|(
name|is
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|data
init|=
name|readArchive
argument_list|(
name|zip
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|DOCX_IMAGE1_MD5
argument_list|,
name|data
operator|.
name|get
argument_list|(
name|DOCX_IMAGE1_NAME
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|DOCX_IMAGE2_MD5
argument_list|,
name|data
operator|.
name|get
argument_list|(
name|DOCX_IMAGE2_NAME
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|test415
parameter_list|()
throws|throws
name|Exception
block|{
name|ClientResponse
name|cr
init|=
name|resource
argument_list|()
operator|.
name|path
argument_list|(
name|UNPACKER_PATH
argument_list|)
operator|.
name|type
argument_list|(
literal|"xxx/xxx"
argument_list|)
operator|.
name|put
argument_list|(
name|ClientResponse
operator|.
name|class
argument_list|,
name|ClassLoader
operator|.
name|getSystemResourceAsStream
argument_list|(
name|TEST_DOC_WAV
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|415
argument_list|,
name|cr
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testExeDOCX
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|TEST_DOCX_EXE
init|=
literal|"2exe.docx"
decl_stmt|;
name|InputStream
name|is
init|=
name|resource
argument_list|()
operator|.
name|path
argument_list|(
name|UNPACKER_PATH
argument_list|)
operator|.
name|put
argument_list|(
name|InputStream
operator|.
name|class
argument_list|,
name|ClassLoader
operator|.
name|getSystemResourceAsStream
argument_list|(
name|TEST_DOCX_EXE
argument_list|)
argument_list|)
decl_stmt|;
name|ZipArchiveInputStream
name|zip
init|=
operator|new
name|ZipArchiveInputStream
argument_list|(
name|is
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|data
init|=
name|readArchive
argument_list|(
name|zip
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|DOCX_EXE1_MD5
argument_list|,
name|data
operator|.
name|get
argument_list|(
name|DOCX_EXE1_NAME
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|DOCX_EXE2_MD5
argument_list|,
name|data
operator|.
name|get
argument_list|(
name|DOCX_EXE2_NAME
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testImageXSL
parameter_list|()
throws|throws
name|Exception
block|{
name|InputStream
name|is
init|=
name|resource
argument_list|()
operator|.
name|path
argument_list|(
name|UNPACKER_PATH
argument_list|)
operator|.
name|put
argument_list|(
name|InputStream
operator|.
name|class
argument_list|,
name|ClassLoader
operator|.
name|getSystemResourceAsStream
argument_list|(
literal|"pic.xls"
argument_list|)
argument_list|)
decl_stmt|;
name|ZipArchiveInputStream
name|zip
init|=
operator|new
name|ZipArchiveInputStream
argument_list|(
name|is
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|data
init|=
name|readArchive
argument_list|(
name|zip
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|XSL_IMAGE1_MD5
argument_list|,
name|data
operator|.
name|get
argument_list|(
literal|"0.jpg"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|XSL_IMAGE2_MD5
argument_list|,
name|data
operator|.
name|get
argument_list|(
literal|"1.jpg"
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|readArchive
parameter_list|(
name|ArchiveInputStream
name|zip
parameter_list|)
throws|throws
name|IOException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|data
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|ArchiveEntry
name|entry
init|=
name|zip
operator|.
name|getNextEntry
argument_list|()
decl_stmt|;
if|if
condition|(
name|entry
operator|==
literal|null
condition|)
block|{
break|break;
block|}
name|ByteArrayOutputStream
name|bos
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|IOUtils
operator|.
name|copy
argument_list|(
name|zip
argument_list|,
name|bos
argument_list|)
expr_stmt|;
name|data
operator|.
name|put
argument_list|(
name|entry
operator|.
name|getName
argument_list|()
argument_list|,
name|DigestUtils
operator|.
name|md5Hex
argument_list|(
name|bos
operator|.
name|toByteArray
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|data
return|;
block|}
specifier|private
specifier|static
name|String
name|readArchiveText
parameter_list|(
name|ArchiveInputStream
name|zip
parameter_list|)
throws|throws
name|IOException
block|{
while|while
condition|(
literal|true
condition|)
block|{
name|ArchiveEntry
name|entry
init|=
name|zip
operator|.
name|getNextEntry
argument_list|()
decl_stmt|;
if|if
condition|(
name|entry
operator|==
literal|null
condition|)
block|{
break|break;
block|}
if|if
condition|(
operator|!
name|entry
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|UnpackerResource
operator|.
name|TEXT_FILENAME
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|ByteArrayOutputStream
name|bos
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|IOUtils
operator|.
name|copy
argument_list|(
name|zip
argument_list|,
name|bos
argument_list|)
expr_stmt|;
return|return
name|bos
operator|.
name|toString
argument_list|(
literal|"UTF-8"
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTarDocPicture
parameter_list|()
throws|throws
name|Exception
block|{
name|InputStream
name|is
init|=
name|resource
argument_list|()
operator|.
name|path
argument_list|(
name|UNPACKER_PATH
argument_list|)
operator|.
name|type
argument_list|(
name|APPLICATION_MSWORD
argument_list|)
operator|.
name|accept
argument_list|(
literal|"application/x-tar"
argument_list|)
operator|.
name|put
argument_list|(
name|InputStream
operator|.
name|class
argument_list|,
name|ClassLoader
operator|.
name|getSystemResourceAsStream
argument_list|(
name|TEST_DOC_WAV
argument_list|)
argument_list|)
decl_stmt|;
name|ArchiveInputStream
name|zip
init|=
operator|new
name|TarArchiveInputStream
argument_list|(
name|is
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|data
init|=
name|readArchive
argument_list|(
name|zip
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|JPG_MD5
argument_list|,
name|data
operator|.
name|get
argument_list|(
name|JPG_NAME
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testText
parameter_list|()
throws|throws
name|IOException
block|{
name|InputStream
name|is
init|=
name|resource
argument_list|()
operator|.
name|path
argument_list|(
name|ALL_PATH
argument_list|)
operator|.
name|header
argument_list|(
name|CONTENT_TYPE
argument_list|,
name|APPLICATION_XML
argument_list|)
operator|.
name|put
argument_list|(
name|InputStream
operator|.
name|class
argument_list|,
name|ClassLoader
operator|.
name|getSystemResourceAsStream
argument_list|(
literal|"test.doc"
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|responseMsg
init|=
name|readArchiveText
argument_list|(
operator|new
name|ZipArchiveInputStream
argument_list|(
name|is
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|responseMsg
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|responseMsg
operator|.
name|contains
argument_list|(
literal|"test"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

