begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|server
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Response
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|JAXRSServerFactoryBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|client
operator|.
name|WebClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|lifecycle
operator|.
name|SingletonResourceProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|microsoft
operator|.
name|ooxml
operator|.
name|OOXMLParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|pdf
operator|.
name|PDFParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|pkg
operator|.
name|PackageParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|server
operator|.
name|resource
operator|.
name|TikaParsers
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|util
operator|.
name|ajax
operator|.
name|JSON
import|;
end_import

begin_import
import|import
name|org
operator|.
name|gagravarr
operator|.
name|tika
operator|.
name|OpusParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|TikaParsersTest
extends|extends
name|CXFTestBase
block|{
specifier|private
specifier|static
specifier|final
name|String
name|PARSERS_SUMMARY_PATH
init|=
literal|"/parsers"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|PARSERS_DETAILS_PATH
init|=
literal|"/parsers/details"
decl_stmt|;
annotation|@
name|Override
specifier|protected
name|void
name|setUpResources
parameter_list|(
name|JAXRSServerFactoryBean
name|sf
parameter_list|)
block|{
name|sf
operator|.
name|setResourceClasses
argument_list|(
name|TikaParsers
operator|.
name|class
argument_list|)
expr_stmt|;
name|sf
operator|.
name|setResourceProvider
argument_list|(
name|TikaParsers
operator|.
name|class
argument_list|,
operator|new
name|SingletonResourceProvider
argument_list|(
operator|new
name|TikaParsers
argument_list|(
name|tika
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|setUpProviders
parameter_list|(
name|JAXRSServerFactoryBean
name|sf
parameter_list|)
block|{     }
specifier|protected
name|String
name|getPath
parameter_list|(
name|boolean
name|withDetails
parameter_list|)
block|{
return|return
name|withDetails
condition|?
name|PARSERS_DETAILS_PATH
else|:
name|PARSERS_SUMMARY_PATH
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetPlainText
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|boolean
name|details
range|:
operator|new
name|boolean
index|[]
block|{
literal|false
block|,
literal|true
block|}
control|)
block|{
name|Response
name|response
init|=
name|WebClient
operator|.
name|create
argument_list|(
name|endPoint
operator|+
name|getPath
argument_list|(
name|details
argument_list|)
argument_list|)
operator|.
name|type
argument_list|(
literal|"text/plain"
argument_list|)
operator|.
name|accept
argument_list|(
literal|"text/plain"
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|String
name|text
init|=
name|getStringFromInputStream
argument_list|(
operator|(
name|InputStream
operator|)
name|response
operator|.
name|getEntity
argument_list|()
argument_list|)
decl_stmt|;
name|assertContains
argument_list|(
literal|"org.apache.tika.parser.DefaultParser (Composite Parser)"
argument_list|,
name|text
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
name|OpusParser
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|text
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
name|PackageParser
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|text
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
name|OOXMLParser
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|text
argument_list|)
expr_stmt|;
if|if
condition|(
name|details
condition|)
block|{
comment|// Should have the mimetypes they handle
name|assertContains
argument_list|(
literal|"text/plain"
argument_list|,
name|text
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"application/pdf"
argument_list|,
name|text
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"audio/ogg"
argument_list|,
name|text
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Shouldn't do
name|assertNotFound
argument_list|(
literal|"text/plain"
argument_list|,
name|text
argument_list|)
expr_stmt|;
name|assertNotFound
argument_list|(
literal|"application/pdf"
argument_list|,
name|text
argument_list|)
expr_stmt|;
name|assertNotFound
argument_list|(
literal|"audio/ogg"
argument_list|,
name|text
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetHTML
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|boolean
name|details
range|:
operator|new
name|boolean
index|[]
block|{
literal|false
block|,
literal|true
block|}
control|)
block|{
name|Response
name|response
init|=
name|WebClient
operator|.
name|create
argument_list|(
name|endPoint
operator|+
name|getPath
argument_list|(
name|details
argument_list|)
argument_list|)
operator|.
name|type
argument_list|(
literal|"text/html"
argument_list|)
operator|.
name|accept
argument_list|(
literal|"text/html"
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|String
name|text
init|=
name|getStringFromInputStream
argument_list|(
operator|(
name|InputStream
operator|)
name|response
operator|.
name|getEntity
argument_list|()
argument_list|)
decl_stmt|;
name|assertContains
argument_list|(
literal|"<h2>DefaultParser</h2>"
argument_list|,
name|text
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"Composite"
argument_list|,
name|text
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"<h3>OpusParser"
argument_list|,
name|text
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"<h3>PackageParser"
argument_list|,
name|text
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"<h3>OOXMLParser"
argument_list|,
name|text
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
name|OpusParser
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|text
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
name|PackageParser
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|text
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
name|OOXMLParser
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|text
argument_list|)
expr_stmt|;
if|if
condition|(
name|details
condition|)
block|{
comment|// Should have the mimetypes they handle
name|assertContains
argument_list|(
literal|"<li>text/plain"
argument_list|,
name|text
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"<li>application/pdf"
argument_list|,
name|text
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"<li>audio/ogg"
argument_list|,
name|text
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Shouldn't do
name|assertNotFound
argument_list|(
literal|"text/plain"
argument_list|,
name|text
argument_list|)
expr_stmt|;
name|assertNotFound
argument_list|(
literal|"application/pdf"
argument_list|,
name|text
argument_list|)
expr_stmt|;
name|assertNotFound
argument_list|(
literal|"audio/ogg"
argument_list|,
name|text
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
name|void
name|testGetJSON
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|boolean
name|details
range|:
operator|new
name|boolean
index|[]
block|{
literal|false
block|,
literal|true
block|}
control|)
block|{
name|Response
name|response
init|=
name|WebClient
operator|.
name|create
argument_list|(
name|endPoint
operator|+
name|getPath
argument_list|(
name|details
argument_list|)
argument_list|)
operator|.
name|type
argument_list|(
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
operator|.
name|accept
argument_list|(
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|String
name|jsonStr
init|=
name|getStringFromInputStream
argument_list|(
operator|(
name|InputStream
operator|)
name|response
operator|.
name|getEntity
argument_list|()
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|json
init|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
operator|)
name|JSON
operator|.
name|parse
argument_list|(
name|jsonStr
argument_list|)
decl_stmt|;
comment|// Should have a nested structure
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|json
operator|.
name|containsKey
argument_list|(
literal|"name"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|json
operator|.
name|containsKey
argument_list|(
literal|"composite"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|json
operator|.
name|containsKey
argument_list|(
literal|"children"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"org.apache.tika.parser.DefaultParser"
argument_list|,
name|json
operator|.
name|get
argument_list|(
literal|"name"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Boolean
operator|.
name|TRUE
argument_list|,
name|json
operator|.
name|get
argument_list|(
literal|"composite"
argument_list|)
argument_list|)
expr_stmt|;
comment|// At least 20 child parsers which aren't composite, except for CompositeExternalParser
name|Object
index|[]
name|children
init|=
operator|(
name|Object
index|[]
operator|)
operator|(
name|Object
operator|)
name|json
operator|.
name|get
argument_list|(
literal|"children"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|children
operator|.
name|length
operator|>=
literal|20
argument_list|)
expr_stmt|;
name|boolean
name|hasOpus
init|=
literal|false
decl_stmt|,
name|hasOOXML
init|=
literal|false
decl_stmt|,
name|hasPDF
init|=
literal|false
decl_stmt|,
name|hasZip
init|=
literal|false
decl_stmt|;
name|int
name|nonComposite
init|=
literal|0
decl_stmt|;
name|int
name|composite
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Object
name|o
range|:
name|children
control|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|d
init|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|o
decl_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|d
operator|.
name|containsKey
argument_list|(
literal|"name"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|d
operator|.
name|containsKey
argument_list|(
literal|"composite"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|.
name|get
argument_list|(
literal|"composite"
argument_list|)
operator|==
name|Boolean
operator|.
name|FALSE
condition|)
name|nonComposite
operator|++
expr_stmt|;
else|else
name|composite
operator|++
expr_stmt|;
comment|// Will only have mime types if requested
if|if
condition|(
name|d
operator|.
name|get
argument_list|(
literal|"composite"
argument_list|)
operator|==
name|Boolean
operator|.
name|FALSE
condition|)
name|assertEquals
argument_list|(
name|details
argument_list|,
name|d
operator|.
name|containsKey
argument_list|(
literal|"supportedTypes"
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|name
init|=
operator|(
name|String
operator|)
name|d
operator|.
name|get
argument_list|(
literal|"name"
argument_list|)
decl_stmt|;
if|if
condition|(
name|OpusParser
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|hasOpus
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|OOXMLParser
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|hasOOXML
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|PDFParser
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|hasPDF
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|PackageParser
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|hasZip
operator|=
literal|true
expr_stmt|;
block|}
block|}
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|hasOpus
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|hasOOXML
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|hasPDF
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|hasZip
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|nonComposite
operator|>
literal|20
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|composite
operator|==
literal|0
operator|||
name|composite
operator|==
literal|1
argument_list|)
expr_stmt|;
comment|// if CompositeExternalParser is available it will be 1
block|}
block|}
block|}
end_class

end_unit

