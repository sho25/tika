begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|server
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|codec
operator|.
name|digest
operator|.
name|DigestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|compress
operator|.
name|archivers
operator|.
name|ArchiveEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|compress
operator|.
name|archivers
operator|.
name|ArchiveInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|compress
operator|.
name|archivers
operator|.
name|tar
operator|.
name|TarArchiveInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|compress
operator|.
name|archivers
operator|.
name|zip
operator|.
name|ZipArchiveInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|compress
operator|.
name|utils
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|httpclient
operator|.
name|Header
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|httpclient
operator|.
name|HttpClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|httpclient
operator|.
name|HttpException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|httpclient
operator|.
name|methods
operator|.
name|GetMethod
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|httpclient
operator|.
name|methods
operator|.
name|PutMethod
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|io
operator|.
name|CachedOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|io
operator|.
name|CloseShieldInputStream
import|;
end_import

begin_import
import|import
name|au
operator|.
name|com
operator|.
name|bytecode
operator|.
name|opencsv
operator|.
name|CSVReader
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_class
specifier|public
class|class
name|CXFTestBase
extends|extends
name|TestCase
block|{
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|putAndGetMet
parameter_list|(
name|String
name|address
parameter_list|,
name|InputStream
name|content
parameter_list|)
throws|throws
name|Exception
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|met
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|PutMethod
name|put
init|=
operator|new
name|PutMethod
argument_list|(
name|address
argument_list|)
decl_stmt|;
name|put
operator|.
name|setRequestBody
argument_list|(
name|content
argument_list|)
expr_stmt|;
name|HttpClient
name|httpClient
init|=
operator|new
name|HttpClient
argument_list|()
decl_stmt|;
name|InputStreamReader
name|reader
init|=
literal|null
decl_stmt|;
try|try
block|{
name|httpClient
operator|.
name|executeMethod
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|CSVReader
name|csvReader
init|=
operator|new
name|CSVReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|put
operator|.
name|getResponseBodyAsStream
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|String
index|[]
name|nextLine
decl_stmt|;
while|while
condition|(
operator|(
name|nextLine
operator|=
name|csvReader
operator|.
name|readNext
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
name|met
operator|.
name|put
argument_list|(
name|nextLine
index|[
literal|0
index|]
argument_list|,
name|nextLine
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|put
operator|.
name|releaseConnection
argument_list|()
expr_stmt|;
block|}
return|return
name|met
return|;
block|}
specifier|protected
name|String
name|getAndReturnResp
parameter_list|(
name|String
name|address
parameter_list|)
throws|throws
name|HttpException
throws|,
name|IOException
block|{
name|String
name|resp
init|=
literal|null
decl_stmt|;
name|GetMethod
name|get
init|=
operator|new
name|GetMethod
argument_list|(
name|address
argument_list|)
decl_stmt|;
name|HttpClient
name|httpClient
init|=
operator|new
name|HttpClient
argument_list|()
decl_stmt|;
name|InputStreamReader
name|reader
init|=
literal|null
decl_stmt|;
try|try
block|{
name|httpClient
operator|.
name|executeMethod
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|resp
operator|=
name|get
operator|.
name|getResponseBodyAsString
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|get
operator|.
name|releaseConnection
argument_list|()
expr_stmt|;
block|}
return|return
name|resp
return|;
block|}
specifier|protected
name|void
name|putAndCheckStatus
parameter_list|(
name|String
name|address
parameter_list|,
name|InputStream
name|content
parameter_list|,
name|int
name|expectedStatus
parameter_list|)
throws|throws
name|Exception
block|{
name|putAndCheckStatus
argument_list|(
name|address
argument_list|,
literal|null
argument_list|,
name|content
argument_list|,
name|expectedStatus
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|putAndCheckStatus
parameter_list|(
name|String
name|address
parameter_list|,
name|String
name|accept
parameter_list|,
name|InputStream
name|content
parameter_list|,
name|int
name|expectedStatus
parameter_list|)
throws|throws
name|Exception
block|{
name|PutMethod
name|put
init|=
operator|new
name|PutMethod
argument_list|(
name|address
argument_list|)
decl_stmt|;
name|put
operator|.
name|setRequestBody
argument_list|(
name|content
argument_list|)
expr_stmt|;
if|if
condition|(
name|accept
operator|!=
literal|null
condition|)
name|put
operator|.
name|setRequestHeader
argument_list|(
literal|"Accept"
argument_list|,
name|accept
argument_list|)
expr_stmt|;
name|HttpClient
name|httpClient
init|=
operator|new
name|HttpClient
argument_list|()
decl_stmt|;
try|try
block|{
name|int
name|result
init|=
name|httpClient
operator|.
name|executeMethod
argument_list|(
name|put
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expectedStatus
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|put
operator|.
name|releaseConnection
argument_list|()
expr_stmt|;
block|}
block|}
specifier|protected
name|String
name|putAndGetString
parameter_list|(
name|String
name|address
parameter_list|,
name|InputStream
name|content
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|resp
init|=
literal|null
decl_stmt|;
name|PutMethod
name|put
init|=
operator|new
name|PutMethod
argument_list|(
name|address
argument_list|)
decl_stmt|;
name|put
operator|.
name|setRequestBody
argument_list|(
name|content
argument_list|)
expr_stmt|;
name|HttpClient
name|httpClient
init|=
operator|new
name|HttpClient
argument_list|()
decl_stmt|;
name|InputStreamReader
name|reader
init|=
literal|null
decl_stmt|;
try|try
block|{
name|httpClient
operator|.
name|executeMethod
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|resp
operator|=
name|put
operator|.
name|getResponseBodyAsString
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|put
operator|.
name|releaseConnection
argument_list|()
expr_stmt|;
block|}
return|return
name|resp
return|;
block|}
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|putAndGetMapData
parameter_list|(
name|String
name|address
parameter_list|,
name|InputStream
name|content
parameter_list|,
name|boolean
name|zip
parameter_list|)
throws|throws
name|Exception
block|{
name|PutMethod
name|put
init|=
operator|new
name|PutMethod
argument_list|(
name|address
argument_list|)
decl_stmt|;
name|put
operator|.
name|setRequestBody
argument_list|(
name|content
argument_list|)
expr_stmt|;
name|HttpClient
name|httpClient
init|=
operator|new
name|HttpClient
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|data
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
try|try
block|{
name|httpClient
operator|.
name|executeMethod
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|data
operator|=
name|readArchive
argument_list|(
name|zip
condition|?
operator|new
name|ZipArchiveInputStream
argument_list|(
name|put
operator|.
name|getResponseBodyAsStream
argument_list|()
argument_list|)
else|:
operator|new
name|TarArchiveInputStream
argument_list|(
name|put
operator|.
name|getResponseBodyAsStream
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|put
operator|.
name|releaseConnection
argument_list|()
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"DATA: "
operator|+
name|data
argument_list|)
expr_stmt|;
return|return
name|data
return|;
block|}
specifier|protected
name|String
name|putAndGetArchiveText
parameter_list|(
name|String
name|address
parameter_list|,
name|InputStream
name|content
parameter_list|,
name|boolean
name|zip
parameter_list|)
throws|throws
name|Exception
block|{
name|PutMethod
name|put
init|=
operator|new
name|PutMethod
argument_list|(
name|address
argument_list|)
decl_stmt|;
name|put
operator|.
name|setRequestBody
argument_list|(
name|content
argument_list|)
expr_stmt|;
name|HttpClient
name|httpClient
init|=
operator|new
name|HttpClient
argument_list|()
decl_stmt|;
name|String
name|archiveText
init|=
literal|null
decl_stmt|;
try|try
block|{
name|httpClient
operator|.
name|executeMethod
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|archiveText
operator|=
name|readArchiveText
argument_list|(
name|zip
condition|?
operator|new
name|ZipArchiveInputStream
argument_list|(
name|put
operator|.
name|getResponseBodyAsStream
argument_list|()
argument_list|)
else|:
operator|new
name|TarArchiveInputStream
argument_list|(
name|put
operator|.
name|getResponseBodyAsStream
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
comment|//put.releaseConnection();
block|}
return|return
name|archiveText
return|;
block|}
specifier|protected
name|void
name|getAndCompare
parameter_list|(
name|String
name|address
parameter_list|,
name|String
name|expectedValue
parameter_list|,
name|String
name|acceptType
parameter_list|,
name|String
name|expectedContentType
parameter_list|,
name|int
name|expectedStatus
parameter_list|)
throws|throws
name|Exception
block|{
name|GetMethod
name|get
init|=
operator|new
name|GetMethod
argument_list|(
name|address
argument_list|)
decl_stmt|;
name|get
operator|.
name|setRequestHeader
argument_list|(
literal|"Accept"
argument_list|,
name|acceptType
argument_list|)
expr_stmt|;
name|get
operator|.
name|setRequestHeader
argument_list|(
literal|"Accept-Language"
argument_list|,
literal|"da;q=0.8,en"
argument_list|)
expr_stmt|;
name|HttpClient
name|httpClient
init|=
operator|new
name|HttpClient
argument_list|()
decl_stmt|;
try|try
block|{
name|int
name|result
init|=
name|httpClient
operator|.
name|executeMethod
argument_list|(
name|get
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expectedStatus
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|String
name|content
init|=
name|getStringFromInputStream
argument_list|(
name|get
operator|.
name|getResponseBodyAsStream
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Expected value is wrong"
argument_list|,
name|expectedValue
argument_list|,
name|content
argument_list|)
expr_stmt|;
if|if
condition|(
name|expectedContentType
operator|!=
literal|null
condition|)
block|{
name|Header
name|ct
init|=
name|get
operator|.
name|getResponseHeader
argument_list|(
literal|"Content-Type"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Wrong type of response"
argument_list|,
name|expectedContentType
argument_list|,
name|ct
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|get
operator|.
name|releaseConnection
argument_list|()
expr_stmt|;
block|}
block|}
specifier|protected
name|String
name|getStringFromInputStream
parameter_list|(
name|InputStream
name|in
parameter_list|)
throws|throws
name|Exception
block|{
name|CachedOutputStream
name|bos
init|=
operator|new
name|CachedOutputStream
argument_list|()
decl_stmt|;
name|IOUtils
operator|.
name|copy
argument_list|(
name|in
argument_list|,
name|bos
argument_list|)
expr_stmt|;
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
name|bos
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|bos
operator|.
name|getOut
argument_list|()
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|protected
name|InputStream
name|cloneInputStream
parameter_list|(
name|InputStream
name|is
parameter_list|)
throws|throws
name|IOException
block|{
name|ByteArrayOutputStream
name|baos
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
comment|// Fake code simulating the copy
comment|// You can generally do better with nio if you need...
comment|// And please, unlike me, do something about the Exceptions :D
name|byte
index|[]
name|buffer
init|=
operator|new
name|byte
index|[
literal|1024
index|]
decl_stmt|;
name|int
name|len
decl_stmt|;
while|while
condition|(
operator|(
name|len
operator|=
name|is
operator|.
name|read
argument_list|(
name|buffer
argument_list|)
operator|)
operator|>
operator|-
literal|1
condition|)
block|{
name|baos
operator|.
name|write
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
name|len
argument_list|)
expr_stmt|;
block|}
name|baos
operator|.
name|flush
argument_list|()
expr_stmt|;
return|return
operator|new
name|ByteArrayInputStream
argument_list|(
name|baos
operator|.
name|toByteArray
argument_list|()
argument_list|)
return|;
block|}
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|readArchive
parameter_list|(
name|ArchiveInputStream
name|zip
parameter_list|)
throws|throws
name|IOException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|data
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|ArchiveEntry
name|entry
init|=
name|zip
operator|.
name|getNextEntry
argument_list|()
decl_stmt|;
if|if
condition|(
name|entry
operator|==
literal|null
condition|)
block|{
break|break;
block|}
name|ByteArrayOutputStream
name|bos
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|IOUtils
operator|.
name|copy
argument_list|(
name|zip
argument_list|,
name|bos
argument_list|)
expr_stmt|;
name|data
operator|.
name|put
argument_list|(
name|entry
operator|.
name|getName
argument_list|()
argument_list|,
name|DigestUtils
operator|.
name|md5Hex
argument_list|(
name|bos
operator|.
name|toByteArray
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|data
return|;
block|}
specifier|protected
name|String
name|readArchiveText
parameter_list|(
name|ArchiveInputStream
name|zip
parameter_list|)
throws|throws
name|IOException
block|{
while|while
condition|(
literal|true
condition|)
block|{
name|ArchiveEntry
name|entry
init|=
name|zip
operator|.
name|getNextEntry
argument_list|()
decl_stmt|;
if|if
condition|(
name|entry
operator|==
literal|null
condition|)
block|{
break|break;
block|}
if|if
condition|(
operator|!
name|entry
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|UnpackerResource
operator|.
name|TEXT_FILENAME
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|ByteArrayOutputStream
name|bos
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|IOUtils
operator|.
name|copy
argument_list|(
name|zip
argument_list|,
name|bos
argument_list|)
expr_stmt|;
return|return
name|bos
operator|.
name|toString
argument_list|(
literal|"UTF-8"
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

