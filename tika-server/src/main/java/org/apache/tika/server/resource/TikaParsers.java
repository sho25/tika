begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|server
operator|.
name|resource
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|GET
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|Produces
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|mime
operator|.
name|MediaType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|CompositeParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|ParseContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|Parser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|ParserDecorator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|server
operator|.
name|HTMLHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|util
operator|.
name|ajax
operator|.
name|JSON
import|;
end_import

begin_comment
comment|/**  *<p>Provides details of all the {@link Parser}s registered with  * Apache Tika, similar to<em>--list-parsers</em> and  *<em>--list-parser-details</em> within the Tika CLI.  */
end_comment

begin_class
annotation|@
name|Path
argument_list|(
literal|"/parsers"
argument_list|)
specifier|public
class|class
name|TikaParsers
block|{
specifier|private
specifier|static
specifier|final
name|ParseContext
name|EMPTY_PC
init|=
operator|new
name|ParseContext
argument_list|()
decl_stmt|;
specifier|private
name|HTMLHelper
name|html
decl_stmt|;
specifier|public
name|TikaParsers
parameter_list|()
block|{
name|this
operator|.
name|html
operator|=
operator|new
name|HTMLHelper
argument_list|()
expr_stmt|;
block|}
annotation|@
name|GET
annotation|@
name|Path
argument_list|(
literal|"/details"
argument_list|)
annotation|@
name|Produces
argument_list|(
literal|"text/html"
argument_list|)
specifier|public
name|String
name|getParserDetailsHTML
parameter_list|()
block|{
return|return
name|getParsersHTML
argument_list|(
literal|true
argument_list|)
return|;
block|}
annotation|@
name|GET
annotation|@
name|Produces
argument_list|(
literal|"text/html"
argument_list|)
specifier|public
name|String
name|getParsersHTML
parameter_list|()
block|{
return|return
name|getParsersHTML
argument_list|(
literal|false
argument_list|)
return|;
block|}
specifier|protected
name|String
name|getParsersHTML
parameter_list|(
name|boolean
name|withMimeTypes
parameter_list|)
block|{
name|ParserDetails
name|p
init|=
operator|new
name|ParserDetails
argument_list|(
name|TikaResource
operator|.
name|getConfig
argument_list|()
operator|.
name|getParser
argument_list|()
argument_list|)
decl_stmt|;
name|StringBuffer
name|h
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|html
operator|.
name|generateHeader
argument_list|(
name|h
argument_list|,
literal|"Parsers available to Apache Tika"
argument_list|)
expr_stmt|;
name|parserAsHTML
argument_list|(
name|p
argument_list|,
name|withMimeTypes
argument_list|,
name|h
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|html
operator|.
name|generateFooter
argument_list|(
name|h
argument_list|)
expr_stmt|;
return|return
name|h
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|private
name|void
name|parserAsHTML
parameter_list|(
name|ParserDetails
name|p
parameter_list|,
name|boolean
name|withMimeTypes
parameter_list|,
name|StringBuffer
name|html
parameter_list|,
name|int
name|level
parameter_list|)
block|{
name|html
operator|.
name|append
argument_list|(
literal|"<h"
argument_list|)
expr_stmt|;
name|html
operator|.
name|append
argument_list|(
name|level
argument_list|)
expr_stmt|;
name|html
operator|.
name|append
argument_list|(
literal|">"
argument_list|)
expr_stmt|;
name|html
operator|.
name|append
argument_list|(
name|p
operator|.
name|shortName
argument_list|)
expr_stmt|;
name|html
operator|.
name|append
argument_list|(
literal|"</h"
argument_list|)
expr_stmt|;
name|html
operator|.
name|append
argument_list|(
name|level
argument_list|)
expr_stmt|;
name|html
operator|.
name|append
argument_list|(
literal|">"
argument_list|)
expr_stmt|;
name|html
operator|.
name|append
argument_list|(
literal|"<p>Class: "
argument_list|)
expr_stmt|;
name|html
operator|.
name|append
argument_list|(
name|p
operator|.
name|className
argument_list|)
expr_stmt|;
name|html
operator|.
name|append
argument_list|(
literal|"</p>"
argument_list|)
expr_stmt|;
if|if
condition|(
name|p
operator|.
name|isDecorated
condition|)
block|{
name|html
operator|.
name|append
argument_list|(
literal|"<p>Decorated Parser"
argument_list|)
expr_stmt|;
if|if
condition|(
name|p
operator|.
name|decoratedBy
operator|!=
literal|null
condition|)
name|html
operator|.
name|append
argument_list|(
literal|" - "
argument_list|)
operator|.
name|append
argument_list|(
name|p
operator|.
name|decoratedBy
argument_list|)
expr_stmt|;
name|html
operator|.
name|append
argument_list|(
literal|"</p>"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|p
operator|.
name|isComposite
condition|)
block|{
name|html
operator|.
name|append
argument_list|(
literal|"<p>Composite Parser</p>"
argument_list|)
expr_stmt|;
name|html
operator|.
name|append
argument_list|(
literal|"<div style=\"margin-left: 1em\">\n"
argument_list|)
expr_stmt|;
for|for
control|(
name|Parser
name|cp
range|:
name|p
operator|.
name|childParsers
control|)
block|{
name|parserAsHTML
argument_list|(
operator|new
name|ParserDetails
argument_list|(
name|cp
argument_list|)
argument_list|,
name|withMimeTypes
argument_list|,
name|html
argument_list|,
name|level
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
name|html
operator|.
name|append
argument_list|(
literal|"</div>\n"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|withMimeTypes
condition|)
block|{
name|html
operator|.
name|append
argument_list|(
literal|"<p>Mime Types:"
argument_list|)
expr_stmt|;
name|html
operator|.
name|append
argument_list|(
literal|"<ul>"
argument_list|)
expr_stmt|;
for|for
control|(
name|MediaType
name|mt
range|:
name|p
operator|.
name|supportedTypes
control|)
block|{
name|html
operator|.
name|append
argument_list|(
literal|"<li>"
argument_list|)
expr_stmt|;
name|html
operator|.
name|append
argument_list|(
name|mt
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|html
operator|.
name|append
argument_list|(
literal|"</li>"
argument_list|)
expr_stmt|;
block|}
name|html
operator|.
name|append
argument_list|(
literal|"</ul>"
argument_list|)
expr_stmt|;
name|html
operator|.
name|append
argument_list|(
literal|"</p>"
argument_list|)
expr_stmt|;
block|}
name|html
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|GET
annotation|@
name|Path
argument_list|(
literal|"/details"
argument_list|)
annotation|@
name|Produces
argument_list|(
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
specifier|public
name|String
name|getParserDetailsJSON
parameter_list|()
block|{
return|return
name|getParsersJSON
argument_list|(
literal|true
argument_list|)
return|;
block|}
annotation|@
name|GET
annotation|@
name|Produces
argument_list|(
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
specifier|public
name|String
name|getParsersJSON
parameter_list|()
block|{
return|return
name|getParsersJSON
argument_list|(
literal|false
argument_list|)
return|;
block|}
specifier|protected
name|String
name|getParsersJSON
parameter_list|(
name|boolean
name|withMimeTypes
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|details
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|parserAsMap
argument_list|(
operator|new
name|ParserDetails
argument_list|(
name|TikaResource
operator|.
name|getConfig
argument_list|()
operator|.
name|getParser
argument_list|()
argument_list|)
argument_list|,
name|withMimeTypes
argument_list|,
name|details
argument_list|)
expr_stmt|;
return|return
name|JSON
operator|.
name|toString
argument_list|(
name|details
argument_list|)
return|;
block|}
specifier|private
name|void
name|parserAsMap
parameter_list|(
name|ParserDetails
name|p
parameter_list|,
name|boolean
name|withMimeTypes
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|details
parameter_list|)
block|{
name|details
operator|.
name|put
argument_list|(
literal|"name"
argument_list|,
name|p
operator|.
name|className
argument_list|)
expr_stmt|;
name|details
operator|.
name|put
argument_list|(
literal|"composite"
argument_list|,
name|p
operator|.
name|isComposite
argument_list|)
expr_stmt|;
name|details
operator|.
name|put
argument_list|(
literal|"decorated"
argument_list|,
name|p
operator|.
name|isDecorated
argument_list|)
expr_stmt|;
if|if
condition|(
name|p
operator|.
name|isComposite
condition|)
block|{
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|c
init|=
operator|new
name|ArrayList
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Parser
name|cp
range|:
name|p
operator|.
name|childParsers
control|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|cdet
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|parserAsMap
argument_list|(
operator|new
name|ParserDetails
argument_list|(
name|cp
argument_list|)
argument_list|,
name|withMimeTypes
argument_list|,
name|cdet
argument_list|)
expr_stmt|;
name|c
operator|.
name|add
argument_list|(
name|cdet
argument_list|)
expr_stmt|;
block|}
name|details
operator|.
name|put
argument_list|(
literal|"children"
argument_list|,
name|c
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|withMimeTypes
condition|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|mts
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|p
operator|.
name|supportedTypes
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|MediaType
name|mt
range|:
name|p
operator|.
name|supportedTypes
control|)
block|{
name|mts
operator|.
name|add
argument_list|(
name|mt
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|details
operator|.
name|put
argument_list|(
literal|"supportedTypes"
argument_list|,
name|mts
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|GET
annotation|@
name|Path
argument_list|(
literal|"/details"
argument_list|)
annotation|@
name|Produces
argument_list|(
literal|"text/plain"
argument_list|)
specifier|public
name|String
name|getParserDetailssPlain
parameter_list|()
block|{
return|return
name|getParsersPlain
argument_list|(
literal|true
argument_list|)
return|;
block|}
annotation|@
name|GET
annotation|@
name|Produces
argument_list|(
literal|"text/plain"
argument_list|)
specifier|public
name|String
name|getParsersPlain
parameter_list|()
block|{
return|return
name|getParsersPlain
argument_list|(
literal|false
argument_list|)
return|;
block|}
specifier|protected
name|String
name|getParsersPlain
parameter_list|(
name|boolean
name|withMimeTypes
parameter_list|)
block|{
name|StringBuffer
name|text
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|renderParser
argument_list|(
operator|new
name|ParserDetails
argument_list|(
name|TikaResource
operator|.
name|getConfig
argument_list|()
operator|.
name|getParser
argument_list|()
argument_list|)
argument_list|,
name|withMimeTypes
argument_list|,
name|text
argument_list|,
literal|""
argument_list|)
expr_stmt|;
return|return
name|text
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|private
name|void
name|renderParser
parameter_list|(
name|ParserDetails
name|p
parameter_list|,
name|boolean
name|withMimeTypes
parameter_list|,
name|StringBuffer
name|text
parameter_list|,
name|String
name|indent
parameter_list|)
block|{
name|String
name|nextIndent
init|=
name|indent
operator|+
literal|"  "
decl_stmt|;
name|text
operator|.
name|append
argument_list|(
name|indent
argument_list|)
expr_stmt|;
name|text
operator|.
name|append
argument_list|(
name|p
operator|.
name|className
argument_list|)
expr_stmt|;
if|if
condition|(
name|p
operator|.
name|isDecorated
condition|)
block|{
name|text
operator|.
name|append
argument_list|(
literal|" (Decorated Parser"
argument_list|)
expr_stmt|;
if|if
condition|(
name|p
operator|.
name|decoratedBy
operator|!=
literal|null
condition|)
block|{
name|text
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
operator|.
name|append
argument_list|(
name|p
operator|.
name|decoratedBy
argument_list|)
expr_stmt|;
block|}
name|text
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|p
operator|.
name|isComposite
condition|)
block|{
name|text
operator|.
name|append
argument_list|(
literal|" (Composite Parser):\n"
argument_list|)
expr_stmt|;
for|for
control|(
name|Parser
name|cp
range|:
name|p
operator|.
name|childParsers
control|)
block|{
name|renderParser
argument_list|(
operator|new
name|ParserDetails
argument_list|(
name|cp
argument_list|)
argument_list|,
name|withMimeTypes
argument_list|,
name|text
argument_list|,
name|nextIndent
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|text
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
if|if
condition|(
name|withMimeTypes
condition|)
block|{
for|for
control|(
name|MediaType
name|mt
range|:
name|p
operator|.
name|supportedTypes
control|)
block|{
name|text
operator|.
name|append
argument_list|(
name|nextIndent
argument_list|)
expr_stmt|;
name|text
operator|.
name|append
argument_list|(
literal|"Supports: "
argument_list|)
expr_stmt|;
name|text
operator|.
name|append
argument_list|(
name|mt
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|text
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|private
specifier|static
class|class
name|ParserDetails
block|{
specifier|private
name|String
name|className
decl_stmt|;
specifier|private
name|String
name|shortName
decl_stmt|;
specifier|private
name|boolean
name|isComposite
decl_stmt|;
specifier|private
name|boolean
name|isDecorated
decl_stmt|;
specifier|private
name|String
name|decoratedBy
decl_stmt|;
specifier|private
name|Set
argument_list|<
name|MediaType
argument_list|>
name|supportedTypes
decl_stmt|;
specifier|private
name|List
argument_list|<
name|Parser
argument_list|>
name|childParsers
decl_stmt|;
specifier|private
name|ParserDetails
parameter_list|(
name|Parser
name|p
parameter_list|)
block|{
if|if
condition|(
name|p
operator|instanceof
name|ParserDecorator
condition|)
block|{
name|isDecorated
operator|=
literal|true
expr_stmt|;
name|decoratedBy
operator|=
operator|(
operator|(
name|ParserDecorator
operator|)
name|p
operator|)
operator|.
name|getDecorationName
argument_list|()
expr_stmt|;
name|p
operator|=
operator|(
operator|(
name|ParserDecorator
operator|)
name|p
operator|)
operator|.
name|getWrappedParser
argument_list|()
expr_stmt|;
block|}
name|className
operator|=
name|p
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
expr_stmt|;
name|shortName
operator|=
name|className
operator|.
name|substring
argument_list|(
name|className
operator|.
name|lastIndexOf
argument_list|(
literal|'.'
argument_list|)
operator|+
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|p
operator|instanceof
name|CompositeParser
condition|)
block|{
name|isComposite
operator|=
literal|true
expr_stmt|;
name|supportedTypes
operator|=
name|Collections
operator|.
name|emptySet
argument_list|()
expr_stmt|;
comment|// Get the unique set of child parsers
name|Set
argument_list|<
name|Parser
argument_list|>
name|children
init|=
operator|new
name|HashSet
argument_list|<
name|Parser
argument_list|>
argument_list|(
operator|(
operator|(
name|CompositeParser
operator|)
name|p
operator|)
operator|.
name|getParsers
argument_list|(
name|EMPTY_PC
argument_list|)
operator|.
name|values
argument_list|()
argument_list|)
decl_stmt|;
comment|// Sort it by class name
name|childParsers
operator|=
operator|new
name|ArrayList
argument_list|<
name|Parser
argument_list|>
argument_list|(
name|children
argument_list|)
expr_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|childParsers
argument_list|,
operator|new
name|Comparator
argument_list|<
name|Parser
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|Parser
name|p1
parameter_list|,
name|Parser
name|p2
parameter_list|)
block|{
return|return
name|p1
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|p2
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|supportedTypes
operator|=
name|p
operator|.
name|getSupportedTypes
argument_list|(
name|EMPTY_PC
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

