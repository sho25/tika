begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|server
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|metadata
operator|.
name|Metadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|AutoDetectParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|helpers
operator|.
name|DefaultHandler
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|POST
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|PathParam
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|Produces
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|*
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Response
operator|.
name|Status
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_comment
comment|/**  * This JAX-RS endpoint provides access to the metadata contained within a  * document. It is possible to submit a relatively small prefix (a few KB) of a  * document's content to retrieve individual metadata fields.  *<p>  */
end_comment

begin_class
annotation|@
name|Path
argument_list|(
literal|"/metadata"
argument_list|)
specifier|public
class|class
name|MetadataEP
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|logger
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|MetadataEP
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/** The parser to use */
specifier|private
specifier|final
name|AutoDetectParser
name|parser
decl_stmt|;
comment|/** The metdata for the request */
specifier|private
specifier|final
name|Metadata
name|metadata
init|=
operator|new
name|Metadata
argument_list|()
decl_stmt|;
specifier|public
name|MetadataEP
parameter_list|(
annotation|@
name|Context
name|HttpHeaders
name|httpHeaders
parameter_list|,
annotation|@
name|Context
name|UriInfo
name|info
parameter_list|)
block|{
name|parser
operator|=
name|TikaResource
operator|.
name|createParser
argument_list|()
expr_stmt|;
name|TikaResource
operator|.
name|fillMetadata
argument_list|(
name|parser
argument_list|,
name|metadata
argument_list|,
name|httpHeaders
argument_list|)
expr_stmt|;
name|TikaResource
operator|.
name|logRequest
argument_list|(
name|logger
argument_list|,
name|info
argument_list|,
name|metadata
argument_list|)
expr_stmt|;
block|}
comment|/**    * Get all metadata that can be parsed from the specified input stream. An    * error is produced if the input stream cannot be parsed.    *     * @param is    *          an input stream    * @return the metadata    * @throws Exception    */
annotation|@
name|POST
specifier|public
name|Response
name|getMetadata
parameter_list|(
name|InputStream
name|is
parameter_list|)
throws|throws
name|Exception
block|{
name|parser
operator|.
name|parse
argument_list|(
name|is
argument_list|,
operator|new
name|DefaultHandler
argument_list|()
argument_list|,
name|metadata
argument_list|)
expr_stmt|;
return|return
name|Response
operator|.
name|ok
argument_list|(
name|metadata
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**    * Get a specific TIKA metadata field as a simple text string. If the field is    * multivalued, then only the first value is returned. If the input stream    * cannot be parsed, but a value was found for the given metadata field, then    * the value of the field is returned as part of a 200 OK response; otherwise    * a {@link Status#BAD_REQUEST} is generated. If the stream was successfully    * parsed but the specific metadata field was not found, then a    * {@link Status#NOT_FOUND} is returned.    *<p>    *     * @param field    *          the tika metadata field name    * @param is    *          the document stream    * @return one of {@link Status#OK}, {@link Status#NOT_FOUND}, or    *         {@link Status#BAD_REQUEST}    * @throws Exception    */
annotation|@
name|POST
annotation|@
name|Path
argument_list|(
literal|"{field}"
argument_list|)
annotation|@
name|Produces
argument_list|(
name|MediaType
operator|.
name|TEXT_PLAIN
argument_list|)
specifier|public
name|Response
name|getSimpleMetadataField
parameter_list|(
annotation|@
name|PathParam
argument_list|(
literal|"field"
argument_list|)
name|String
name|field
parameter_list|,
name|InputStream
name|is
parameter_list|)
throws|throws
name|Exception
block|{
comment|// use BAD request to indicate that we may not have had enough data to
comment|// process the request
name|Status
name|defaultErrorResponse
init|=
name|Status
operator|.
name|BAD_REQUEST
decl_stmt|;
try|try
block|{
name|parser
operator|.
name|parse
argument_list|(
name|is
argument_list|,
operator|new
name|DefaultHandler
argument_list|()
argument_list|,
name|metadata
argument_list|)
expr_stmt|;
comment|// once we've parsed the document successfully, we should use NOT_FOUND
comment|// if we did not see the field
name|defaultErrorResponse
operator|=
name|Status
operator|.
name|NOT_FOUND
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"Failed to process field "
operator|+
name|field
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|String
name|value
init|=
name|metadata
operator|.
name|get
argument_list|(
name|field
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
return|return
name|Response
operator|.
name|status
argument_list|(
name|defaultErrorResponse
argument_list|)
operator|.
name|entity
argument_list|(
literal|"Failed to get metadata field "
operator|+
name|field
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
return|return
name|Response
operator|.
name|ok
argument_list|(
name|value
argument_list|,
name|MediaType
operator|.
name|TEXT_PLAIN_TYPE
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**    * Get a specific metadata field. If the input stream cannot be parsed, but a    * value was found for the given metadata field, then the value of the field    * is returned as part of a 200 OK response; otherwise a    * {@link Status#BAD_REQUEST} is generated. If the stream was successfully    * parsed but the specific metadata field was not found, then a    * {@link Status#NOT_FOUND} is returned.    *<p>    * Note that this method handles multivalue fields and returns possibly more    * metadata than requested.    *     * @param field    *          the tika metadata field name    * @param is    *          the document stream    * @return one of {@link Status#OK}, {@link Status#NOT_FOUND}, or    *         {@link Status#BAD_REQUEST}    * @throws Exception    */
annotation|@
name|POST
annotation|@
name|Path
argument_list|(
literal|"{field}"
argument_list|)
specifier|public
name|Response
name|getMetadataField
parameter_list|(
annotation|@
name|PathParam
argument_list|(
literal|"field"
argument_list|)
name|String
name|field
parameter_list|,
name|InputStream
name|is
parameter_list|)
throws|throws
name|Exception
block|{
comment|// use BAD request to indicate that we may not have had enough data to
comment|// process the request
name|Status
name|defaultErrorResponse
init|=
name|Status
operator|.
name|BAD_REQUEST
decl_stmt|;
try|try
block|{
name|parser
operator|.
name|parse
argument_list|(
name|is
argument_list|,
operator|new
name|DefaultHandler
argument_list|()
argument_list|,
name|metadata
argument_list|)
expr_stmt|;
comment|// once we've parsed the document successfully, we should use NOT_FOUND
comment|// if we did not see the field
name|defaultErrorResponse
operator|=
name|Status
operator|.
name|NOT_FOUND
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"Failed to process field "
operator|+
name|field
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|String
index|[]
name|values
init|=
name|metadata
operator|.
name|getValues
argument_list|(
name|field
argument_list|)
decl_stmt|;
if|if
condition|(
name|values
operator|.
name|length
operator|==
literal|0
condition|)
block|{
return|return
name|Response
operator|.
name|status
argument_list|(
name|defaultErrorResponse
argument_list|)
operator|.
name|entity
argument_list|(
literal|"Failed to get metadata field "
operator|+
name|field
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
comment|// remove fields we don't care about for the response
for|for
control|(
name|String
name|name
range|:
name|metadata
operator|.
name|names
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|field
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|metadata
operator|.
name|remove
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|Response
operator|.
name|ok
argument_list|(
name|metadata
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
block|}
end_class

end_unit

