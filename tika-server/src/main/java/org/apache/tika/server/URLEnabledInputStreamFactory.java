begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|server
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|HttpHeaders
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|io
operator|.
name|TikaInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|metadata
operator|.
name|Metadata
import|;
end_import

begin_comment
comment|/**  * This class looks for&quot;fileUrl&quot; in the http header.  If it is not null  * and not empty, this will return a new TikaInputStream from the URL.  *<p>  * This is not meant to be used in place of a robust, responsible crawler.  Rather, this  * is a convenience factory.  *<p>  *<em>WARNING:</em> Unless you carefully lock down access to the server,  * whoever has access to this service will have the read access of the server.  * In short, anyone with access to this service could request and get  *&quot;file:///etc/supersensitive_file_dont_read.txt&quot;.  Or, if your server has access  * to your intranet, and you let the public hit this service, they will now  * have access to your intranet.  * See<a href="https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2015-3271">CVE-2015-3271</a>  *  */
end_comment

begin_class
specifier|public
class|class
name|URLEnabledInputStreamFactory
implements|implements
name|InputStreamFactory
block|{
comment|/**      * @deprecated use {@link #getInputSteam(InputStream, Metadata, HttpHeaders)}      * @param is      * @param httpHeaders      * @return      * @throws IOException      */
annotation|@
name|Override
annotation|@
name|Deprecated
specifier|public
name|InputStream
name|getInputSteam
parameter_list|(
name|InputStream
name|is
parameter_list|,
name|HttpHeaders
name|httpHeaders
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|fileUrl
init|=
name|httpHeaders
operator|.
name|getHeaderString
argument_list|(
literal|"fileUrl"
argument_list|)
decl_stmt|;
if|if
condition|(
name|fileUrl
operator|!=
literal|null
operator|&&
operator|!
literal|""
operator|.
name|equals
argument_list|(
name|fileUrl
argument_list|)
condition|)
block|{
return|return
name|TikaInputStream
operator|.
name|get
argument_list|(
operator|new
name|URL
argument_list|(
name|fileUrl
argument_list|)
argument_list|)
return|;
block|}
return|return
name|is
return|;
block|}
annotation|@
name|Override
specifier|public
name|InputStream
name|getInputSteam
parameter_list|(
name|InputStream
name|is
parameter_list|,
name|Metadata
name|metadata
parameter_list|,
name|HttpHeaders
name|httpHeaders
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|fileUrl
init|=
name|httpHeaders
operator|.
name|getHeaderString
argument_list|(
literal|"fileUrl"
argument_list|)
decl_stmt|;
if|if
condition|(
name|fileUrl
operator|!=
literal|null
operator|&&
operator|!
literal|""
operator|.
name|equals
argument_list|(
name|fileUrl
argument_list|)
condition|)
block|{
return|return
name|TikaInputStream
operator|.
name|get
argument_list|(
operator|new
name|URL
argument_list|(
name|fileUrl
argument_list|)
argument_list|,
name|metadata
argument_list|)
return|;
block|}
return|return
name|is
return|;
block|}
block|}
end_class

end_unit

