begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|server
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|CRC32
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|ZipEntry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|ZipOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|ZipException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_class
specifier|public
class|class
name|ZipUtils
block|{
specifier|private
name|ZipUtils
parameter_list|()
block|{   }
specifier|public
specifier|static
name|void
name|zipStoreBuffer
parameter_list|(
name|ZipOutputStream
name|zip
parameter_list|,
name|String
name|name
parameter_list|,
name|byte
index|[]
name|dataBuffer
parameter_list|)
throws|throws
name|IOException
block|{
name|ZipEntry
name|zipEntry
init|=
operator|new
name|ZipEntry
argument_list|(
name|name
operator|!=
literal|null
condition|?
name|name
else|:
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|zipEntry
operator|.
name|setMethod
argument_list|(
name|ZipOutputStream
operator|.
name|STORED
argument_list|)
expr_stmt|;
name|zipEntry
operator|.
name|setSize
argument_list|(
name|dataBuffer
operator|.
name|length
argument_list|)
expr_stmt|;
name|CRC32
name|crc32
init|=
operator|new
name|CRC32
argument_list|()
decl_stmt|;
name|crc32
operator|.
name|update
argument_list|(
name|dataBuffer
argument_list|)
expr_stmt|;
name|zipEntry
operator|.
name|setCrc
argument_list|(
name|crc32
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|zip
operator|.
name|putNextEntry
argument_list|(
name|zipEntry
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ZipException
name|ex
parameter_list|)
block|{
if|if
condition|(
name|name
operator|!=
literal|null
condition|)
block|{
name|zipStoreBuffer
argument_list|(
name|zip
argument_list|,
literal|null
argument_list|,
name|dataBuffer
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
name|zip
operator|.
name|write
argument_list|(
name|dataBuffer
argument_list|)
expr_stmt|;
name|zip
operator|.
name|closeEntry
argument_list|()
expr_stmt|;
block|}
specifier|public
specifier|static
name|String
name|cleanupFilename
parameter_list|(
name|String
name|name
parameter_list|)
block|{
if|if
condition|(
name|name
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|==
literal|'/'
condition|)
block|{
name|name
operator|=
name|name
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
return|return
name|name
return|;
block|}
block|}
end_class

end_unit

