begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|server
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|WebApplicationException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|StreamingOutput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|ZipOutputStream
import|;
end_import

begin_class
specifier|public
class|class
name|ZipOutput
implements|implements
name|StreamingOutput
block|{
specifier|private
specifier|final
name|Map
argument_list|<
name|PartExtractor
argument_list|,
name|Collection
argument_list|>
name|parts
init|=
operator|new
name|HashMap
argument_list|<
name|PartExtractor
argument_list|,
name|Collection
argument_list|>
argument_list|()
decl_stmt|;
specifier|public
parameter_list|<
name|T
parameter_list|>
name|void
name|put
parameter_list|(
name|PartExtractor
argument_list|<
name|T
argument_list|>
name|extractor
parameter_list|,
name|Collection
argument_list|<
name|T
argument_list|>
name|parts
parameter_list|)
block|{
if|if
condition|(
name|parts
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return;
block|}
name|this
operator|.
name|parts
operator|.
name|put
argument_list|(
name|extractor
argument_list|,
name|parts
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|OutputStream
name|outputStream
parameter_list|)
throws|throws
name|IOException
throws|,
name|WebApplicationException
block|{
name|ZipOutputStream
name|zip
init|=
operator|new
name|ZipOutputStream
argument_list|(
name|outputStream
argument_list|)
decl_stmt|;
name|zip
operator|.
name|setMethod
argument_list|(
name|ZipOutputStream
operator|.
name|STORED
argument_list|)
expr_stmt|;
name|addParts
argument_list|(
name|zip
argument_list|)
expr_stmt|;
name|zip
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|addParts
parameter_list|(
name|ZipOutputStream
name|zip
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|PartExtractor
argument_list|,
name|Collection
argument_list|>
name|entry
range|:
name|parts
operator|.
name|entrySet
argument_list|()
control|)
block|{
for|for
control|(
name|Object
name|part
range|:
name|entry
operator|.
name|getValue
argument_list|()
control|)
block|{
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|extract
argument_list|(
name|part
argument_list|,
name|zip
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|boolean
name|isEmpty
parameter_list|()
block|{
return|return
name|parts
operator|.
name|isEmpty
argument_list|()
return|;
block|}
block|}
end_class

end_unit

