begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|server
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|GET
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|Produces
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|config
operator|.
name|TikaConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|mime
operator|.
name|MediaType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|CompositeParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|ParseContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|Parser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|util
operator|.
name|ajax
operator|.
name|JSON
import|;
end_import

begin_comment
comment|/**  *<p>Provides details of all the {@link Parser}s registered with  *  Apache Tika, similar to<em>--list-parsers</em> and  *<em>--list-parser-details</em> within the Tika CLI.  */
end_comment

begin_class
annotation|@
name|Path
argument_list|(
literal|"/parsers"
argument_list|)
specifier|public
class|class
name|TikaParsers
block|{
specifier|private
specifier|static
specifier|final
name|ParseContext
name|EMPTY_PC
init|=
operator|new
name|ParseContext
argument_list|()
decl_stmt|;
specifier|private
name|TikaConfig
name|tika
decl_stmt|;
specifier|private
name|HTMLHelper
name|html
decl_stmt|;
specifier|public
name|TikaParsers
parameter_list|(
name|TikaConfig
name|tika
parameter_list|)
block|{
name|this
operator|.
name|tika
operator|=
name|tika
expr_stmt|;
name|this
operator|.
name|html
operator|=
operator|new
name|HTMLHelper
argument_list|()
expr_stmt|;
block|}
annotation|@
name|GET
annotation|@
name|Path
argument_list|(
literal|"/details"
argument_list|)
annotation|@
name|Produces
argument_list|(
literal|"text/html"
argument_list|)
specifier|public
name|String
name|getParserDetailsHTML
parameter_list|()
block|{
return|return
name|getParsersHTML
argument_list|(
literal|true
argument_list|)
return|;
block|}
annotation|@
name|GET
annotation|@
name|Produces
argument_list|(
literal|"text/html"
argument_list|)
specifier|public
name|String
name|getParsersHTML
parameter_list|()
block|{
return|return
name|getParsersHTML
argument_list|(
literal|false
argument_list|)
return|;
block|}
specifier|protected
name|String
name|getParsersHTML
parameter_list|(
name|boolean
name|withMimeTypes
parameter_list|)
block|{
name|StringBuffer
name|h
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|html
operator|.
name|generateHeader
argument_list|(
name|h
argument_list|,
literal|"Parsers available to Apache Tika"
argument_list|)
expr_stmt|;
name|parserAsHTML
argument_list|(
name|tika
operator|.
name|getParser
argument_list|()
argument_list|,
name|withMimeTypes
argument_list|,
name|h
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|html
operator|.
name|generateFooter
argument_list|(
name|h
argument_list|)
expr_stmt|;
return|return
name|h
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|private
name|void
name|parserAsHTML
parameter_list|(
name|Parser
name|p
parameter_list|,
name|boolean
name|withMimeTypes
parameter_list|,
name|StringBuffer
name|html
parameter_list|,
name|int
name|level
parameter_list|)
block|{
name|html
operator|.
name|append
argument_list|(
literal|"<h"
argument_list|)
expr_stmt|;
name|html
operator|.
name|append
argument_list|(
name|level
argument_list|)
expr_stmt|;
name|html
operator|.
name|append
argument_list|(
literal|">"
argument_list|)
expr_stmt|;
comment|// TODO Parser Decorators
name|String
name|name
init|=
name|p
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
name|html
operator|.
name|append
argument_list|(
name|name
operator|.
name|substring
argument_list|(
name|name
operator|.
name|lastIndexOf
argument_list|(
literal|'.'
argument_list|)
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|html
operator|.
name|append
argument_list|(
literal|"</h"
argument_list|)
expr_stmt|;
name|html
operator|.
name|append
argument_list|(
name|level
argument_list|)
expr_stmt|;
name|html
operator|.
name|append
argument_list|(
literal|">"
argument_list|)
expr_stmt|;
name|html
operator|.
name|append
argument_list|(
literal|"<p>Class: "
argument_list|)
expr_stmt|;
name|html
operator|.
name|append
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|html
operator|.
name|append
argument_list|(
literal|"</p>"
argument_list|)
expr_stmt|;
if|if
condition|(
name|p
operator|instanceof
name|CompositeParser
condition|)
block|{
name|html
operator|.
name|append
argument_list|(
literal|"<p>Composite Parser</p>"
argument_list|)
expr_stmt|;
comment|// TODO Sort nicely
for|for
control|(
name|Parser
name|cp
range|:
operator|(
operator|(
name|CompositeParser
operator|)
name|p
operator|)
operator|.
name|getParsers
argument_list|(
name|EMPTY_PC
argument_list|)
operator|.
name|values
argument_list|()
control|)
block|{
name|parserAsHTML
argument_list|(
name|cp
argument_list|,
name|withMimeTypes
argument_list|,
name|html
argument_list|,
name|level
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|withMimeTypes
condition|)
block|{
name|html
operator|.
name|append
argument_list|(
literal|"<p>Mime Types:"
argument_list|)
expr_stmt|;
name|html
operator|.
name|append
argument_list|(
literal|"<ul>"
argument_list|)
expr_stmt|;
for|for
control|(
name|MediaType
name|mt
range|:
name|p
operator|.
name|getSupportedTypes
argument_list|(
name|EMPTY_PC
argument_list|)
control|)
block|{
name|html
operator|.
name|append
argument_list|(
literal|"<li>"
argument_list|)
expr_stmt|;
name|html
operator|.
name|append
argument_list|(
name|mt
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|html
operator|.
name|append
argument_list|(
literal|"</li>"
argument_list|)
expr_stmt|;
block|}
name|html
operator|.
name|append
argument_list|(
literal|"</ul>"
argument_list|)
expr_stmt|;
name|html
operator|.
name|append
argument_list|(
literal|"</p>"
argument_list|)
expr_stmt|;
block|}
block|}
comment|/*     @GET     @Produces(javax.ws.rs.core.MediaType.APPLICATION_JSON)     public String getDetectorsJSON() {         Map<String,Object> details = new HashMap<String, Object>();         detectorAsMap(tika.getDetector(), details);         return JSON.toString(details);     }     private void detectorAsMap(Detector d, Map<String, Object> details) {         details.put("name", d.getClass().getName());                  boolean isComposite = (d instanceof CompositeDetector);         details.put("composite", isComposite);         if (isComposite) {             List<Map<String, Object>> c = new ArrayList<Map<String,Object>>();             for (Detector cd : ((CompositeDetector)d).getDetectors()) {                 Map<String,Object> cdet = new HashMap<String, Object>();                 detectorAsMap(cd, cdet);                 c.add(cdet);             }             details.put("children", c);         }     }          @GET     @Produces("text/plain")     public String getDetectorsPlain() {         StringBuffer text = new StringBuffer();         renderDetector(tika.getDetector(), text, 0);         return text.toString();     }     private void renderDetector(Detector d, StringBuffer text, int indent) {         boolean isComposite = (d instanceof CompositeDetector);         String name = d.getClass().getName();                  for (int i=0; i<indent; i++) {             text.append("  ");         }         text.append(name);         if (isComposite) {             text.append(" (Composite Detector):\n");              List<Detector> subDetectors = ((CompositeDetector)d).getDetectors();             for(Detector sd : subDetectors) {                 renderDetector(sd, text, indent+1);             }         } else {             text.append("\n");         }     }     */
specifier|private
specifier|static
class|class
name|ParserDetails
block|{
specifier|private
name|String
name|classname
decl_stmt|;
specifier|private
name|boolean
name|isComposite
decl_stmt|;
specifier|private
name|boolean
name|isDecorated
decl_stmt|;
specifier|private
name|List
argument_list|<
name|MediaType
argument_list|>
name|supportedTypes
decl_stmt|;
specifier|private
name|List
argument_list|<
name|Parser
argument_list|>
name|childParsers
decl_stmt|;
specifier|private
name|ParserDetails
parameter_list|(
name|Parser
name|p
parameter_list|)
block|{
comment|// TODO Implement
block|}
block|}
block|}
end_class

end_unit

