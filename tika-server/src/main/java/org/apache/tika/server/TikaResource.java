begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|server
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|mail
operator|.
name|internet
operator|.
name|ContentDisposition
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|mail
operator|.
name|internet
operator|.
name|ParseException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|Consumes
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|GET
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|PUT
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|Produces
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|WebApplicationException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Context
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|HttpHeaders
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|MultivaluedMap
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Response
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|StreamingOutput
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|UriInfo
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|OutputKeys
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|TransformerConfigurationException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|sax
operator|.
name|SAXTransformerFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|sax
operator|.
name|TransformerHandler
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|stream
operator|.
name|StreamResult
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStreamWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Writer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|ext
operator|.
name|multipart
operator|.
name|Attachment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|extractor
operator|.
name|ExtractorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|hwpf
operator|.
name|OldWordFileFormatException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|config
operator|.
name|TikaConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|detect
operator|.
name|Detector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|exception
operator|.
name|EncryptedDocumentException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|exception
operator|.
name|TikaException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|io
operator|.
name|TikaInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|metadata
operator|.
name|Metadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|metadata
operator|.
name|TikaMetadataKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|mime
operator|.
name|MediaType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|AutoDetectParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|ParseContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|Parser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|html
operator|.
name|HtmlParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|ocr
operator|.
name|TesseractOCRConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|pdf
operator|.
name|PDFParserConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|sax
operator|.
name|BodyContentHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|sax
operator|.
name|ExpandedTitleContentHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|ContentHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_class
annotation|@
name|Path
argument_list|(
literal|"/tika"
argument_list|)
specifier|public
class|class
name|TikaResource
block|{
specifier|public
specifier|static
specifier|final
name|String
name|GREETING
init|=
literal|"This is Tika Server. Please PUT\n"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|X_TIKA_OCR_HEADER_PREFIX
init|=
literal|"X-Tika-OCR"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|X_TIKA_PDF_HEADER_PREFIX
init|=
literal|"X-Tika-PDF"
decl_stmt|;
specifier|private
specifier|final
name|Log
name|logger
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TikaResource
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|TikaConfig
name|tikaConfig
decl_stmt|;
specifier|public
name|TikaResource
parameter_list|(
name|TikaConfig
name|tikaConfig
parameter_list|)
block|{
name|this
operator|.
name|tikaConfig
operator|=
name|tikaConfig
expr_stmt|;
block|}
static|static
block|{
name|ExtractorFactory
operator|.
name|setAllThreadsPreferEventExtractors
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|GET
annotation|@
name|Produces
argument_list|(
literal|"text/plain"
argument_list|)
specifier|public
name|String
name|getMessage
parameter_list|()
block|{
return|return
name|GREETING
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"serial"
argument_list|)
specifier|public
specifier|static
name|AutoDetectParser
name|createParser
parameter_list|(
name|TikaConfig
name|tikaConfig
parameter_list|)
block|{
specifier|final
name|AutoDetectParser
name|parser
init|=
operator|new
name|AutoDetectParser
argument_list|(
name|tikaConfig
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|MediaType
argument_list|,
name|Parser
argument_list|>
name|parsers
init|=
name|parser
operator|.
name|getParsers
argument_list|()
decl_stmt|;
name|parsers
operator|.
name|put
argument_list|(
name|MediaType
operator|.
name|APPLICATION_XML
argument_list|,
operator|new
name|HtmlParser
argument_list|()
argument_list|)
expr_stmt|;
name|parser
operator|.
name|setParsers
argument_list|(
name|parsers
argument_list|)
expr_stmt|;
name|parser
operator|.
name|setFallback
argument_list|(
operator|new
name|Parser
argument_list|()
block|{
specifier|public
name|Set
argument_list|<
name|MediaType
argument_list|>
name|getSupportedTypes
parameter_list|(
name|ParseContext
name|parseContext
parameter_list|)
block|{
return|return
name|parser
operator|.
name|getSupportedTypes
argument_list|(
name|parseContext
argument_list|)
return|;
block|}
specifier|public
name|void
name|parse
parameter_list|(
name|InputStream
name|inputStream
parameter_list|,
name|ContentHandler
name|contentHandler
parameter_list|,
name|Metadata
name|metadata
parameter_list|,
name|ParseContext
name|parseContext
parameter_list|)
block|{
throw|throw
operator|new
name|WebApplicationException
argument_list|(
name|Response
operator|.
name|Status
operator|.
name|UNSUPPORTED_MEDIA_TYPE
argument_list|)
throw|;
block|}
block|}
argument_list|)
expr_stmt|;
return|return
name|parser
return|;
block|}
specifier|public
specifier|static
name|String
name|detectFilename
parameter_list|(
name|MultivaluedMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|httpHeaders
parameter_list|)
block|{
name|String
name|disposition
init|=
name|httpHeaders
operator|.
name|getFirst
argument_list|(
literal|"Content-Disposition"
argument_list|)
decl_stmt|;
if|if
condition|(
name|disposition
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|ContentDisposition
name|c
init|=
operator|new
name|ContentDisposition
argument_list|(
name|disposition
argument_list|)
decl_stmt|;
comment|// only support "attachment" dispositions
if|if
condition|(
literal|"attachment"
operator|.
name|equals
argument_list|(
name|c
operator|.
name|getDisposition
argument_list|()
argument_list|)
condition|)
block|{
name|String
name|fn
init|=
name|c
operator|.
name|getParameter
argument_list|(
literal|"filename"
argument_list|)
decl_stmt|;
if|if
condition|(
name|fn
operator|!=
literal|null
condition|)
block|{
return|return
name|fn
return|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|ParseException
name|e
parameter_list|)
block|{
comment|// not a valid content-disposition field
block|}
block|}
comment|// this really should not be used, since it's not an official field
return|return
name|httpHeaders
operator|.
name|getFirst
argument_list|(
literal|"File-Name"
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|void
name|fillParseContext
parameter_list|(
name|ParseContext
name|parseContext
parameter_list|,
name|MultivaluedMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|httpHeaders
parameter_list|)
block|{
name|TesseractOCRConfig
name|ocrConfig
init|=
operator|new
name|TesseractOCRConfig
argument_list|()
decl_stmt|;
name|PDFParserConfig
name|pdfParserConfig
init|=
operator|new
name|PDFParserConfig
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|key
range|:
name|httpHeaders
operator|.
name|keySet
argument_list|()
control|)
block|{
if|if
condition|(
name|StringUtils
operator|.
name|startsWith
argument_list|(
name|key
argument_list|,
name|X_TIKA_OCR_HEADER_PREFIX
argument_list|)
condition|)
block|{
name|processHeaderConfig
argument_list|(
name|httpHeaders
argument_list|,
name|ocrConfig
argument_list|,
name|key
argument_list|,
name|X_TIKA_OCR_HEADER_PREFIX
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|StringUtils
operator|.
name|startsWith
argument_list|(
name|key
argument_list|,
name|X_TIKA_PDF_HEADER_PREFIX
argument_list|)
condition|)
block|{
name|processHeaderConfig
argument_list|(
name|httpHeaders
argument_list|,
name|pdfParserConfig
argument_list|,
name|key
argument_list|,
name|X_TIKA_PDF_HEADER_PREFIX
argument_list|)
expr_stmt|;
block|}
block|}
name|parseContext
operator|.
name|set
argument_list|(
name|TesseractOCRConfig
operator|.
name|class
argument_list|,
name|ocrConfig
argument_list|)
expr_stmt|;
name|parseContext
operator|.
name|set
argument_list|(
name|PDFParserConfig
operator|.
name|class
argument_list|,
name|pdfParserConfig
argument_list|)
expr_stmt|;
block|}
comment|/**    * Utility method to set a property on a class via reflection.    *    * @param httpHeaders the HTTP headers set.    * @param object the<code>Object</code> to set the property on.    * @param key the key of the HTTP Header.    * @param prefix the name of the HTTP Header prefix used to find property.    * @throws WebApplicationException thrown when field cannot be found.    */
specifier|private
specifier|static
name|void
name|processHeaderConfig
parameter_list|(
name|MultivaluedMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|httpHeaders
parameter_list|,
name|Object
name|object
parameter_list|,
name|String
name|key
parameter_list|,
name|String
name|prefix
parameter_list|)
block|{
try|try
block|{
name|String
name|property
init|=
name|StringUtils
operator|.
name|removeStart
argument_list|(
name|key
argument_list|,
name|prefix
argument_list|)
decl_stmt|;
name|Field
name|field
init|=
name|object
operator|.
name|getClass
argument_list|()
operator|.
name|getDeclaredField
argument_list|(
name|StringUtils
operator|.
name|uncapitalize
argument_list|(
name|property
argument_list|)
argument_list|)
decl_stmt|;
name|field
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|getType
argument_list|()
operator|==
name|String
operator|.
name|class
condition|)
block|{
name|field
operator|.
name|set
argument_list|(
name|object
argument_list|,
name|httpHeaders
operator|.
name|getFirst
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|field
operator|.
name|getType
argument_list|()
operator|==
name|int
operator|.
name|class
condition|)
block|{
name|field
operator|.
name|setInt
argument_list|(
name|object
argument_list|,
name|Integer
operator|.
name|parseInt
argument_list|(
name|httpHeaders
operator|.
name|getFirst
argument_list|(
name|key
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|field
operator|.
name|getType
argument_list|()
operator|==
name|double
operator|.
name|class
condition|)
block|{
name|field
operator|.
name|setDouble
argument_list|(
name|object
argument_list|,
name|Double
operator|.
name|parseDouble
argument_list|(
name|httpHeaders
operator|.
name|getFirst
argument_list|(
name|key
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|field
operator|.
name|getType
argument_list|()
operator|==
name|boolean
operator|.
name|class
condition|)
block|{
name|field
operator|.
name|setBoolean
argument_list|(
name|object
argument_list|,
name|Boolean
operator|.
name|parseBoolean
argument_list|(
name|httpHeaders
operator|.
name|getFirst
argument_list|(
name|key
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|WebApplicationException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"%s is an invalid %s header"
argument_list|,
name|key
argument_list|,
name|X_TIKA_OCR_HEADER_PREFIX
argument_list|)
argument_list|)
throw|;
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"serial"
argument_list|)
specifier|public
specifier|static
name|void
name|fillMetadata
parameter_list|(
name|AutoDetectParser
name|parser
parameter_list|,
name|Metadata
name|metadata
parameter_list|,
name|ParseContext
name|context
parameter_list|,
name|MultivaluedMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|httpHeaders
parameter_list|)
block|{
name|String
name|fileName
init|=
name|detectFilename
argument_list|(
name|httpHeaders
argument_list|)
decl_stmt|;
if|if
condition|(
name|fileName
operator|!=
literal|null
condition|)
block|{
name|metadata
operator|.
name|set
argument_list|(
name|TikaMetadataKeys
operator|.
name|RESOURCE_NAME_KEY
argument_list|,
name|fileName
argument_list|)
expr_stmt|;
block|}
name|String
name|contentTypeHeader
init|=
name|httpHeaders
operator|.
name|getFirst
argument_list|(
name|HttpHeaders
operator|.
name|CONTENT_TYPE
argument_list|)
decl_stmt|;
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|MediaType
name|mediaType
init|=
name|contentTypeHeader
operator|==
literal|null
condition|?
literal|null
else|:
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|MediaType
operator|.
name|valueOf
argument_list|(
name|contentTypeHeader
argument_list|)
decl_stmt|;
if|if
condition|(
name|mediaType
operator|!=
literal|null
operator|&&
literal|"xml"
operator|.
name|equals
argument_list|(
name|mediaType
operator|.
name|getSubtype
argument_list|()
argument_list|)
condition|)
block|{
name|mediaType
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|mediaType
operator|!=
literal|null
operator|&&
name|mediaType
operator|.
name|equals
argument_list|(
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|MediaType
operator|.
name|APPLICATION_OCTET_STREAM_TYPE
argument_list|)
condition|)
block|{
name|mediaType
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|mediaType
operator|!=
literal|null
condition|)
block|{
name|metadata
operator|.
name|add
argument_list|(
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|metadata
operator|.
name|HttpHeaders
operator|.
name|CONTENT_TYPE
argument_list|,
name|mediaType
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|Detector
name|detector
init|=
name|parser
operator|.
name|getDetector
argument_list|()
decl_stmt|;
name|parser
operator|.
name|setDetector
argument_list|(
operator|new
name|Detector
argument_list|()
block|{
specifier|public
name|MediaType
name|detect
parameter_list|(
name|InputStream
name|inputStream
parameter_list|,
name|Metadata
name|metadata
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|ct
init|=
name|metadata
operator|.
name|get
argument_list|(
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|metadata
operator|.
name|HttpHeaders
operator|.
name|CONTENT_TYPE
argument_list|)
decl_stmt|;
if|if
condition|(
name|ct
operator|!=
literal|null
condition|)
block|{
return|return
name|MediaType
operator|.
name|parse
argument_list|(
name|ct
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|detector
operator|.
name|detect
argument_list|(
name|inputStream
argument_list|,
name|metadata
argument_list|)
return|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
name|String
name|password
init|=
name|httpHeaders
operator|.
name|getFirst
argument_list|(
literal|"Password"
argument_list|)
decl_stmt|;
if|if
condition|(
name|password
operator|!=
literal|null
condition|)
block|{
comment|// TODO
block|}
block|}
annotation|@
name|PUT
annotation|@
name|Consumes
argument_list|(
literal|"multipart/form-data"
argument_list|)
annotation|@
name|Produces
argument_list|(
literal|"text/plain"
argument_list|)
annotation|@
name|Path
argument_list|(
literal|"form"
argument_list|)
specifier|public
name|StreamingOutput
name|getTextFromMultipart
parameter_list|(
name|Attachment
name|att
parameter_list|,
annotation|@
name|Context
specifier|final
name|UriInfo
name|info
parameter_list|)
block|{
return|return
name|produceText
argument_list|(
name|att
operator|.
name|getObject
argument_list|(
name|InputStream
operator|.
name|class
argument_list|)
argument_list|,
name|att
operator|.
name|getHeaders
argument_list|()
argument_list|,
name|info
argument_list|)
return|;
block|}
annotation|@
name|PUT
annotation|@
name|Consumes
argument_list|(
literal|"*/*"
argument_list|)
annotation|@
name|Produces
argument_list|(
literal|"text/plain"
argument_list|)
specifier|public
name|StreamingOutput
name|getText
parameter_list|(
specifier|final
name|InputStream
name|is
parameter_list|,
annotation|@
name|Context
name|HttpHeaders
name|httpHeaders
parameter_list|,
annotation|@
name|Context
specifier|final
name|UriInfo
name|info
parameter_list|)
block|{
return|return
name|produceText
argument_list|(
name|is
argument_list|,
name|httpHeaders
operator|.
name|getRequestHeaders
argument_list|()
argument_list|,
name|info
argument_list|)
return|;
block|}
specifier|public
name|StreamingOutput
name|produceText
parameter_list|(
specifier|final
name|InputStream
name|is
parameter_list|,
name|MultivaluedMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|httpHeaders
parameter_list|,
specifier|final
name|UriInfo
name|info
parameter_list|)
block|{
specifier|final
name|AutoDetectParser
name|parser
init|=
name|createParser
argument_list|(
name|tikaConfig
argument_list|)
decl_stmt|;
specifier|final
name|Metadata
name|metadata
init|=
operator|new
name|Metadata
argument_list|()
decl_stmt|;
specifier|final
name|ParseContext
name|context
init|=
operator|new
name|ParseContext
argument_list|()
decl_stmt|;
name|fillMetadata
argument_list|(
name|parser
argument_list|,
name|metadata
argument_list|,
name|context
argument_list|,
name|httpHeaders
argument_list|)
expr_stmt|;
name|fillParseContext
argument_list|(
name|context
argument_list|,
name|httpHeaders
argument_list|)
expr_stmt|;
name|logRequest
argument_list|(
name|logger
argument_list|,
name|info
argument_list|,
name|metadata
argument_list|)
expr_stmt|;
return|return
operator|new
name|StreamingOutput
argument_list|()
block|{
specifier|public
name|void
name|write
parameter_list|(
name|OutputStream
name|outputStream
parameter_list|)
throws|throws
name|IOException
throws|,
name|WebApplicationException
block|{
name|Writer
name|writer
init|=
operator|new
name|OutputStreamWriter
argument_list|(
name|outputStream
argument_list|,
literal|"UTF-8"
argument_list|)
decl_stmt|;
name|BodyContentHandler
name|body
init|=
operator|new
name|BodyContentHandler
argument_list|(
operator|new
name|RichTextContentHandler
argument_list|(
name|writer
argument_list|)
argument_list|)
decl_stmt|;
name|TikaInputStream
name|tis
init|=
name|TikaInputStream
operator|.
name|get
argument_list|(
name|is
argument_list|)
decl_stmt|;
try|try
block|{
name|parser
operator|.
name|parse
argument_list|(
name|tis
argument_list|,
name|body
argument_list|,
name|metadata
argument_list|,
name|context
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SAXException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|WebApplicationException
argument_list|(
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|EncryptedDocumentException
name|e
parameter_list|)
block|{
name|logger
operator|.
name|warn
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"%s: Encrypted document"
argument_list|,
name|info
operator|.
name|getPath
argument_list|()
argument_list|)
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|WebApplicationException
argument_list|(
name|e
argument_list|,
name|Response
operator|.
name|status
argument_list|(
literal|422
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|TikaException
name|e
parameter_list|)
block|{
name|logger
operator|.
name|warn
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"%s: Text extraction failed"
argument_list|,
name|info
operator|.
name|getPath
argument_list|()
argument_list|)
argument_list|,
name|e
argument_list|)
expr_stmt|;
if|if
condition|(
name|e
operator|.
name|getCause
argument_list|()
operator|!=
literal|null
operator|&&
name|e
operator|.
name|getCause
argument_list|()
operator|instanceof
name|WebApplicationException
condition|)
block|{
throw|throw
operator|(
name|WebApplicationException
operator|)
name|e
operator|.
name|getCause
argument_list|()
throw|;
block|}
if|if
condition|(
name|e
operator|.
name|getCause
argument_list|()
operator|!=
literal|null
operator|&&
name|e
operator|.
name|getCause
argument_list|()
operator|instanceof
name|IllegalStateException
condition|)
block|{
throw|throw
operator|new
name|WebApplicationException
argument_list|(
name|Response
operator|.
name|status
argument_list|(
literal|422
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
throw|;
block|}
if|if
condition|(
name|e
operator|.
name|getCause
argument_list|()
operator|!=
literal|null
operator|&&
name|e
operator|.
name|getCause
argument_list|()
operator|instanceof
name|OldWordFileFormatException
condition|)
block|{
throw|throw
operator|new
name|WebApplicationException
argument_list|(
name|Response
operator|.
name|status
argument_list|(
literal|422
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
throw|;
block|}
throw|throw
operator|new
name|WebApplicationException
argument_list|(
name|Response
operator|.
name|Status
operator|.
name|INTERNAL_SERVER_ERROR
argument_list|)
throw|;
block|}
finally|finally
block|{
name|tis
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
return|;
block|}
annotation|@
name|PUT
annotation|@
name|Consumes
argument_list|(
literal|"multipart/form-data"
argument_list|)
annotation|@
name|Produces
argument_list|(
literal|"text/html"
argument_list|)
annotation|@
name|Path
argument_list|(
literal|"form"
argument_list|)
specifier|public
name|StreamingOutput
name|getHTMLFromMultipart
parameter_list|(
name|Attachment
name|att
parameter_list|,
annotation|@
name|Context
specifier|final
name|UriInfo
name|info
parameter_list|)
block|{
return|return
name|produceOutput
argument_list|(
name|att
operator|.
name|getObject
argument_list|(
name|InputStream
operator|.
name|class
argument_list|)
argument_list|,
name|att
operator|.
name|getHeaders
argument_list|()
argument_list|,
name|info
argument_list|,
literal|"html"
argument_list|)
return|;
block|}
annotation|@
name|PUT
annotation|@
name|Consumes
argument_list|(
literal|"*/*"
argument_list|)
annotation|@
name|Produces
argument_list|(
literal|"text/html"
argument_list|)
specifier|public
name|StreamingOutput
name|getHTML
parameter_list|(
specifier|final
name|InputStream
name|is
parameter_list|,
annotation|@
name|Context
name|HttpHeaders
name|httpHeaders
parameter_list|,
annotation|@
name|Context
specifier|final
name|UriInfo
name|info
parameter_list|)
block|{
return|return
name|produceOutput
argument_list|(
name|is
argument_list|,
name|httpHeaders
operator|.
name|getRequestHeaders
argument_list|()
argument_list|,
name|info
argument_list|,
literal|"html"
argument_list|)
return|;
block|}
annotation|@
name|PUT
annotation|@
name|Consumes
argument_list|(
literal|"multipart/form-data"
argument_list|)
annotation|@
name|Produces
argument_list|(
literal|"text/xml"
argument_list|)
annotation|@
name|Path
argument_list|(
literal|"form"
argument_list|)
specifier|public
name|StreamingOutput
name|getXMLFromMultipart
parameter_list|(
name|Attachment
name|att
parameter_list|,
annotation|@
name|Context
specifier|final
name|UriInfo
name|info
parameter_list|)
block|{
return|return
name|produceOutput
argument_list|(
name|att
operator|.
name|getObject
argument_list|(
name|InputStream
operator|.
name|class
argument_list|)
argument_list|,
name|att
operator|.
name|getHeaders
argument_list|()
argument_list|,
name|info
argument_list|,
literal|"xml"
argument_list|)
return|;
block|}
annotation|@
name|PUT
annotation|@
name|Consumes
argument_list|(
literal|"*/*"
argument_list|)
annotation|@
name|Produces
argument_list|(
literal|"text/xml"
argument_list|)
specifier|public
name|StreamingOutput
name|getXML
parameter_list|(
specifier|final
name|InputStream
name|is
parameter_list|,
annotation|@
name|Context
name|HttpHeaders
name|httpHeaders
parameter_list|,
annotation|@
name|Context
specifier|final
name|UriInfo
name|info
parameter_list|)
block|{
return|return
name|produceOutput
argument_list|(
name|is
argument_list|,
name|httpHeaders
operator|.
name|getRequestHeaders
argument_list|()
argument_list|,
name|info
argument_list|,
literal|"xml"
argument_list|)
return|;
block|}
specifier|private
name|StreamingOutput
name|produceOutput
parameter_list|(
specifier|final
name|InputStream
name|is
parameter_list|,
specifier|final
name|MultivaluedMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|httpHeaders
parameter_list|,
specifier|final
name|UriInfo
name|info
parameter_list|,
specifier|final
name|String
name|format
parameter_list|)
block|{
specifier|final
name|AutoDetectParser
name|parser
init|=
name|createParser
argument_list|(
name|tikaConfig
argument_list|)
decl_stmt|;
specifier|final
name|Metadata
name|metadata
init|=
operator|new
name|Metadata
argument_list|()
decl_stmt|;
specifier|final
name|ParseContext
name|context
init|=
operator|new
name|ParseContext
argument_list|()
decl_stmt|;
name|fillMetadata
argument_list|(
name|parser
argument_list|,
name|metadata
argument_list|,
name|context
argument_list|,
name|httpHeaders
argument_list|)
expr_stmt|;
name|fillParseContext
argument_list|(
name|context
argument_list|,
name|httpHeaders
argument_list|)
expr_stmt|;
name|logRequest
argument_list|(
name|logger
argument_list|,
name|info
argument_list|,
name|metadata
argument_list|)
expr_stmt|;
return|return
operator|new
name|StreamingOutput
argument_list|()
block|{
specifier|public
name|void
name|write
parameter_list|(
name|OutputStream
name|outputStream
parameter_list|)
throws|throws
name|IOException
throws|,
name|WebApplicationException
block|{
name|Writer
name|writer
init|=
operator|new
name|OutputStreamWriter
argument_list|(
name|outputStream
argument_list|,
literal|"UTF-8"
argument_list|)
decl_stmt|;
name|ContentHandler
name|content
decl_stmt|;
try|try
block|{
name|SAXTransformerFactory
name|factory
init|=
operator|(
name|SAXTransformerFactory
operator|)
name|SAXTransformerFactory
operator|.
name|newInstance
argument_list|( )
decl_stmt|;
name|TransformerHandler
name|handler
init|=
name|factory
operator|.
name|newTransformerHandler
argument_list|( )
decl_stmt|;
name|handler
operator|.
name|getTransformer
argument_list|()
operator|.
name|setOutputProperty
argument_list|(
name|OutputKeys
operator|.
name|METHOD
argument_list|,
name|format
argument_list|)
expr_stmt|;
name|handler
operator|.
name|getTransformer
argument_list|()
operator|.
name|setOutputProperty
argument_list|(
name|OutputKeys
operator|.
name|INDENT
argument_list|,
literal|"yes"
argument_list|)
expr_stmt|;
name|handler
operator|.
name|getTransformer
argument_list|()
operator|.
name|setOutputProperty
argument_list|(
name|OutputKeys
operator|.
name|ENCODING
argument_list|,
literal|"UTF-8"
argument_list|)
expr_stmt|;
name|handler
operator|.
name|setResult
argument_list|(
operator|new
name|StreamResult
argument_list|(
name|writer
argument_list|)
argument_list|)
expr_stmt|;
name|content
operator|=
operator|new
name|ExpandedTitleContentHandler
argument_list|(
name|handler
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TransformerConfigurationException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|WebApplicationException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|TikaInputStream
name|tis
init|=
name|TikaInputStream
operator|.
name|get
argument_list|(
name|is
argument_list|)
decl_stmt|;
try|try
block|{
name|parser
operator|.
name|parse
argument_list|(
name|tis
argument_list|,
name|content
argument_list|,
name|metadata
argument_list|,
name|context
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SAXException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|WebApplicationException
argument_list|(
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|EncryptedDocumentException
name|e
parameter_list|)
block|{
name|logger
operator|.
name|warn
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"%s: Encrypted document"
argument_list|,
name|info
operator|.
name|getPath
argument_list|()
argument_list|)
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|WebApplicationException
argument_list|(
name|e
argument_list|,
name|Response
operator|.
name|status
argument_list|(
literal|422
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|TikaException
name|e
parameter_list|)
block|{
name|logger
operator|.
name|warn
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"%s: Text extraction failed"
argument_list|,
name|info
operator|.
name|getPath
argument_list|()
argument_list|)
argument_list|,
name|e
argument_list|)
expr_stmt|;
if|if
condition|(
name|e
operator|.
name|getCause
argument_list|()
operator|!=
literal|null
operator|&&
name|e
operator|.
name|getCause
argument_list|()
operator|instanceof
name|WebApplicationException
condition|)
throw|throw
operator|(
name|WebApplicationException
operator|)
name|e
operator|.
name|getCause
argument_list|()
throw|;
if|if
condition|(
name|e
operator|.
name|getCause
argument_list|()
operator|!=
literal|null
operator|&&
name|e
operator|.
name|getCause
argument_list|()
operator|instanceof
name|IllegalStateException
condition|)
throw|throw
operator|new
name|WebApplicationException
argument_list|(
name|Response
operator|.
name|status
argument_list|(
literal|422
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
throw|;
if|if
condition|(
name|e
operator|.
name|getCause
argument_list|()
operator|!=
literal|null
operator|&&
name|e
operator|.
name|getCause
argument_list|()
operator|instanceof
name|OldWordFileFormatException
condition|)
throw|throw
operator|new
name|WebApplicationException
argument_list|(
name|Response
operator|.
name|status
argument_list|(
literal|422
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
throw|;
throw|throw
operator|new
name|WebApplicationException
argument_list|(
name|Response
operator|.
name|Status
operator|.
name|INTERNAL_SERVER_ERROR
argument_list|)
throw|;
block|}
finally|finally
block|{
name|tis
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
return|;
block|}
specifier|public
specifier|static
name|void
name|logRequest
parameter_list|(
name|Log
name|logger
parameter_list|,
name|UriInfo
name|info
parameter_list|,
name|Metadata
name|metadata
parameter_list|)
block|{
if|if
condition|(
name|metadata
operator|.
name|get
argument_list|(
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|metadata
operator|.
name|HttpHeaders
operator|.
name|CONTENT_TYPE
argument_list|)
operator|==
literal|null
condition|)
block|{
name|logger
operator|.
name|info
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"%s (autodetecting type)"
argument_list|,
name|info
operator|.
name|getPath
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|logger
operator|.
name|info
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"%s (%s)"
argument_list|,
name|info
operator|.
name|getPath
argument_list|()
argument_list|,
name|metadata
operator|.
name|get
argument_list|(
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|metadata
operator|.
name|HttpHeaders
operator|.
name|CONTENT_TYPE
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

