begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|server
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
operator|.
name|UTF_8
import|;
end_import

begin_comment
comment|/**  * Helps produce user facing HTML output.  *<p/>  * TODO Decide if this would be better done as a MessageBodyWriter  */
end_comment

begin_class
specifier|public
class|class
name|HTMLHelper
block|{
specifier|private
specifier|static
specifier|final
name|String
name|PATH
init|=
literal|"/tikaserver-template.html"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|TITLE_VAR
init|=
literal|"[[TITLE]]"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|BODY_VAR
init|=
literal|"[[BODY]]"
decl_stmt|;
specifier|private
name|String
name|PRE_BODY
decl_stmt|;
specifier|private
name|String
name|POST_BODY
decl_stmt|;
specifier|public
name|HTMLHelper
parameter_list|()
block|{
name|InputStream
name|htmlStr
init|=
name|getClass
argument_list|()
operator|.
name|getResourceAsStream
argument_list|(
name|PATH
argument_list|)
decl_stmt|;
if|if
condition|(
name|htmlStr
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Template Not Found - "
operator|+
name|PATH
argument_list|)
throw|;
block|}
try|try
block|{
name|String
name|html
init|=
name|IOUtils
operator|.
name|toString
argument_list|(
name|htmlStr
argument_list|,
name|UTF_8
argument_list|)
decl_stmt|;
name|int
name|bodyAt
init|=
name|html
operator|.
name|indexOf
argument_list|(
name|BODY_VAR
argument_list|)
decl_stmt|;
name|PRE_BODY
operator|=
name|html
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|bodyAt
argument_list|)
expr_stmt|;
name|POST_BODY
operator|=
name|html
operator|.
name|substring
argument_list|(
name|bodyAt
operator|+
name|BODY_VAR
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Unable to read template"
argument_list|)
throw|;
block|}
block|}
comment|/**      * Generates the HTML Header for the user facing page, adding      * in the given title as required      */
specifier|public
name|void
name|generateHeader
parameter_list|(
name|StringBuffer
name|html
parameter_list|,
name|String
name|title
parameter_list|)
block|{
name|html
operator|.
name|append
argument_list|(
name|PRE_BODY
operator|.
name|replace
argument_list|(
name|TITLE_VAR
argument_list|,
name|title
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|generateFooter
parameter_list|(
name|StringBuffer
name|html
parameter_list|)
block|{
name|html
operator|.
name|append
argument_list|(
name|POST_BODY
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

