begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|server
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|GET
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|Produces
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|config
operator|.
name|TikaConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|mime
operator|.
name|MediaType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|mime
operator|.
name|MediaTypeRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|CompositeParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|Parser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|util
operator|.
name|ajax
operator|.
name|JSON
import|;
end_import

begin_comment
comment|/*  * TODO Reduce duplication between the two methods, by  * returning structured info that gets encoded two ways  */
end_comment

begin_class
annotation|@
name|Path
argument_list|(
literal|"/mime-types"
argument_list|)
specifier|public
class|class
name|TikaMimeTypes
block|{
specifier|private
name|TikaConfig
name|tika
decl_stmt|;
specifier|public
name|TikaMimeTypes
parameter_list|(
name|TikaConfig
name|tika
parameter_list|)
block|{
name|this
operator|.
name|tika
operator|=
name|tika
expr_stmt|;
block|}
annotation|@
name|GET
annotation|@
name|Produces
argument_list|(
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
specifier|public
name|String
name|getMimeTypesJSON
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|details
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|MediaTypeRegistry
name|registry
init|=
name|tika
operator|.
name|getMediaTypeRegistry
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|MediaType
argument_list|,
name|Parser
argument_list|>
name|parsers
init|=
operator|(
operator|(
name|CompositeParser
operator|)
name|tika
operator|.
name|getParser
argument_list|()
operator|)
operator|.
name|getParsers
argument_list|()
decl_stmt|;
for|for
control|(
name|MediaType
name|type
range|:
name|registry
operator|.
name|getTypes
argument_list|()
control|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|typeDets
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|typeDets
operator|.
name|put
argument_list|(
literal|"alias"
argument_list|,
name|registry
operator|.
name|getAliases
argument_list|(
name|type
argument_list|)
argument_list|)
expr_stmt|;
name|MediaType
name|supertype
init|=
name|registry
operator|.
name|getSupertype
argument_list|(
name|type
argument_list|)
decl_stmt|;
if|if
condition|(
name|supertype
operator|!=
literal|null
operator|&&
operator|!
name|MediaType
operator|.
name|OCTET_STREAM
operator|.
name|equals
argument_list|(
name|supertype
argument_list|)
condition|)
block|{
name|typeDets
operator|.
name|put
argument_list|(
literal|"supertype"
argument_list|,
name|supertype
argument_list|)
expr_stmt|;
block|}
name|Parser
name|p
init|=
name|parsers
operator|.
name|get
argument_list|(
name|type
argument_list|)
decl_stmt|;
if|if
condition|(
name|p
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|p
operator|instanceof
name|CompositeParser
condition|)
block|{
name|p
operator|=
operator|(
operator|(
name|CompositeParser
operator|)
name|p
operator|)
operator|.
name|getParsers
argument_list|()
operator|.
name|get
argument_list|(
name|type
argument_list|)
expr_stmt|;
block|}
name|typeDets
operator|.
name|put
argument_list|(
literal|"parser"
argument_list|,
name|p
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|details
operator|.
name|put
argument_list|(
name|type
operator|.
name|toString
argument_list|()
argument_list|,
name|typeDets
argument_list|)
expr_stmt|;
block|}
return|return
name|JSON
operator|.
name|toString
argument_list|(
name|details
argument_list|)
return|;
block|}
annotation|@
name|GET
annotation|@
name|Produces
argument_list|(
literal|"text/plain"
argument_list|)
specifier|public
name|String
name|getMimeTypesPlain
parameter_list|()
block|{
name|StringBuffer
name|text
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|MediaTypeRegistry
name|registry
init|=
name|tika
operator|.
name|getMediaTypeRegistry
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|MediaType
argument_list|,
name|Parser
argument_list|>
name|parsers
init|=
operator|(
operator|(
name|CompositeParser
operator|)
name|tika
operator|.
name|getParser
argument_list|()
operator|)
operator|.
name|getParsers
argument_list|()
decl_stmt|;
for|for
control|(
name|MediaType
name|type
range|:
name|registry
operator|.
name|getTypes
argument_list|()
control|)
block|{
name|text
operator|.
name|append
argument_list|(
name|type
argument_list|)
expr_stmt|;
name|text
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
for|for
control|(
name|MediaType
name|alias
range|:
name|registry
operator|.
name|getAliases
argument_list|(
name|type
argument_list|)
control|)
block|{
name|text
operator|.
name|append
argument_list|(
literal|"  alias:     "
operator|+
name|alias
argument_list|)
expr_stmt|;
name|text
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
block|}
name|MediaType
name|supertype
init|=
name|registry
operator|.
name|getSupertype
argument_list|(
name|type
argument_list|)
decl_stmt|;
if|if
condition|(
name|supertype
operator|!=
literal|null
operator|&&
operator|!
name|MediaType
operator|.
name|OCTET_STREAM
operator|.
name|equals
argument_list|(
name|supertype
argument_list|)
condition|)
block|{
name|text
operator|.
name|append
argument_list|(
literal|"  supertype: "
operator|+
name|supertype
argument_list|)
expr_stmt|;
name|text
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
block|}
name|Parser
name|p
init|=
name|parsers
operator|.
name|get
argument_list|(
name|type
argument_list|)
decl_stmt|;
if|if
condition|(
name|p
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|p
operator|instanceof
name|CompositeParser
condition|)
block|{
name|p
operator|=
operator|(
operator|(
name|CompositeParser
operator|)
name|p
operator|)
operator|.
name|getParsers
argument_list|()
operator|.
name|get
argument_list|(
name|type
argument_list|)
expr_stmt|;
block|}
name|text
operator|.
name|append
argument_list|(
literal|"  parser:    "
operator|+
name|p
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|text
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|text
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

