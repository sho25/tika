begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|server
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|WebApplicationException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Response
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|ext
operator|.
name|ExceptionMapper
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|ext
operator|.
name|Provider
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Writer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|hwpf
operator|.
name|OldWordFileFormatException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|exception
operator|.
name|EncryptedDocumentException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|exception
operator|.
name|TikaException
import|;
end_import

begin_class
annotation|@
name|Provider
specifier|public
class|class
name|TikaServerParseExceptionMapper
implements|implements
name|ExceptionMapper
argument_list|<
name|TikaServerParseException
argument_list|>
block|{
specifier|private
specifier|final
name|boolean
name|returnStack
decl_stmt|;
specifier|public
name|TikaServerParseExceptionMapper
parameter_list|(
name|boolean
name|returnStack
parameter_list|)
block|{
name|this
operator|.
name|returnStack
operator|=
name|returnStack
expr_stmt|;
block|}
specifier|public
name|Response
name|toResponse
parameter_list|(
name|TikaServerParseException
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|equals
argument_list|(
name|Response
operator|.
name|Status
operator|.
name|UNSUPPORTED_MEDIA_TYPE
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|buildResponse
argument_list|(
name|e
argument_list|,
literal|415
argument_list|)
return|;
block|}
name|Throwable
name|cause
init|=
name|e
operator|.
name|getCause
argument_list|()
decl_stmt|;
if|if
condition|(
name|cause
operator|==
literal|null
condition|)
block|{
return|return
name|buildResponse
argument_list|(
name|e
argument_list|,
name|Response
operator|.
name|Status
operator|.
name|INTERNAL_SERVER_ERROR
operator|.
name|getStatusCode
argument_list|()
argument_list|)
return|;
block|}
else|else
block|{
if|if
condition|(
name|cause
operator|instanceof
name|EncryptedDocumentException
condition|)
block|{
return|return
name|buildResponse
argument_list|(
name|cause
argument_list|,
literal|422
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|cause
operator|instanceof
name|TikaException
condition|)
block|{
comment|//unsupported media type
name|Throwable
name|causeOfCause
init|=
name|cause
operator|.
name|getCause
argument_list|()
decl_stmt|;
if|if
condition|(
name|causeOfCause
operator|instanceof
name|WebApplicationException
condition|)
block|{
return|return
operator|(
operator|(
name|WebApplicationException
operator|)
name|causeOfCause
operator|)
operator|.
name|getResponse
argument_list|()
return|;
block|}
return|return
name|buildResponse
argument_list|(
name|cause
argument_list|,
literal|422
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|cause
operator|instanceof
name|IllegalStateException
condition|)
block|{
return|return
name|buildResponse
argument_list|(
name|cause
argument_list|,
literal|422
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|cause
operator|instanceof
name|OldWordFileFormatException
condition|)
block|{
return|return
name|buildResponse
argument_list|(
name|cause
argument_list|,
literal|422
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|cause
operator|instanceof
name|WebApplicationException
condition|)
block|{
return|return
operator|(
operator|(
name|WebApplicationException
operator|)
name|e
operator|.
name|getCause
argument_list|()
operator|)
operator|.
name|getResponse
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|buildResponse
argument_list|(
name|e
argument_list|,
literal|500
argument_list|)
return|;
block|}
block|}
block|}
specifier|private
name|Response
name|buildResponse
parameter_list|(
name|Throwable
name|cause
parameter_list|,
name|int
name|i
parameter_list|)
block|{
if|if
condition|(
name|returnStack
operator|&&
name|cause
operator|!=
literal|null
condition|)
block|{
name|Writer
name|result
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|PrintWriter
name|writer
init|=
operator|new
name|PrintWriter
argument_list|(
name|result
argument_list|)
decl_stmt|;
name|cause
operator|.
name|printStackTrace
argument_list|(
name|writer
argument_list|)
expr_stmt|;
return|return
name|Response
operator|.
name|status
argument_list|(
name|i
argument_list|)
operator|.
name|entity
argument_list|(
name|result
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|type
argument_list|(
literal|"text/plain"
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|Response
operator|.
name|status
argument_list|(
name|i
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
block|}
block|}
end_class

end_unit

