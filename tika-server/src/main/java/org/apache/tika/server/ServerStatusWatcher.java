begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|server
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|server
operator|.
name|resource
operator|.
name|TranslateResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|time
operator|.
name|Duration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|time
operator|.
name|Instant
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_class
specifier|public
class|class
name|ServerStatusWatcher
implements|implements
name|Runnable
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ServerStatusWatcher
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|ServerStatus
name|serverStatus
decl_stmt|;
specifier|private
specifier|final
name|long
name|timeoutMillis
decl_stmt|;
specifier|private
specifier|final
name|long
name|pulseMillis
decl_stmt|;
specifier|public
name|ServerStatusWatcher
parameter_list|(
name|ServerStatus
name|serverStatus
parameter_list|,
name|long
name|timeoutMillis
parameter_list|,
name|long
name|pulseMillis
parameter_list|)
block|{
name|this
operator|.
name|serverStatus
operator|=
name|serverStatus
expr_stmt|;
name|this
operator|.
name|timeoutMillis
operator|=
name|timeoutMillis
expr_stmt|;
name|this
operator|.
name|pulseMillis
operator|=
name|pulseMillis
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|ServerStatus
operator|.
name|STATUS
name|status
init|=
name|serverStatus
operator|.
name|getStatus
argument_list|()
decl_stmt|;
while|while
condition|(
name|status
operator|.
name|equals
argument_list|(
name|ServerStatus
operator|.
name|STATUS
operator|.
name|OPEN
argument_list|)
condition|)
block|{
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|pulseMillis
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{             }
name|checkForTimeouts
argument_list|()
expr_stmt|;
name|status
operator|=
name|serverStatus
operator|.
name|getStatus
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|status
operator|.
name|equals
argument_list|(
name|ServerStatus
operator|.
name|STATUS
operator|.
name|OPEN
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"child process shutting down with status: {}"
argument_list|,
name|status
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
name|status
operator|.
name|getShutdownCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|checkForTimeouts
parameter_list|()
block|{
name|Instant
name|now
init|=
name|Instant
operator|.
name|now
argument_list|()
decl_stmt|;
for|for
control|(
name|TaskStatus
name|status
range|:
name|serverStatus
operator|.
name|getTasks
argument_list|()
operator|.
name|values
argument_list|()
control|)
block|{
name|long
name|millisElapsed
init|=
name|Duration
operator|.
name|between
argument_list|(
name|now
argument_list|,
name|status
operator|.
name|started
argument_list|)
operator|.
name|toMillis
argument_list|()
decl_stmt|;
if|if
condition|(
name|millisElapsed
operator|>
name|timeoutMillis
condition|)
block|{
name|serverStatus
operator|.
name|setStatus
argument_list|(
name|ServerStatus
operator|.
name|STATUS
operator|.
name|TIMEOUT
argument_list|)
expr_stmt|;
if|if
condition|(
name|status
operator|.
name|fileName
operator|.
name|isPresent
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Timeout task {}, millis elapsed {}, file {}"
argument_list|,
name|status
operator|.
name|task
operator|.
name|toString
argument_list|()
argument_list|,
name|Long
operator|.
name|toString
argument_list|(
name|millisElapsed
argument_list|)
argument_list|,
name|status
operator|.
name|fileName
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Timeout task {}, millis elapsed {}"
argument_list|,
name|status
operator|.
name|task
operator|.
name|toString
argument_list|()
argument_list|,
name|Long
operator|.
name|toString
argument_list|(
name|millisElapsed
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
end_class

end_unit

