begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|server
package|;
end_package

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|MappedByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|channels
operator|.
name|FileChannel
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|StandardOpenOption
import|;
end_import

begin_import
import|import
name|java
operator|.
name|time
operator|.
name|Duration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|time
operator|.
name|Instant
import|;
end_import

begin_class
specifier|public
class|class
name|ServerStatusWatcher
implements|implements
name|Runnable
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ServerStatusWatcher
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|ServerStatus
name|serverStatus
decl_stmt|;
specifier|private
specifier|final
name|DataInputStream
name|fromParent
decl_stmt|;
specifier|private
specifier|final
name|long
name|maxFiles
decl_stmt|;
specifier|private
specifier|final
name|ServerTimeouts
name|serverTimeouts
decl_stmt|;
specifier|private
specifier|final
name|FileChannel
name|childStatusChannel
decl_stmt|;
specifier|private
specifier|final
name|MappedByteBuffer
name|toParent
decl_stmt|;
specifier|private
specifier|volatile
name|Instant
name|lastPing
init|=
literal|null
decl_stmt|;
specifier|public
name|ServerStatusWatcher
parameter_list|(
name|ServerStatus
name|serverStatus
parameter_list|,
name|InputStream
name|inputStream
parameter_list|,
name|Path
name|childStatusFile
parameter_list|,
name|long
name|maxFiles
parameter_list|,
name|ServerTimeouts
name|serverTimeouts
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|serverStatus
operator|=
name|serverStatus
expr_stmt|;
name|this
operator|.
name|maxFiles
operator|=
name|maxFiles
expr_stmt|;
name|this
operator|.
name|serverTimeouts
operator|=
name|serverTimeouts
expr_stmt|;
name|this
operator|.
name|childStatusChannel
operator|=
name|FileChannel
operator|.
name|open
argument_list|(
name|childStatusFile
argument_list|,
name|StandardOpenOption
operator|.
name|DSYNC
argument_list|,
name|StandardOpenOption
operator|.
name|CREATE
argument_list|,
name|StandardOpenOption
operator|.
name|WRITE
argument_list|,
name|StandardOpenOption
operator|.
name|READ
argument_list|,
name|StandardOpenOption
operator|.
name|DELETE_ON_CLOSE
argument_list|)
expr_stmt|;
name|this
operator|.
name|toParent
operator|=
name|childStatusChannel
operator|.
name|map
argument_list|(
name|FileChannel
operator|.
name|MapMode
operator|.
name|READ_WRITE
argument_list|,
literal|0
argument_list|,
literal|16
argument_list|)
expr_stmt|;
comment|//8 for timestamp long, 4 for status int, 4 for numactivetasks int
name|serverStatus
operator|.
name|setStatus
argument_list|(
name|ServerStatus
operator|.
name|STATUS
operator|.
name|OPERATING
argument_list|)
expr_stmt|;
name|writeStatus
argument_list|()
expr_stmt|;
name|this
operator|.
name|fromParent
operator|=
operator|new
name|DataInputStream
argument_list|(
name|inputStream
argument_list|)
expr_stmt|;
name|Thread
name|statusWatcher
init|=
operator|new
name|Thread
argument_list|(
operator|new
name|StatusWatcher
argument_list|()
argument_list|)
decl_stmt|;
name|statusWatcher
operator|.
name|setDaemon
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|statusWatcher
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|byte
name|directive
init|=
operator|(
name|byte
operator|)
operator|-
literal|1
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
try|try
block|{
name|directive
operator|=
name|fromParent
operator|.
name|readByte
argument_list|()
expr_stmt|;
name|lastPing
operator|=
name|Instant
operator|.
name|now
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Exception reading from parent"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|serverStatus
operator|.
name|setStatus
argument_list|(
name|ServerStatus
operator|.
name|STATUS
operator|.
name|PARENT_EXCEPTION
argument_list|)
expr_stmt|;
name|shutdown
argument_list|(
name|ServerStatus
operator|.
name|STATUS
operator|.
name|PARENT_EXCEPTION
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|directive
operator|==
name|ServerStatus
operator|.
name|DIRECTIVES
operator|.
name|PING
operator|.
name|getByte
argument_list|()
condition|)
block|{
if|if
condition|(
name|serverStatus
operator|.
name|getStatus
argument_list|()
operator|.
name|equals
argument_list|(
name|ServerStatus
operator|.
name|STATUS
operator|.
name|OPERATING
argument_list|)
condition|)
block|{
name|checkForHitMaxFiles
argument_list|()
expr_stmt|;
name|checkForTaskTimeouts
argument_list|()
expr_stmt|;
block|}
try|try
block|{
name|writeStatus
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Exception writing to parent"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|serverStatus
operator|.
name|setStatus
argument_list|(
name|ServerStatus
operator|.
name|STATUS
operator|.
name|PARENT_EXCEPTION
argument_list|)
expr_stmt|;
name|shutdown
argument_list|(
name|ServerStatus
operator|.
name|STATUS
operator|.
name|PARENT_EXCEPTION
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|directive
operator|==
name|ServerStatus
operator|.
name|DIRECTIVES
operator|.
name|SHUTDOWN
operator|.
name|getByte
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Parent requested shutdown"
argument_list|)
expr_stmt|;
name|serverStatus
operator|.
name|setStatus
argument_list|(
name|ServerStatus
operator|.
name|STATUS
operator|.
name|PARENT_REQUESTED_SHUTDOWN
argument_list|)
expr_stmt|;
name|shutdown
argument_list|(
name|ServerStatus
operator|.
name|STATUS
operator|.
name|PARENT_REQUESTED_SHUTDOWN
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|directive
operator|==
name|ServerStatus
operator|.
name|DIRECTIVES
operator|.
name|PING_ACTIVE_SERVER_TASKS
operator|.
name|getByte
argument_list|()
condition|)
block|{
try|try
block|{
name|writeStatus
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Exception writing to parent"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|serverStatus
operator|.
name|setStatus
argument_list|(
name|ServerStatus
operator|.
name|STATUS
operator|.
name|PARENT_EXCEPTION
argument_list|)
expr_stmt|;
name|shutdown
argument_list|(
name|ServerStatus
operator|.
name|STATUS
operator|.
name|PARENT_EXCEPTION
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|private
name|void
name|writeStatus
parameter_list|()
throws|throws
name|IllegalArgumentException
block|{
name|toParent
operator|.
name|putLong
argument_list|(
literal|0
argument_list|,
name|Instant
operator|.
name|now
argument_list|()
operator|.
name|toEpochMilli
argument_list|()
argument_list|)
expr_stmt|;
name|toParent
operator|.
name|putInt
argument_list|(
literal|8
argument_list|,
name|serverStatus
operator|.
name|getStatus
argument_list|()
operator|.
name|getInt
argument_list|()
argument_list|)
expr_stmt|;
name|toParent
operator|.
name|putInt
argument_list|(
literal|12
argument_list|,
name|serverStatus
operator|.
name|getTasks
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|checkForHitMaxFiles
parameter_list|()
block|{
if|if
condition|(
name|maxFiles
operator|<
literal|0
condition|)
block|{
return|return;
block|}
name|long
name|filesProcessed
init|=
name|serverStatus
operator|.
name|getFilesProcessed
argument_list|()
decl_stmt|;
if|if
condition|(
name|filesProcessed
operator|>=
name|maxFiles
condition|)
block|{
name|serverStatus
operator|.
name|setStatus
argument_list|(
name|ServerStatus
operator|.
name|STATUS
operator|.
name|HIT_MAX
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|checkForTaskTimeouts
parameter_list|()
block|{
name|Instant
name|now
init|=
name|Instant
operator|.
name|now
argument_list|()
decl_stmt|;
for|for
control|(
name|TaskStatus
name|status
range|:
name|serverStatus
operator|.
name|getTasks
argument_list|()
operator|.
name|values
argument_list|()
control|)
block|{
name|long
name|millisElapsed
init|=
name|Duration
operator|.
name|between
argument_list|(
name|status
operator|.
name|started
argument_list|,
name|now
argument_list|)
operator|.
name|toMillis
argument_list|()
decl_stmt|;
if|if
condition|(
name|millisElapsed
operator|>
name|serverTimeouts
operator|.
name|getTaskTimeoutMillis
argument_list|()
condition|)
block|{
name|serverStatus
operator|.
name|setStatus
argument_list|(
name|ServerStatus
operator|.
name|STATUS
operator|.
name|TIMEOUT
argument_list|)
expr_stmt|;
if|if
condition|(
name|status
operator|.
name|fileName
operator|.
name|isPresent
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Timeout task {}, millis elapsed {}, file {}"
argument_list|,
name|status
operator|.
name|task
operator|.
name|toString
argument_list|()
argument_list|,
name|Long
operator|.
name|toString
argument_list|(
name|millisElapsed
argument_list|)
argument_list|,
name|status
operator|.
name|fileName
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Timeout task {}, millis elapsed {}"
argument_list|,
name|status
operator|.
name|task
operator|.
name|toString
argument_list|()
argument_list|,
name|Long
operator|.
name|toString
argument_list|(
name|millisElapsed
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|private
name|void
name|shutdown
parameter_list|(
name|ServerStatus
operator|.
name|STATUS
name|status
parameter_list|)
block|{
name|toParent
operator|.
name|putLong
argument_list|(
literal|0
argument_list|,
name|Instant
operator|.
name|now
argument_list|()
operator|.
name|toEpochMilli
argument_list|()
argument_list|)
expr_stmt|;
name|toParent
operator|.
name|putInt
argument_list|(
literal|8
argument_list|,
name|serverStatus
operator|.
name|getStatus
argument_list|()
operator|.
name|getInt
argument_list|()
argument_list|)
expr_stmt|;
name|toParent
operator|.
name|putInt
argument_list|(
literal|12
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|toParent
operator|.
name|force
argument_list|()
expr_stmt|;
try|try
block|{
name|childStatusChannel
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"problem closing status channel"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Shutting down child process with status: {}"
argument_list|,
name|status
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
name|status
operator|.
name|getShutdownCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|//This is an internal thread that pulses every 100MS
comment|//within the child to see if the child should die.
specifier|private
class|class
name|StatusWatcher
implements|implements
name|Runnable
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
while|while
condition|(
literal|true
condition|)
block|{
name|ServerStatus
operator|.
name|STATUS
name|currStatus
init|=
name|serverStatus
operator|.
name|getStatus
argument_list|()
decl_stmt|;
if|if
condition|(
name|currStatus
operator|!=
name|ServerStatus
operator|.
name|STATUS
operator|.
name|OPERATING
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"child process observed "
operator|+
name|currStatus
operator|.
name|name
argument_list|()
operator|+
literal|" and is shutting down."
argument_list|)
expr_stmt|;
name|shutdown
argument_list|(
name|currStatus
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|lastPing
operator|!=
literal|null
condition|)
block|{
name|long
name|elapsed
init|=
name|Duration
operator|.
name|between
argument_list|(
name|lastPing
argument_list|,
name|Instant
operator|.
name|now
argument_list|()
argument_list|)
operator|.
name|toMillis
argument_list|()
decl_stmt|;
if|if
condition|(
name|elapsed
operator|>
name|serverTimeouts
operator|.
name|getPingTimeoutMillis
argument_list|()
condition|)
block|{
name|serverStatus
operator|.
name|setStatus
argument_list|(
name|ServerStatus
operator|.
name|STATUS
operator|.
name|PARENT_EXCEPTION
argument_list|)
expr_stmt|;
name|shutdown
argument_list|(
name|ServerStatus
operator|.
name|STATUS
operator|.
name|PARENT_EXCEPTION
argument_list|)
expr_stmt|;
block|}
block|}
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|serverTimeouts
operator|.
name|getPingPulseMillis
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
return|return;
block|}
block|}
block|}
block|}
block|}
end_class

end_unit

