begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|server
operator|.
name|resource
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|Consumes
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|POST
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|PUT
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|PathParam
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|Produces
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|config
operator|.
name|LoadErrorHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|config
operator|.
name|ServiceLoader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|exception
operator|.
name|TikaException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|language
operator|.
name|LanguageIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|language
operator|.
name|LanguageProfile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|language
operator|.
name|translate
operator|.
name|Translator
import|;
end_import

begin_class
annotation|@
name|Path
argument_list|(
literal|"/translate"
argument_list|)
specifier|public
class|class
name|TranslateResource
block|{
specifier|private
name|Translator
name|defaultTranslator
decl_stmt|;
specifier|private
name|ServiceLoader
name|loader
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Log
name|logger
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TranslateResource
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
specifier|public
name|TranslateResource
parameter_list|()
block|{
name|this
operator|.
name|loader
operator|=
operator|new
name|ServiceLoader
argument_list|(
name|ServiceLoader
operator|.
name|class
operator|.
name|getClassLoader
argument_list|()
argument_list|,
name|LoadErrorHandler
operator|.
name|WARN
argument_list|)
expr_stmt|;
name|this
operator|.
name|defaultTranslator
operator|=
name|TikaResource
operator|.
name|getConfig
argument_list|()
operator|.
name|getTranslator
argument_list|()
expr_stmt|;
block|}
annotation|@
name|PUT
annotation|@
name|POST
annotation|@
name|Path
argument_list|(
literal|"/all/{translator}/{src}/{dest}"
argument_list|)
annotation|@
name|Consumes
argument_list|(
literal|"*/*"
argument_list|)
annotation|@
name|Produces
argument_list|(
literal|"text/plain"
argument_list|)
specifier|public
name|String
name|translate
parameter_list|(
specifier|final
name|InputStream
name|is
parameter_list|,
annotation|@
name|PathParam
argument_list|(
literal|"translator"
argument_list|)
name|String
name|translator
parameter_list|,
annotation|@
name|PathParam
argument_list|(
literal|"src"
argument_list|)
name|String
name|sLang
parameter_list|,
annotation|@
name|PathParam
argument_list|(
literal|"dest"
argument_list|)
name|String
name|dLang
parameter_list|)
throws|throws
name|TikaException
throws|,
name|IOException
block|{
return|return
name|doTranslate
argument_list|(
name|IOUtils
operator|.
name|toString
argument_list|(
name|is
argument_list|,
literal|"utf-8"
argument_list|)
argument_list|,
name|translator
argument_list|,
name|sLang
argument_list|,
name|dLang
argument_list|)
return|;
block|}
annotation|@
name|PUT
annotation|@
name|POST
annotation|@
name|Path
argument_list|(
literal|"/all/{translator}/{dest}"
argument_list|)
annotation|@
name|Consumes
argument_list|(
literal|"*/*"
argument_list|)
annotation|@
name|Produces
argument_list|(
literal|"text/plain"
argument_list|)
specifier|public
name|String
name|autoTranslate
parameter_list|(
specifier|final
name|InputStream
name|is
parameter_list|,
annotation|@
name|PathParam
argument_list|(
literal|"translator"
argument_list|)
name|String
name|translator
parameter_list|,
annotation|@
name|PathParam
argument_list|(
literal|"dest"
argument_list|)
name|String
name|dLang
parameter_list|)
throws|throws
name|TikaException
throws|,
name|IOException
block|{
specifier|final
name|String
name|content
init|=
name|IOUtils
operator|.
name|toString
argument_list|(
name|is
argument_list|,
literal|"utf-8"
argument_list|)
decl_stmt|;
name|LanguageIdentifier
name|language
init|=
operator|new
name|LanguageIdentifier
argument_list|(
operator|new
name|LanguageProfile
argument_list|(
name|content
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|sLang
init|=
name|language
operator|.
name|getLanguage
argument_list|()
decl_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"LanguageIdentifier: detected source lang: ["
operator|+
name|sLang
operator|+
literal|"]"
argument_list|)
expr_stmt|;
return|return
name|doTranslate
argument_list|(
name|content
argument_list|,
name|translator
argument_list|,
name|sLang
argument_list|,
name|dLang
argument_list|)
return|;
block|}
specifier|private
name|String
name|doTranslate
parameter_list|(
name|String
name|content
parameter_list|,
name|String
name|translator
parameter_list|,
name|String
name|sLang
parameter_list|,
name|String
name|dLang
parameter_list|)
throws|throws
name|TikaException
throws|,
name|IOException
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"Using translator: ["
operator|+
name|translator
operator|+
literal|"]: src: ["
operator|+
name|sLang
operator|+
literal|"]: dest: ["
operator|+
name|dLang
operator|+
literal|"]"
argument_list|)
expr_stmt|;
name|Translator
name|translate
init|=
name|byClassName
argument_list|(
name|translator
argument_list|)
decl_stmt|;
if|if
condition|(
name|translate
operator|==
literal|null
condition|)
block|{
name|translate
operator|=
name|this
operator|.
name|defaultTranslator
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"Using default translator"
argument_list|)
expr_stmt|;
block|}
return|return
name|translate
operator|.
name|translate
argument_list|(
name|content
argument_list|,
name|sLang
argument_list|,
name|dLang
argument_list|)
return|;
block|}
specifier|private
name|Translator
name|byClassName
parameter_list|(
name|String
name|className
parameter_list|)
block|{
name|List
argument_list|<
name|Translator
argument_list|>
name|translators
init|=
name|loader
operator|.
name|loadStaticServiceProviders
argument_list|(
name|Translator
operator|.
name|class
argument_list|)
decl_stmt|;
for|for
control|(
name|Translator
name|t
range|:
name|translators
control|)
block|{
if|if
condition|(
name|t
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|className
argument_list|)
condition|)
block|{
return|return
name|t
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

