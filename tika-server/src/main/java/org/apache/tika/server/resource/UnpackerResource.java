begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|server
operator|.
name|resource
package|;
end_package

begin_import
import|import static
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
operator|.
name|UTF_8
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|PUT
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|Produces
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|WebApplicationException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Context
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|HttpHeaders
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Response
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|UriInfo
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStreamWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|au
operator|.
name|com
operator|.
name|bytecode
operator|.
name|opencsv
operator|.
name|CSVWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|mutable
operator|.
name|MutableInt
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|poifs
operator|.
name|filesystem
operator|.
name|DirectoryEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|poifs
operator|.
name|filesystem
operator|.
name|DocumentEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|poifs
operator|.
name|filesystem
operator|.
name|DocumentInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|poifs
operator|.
name|filesystem
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|poifs
operator|.
name|filesystem
operator|.
name|Ole10Native
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|poifs
operator|.
name|filesystem
operator|.
name|Ole10NativeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|poifs
operator|.
name|filesystem
operator|.
name|POIFSFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|util
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|extractor
operator|.
name|EmbeddedDocumentExtractor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|io
operator|.
name|TikaInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|metadata
operator|.
name|Metadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|metadata
operator|.
name|TikaMetadataKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|mime
operator|.
name|MimeTypeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|DigestingParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|ParseContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|Parser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|microsoft
operator|.
name|OfficeParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|sax
operator|.
name|BodyContentHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|sax
operator|.
name|RichTextContentHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|ContentHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|helpers
operator|.
name|DefaultHandler
import|;
end_import

begin_class
annotation|@
name|Path
argument_list|(
literal|"/unpack"
argument_list|)
specifier|public
class|class
name|UnpackerResource
block|{
specifier|public
specifier|static
specifier|final
name|String
name|TEXT_FILENAME
init|=
literal|"__TEXT__"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|META_FILENAME
init|=
literal|"__METADATA__"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|UnpackerResource
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
specifier|static
name|void
name|metadataToCsv
parameter_list|(
name|Metadata
name|metadata
parameter_list|,
name|OutputStream
name|outputStream
parameter_list|)
throws|throws
name|IOException
block|{
name|CSVWriter
name|writer
init|=
operator|new
name|CSVWriter
argument_list|(
operator|new
name|OutputStreamWriter
argument_list|(
name|outputStream
argument_list|,
name|UTF_8
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|name
range|:
name|metadata
operator|.
name|names
argument_list|()
control|)
block|{
name|String
index|[]
name|values
init|=
name|metadata
operator|.
name|getValues
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|String
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|values
operator|.
name|length
operator|+
literal|1
argument_list|)
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|list
operator|.
name|addAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|values
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeNext
argument_list|(
name|list
operator|.
name|toArray
argument_list|(
name|values
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Path
argument_list|(
literal|"/{id:(/.*)?}"
argument_list|)
annotation|@
name|PUT
annotation|@
name|Produces
argument_list|(
block|{
literal|"application/zip"
block|,
literal|"application/x-tar"
block|}
argument_list|)
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|byte
index|[]
argument_list|>
name|unpack
parameter_list|(
name|InputStream
name|is
parameter_list|,
annotation|@
name|Context
name|HttpHeaders
name|httpHeaders
parameter_list|,
annotation|@
name|Context
name|UriInfo
name|info
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|process
argument_list|(
name|TikaResource
operator|.
name|getInputStream
argument_list|(
name|is
argument_list|,
name|httpHeaders
argument_list|)
argument_list|,
name|httpHeaders
argument_list|,
name|info
argument_list|,
literal|false
argument_list|)
return|;
block|}
annotation|@
name|Path
argument_list|(
literal|"/all{id:(/.*)?}"
argument_list|)
annotation|@
name|PUT
annotation|@
name|Produces
argument_list|(
block|{
literal|"application/zip"
block|,
literal|"application/x-tar"
block|}
argument_list|)
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|byte
index|[]
argument_list|>
name|unpackAll
parameter_list|(
name|InputStream
name|is
parameter_list|,
annotation|@
name|Context
name|HttpHeaders
name|httpHeaders
parameter_list|,
annotation|@
name|Context
name|UriInfo
name|info
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|process
argument_list|(
name|TikaResource
operator|.
name|getInputStream
argument_list|(
name|is
argument_list|,
name|httpHeaders
argument_list|)
argument_list|,
name|httpHeaders
argument_list|,
name|info
argument_list|,
literal|true
argument_list|)
return|;
block|}
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|byte
index|[]
argument_list|>
name|process
parameter_list|(
name|InputStream
name|is
parameter_list|,
annotation|@
name|Context
name|HttpHeaders
name|httpHeaders
parameter_list|,
annotation|@
name|Context
name|UriInfo
name|info
parameter_list|,
name|boolean
name|saveAll
parameter_list|)
throws|throws
name|Exception
block|{
name|Metadata
name|metadata
init|=
operator|new
name|Metadata
argument_list|()
decl_stmt|;
name|ParseContext
name|pc
init|=
operator|new
name|ParseContext
argument_list|()
decl_stmt|;
name|Parser
name|parser
init|=
name|TikaResource
operator|.
name|createParser
argument_list|()
decl_stmt|;
if|if
condition|(
name|parser
operator|instanceof
name|DigestingParser
condition|)
block|{
comment|//no need to digest for unwrapping
name|parser
operator|=
operator|(
operator|(
name|DigestingParser
operator|)
name|parser
operator|)
operator|.
name|getWrappedParser
argument_list|()
expr_stmt|;
block|}
name|TikaResource
operator|.
name|fillMetadata
argument_list|(
name|parser
argument_list|,
name|metadata
argument_list|,
name|pc
argument_list|,
name|httpHeaders
operator|.
name|getRequestHeaders
argument_list|()
argument_list|)
expr_stmt|;
name|TikaResource
operator|.
name|logRequest
argument_list|(
name|LOG
argument_list|,
name|info
argument_list|,
name|metadata
argument_list|)
expr_stmt|;
name|ContentHandler
name|ch
decl_stmt|;
name|ByteArrayOutputStream
name|text
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
if|if
condition|(
name|saveAll
condition|)
block|{
name|ch
operator|=
operator|new
name|BodyContentHandler
argument_list|(
operator|new
name|RichTextContentHandler
argument_list|(
operator|new
name|OutputStreamWriter
argument_list|(
name|text
argument_list|,
name|UTF_8
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ch
operator|=
operator|new
name|DefaultHandler
argument_list|()
expr_stmt|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|byte
index|[]
argument_list|>
name|files
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|MutableInt
name|count
init|=
operator|new
name|MutableInt
argument_list|()
decl_stmt|;
name|pc
operator|.
name|set
argument_list|(
name|EmbeddedDocumentExtractor
operator|.
name|class
argument_list|,
operator|new
name|MyEmbeddedDocumentExtractor
argument_list|(
name|count
argument_list|,
name|files
argument_list|)
argument_list|)
expr_stmt|;
name|TikaResource
operator|.
name|parse
argument_list|(
name|parser
argument_list|,
name|LOG
argument_list|,
name|info
operator|.
name|getPath
argument_list|()
argument_list|,
name|is
argument_list|,
name|ch
argument_list|,
name|metadata
argument_list|,
name|pc
argument_list|)
expr_stmt|;
if|if
condition|(
name|count
operator|.
name|intValue
argument_list|()
operator|==
literal|0
operator|&&
operator|!
name|saveAll
condition|)
block|{
throw|throw
operator|new
name|WebApplicationException
argument_list|(
name|Response
operator|.
name|Status
operator|.
name|NO_CONTENT
argument_list|)
throw|;
block|}
if|if
condition|(
name|saveAll
condition|)
block|{
name|files
operator|.
name|put
argument_list|(
name|TEXT_FILENAME
argument_list|,
name|text
operator|.
name|toByteArray
argument_list|()
argument_list|)
expr_stmt|;
name|ByteArrayOutputStream
name|metaStream
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|metadataToCsv
argument_list|(
name|metadata
argument_list|,
name|metaStream
argument_list|)
expr_stmt|;
name|files
operator|.
name|put
argument_list|(
name|META_FILENAME
argument_list|,
name|metaStream
operator|.
name|toByteArray
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|files
return|;
block|}
specifier|private
class|class
name|MyEmbeddedDocumentExtractor
implements|implements
name|EmbeddedDocumentExtractor
block|{
specifier|private
specifier|final
name|MutableInt
name|count
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|byte
index|[]
argument_list|>
name|zout
decl_stmt|;
name|MyEmbeddedDocumentExtractor
parameter_list|(
name|MutableInt
name|count
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|byte
index|[]
argument_list|>
name|zout
parameter_list|)
block|{
name|this
operator|.
name|count
operator|=
name|count
expr_stmt|;
name|this
operator|.
name|zout
operator|=
name|zout
expr_stmt|;
block|}
specifier|public
name|boolean
name|shouldParseEmbedded
parameter_list|(
name|Metadata
name|metadata
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
specifier|public
name|void
name|parseEmbedded
parameter_list|(
name|InputStream
name|inputStream
parameter_list|,
name|ContentHandler
name|contentHandler
parameter_list|,
name|Metadata
name|metadata
parameter_list|,
name|boolean
name|b
parameter_list|)
throws|throws
name|SAXException
throws|,
name|IOException
block|{
name|ByteArrayOutputStream
name|bos
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|IOUtils
operator|.
name|copy
argument_list|(
name|inputStream
argument_list|,
name|bos
argument_list|)
expr_stmt|;
name|byte
index|[]
name|data
init|=
name|bos
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
name|String
name|name
init|=
name|metadata
operator|.
name|get
argument_list|(
name|TikaMetadataKeys
operator|.
name|RESOURCE_NAME_KEY
argument_list|)
decl_stmt|;
name|String
name|contentType
init|=
name|metadata
operator|.
name|get
argument_list|(
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|metadata
operator|.
name|HttpHeaders
operator|.
name|CONTENT_TYPE
argument_list|)
decl_stmt|;
if|if
condition|(
name|name
operator|==
literal|null
condition|)
block|{
name|name
operator|=
name|Integer
operator|.
name|toString
argument_list|(
name|count
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|name
operator|.
name|contains
argument_list|(
literal|"."
argument_list|)
operator|&&
name|contentType
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|String
name|ext
init|=
name|TikaResource
operator|.
name|getConfig
argument_list|()
operator|.
name|getMimeRepository
argument_list|()
operator|.
name|forName
argument_list|(
name|contentType
argument_list|)
operator|.
name|getExtension
argument_list|()
decl_stmt|;
if|if
condition|(
name|ext
operator|!=
literal|null
condition|)
block|{
name|name
operator|+=
name|ext
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|MimeTypeException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Unexpected MimeTypeException"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
literal|"application/vnd.openxmlformats-officedocument.oleObject"
operator|.
name|equals
argument_list|(
name|contentType
argument_list|)
condition|)
block|{
name|POIFSFileSystem
name|poifs
init|=
operator|new
name|POIFSFileSystem
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|data
argument_list|)
argument_list|)
decl_stmt|;
name|OfficeParser
operator|.
name|POIFSDocumentType
name|type
init|=
name|OfficeParser
operator|.
name|POIFSDocumentType
operator|.
name|detectType
argument_list|(
name|poifs
argument_list|)
decl_stmt|;
if|if
condition|(
name|type
operator|==
name|OfficeParser
operator|.
name|POIFSDocumentType
operator|.
name|OLE10_NATIVE
condition|)
block|{
try|try
block|{
name|Ole10Native
name|ole
init|=
name|Ole10Native
operator|.
name|createFromEmbeddedOleObject
argument_list|(
name|poifs
argument_list|)
decl_stmt|;
if|if
condition|(
name|ole
operator|.
name|getDataSize
argument_list|()
operator|>
literal|0
condition|)
block|{
name|String
name|label
init|=
name|ole
operator|.
name|getLabel
argument_list|()
decl_stmt|;
if|if
condition|(
name|label
operator|.
name|startsWith
argument_list|(
literal|"ole-"
argument_list|)
condition|)
block|{
name|label
operator|=
name|Integer
operator|.
name|toString
argument_list|(
name|count
operator|.
name|intValue
argument_list|()
argument_list|)
operator|+
literal|'-'
operator|+
name|label
expr_stmt|;
block|}
name|name
operator|=
name|label
expr_stmt|;
name|data
operator|=
name|ole
operator|.
name|getDataBuffer
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Ole10NativeException
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Skipping invalid part"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|name
operator|+=
literal|'.'
operator|+
name|type
operator|.
name|getExtension
argument_list|()
expr_stmt|;
block|}
block|}
specifier|final
name|String
name|finalName
init|=
name|name
decl_stmt|;
if|if
condition|(
name|data
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|zout
operator|.
name|put
argument_list|(
name|finalName
argument_list|,
name|data
argument_list|)
expr_stmt|;
name|count
operator|.
name|increment
argument_list|()
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|inputStream
operator|instanceof
name|TikaInputStream
condition|)
block|{
name|TikaInputStream
name|tin
init|=
operator|(
name|TikaInputStream
operator|)
name|inputStream
decl_stmt|;
if|if
condition|(
name|tin
operator|.
name|getOpenContainer
argument_list|()
operator|!=
literal|null
operator|&&
name|tin
operator|.
name|getOpenContainer
argument_list|()
operator|instanceof
name|DirectoryEntry
condition|)
block|{
name|POIFSFileSystem
name|fs
init|=
operator|new
name|POIFSFileSystem
argument_list|()
decl_stmt|;
name|copy
argument_list|(
operator|(
name|DirectoryEntry
operator|)
name|tin
operator|.
name|getOpenContainer
argument_list|()
argument_list|,
name|fs
operator|.
name|getRoot
argument_list|()
argument_list|)
expr_stmt|;
name|ByteArrayOutputStream
name|bos2
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|fs
operator|.
name|writeFilesystem
argument_list|(
name|bos2
argument_list|)
expr_stmt|;
name|bos2
operator|.
name|close
argument_list|()
expr_stmt|;
name|zout
operator|.
name|put
argument_list|(
name|finalName
argument_list|,
name|bos2
operator|.
name|toByteArray
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|protected
name|void
name|copy
parameter_list|(
name|DirectoryEntry
name|sourceDir
parameter_list|,
name|DirectoryEntry
name|destDir
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|Entry
name|entry
range|:
name|sourceDir
control|)
block|{
if|if
condition|(
name|entry
operator|instanceof
name|DirectoryEntry
condition|)
block|{
comment|// Need to recurse
name|DirectoryEntry
name|newDir
init|=
name|destDir
operator|.
name|createDirectory
argument_list|(
name|entry
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|copy
argument_list|(
operator|(
name|DirectoryEntry
operator|)
name|entry
argument_list|,
name|newDir
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Copy entry
try|try
init|(
name|InputStream
name|contents
init|=
operator|new
name|DocumentInputStream
argument_list|(
operator|(
name|DocumentEntry
operator|)
name|entry
argument_list|)
init|)
block|{
name|destDir
operator|.
name|createDocument
argument_list|(
name|entry
operator|.
name|getName
argument_list|()
argument_list|,
name|contents
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
block|}
end_class

end_unit

