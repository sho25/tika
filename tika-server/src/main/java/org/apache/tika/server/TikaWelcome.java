begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|server
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|annotation
operator|.
name|Annotation
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|DELETE
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|GET
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|HEAD
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|OPTIONS
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|POST
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|PUT
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|Produces
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|lifecycle
operator|.
name|ResourceProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|Tika
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|config
operator|.
name|TikaConfig
import|;
end_import

begin_import
import|import
name|sun
operator|.
name|misc
operator|.
name|Regexp
import|;
end_import

begin_comment
comment|/**  *<p>Provides a basic welcome to the Apache Tika Server.</p>  */
end_comment

begin_class
annotation|@
name|Path
argument_list|(
literal|"/"
argument_list|)
specifier|public
class|class
name|TikaWelcome
block|{
specifier|private
specifier|static
specifier|final
name|String
name|DOCS_URL
init|=
literal|"https://wiki.apache.org/tika/TikaJAXRS"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|Annotation
argument_list|>
argument_list|,
name|String
argument_list|>
name|HTTP_METHODS
init|=
operator|new
name|HashMap
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|Annotation
argument_list|>
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
name|HTTP_METHODS
operator|.
name|put
argument_list|(
name|DELETE
operator|.
name|class
argument_list|,
literal|"DELETE"
argument_list|)
expr_stmt|;
name|HTTP_METHODS
operator|.
name|put
argument_list|(
name|GET
operator|.
name|class
argument_list|,
literal|"GET"
argument_list|)
expr_stmt|;
name|HTTP_METHODS
operator|.
name|put
argument_list|(
name|HEAD
operator|.
name|class
argument_list|,
literal|"HEAD"
argument_list|)
expr_stmt|;
name|HTTP_METHODS
operator|.
name|put
argument_list|(
name|OPTIONS
operator|.
name|class
argument_list|,
literal|"OPTIONS"
argument_list|)
expr_stmt|;
name|HTTP_METHODS
operator|.
name|put
argument_list|(
name|POST
operator|.
name|class
argument_list|,
literal|"POST"
argument_list|)
expr_stmt|;
name|HTTP_METHODS
operator|.
name|put
argument_list|(
name|PUT
operator|.
name|class
argument_list|,
literal|"PUT"
argument_list|)
expr_stmt|;
block|}
specifier|private
name|Tika
name|tika
decl_stmt|;
specifier|private
name|HTMLHelper
name|html
decl_stmt|;
specifier|private
name|List
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
name|endpoints
init|=
operator|new
name|LinkedList
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
specifier|public
name|TikaWelcome
parameter_list|(
name|TikaConfig
name|tika
parameter_list|,
name|List
argument_list|<
name|ResourceProvider
argument_list|>
name|rCoreProviders
parameter_list|)
block|{
name|this
operator|.
name|tika
operator|=
operator|new
name|Tika
argument_list|(
name|tika
argument_list|)
expr_stmt|;
name|this
operator|.
name|html
operator|=
operator|new
name|HTMLHelper
argument_list|()
expr_stmt|;
for|for
control|(
name|ResourceProvider
name|rp
range|:
name|rCoreProviders
control|)
block|{
name|this
operator|.
name|endpoints
operator|.
name|add
argument_list|(
name|rp
operator|.
name|getResourceClass
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|List
argument_list|<
name|Endpoint
argument_list|>
name|identifyEndpoints
parameter_list|()
block|{
name|List
argument_list|<
name|Endpoint
argument_list|>
name|found
init|=
operator|new
name|ArrayList
argument_list|<
name|Endpoint
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Class
argument_list|<
name|?
argument_list|>
name|endpoint
range|:
name|endpoints
control|)
block|{
name|Path
name|p
init|=
name|endpoint
operator|.
name|getAnnotation
argument_list|(
name|Path
operator|.
name|class
argument_list|)
decl_stmt|;
name|String
name|basePath
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|p
operator|!=
literal|null
condition|)
name|basePath
operator|=
name|p
operator|.
name|value
argument_list|()
expr_stmt|;
for|for
control|(
name|Method
name|m
range|:
name|endpoint
operator|.
name|getMethods
argument_list|()
control|)
block|{
name|String
name|httpMethod
init|=
literal|null
decl_stmt|;
name|String
name|methodPath
init|=
literal|null
decl_stmt|;
name|String
index|[]
name|produces
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Annotation
name|a
range|:
name|m
operator|.
name|getAnnotations
argument_list|()
control|)
block|{
for|for
control|(
name|Class
argument_list|<
name|?
extends|extends
name|Annotation
argument_list|>
name|httpMethAnn
range|:
name|HTTP_METHODS
operator|.
name|keySet
argument_list|()
control|)
block|{
if|if
condition|(
name|httpMethAnn
operator|.
name|isInstance
argument_list|(
name|a
argument_list|)
condition|)
block|{
name|httpMethod
operator|=
name|HTTP_METHODS
operator|.
name|get
argument_list|(
name|httpMethAnn
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|a
operator|instanceof
name|Path
condition|)
block|{
name|methodPath
operator|=
operator|(
operator|(
name|Path
operator|)
name|a
operator|)
operator|.
name|value
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|a
operator|instanceof
name|Produces
condition|)
block|{
name|produces
operator|=
operator|(
operator|(
name|Produces
operator|)
name|a
operator|)
operator|.
name|value
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|httpMethod
operator|!=
literal|null
condition|)
block|{
name|String
name|mPath
init|=
name|basePath
decl_stmt|;
if|if
condition|(
name|mPath
operator|==
literal|null
condition|)
block|{
name|mPath
operator|=
literal|""
expr_stmt|;
block|}
if|if
condition|(
name|methodPath
operator|!=
literal|null
condition|)
block|{
name|mPath
operator|+=
name|methodPath
expr_stmt|;
block|}
if|if
condition|(
name|produces
operator|==
literal|null
condition|)
block|{
name|produces
operator|=
operator|new
name|String
index|[
literal|0
index|]
expr_stmt|;
block|}
name|found
operator|.
name|add
argument_list|(
operator|new
name|Endpoint
argument_list|(
name|endpoint
argument_list|,
name|m
argument_list|,
name|mPath
argument_list|,
name|httpMethod
argument_list|,
name|produces
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|Collections
operator|.
name|sort
argument_list|(
name|found
argument_list|,
operator|new
name|Comparator
argument_list|<
name|Endpoint
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|Endpoint
name|e1
parameter_list|,
name|Endpoint
name|e2
parameter_list|)
block|{
name|int
name|res
init|=
name|e1
operator|.
name|path
operator|.
name|compareTo
argument_list|(
name|e2
operator|.
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|res
operator|==
literal|0
condition|)
block|{
name|res
operator|=
name|e1
operator|.
name|methodName
operator|.
name|compareTo
argument_list|(
name|e2
operator|.
name|methodName
argument_list|)
expr_stmt|;
block|}
return|return
name|res
return|;
block|}
block|}
argument_list|)
expr_stmt|;
return|return
name|found
return|;
block|}
annotation|@
name|GET
annotation|@
name|Produces
argument_list|(
literal|"text/html"
argument_list|)
specifier|public
name|String
name|getWelcomeHTML
parameter_list|()
block|{
name|StringBuffer
name|h
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|String
name|tikaVersion
init|=
name|tika
operator|.
name|toString
argument_list|()
decl_stmt|;
name|html
operator|.
name|generateHeader
argument_list|(
name|h
argument_list|,
literal|"Welcome to the "
operator|+
name|tikaVersion
operator|+
literal|" Server"
argument_list|)
expr_stmt|;
name|h
operator|.
name|append
argument_list|(
literal|"<p>For endpoints, please see<a href=\""
argument_list|)
expr_stmt|;
name|h
operator|.
name|append
argument_list|(
name|DOCS_URL
argument_list|)
expr_stmt|;
name|h
operator|.
name|append
argument_list|(
literal|"\">"
argument_list|)
expr_stmt|;
name|h
operator|.
name|append
argument_list|(
name|DOCS_URL
argument_list|)
expr_stmt|;
name|h
operator|.
name|append
argument_list|(
literal|"</a>"
argument_list|)
expr_stmt|;
comment|// TIKA-1269 -- Miredot documentation
comment|// As the SNAPSHOT endpoints are updated, please update the website by running
comment|// the server tests and doing step 12.6 of https://wiki.apache.org/tika/ReleaseProcess.
name|Pattern
name|p
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"\\d+\\.\\d+"
argument_list|)
decl_stmt|;
name|Matcher
name|m
init|=
name|p
operator|.
name|matcher
argument_list|(
name|tikaVersion
argument_list|)
decl_stmt|;
if|if
condition|(
name|m
operator|.
name|find
argument_list|()
condition|)
block|{
name|String
name|versionNumber
init|=
name|m
operator|.
name|group
argument_list|()
decl_stmt|;
name|String
name|miredot
init|=
literal|"http://tika.apache.org/"
operator|+
name|versionNumber
operator|+
literal|"/miredot/index.html"
decl_stmt|;
name|h
operator|.
name|append
argument_list|(
literal|" and<a href=\""
argument_list|)
operator|.
name|append
argument_list|(
name|miredot
argument_list|)
operator|.
name|append
argument_list|(
literal|"\">"
argument_list|)
operator|.
name|append
argument_list|(
name|miredot
argument_list|)
operator|.
name|append
argument_list|(
literal|"</a>"
argument_list|)
expr_stmt|;
block|}
name|h
operator|.
name|append
argument_list|(
literal|"</p>\n"
argument_list|)
expr_stmt|;
name|h
operator|.
name|append
argument_list|(
literal|"<ul>\n"
argument_list|)
expr_stmt|;
for|for
control|(
name|Endpoint
name|e
range|:
name|identifyEndpoints
argument_list|()
control|)
block|{
name|h
operator|.
name|append
argument_list|(
literal|"<li><b>"
argument_list|)
expr_stmt|;
name|h
operator|.
name|append
argument_list|(
name|e
operator|.
name|httpMethod
argument_list|)
expr_stmt|;
name|h
operator|.
name|append
argument_list|(
literal|"</b><i><a href=\""
argument_list|)
expr_stmt|;
name|h
operator|.
name|append
argument_list|(
name|e
operator|.
name|path
argument_list|)
expr_stmt|;
name|h
operator|.
name|append
argument_list|(
literal|"\">"
argument_list|)
expr_stmt|;
name|h
operator|.
name|append
argument_list|(
name|e
operator|.
name|path
argument_list|)
expr_stmt|;
name|h
operator|.
name|append
argument_list|(
literal|"</a></i><br />"
argument_list|)
expr_stmt|;
name|h
operator|.
name|append
argument_list|(
literal|"Class: "
argument_list|)
expr_stmt|;
name|h
operator|.
name|append
argument_list|(
name|e
operator|.
name|className
argument_list|)
expr_stmt|;
name|h
operator|.
name|append
argument_list|(
literal|"<br />Method: "
argument_list|)
expr_stmt|;
name|h
operator|.
name|append
argument_list|(
name|e
operator|.
name|methodName
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|produces
range|:
name|e
operator|.
name|produces
control|)
block|{
name|h
operator|.
name|append
argument_list|(
literal|"<br />Produces: "
argument_list|)
expr_stmt|;
name|h
operator|.
name|append
argument_list|(
name|produces
argument_list|)
expr_stmt|;
block|}
name|h
operator|.
name|append
argument_list|(
literal|"</li>\n"
argument_list|)
expr_stmt|;
block|}
name|h
operator|.
name|append
argument_list|(
literal|"</ul>\n"
argument_list|)
expr_stmt|;
name|html
operator|.
name|generateFooter
argument_list|(
name|h
argument_list|)
expr_stmt|;
return|return
name|h
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|GET
annotation|@
name|Produces
argument_list|(
literal|"text/plain"
argument_list|)
specifier|public
name|String
name|getWelcomePlain
parameter_list|()
block|{
name|StringBuffer
name|text
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|text
operator|.
name|append
argument_list|(
name|tika
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|text
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|text
operator|.
name|append
argument_list|(
literal|"For endpoints, please see "
argument_list|)
expr_stmt|;
name|text
operator|.
name|append
argument_list|(
name|DOCS_URL
argument_list|)
expr_stmt|;
name|text
operator|.
name|append
argument_list|(
literal|"\n\n"
argument_list|)
expr_stmt|;
for|for
control|(
name|Endpoint
name|e
range|:
name|identifyEndpoints
argument_list|()
control|)
block|{
name|text
operator|.
name|append
argument_list|(
name|e
operator|.
name|httpMethod
argument_list|)
expr_stmt|;
name|text
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
name|text
operator|.
name|append
argument_list|(
name|e
operator|.
name|path
argument_list|)
expr_stmt|;
name|text
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|produces
range|:
name|e
operator|.
name|produces
control|)
block|{
name|text
operator|.
name|append
argument_list|(
literal|" => "
argument_list|)
expr_stmt|;
name|text
operator|.
name|append
argument_list|(
name|produces
argument_list|)
expr_stmt|;
name|text
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|text
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|protected
class|class
name|Endpoint
block|{
specifier|public
specifier|final
name|String
name|className
decl_stmt|;
specifier|public
specifier|final
name|String
name|methodName
decl_stmt|;
specifier|public
specifier|final
name|String
name|path
decl_stmt|;
specifier|public
specifier|final
name|String
name|httpMethod
decl_stmt|;
specifier|public
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|produces
decl_stmt|;
specifier|protected
name|Endpoint
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|endpoint
parameter_list|,
name|Method
name|method
parameter_list|,
name|String
name|path
parameter_list|,
name|String
name|httpMethod
parameter_list|,
name|String
index|[]
name|produces
parameter_list|)
block|{
name|this
operator|.
name|className
operator|=
name|endpoint
operator|.
name|getCanonicalName
argument_list|()
expr_stmt|;
name|this
operator|.
name|methodName
operator|=
name|method
operator|.
name|getName
argument_list|()
expr_stmt|;
name|this
operator|.
name|path
operator|=
name|path
expr_stmt|;
name|this
operator|.
name|httpMethod
operator|=
name|httpMethod
expr_stmt|;
name|this
operator|.
name|produces
operator|=
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|produces
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

