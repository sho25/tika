begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|langdetect
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_comment
comment|/**  * Support for language tags (as defined by https://tools.ietf.org/html/bcp47)  *   * See https://en.wikipedia.org/wiki/List_of_ISO_639-3_codes for a list of  * three character language codes.  *   * TODO change to LanguageTag, and use these vs. strings everywhere in the  * language detector API?  *  */
end_comment

begin_class
specifier|public
class|class
name|LanguageNames
block|{
specifier|public
specifier|static
name|String
name|makeName
parameter_list|(
name|String
name|language
parameter_list|,
name|String
name|script
parameter_list|,
name|String
name|region
parameter_list|)
block|{
name|Locale
name|locale
init|=
operator|new
name|Locale
operator|.
name|Builder
argument_list|()
operator|.
name|setLanguage
argument_list|(
name|language
argument_list|)
operator|.
name|setScript
argument_list|(
name|script
argument_list|)
operator|.
name|setRegion
argument_list|(
name|region
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
return|return
name|locale
operator|.
name|toLanguageTag
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|String
name|normalizeName
parameter_list|(
name|String
name|languageTag
parameter_list|)
block|{
name|Locale
name|locale
init|=
name|Locale
operator|.
name|forLanguageTag
argument_list|(
name|languageTag
argument_list|)
decl_stmt|;
return|return
name|locale
operator|.
name|toLanguageTag
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|boolean
name|isMacroLanguage
parameter_list|(
name|String
name|languageTag
parameter_list|)
block|{
name|Locale
name|locale
init|=
name|Locale
operator|.
name|forLanguageTag
argument_list|(
name|languageTag
argument_list|)
decl_stmt|;
comment|// TODO make it so.
return|return
literal|false
return|;
block|}
specifier|public
specifier|static
name|boolean
name|hasMacroLanguage
parameter_list|(
name|String
name|languageTag
parameter_list|)
block|{
name|Locale
name|locale
init|=
name|Locale
operator|.
name|forLanguageTag
argument_list|(
name|languageTag
argument_list|)
decl_stmt|;
comment|// TODO make it so
return|return
literal|false
return|;
block|}
comment|/** 	 * If language is a specific variant of a macro language (e.g. 'nb' for Norwegian Bokmal), 	 * return the macro language (e.g. 'no' for Norwegian). If it doesn't have a macro language, 	 * return unchanged. 	 *  	 * @param languageTag 	 * @return 	 */
specifier|public
specifier|static
name|String
name|getMacroLanguage
parameter_list|(
name|String
name|languageTag
parameter_list|)
block|{
comment|// TODO make it so
return|return
name|languageTag
return|;
block|}
specifier|public
specifier|static
name|boolean
name|equals
parameter_list|(
name|String
name|languageTagA
parameter_list|,
name|String
name|languageTagB
parameter_list|)
block|{
name|Locale
name|localeA
init|=
name|Locale
operator|.
name|forLanguageTag
argument_list|(
name|languageTagA
argument_list|)
decl_stmt|;
name|Locale
name|localeB
init|=
name|Locale
operator|.
name|forLanguageTag
argument_list|(
name|languageTagB
argument_list|)
decl_stmt|;
comment|// TODO Fill in script if missing and something we could derive from lang+region
comment|// e.g. zh-CN => zh-Hans-CN, zh-TW => zh-Hant-TW.
comment|// TODO Treat missing script == present script, if present script is default (suppressed) for
comment|// the language. So "en-Latn" == "en"
comment|// TODO probably OK to ignore extensions
comment|// TODO Do we want/need a fuzzy match for region (and script)
comment|// E.g. are 'en' and 'en-GB' equal? Depends on the direction, e.g. if you want 'en', and
comment|// you get back something more specific (en-GB) then that's OK, but if you explicitly want
comment|// en-GB and you get back en then that might not be OK.
return|return
name|localeA
operator|.
name|equals
argument_list|(
name|localeB
argument_list|)
return|;
block|}
block|}
end_class

end_unit

