begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|langdetect
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gson
operator|.
name|JsonArray
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gson
operator|.
name|JsonElement
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gson
operator|.
name|JsonParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|client
operator|.
name|WebClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|language
operator|.
name|detect
operator|.
name|LanguageConfidence
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|language
operator|.
name|detect
operator|.
name|LanguageDetector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|language
operator|.
name|detect
operator|.
name|LanguageResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Response
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|CharArrayWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * Created by trevorlewis on 3/7/16.  */
end_comment

begin_comment
comment|/**  * Language Detection using MIT Lincoln Labâ€™s Text.jl library  * https://github.com/trevorlewis/TextREST.jl  *  * Please run the TextREST.jl server before using this.  */
end_comment

begin_class
specifier|public
class|class
name|TextLangDetector
extends|extends
name|LanguageDetector
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TextLangDetector
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|TEXT_REST_HOST
init|=
literal|"http://localhost:8000"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|TEXT_LID_PATH
init|=
literal|"/lid"
decl_stmt|;
specifier|private
specifier|static
name|String
name|restHostUrlStr
decl_stmt|;
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|languages
decl_stmt|;
specifier|private
name|CharArrayWriter
name|writer
decl_stmt|;
specifier|public
name|TextLangDetector
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
name|restHostUrlStr
operator|=
name|TEXT_REST_HOST
expr_stmt|;
name|languages
operator|=
name|getAllLanguages
argument_list|()
expr_stmt|;
name|writer
operator|=
operator|new
name|CharArrayWriter
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|LanguageDetector
name|loadModels
parameter_list|()
throws|throws
name|IOException
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|LanguageDetector
name|loadModels
parameter_list|(
name|Set
argument_list|<
name|String
argument_list|>
name|set
parameter_list|)
throws|throws
name|IOException
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasModel
parameter_list|(
name|String
name|language
parameter_list|)
block|{
return|return
name|languages
operator|.
name|contains
argument_list|(
name|language
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|LanguageDetector
name|setPriors
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Float
argument_list|>
name|languageProbabilities
parameter_list|)
throws|throws
name|IOException
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|reset
parameter_list|()
block|{
name|writer
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|addText
parameter_list|(
name|char
index|[]
name|cbuf
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|)
block|{
name|writer
operator|.
name|write
argument_list|(
name|cbuf
argument_list|,
name|off
argument_list|,
name|len
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
literal|' '
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|LanguageResult
argument_list|>
name|detectAll
parameter_list|()
block|{
name|List
argument_list|<
name|LanguageResult
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|String
name|language
init|=
name|detect
argument_list|(
name|writer
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|language
operator|!=
literal|null
condition|)
block|{
name|result
operator|.
name|add
argument_list|(
operator|new
name|LanguageResult
argument_list|(
name|language
argument_list|,
name|LanguageConfidence
operator|.
name|MEDIUM
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|result
operator|.
name|add
argument_list|(
operator|new
name|LanguageResult
argument_list|(
name|language
argument_list|,
name|LanguageConfidence
operator|.
name|NONE
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|getAllLanguages
parameter_list|()
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|languages
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
try|try
block|{
name|Response
name|response
init|=
name|WebClient
operator|.
name|create
argument_list|(
name|restHostUrlStr
operator|+
name|TEXT_LID_PATH
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|String
name|json
init|=
name|response
operator|.
name|readEntity
argument_list|(
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|JsonArray
name|jsonArray
init|=
operator|new
name|JsonParser
argument_list|()
operator|.
name|parse
argument_list|(
name|json
argument_list|)
operator|.
name|getAsJsonObject
argument_list|()
operator|.
name|get
argument_list|(
literal|"all_languages"
argument_list|)
operator|.
name|getAsJsonArray
argument_list|()
decl_stmt|;
for|for
control|(
name|JsonElement
name|jsonElement
range|:
name|jsonArray
control|)
block|{
name|languages
operator|.
name|add
argument_list|(
name|jsonElement
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"problem getting and parsing json"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
name|languages
return|;
block|}
specifier|private
name|String
name|detect
parameter_list|(
name|String
name|content
parameter_list|)
block|{
name|String
name|language
init|=
literal|null
decl_stmt|;
try|try
block|{
name|Response
name|response
init|=
name|WebClient
operator|.
name|create
argument_list|(
name|restHostUrlStr
operator|+
name|TEXT_LID_PATH
argument_list|)
operator|.
name|put
argument_list|(
name|content
argument_list|)
decl_stmt|;
name|String
name|json
init|=
name|response
operator|.
name|readEntity
argument_list|(
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|language
operator|=
operator|new
name|JsonParser
argument_list|()
operator|.
name|parse
argument_list|(
name|json
argument_list|)
operator|.
name|getAsJsonObject
argument_list|()
operator|.
name|get
argument_list|(
literal|"language"
argument_list|)
operator|.
name|getAsString
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"problem detecting"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
name|language
return|;
block|}
specifier|protected
specifier|static
name|boolean
name|canRun
parameter_list|()
block|{
try|try
block|{
name|Response
name|response
init|=
name|WebClient
operator|.
name|create
argument_list|(
name|TEXT_REST_HOST
operator|+
name|TEXT_LID_PATH
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|String
name|json
init|=
name|response
operator|.
name|readEntity
argument_list|(
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|JsonArray
name|jsonArray
init|=
operator|new
name|JsonParser
argument_list|()
operator|.
name|parse
argument_list|(
name|json
argument_list|)
operator|.
name|getAsJsonObject
argument_list|()
operator|.
name|get
argument_list|(
literal|"all_languages"
argument_list|)
operator|.
name|getAsJsonArray
argument_list|()
decl_stmt|;
return|return
name|jsonArray
operator|.
name|size
argument_list|()
operator|!=
literal|0
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Can't run"
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
block|}
end_class

end_unit

