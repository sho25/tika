begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|langdetect
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gson
operator|.
name|JsonArray
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gson
operator|.
name|JsonElement
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gson
operator|.
name|JsonParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|language
operator|.
name|detect
operator|.
name|LanguageConfidence
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|language
operator|.
name|detect
operator|.
name|LanguageDetector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|language
operator|.
name|detect
operator|.
name|LanguageResult
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|ConnectException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|HttpURLConnection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|MalformedURLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * Created by trevorlewis on 3/7/16.  */
end_comment

begin_comment
comment|/**  * Language Detection using MIT Lincoln Labâ€™s Text.jl library  * https://github.com/trevorlewis/TEXT-Language-REST  *  * Please run the Julia lidHttpServer.jl before using this.  */
end_comment

begin_class
specifier|public
class|class
name|TextLangDetector
extends|extends
name|LanguageDetector
block|{
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|languages
decl_stmt|;
specifier|private
name|CharArrayWriter
name|writer
decl_stmt|;
specifier|private
specifier|static
name|URL
name|url
decl_stmt|;
specifier|private
specifier|static
name|HttpURLConnection
name|con
init|=
literal|null
decl_stmt|;
specifier|private
specifier|static
name|OutputStreamWriter
name|out
init|=
literal|null
decl_stmt|;
specifier|private
specifier|static
name|InputStreamReader
name|in
init|=
literal|null
decl_stmt|;
specifier|public
name|TextLangDetector
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
name|writer
operator|=
operator|new
name|CharArrayWriter
argument_list|()
expr_stmt|;
try|try
block|{
name|url
operator|=
operator|new
name|URL
argument_list|(
literal|"http://127.0.0.1:8000"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MalformedURLException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
try|try
block|{
name|con
operator|=
operator|(
name|HttpURLConnection
operator|)
name|url
operator|.
name|openConnection
argument_list|()
expr_stmt|;
name|con
operator|.
name|setRequestMethod
argument_list|(
literal|"GET"
argument_list|)
expr_stmt|;
name|int
name|responseCode
init|=
name|con
operator|.
name|getResponseCode
argument_list|()
decl_stmt|;
if|if
condition|(
name|responseCode
operator|==
literal|200
condition|)
block|{
name|languages
operator|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
name|in
operator|=
operator|new
name|InputStreamReader
argument_list|(
name|con
operator|.
name|getInputStream
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|json
init|=
name|getStringFromInputStreamReader
argument_list|(
name|in
argument_list|)
decl_stmt|;
name|JsonArray
name|jsonArray
init|=
operator|new
name|JsonParser
argument_list|()
operator|.
name|parse
argument_list|(
name|json
argument_list|)
operator|.
name|getAsJsonArray
argument_list|()
decl_stmt|;
for|for
control|(
name|JsonElement
name|jsonElement
range|:
name|jsonArray
control|)
block|{
name|languages
operator|.
name|add
argument_list|(
name|jsonElement
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|con
operator|.
name|disconnect
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ConnectException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|LanguageDetector
name|loadModels
parameter_list|()
throws|throws
name|IOException
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|LanguageDetector
name|loadModels
parameter_list|(
name|Set
argument_list|<
name|String
argument_list|>
name|set
parameter_list|)
throws|throws
name|IOException
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasModel
parameter_list|(
name|String
name|language
parameter_list|)
block|{
return|return
name|languages
operator|.
name|contains
argument_list|(
name|language
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|LanguageDetector
name|setPriors
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Float
argument_list|>
name|languageProbabilities
parameter_list|)
throws|throws
name|IOException
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|reset
parameter_list|()
block|{
name|writer
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|addText
parameter_list|(
name|char
index|[]
name|cbuf
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|)
block|{
name|writer
operator|.
name|write
argument_list|(
name|cbuf
argument_list|,
name|off
argument_list|,
name|len
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
literal|' '
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|LanguageResult
argument_list|>
name|detectAll
parameter_list|()
block|{
name|List
argument_list|<
name|LanguageResult
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|result
operator|.
name|add
argument_list|(
operator|new
name|LanguageResult
argument_list|(
name|detect
argument_list|(
name|writer
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|,
name|LanguageConfidence
operator|.
name|MEDIUM
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
specifier|private
name|String
name|detect
parameter_list|(
name|String
name|content
parameter_list|)
block|{
name|String
name|language
init|=
literal|"error"
decl_stmt|;
try|try
block|{
name|con
operator|=
operator|(
name|HttpURLConnection
operator|)
name|url
operator|.
name|openConnection
argument_list|()
expr_stmt|;
name|con
operator|.
name|setRequestMethod
argument_list|(
literal|"PUT"
argument_list|)
expr_stmt|;
name|con
operator|.
name|setDoOutput
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|out
operator|=
operator|new
name|OutputStreamWriter
argument_list|(
name|con
operator|.
name|getOutputStream
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
name|content
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|int
name|responseCode
init|=
name|con
operator|.
name|getResponseCode
argument_list|()
decl_stmt|;
if|if
condition|(
name|responseCode
operator|==
literal|200
condition|)
block|{
name|in
operator|=
operator|new
name|InputStreamReader
argument_list|(
name|con
operator|.
name|getInputStream
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|json
init|=
name|getStringFromInputStreamReader
argument_list|(
name|in
argument_list|)
decl_stmt|;
name|language
operator|=
operator|new
name|JsonParser
argument_list|()
operator|.
name|parse
argument_list|(
name|json
argument_list|)
operator|.
name|getAsJsonObject
argument_list|()
operator|.
name|get
argument_list|(
literal|"lang"
argument_list|)
operator|.
name|getAsString
argument_list|()
expr_stmt|;
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|con
operator|.
name|disconnect
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ConnectException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
return|return
name|language
return|;
block|}
comment|// convert InputStreamReader to String
specifier|private
name|String
name|getStringFromInputStreamReader
parameter_list|(
name|InputStreamReader
name|in
parameter_list|)
block|{
name|BufferedReader
name|br
init|=
literal|null
decl_stmt|;
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|String
name|line
decl_stmt|;
try|try
block|{
name|br
operator|=
operator|new
name|BufferedReader
argument_list|(
name|in
argument_list|)
expr_stmt|;
while|while
condition|(
operator|(
name|line
operator|=
name|br
operator|.
name|readLine
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|line
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|br
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|br
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

