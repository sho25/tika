begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|langdetect
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|language
operator|.
name|detect
operator|.
name|LanguageDetector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|language
operator|.
name|detect
operator|.
name|LanguageResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|language
operator|.
name|detect
operator|.
name|LanguageWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assume
operator|.
name|assumeTrue
import|;
end_import

begin_comment
comment|/**  * Test harness for the {@link org.apache.tika.langdetect.Lingo24LangDetector}.  */
end_comment

begin_class
specifier|public
class|class
name|Lingo24LangDetectorTest
block|{
annotation|@
name|Test
specifier|public
name|void
name|testLanguageLoad
parameter_list|()
block|{
name|LanguageDetector
name|detector
init|=
operator|new
name|Lingo24LangDetector
argument_list|()
decl_stmt|;
name|assumeTrue
argument_list|(
operator|(
operator|(
name|Lingo24LangDetector
operator|)
name|detector
operator|)
operator|.
name|isAvailable
argument_list|()
argument_list|)
expr_stmt|;
comment|// Only check a couple
name|assertTrue
argument_list|(
name|detector
operator|.
name|hasModel
argument_list|(
literal|"ar"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|detector
operator|.
name|hasModel
argument_list|(
literal|"de"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLanguageDetection
parameter_list|()
throws|throws
name|Exception
block|{
name|LanguageDetector
name|detector
init|=
operator|new
name|Lingo24LangDetector
argument_list|()
decl_stmt|;
name|assumeTrue
argument_list|(
operator|(
operator|(
name|Lingo24LangDetector
operator|)
name|detector
operator|)
operator|.
name|isAvailable
argument_list|()
argument_list|)
expr_stmt|;
name|LanguageWriter
name|writer
init|=
operator|new
name|LanguageWriter
argument_list|(
name|detector
argument_list|)
decl_stmt|;
comment|// Reusing the test data from OptimaizeLangDetectorTest
name|List
argument_list|<
name|String
argument_list|>
name|lines
init|=
name|IOUtils
operator|.
name|readLines
argument_list|(
name|Lingo24LangDetectorTest
operator|.
name|class
operator|.
name|getResourceAsStream
argument_list|(
literal|"text-test.tsv"
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|line
range|:
name|lines
control|)
block|{
name|String
index|[]
name|data
init|=
name|line
operator|.
name|split
argument_list|(
literal|"\t"
argument_list|)
decl_stmt|;
if|if
condition|(
name|data
operator|.
name|length
operator|!=
literal|2
condition|)
continue|continue;
name|writer
operator|.
name|reset
argument_list|()
expr_stmt|;
name|writer
operator|.
name|append
argument_list|(
name|data
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
comment|// Only check supported languages
if|if
condition|(
name|detector
operator|.
name|hasModel
argument_list|(
name|data
index|[
literal|0
index|]
argument_list|)
condition|)
block|{
name|LanguageResult
name|result
init|=
name|detector
operator|.
name|detect
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|data
index|[
literal|0
index|]
argument_list|,
name|result
operator|.
name|getLanguage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

