begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|langdetect
package|;
end_package

begin_import
import|import static
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
operator|.
name|UTF_8
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Reader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Writer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_class
specifier|public
specifier|abstract
class|class
name|LanguageDetectorTest
block|{
specifier|protected
name|String
index|[]
name|getTestLanguages
parameter_list|()
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|String
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|lines
init|=
name|IOUtils
operator|.
name|readLines
argument_list|(
name|LanguageDetectorTest
operator|.
name|class
operator|.
name|getResourceAsStream
argument_list|(
literal|"language-codes.txt"
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|line
range|:
name|lines
control|)
block|{
name|line
operator|=
name|line
operator|.
name|trim
argument_list|()
expr_stmt|;
if|if
condition|(
name|line
operator|.
name|isEmpty
argument_list|()
operator|||
name|line
operator|.
name|startsWith
argument_list|(
literal|"#"
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|String
index|[]
name|parsed
init|=
name|line
operator|.
name|split
argument_list|(
literal|"\t"
argument_list|)
decl_stmt|;
name|String
name|language
init|=
name|parsed
index|[
literal|0
index|]
decl_stmt|;
if|if
condition|(
name|hasTestLanguage
argument_list|(
name|language
argument_list|)
condition|)
block|{
name|result
operator|.
name|add
argument_list|(
name|language
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|result
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|result
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
specifier|protected
name|boolean
name|hasTestLanguage
parameter_list|(
name|String
name|language
parameter_list|)
block|{
name|InputStream
name|stream
init|=
name|LanguageDetectorTest
operator|.
name|class
operator|.
name|getResourceAsStream
argument_list|(
literal|"/language-tests/"
operator|+
name|language
operator|+
literal|".test"
argument_list|)
decl_stmt|;
if|if
condition|(
name|stream
operator|!=
literal|null
condition|)
block|{
name|IOUtils
operator|.
name|closeQuietly
argument_list|(
name|stream
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
specifier|protected
name|void
name|writeTo
parameter_list|(
name|String
name|language
parameter_list|,
name|Writer
name|writer
parameter_list|)
throws|throws
name|IOException
block|{
name|writeTo
argument_list|(
name|language
argument_list|,
name|writer
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|writeTo
parameter_list|(
name|String
name|language
parameter_list|,
name|Writer
name|writer
parameter_list|,
name|int
name|limit
parameter_list|)
throws|throws
name|IOException
block|{
name|InputStream
name|stream
init|=
name|LanguageDetectorTest
operator|.
name|class
operator|.
name|getResourceAsStream
argument_list|(
literal|"/language-tests/"
operator|+
name|language
operator|+
literal|".test"
argument_list|)
decl_stmt|;
try|try
block|{
name|copyAtMost
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|stream
argument_list|,
name|UTF_8
argument_list|)
argument_list|,
name|writer
argument_list|,
name|limit
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|stream
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
specifier|protected
name|int
name|copyAtMost
parameter_list|(
name|Reader
name|input
parameter_list|,
name|Writer
name|output
parameter_list|,
name|int
name|limit
parameter_list|)
throws|throws
name|IOException
block|{
name|char
index|[]
name|buffer
init|=
operator|new
name|char
index|[
literal|4096
index|]
decl_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
name|int
name|n
init|=
literal|0
decl_stmt|;
while|while
condition|(
operator|(
operator|-
literal|1
operator|!=
operator|(
name|n
operator|=
name|input
operator|.
name|read
argument_list|(
name|buffer
argument_list|)
operator|)
operator|)
operator|&&
operator|(
name|count
operator|<
name|limit
operator|)
condition|)
block|{
name|int
name|bytesToCopy
init|=
name|Math
operator|.
name|min
argument_list|(
name|limit
operator|-
name|count
argument_list|,
name|n
argument_list|)
decl_stmt|;
name|output
operator|.
name|write
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
name|bytesToCopy
argument_list|)
expr_stmt|;
name|count
operator|+=
name|bytesToCopy
expr_stmt|;
block|}
return|return
name|count
return|;
block|}
block|}
end_class

end_unit

