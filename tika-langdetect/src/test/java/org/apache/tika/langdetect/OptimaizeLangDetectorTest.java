begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|langdetect
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|language
operator|.
name|detect
operator|.
name|LanguageConfidence
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|language
operator|.
name|detect
operator|.
name|LanguageDetector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|language
operator|.
name|detect
operator|.
name|LanguageResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|language
operator|.
name|detect
operator|.
name|LanguageWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|OptimaizeLangDetectorTest
extends|extends
name|LanguageDetectorTest
block|{
comment|/* 	 * The complete list of supported languages (as of 0.5) is below. 	 * The ones we have tests for have '*' after the name. 	 *      af Afrikaans     an Aragonese     ar Arabic     ast Asturian     be Belarusian     br Breton     ca Catalan     bg Bulgarian     bn Bengali     cs Czech     cy Welsh     da Danish *     de German *     el Greek *     en English *     es Spanish *     et Estonian     eu Basque     fa Persian     fi Finnish *     fr French *     ga Irish     gl Galician     gu Gujarati     he Hebrew     hi Hindi     hr Croatian     ht Haitian     hu Hungarian     id Indonesian     is Icelandic     it Italian *     ja Japanese *     km Khmer     kn Kannada     ko Korean     lt Lithuanian *     lv Latvian     mk Macedonian     ml Malayalam     mr Marathi     ms Malay     mt Maltese     ne Nepali     nl Dutch *     no Norwegian     oc Occitan     pa Punjabi     pl Polish     pt Portuguese *     ro Romanian     ru Russian     sk Slovak     sl Slovene     so Somali     sq Albanian     sr Serbian     sv Swedish *     sw Swahili     ta Tamil     te Telugu     th Thai *     tl Tagalog     tr Turkish     uk Ukrainian     ur Urdu     vi Vietnamese     yi Yiddish     zh-CN Simplified Chinese * (just generic Chinese)     zh-TW Traditional Chinese * (just generic Chinese) 	*/
comment|/** 	 * Test correct detection for the many (short) translations of the 	 * "Universal Declaration of Human Rights (Article 1)", at 	 * http://www.omniglot.com/udhr 	 *  	 * Also make sure we get uncertain results for some set of unsupported 	 * languages. 	 *  	 * @throws Exception 	 */
annotation|@
name|Test
specifier|public
name|void
name|testUniversalDeclarationOfHumanRights
parameter_list|()
throws|throws
name|Exception
block|{
name|LanguageDetector
name|detector
init|=
operator|new
name|OptimaizeLangDetector
argument_list|()
decl_stmt|;
name|detector
operator|.
name|loadModels
argument_list|()
expr_stmt|;
name|LanguageWriter
name|writer
init|=
operator|new
name|LanguageWriter
argument_list|(
name|detector
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|knownText
init|=
name|getTestLanguages
argument_list|(
literal|"udhr-known.txt"
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|language
range|:
name|knownText
operator|.
name|keySet
argument_list|()
control|)
block|{
name|writer
operator|.
name|reset
argument_list|()
expr_stmt|;
name|writer
operator|.
name|append
argument_list|(
name|knownText
operator|.
name|get
argument_list|(
name|language
argument_list|)
argument_list|)
expr_stmt|;
name|LanguageResult
name|result
init|=
name|detector
operator|.
name|detect
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|language
argument_list|,
name|result
operator|.
name|getLanguage
argument_list|()
argument_list|)
expr_stmt|;
comment|// System.out.println(String.format("'%s': %s (%f)", language, result.getConfidence(), result.getRawScore()));
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|unknownText
init|=
name|getTestLanguages
argument_list|(
literal|"udhr-unknown.txt"
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|language
range|:
name|unknownText
operator|.
name|keySet
argument_list|()
control|)
block|{
name|writer
operator|.
name|reset
argument_list|()
expr_stmt|;
name|writer
operator|.
name|append
argument_list|(
name|unknownText
operator|.
name|get
argument_list|(
name|language
argument_list|)
argument_list|)
expr_stmt|;
name|LanguageResult
name|result
init|=
name|detector
operator|.
name|detect
argument_list|()
decl_stmt|;
if|if
condition|(
name|result
operator|!=
literal|null
condition|)
block|{
name|assertFalse
argument_list|(
name|result
operator|.
name|isReasonablyCertain
argument_list|()
argument_list|)
expr_stmt|;
comment|// System.out.println(String.format("Looking for '%s', got '%s': %s (%f)", language, result.getLanguage(), result.getConfidence(), result.getRawScore()));
block|}
block|}
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAllLanguages
parameter_list|()
throws|throws
name|IOException
block|{
name|LanguageDetector
name|detector
init|=
operator|new
name|OptimaizeLangDetector
argument_list|()
decl_stmt|;
name|detector
operator|.
name|loadModels
argument_list|()
expr_stmt|;
name|LanguageWriter
name|writer
init|=
operator|new
name|LanguageWriter
argument_list|(
name|detector
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|language
range|:
name|getTestLanguages
argument_list|()
control|)
block|{
name|writer
operator|.
name|reset
argument_list|()
expr_stmt|;
name|writeTo
argument_list|(
name|language
argument_list|,
name|writer
argument_list|)
expr_stmt|;
name|LanguageResult
name|result
init|=
name|detector
operator|.
name|detect
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|isLanguage
argument_list|(
name|language
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|isReasonablyCertain
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMixedLanguages
parameter_list|()
throws|throws
name|IOException
block|{
name|LanguageDetector
name|detector
init|=
operator|new
name|OptimaizeLangDetector
argument_list|()
operator|.
name|setMixedLanguages
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|detector
operator|.
name|loadModels
argument_list|()
expr_stmt|;
name|LanguageWriter
name|writer
init|=
operator|new
name|LanguageWriter
argument_list|(
name|detector
argument_list|)
decl_stmt|;
name|String
index|[]
name|languages
init|=
name|getTestLanguages
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|languages
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|String
name|language
init|=
name|languages
index|[
name|i
index|]
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
name|i
operator|+
literal|1
init|;
name|j
operator|<
name|languages
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
name|String
name|other
init|=
name|languages
index|[
name|j
index|]
decl_stmt|;
name|writer
operator|.
name|reset
argument_list|()
expr_stmt|;
name|writeTo
argument_list|(
name|language
argument_list|,
name|writer
argument_list|)
expr_stmt|;
name|writeTo
argument_list|(
name|other
argument_list|,
name|writer
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|LanguageResult
argument_list|>
name|results
init|=
name|detector
operator|.
name|detectAll
argument_list|()
decl_stmt|;
if|if
condition|(
name|results
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|LanguageResult
name|result
init|=
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
literal|"mix of "
operator|+
name|language
operator|+
literal|" and "
operator|+
name|other
operator|+
literal|" incorrectly detected as "
operator|+
name|result
argument_list|,
name|result
operator|.
name|isReasonablyCertain
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testShortText
parameter_list|()
throws|throws
name|IOException
block|{
name|LanguageDetector
name|detector
init|=
operator|new
name|OptimaizeLangDetector
argument_list|()
operator|.
name|setShortText
argument_list|(
literal|true
argument_list|)
operator|.
name|loadModels
argument_list|()
decl_stmt|;
comment|// First verify that we get no result with empty or very short text.
name|LanguageWriter
name|writer
init|=
operator|new
name|LanguageWriter
argument_list|(
name|detector
argument_list|)
decl_stmt|;
name|writer
operator|.
name|append
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|LanguageConfidence
operator|.
name|NONE
argument_list|,
name|detector
operator|.
name|detect
argument_list|()
operator|.
name|getConfidence
argument_list|()
argument_list|)
expr_stmt|;
name|writer
operator|.
name|reset
argument_list|()
expr_stmt|;
name|writer
operator|.
name|append
argument_list|(
literal|"  "
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|LanguageConfidence
operator|.
name|NONE
argument_list|,
name|detector
operator|.
name|detect
argument_list|()
operator|.
name|getConfidence
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|language
range|:
name|getTestLanguages
argument_list|()
control|)
block|{
comment|// Short pieces of Japanese are detected as Chinese
if|if
condition|(
name|language
operator|.
name|equals
argument_list|(
literal|"ja"
argument_list|)
condition|)
block|{
continue|continue;
block|}
comment|// We need at least 300 characters to detect Chinese reliably.
name|writer
operator|.
name|reset
argument_list|()
expr_stmt|;
name|writeTo
argument_list|(
name|language
argument_list|,
name|writer
argument_list|,
literal|300
argument_list|)
expr_stmt|;
name|LanguageResult
name|result
init|=
name|detector
operator|.
name|detect
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|US
argument_list|,
literal|"Language '%s' wasn't detected"
argument_list|,
name|language
argument_list|)
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|US
argument_list|,
literal|"Language '%s' was detected as '%s'"
argument_list|,
name|language
argument_list|,
name|result
operator|.
name|getLanguage
argument_list|()
argument_list|)
argument_list|,
name|result
operator|.
name|isLanguage
argument_list|(
name|language
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|US
argument_list|,
literal|"Language '%s' isn't reasonably certain: %s"
argument_list|,
name|language
argument_list|,
name|result
operator|.
name|getConfidence
argument_list|()
argument_list|)
argument_list|,
name|result
operator|.
name|isReasonablyCertain
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getTestLanguages
parameter_list|(
name|String
name|resourceName
parameter_list|)
throws|throws
name|IOException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|result
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|languages
init|=
name|IOUtils
operator|.
name|readLines
argument_list|(
name|OptimaizeLangDetectorTest
operator|.
name|class
operator|.
name|getResourceAsStream
argument_list|(
name|resourceName
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|line
range|:
name|languages
control|)
block|{
name|line
operator|=
name|line
operator|.
name|trim
argument_list|()
expr_stmt|;
if|if
condition|(
name|line
operator|.
name|isEmpty
argument_list|()
operator|||
name|line
operator|.
name|startsWith
argument_list|(
literal|"#"
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|String
index|[]
name|pieces
init|=
name|line
operator|.
name|split
argument_list|(
literal|"\t"
argument_list|,
literal|2
argument_list|)
decl_stmt|;
if|if
condition|(
name|pieces
operator|.
name|length
operator|!=
literal|2
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Invalid language data line: "
operator|+
name|line
argument_list|)
throw|;
block|}
name|result
operator|.
name|put
argument_list|(
name|pieces
index|[
literal|0
index|]
argument_list|,
name|pieces
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|5000
argument_list|)
specifier|public
name|void
name|testOptimaizeRegexBug
parameter_list|()
throws|throws
name|Exception
block|{
comment|//confirm TIKA-2777 doesn't affect langdetect's Optimaize
name|LanguageDetector
name|detector
init|=
operator|new
name|OptimaizeLangDetector
argument_list|()
operator|.
name|setShortText
argument_list|(
literal|false
argument_list|)
operator|.
name|loadModels
argument_list|()
decl_stmt|;
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|50000
condition|;
name|i
operator|++
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|'a'
argument_list|)
expr_stmt|;
block|}
name|detector
operator|.
name|detect
argument_list|(
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

