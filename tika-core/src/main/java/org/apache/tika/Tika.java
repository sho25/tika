begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Reader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|metadata
operator|.
name|Metadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|AutoDetectParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|Parser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|ParsingReader
import|;
end_import

begin_comment
comment|/**  * Facade class for accessing Tika functionality. This class hides much of  * the underlying complexity of the lower level Tika classes and provides  * simple methods for many common parsing operations.  *  * @since Apache Tika 0.5  */
end_comment

begin_class
specifier|public
class|class
name|Tika
block|{
specifier|private
specifier|static
specifier|final
name|Parser
name|parser
init|=
operator|new
name|AutoDetectParser
argument_list|()
decl_stmt|;
comment|/**      * Private constructor to prevent this class from being instantiated.      */
specifier|private
name|Tika
parameter_list|()
block|{     }
comment|/**      * Parses the given document and returns the extracted text content.      *      * @param stream the document to be parsed      * @result extracted text content      * @throws IOException if the document can not be read or parsed      */
specifier|public
specifier|static
name|Reader
name|parse
parameter_list|(
name|InputStream
name|stream
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|ParsingReader
argument_list|(
name|parser
argument_list|,
name|stream
argument_list|,
operator|new
name|Metadata
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * Parses the given file and returns the extracted text content.      *      * @param file the file to be parsed      * @result extracted text content      * @throws FileNotFoundException if the given file does not exist      * @throws IOException if the file can not be read or parsed      */
specifier|public
specifier|static
name|Reader
name|parse
parameter_list|(
name|File
name|file
parameter_list|)
throws|throws
name|FileNotFoundException
throws|,
name|IOException
block|{
name|Metadata
name|metadata
init|=
operator|new
name|Metadata
argument_list|()
decl_stmt|;
name|metadata
operator|.
name|set
argument_list|(
name|Metadata
operator|.
name|RESOURCE_NAME_KEY
argument_list|,
name|file
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
return|return
operator|new
name|ParsingReader
argument_list|(
name|parser
argument_list|,
operator|new
name|FileInputStream
argument_list|(
name|file
argument_list|)
argument_list|,
name|metadata
argument_list|)
return|;
block|}
comment|/**      * Parses the resource at the given URL and returns the extracted      * text content.      *      * @param url the URL of the resource to be parsed      * @result extracted text content      * @throws IOException if the resource can not be read or parsed      */
specifier|public
specifier|static
name|Reader
name|parse
parameter_list|(
name|URL
name|url
parameter_list|)
throws|throws
name|IOException
block|{
name|Metadata
name|metadata
init|=
operator|new
name|Metadata
argument_list|()
decl_stmt|;
name|String
name|path
init|=
name|url
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|int
name|slash
init|=
name|path
operator|.
name|lastIndexOf
argument_list|(
literal|'/'
argument_list|)
decl_stmt|;
if|if
condition|(
name|slash
operator|+
literal|1
operator|<
name|path
operator|.
name|length
argument_list|()
condition|)
block|{
name|metadata
operator|.
name|set
argument_list|(
name|Metadata
operator|.
name|RESOURCE_NAME_KEY
argument_list|,
name|path
operator|.
name|substring
argument_list|(
name|slash
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|ParsingReader
argument_list|(
name|parser
argument_list|,
name|url
operator|.
name|openStream
argument_list|()
argument_list|,
name|metadata
argument_list|)
return|;
block|}
block|}
end_class

end_unit

