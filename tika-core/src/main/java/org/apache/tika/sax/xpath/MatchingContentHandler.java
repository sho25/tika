begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|sax
operator|.
name|xpath
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|sax
operator|.
name|ContentHandlerDecorator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|Attributes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|ContentHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|helpers
operator|.
name|AttributesImpl
import|;
end_import

begin_comment
comment|/**  * Content handler decorator that only passes the elements, attributes,  * and text nodes that match the given XPath expression.  */
end_comment

begin_class
specifier|public
class|class
name|MatchingContentHandler
extends|extends
name|ContentHandlerDecorator
block|{
specifier|private
specifier|final
name|LinkedList
argument_list|<
name|Matcher
argument_list|>
name|matchers
init|=
operator|new
name|LinkedList
argument_list|<
name|Matcher
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|Matcher
name|matcher
decl_stmt|;
specifier|public
name|MatchingContentHandler
parameter_list|(
name|ContentHandler
name|delegate
parameter_list|,
name|Matcher
name|matcher
parameter_list|)
block|{
name|super
argument_list|(
name|delegate
argument_list|)
expr_stmt|;
name|this
operator|.
name|matcher
operator|=
name|matcher
expr_stmt|;
block|}
specifier|public
name|void
name|startElement
parameter_list|(
name|String
name|uri
parameter_list|,
name|String
name|localName
parameter_list|,
name|String
name|name
parameter_list|,
name|Attributes
name|attributes
parameter_list|)
throws|throws
name|SAXException
block|{
name|matchers
operator|.
name|addFirst
argument_list|(
name|matcher
argument_list|)
expr_stmt|;
name|matcher
operator|=
name|matcher
operator|.
name|descend
argument_list|(
name|uri
argument_list|,
name|localName
argument_list|)
expr_stmt|;
name|AttributesImpl
name|matches
init|=
operator|new
name|AttributesImpl
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|attributes
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|String
name|attributeURI
init|=
name|attributes
operator|.
name|getURI
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|String
name|attributeName
init|=
name|attributes
operator|.
name|getLocalName
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|matcher
operator|.
name|matchesAttribute
argument_list|(
name|attributeURI
argument_list|,
name|attributeName
argument_list|)
condition|)
block|{
name|matches
operator|.
name|addAttribute
argument_list|(
name|attributeURI
argument_list|,
name|attributeName
argument_list|,
name|attributes
operator|.
name|getQName
argument_list|(
name|i
argument_list|)
argument_list|,
name|attributes
operator|.
name|getType
argument_list|(
name|i
argument_list|)
argument_list|,
name|attributes
operator|.
name|getValue
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|matcher
operator|.
name|matchesElement
argument_list|()
operator|||
name|matches
operator|.
name|getLength
argument_list|()
operator|>
literal|0
condition|)
block|{
name|super
operator|.
name|startElement
argument_list|(
name|uri
argument_list|,
name|localName
argument_list|,
name|name
argument_list|,
name|matches
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|matcher
operator|.
name|matchesElement
argument_list|()
condition|)
block|{
comment|// Force the matcher to match the current element, so the
comment|// endElement method knows to emit the correct event
name|matcher
operator|=
operator|new
name|CompositeMatcher
argument_list|(
name|matcher
argument_list|,
name|ElementMatcher
operator|.
name|INSTANCE
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|void
name|endElement
parameter_list|(
name|String
name|uri
parameter_list|,
name|String
name|localName
parameter_list|,
name|String
name|name
parameter_list|)
throws|throws
name|SAXException
block|{
if|if
condition|(
name|matcher
operator|.
name|matchesElement
argument_list|()
condition|)
block|{
name|super
operator|.
name|endElement
argument_list|(
name|uri
argument_list|,
name|localName
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
comment|// Sometimes tagsoup returns double end tags, so the stack might
comment|// be empty! TODO: Remove this when the tagsoup problem is fixed.
if|if
condition|(
operator|!
name|matchers
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|matcher
operator|=
name|matchers
operator|.
name|removeFirst
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|characters
parameter_list|(
name|char
index|[]
name|ch
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|length
parameter_list|)
throws|throws
name|SAXException
block|{
if|if
condition|(
name|matcher
operator|.
name|matchesText
argument_list|()
condition|)
block|{
name|super
operator|.
name|characters
argument_list|(
name|ch
argument_list|,
name|start
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|ignorableWhitespace
parameter_list|(
name|char
index|[]
name|ch
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|length
parameter_list|)
throws|throws
name|SAXException
block|{
if|if
condition|(
name|matcher
operator|.
name|matchesText
argument_list|()
condition|)
block|{
name|super
operator|.
name|ignorableWhitespace
argument_list|(
name|ch
argument_list|,
name|start
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|processingInstruction
parameter_list|(
name|String
name|target
parameter_list|,
name|String
name|data
parameter_list|)
block|{
comment|// TODO: Support for matching processing instructions
block|}
specifier|public
name|void
name|skippedEntity
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|SAXException
block|{
comment|// TODO: Can skipped entities refer to more than text?
if|if
condition|(
name|matcher
operator|.
name|matchesText
argument_list|()
condition|)
block|{
name|super
operator|.
name|skippedEntity
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

