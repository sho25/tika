begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|sax
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|sax
operator|.
name|StandardReference
operator|.
name|StandardReferenceBuilder
import|;
end_import

begin_comment
comment|/**  * StandardText relies on regular expressions to extract standard references  * from text.  *   *<p>  * This class helps to find the standard references from text by performing the  * following steps:  *<ol>  *<li>searches for headers;</li>  *<li>searches for patterns that are supposed to be standard references  * (basically, every string mostly composed of uppercase letters followed by an  * alphanumeric characters);</li>  *<li>each potential standard reference starts with score equal to 0.25;</li>  *<li>increases by 0.50 the score of references which include the name of a  * known standard organization ({@link StandardOrganizations});</li>  *<li>increases by 0.25 the score of references which have been found within  * "Applicable Documents" and equivalent sections;</li>  *<li>returns the standard references along with scores.</li>  *</ol>  *</p>  *  */
end_comment

begin_class
specifier|public
class|class
name|StandardsText
block|{
comment|// Regular expression to match uppercase headers
specifier|private
specifier|static
specifier|final
name|String
name|REGEX_HEADER
init|=
literal|"(\\d+\\.(\\d+\\.?)*)\\p{Blank}+([A-Z]+(\\s[A-Z]+)*){5,}"
decl_stmt|;
comment|// Regular expression to match the "APPLICABLE DOCUMENTS" and equivalent
comment|// sections
specifier|private
specifier|static
specifier|final
name|String
name|REGEX_APPLICABLE_DOCUMENTS
init|=
literal|"(?i:.*APPLICABLE\\sDOCUMENTS|REFERENCE|STANDARD|REQUIREMENT|GUIDELINE|COMPLIANCE.*)"
decl_stmt|;
comment|// Regular expression to match the alphanumeric identifier of the standard
specifier|private
specifier|static
specifier|final
name|String
name|REGEX_IDENTIFIER
init|=
literal|"(?<identifier>([0-9]{3,}|([A-Z]+(-|_|\\.)?[0-9]{2,}))((-|_|\\.)?[A-Z0-9]+)*)"
decl_stmt|;
comment|// Regular expression to match the standard organization
specifier|private
specifier|static
specifier|final
name|String
name|REGEX_ORGANIZATION
init|=
name|StandardOrganizations
operator|.
name|getOrganzationsRegex
argument_list|()
decl_stmt|;
comment|// Regular expression to match the type of publication, often reported
comment|// between the name of the standard organization and the standard identifier
specifier|private
specifier|static
specifier|final
name|String
name|REGEX_STANDARD_TYPE
init|=
literal|"(\\s(Publication|Standard))?"
decl_stmt|;
comment|// Regular expression to match a string that is supposed to be a standard
comment|// reference
specifier|private
specifier|static
specifier|final
name|String
name|REGEX_FALLBACK
init|=
literal|"\\(?"
operator|+
literal|"(?<mainOrganization>[A-Z]\\w+)"
operator|+
literal|"\\)?((\\s?(?<separator>\\/)\\s?)(\\w+\\s)*\\(?"
operator|+
literal|"(?<secondOrganization>[A-Z]\\w+)"
operator|+
literal|"\\)?)?"
operator|+
name|REGEX_STANDARD_TYPE
operator|+
literal|"(-|\\s)?"
operator|+
name|REGEX_IDENTIFIER
decl_stmt|;
comment|// Regular expression to match the standard organization within a string
comment|// that is supposed to be a standard reference
specifier|private
specifier|static
specifier|final
name|String
name|REGEX_STANDARD
init|=
literal|".*"
operator|+
name|REGEX_ORGANIZATION
operator|+
literal|".+"
operator|+
name|REGEX_ORGANIZATION
operator|+
literal|"?.*"
decl_stmt|;
comment|/** 	 * Extracts the standard references found within the given text. 	 *  	 * @param text 	 *            the text from which the standard references are extracted. 	 * @param threshold 	 *            the lower bound limit to be used in order to select only the 	 *            standard references with score greater than or equal to the 	 *            threshold. For instance, using a threshold of 0.75 means that 	 *            only the patterns with score greater than or equal to 0.75 	 *            will be returned. 	 * @return the list of standard references extracted from the given text. 	 */
specifier|public
specifier|static
name|ArrayList
argument_list|<
name|StandardReference
argument_list|>
name|extractStandardReferences
parameter_list|(
name|String
name|text
parameter_list|,
name|double
name|threshold
parameter_list|)
block|{
name|Map
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|headers
init|=
name|findHeaders
argument_list|(
name|text
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|StandardReference
argument_list|>
name|standardReferences
init|=
name|findStandards
argument_list|(
name|text
argument_list|,
name|headers
argument_list|,
name|threshold
argument_list|)
decl_stmt|;
return|return
name|standardReferences
return|;
block|}
comment|/** 	 * This method helps to find the headers within the given text. 	 *  	 * @param text 	 *            the text from which the headers are extracted. 	 * @return the list of headers found within the given text. 	 */
specifier|private
specifier|static
name|Map
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|findHeaders
parameter_list|(
name|String
name|text
parameter_list|)
block|{
name|Map
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|headers
init|=
operator|new
name|TreeMap
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|Pattern
name|pattern
init|=
name|Pattern
operator|.
name|compile
argument_list|(
name|REGEX_HEADER
argument_list|)
decl_stmt|;
name|Matcher
name|matcher
init|=
name|pattern
operator|.
name|matcher
argument_list|(
name|text
argument_list|)
decl_stmt|;
while|while
condition|(
name|matcher
operator|.
name|find
argument_list|()
condition|)
block|{
name|headers
operator|.
name|put
argument_list|(
name|matcher
operator|.
name|start
argument_list|()
argument_list|,
name|matcher
operator|.
name|group
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|headers
return|;
block|}
comment|/** 	 * This method helps to find the standard references within the given text. 	 *  	 * @param text 	 *            the text from which the standards references are extracted. 	 * @param headers 	 *            the list of headers found within the given text. 	 * @param threshold 	 *            the lower bound limit to be used in order to select only the 	 *            standard references with score greater than or equal to the 	 *            threshold. 	 * @return the list of standard references extracted from the given text. 	 */
specifier|private
specifier|static
name|ArrayList
argument_list|<
name|StandardReference
argument_list|>
name|findStandards
parameter_list|(
name|String
name|text
parameter_list|,
name|Map
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|headers
parameter_list|,
name|double
name|threshold
parameter_list|)
block|{
name|ArrayList
argument_list|<
name|StandardReference
argument_list|>
name|standards
init|=
operator|new
name|ArrayList
argument_list|<
name|StandardReference
argument_list|>
argument_list|()
decl_stmt|;
name|double
name|score
init|=
literal|0
decl_stmt|;
name|Pattern
name|pattern
init|=
name|Pattern
operator|.
name|compile
argument_list|(
name|REGEX_FALLBACK
argument_list|)
decl_stmt|;
name|Matcher
name|matcher
init|=
name|pattern
operator|.
name|matcher
argument_list|(
name|text
argument_list|)
decl_stmt|;
while|while
condition|(
name|matcher
operator|.
name|find
argument_list|()
condition|)
block|{
name|StandardReferenceBuilder
name|builder
init|=
operator|new
name|StandardReference
operator|.
name|StandardReferenceBuilder
argument_list|(
name|matcher
operator|.
name|group
argument_list|(
literal|"mainOrganization"
argument_list|)
argument_list|,
name|matcher
operator|.
name|group
argument_list|(
literal|"identifier"
argument_list|)
argument_list|)
operator|.
name|setSecondOrganization
argument_list|(
name|matcher
operator|.
name|group
argument_list|(
literal|"separator"
argument_list|)
argument_list|,
name|matcher
operator|.
name|group
argument_list|(
literal|"secondOrganization"
argument_list|)
argument_list|)
decl_stmt|;
name|score
operator|=
literal|0.25
expr_stmt|;
if|if
condition|(
name|matcher
operator|.
name|group
argument_list|()
operator|.
name|matches
argument_list|(
name|REGEX_STANDARD
argument_list|)
condition|)
block|{
name|score
operator|+=
literal|0.50
expr_stmt|;
block|}
name|int
name|startHeader
init|=
literal|0
decl_stmt|;
name|int
name|endHeader
init|=
literal|0
decl_stmt|;
name|boolean
name|headerFound
init|=
literal|false
decl_stmt|;
name|Iterator
argument_list|<
name|Entry
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
argument_list|>
name|iterator
init|=
name|headers
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|iterator
operator|.
name|hasNext
argument_list|()
operator|&&
operator|!
name|headerFound
condition|)
block|{
name|startHeader
operator|=
name|endHeader
expr_stmt|;
name|endHeader
operator|=
name|iterator
operator|.
name|next
argument_list|()
operator|.
name|getKey
argument_list|()
expr_stmt|;
if|if
condition|(
name|endHeader
operator|>
name|matcher
operator|.
name|start
argument_list|()
condition|)
block|{
name|headerFound
operator|=
literal|true
expr_stmt|;
block|}
block|}
name|String
name|header
init|=
name|headers
operator|.
name|get
argument_list|(
name|startHeader
argument_list|)
decl_stmt|;
if|if
condition|(
name|header
operator|!=
literal|null
operator|&&
name|headers
operator|.
name|get
argument_list|(
name|startHeader
argument_list|)
operator|.
name|matches
argument_list|(
name|REGEX_APPLICABLE_DOCUMENTS
argument_list|)
condition|)
block|{
name|score
operator|+=
literal|0.25
expr_stmt|;
block|}
name|builder
operator|.
name|setScore
argument_list|(
name|score
argument_list|)
expr_stmt|;
if|if
condition|(
name|score
operator|>=
name|threshold
condition|)
block|{
name|standards
operator|.
name|add
argument_list|(
name|builder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|standards
return|;
block|}
block|}
end_class

end_unit

