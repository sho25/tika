begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|sax
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStreamWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|UnsupportedEncodingException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Writer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|Charset
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|Attributes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|helpers
operator|.
name|DefaultHandler
import|;
end_import

begin_comment
comment|/**  * SAX event handler that writes all character content out to a character  * stream. No escaping or other transformations are made on the character  * content.  *<p>  * As of Tika 1.20, this handler ignores content within&lt;script&gt; and  *&lt;style&gt; tags.  *</p>  * @since Apache Tika 0.10  */
end_comment

begin_class
specifier|public
class|class
name|ToTextContentHandler
extends|extends
name|DefaultHandler
block|{
specifier|private
specifier|static
specifier|final
name|String
name|STYLE
init|=
literal|"STYLE"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|SCRIPT
init|=
literal|"SCRIPT"
decl_stmt|;
specifier|private
name|int
name|styleDepth
init|=
literal|0
decl_stmt|;
specifier|private
name|int
name|scriptDepth
init|=
literal|0
decl_stmt|;
comment|/**      * The character stream.      */
specifier|private
specifier|final
name|Writer
name|writer
decl_stmt|;
comment|/**      * Creates a content handler that writes character events to      * the given writer.      *      * @param writer writer      */
specifier|public
name|ToTextContentHandler
parameter_list|(
name|Writer
name|writer
parameter_list|)
block|{
name|this
operator|.
name|writer
operator|=
name|writer
expr_stmt|;
block|}
comment|/**      * Creates a content handler that writes character events to      * the given output stream using the platform default encoding.      *      * @param stream output stream      */
specifier|public
name|ToTextContentHandler
parameter_list|(
name|OutputStream
name|stream
parameter_list|)
block|{
name|this
argument_list|(
operator|new
name|OutputStreamWriter
argument_list|(
name|stream
argument_list|,
name|Charset
operator|.
name|defaultCharset
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Creates a content handler that writes character events to      * the given output stream using the given encoding.      *      * @param stream output stream      * @param encoding output encoding      * @throws UnsupportedEncodingException if the encoding is unsupported      */
specifier|public
name|ToTextContentHandler
parameter_list|(
name|OutputStream
name|stream
parameter_list|,
name|String
name|encoding
parameter_list|)
throws|throws
name|UnsupportedEncodingException
block|{
name|this
argument_list|(
operator|new
name|OutputStreamWriter
argument_list|(
name|stream
argument_list|,
name|encoding
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Creates a content handler that writes character events      * to an internal string buffer. Use the {@link #toString()}      * method to access the collected character content.      */
specifier|public
name|ToTextContentHandler
parameter_list|()
block|{
name|this
argument_list|(
operator|new
name|StringWriter
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Writes the given characters to the given character stream.      */
annotation|@
name|Override
specifier|public
name|void
name|characters
parameter_list|(
name|char
index|[]
name|ch
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|length
parameter_list|)
throws|throws
name|SAXException
block|{
if|if
condition|(
name|styleDepth
operator|+
name|scriptDepth
operator|!=
literal|0
condition|)
block|{
return|return;
block|}
try|try
block|{
name|writer
operator|.
name|write
argument_list|(
name|ch
argument_list|,
name|start
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SAXException
argument_list|(
literal|"Error writing: "
operator|+
operator|new
name|String
argument_list|(
name|ch
argument_list|,
name|start
argument_list|,
name|length
argument_list|)
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**      * Writes the given ignorable characters to the given character stream.      * The default implementation simply forwards the call to the      * {@link #characters(char[], int, int)} method.      */
annotation|@
name|Override
specifier|public
name|void
name|ignorableWhitespace
parameter_list|(
name|char
index|[]
name|ch
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|length
parameter_list|)
throws|throws
name|SAXException
block|{
name|characters
argument_list|(
name|ch
argument_list|,
name|start
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
comment|/**      * Flushes the character stream so that no characters are forgotten      * in internal buffers.      *      * @see<a href="https://issues.apache.org/jira/browse/TIKA-179">TIKA-179</a>      * @throws SAXException if the stream can not be flushed      */
annotation|@
name|Override
specifier|public
name|void
name|endDocument
parameter_list|()
throws|throws
name|SAXException
block|{
try|try
block|{
name|writer
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SAXException
argument_list|(
literal|"Error flushing character output"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|startElement
parameter_list|(
name|String
name|uri
parameter_list|,
name|String
name|localName
parameter_list|,
name|String
name|qName
parameter_list|,
name|Attributes
name|atts
parameter_list|)
throws|throws
name|SAXException
block|{
name|String
name|uc
init|=
operator|(
name|qName
operator|==
literal|null
operator|)
condition|?
literal|""
else|:
name|qName
operator|.
name|toUpperCase
argument_list|(
name|Locale
operator|.
name|ENGLISH
argument_list|)
decl_stmt|;
if|if
condition|(
name|uc
operator|.
name|equals
argument_list|(
name|STYLE
argument_list|)
condition|)
block|{
name|styleDepth
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|uc
operator|.
name|equals
argument_list|(
name|SCRIPT
argument_list|)
condition|)
block|{
name|scriptDepth
operator|++
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|endElement
parameter_list|(
name|String
name|uri
parameter_list|,
name|String
name|localName
parameter_list|,
name|String
name|qName
parameter_list|)
throws|throws
name|SAXException
block|{
name|String
name|uc
init|=
operator|(
name|qName
operator|==
literal|null
operator|)
condition|?
literal|""
else|:
name|qName
operator|.
name|toUpperCase
argument_list|(
name|Locale
operator|.
name|ENGLISH
argument_list|)
decl_stmt|;
if|if
condition|(
name|uc
operator|.
name|equals
argument_list|(
name|STYLE
argument_list|)
condition|)
block|{
name|styleDepth
operator|--
expr_stmt|;
block|}
if|if
condition|(
name|uc
operator|.
name|equals
argument_list|(
name|SCRIPT
argument_list|)
condition|)
block|{
name|scriptDepth
operator|--
expr_stmt|;
block|}
block|}
comment|/**      * Returns the contents of the internal string buffer where      * all the received characters have been collected. Only works      * when this object was constructed using the empty default      * constructor or by passing a {@link StringWriter} to the      * other constructor.      */
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|writer
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

