begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|sax
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|metadata
operator|.
name|Metadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|ContentHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|helpers
operator|.
name|DefaultHandler
import|;
end_import

begin_comment
comment|/**  * StandardsExtractingContentHandler is a Content Handler used to extract  * standard references while parsing.  *  */
end_comment

begin_class
specifier|public
class|class
name|StandardsExtractingContentHandler
extends|extends
name|ContentHandlerDecorator
block|{
specifier|public
specifier|static
specifier|final
name|String
name|STANDARD_REFERENCES
init|=
literal|"standard_references"
decl_stmt|;
specifier|private
name|Metadata
name|metadata
decl_stmt|;
specifier|private
name|StringBuilder
name|stringBuilder
decl_stmt|;
specifier|private
name|double
name|threshold
init|=
literal|0
decl_stmt|;
comment|/** 	 * Creates a decorator for the given SAX event handler and Metadata object. 	 *  	 * @param handler 	 *            SAX event handler to be decorated. 	 * @param metadata 	 *            {@link Metadata} object. 	 */
specifier|public
name|StandardsExtractingContentHandler
parameter_list|(
name|ContentHandler
name|handler
parameter_list|,
name|Metadata
name|metadata
parameter_list|)
block|{
name|super
argument_list|(
name|handler
argument_list|)
expr_stmt|;
name|this
operator|.
name|metadata
operator|=
name|metadata
expr_stmt|;
name|this
operator|.
name|stringBuilder
operator|=
operator|new
name|StringBuilder
argument_list|()
expr_stmt|;
block|}
comment|/** 	 * Creates a decorator that by default forwards incoming SAX events to a 	 * dummy content handler that simply ignores all the events. Subclasses 	 * should use the {@link #setContentHandler(ContentHandler)} method to 	 * switch to a more usable underlying content handler. Also creates a dummy 	 * Metadata object to store phone numbers in. 	 */
specifier|protected
name|StandardsExtractingContentHandler
parameter_list|()
block|{
name|this
argument_list|(
operator|new
name|DefaultHandler
argument_list|()
argument_list|,
operator|new
name|Metadata
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/** 	 * Gets the threshold to be used for selecting the standard references found 	 * within the text based on their score. 	 *  	 * @return the threshold to be used for selecting the standard references 	 *         found within the text based on their score. 	 */
specifier|public
name|double
name|getThreshold
parameter_list|()
block|{
return|return
name|threshold
return|;
block|}
comment|/** 	 * Sets the score to be used as threshold. 	 *  	 * @param score 	 *            the score to be used as threshold. 	 */
specifier|public
name|void
name|setThreshold
parameter_list|(
name|double
name|score
parameter_list|)
block|{
name|this
operator|.
name|threshold
operator|=
name|score
expr_stmt|;
block|}
comment|/** 	 * The characters method is called whenever a Parser wants to pass raw 	 * characters to the ContentHandler. However, standard references are often 	 * split across different calls to characters, depending on the specific 	 * Parser used. Therefore, we simply add all characters to a StringBuilder 	 * and analyze it once the document is finished. 	 */
annotation|@
name|Override
specifier|public
name|void
name|characters
parameter_list|(
name|char
index|[]
name|ch
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|length
parameter_list|)
throws|throws
name|SAXException
block|{
try|try
block|{
name|String
name|text
init|=
operator|new
name|String
argument_list|(
name|Arrays
operator|.
name|copyOfRange
argument_list|(
name|ch
argument_list|,
name|start
argument_list|,
name|start
operator|+
name|length
argument_list|)
argument_list|)
decl_stmt|;
name|stringBuilder
operator|.
name|append
argument_list|(
name|text
argument_list|)
expr_stmt|;
name|super
operator|.
name|characters
argument_list|(
name|ch
argument_list|,
name|start
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SAXException
name|e
parameter_list|)
block|{
name|handleException
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** 	 * This method is called whenever the Parser is done parsing the file. So, 	 * we check the output for any standard references. 	 */
annotation|@
name|Override
specifier|public
name|void
name|endDocument
parameter_list|()
throws|throws
name|SAXException
block|{
name|super
operator|.
name|endDocument
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|StandardReference
argument_list|>
name|standards
init|=
name|StandardsText
operator|.
name|extractStandardReferences
argument_list|(
name|stringBuilder
operator|.
name|toString
argument_list|()
argument_list|,
name|threshold
argument_list|)
decl_stmt|;
for|for
control|(
name|StandardReference
name|standardReference
range|:
name|standards
control|)
block|{
name|metadata
operator|.
name|add
argument_list|(
name|STANDARD_REFERENCES
argument_list|,
name|standardReference
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

