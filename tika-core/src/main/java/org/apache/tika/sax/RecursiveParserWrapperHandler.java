begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|sax
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|metadata
operator|.
name|Metadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|utils
operator|.
name|ParserUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|ContentHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|helpers
operator|.
name|DefaultHandler
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * This is the default implementation of {@link AbstractRecursiveParserWrapperHandler}.  * See its documentation for more details.  *  * This caches the a metadata object for each embedded file and for the container file.  * It places the extracted content in the metadata object, with this key: {@link AbstractRecursiveParserWrapperHandler#TIKA_CONTENT}  * If memory is a concern, subclass AbstractRecursiveParserWrapperHandler to handle each  * embedded document.  *<p>  *<b>NOTE: This handler must only be used with the {@link org.apache.tika.parser.RecursiveParserWrapper}</b>  *</p>  */
end_comment

begin_class
specifier|public
class|class
name|RecursiveParserWrapperHandler
extends|extends
name|AbstractRecursiveParserWrapperHandler
block|{
specifier|protected
specifier|final
name|List
argument_list|<
name|Metadata
argument_list|>
name|metadataList
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
comment|/**      * Create a handler with no limit on the number of embedded resources      */
specifier|public
name|RecursiveParserWrapperHandler
parameter_list|(
name|ContentHandlerFactory
name|contentHandlerFactory
parameter_list|)
block|{
name|super
argument_list|(
name|contentHandlerFactory
argument_list|)
expr_stmt|;
block|}
comment|/**      * Create a handler that limits the number of embedded resources that will be      * parsed      * @param maxEmbeddedResources number of embedded resources that will be parsed      */
specifier|public
name|RecursiveParserWrapperHandler
parameter_list|(
name|ContentHandlerFactory
name|contentHandlerFactory
parameter_list|,
name|int
name|maxEmbeddedResources
parameter_list|)
block|{
name|super
argument_list|(
name|contentHandlerFactory
argument_list|,
name|maxEmbeddedResources
argument_list|)
expr_stmt|;
block|}
comment|/**      * This is called before parsing an embedded document      *      * @param contentHandler - local content handler to use on the embedded document      * @param metadata metadata to use for the embedded document      * @throws SAXException      */
annotation|@
name|Override
specifier|public
name|void
name|startEmbeddedDocument
parameter_list|(
name|ContentHandler
name|contentHandler
parameter_list|,
name|Metadata
name|metadata
parameter_list|)
throws|throws
name|SAXException
block|{
name|super
operator|.
name|startEmbeddedDocument
argument_list|(
name|contentHandler
argument_list|,
name|metadata
argument_list|)
expr_stmt|;
block|}
comment|/**      * This is called after parsing an embedded document.      * @param contentHandler local contenthandler used on the embedded document      * @param metadata metadata from the embedded document      * @throws SAXException      */
annotation|@
name|Override
specifier|public
name|void
name|endEmbeddedDocument
parameter_list|(
name|ContentHandler
name|contentHandler
parameter_list|,
name|Metadata
name|metadata
parameter_list|)
throws|throws
name|SAXException
block|{
name|super
operator|.
name|endEmbeddedDocument
argument_list|(
name|contentHandler
argument_list|,
name|metadata
argument_list|)
expr_stmt|;
name|addContent
argument_list|(
name|contentHandler
argument_list|,
name|metadata
argument_list|)
expr_stmt|;
name|metadataList
operator|.
name|add
argument_list|(
name|ParserUtils
operator|.
name|cloneMetadata
argument_list|(
name|metadata
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      *      * @param contentHandler content handler used on the main document      * @param metadata metadata from the main document      * @throws SAXException      */
annotation|@
name|Override
specifier|public
name|void
name|endDocument
parameter_list|(
name|ContentHandler
name|contentHandler
parameter_list|,
name|Metadata
name|metadata
parameter_list|)
throws|throws
name|SAXException
block|{
name|super
operator|.
name|endDocument
argument_list|(
name|contentHandler
argument_list|,
name|metadata
argument_list|)
expr_stmt|;
name|addContent
argument_list|(
name|contentHandler
argument_list|,
name|metadata
argument_list|)
expr_stmt|;
name|metadataList
operator|.
name|add
argument_list|(
literal|0
argument_list|,
name|ParserUtils
operator|.
name|cloneMetadata
argument_list|(
name|metadata
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      *      * @return a list of Metadata objects, one for the main document and one for each embedded document      */
specifier|public
name|List
argument_list|<
name|Metadata
argument_list|>
name|getMetadataList
parameter_list|()
block|{
return|return
name|metadataList
return|;
block|}
name|void
name|addContent
parameter_list|(
name|ContentHandler
name|handler
parameter_list|,
name|Metadata
name|metadata
parameter_list|)
block|{
if|if
condition|(
name|handler
operator|.
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|DefaultHandler
operator|.
name|class
argument_list|)
condition|)
block|{
comment|//no-op: we can't rely on just testing for
comment|//empty content because DefaultHandler's toString()
comment|//returns e.g. "org.xml.sax.helpers.DefaultHandler@6c8b1edd"
block|}
else|else
block|{
name|String
name|content
init|=
name|handler
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
name|content
operator|!=
literal|null
operator|&&
name|content
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|metadata
operator|.
name|add
argument_list|(
name|TIKA_CONTENT
argument_list|,
name|content
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

