begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|sax
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|UnsupportedEncodingException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|Attributes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_comment
comment|/**  * SAX event handler that serializes the XML document to a character stream.  * The incoming SAX events are expected to be well-formed (properly nested,  * etc.) and to explicitly include namespace declaration attributes and  * corresponding namespace prefixes in element and attribute names.  *  * @since Apache Tika 1.0  */
end_comment

begin_class
specifier|public
class|class
name|ToXMLContentHandler
extends|extends
name|ToTextContentHandler
block|{
specifier|private
specifier|static
class|class
name|ElementInfo
block|{
specifier|private
specifier|final
name|ElementInfo
name|parent
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|namespaces
decl_stmt|;
specifier|public
name|ElementInfo
parameter_list|(
name|ElementInfo
name|parent
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|namespaces
parameter_list|)
block|{
name|this
operator|.
name|parent
operator|=
name|parent
expr_stmt|;
if|if
condition|(
name|namespaces
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|this
operator|.
name|namespaces
operator|=
name|Collections
operator|.
name|emptyMap
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|namespaces
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|(
name|namespaces
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|String
name|getPrefix
parameter_list|(
name|String
name|uri
parameter_list|)
throws|throws
name|SAXException
block|{
name|String
name|prefix
init|=
name|namespaces
operator|.
name|get
argument_list|(
name|uri
argument_list|)
decl_stmt|;
if|if
condition|(
name|prefix
operator|!=
literal|null
condition|)
block|{
return|return
name|prefix
return|;
block|}
elseif|else
if|if
condition|(
name|parent
operator|!=
literal|null
condition|)
block|{
return|return
name|parent
operator|.
name|getPrefix
argument_list|(
name|uri
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|uri
operator|==
literal|null
operator|||
name|uri
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
literal|""
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|SAXException
argument_list|(
literal|"Namespace "
operator|+
name|uri
operator|+
literal|" not declared"
argument_list|)
throw|;
block|}
block|}
specifier|public
name|String
name|getQName
parameter_list|(
name|String
name|uri
parameter_list|,
name|String
name|localName
parameter_list|)
throws|throws
name|SAXException
block|{
name|String
name|prefix
init|=
name|getPrefix
argument_list|(
name|uri
argument_list|)
decl_stmt|;
if|if
condition|(
name|prefix
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
return|return
name|prefix
operator|+
literal|":"
operator|+
name|localName
return|;
block|}
else|else
block|{
return|return
name|localName
return|;
block|}
block|}
block|}
specifier|private
specifier|final
name|String
name|encoding
decl_stmt|;
specifier|protected
name|boolean
name|inStartElement
init|=
literal|false
decl_stmt|;
specifier|protected
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|namespaces
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|ElementInfo
name|currentElement
decl_stmt|;
comment|/**      * Creates an XML serializer that writes to the given byte stream      * using the given character encoding.      *      * @param stream output stream      * @param encoding output encoding      * @throws UnsupportedEncodingException if the encoding is unsupported      */
specifier|public
name|ToXMLContentHandler
parameter_list|(
name|OutputStream
name|stream
parameter_list|,
name|String
name|encoding
parameter_list|)
throws|throws
name|UnsupportedEncodingException
block|{
name|super
argument_list|(
name|stream
argument_list|,
name|encoding
argument_list|)
expr_stmt|;
name|this
operator|.
name|encoding
operator|=
name|encoding
expr_stmt|;
block|}
specifier|public
name|ToXMLContentHandler
parameter_list|(
name|String
name|encoding
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
name|this
operator|.
name|encoding
operator|=
name|encoding
expr_stmt|;
block|}
specifier|public
name|ToXMLContentHandler
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
name|this
operator|.
name|encoding
operator|=
literal|null
expr_stmt|;
block|}
comment|/**      * Writes the XML prefix.      */
annotation|@
name|Override
specifier|public
name|void
name|startDocument
parameter_list|()
throws|throws
name|SAXException
block|{
if|if
condition|(
name|encoding
operator|!=
literal|null
condition|)
block|{
name|write
argument_list|(
literal|"<?xml version=\"1.0\" encoding=\""
argument_list|)
expr_stmt|;
name|write
argument_list|(
name|encoding
argument_list|)
expr_stmt|;
name|write
argument_list|(
literal|"\"?>\n"
argument_list|)
expr_stmt|;
block|}
name|currentElement
operator|=
literal|null
expr_stmt|;
name|namespaces
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|startPrefixMapping
parameter_list|(
name|String
name|prefix
parameter_list|,
name|String
name|uri
parameter_list|)
throws|throws
name|SAXException
block|{
name|namespaces
operator|.
name|put
argument_list|(
name|uri
argument_list|,
name|prefix
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|startElement
parameter_list|(
name|String
name|uri
parameter_list|,
name|String
name|localName
parameter_list|,
name|String
name|qName
parameter_list|,
name|Attributes
name|atts
parameter_list|)
throws|throws
name|SAXException
block|{
name|lazyCloseStartElement
argument_list|()
expr_stmt|;
name|currentElement
operator|=
operator|new
name|ElementInfo
argument_list|(
name|currentElement
argument_list|,
name|namespaces
argument_list|)
expr_stmt|;
name|write
argument_list|(
literal|'<'
argument_list|)
expr_stmt|;
name|write
argument_list|(
name|currentElement
operator|.
name|getQName
argument_list|(
name|uri
argument_list|,
name|localName
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|atts
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|write
argument_list|(
literal|' '
argument_list|)
expr_stmt|;
name|write
argument_list|(
name|currentElement
operator|.
name|getQName
argument_list|(
name|atts
operator|.
name|getURI
argument_list|(
name|i
argument_list|)
argument_list|,
name|atts
operator|.
name|getLocalName
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|write
argument_list|(
literal|'='
argument_list|)
expr_stmt|;
name|write
argument_list|(
literal|'"'
argument_list|)
expr_stmt|;
name|char
index|[]
name|ch
init|=
name|atts
operator|.
name|getValue
argument_list|(
name|i
argument_list|)
operator|.
name|toCharArray
argument_list|()
decl_stmt|;
name|writeEscaped
argument_list|(
name|ch
argument_list|,
literal|0
argument_list|,
name|ch
operator|.
name|length
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|write
argument_list|(
literal|'"'
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|namespaces
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|write
argument_list|(
literal|' '
argument_list|)
expr_stmt|;
name|write
argument_list|(
literal|"xmlns"
argument_list|)
expr_stmt|;
name|String
name|prefix
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|prefix
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|write
argument_list|(
literal|':'
argument_list|)
expr_stmt|;
name|write
argument_list|(
name|prefix
argument_list|)
expr_stmt|;
block|}
name|write
argument_list|(
literal|'='
argument_list|)
expr_stmt|;
name|write
argument_list|(
literal|'"'
argument_list|)
expr_stmt|;
name|char
index|[]
name|ch
init|=
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|toCharArray
argument_list|()
decl_stmt|;
name|writeEscaped
argument_list|(
name|ch
argument_list|,
literal|0
argument_list|,
name|ch
operator|.
name|length
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|write
argument_list|(
literal|'"'
argument_list|)
expr_stmt|;
block|}
name|namespaces
operator|.
name|clear
argument_list|()
expr_stmt|;
name|inStartElement
operator|=
literal|true
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|endElement
parameter_list|(
name|String
name|uri
parameter_list|,
name|String
name|localName
parameter_list|,
name|String
name|qName
parameter_list|)
throws|throws
name|SAXException
block|{
if|if
condition|(
name|inStartElement
condition|)
block|{
name|write
argument_list|(
literal|" />"
argument_list|)
expr_stmt|;
name|inStartElement
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|write
argument_list|(
literal|"</"
argument_list|)
expr_stmt|;
name|write
argument_list|(
name|qName
argument_list|)
expr_stmt|;
name|write
argument_list|(
literal|'>'
argument_list|)
expr_stmt|;
block|}
name|namespaces
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|characters
parameter_list|(
name|char
index|[]
name|ch
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|length
parameter_list|)
throws|throws
name|SAXException
block|{
name|lazyCloseStartElement
argument_list|()
expr_stmt|;
name|writeEscaped
argument_list|(
name|ch
argument_list|,
name|start
argument_list|,
name|start
operator|+
name|length
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|lazyCloseStartElement
parameter_list|()
throws|throws
name|SAXException
block|{
if|if
condition|(
name|inStartElement
condition|)
block|{
name|write
argument_list|(
literal|'>'
argument_list|)
expr_stmt|;
name|inStartElement
operator|=
literal|false
expr_stmt|;
block|}
block|}
comment|/**      * Writes the given character as-is.      *      * @param ch character to be written      * @throws SAXException if the character could not be written      */
specifier|protected
name|void
name|write
parameter_list|(
name|char
name|ch
parameter_list|)
throws|throws
name|SAXException
block|{
name|super
operator|.
name|characters
argument_list|(
operator|new
name|char
index|[]
block|{
name|ch
block|}
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
comment|/**      * Writes the given string of character as-is.      *      * @param string string of character to be written      * @throws SAXException if the character string could not be written      */
specifier|protected
name|void
name|write
parameter_list|(
name|String
name|string
parameter_list|)
throws|throws
name|SAXException
block|{
name|super
operator|.
name|characters
argument_list|(
name|string
operator|.
name|toCharArray
argument_list|()
argument_list|,
literal|0
argument_list|,
name|string
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Writes the given characters as-is followed by the given entity.      *      * @param ch character array      * @param from start position in the array      * @param to end position in the array      * @param entity entity code      * @return next position in the array,      *         after the characters plus one entity      * @throws SAXException if the characters could not be written      */
specifier|private
name|int
name|writeCharsAndEntity
parameter_list|(
name|char
index|[]
name|ch
parameter_list|,
name|int
name|from
parameter_list|,
name|int
name|to
parameter_list|,
name|String
name|entity
parameter_list|)
throws|throws
name|SAXException
block|{
name|super
operator|.
name|characters
argument_list|(
name|ch
argument_list|,
name|from
argument_list|,
name|to
operator|-
name|from
argument_list|)
expr_stmt|;
name|write
argument_list|(
literal|'&'
argument_list|)
expr_stmt|;
name|write
argument_list|(
name|entity
argument_list|)
expr_stmt|;
name|write
argument_list|(
literal|';'
argument_list|)
expr_stmt|;
return|return
name|to
operator|+
literal|1
return|;
block|}
comment|/**      * Writes the given characters with XML meta characters escaped.      *      * @param ch character array      * @param from start position in the array      * @param to end position in the array      * @param attribute whether the characters should be escaped as      *                  an attribute value or normal character content      * @throws SAXException if the characters could not be written      */
specifier|private
name|void
name|writeEscaped
parameter_list|(
name|char
index|[]
name|ch
parameter_list|,
name|int
name|from
parameter_list|,
name|int
name|to
parameter_list|,
name|boolean
name|attribute
parameter_list|)
throws|throws
name|SAXException
block|{
name|int
name|pos
init|=
name|from
decl_stmt|;
while|while
condition|(
name|pos
operator|<
name|to
condition|)
block|{
if|if
condition|(
name|ch
index|[
name|pos
index|]
operator|==
literal|'<'
condition|)
block|{
name|from
operator|=
name|pos
operator|=
name|writeCharsAndEntity
argument_list|(
name|ch
argument_list|,
name|from
argument_list|,
name|pos
argument_list|,
literal|"lt"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ch
index|[
name|pos
index|]
operator|==
literal|'>'
condition|)
block|{
name|from
operator|=
name|pos
operator|=
name|writeCharsAndEntity
argument_list|(
name|ch
argument_list|,
name|from
argument_list|,
name|pos
argument_list|,
literal|"gt"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ch
index|[
name|pos
index|]
operator|==
literal|'&'
condition|)
block|{
name|from
operator|=
name|pos
operator|=
name|writeCharsAndEntity
argument_list|(
name|ch
argument_list|,
name|from
argument_list|,
name|pos
argument_list|,
literal|"amp"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|attribute
operator|&&
name|ch
index|[
name|pos
index|]
operator|==
literal|'"'
condition|)
block|{
name|from
operator|=
name|pos
operator|=
name|writeCharsAndEntity
argument_list|(
name|ch
argument_list|,
name|from
argument_list|,
name|pos
argument_list|,
literal|"quot"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|pos
operator|++
expr_stmt|;
block|}
block|}
name|super
operator|.
name|characters
argument_list|(
name|ch
argument_list|,
name|from
argument_list|,
name|to
operator|-
name|from
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

