begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|metadata
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_comment
comment|/**  * A multi-valued metadata container.  */
end_comment

begin_class
specifier|public
class|class
name|Metadata
implements|implements
name|CreativeCommons
implements|,
name|DublinCore
implements|,
name|HttpHeaders
implements|,
name|MSOffice
implements|,
name|TikaMetadataKeys
implements|,
name|TikaMimeKeys
block|{
comment|/**      * A map of all metadata attributes.      */
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|String
index|[]
argument_list|>
name|metadata
init|=
literal|null
decl_stmt|;
comment|/**      * Constructs a new, empty metadata.      */
specifier|public
name|Metadata
parameter_list|()
block|{
name|metadata
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
index|[]
argument_list|>
argument_list|()
expr_stmt|;
block|}
comment|/**      * Returns true if named value is multivalued.      *       * @param name      *          name of metadata      * @return true is named value is multivalued, false if single value or null      */
specifier|public
name|boolean
name|isMultiValued
parameter_list|(
specifier|final
name|String
name|name
parameter_list|)
block|{
return|return
name|metadata
operator|.
name|get
argument_list|(
name|name
argument_list|)
operator|!=
literal|null
operator|&&
name|metadata
operator|.
name|get
argument_list|(
name|name
argument_list|)
operator|.
name|length
operator|>
literal|1
return|;
block|}
comment|/**      * Returns an array of the names contained in the metadata.      *       * @return Metadata names      */
specifier|public
name|String
index|[]
name|names
parameter_list|()
block|{
return|return
name|metadata
operator|.
name|keySet
argument_list|()
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|metadata
operator|.
name|keySet
argument_list|()
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
comment|/**      * Get the value associated to a metadata name. If many values are assiociated      * to the specified name, then the first one is returned.      *       * @param name      *          of the metadata.      * @return the value associated to the specified metadata name.      */
specifier|public
name|String
name|get
parameter_list|(
specifier|final
name|String
name|name
parameter_list|)
block|{
name|String
index|[]
name|values
init|=
name|metadata
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|values
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
else|else
block|{
return|return
name|values
index|[
literal|0
index|]
return|;
block|}
block|}
comment|/**      * Get the values associated to a metadata name.      *       * @param name      *          of the metadata.      * @return the values associated to a metadata name.      */
specifier|public
name|String
index|[]
name|getValues
parameter_list|(
specifier|final
name|String
name|name
parameter_list|)
block|{
return|return
name|_getValues
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|private
name|String
index|[]
name|_getValues
parameter_list|(
specifier|final
name|String
name|name
parameter_list|)
block|{
name|String
index|[]
name|values
init|=
name|metadata
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|values
operator|==
literal|null
condition|)
block|{
name|values
operator|=
operator|new
name|String
index|[
literal|0
index|]
expr_stmt|;
block|}
return|return
name|values
return|;
block|}
comment|/**      * Add a metadata name/value mapping. Add the specified value to the list of      * values associated to the specified metadata name.      *       * @param name      *          the metadata name.      * @param value      *          the metadata value.      */
specifier|public
name|void
name|add
parameter_list|(
specifier|final
name|String
name|name
parameter_list|,
specifier|final
name|String
name|value
parameter_list|)
block|{
name|String
index|[]
name|values
init|=
name|metadata
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|values
operator|==
literal|null
condition|)
block|{
name|set
argument_list|(
name|name
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|String
index|[]
name|newValues
init|=
operator|new
name|String
index|[
name|values
operator|.
name|length
operator|+
literal|1
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|values
argument_list|,
literal|0
argument_list|,
name|newValues
argument_list|,
literal|0
argument_list|,
name|values
operator|.
name|length
argument_list|)
expr_stmt|;
name|newValues
index|[
name|newValues
operator|.
name|length
operator|-
literal|1
index|]
operator|=
name|value
expr_stmt|;
name|metadata
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|newValues
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Copy All key-value pairs from properties.      *       * @param properties      *          properties to copy from      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
name|void
name|setAll
parameter_list|(
name|Properties
name|properties
parameter_list|)
block|{
name|Enumeration
argument_list|<
name|String
argument_list|>
name|names
init|=
operator|(
name|Enumeration
argument_list|<
name|String
argument_list|>
operator|)
name|properties
operator|.
name|propertyNames
argument_list|()
decl_stmt|;
while|while
condition|(
name|names
operator|.
name|hasMoreElements
argument_list|()
condition|)
block|{
name|String
name|name
init|=
name|names
operator|.
name|nextElement
argument_list|()
decl_stmt|;
name|metadata
operator|.
name|put
argument_list|(
name|name
argument_list|,
operator|new
name|String
index|[]
block|{
name|properties
operator|.
name|getProperty
argument_list|(
name|name
argument_list|)
block|}
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Set metadata name/value. Associate the specified value to the specified      * metadata name. If some previous values were associated to this name, they      * are removed.      *       * @param name      *          the metadata name.      * @param value      *          the metadata value.      */
specifier|public
name|void
name|set
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|value
parameter_list|)
block|{
name|metadata
operator|.
name|put
argument_list|(
name|name
argument_list|,
operator|new
name|String
index|[]
block|{
name|value
block|}
argument_list|)
expr_stmt|;
block|}
comment|/**      * Remove a metadata and all its associated values.      *       * @param name      *          metadata name to remove      */
specifier|public
name|void
name|remove
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|metadata
operator|.
name|remove
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
comment|/**      * Returns the number of metadata names in this metadata.      *       * @return number of metadata names      */
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|metadata
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|o
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
name|Metadata
name|other
init|=
literal|null
decl_stmt|;
try|try
block|{
name|other
operator|=
operator|(
name|Metadata
operator|)
name|o
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassCastException
name|cce
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|other
operator|.
name|size
argument_list|()
operator|!=
name|size
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
name|String
index|[]
name|names
init|=
name|names
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|names
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|String
index|[]
name|otherValues
init|=
name|other
operator|.
name|_getValues
argument_list|(
name|names
index|[
name|i
index|]
argument_list|)
decl_stmt|;
name|String
index|[]
name|thisValues
init|=
name|_getValues
argument_list|(
name|names
index|[
name|i
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|otherValues
operator|.
name|length
operator|!=
name|thisValues
operator|.
name|length
condition|)
block|{
return|return
literal|false
return|;
block|}
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|otherValues
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|otherValues
index|[
name|j
index|]
operator|.
name|equals
argument_list|(
name|thisValues
index|[
name|j
index|]
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
block|}
return|return
literal|true
return|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuffer
name|buf
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|String
index|[]
name|names
init|=
name|names
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|names
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|String
index|[]
name|values
init|=
name|_getValues
argument_list|(
name|names
index|[
name|i
index|]
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|values
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
name|buf
operator|.
name|append
argument_list|(
name|names
index|[
name|i
index|]
argument_list|)
operator|.
name|append
argument_list|(
literal|"="
argument_list|)
operator|.
name|append
argument_list|(
name|values
index|[
name|j
index|]
argument_list|)
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|buf
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

