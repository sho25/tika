begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|config
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_comment
comment|/**  * Internal utility class that Tika uses to look up service providers.  *  * @since Apache Tika 0.9  */
end_comment

begin_class
specifier|public
class|class
name|ServiceLoader
block|{
comment|/**      * The default context class loader to use for all threads, or      *<code>null</code> to automatically select the context class loader.      */
specifier|private
specifier|static
specifier|volatile
name|ClassLoader
name|contextClassLoader
init|=
literal|null
decl_stmt|;
comment|/**      * Returns the context class loader of the current thread. If such      * a class loader is not available, then the loader of this class or      * finally the system class loader is returned.      *      * @see<a href="https://issues.apache.org/jira/browse/TIKA-441">TIKA-441</a>      * @return context class loader, or<code>null</code> if no loader      *         is available      */
specifier|static
name|ClassLoader
name|getContextClassLoader
parameter_list|()
block|{
name|ClassLoader
name|loader
init|=
name|contextClassLoader
decl_stmt|;
if|if
condition|(
name|loader
operator|==
literal|null
condition|)
block|{
name|loader
operator|=
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getContextClassLoader
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|loader
operator|==
literal|null
condition|)
block|{
name|loader
operator|=
name|ServiceLoader
operator|.
name|class
operator|.
name|getClassLoader
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|loader
operator|==
literal|null
condition|)
block|{
name|loader
operator|=
name|ClassLoader
operator|.
name|getSystemClassLoader
argument_list|()
expr_stmt|;
block|}
return|return
name|loader
return|;
block|}
comment|/**      * Sets the context class loader to use for all threads that access      * this class. Used for example in an OSGi environment to avoid problems      * with the default context class loader.      *      * @param loader default context class loader,      *               or<code>null</code> to automatically pick the loader      */
specifier|public
specifier|static
name|void
name|setContextClassLoader
parameter_list|(
name|ClassLoader
name|loader
parameter_list|)
block|{
name|contextClassLoader
operator|=
name|loader
expr_stmt|;
block|}
specifier|private
specifier|final
name|ClassLoader
name|loader
decl_stmt|;
specifier|private
specifier|final
name|LoadErrorHandler
name|handler
decl_stmt|;
specifier|public
name|ServiceLoader
parameter_list|(
name|ClassLoader
name|loader
parameter_list|,
name|LoadErrorHandler
name|handler
parameter_list|)
block|{
name|this
operator|.
name|loader
operator|=
name|loader
expr_stmt|;
name|this
operator|.
name|handler
operator|=
name|handler
expr_stmt|;
block|}
specifier|public
name|ServiceLoader
parameter_list|(
name|ClassLoader
name|loader
parameter_list|)
block|{
name|this
argument_list|(
name|loader
argument_list|,
name|LoadErrorHandler
operator|.
name|IGNORE
argument_list|)
expr_stmt|;
block|}
specifier|public
name|ServiceLoader
parameter_list|()
block|{
name|this
argument_list|(
name|getContextClassLoader
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Returns all the available service resources matching the      *  given pattern, such as all instances of tika-mimetypes.xml       *  on the classpath, or all org.apache.tika.parser.Parser       *  service files.      */
specifier|public
name|Enumeration
argument_list|<
name|URL
argument_list|>
name|findServiceResources
parameter_list|(
name|String
name|filePattern
parameter_list|)
block|{
try|try
block|{
name|Enumeration
argument_list|<
name|URL
argument_list|>
name|resources
init|=
name|loader
operator|.
name|getResources
argument_list|(
name|filePattern
argument_list|)
decl_stmt|;
return|return
name|resources
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ignore
parameter_list|)
block|{
comment|// We couldn't get the list of service resource files
name|List
argument_list|<
name|URL
argument_list|>
name|empty
init|=
name|Collections
operator|.
name|emptyList
argument_list|()
decl_stmt|;
return|return
name|Collections
operator|.
name|enumeration
argument_list|(
name|empty
argument_list|)
return|;
block|}
block|}
comment|/**      * Returns all the available service providers of the given type.      *      * @param service service provider interface      * @return available service providers      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
parameter_list|<
name|T
parameter_list|>
name|List
argument_list|<
name|T
argument_list|>
name|loadServiceProviders
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|service
parameter_list|)
block|{
name|List
argument_list|<
name|T
argument_list|>
name|providers
init|=
operator|new
name|ArrayList
argument_list|<
name|T
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|loader
operator|!=
literal|null
condition|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|names
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|String
name|serviceName
init|=
name|service
operator|.
name|getName
argument_list|()
decl_stmt|;
name|Enumeration
argument_list|<
name|URL
argument_list|>
name|resources
init|=
name|findServiceResources
argument_list|(
literal|"META-INF/services/"
operator|+
name|serviceName
argument_list|)
decl_stmt|;
for|for
control|(
name|URL
name|resource
range|:
name|Collections
operator|.
name|list
argument_list|(
name|resources
argument_list|)
control|)
block|{
try|try
block|{
name|names
operator|.
name|addAll
argument_list|(
name|getServiceClassNames
argument_list|(
name|resource
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|handler
operator|.
name|handleLoadError
argument_list|(
name|serviceName
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|String
name|name
range|:
name|names
control|)
block|{
try|try
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|klass
init|=
name|loader
operator|.
name|loadClass
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|service
operator|.
name|isAssignableFrom
argument_list|(
name|klass
argument_list|)
condition|)
block|{
name|providers
operator|.
name|add
argument_list|(
operator|(
name|T
operator|)
name|klass
operator|.
name|newInstance
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|handler
operator|.
name|handleLoadError
argument_list|(
name|name
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|providers
return|;
block|}
specifier|private
specifier|static
specifier|final
name|Pattern
name|COMMENT
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"#.*"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Pattern
name|WHITESPACE
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"\\s+"
argument_list|)
decl_stmt|;
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|getServiceClassNames
parameter_list|(
name|URL
name|resource
parameter_list|)
throws|throws
name|IOException
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|names
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|InputStream
name|stream
init|=
name|resource
operator|.
name|openStream
argument_list|()
decl_stmt|;
try|try
block|{
name|BufferedReader
name|reader
init|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|stream
argument_list|,
literal|"UTF-8"
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|line
init|=
name|reader
operator|.
name|readLine
argument_list|()
decl_stmt|;
while|while
condition|(
name|line
operator|!=
literal|null
condition|)
block|{
name|line
operator|=
name|COMMENT
operator|.
name|matcher
argument_list|(
name|line
argument_list|)
operator|.
name|replaceFirst
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|line
operator|=
name|WHITESPACE
operator|.
name|matcher
argument_list|(
name|line
argument_list|)
operator|.
name|replaceAll
argument_list|(
literal|""
argument_list|)
expr_stmt|;
if|if
condition|(
name|line
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|names
operator|.
name|add
argument_list|(
name|line
argument_list|)
expr_stmt|;
block|}
name|line
operator|=
name|reader
operator|.
name|readLine
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|stream
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
return|return
name|names
return|;
block|}
block|}
end_class

end_unit

