begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|config
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|detect
operator|.
name|Detector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|Parser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|BundleActivator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|BundleContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|ServiceReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|util
operator|.
name|tracker
operator|.
name|ServiceTracker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|util
operator|.
name|tracker
operator|.
name|ServiceTrackerCustomizer
import|;
end_import

begin_comment
comment|/**  * Bundle activator that adjust the class loading mechanism of the  * {@link ServiceLoader} class to work correctly in an OSGi environment.  *<p>  * Note that you should<strong>not</strong> access this class directly.  * Instead the OSGi environment (if present) will automatically invoke the  * methods of this class based on the Bundle-Activator setting in the bundle  * manifest.  *  * @since Apache Tika 0.9  */
end_comment

begin_class
specifier|public
class|class
name|TikaActivator
implements|implements
name|BundleActivator
implements|,
name|ServiceTrackerCustomizer
block|{
specifier|private
name|ServiceTracker
name|detectorTracker
decl_stmt|;
specifier|private
name|ServiceTracker
name|parserTracker
decl_stmt|;
specifier|private
name|BundleContext
name|bundleContext
decl_stmt|;
comment|//-----------------------------------------------------< BundleActivator>
specifier|public
name|void
name|start
parameter_list|(
specifier|final
name|BundleContext
name|context
parameter_list|)
throws|throws
name|Exception
block|{
name|bundleContext
operator|=
name|context
expr_stmt|;
name|detectorTracker
operator|=
operator|new
name|ServiceTracker
argument_list|(
name|context
argument_list|,
name|Detector
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|parserTracker
operator|=
operator|new
name|ServiceTracker
argument_list|(
name|context
argument_list|,
name|Parser
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|detectorTracker
operator|.
name|open
argument_list|()
expr_stmt|;
name|parserTracker
operator|.
name|open
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|stop
parameter_list|(
name|BundleContext
name|context
parameter_list|)
throws|throws
name|Exception
block|{
name|parserTracker
operator|.
name|close
argument_list|()
expr_stmt|;
name|detectorTracker
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
specifier|public
name|Object
name|addingService
parameter_list|(
name|ServiceReference
name|reference
parameter_list|)
block|{
name|int
name|rank
init|=
literal|0
decl_stmt|;
name|Object
name|property
init|=
name|reference
operator|.
name|getProperty
argument_list|(
name|Constants
operator|.
name|SERVICE_RANKING
argument_list|)
decl_stmt|;
if|if
condition|(
name|property
operator|instanceof
name|Integer
condition|)
block|{
name|rank
operator|=
operator|(
name|Integer
operator|)
name|property
expr_stmt|;
block|}
name|Object
name|service
init|=
name|bundleContext
operator|.
name|getService
argument_list|(
name|reference
argument_list|)
decl_stmt|;
name|ServiceLoader
operator|.
name|addService
argument_list|(
name|reference
argument_list|,
name|service
argument_list|,
name|rank
argument_list|)
expr_stmt|;
return|return
name|service
return|;
block|}
specifier|public
name|void
name|modifiedService
parameter_list|(
name|ServiceReference
name|reference
parameter_list|,
name|Object
name|service
parameter_list|)
block|{     }
specifier|public
name|void
name|removedService
parameter_list|(
name|ServiceReference
name|reference
parameter_list|,
name|Object
name|service
parameter_list|)
block|{
name|ServiceLoader
operator|.
name|removeService
argument_list|(
name|reference
argument_list|)
expr_stmt|;
name|bundleContext
operator|.
name|ungetService
argument_list|(
name|reference
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

