begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|config
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|imageio
operator|.
name|spi
operator|.
name|ServiceRegistry
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|JAXBException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|DocumentBuilder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Constructor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|InvocationTargetException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Paths
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|concurrent
operator|.
name|ConfigurableThreadPoolExecutor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|concurrent
operator|.
name|SimpleThreadPoolExecutor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|detect
operator|.
name|CompositeDetector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|detect
operator|.
name|CompositeEncodingDetector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|detect
operator|.
name|DefaultDetector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|detect
operator|.
name|DefaultEncodingDetector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|detect
operator|.
name|Detector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|detect
operator|.
name|EncodingDetector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|exception
operator|.
name|TikaConfigException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|exception
operator|.
name|TikaException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|language
operator|.
name|translate
operator|.
name|DefaultTranslator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|language
operator|.
name|translate
operator|.
name|Translator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|mime
operator|.
name|MediaType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|mime
operator|.
name|MediaTypeRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|mime
operator|.
name|MimeTypeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|mime
operator|.
name|MimeTypes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|mime
operator|.
name|MimeTypesFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|AbstractEncodingDetectorParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|AutoDetectParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|CompositeParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|DefaultParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|ParseContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|Parser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|ParserDecorator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|utils
operator|.
name|AnnotationUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|utils
operator|.
name|XMLReaderUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|NodeList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_comment
comment|/**  * Parse xml config file.  */
end_comment

begin_class
specifier|public
class|class
name|TikaConfig
block|{
specifier|private
specifier|static
name|MimeTypes
name|getDefaultMimeTypes
parameter_list|(
name|ClassLoader
name|loader
parameter_list|)
block|{
return|return
name|MimeTypes
operator|.
name|getDefaultMimeTypes
argument_list|(
name|loader
argument_list|)
return|;
block|}
specifier|protected
specifier|static
name|CompositeDetector
name|getDefaultDetector
parameter_list|(
name|MimeTypes
name|types
parameter_list|,
name|ServiceLoader
name|loader
parameter_list|)
block|{
return|return
operator|new
name|DefaultDetector
argument_list|(
name|types
argument_list|,
name|loader
argument_list|)
return|;
block|}
specifier|protected
specifier|static
name|CompositeEncodingDetector
name|getDefaultEncodingDetector
parameter_list|(
name|ServiceLoader
name|loader
parameter_list|)
block|{
return|return
operator|new
name|DefaultEncodingDetector
argument_list|(
name|loader
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|CompositeParser
name|getDefaultParser
parameter_list|(
name|MimeTypes
name|types
parameter_list|,
name|ServiceLoader
name|loader
parameter_list|,
name|EncodingDetector
name|encodingDetector
parameter_list|)
block|{
return|return
operator|new
name|DefaultParser
argument_list|(
name|types
operator|.
name|getMediaTypeRegistry
argument_list|()
argument_list|,
name|loader
argument_list|,
name|encodingDetector
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|Translator
name|getDefaultTranslator
parameter_list|(
name|ServiceLoader
name|loader
parameter_list|)
block|{
return|return
operator|new
name|DefaultTranslator
argument_list|(
name|loader
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|ConfigurableThreadPoolExecutor
name|getDefaultExecutorService
parameter_list|()
block|{
return|return
operator|new
name|SimpleThreadPoolExecutor
argument_list|()
return|;
block|}
comment|//use this to look for unneeded instantiations of TikaConfig
specifier|protected
specifier|static
name|AtomicInteger
name|TIMES_INSTANTIATED
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|ServiceLoader
name|serviceLoader
decl_stmt|;
specifier|private
specifier|final
name|CompositeParser
name|parser
decl_stmt|;
specifier|private
specifier|final
name|CompositeDetector
name|detector
decl_stmt|;
specifier|private
specifier|final
name|Translator
name|translator
decl_stmt|;
specifier|private
specifier|final
name|MimeTypes
name|mimeTypes
decl_stmt|;
specifier|private
specifier|final
name|ExecutorService
name|executorService
decl_stmt|;
specifier|private
specifier|final
name|EncodingDetector
name|encodingDetector
decl_stmt|;
specifier|public
name|TikaConfig
parameter_list|(
name|String
name|file
parameter_list|)
throws|throws
name|TikaException
throws|,
name|IOException
throws|,
name|SAXException
block|{
name|this
argument_list|(
name|Paths
operator|.
name|get
argument_list|(
name|file
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|TikaConfig
parameter_list|(
name|Path
name|path
parameter_list|)
throws|throws
name|TikaException
throws|,
name|IOException
throws|,
name|SAXException
block|{
name|this
argument_list|(
name|path
argument_list|,
operator|new
name|ServiceLoader
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|TikaConfig
parameter_list|(
name|Path
name|path
parameter_list|,
name|ServiceLoader
name|loader
parameter_list|)
throws|throws
name|TikaException
throws|,
name|IOException
throws|,
name|SAXException
block|{
name|this
argument_list|(
name|XMLReaderUtils
operator|.
name|getDocumentBuilder
argument_list|()
operator|.
name|parse
argument_list|(
name|path
operator|.
name|toFile
argument_list|()
argument_list|)
argument_list|,
name|loader
argument_list|)
expr_stmt|;
block|}
specifier|public
name|TikaConfig
parameter_list|(
name|File
name|file
parameter_list|)
throws|throws
name|TikaException
throws|,
name|IOException
throws|,
name|SAXException
block|{
name|this
argument_list|(
name|file
argument_list|,
operator|new
name|ServiceLoader
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|TikaConfig
parameter_list|(
name|File
name|file
parameter_list|,
name|ServiceLoader
name|loader
parameter_list|)
throws|throws
name|TikaException
throws|,
name|IOException
throws|,
name|SAXException
block|{
name|this
argument_list|(
name|XMLReaderUtils
operator|.
name|getDocumentBuilder
argument_list|()
operator|.
name|parse
argument_list|(
name|file
argument_list|)
argument_list|,
name|loader
argument_list|)
expr_stmt|;
block|}
specifier|public
name|TikaConfig
parameter_list|(
name|URL
name|url
parameter_list|)
throws|throws
name|TikaException
throws|,
name|IOException
throws|,
name|SAXException
block|{
name|this
argument_list|(
name|url
argument_list|,
name|ServiceLoader
operator|.
name|getContextClassLoader
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|TikaConfig
parameter_list|(
name|URL
name|url
parameter_list|,
name|ClassLoader
name|loader
parameter_list|)
throws|throws
name|TikaException
throws|,
name|IOException
throws|,
name|SAXException
block|{
name|this
argument_list|(
name|XMLReaderUtils
operator|.
name|getDocumentBuilder
argument_list|()
operator|.
name|parse
argument_list|(
name|url
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|getDocumentElement
argument_list|()
argument_list|,
name|loader
argument_list|)
expr_stmt|;
block|}
specifier|public
name|TikaConfig
parameter_list|(
name|URL
name|url
parameter_list|,
name|ServiceLoader
name|loader
parameter_list|)
throws|throws
name|TikaException
throws|,
name|IOException
throws|,
name|SAXException
block|{
name|this
argument_list|(
name|XMLReaderUtils
operator|.
name|getDocumentBuilder
argument_list|()
operator|.
name|parse
argument_list|(
name|url
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|getDocumentElement
argument_list|()
argument_list|,
name|loader
argument_list|)
expr_stmt|;
block|}
specifier|public
name|TikaConfig
parameter_list|(
name|InputStream
name|stream
parameter_list|)
throws|throws
name|TikaException
throws|,
name|IOException
throws|,
name|SAXException
block|{
name|this
argument_list|(
name|XMLReaderUtils
operator|.
name|getDocumentBuilder
argument_list|()
operator|.
name|parse
argument_list|(
name|stream
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|TikaConfig
parameter_list|(
name|Document
name|document
parameter_list|)
throws|throws
name|TikaException
throws|,
name|IOException
block|{
name|this
argument_list|(
name|document
operator|.
name|getDocumentElement
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|TikaConfig
parameter_list|(
name|Document
name|document
parameter_list|,
name|ServiceLoader
name|loader
parameter_list|)
throws|throws
name|TikaException
throws|,
name|IOException
block|{
name|this
argument_list|(
name|document
operator|.
name|getDocumentElement
argument_list|()
argument_list|,
name|loader
argument_list|)
expr_stmt|;
block|}
specifier|public
name|TikaConfig
parameter_list|(
name|Element
name|element
parameter_list|)
throws|throws
name|TikaException
throws|,
name|IOException
block|{
name|this
argument_list|(
name|element
argument_list|,
name|serviceLoaderFromDomElement
argument_list|(
name|element
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|TikaConfig
parameter_list|(
name|Element
name|element
parameter_list|,
name|ClassLoader
name|loader
parameter_list|)
throws|throws
name|TikaException
throws|,
name|IOException
block|{
name|this
argument_list|(
name|element
argument_list|,
name|serviceLoaderFromDomElement
argument_list|(
name|element
argument_list|,
name|loader
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|TikaConfig
parameter_list|(
name|Element
name|element
parameter_list|,
name|ServiceLoader
name|loader
parameter_list|)
throws|throws
name|TikaException
throws|,
name|IOException
block|{
name|DetectorXmlLoader
name|detectorLoader
init|=
operator|new
name|DetectorXmlLoader
argument_list|()
decl_stmt|;
name|TranslatorXmlLoader
name|translatorLoader
init|=
operator|new
name|TranslatorXmlLoader
argument_list|()
decl_stmt|;
name|ExecutorServiceXmlLoader
name|executorLoader
init|=
operator|new
name|ExecutorServiceXmlLoader
argument_list|()
decl_stmt|;
name|EncodingDetectorXmlLoader
name|encodingDetectorXmlLoader
init|=
operator|new
name|EncodingDetectorXmlLoader
argument_list|()
decl_stmt|;
name|this
operator|.
name|mimeTypes
operator|=
name|typesFromDomElement
argument_list|(
name|element
argument_list|)
expr_stmt|;
name|this
operator|.
name|detector
operator|=
name|detectorLoader
operator|.
name|loadOverall
argument_list|(
name|element
argument_list|,
name|mimeTypes
argument_list|,
name|loader
argument_list|)
expr_stmt|;
name|this
operator|.
name|encodingDetector
operator|=
name|encodingDetectorXmlLoader
operator|.
name|loadOverall
argument_list|(
name|element
argument_list|,
name|mimeTypes
argument_list|,
name|loader
argument_list|)
expr_stmt|;
name|ParserXmlLoader
name|parserLoader
init|=
operator|new
name|ParserXmlLoader
argument_list|(
name|encodingDetector
argument_list|)
decl_stmt|;
name|this
operator|.
name|parser
operator|=
name|parserLoader
operator|.
name|loadOverall
argument_list|(
name|element
argument_list|,
name|mimeTypes
argument_list|,
name|loader
argument_list|)
expr_stmt|;
name|this
operator|.
name|translator
operator|=
name|translatorLoader
operator|.
name|loadOverall
argument_list|(
name|element
argument_list|,
name|mimeTypes
argument_list|,
name|loader
argument_list|)
expr_stmt|;
name|this
operator|.
name|executorService
operator|=
name|executorLoader
operator|.
name|loadOverall
argument_list|(
name|element
argument_list|,
name|mimeTypes
argument_list|,
name|loader
argument_list|)
expr_stmt|;
name|this
operator|.
name|serviceLoader
operator|=
name|loader
expr_stmt|;
name|TIMES_INSTANTIATED
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
comment|/**      * Creates a Tika configuration from the built-in media type rules      * and all the {@link Parser} implementations available through the      * {@link ServiceRegistry service provider mechanism} in the given      * class loader.      *      * @since Apache Tika 0.8      * @param loader the class loader through which parser implementations      *               are loaded, or<code>null</code> for no parsers      * @throws MimeTypeException if the built-in media type rules are broken      * @throws IOException  if the built-in media type rules can not be read      */
specifier|public
name|TikaConfig
parameter_list|(
name|ClassLoader
name|loader
parameter_list|)
throws|throws
name|MimeTypeException
throws|,
name|IOException
block|{
name|this
operator|.
name|serviceLoader
operator|=
operator|new
name|ServiceLoader
argument_list|(
name|loader
argument_list|)
expr_stmt|;
name|this
operator|.
name|mimeTypes
operator|=
name|getDefaultMimeTypes
argument_list|(
name|loader
argument_list|)
expr_stmt|;
name|this
operator|.
name|detector
operator|=
name|getDefaultDetector
argument_list|(
name|mimeTypes
argument_list|,
name|serviceLoader
argument_list|)
expr_stmt|;
name|this
operator|.
name|encodingDetector
operator|=
name|getDefaultEncodingDetector
argument_list|(
name|serviceLoader
argument_list|)
expr_stmt|;
name|this
operator|.
name|parser
operator|=
name|getDefaultParser
argument_list|(
name|mimeTypes
argument_list|,
name|serviceLoader
argument_list|,
name|encodingDetector
argument_list|)
expr_stmt|;
name|this
operator|.
name|translator
operator|=
name|getDefaultTranslator
argument_list|(
name|serviceLoader
argument_list|)
expr_stmt|;
name|this
operator|.
name|executorService
operator|=
name|getDefaultExecutorService
argument_list|()
expr_stmt|;
name|TIMES_INSTANTIATED
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
comment|/**      * Creates a default Tika configuration.      * First checks whether an XML config file is specified, either in      *<ol>      *<li>System property "tika.config", or</li>      *<li>Environment variable TIKA_CONFIG</li>      *</ol>      *<p>If one of these have a value, try to resolve it relative to file      * system or classpath.</p>      *<p>If XML config is not specified, initialize from the built-in media      * type rules and all the {@link Parser} implementations available through      * the {@link ServiceRegistry service provider mechanism} in the context      * class loader of the current thread.</p>      *      * @throws IOException if the configuration can not be read      * @throws TikaException if problem with MimeTypes or parsing XML config      */
specifier|public
name|TikaConfig
parameter_list|()
throws|throws
name|TikaException
throws|,
name|IOException
block|{
name|String
name|config
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"tika.config"
argument_list|)
decl_stmt|;
if|if
condition|(
name|config
operator|==
literal|null
condition|)
block|{
name|config
operator|=
name|System
operator|.
name|getenv
argument_list|(
literal|"TIKA_CONFIG"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|config
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|serviceLoader
operator|=
operator|new
name|ServiceLoader
argument_list|()
expr_stmt|;
name|this
operator|.
name|mimeTypes
operator|=
name|getDefaultMimeTypes
argument_list|(
name|ServiceLoader
operator|.
name|getContextClassLoader
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|encodingDetector
operator|=
name|getDefaultEncodingDetector
argument_list|(
name|serviceLoader
argument_list|)
expr_stmt|;
name|this
operator|.
name|parser
operator|=
name|getDefaultParser
argument_list|(
name|mimeTypes
argument_list|,
name|serviceLoader
argument_list|,
name|encodingDetector
argument_list|)
expr_stmt|;
name|this
operator|.
name|detector
operator|=
name|getDefaultDetector
argument_list|(
name|mimeTypes
argument_list|,
name|serviceLoader
argument_list|)
expr_stmt|;
name|this
operator|.
name|translator
operator|=
name|getDefaultTranslator
argument_list|(
name|serviceLoader
argument_list|)
expr_stmt|;
name|this
operator|.
name|executorService
operator|=
name|getDefaultExecutorService
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|ServiceLoader
name|tmpServiceLoader
init|=
operator|new
name|ServiceLoader
argument_list|()
decl_stmt|;
try|try
init|(
name|InputStream
name|stream
init|=
name|getConfigInputStream
argument_list|(
name|config
argument_list|,
name|tmpServiceLoader
argument_list|)
init|)
block|{
name|Element
name|element
init|=
name|XMLReaderUtils
operator|.
name|getDocumentBuilder
argument_list|()
operator|.
name|parse
argument_list|(
name|stream
argument_list|)
operator|.
name|getDocumentElement
argument_list|()
decl_stmt|;
name|serviceLoader
operator|=
name|serviceLoaderFromDomElement
argument_list|(
name|element
argument_list|,
name|tmpServiceLoader
operator|.
name|getLoader
argument_list|()
argument_list|)
expr_stmt|;
name|DetectorXmlLoader
name|detectorLoader
init|=
operator|new
name|DetectorXmlLoader
argument_list|()
decl_stmt|;
name|EncodingDetectorXmlLoader
name|encodingDetectorLoader
init|=
operator|new
name|EncodingDetectorXmlLoader
argument_list|()
decl_stmt|;
name|TranslatorXmlLoader
name|translatorLoader
init|=
operator|new
name|TranslatorXmlLoader
argument_list|()
decl_stmt|;
name|ExecutorServiceXmlLoader
name|executorLoader
init|=
operator|new
name|ExecutorServiceXmlLoader
argument_list|()
decl_stmt|;
name|this
operator|.
name|mimeTypes
operator|=
name|typesFromDomElement
argument_list|(
name|element
argument_list|)
expr_stmt|;
name|this
operator|.
name|encodingDetector
operator|=
name|encodingDetectorLoader
operator|.
name|loadOverall
argument_list|(
name|element
argument_list|,
name|mimeTypes
argument_list|,
name|serviceLoader
argument_list|)
expr_stmt|;
name|ParserXmlLoader
name|parserLoader
init|=
operator|new
name|ParserXmlLoader
argument_list|(
name|encodingDetector
argument_list|)
decl_stmt|;
name|this
operator|.
name|parser
operator|=
name|parserLoader
operator|.
name|loadOverall
argument_list|(
name|element
argument_list|,
name|mimeTypes
argument_list|,
name|serviceLoader
argument_list|)
expr_stmt|;
name|this
operator|.
name|detector
operator|=
name|detectorLoader
operator|.
name|loadOverall
argument_list|(
name|element
argument_list|,
name|mimeTypes
argument_list|,
name|serviceLoader
argument_list|)
expr_stmt|;
name|this
operator|.
name|translator
operator|=
name|translatorLoader
operator|.
name|loadOverall
argument_list|(
name|element
argument_list|,
name|mimeTypes
argument_list|,
name|serviceLoader
argument_list|)
expr_stmt|;
name|this
operator|.
name|executorService
operator|=
name|executorLoader
operator|.
name|loadOverall
argument_list|(
name|element
argument_list|,
name|mimeTypes
argument_list|,
name|serviceLoader
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SAXException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|TikaException
argument_list|(
literal|"Specified Tika configuration has syntax errors: "
operator|+
name|config
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
name|TIMES_INSTANTIATED
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
specifier|private
specifier|static
name|InputStream
name|getConfigInputStream
parameter_list|(
name|String
name|config
parameter_list|,
name|ServiceLoader
name|serviceLoader
parameter_list|)
throws|throws
name|TikaException
throws|,
name|IOException
block|{
name|InputStream
name|stream
init|=
literal|null
decl_stmt|;
try|try
block|{
name|stream
operator|=
operator|new
name|URL
argument_list|(
name|config
argument_list|)
operator|.
name|openStream
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ignore
parameter_list|)
block|{         }
if|if
condition|(
name|stream
operator|==
literal|null
condition|)
block|{
name|stream
operator|=
name|serviceLoader
operator|.
name|getResourceAsStream
argument_list|(
name|config
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|stream
operator|==
literal|null
condition|)
block|{
name|Path
name|file
init|=
name|Paths
operator|.
name|get
argument_list|(
name|config
argument_list|)
decl_stmt|;
if|if
condition|(
name|Files
operator|.
name|isRegularFile
argument_list|(
name|file
argument_list|)
condition|)
block|{
name|stream
operator|=
name|Files
operator|.
name|newInputStream
argument_list|(
name|file
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|stream
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|TikaException
argument_list|(
literal|"Specified Tika configuration not found: "
operator|+
name|config
argument_list|)
throw|;
block|}
return|return
name|stream
return|;
block|}
specifier|private
specifier|static
name|String
name|getText
parameter_list|(
name|Node
name|node
parameter_list|)
block|{
if|if
condition|(
name|node
operator|.
name|getNodeType
argument_list|()
operator|==
name|Node
operator|.
name|TEXT_NODE
condition|)
block|{
return|return
name|node
operator|.
name|getNodeValue
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|node
operator|.
name|getNodeType
argument_list|()
operator|==
name|Node
operator|.
name|ELEMENT_NODE
condition|)
block|{
name|StringBuilder
name|builder
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|NodeList
name|list
init|=
name|node
operator|.
name|getChildNodes
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|list
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|builder
operator|.
name|append
argument_list|(
name|getText
argument_list|(
name|list
operator|.
name|item
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|toString
argument_list|()
return|;
block|}
else|else
block|{
return|return
literal|""
return|;
block|}
block|}
comment|/**      * @deprecated Use the {@link #getParser()} method instead      */
specifier|public
name|Parser
name|getParser
parameter_list|(
name|MediaType
name|mimeType
parameter_list|)
block|{
return|return
name|parser
operator|.
name|getParsers
argument_list|()
operator|.
name|get
argument_list|(
name|mimeType
argument_list|)
return|;
block|}
comment|/**      * Returns the configured parser instance.      *      * @return configured parser      */
specifier|public
name|Parser
name|getParser
parameter_list|()
block|{
return|return
name|parser
return|;
block|}
comment|/**      * Returns the configured detector instance.      *      * @return configured detector      */
specifier|public
name|Detector
name|getDetector
parameter_list|()
block|{
return|return
name|detector
return|;
block|}
comment|/**      * Returns the configured encoding detector instance      * @return configured encoding detector      */
specifier|public
name|EncodingDetector
name|getEncodingDetector
parameter_list|()
block|{
return|return
name|encodingDetector
return|;
block|}
comment|/**      * Returns the configured translator instance.      *      * @return configured translator      */
specifier|public
name|Translator
name|getTranslator
parameter_list|()
block|{
return|return
name|translator
return|;
block|}
specifier|public
name|ExecutorService
name|getExecutorService
parameter_list|()
block|{
return|return
name|executorService
return|;
block|}
specifier|public
name|MimeTypes
name|getMimeRepository
parameter_list|()
block|{
return|return
name|mimeTypes
return|;
block|}
specifier|public
name|MediaTypeRegistry
name|getMediaTypeRegistry
parameter_list|()
block|{
return|return
name|mimeTypes
operator|.
name|getMediaTypeRegistry
argument_list|()
return|;
block|}
specifier|public
name|ServiceLoader
name|getServiceLoader
parameter_list|()
block|{
return|return
name|serviceLoader
return|;
block|}
comment|/**      * Provides a default configuration (TikaConfig).  Currently creates a      * new instance each time it's called; we may be able to have it      * return a shared instance once it is completely immutable.      *      * @return default configuration      */
specifier|public
specifier|static
name|TikaConfig
name|getDefaultConfig
parameter_list|()
block|{
try|try
block|{
return|return
operator|new
name|TikaConfig
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Unable to read default configuration"
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|TikaException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Unable to access default configuration"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|static
name|Element
name|getChild
parameter_list|(
name|Element
name|element
parameter_list|,
name|String
name|name
parameter_list|)
block|{
name|Node
name|child
init|=
name|element
operator|.
name|getFirstChild
argument_list|()
decl_stmt|;
while|while
condition|(
name|child
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|child
operator|.
name|getNodeType
argument_list|()
operator|==
name|Node
operator|.
name|ELEMENT_NODE
operator|&&
name|name
operator|.
name|equals
argument_list|(
name|child
operator|.
name|getNodeName
argument_list|()
argument_list|)
condition|)
block|{
return|return
operator|(
name|Element
operator|)
name|child
return|;
block|}
name|child
operator|=
name|child
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
specifier|private
specifier|static
name|List
argument_list|<
name|Element
argument_list|>
name|getTopLevelElementChildren
parameter_list|(
name|Element
name|element
parameter_list|,
name|String
name|parentName
parameter_list|,
name|String
name|childrenName
parameter_list|)
throws|throws
name|TikaException
block|{
name|Node
name|parentNode
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|parentName
operator|!=
literal|null
condition|)
block|{
comment|// Should be only zero or one<parsers> /<detectors> etc tag
name|NodeList
name|nodes
init|=
name|element
operator|.
name|getElementsByTagName
argument_list|(
name|parentName
argument_list|)
decl_stmt|;
if|if
condition|(
name|nodes
operator|.
name|getLength
argument_list|()
operator|>
literal|1
condition|)
block|{
throw|throw
operator|new
name|TikaException
argument_list|(
literal|"Properties may not contain multiple "
operator|+
name|parentName
operator|+
literal|" entries"
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
name|nodes
operator|.
name|getLength
argument_list|()
operator|==
literal|1
condition|)
block|{
name|parentNode
operator|=
name|nodes
operator|.
name|item
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// All children directly on the master element
name|parentNode
operator|=
name|element
expr_stmt|;
block|}
if|if
condition|(
name|parentNode
operator|!=
literal|null
condition|)
block|{
comment|// Find only the direct child parser/detector objects
name|NodeList
name|nodes
init|=
name|parentNode
operator|.
name|getChildNodes
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Element
argument_list|>
name|elements
init|=
operator|new
name|ArrayList
argument_list|<
name|Element
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nodes
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Node
name|node
init|=
name|nodes
operator|.
name|item
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|node
operator|instanceof
name|Element
condition|)
block|{
name|Element
name|nodeE
init|=
operator|(
name|Element
operator|)
name|node
decl_stmt|;
if|if
condition|(
name|childrenName
operator|.
name|equals
argument_list|(
name|nodeE
operator|.
name|getTagName
argument_list|()
argument_list|)
condition|)
block|{
name|elements
operator|.
name|add
argument_list|(
name|nodeE
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|elements
return|;
block|}
else|else
block|{
comment|// No elements of this type
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
block|}
specifier|private
specifier|static
name|MimeTypes
name|typesFromDomElement
parameter_list|(
name|Element
name|element
parameter_list|)
throws|throws
name|TikaException
throws|,
name|IOException
block|{
name|Element
name|mtr
init|=
name|getChild
argument_list|(
name|element
argument_list|,
literal|"mimeTypeRepository"
argument_list|)
decl_stmt|;
if|if
condition|(
name|mtr
operator|!=
literal|null
operator|&&
name|mtr
operator|.
name|hasAttribute
argument_list|(
literal|"resource"
argument_list|)
condition|)
block|{
return|return
name|MimeTypesFactory
operator|.
name|create
argument_list|(
name|mtr
operator|.
name|getAttribute
argument_list|(
literal|"resource"
argument_list|)
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|getDefaultMimeTypes
argument_list|(
literal|null
argument_list|)
return|;
block|}
block|}
specifier|private
specifier|static
name|Set
argument_list|<
name|MediaType
argument_list|>
name|mediaTypesListFromDomElement
parameter_list|(
name|Element
name|node
parameter_list|,
name|String
name|tag
parameter_list|)
throws|throws
name|TikaException
throws|,
name|IOException
block|{
name|Set
argument_list|<
name|MediaType
argument_list|>
name|types
init|=
literal|null
decl_stmt|;
name|NodeList
name|children
init|=
name|node
operator|.
name|getChildNodes
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|children
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Node
name|cNode
init|=
name|children
operator|.
name|item
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|cNode
operator|instanceof
name|Element
condition|)
block|{
name|Element
name|cElement
init|=
operator|(
name|Element
operator|)
name|cNode
decl_stmt|;
if|if
condition|(
name|tag
operator|.
name|equals
argument_list|(
name|cElement
operator|.
name|getTagName
argument_list|()
argument_list|)
condition|)
block|{
name|String
name|mime
init|=
name|getText
argument_list|(
name|cElement
argument_list|)
decl_stmt|;
name|MediaType
name|type
init|=
name|MediaType
operator|.
name|parse
argument_list|(
name|mime
argument_list|)
decl_stmt|;
if|if
condition|(
name|type
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|types
operator|==
literal|null
condition|)
name|types
operator|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
expr_stmt|;
name|types
operator|.
name|add
argument_list|(
name|type
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|TikaException
argument_list|(
literal|"Invalid media type name: "
operator|+
name|mime
argument_list|)
throw|;
block|}
block|}
block|}
block|}
if|if
condition|(
name|types
operator|!=
literal|null
condition|)
return|return
name|types
return|;
return|return
name|Collections
operator|.
name|emptySet
argument_list|()
return|;
block|}
specifier|private
specifier|static
name|ServiceLoader
name|serviceLoaderFromDomElement
parameter_list|(
name|Element
name|element
parameter_list|,
name|ClassLoader
name|loader
parameter_list|)
throws|throws
name|TikaConfigException
block|{
name|Element
name|serviceLoaderElement
init|=
name|getChild
argument_list|(
name|element
argument_list|,
literal|"service-loader"
argument_list|)
decl_stmt|;
name|ServiceLoader
name|serviceLoader
decl_stmt|;
if|if
condition|(
name|serviceLoaderElement
operator|!=
literal|null
condition|)
block|{
name|boolean
name|dynamic
init|=
name|Boolean
operator|.
name|parseBoolean
argument_list|(
name|serviceLoaderElement
operator|.
name|getAttribute
argument_list|(
literal|"dynamic"
argument_list|)
argument_list|)
decl_stmt|;
name|LoadErrorHandler
name|loadErrorHandler
init|=
name|LoadErrorHandler
operator|.
name|IGNORE
decl_stmt|;
name|String
name|loadErrorHandleConfig
init|=
name|serviceLoaderElement
operator|.
name|getAttribute
argument_list|(
literal|"loadErrorHandler"
argument_list|)
decl_stmt|;
if|if
condition|(
name|LoadErrorHandler
operator|.
name|WARN
operator|.
name|toString
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
name|loadErrorHandleConfig
argument_list|)
condition|)
block|{
name|loadErrorHandler
operator|=
name|LoadErrorHandler
operator|.
name|WARN
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|LoadErrorHandler
operator|.
name|THROW
operator|.
name|toString
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
name|loadErrorHandleConfig
argument_list|)
condition|)
block|{
name|loadErrorHandler
operator|=
name|LoadErrorHandler
operator|.
name|THROW
expr_stmt|;
block|}
name|InitializableProblemHandler
name|initializableProblemHandler
init|=
name|getInitializableProblemHandler
argument_list|(
name|serviceLoaderElement
operator|.
name|getAttribute
argument_list|(
literal|"initializableProblemHandler"
argument_list|)
argument_list|)
decl_stmt|;
name|serviceLoader
operator|=
operator|new
name|ServiceLoader
argument_list|(
name|loader
argument_list|,
name|loadErrorHandler
argument_list|,
name|initializableProblemHandler
argument_list|,
name|dynamic
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|loader
operator|!=
literal|null
condition|)
block|{
name|serviceLoader
operator|=
operator|new
name|ServiceLoader
argument_list|(
name|loader
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|serviceLoader
operator|=
operator|new
name|ServiceLoader
argument_list|()
expr_stmt|;
block|}
return|return
name|serviceLoader
return|;
block|}
specifier|private
specifier|static
name|InitializableProblemHandler
name|getInitializableProblemHandler
parameter_list|(
name|String
name|initializableProblemHandler
parameter_list|)
throws|throws
name|TikaConfigException
block|{
if|if
condition|(
name|initializableProblemHandler
operator|==
literal|null
operator|||
name|initializableProblemHandler
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
name|InitializableProblemHandler
operator|.
name|DEFAULT
return|;
block|}
if|if
condition|(
name|InitializableProblemHandler
operator|.
name|IGNORE
operator|.
name|toString
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
name|initializableProblemHandler
argument_list|)
condition|)
block|{
return|return
name|InitializableProblemHandler
operator|.
name|IGNORE
return|;
block|}
elseif|else
if|if
condition|(
name|InitializableProblemHandler
operator|.
name|INFO
operator|.
name|toString
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
name|initializableProblemHandler
argument_list|)
condition|)
block|{
return|return
name|InitializableProblemHandler
operator|.
name|INFO
return|;
block|}
elseif|else
if|if
condition|(
name|InitializableProblemHandler
operator|.
name|WARN
operator|.
name|toString
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
name|initializableProblemHandler
argument_list|)
condition|)
block|{
return|return
name|InitializableProblemHandler
operator|.
name|WARN
return|;
block|}
elseif|else
if|if
condition|(
name|InitializableProblemHandler
operator|.
name|THROW
operator|.
name|toString
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
name|initializableProblemHandler
argument_list|)
condition|)
block|{
return|return
name|InitializableProblemHandler
operator|.
name|THROW
return|;
block|}
throw|throw
operator|new
name|TikaConfigException
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|US
argument_list|,
literal|"Couldn't parse non-null '%s'. Must be one of 'ignore', 'info', 'warn' or 'throw'"
argument_list|,
name|initializableProblemHandler
argument_list|)
argument_list|)
throw|;
block|}
specifier|private
specifier|static
specifier|abstract
class|class
name|XmlLoader
parameter_list|<
name|CT
parameter_list|,
name|T
parameter_list|>
block|{
specifier|protected
specifier|static
specifier|final
name|String
name|PARAMS_TAG_NAME
init|=
literal|"params"
decl_stmt|;
specifier|abstract
name|boolean
name|supportsComposite
parameter_list|()
function_decl|;
specifier|abstract
name|String
name|getParentTagName
parameter_list|()
function_decl|;
comment|// eg parsers
specifier|abstract
name|String
name|getLoaderTagName
parameter_list|()
function_decl|;
comment|// eg parser
specifier|abstract
name|Class
argument_list|<
name|?
extends|extends
name|T
argument_list|>
name|getLoaderClass
parameter_list|()
function_decl|;
comment|// Generics workaround
specifier|abstract
name|boolean
name|isComposite
parameter_list|(
name|T
name|loaded
parameter_list|)
function_decl|;
specifier|abstract
name|boolean
name|isComposite
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|T
argument_list|>
name|loadedClass
parameter_list|)
function_decl|;
specifier|abstract
name|T
name|preLoadOne
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|T
argument_list|>
name|loadedClass
parameter_list|,
name|String
name|classname
parameter_list|,
name|MimeTypes
name|mimeTypes
parameter_list|)
throws|throws
name|TikaException
function_decl|;
specifier|abstract
name|CT
name|createDefault
parameter_list|(
name|MimeTypes
name|mimeTypes
parameter_list|,
name|ServiceLoader
name|loader
parameter_list|)
function_decl|;
specifier|abstract
name|CT
name|createComposite
parameter_list|(
name|List
argument_list|<
name|T
argument_list|>
name|loaded
parameter_list|,
name|MimeTypes
name|mimeTypes
parameter_list|,
name|ServiceLoader
name|loader
parameter_list|)
function_decl|;
specifier|abstract
name|T
name|createComposite
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|T
argument_list|>
name|compositeClass
parameter_list|,
name|List
argument_list|<
name|T
argument_list|>
name|children
parameter_list|,
name|Set
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|T
argument_list|>
argument_list|>
name|excludeChildren
parameter_list|,
name|MimeTypes
name|mimeTypes
parameter_list|,
name|ServiceLoader
name|loader
parameter_list|)
throws|throws
name|InvocationTargetException
throws|,
name|IllegalAccessException
throws|,
name|InstantiationException
function_decl|;
specifier|abstract
name|T
name|decorate
parameter_list|(
name|T
name|created
parameter_list|,
name|Element
name|element
parameter_list|)
throws|throws
name|IOException
throws|,
name|TikaException
function_decl|;
comment|// eg explicit mime types
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|CT
name|loadOverall
parameter_list|(
name|Element
name|element
parameter_list|,
name|MimeTypes
name|mimeTypes
parameter_list|,
name|ServiceLoader
name|loader
parameter_list|)
throws|throws
name|TikaException
throws|,
name|IOException
block|{
name|List
argument_list|<
name|T
argument_list|>
name|loaded
init|=
operator|new
name|ArrayList
argument_list|<
name|T
argument_list|>
argument_list|()
decl_stmt|;
comment|// Find the children of the parent tag, if any
for|for
control|(
name|Element
name|le
range|:
name|getTopLevelElementChildren
argument_list|(
name|element
argument_list|,
name|getParentTagName
argument_list|()
argument_list|,
name|getLoaderTagName
argument_list|()
argument_list|)
control|)
block|{
name|T
name|loadedChild
init|=
name|loadOne
argument_list|(
name|le
argument_list|,
name|mimeTypes
argument_list|,
name|loader
argument_list|)
decl_stmt|;
if|if
condition|(
name|loadedChild
operator|!=
literal|null
condition|)
name|loaded
operator|.
name|add
argument_list|(
name|loadedChild
argument_list|)
expr_stmt|;
block|}
comment|// Build the classes, and wrap as needed
if|if
condition|(
name|loaded
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// Nothing defined, create a Default
return|return
name|createDefault
argument_list|(
name|mimeTypes
argument_list|,
name|loader
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|loaded
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
name|T
name|single
init|=
name|loaded
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|isComposite
argument_list|(
name|single
argument_list|)
condition|)
block|{
comment|// Single Composite defined, use that
return|return
operator|(
name|CT
operator|)
name|single
return|;
block|}
block|}
elseif|else
if|if
condition|(
operator|!
name|supportsComposite
argument_list|()
condition|)
block|{
comment|// No composite support, just return the first one
return|return
operator|(
name|CT
operator|)
name|loaded
operator|.
name|get
argument_list|(
literal|0
argument_list|)
return|;
block|}
comment|// Wrap the defined parsers/detectors up in a Composite
return|return
name|createComposite
argument_list|(
name|loaded
argument_list|,
name|mimeTypes
argument_list|,
name|loader
argument_list|)
return|;
block|}
name|T
name|loadOne
parameter_list|(
name|Element
name|element
parameter_list|,
name|MimeTypes
name|mimeTypes
parameter_list|,
name|ServiceLoader
name|loader
parameter_list|)
throws|throws
name|TikaException
throws|,
name|IOException
block|{
name|String
name|name
init|=
name|element
operator|.
name|getAttribute
argument_list|(
literal|"class"
argument_list|)
decl_stmt|;
name|String
name|initProbHandler
init|=
name|element
operator|.
name|getAttribute
argument_list|(
literal|"initializableProblemHandler"
argument_list|)
decl_stmt|;
name|InitializableProblemHandler
name|initializableProblemHandler
decl_stmt|;
if|if
condition|(
name|initProbHandler
operator|==
literal|null
operator|||
name|initProbHandler
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
name|initializableProblemHandler
operator|=
name|loader
operator|.
name|getInitializableProblemHandler
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|initializableProblemHandler
operator|=
name|getInitializableProblemHandler
argument_list|(
name|initProbHandler
argument_list|)
expr_stmt|;
block|}
name|T
name|loaded
init|=
literal|null
decl_stmt|;
try|try
block|{
name|Class
argument_list|<
name|?
extends|extends
name|T
argument_list|>
name|loadedClass
init|=
name|loader
operator|.
name|getServiceClass
argument_list|(
name|getLoaderClass
argument_list|()
argument_list|,
name|name
argument_list|)
decl_stmt|;
comment|// Do pre-load checks and short-circuits
comment|//TODO : allow duplicate instances with different configurations
name|loaded
operator|=
name|preLoadOne
argument_list|(
name|loadedClass
argument_list|,
name|name
argument_list|,
name|mimeTypes
argument_list|)
expr_stmt|;
if|if
condition|(
name|loaded
operator|!=
literal|null
condition|)
return|return
name|loaded
return|;
comment|// Is this a composite or decorated class? If so, support recursion
if|if
condition|(
name|isComposite
argument_list|(
name|loadedClass
argument_list|)
condition|)
block|{
comment|// Get the child objects for it
name|List
argument_list|<
name|T
argument_list|>
name|children
init|=
operator|new
name|ArrayList
argument_list|<
name|T
argument_list|>
argument_list|()
decl_stmt|;
name|NodeList
name|childNodes
init|=
name|element
operator|.
name|getElementsByTagName
argument_list|(
name|getLoaderTagName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|childNodes
operator|.
name|getLength
argument_list|()
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|childNodes
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|T
name|loadedChild
init|=
name|loadOne
argument_list|(
operator|(
name|Element
operator|)
name|childNodes
operator|.
name|item
argument_list|(
name|i
argument_list|)
argument_list|,
name|mimeTypes
argument_list|,
name|loader
argument_list|)
decl_stmt|;
if|if
condition|(
name|loadedChild
operator|!=
literal|null
condition|)
name|children
operator|.
name|add
argument_list|(
name|loadedChild
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Get the list of children to exclude
name|Set
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|T
argument_list|>
argument_list|>
name|excludeChildren
init|=
operator|new
name|HashSet
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|T
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|NodeList
name|excludeChildNodes
init|=
name|element
operator|.
name|getElementsByTagName
argument_list|(
name|getLoaderTagName
argument_list|()
operator|+
literal|"-exclude"
argument_list|)
decl_stmt|;
if|if
condition|(
name|excludeChildNodes
operator|.
name|getLength
argument_list|()
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|excludeChildNodes
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Element
name|excl
init|=
operator|(
name|Element
operator|)
name|excludeChildNodes
operator|.
name|item
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|String
name|exclName
init|=
name|excl
operator|.
name|getAttribute
argument_list|(
literal|"class"
argument_list|)
decl_stmt|;
name|excludeChildren
operator|.
name|add
argument_list|(
name|loader
operator|.
name|getServiceClass
argument_list|(
name|getLoaderClass
argument_list|()
argument_list|,
name|exclName
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Create the Composite
name|loaded
operator|=
name|createComposite
argument_list|(
name|loadedClass
argument_list|,
name|children
argument_list|,
name|excludeChildren
argument_list|,
name|mimeTypes
argument_list|,
name|loader
argument_list|)
expr_stmt|;
comment|// Default constructor fallback
if|if
condition|(
name|loaded
operator|==
literal|null
condition|)
block|{
name|loaded
operator|=
name|newInstance
argument_list|(
name|loadedClass
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// Regular class, create as-is
name|loaded
operator|=
name|newInstance
argument_list|(
name|loadedClass
argument_list|)
expr_stmt|;
comment|// TODO Support arguments, needed for Translators etc
comment|// See the thread "Configuring parsers and translators" for details
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|Param
argument_list|>
name|params
init|=
name|getParams
argument_list|(
name|element
argument_list|)
decl_stmt|;
comment|//Assigning the params to bean fields/setters
name|AnnotationUtils
operator|.
name|assignFieldParams
argument_list|(
name|loaded
argument_list|,
name|params
argument_list|)
expr_stmt|;
if|if
condition|(
name|loaded
operator|instanceof
name|Initializable
condition|)
block|{
operator|(
operator|(
name|Initializable
operator|)
name|loaded
operator|)
operator|.
name|initialize
argument_list|(
name|params
argument_list|)
expr_stmt|;
operator|(
operator|(
name|Initializable
operator|)
name|loaded
operator|)
operator|.
name|checkInitialization
argument_list|(
name|initializableProblemHandler
argument_list|)
expr_stmt|;
block|}
comment|// Have any decoration performed, eg explicit mimetypes
name|loaded
operator|=
name|decorate
argument_list|(
name|loaded
argument_list|,
name|element
argument_list|)
expr_stmt|;
comment|// All done with setup
return|return
name|loaded
return|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
if|if
condition|(
name|loader
operator|.
name|getLoadErrorHandler
argument_list|()
operator|==
name|LoadErrorHandler
operator|.
name|THROW
condition|)
block|{
comment|// Use a different exception signature here
throw|throw
operator|new
name|TikaException
argument_list|(
literal|"Unable to find a "
operator|+
name|getLoaderTagName
argument_list|()
operator|+
literal|" class: "
operator|+
name|name
argument_list|,
name|e
argument_list|)
throw|;
block|}
comment|// Report the problem
name|loader
operator|.
name|getLoadErrorHandler
argument_list|()
operator|.
name|handleLoadError
argument_list|(
name|name
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
catch|catch
parameter_list|(
name|IllegalAccessException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|TikaException
argument_list|(
literal|"Unable to access a "
operator|+
name|getLoaderTagName
argument_list|()
operator|+
literal|" class: "
operator|+
name|name
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|InvocationTargetException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|TikaException
argument_list|(
literal|"Unable to create a "
operator|+
name|getLoaderTagName
argument_list|()
operator|+
literal|" class: "
operator|+
name|name
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|InstantiationException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|TikaException
argument_list|(
literal|"Unable to instantiate a "
operator|+
name|getLoaderTagName
argument_list|()
operator|+
literal|" class: "
operator|+
name|name
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|NoSuchMethodException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|TikaException
argument_list|(
literal|"Unable to find the right constructor for "
operator|+
name|getLoaderTagName
argument_list|()
operator|+
literal|" class: "
operator|+
name|name
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
name|T
name|newInstance
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|T
argument_list|>
name|loadedClass
parameter_list|)
throws|throws
name|IllegalAccessException
throws|,
name|InstantiationException
throws|,
name|NoSuchMethodException
throws|,
name|InvocationTargetException
block|{
return|return
name|loadedClass
operator|.
name|newInstance
argument_list|()
return|;
block|}
comment|/**          * Gets parameters from a given          * @param el xml node which has {@link #PARAMS_TAG_NAME} child          * @return Map of key values read from xml          */
name|Map
argument_list|<
name|String
argument_list|,
name|Param
argument_list|>
name|getParams
parameter_list|(
name|Element
name|el
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Param
argument_list|>
name|params
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Node
name|child
init|=
name|el
operator|.
name|getFirstChild
argument_list|()
init|;
name|child
operator|!=
literal|null
condition|;
name|child
operator|=
name|child
operator|.
name|getNextSibling
argument_list|()
control|)
block|{
if|if
condition|(
name|PARAMS_TAG_NAME
operator|.
name|equals
argument_list|(
name|child
operator|.
name|getNodeName
argument_list|()
argument_list|)
condition|)
block|{
comment|//found the node
if|if
condition|(
name|child
operator|.
name|hasChildNodes
argument_list|()
condition|)
block|{
comment|//it has children
name|NodeList
name|childNodes
init|=
name|child
operator|.
name|getChildNodes
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|childNodes
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Node
name|item
init|=
name|childNodes
operator|.
name|item
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|item
operator|.
name|getNodeType
argument_list|()
operator|==
name|Node
operator|.
name|ELEMENT_NODE
condition|)
block|{
try|try
block|{
name|Param
argument_list|<
name|?
argument_list|>
name|param
init|=
name|Param
operator|.
name|load
argument_list|(
name|item
argument_list|)
decl_stmt|;
name|params
operator|.
name|put
argument_list|(
name|param
operator|.
name|getName
argument_list|()
argument_list|,
name|param
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|JAXBException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
block|}
break|break;
comment|//only the first one is used
block|}
block|}
return|return
name|params
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|ParserXmlLoader
extends|extends
name|XmlLoader
argument_list|<
name|CompositeParser
argument_list|,
name|Parser
argument_list|>
block|{
specifier|private
specifier|final
name|EncodingDetector
name|encodingDetector
decl_stmt|;
name|boolean
name|supportsComposite
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
name|String
name|getParentTagName
parameter_list|()
block|{
return|return
literal|"parsers"
return|;
block|}
name|String
name|getLoaderTagName
parameter_list|()
block|{
return|return
literal|"parser"
return|;
block|}
specifier|private
name|ParserXmlLoader
parameter_list|(
name|EncodingDetector
name|encodingDetector
parameter_list|)
block|{
name|this
operator|.
name|encodingDetector
operator|=
name|encodingDetector
expr_stmt|;
block|}
annotation|@
name|Override
name|Class
argument_list|<
name|?
extends|extends
name|Parser
argument_list|>
name|getLoaderClass
parameter_list|()
block|{
return|return
name|Parser
operator|.
name|class
return|;
block|}
annotation|@
name|Override
name|Parser
name|preLoadOne
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|Parser
argument_list|>
name|loadedClass
parameter_list|,
name|String
name|classname
parameter_list|,
name|MimeTypes
name|mimeTypes
parameter_list|)
throws|throws
name|TikaException
block|{
comment|// Check for classes which can't be set in config
if|if
condition|(
name|AutoDetectParser
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|loadedClass
argument_list|)
condition|)
block|{
comment|// https://issues.apache.org/jira/browse/TIKA-866
throw|throw
operator|new
name|TikaException
argument_list|(
literal|"AutoDetectParser not supported in a<parser>"
operator|+
literal|" configuration element: "
operator|+
name|classname
argument_list|)
throw|;
block|}
comment|// Continue with normal loading
return|return
literal|null
return|;
block|}
annotation|@
name|Override
name|boolean
name|isComposite
parameter_list|(
name|Parser
name|loaded
parameter_list|)
block|{
return|return
name|loaded
operator|instanceof
name|CompositeParser
return|;
block|}
annotation|@
name|Override
name|boolean
name|isComposite
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|Parser
argument_list|>
name|loadedClass
parameter_list|)
block|{
if|if
condition|(
name|CompositeParser
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|loadedClass
argument_list|)
operator|||
name|ParserDecorator
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|loadedClass
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
name|CompositeParser
name|createDefault
parameter_list|(
name|MimeTypes
name|mimeTypes
parameter_list|,
name|ServiceLoader
name|loader
parameter_list|)
block|{
return|return
name|getDefaultParser
argument_list|(
name|mimeTypes
argument_list|,
name|loader
argument_list|,
name|encodingDetector
argument_list|)
return|;
block|}
annotation|@
name|Override
name|CompositeParser
name|createComposite
parameter_list|(
name|List
argument_list|<
name|Parser
argument_list|>
name|parsers
parameter_list|,
name|MimeTypes
name|mimeTypes
parameter_list|,
name|ServiceLoader
name|loader
parameter_list|)
block|{
name|MediaTypeRegistry
name|registry
init|=
name|mimeTypes
operator|.
name|getMediaTypeRegistry
argument_list|()
decl_stmt|;
return|return
operator|new
name|CompositeParser
argument_list|(
name|registry
argument_list|,
name|parsers
argument_list|)
return|;
block|}
annotation|@
name|Override
name|Parser
name|createComposite
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|Parser
argument_list|>
name|parserClass
parameter_list|,
name|List
argument_list|<
name|Parser
argument_list|>
name|childParsers
parameter_list|,
name|Set
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|Parser
argument_list|>
argument_list|>
name|excludeParsers
parameter_list|,
name|MimeTypes
name|mimeTypes
parameter_list|,
name|ServiceLoader
name|loader
parameter_list|)
throws|throws
name|InvocationTargetException
throws|,
name|IllegalAccessException
throws|,
name|InstantiationException
block|{
name|Parser
name|parser
init|=
literal|null
decl_stmt|;
name|Constructor
argument_list|<
name|?
extends|extends
name|Parser
argument_list|>
name|c
init|=
literal|null
decl_stmt|;
name|MediaTypeRegistry
name|registry
init|=
name|mimeTypes
operator|.
name|getMediaTypeRegistry
argument_list|()
decl_stmt|;
comment|// Try the possible default and composite parser constructors
if|if
condition|(
name|parser
operator|==
literal|null
condition|)
block|{
try|try
block|{
name|c
operator|=
name|parserClass
operator|.
name|getConstructor
argument_list|(
name|MediaTypeRegistry
operator|.
name|class
argument_list|,
name|ServiceLoader
operator|.
name|class
argument_list|,
name|Collection
operator|.
name|class
argument_list|,
name|EncodingDetector
operator|.
name|class
argument_list|)
expr_stmt|;
name|parser
operator|=
name|c
operator|.
name|newInstance
argument_list|(
name|registry
argument_list|,
name|loader
argument_list|,
name|excludeParsers
argument_list|,
name|encodingDetector
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchMethodException
name|me
parameter_list|)
block|{}
block|}
if|if
condition|(
name|parser
operator|==
literal|null
condition|)
block|{
try|try
block|{
name|c
operator|=
name|parserClass
operator|.
name|getConstructor
argument_list|(
name|MediaTypeRegistry
operator|.
name|class
argument_list|,
name|ServiceLoader
operator|.
name|class
argument_list|,
name|Collection
operator|.
name|class
argument_list|)
expr_stmt|;
name|parser
operator|=
name|c
operator|.
name|newInstance
argument_list|(
name|registry
argument_list|,
name|loader
argument_list|,
name|excludeParsers
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchMethodException
name|me
parameter_list|)
block|{}
block|}
if|if
condition|(
name|parser
operator|==
literal|null
condition|)
block|{
try|try
block|{
name|c
operator|=
name|parserClass
operator|.
name|getConstructor
argument_list|(
name|MediaTypeRegistry
operator|.
name|class
argument_list|,
name|List
operator|.
name|class
argument_list|,
name|Collection
operator|.
name|class
argument_list|)
expr_stmt|;
name|parser
operator|=
name|c
operator|.
name|newInstance
argument_list|(
name|registry
argument_list|,
name|childParsers
argument_list|,
name|excludeParsers
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchMethodException
name|me
parameter_list|)
block|{}
block|}
if|if
condition|(
name|parser
operator|==
literal|null
condition|)
block|{
try|try
block|{
name|c
operator|=
name|parserClass
operator|.
name|getConstructor
argument_list|(
name|MediaTypeRegistry
operator|.
name|class
argument_list|,
name|List
operator|.
name|class
argument_list|)
expr_stmt|;
name|parser
operator|=
name|c
operator|.
name|newInstance
argument_list|(
name|registry
argument_list|,
name|childParsers
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchMethodException
name|me
parameter_list|)
block|{}
block|}
comment|// Create as a Parser Decorator
if|if
condition|(
name|parser
operator|==
literal|null
operator|&&
name|ParserDecorator
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|parserClass
argument_list|)
condition|)
block|{
try|try
block|{
name|CompositeParser
name|cp
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|childParsers
operator|.
name|size
argument_list|()
operator|==
literal|1
operator|&&
name|excludeParsers
operator|.
name|size
argument_list|()
operator|==
literal|0
operator|&&
name|childParsers
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|instanceof
name|CompositeParser
condition|)
block|{
name|cp
operator|=
operator|(
name|CompositeParser
operator|)
name|childParsers
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|cp
operator|=
operator|new
name|CompositeParser
argument_list|(
name|registry
argument_list|,
name|childParsers
argument_list|,
name|excludeParsers
argument_list|)
expr_stmt|;
block|}
name|c
operator|=
name|parserClass
operator|.
name|getConstructor
argument_list|(
name|Parser
operator|.
name|class
argument_list|)
expr_stmt|;
name|parser
operator|=
name|c
operator|.
name|newInstance
argument_list|(
name|cp
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchMethodException
name|me
parameter_list|)
block|{}
block|}
return|return
name|parser
return|;
block|}
annotation|@
name|Override
name|Parser
name|newInstance
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|Parser
argument_list|>
name|loadedClass
parameter_list|)
throws|throws
name|IllegalAccessException
throws|,
name|InstantiationException
throws|,
name|NoSuchMethodException
throws|,
name|InvocationTargetException
block|{
if|if
condition|(
name|AbstractEncodingDetectorParser
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|loadedClass
argument_list|)
condition|)
block|{
name|Constructor
name|ctor
init|=
name|loadedClass
operator|.
name|getConstructor
argument_list|(
name|EncodingDetector
operator|.
name|class
argument_list|)
decl_stmt|;
return|return
operator|(
name|Parser
operator|)
name|ctor
operator|.
name|newInstance
argument_list|(
name|encodingDetector
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|loadedClass
operator|.
name|newInstance
argument_list|()
return|;
block|}
block|}
annotation|@
name|Override
name|Parser
name|decorate
parameter_list|(
name|Parser
name|created
parameter_list|,
name|Element
name|element
parameter_list|)
throws|throws
name|IOException
throws|,
name|TikaException
block|{
name|Parser
name|parser
init|=
name|created
decl_stmt|;
comment|// Is there an explicit list of mime types for this to handle?
name|Set
argument_list|<
name|MediaType
argument_list|>
name|parserTypes
init|=
name|mediaTypesListFromDomElement
argument_list|(
name|element
argument_list|,
literal|"mime"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|parserTypes
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|parser
operator|=
name|ParserDecorator
operator|.
name|withTypes
argument_list|(
name|parser
argument_list|,
name|parserTypes
argument_list|)
expr_stmt|;
block|}
comment|// Is there an explicit list of mime types this shouldn't handle?
name|Set
argument_list|<
name|MediaType
argument_list|>
name|parserExclTypes
init|=
name|mediaTypesListFromDomElement
argument_list|(
name|element
argument_list|,
literal|"mime-exclude"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|parserExclTypes
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|parser
operator|=
name|ParserDecorator
operator|.
name|withoutTypes
argument_list|(
name|parser
argument_list|,
name|parserExclTypes
argument_list|)
expr_stmt|;
block|}
comment|// All done with decoration
return|return
name|parser
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|DetectorXmlLoader
extends|extends
name|XmlLoader
argument_list|<
name|CompositeDetector
argument_list|,
name|Detector
argument_list|>
block|{
name|boolean
name|supportsComposite
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
name|String
name|getParentTagName
parameter_list|()
block|{
return|return
literal|"detectors"
return|;
block|}
name|String
name|getLoaderTagName
parameter_list|()
block|{
return|return
literal|"detector"
return|;
block|}
annotation|@
name|Override
name|Class
argument_list|<
name|?
extends|extends
name|Detector
argument_list|>
name|getLoaderClass
parameter_list|()
block|{
return|return
name|Detector
operator|.
name|class
return|;
block|}
annotation|@
name|Override
name|Detector
name|preLoadOne
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|Detector
argument_list|>
name|loadedClass
parameter_list|,
name|String
name|classname
parameter_list|,
name|MimeTypes
name|mimeTypes
parameter_list|)
throws|throws
name|TikaException
block|{
comment|// If they asked for the mime types as a detector, give
comment|//  them the one we've already created. TIKA-1708
if|if
condition|(
name|MimeTypes
operator|.
name|class
operator|.
name|equals
argument_list|(
name|loadedClass
argument_list|)
condition|)
block|{
return|return
name|mimeTypes
return|;
block|}
comment|// Continue with normal loading
return|return
literal|null
return|;
block|}
annotation|@
name|Override
name|boolean
name|isComposite
parameter_list|(
name|Detector
name|loaded
parameter_list|)
block|{
return|return
name|loaded
operator|instanceof
name|CompositeDetector
return|;
block|}
annotation|@
name|Override
name|boolean
name|isComposite
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|Detector
argument_list|>
name|loadedClass
parameter_list|)
block|{
return|return
name|CompositeDetector
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|loadedClass
argument_list|)
return|;
block|}
annotation|@
name|Override
name|CompositeDetector
name|createDefault
parameter_list|(
name|MimeTypes
name|mimeTypes
parameter_list|,
name|ServiceLoader
name|loader
parameter_list|)
block|{
return|return
name|getDefaultDetector
argument_list|(
name|mimeTypes
argument_list|,
name|loader
argument_list|)
return|;
block|}
annotation|@
name|Override
name|CompositeDetector
name|createComposite
parameter_list|(
name|List
argument_list|<
name|Detector
argument_list|>
name|detectors
parameter_list|,
name|MimeTypes
name|mimeTypes
parameter_list|,
name|ServiceLoader
name|loader
parameter_list|)
block|{
name|MediaTypeRegistry
name|registry
init|=
name|mimeTypes
operator|.
name|getMediaTypeRegistry
argument_list|()
decl_stmt|;
return|return
operator|new
name|CompositeDetector
argument_list|(
name|registry
argument_list|,
name|detectors
argument_list|)
return|;
block|}
annotation|@
name|Override
name|Detector
name|createComposite
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|Detector
argument_list|>
name|detectorClass
parameter_list|,
name|List
argument_list|<
name|Detector
argument_list|>
name|childDetectors
parameter_list|,
name|Set
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|Detector
argument_list|>
argument_list|>
name|excludeDetectors
parameter_list|,
name|MimeTypes
name|mimeTypes
parameter_list|,
name|ServiceLoader
name|loader
parameter_list|)
throws|throws
name|InvocationTargetException
throws|,
name|IllegalAccessException
throws|,
name|InstantiationException
block|{
name|Detector
name|detector
init|=
literal|null
decl_stmt|;
name|Constructor
argument_list|<
name|?
extends|extends
name|Detector
argument_list|>
name|c
decl_stmt|;
name|MediaTypeRegistry
name|registry
init|=
name|mimeTypes
operator|.
name|getMediaTypeRegistry
argument_list|()
decl_stmt|;
comment|// Try the possible default and composite detector constructors
if|if
condition|(
name|detector
operator|==
literal|null
condition|)
block|{
try|try
block|{
name|c
operator|=
name|detectorClass
operator|.
name|getConstructor
argument_list|(
name|MimeTypes
operator|.
name|class
argument_list|,
name|ServiceLoader
operator|.
name|class
argument_list|,
name|Collection
operator|.
name|class
argument_list|)
expr_stmt|;
name|detector
operator|=
name|c
operator|.
name|newInstance
argument_list|(
name|mimeTypes
argument_list|,
name|loader
argument_list|,
name|excludeDetectors
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchMethodException
name|me
parameter_list|)
block|{}
block|}
if|if
condition|(
name|detector
operator|==
literal|null
condition|)
block|{
try|try
block|{
name|c
operator|=
name|detectorClass
operator|.
name|getConstructor
argument_list|(
name|MediaTypeRegistry
operator|.
name|class
argument_list|,
name|List
operator|.
name|class
argument_list|,
name|Collection
operator|.
name|class
argument_list|)
expr_stmt|;
name|detector
operator|=
name|c
operator|.
name|newInstance
argument_list|(
name|registry
argument_list|,
name|childDetectors
argument_list|,
name|excludeDetectors
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchMethodException
name|me
parameter_list|)
block|{}
block|}
if|if
condition|(
name|detector
operator|==
literal|null
condition|)
block|{
try|try
block|{
name|c
operator|=
name|detectorClass
operator|.
name|getConstructor
argument_list|(
name|MediaTypeRegistry
operator|.
name|class
argument_list|,
name|List
operator|.
name|class
argument_list|)
expr_stmt|;
name|detector
operator|=
name|c
operator|.
name|newInstance
argument_list|(
name|registry
argument_list|,
name|childDetectors
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchMethodException
name|me
parameter_list|)
block|{}
block|}
if|if
condition|(
name|detector
operator|==
literal|null
condition|)
block|{
try|try
block|{
name|c
operator|=
name|detectorClass
operator|.
name|getConstructor
argument_list|(
name|List
operator|.
name|class
argument_list|)
expr_stmt|;
name|detector
operator|=
name|c
operator|.
name|newInstance
argument_list|(
name|childDetectors
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchMethodException
name|me
parameter_list|)
block|{}
block|}
return|return
name|detector
return|;
block|}
annotation|@
name|Override
name|Detector
name|decorate
parameter_list|(
name|Detector
name|created
parameter_list|,
name|Element
name|element
parameter_list|)
block|{
return|return
name|created
return|;
comment|// No decoration of Detectors
block|}
block|}
specifier|private
specifier|static
class|class
name|TranslatorXmlLoader
extends|extends
name|XmlLoader
argument_list|<
name|Translator
argument_list|,
name|Translator
argument_list|>
block|{
name|boolean
name|supportsComposite
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
name|String
name|getParentTagName
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
name|String
name|getLoaderTagName
parameter_list|()
block|{
return|return
literal|"translator"
return|;
block|}
annotation|@
name|Override
name|Class
argument_list|<
name|?
extends|extends
name|Translator
argument_list|>
name|getLoaderClass
parameter_list|()
block|{
return|return
name|Translator
operator|.
name|class
return|;
block|}
annotation|@
name|Override
name|Translator
name|preLoadOne
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|Translator
argument_list|>
name|loadedClass
parameter_list|,
name|String
name|classname
parameter_list|,
name|MimeTypes
name|mimeTypes
parameter_list|)
throws|throws
name|TikaException
block|{
comment|// Continue with normal loading
return|return
literal|null
return|;
block|}
annotation|@
name|Override
name|boolean
name|isComposite
parameter_list|(
name|Translator
name|loaded
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
name|boolean
name|isComposite
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|Translator
argument_list|>
name|loadedClass
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
name|Translator
name|createDefault
parameter_list|(
name|MimeTypes
name|mimeTypes
parameter_list|,
name|ServiceLoader
name|loader
parameter_list|)
block|{
return|return
name|getDefaultTranslator
argument_list|(
name|loader
argument_list|)
return|;
block|}
annotation|@
name|Override
name|Translator
name|createComposite
parameter_list|(
name|List
argument_list|<
name|Translator
argument_list|>
name|loaded
parameter_list|,
name|MimeTypes
name|mimeTypes
parameter_list|,
name|ServiceLoader
name|loader
parameter_list|)
block|{
return|return
name|loaded
operator|.
name|get
argument_list|(
literal|0
argument_list|)
return|;
block|}
annotation|@
name|Override
name|Translator
name|createComposite
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|Translator
argument_list|>
name|compositeClass
parameter_list|,
name|List
argument_list|<
name|Translator
argument_list|>
name|children
parameter_list|,
name|Set
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|Translator
argument_list|>
argument_list|>
name|excludeChildren
parameter_list|,
name|MimeTypes
name|mimeTypes
parameter_list|,
name|ServiceLoader
name|loader
parameter_list|)
throws|throws
name|InvocationTargetException
throws|,
name|IllegalAccessException
throws|,
name|InstantiationException
block|{
throw|throw
operator|new
name|InstantiationException
argument_list|(
literal|"Only one translator supported"
argument_list|)
throw|;
block|}
annotation|@
name|Override
name|Translator
name|decorate
parameter_list|(
name|Translator
name|created
parameter_list|,
name|Element
name|element
parameter_list|)
block|{
return|return
name|created
return|;
comment|// No decoration of Translators
block|}
block|}
specifier|private
specifier|static
class|class
name|ExecutorServiceXmlLoader
extends|extends
name|XmlLoader
argument_list|<
name|ConfigurableThreadPoolExecutor
argument_list|,
name|ConfigurableThreadPoolExecutor
argument_list|>
block|{
annotation|@
name|Override
name|ConfigurableThreadPoolExecutor
name|createComposite
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|ConfigurableThreadPoolExecutor
argument_list|>
name|compositeClass
parameter_list|,
name|List
argument_list|<
name|ConfigurableThreadPoolExecutor
argument_list|>
name|children
parameter_list|,
name|Set
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|ConfigurableThreadPoolExecutor
argument_list|>
argument_list|>
name|excludeChildren
parameter_list|,
name|MimeTypes
name|mimeTypes
parameter_list|,
name|ServiceLoader
name|loader
parameter_list|)
throws|throws
name|InvocationTargetException
throws|,
name|IllegalAccessException
throws|,
name|InstantiationException
block|{
throw|throw
operator|new
name|InstantiationException
argument_list|(
literal|"Only one executor service supported"
argument_list|)
throw|;
block|}
annotation|@
name|Override
name|ConfigurableThreadPoolExecutor
name|createComposite
parameter_list|(
name|List
argument_list|<
name|ConfigurableThreadPoolExecutor
argument_list|>
name|loaded
parameter_list|,
name|MimeTypes
name|mimeTypes
parameter_list|,
name|ServiceLoader
name|loader
parameter_list|)
block|{
return|return
name|loaded
operator|.
name|get
argument_list|(
literal|0
argument_list|)
return|;
block|}
annotation|@
name|Override
name|ConfigurableThreadPoolExecutor
name|createDefault
parameter_list|(
name|MimeTypes
name|mimeTypes
parameter_list|,
name|ServiceLoader
name|loader
parameter_list|)
block|{
return|return
name|getDefaultExecutorService
argument_list|()
return|;
block|}
annotation|@
name|Override
name|ConfigurableThreadPoolExecutor
name|decorate
parameter_list|(
name|ConfigurableThreadPoolExecutor
name|created
parameter_list|,
name|Element
name|element
parameter_list|)
throws|throws
name|IOException
throws|,
name|TikaException
block|{
name|Element
name|maxThreadElement
init|=
name|getChild
argument_list|(
name|element
argument_list|,
literal|"max-threads"
argument_list|)
decl_stmt|;
if|if
condition|(
name|maxThreadElement
operator|!=
literal|null
condition|)
block|{
name|created
operator|.
name|setMaximumPoolSize
argument_list|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|getText
argument_list|(
name|maxThreadElement
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Element
name|coreThreadElement
init|=
name|getChild
argument_list|(
name|element
argument_list|,
literal|"core-threads"
argument_list|)
decl_stmt|;
if|if
condition|(
name|coreThreadElement
operator|!=
literal|null
condition|)
block|{
name|created
operator|.
name|setCorePoolSize
argument_list|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|getText
argument_list|(
name|coreThreadElement
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|created
return|;
block|}
annotation|@
name|Override
name|Class
argument_list|<
name|?
extends|extends
name|ConfigurableThreadPoolExecutor
argument_list|>
name|getLoaderClass
parameter_list|()
block|{
return|return
name|ConfigurableThreadPoolExecutor
operator|.
name|class
return|;
block|}
annotation|@
name|Override
name|ConfigurableThreadPoolExecutor
name|loadOne
parameter_list|(
name|Element
name|element
parameter_list|,
name|MimeTypes
name|mimeTypes
parameter_list|,
name|ServiceLoader
name|loader
parameter_list|)
throws|throws
name|TikaException
throws|,
name|IOException
block|{
return|return
name|super
operator|.
name|loadOne
argument_list|(
name|element
argument_list|,
name|mimeTypes
argument_list|,
name|loader
argument_list|)
return|;
block|}
annotation|@
name|Override
name|boolean
name|supportsComposite
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
name|String
name|getParentTagName
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
name|String
name|getLoaderTagName
parameter_list|()
block|{
return|return
literal|"executor-service"
return|;
block|}
annotation|@
name|Override
name|boolean
name|isComposite
parameter_list|(
name|ConfigurableThreadPoolExecutor
name|loaded
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
name|boolean
name|isComposite
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|ConfigurableThreadPoolExecutor
argument_list|>
name|loadedClass
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
name|ConfigurableThreadPoolExecutor
name|preLoadOne
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|ConfigurableThreadPoolExecutor
argument_list|>
name|loadedClass
parameter_list|,
name|String
name|classname
parameter_list|,
name|MimeTypes
name|mimeTypes
parameter_list|)
throws|throws
name|TikaException
block|{
return|return
literal|null
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|EncodingDetectorXmlLoader
extends|extends
name|XmlLoader
argument_list|<
name|EncodingDetector
argument_list|,
name|EncodingDetector
argument_list|>
block|{
name|boolean
name|supportsComposite
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
name|String
name|getParentTagName
parameter_list|()
block|{
return|return
literal|"encodingDetectors"
return|;
block|}
name|String
name|getLoaderTagName
parameter_list|()
block|{
return|return
literal|"encodingDetector"
return|;
block|}
annotation|@
name|Override
name|Class
argument_list|<
name|?
extends|extends
name|EncodingDetector
argument_list|>
name|getLoaderClass
parameter_list|()
block|{
return|return
name|EncodingDetector
operator|.
name|class
return|;
block|}
annotation|@
name|Override
name|boolean
name|isComposite
parameter_list|(
name|EncodingDetector
name|loaded
parameter_list|)
block|{
return|return
name|loaded
operator|instanceof
name|CompositeEncodingDetector
return|;
block|}
annotation|@
name|Override
name|boolean
name|isComposite
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|EncodingDetector
argument_list|>
name|loadedClass
parameter_list|)
block|{
return|return
name|CompositeEncodingDetector
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|loadedClass
argument_list|)
return|;
block|}
annotation|@
name|Override
name|EncodingDetector
name|preLoadOne
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|EncodingDetector
argument_list|>
name|loadedClass
parameter_list|,
name|String
name|classname
parameter_list|,
name|MimeTypes
name|mimeTypes
parameter_list|)
throws|throws
name|TikaException
block|{
comment|// Check for classes which can't be set in config
comment|// Continue with normal loading
return|return
literal|null
return|;
block|}
annotation|@
name|Override
name|EncodingDetector
name|createDefault
parameter_list|(
name|MimeTypes
name|mimeTypes
parameter_list|,
name|ServiceLoader
name|loader
parameter_list|)
block|{
return|return
name|getDefaultEncodingDetector
argument_list|(
name|loader
argument_list|)
return|;
block|}
annotation|@
name|Override
name|CompositeEncodingDetector
name|createComposite
parameter_list|(
name|List
argument_list|<
name|EncodingDetector
argument_list|>
name|encodingDetectors
parameter_list|,
name|MimeTypes
name|mimeTypes
parameter_list|,
name|ServiceLoader
name|loader
parameter_list|)
block|{
return|return
operator|new
name|CompositeEncodingDetector
argument_list|(
name|encodingDetectors
argument_list|)
return|;
block|}
annotation|@
name|Override
name|EncodingDetector
name|createComposite
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|EncodingDetector
argument_list|>
name|encodingDetectorClass
parameter_list|,
name|List
argument_list|<
name|EncodingDetector
argument_list|>
name|childEncodingDetectors
parameter_list|,
name|Set
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|EncodingDetector
argument_list|>
argument_list|>
name|excludeDetectors
parameter_list|,
name|MimeTypes
name|mimeTypes
parameter_list|,
name|ServiceLoader
name|loader
parameter_list|)
throws|throws
name|InvocationTargetException
throws|,
name|IllegalAccessException
throws|,
name|InstantiationException
block|{
name|EncodingDetector
name|encodingDetector
init|=
literal|null
decl_stmt|;
name|Constructor
argument_list|<
name|?
extends|extends
name|EncodingDetector
argument_list|>
name|c
decl_stmt|;
comment|// Try the possible default and composite detector constructors
if|if
condition|(
name|encodingDetector
operator|==
literal|null
condition|)
block|{
try|try
block|{
name|c
operator|=
name|encodingDetectorClass
operator|.
name|getConstructor
argument_list|(
name|ServiceLoader
operator|.
name|class
argument_list|,
name|Collection
operator|.
name|class
argument_list|)
expr_stmt|;
name|encodingDetector
operator|=
name|c
operator|.
name|newInstance
argument_list|(
name|loader
argument_list|,
name|excludeDetectors
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchMethodException
name|me
parameter_list|)
block|{
name|me
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|encodingDetector
operator|==
literal|null
condition|)
block|{
try|try
block|{
name|c
operator|=
name|encodingDetectorClass
operator|.
name|getConstructor
argument_list|(
name|List
operator|.
name|class
argument_list|)
expr_stmt|;
name|encodingDetector
operator|=
name|c
operator|.
name|newInstance
argument_list|(
name|childEncodingDetectors
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchMethodException
name|me
parameter_list|)
block|{
name|me
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|encodingDetector
return|;
block|}
annotation|@
name|Override
name|EncodingDetector
name|decorate
parameter_list|(
name|EncodingDetector
name|created
parameter_list|,
name|Element
name|element
parameter_list|)
block|{
return|return
name|created
return|;
comment|// No decoration of EncodingDetectors
block|}
block|}
block|}
end_class

end_unit

