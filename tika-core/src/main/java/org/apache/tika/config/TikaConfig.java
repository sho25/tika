begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|config
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Constructor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|InvocationTargetException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|imageio
operator|.
name|spi
operator|.
name|ServiceRegistry
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|DocumentBuilder
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|DocumentBuilderFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|ParserConfigurationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|detect
operator|.
name|CompositeDetector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|detect
operator|.
name|DefaultDetector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|detect
operator|.
name|Detector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|exception
operator|.
name|TikaException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|language
operator|.
name|translate
operator|.
name|DefaultTranslator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|language
operator|.
name|translate
operator|.
name|Translator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|mime
operator|.
name|MediaType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|mime
operator|.
name|MediaTypeRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|mime
operator|.
name|MimeTypeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|mime
operator|.
name|MimeTypes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|mime
operator|.
name|MimeTypesFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|AutoDetectParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|CompositeParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|DefaultParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|Parser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|ParserDecorator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|NodeList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_comment
comment|/**  * Parse xml config file.  */
end_comment

begin_class
specifier|public
class|class
name|TikaConfig
block|{
specifier|private
specifier|static
name|MimeTypes
name|getDefaultMimeTypes
parameter_list|(
name|ClassLoader
name|loader
parameter_list|)
block|{
return|return
name|MimeTypes
operator|.
name|getDefaultMimeTypes
argument_list|(
name|loader
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|Detector
name|getDefaultDetector
parameter_list|(
name|MimeTypes
name|types
parameter_list|,
name|ServiceLoader
name|loader
parameter_list|)
block|{
return|return
operator|new
name|DefaultDetector
argument_list|(
name|types
argument_list|,
name|loader
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|CompositeParser
name|getDefaultParser
parameter_list|(
name|MimeTypes
name|types
parameter_list|,
name|ServiceLoader
name|loader
parameter_list|)
block|{
return|return
operator|new
name|DefaultParser
argument_list|(
name|types
operator|.
name|getMediaTypeRegistry
argument_list|()
argument_list|,
name|loader
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|Translator
name|getDefaultTranslator
parameter_list|(
name|ServiceLoader
name|loader
parameter_list|)
block|{
return|return
operator|new
name|DefaultTranslator
argument_list|(
name|loader
argument_list|)
return|;
block|}
specifier|private
specifier|final
name|CompositeParser
name|parser
decl_stmt|;
specifier|private
specifier|final
name|Detector
name|detector
decl_stmt|;
specifier|private
specifier|final
name|Translator
name|translator
decl_stmt|;
specifier|private
specifier|final
name|MimeTypes
name|mimeTypes
decl_stmt|;
specifier|public
name|TikaConfig
parameter_list|(
name|String
name|file
parameter_list|)
throws|throws
name|TikaException
throws|,
name|IOException
throws|,
name|SAXException
block|{
name|this
argument_list|(
operator|new
name|File
argument_list|(
name|file
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|TikaConfig
parameter_list|(
name|File
name|file
parameter_list|)
throws|throws
name|TikaException
throws|,
name|IOException
throws|,
name|SAXException
block|{
name|this
argument_list|(
name|getBuilder
argument_list|()
operator|.
name|parse
argument_list|(
name|file
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|TikaConfig
parameter_list|(
name|URL
name|url
parameter_list|)
throws|throws
name|TikaException
throws|,
name|IOException
throws|,
name|SAXException
block|{
name|this
argument_list|(
name|url
argument_list|,
name|ServiceLoader
operator|.
name|getContextClassLoader
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|TikaConfig
parameter_list|(
name|URL
name|url
parameter_list|,
name|ClassLoader
name|loader
parameter_list|)
throws|throws
name|TikaException
throws|,
name|IOException
throws|,
name|SAXException
block|{
name|this
argument_list|(
name|getBuilder
argument_list|()
operator|.
name|parse
argument_list|(
name|url
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|getDocumentElement
argument_list|()
argument_list|,
name|loader
argument_list|)
expr_stmt|;
block|}
specifier|public
name|TikaConfig
parameter_list|(
name|InputStream
name|stream
parameter_list|)
throws|throws
name|TikaException
throws|,
name|IOException
throws|,
name|SAXException
block|{
name|this
argument_list|(
name|getBuilder
argument_list|()
operator|.
name|parse
argument_list|(
name|stream
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|TikaConfig
parameter_list|(
name|Document
name|document
parameter_list|)
throws|throws
name|TikaException
throws|,
name|IOException
block|{
name|this
argument_list|(
name|document
operator|.
name|getDocumentElement
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|TikaConfig
parameter_list|(
name|Element
name|element
parameter_list|)
throws|throws
name|TikaException
throws|,
name|IOException
block|{
name|this
argument_list|(
name|element
argument_list|,
operator|new
name|ServiceLoader
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|TikaConfig
parameter_list|(
name|Element
name|element
parameter_list|,
name|ClassLoader
name|loader
parameter_list|)
throws|throws
name|TikaException
throws|,
name|IOException
block|{
name|this
argument_list|(
name|element
argument_list|,
operator|new
name|ServiceLoader
argument_list|(
name|loader
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|TikaConfig
parameter_list|(
name|Element
name|element
parameter_list|,
name|ServiceLoader
name|loader
parameter_list|)
throws|throws
name|TikaException
throws|,
name|IOException
block|{
name|this
operator|.
name|mimeTypes
operator|=
name|typesFromDomElement
argument_list|(
name|element
argument_list|)
expr_stmt|;
name|this
operator|.
name|detector
operator|=
name|detectorFromDomElement
argument_list|(
name|element
argument_list|,
name|mimeTypes
argument_list|,
name|loader
argument_list|)
expr_stmt|;
name|this
operator|.
name|parser
operator|=
name|parserFromDomElement
argument_list|(
name|element
argument_list|,
name|mimeTypes
argument_list|,
name|loader
argument_list|)
expr_stmt|;
name|this
operator|.
name|translator
operator|=
name|translatorFromDomElement
argument_list|(
name|element
argument_list|,
name|loader
argument_list|)
expr_stmt|;
block|}
comment|/**      * Creates a Tika configuration from the built-in media type rules      * and all the {@link Parser} implementations available through the      * {@link ServiceRegistry service provider mechanism} in the given      * class loader.      *      * @since Apache Tika 0.8      * @param loader the class loader through which parser implementations      *               are loaded, or<code>null</code> for no parsers      * @throws MimeTypeException if the built-in media type rules are broken      * @throws IOException  if the built-in media type rules can not be read      */
specifier|public
name|TikaConfig
parameter_list|(
name|ClassLoader
name|loader
parameter_list|)
throws|throws
name|MimeTypeException
throws|,
name|IOException
block|{
name|ServiceLoader
name|serviceLoader
init|=
operator|new
name|ServiceLoader
argument_list|(
name|loader
argument_list|)
decl_stmt|;
name|this
operator|.
name|mimeTypes
operator|=
name|getDefaultMimeTypes
argument_list|(
name|loader
argument_list|)
expr_stmt|;
name|this
operator|.
name|detector
operator|=
name|getDefaultDetector
argument_list|(
name|mimeTypes
argument_list|,
name|serviceLoader
argument_list|)
expr_stmt|;
name|this
operator|.
name|parser
operator|=
name|getDefaultParser
argument_list|(
name|mimeTypes
argument_list|,
name|serviceLoader
argument_list|)
expr_stmt|;
name|this
operator|.
name|translator
operator|=
name|getDefaultTranslator
argument_list|(
name|serviceLoader
argument_list|)
expr_stmt|;
block|}
comment|/**      * Creates a default Tika configuration.      * First checks whether an XML config file is specified, either in      *<ol>      *<li>System property "tika.config", or</li>      *<li>Environment variable TIKA_CONFIG</li>      *</ol>      *<p>If one of these have a value, try to resolve it relative to file      * system or classpath.</p>      *<p>If XML config is not specified, initialize from the built-in media      * type rules and all the {@link Parser} implementations available through      * the {@link ServiceRegistry service provider mechanism} in the context      * class loader of the current thread.</p>      *      * @throws IOException if the configuration can not be read      * @throws TikaException if problem with MimeTypes or parsing XML config      */
specifier|public
name|TikaConfig
parameter_list|()
throws|throws
name|TikaException
throws|,
name|IOException
block|{
name|ServiceLoader
name|loader
init|=
operator|new
name|ServiceLoader
argument_list|()
decl_stmt|;
name|String
name|config
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"tika.config"
argument_list|)
decl_stmt|;
if|if
condition|(
name|config
operator|==
literal|null
condition|)
block|{
name|config
operator|=
name|System
operator|.
name|getenv
argument_list|(
literal|"TIKA_CONFIG"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|config
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|mimeTypes
operator|=
name|getDefaultMimeTypes
argument_list|(
name|ServiceLoader
operator|.
name|getContextClassLoader
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|parser
operator|=
name|getDefaultParser
argument_list|(
name|mimeTypes
argument_list|,
name|loader
argument_list|)
expr_stmt|;
name|this
operator|.
name|detector
operator|=
name|getDefaultDetector
argument_list|(
name|mimeTypes
argument_list|,
name|loader
argument_list|)
expr_stmt|;
name|this
operator|.
name|translator
operator|=
name|getDefaultTranslator
argument_list|(
name|loader
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Locate the given configuration file
name|InputStream
name|stream
init|=
literal|null
decl_stmt|;
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|config
argument_list|)
decl_stmt|;
if|if
condition|(
name|file
operator|.
name|isFile
argument_list|()
condition|)
block|{
name|stream
operator|=
operator|new
name|FileInputStream
argument_list|(
name|file
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|stream
operator|==
literal|null
condition|)
block|{
try|try
block|{
name|stream
operator|=
operator|new
name|URL
argument_list|(
name|config
argument_list|)
operator|.
name|openStream
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ignore
parameter_list|)
block|{                 }
block|}
if|if
condition|(
name|stream
operator|==
literal|null
condition|)
block|{
name|stream
operator|=
name|loader
operator|.
name|getResourceAsStream
argument_list|(
name|config
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|stream
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|TikaException
argument_list|(
literal|"Specified Tika configuration not found: "
operator|+
name|config
argument_list|)
throw|;
block|}
try|try
block|{
name|Element
name|element
init|=
name|getBuilder
argument_list|()
operator|.
name|parse
argument_list|(
name|stream
argument_list|)
operator|.
name|getDocumentElement
argument_list|()
decl_stmt|;
name|this
operator|.
name|mimeTypes
operator|=
name|typesFromDomElement
argument_list|(
name|element
argument_list|)
expr_stmt|;
name|this
operator|.
name|parser
operator|=
name|parserFromDomElement
argument_list|(
name|element
argument_list|,
name|mimeTypes
argument_list|,
name|loader
argument_list|)
expr_stmt|;
name|this
operator|.
name|detector
operator|=
name|detectorFromDomElement
argument_list|(
name|element
argument_list|,
name|mimeTypes
argument_list|,
name|loader
argument_list|)
expr_stmt|;
name|this
operator|.
name|translator
operator|=
name|translatorFromDomElement
argument_list|(
name|element
argument_list|,
name|loader
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SAXException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|TikaException
argument_list|(
literal|"Specified Tika configuration has syntax errors: "
operator|+
name|config
argument_list|,
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|stream
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|private
specifier|static
name|String
name|getText
parameter_list|(
name|Node
name|node
parameter_list|)
block|{
if|if
condition|(
name|node
operator|.
name|getNodeType
argument_list|()
operator|==
name|Node
operator|.
name|TEXT_NODE
condition|)
block|{
return|return
name|node
operator|.
name|getNodeValue
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|node
operator|.
name|getNodeType
argument_list|()
operator|==
name|Node
operator|.
name|ELEMENT_NODE
condition|)
block|{
name|StringBuilder
name|builder
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|NodeList
name|list
init|=
name|node
operator|.
name|getChildNodes
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|list
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|builder
operator|.
name|append
argument_list|(
name|getText
argument_list|(
name|list
operator|.
name|item
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|toString
argument_list|()
return|;
block|}
else|else
block|{
return|return
literal|""
return|;
block|}
block|}
comment|/**      * @deprecated Use the {@link #getParser()} method instead      */
specifier|public
name|Parser
name|getParser
parameter_list|(
name|MediaType
name|mimeType
parameter_list|)
block|{
return|return
name|parser
operator|.
name|getParsers
argument_list|()
operator|.
name|get
argument_list|(
name|mimeType
argument_list|)
return|;
block|}
comment|/**      * Returns the configured parser instance.      *      * @return configured parser      */
specifier|public
name|Parser
name|getParser
parameter_list|()
block|{
return|return
name|parser
return|;
block|}
comment|/**      * Returns the configured detector instance.      *      * @return configured detector      */
specifier|public
name|Detector
name|getDetector
parameter_list|()
block|{
return|return
name|detector
return|;
block|}
comment|/**      * Returns the configured translator instance.      *      * @return configured translator      */
specifier|public
name|Translator
name|getTranslator
parameter_list|()
block|{
return|return
name|translator
return|;
block|}
specifier|public
name|MimeTypes
name|getMimeRepository
parameter_list|()
block|{
return|return
name|mimeTypes
return|;
block|}
specifier|public
name|MediaTypeRegistry
name|getMediaTypeRegistry
parameter_list|()
block|{
return|return
name|mimeTypes
operator|.
name|getMediaTypeRegistry
argument_list|()
return|;
block|}
comment|/**      * Provides a default configuration (TikaConfig).  Currently creates a      * new instance each time it's called; we may be able to have it      * return a shared instance once it is completely immutable.      *      * @return default configuration      */
specifier|public
specifier|static
name|TikaConfig
name|getDefaultConfig
parameter_list|()
block|{
try|try
block|{
return|return
operator|new
name|TikaConfig
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Unable to read default configuration"
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|TikaException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Unable to access default configuration"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|static
name|DocumentBuilder
name|getBuilder
parameter_list|()
throws|throws
name|TikaException
block|{
try|try
block|{
return|return
name|DocumentBuilderFactory
operator|.
name|newInstance
argument_list|()
operator|.
name|newDocumentBuilder
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|ParserConfigurationException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|TikaException
argument_list|(
literal|"XML parser not available"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|static
name|Element
name|getChild
parameter_list|(
name|Element
name|element
parameter_list|,
name|String
name|name
parameter_list|)
block|{
name|Node
name|child
init|=
name|element
operator|.
name|getFirstChild
argument_list|()
decl_stmt|;
while|while
condition|(
name|child
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|child
operator|.
name|getNodeType
argument_list|()
operator|==
name|Node
operator|.
name|ELEMENT_NODE
operator|&&
name|name
operator|.
name|equals
argument_list|(
name|child
operator|.
name|getNodeName
argument_list|()
argument_list|)
condition|)
block|{
return|return
operator|(
name|Element
operator|)
name|child
return|;
block|}
name|child
operator|=
name|child
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
specifier|private
specifier|static
name|MimeTypes
name|typesFromDomElement
parameter_list|(
name|Element
name|element
parameter_list|)
throws|throws
name|TikaException
throws|,
name|IOException
block|{
name|Element
name|mtr
init|=
name|getChild
argument_list|(
name|element
argument_list|,
literal|"mimeTypeRepository"
argument_list|)
decl_stmt|;
if|if
condition|(
name|mtr
operator|!=
literal|null
operator|&&
name|mtr
operator|.
name|hasAttribute
argument_list|(
literal|"resource"
argument_list|)
condition|)
block|{
return|return
name|MimeTypesFactory
operator|.
name|create
argument_list|(
name|mtr
operator|.
name|getAttribute
argument_list|(
literal|"resource"
argument_list|)
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|getDefaultMimeTypes
argument_list|(
literal|null
argument_list|)
return|;
block|}
block|}
specifier|private
specifier|static
name|CompositeParser
name|parserFromDomElement
parameter_list|(
name|Element
name|element
parameter_list|,
name|MimeTypes
name|mimeTypes
parameter_list|,
name|ServiceLoader
name|loader
parameter_list|)
throws|throws
name|TikaException
throws|,
name|IOException
block|{
name|List
argument_list|<
name|Parser
argument_list|>
name|parsers
init|=
operator|new
name|ArrayList
argument_list|<
name|Parser
argument_list|>
argument_list|()
decl_stmt|;
name|NodeList
name|nodes
init|=
name|element
operator|.
name|getElementsByTagName
argument_list|(
literal|"parser"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nodes
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Element
name|node
init|=
operator|(
name|Element
operator|)
name|nodes
operator|.
name|item
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|parsers
operator|.
name|add
argument_list|(
name|parserFromParserDomElement
argument_list|(
name|node
argument_list|,
name|mimeTypes
argument_list|,
name|loader
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|parsers
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// No parsers defined, create a DefaultParser
return|return
name|getDefaultParser
argument_list|(
name|mimeTypes
argument_list|,
name|loader
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|parsers
operator|.
name|size
argument_list|()
operator|==
literal|1
operator|&&
name|parsers
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|instanceof
name|CompositeParser
condition|)
block|{
comment|// Single Composite defined, use that
return|return
operator|(
name|CompositeParser
operator|)
name|parsers
operator|.
name|get
argument_list|(
literal|0
argument_list|)
return|;
block|}
else|else
block|{
comment|// Wrap the defined parsers up in a Composite
name|MediaTypeRegistry
name|registry
init|=
name|mimeTypes
operator|.
name|getMediaTypeRegistry
argument_list|()
decl_stmt|;
return|return
operator|new
name|CompositeParser
argument_list|(
name|registry
argument_list|,
name|parsers
argument_list|)
return|;
block|}
block|}
specifier|private
specifier|static
name|Parser
name|parserFromParserDomElement
parameter_list|(
name|Element
name|parserNode
parameter_list|,
name|MimeTypes
name|mimeTypes
parameter_list|,
name|ServiceLoader
name|loader
parameter_list|)
throws|throws
name|TikaException
throws|,
name|IOException
block|{
name|String
name|name
init|=
name|parserNode
operator|.
name|getAttribute
argument_list|(
literal|"class"
argument_list|)
decl_stmt|;
name|Parser
name|parser
init|=
literal|null
decl_stmt|;
try|try
block|{
name|Class
argument_list|<
name|?
extends|extends
name|Parser
argument_list|>
name|parserClass
init|=
name|loader
operator|.
name|getServiceClass
argument_list|(
name|Parser
operator|.
name|class
argument_list|,
name|name
argument_list|)
decl_stmt|;
comment|// https://issues.apache.org/jira/browse/TIKA-866
if|if
condition|(
name|AutoDetectParser
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|parserClass
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|TikaException
argument_list|(
literal|"AutoDetectParser not supported in a<parser>"
operator|+
literal|" configuration element: "
operator|+
name|name
argument_list|)
throw|;
block|}
comment|// Is this a composite parser? If so, support recursion
if|if
condition|(
name|CompositeParser
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|parserClass
argument_list|)
condition|)
block|{
comment|// Get the child parsers for it
name|List
argument_list|<
name|Parser
argument_list|>
name|childParsers
init|=
operator|new
name|ArrayList
argument_list|<
name|Parser
argument_list|>
argument_list|()
decl_stmt|;
name|NodeList
name|childParserNodes
init|=
name|parserNode
operator|.
name|getElementsByTagName
argument_list|(
literal|"parser"
argument_list|)
decl_stmt|;
if|if
condition|(
name|childParserNodes
operator|.
name|getLength
argument_list|()
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|childParserNodes
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|childParsers
operator|.
name|add
argument_list|(
name|parserFromParserDomElement
argument_list|(
operator|(
name|Element
operator|)
name|childParserNodes
operator|.
name|item
argument_list|(
name|i
argument_list|)
argument_list|,
name|mimeTypes
argument_list|,
name|loader
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Get the list of parsers to exclude
name|Set
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|Parser
argument_list|>
argument_list|>
name|excludeParsers
init|=
operator|new
name|HashSet
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|Parser
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|NodeList
name|excludeParserNodes
init|=
name|parserNode
operator|.
name|getElementsByTagName
argument_list|(
literal|"parser-exclude"
argument_list|)
decl_stmt|;
if|if
condition|(
name|excludeParserNodes
operator|.
name|getLength
argument_list|()
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|excludeParserNodes
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Element
name|excl
init|=
operator|(
name|Element
operator|)
name|excludeParserNodes
operator|.
name|item
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|String
name|exclName
init|=
name|excl
operator|.
name|getAttribute
argument_list|(
literal|"class"
argument_list|)
decl_stmt|;
name|excludeParsers
operator|.
name|add
argument_list|(
name|loader
operator|.
name|getServiceClass
argument_list|(
name|Parser
operator|.
name|class
argument_list|,
name|exclName
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Create the Composite Parser
name|Constructor
argument_list|<
name|?
extends|extends
name|Parser
argument_list|>
name|c
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|c
operator|==
literal|null
condition|)
block|{
try|try
block|{
name|c
operator|=
name|parserClass
operator|.
name|getConstructor
argument_list|(
name|MediaTypeRegistry
operator|.
name|class
argument_list|,
name|ServiceLoader
operator|.
name|class
argument_list|,
name|Collection
operator|.
name|class
argument_list|)
expr_stmt|;
name|parser
operator|=
name|c
operator|.
name|newInstance
argument_list|(
name|mimeTypes
operator|.
name|getMediaTypeRegistry
argument_list|()
argument_list|,
name|loader
argument_list|,
name|excludeParsers
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchMethodException
name|me
parameter_list|)
block|{}
block|}
if|if
condition|(
name|c
operator|==
literal|null
condition|)
block|{
try|try
block|{
name|c
operator|=
name|parserClass
operator|.
name|getConstructor
argument_list|(
name|MediaTypeRegistry
operator|.
name|class
argument_list|,
name|List
operator|.
name|class
argument_list|,
name|Collection
operator|.
name|class
argument_list|)
expr_stmt|;
name|parser
operator|=
name|c
operator|.
name|newInstance
argument_list|(
name|mimeTypes
operator|.
name|getMediaTypeRegistry
argument_list|()
argument_list|,
name|childParsers
argument_list|,
name|excludeParsers
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchMethodException
name|me
parameter_list|)
block|{}
block|}
if|if
condition|(
name|c
operator|==
literal|null
condition|)
block|{
name|parser
operator|=
name|parserClass
operator|.
name|newInstance
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// Regular parser, create as-is
name|parser
operator|=
name|parserClass
operator|.
name|newInstance
argument_list|()
expr_stmt|;
block|}
comment|// Is there an explicit list of mime types for this to handle?
name|Set
argument_list|<
name|MediaType
argument_list|>
name|parserTypes
init|=
name|mediaTypesListFromDomElement
argument_list|(
name|parserNode
argument_list|,
literal|"mime"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|parserTypes
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|parser
operator|=
name|ParserDecorator
operator|.
name|withTypes
argument_list|(
name|parser
argument_list|,
name|parserTypes
argument_list|)
expr_stmt|;
block|}
comment|// Is there an explicit list of mime types this shouldn't handle?
name|Set
argument_list|<
name|MediaType
argument_list|>
name|parserExclTypes
init|=
name|mediaTypesListFromDomElement
argument_list|(
name|parserNode
argument_list|,
literal|"mime-exclude"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|parserExclTypes
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|parser
operator|=
name|ParserDecorator
operator|.
name|withoutTypes
argument_list|(
name|parser
argument_list|,
name|parserExclTypes
argument_list|)
expr_stmt|;
block|}
comment|// All done with setup
return|return
name|parser
return|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|TikaException
argument_list|(
literal|"Unable to find a parser class: "
operator|+
name|name
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IllegalAccessException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|TikaException
argument_list|(
literal|"Unable to access a parser class: "
operator|+
name|name
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|InvocationTargetException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|TikaException
argument_list|(
literal|"Unable to create a parser class: "
operator|+
name|name
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|InstantiationException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|TikaException
argument_list|(
literal|"Unable to instantiate a parser class: "
operator|+
name|name
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|static
name|Set
argument_list|<
name|MediaType
argument_list|>
name|mediaTypesListFromDomElement
parameter_list|(
name|Element
name|node
parameter_list|,
name|String
name|tag
parameter_list|)
throws|throws
name|TikaException
throws|,
name|IOException
block|{
name|NodeList
name|mimes
init|=
name|node
operator|.
name|getElementsByTagName
argument_list|(
name|tag
argument_list|)
decl_stmt|;
if|if
condition|(
name|mimes
operator|.
name|getLength
argument_list|()
operator|>
literal|0
condition|)
block|{
name|Set
argument_list|<
name|MediaType
argument_list|>
name|types
init|=
operator|new
name|HashSet
argument_list|<
name|MediaType
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|mimes
operator|.
name|getLength
argument_list|()
condition|;
name|j
operator|++
control|)
block|{
name|String
name|mime
init|=
name|getText
argument_list|(
name|mimes
operator|.
name|item
argument_list|(
name|j
argument_list|)
argument_list|)
decl_stmt|;
name|MediaType
name|type
init|=
name|MediaType
operator|.
name|parse
argument_list|(
name|mime
argument_list|)
decl_stmt|;
if|if
condition|(
name|type
operator|!=
literal|null
condition|)
block|{
name|types
operator|.
name|add
argument_list|(
name|type
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|TikaException
argument_list|(
literal|"Invalid media type name: "
operator|+
name|mime
argument_list|)
throw|;
block|}
block|}
return|return
name|types
return|;
block|}
return|return
name|Collections
operator|.
name|emptySet
argument_list|()
return|;
block|}
specifier|private
specifier|static
name|Detector
name|detectorFromDomElement
parameter_list|(
name|Element
name|element
parameter_list|,
name|MimeTypes
name|mimeTypes
parameter_list|,
name|ServiceLoader
name|loader
parameter_list|)
throws|throws
name|TikaException
throws|,
name|IOException
block|{
name|List
argument_list|<
name|Detector
argument_list|>
name|detectors
init|=
operator|new
name|ArrayList
argument_list|<
name|Detector
argument_list|>
argument_list|()
decl_stmt|;
name|NodeList
name|nodes
init|=
name|element
operator|.
name|getElementsByTagName
argument_list|(
literal|"detector"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nodes
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Element
name|node
init|=
operator|(
name|Element
operator|)
name|nodes
operator|.
name|item
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|String
name|name
init|=
name|node
operator|.
name|getAttribute
argument_list|(
literal|"class"
argument_list|)
decl_stmt|;
try|try
block|{
name|Class
argument_list|<
name|?
extends|extends
name|Detector
argument_list|>
name|detectorClass
init|=
name|loader
operator|.
name|getServiceClass
argument_list|(
name|Detector
operator|.
name|class
argument_list|,
name|name
argument_list|)
decl_stmt|;
name|detectors
operator|.
name|add
argument_list|(
name|detectorClass
operator|.
name|newInstance
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|TikaException
argument_list|(
literal|"Unable to find a detector class: "
operator|+
name|name
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IllegalAccessException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|TikaException
argument_list|(
literal|"Unable to access a detector class: "
operator|+
name|name
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|InstantiationException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|TikaException
argument_list|(
literal|"Unable to instantiate a detector class: "
operator|+
name|name
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|detectors
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|getDefaultDetector
argument_list|(
name|mimeTypes
argument_list|,
name|loader
argument_list|)
return|;
block|}
else|else
block|{
name|MediaTypeRegistry
name|registry
init|=
name|mimeTypes
operator|.
name|getMediaTypeRegistry
argument_list|()
decl_stmt|;
return|return
operator|new
name|CompositeDetector
argument_list|(
name|registry
argument_list|,
name|detectors
argument_list|)
return|;
block|}
block|}
specifier|private
specifier|static
name|Translator
name|translatorFromDomElement
parameter_list|(
name|Element
name|element
parameter_list|,
name|ServiceLoader
name|loader
parameter_list|)
throws|throws
name|TikaException
throws|,
name|IOException
block|{
name|List
argument_list|<
name|Translator
argument_list|>
name|translators
init|=
operator|new
name|ArrayList
argument_list|<
name|Translator
argument_list|>
argument_list|()
decl_stmt|;
name|NodeList
name|nodes
init|=
name|element
operator|.
name|getElementsByTagName
argument_list|(
literal|"translator"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nodes
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Element
name|node
init|=
operator|(
name|Element
operator|)
name|nodes
operator|.
name|item
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|String
name|name
init|=
name|node
operator|.
name|getAttribute
argument_list|(
literal|"class"
argument_list|)
decl_stmt|;
try|try
block|{
name|Class
argument_list|<
name|?
extends|extends
name|Translator
argument_list|>
name|translatorClass
init|=
name|loader
operator|.
name|getServiceClass
argument_list|(
name|Translator
operator|.
name|class
argument_list|,
name|name
argument_list|)
decl_stmt|;
name|translators
operator|.
name|add
argument_list|(
name|translatorClass
operator|.
name|newInstance
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|TikaException
argument_list|(
literal|"Unable to find a translator class: "
operator|+
name|name
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IllegalAccessException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|TikaException
argument_list|(
literal|"Unable to access a translator class: "
operator|+
name|name
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|InstantiationException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|TikaException
argument_list|(
literal|"Unable to instantiate a translator class: "
operator|+
name|name
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|translators
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|getDefaultTranslator
argument_list|(
name|loader
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|translators
operator|.
name|get
argument_list|(
literal|0
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

