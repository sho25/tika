begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|detect
package|;
end_package

begin_comment
comment|/**  * Utility class for computing a histogram of the bytes seen in a stream.  *  * @since Apache Tika 1.2  */
end_comment

begin_class
specifier|public
class|class
name|TextStatistics
block|{
specifier|private
specifier|final
name|int
index|[]
name|counts
init|=
operator|new
name|int
index|[
literal|256
index|]
decl_stmt|;
specifier|private
name|int
name|total
init|=
literal|0
decl_stmt|;
specifier|public
name|void
name|addData
parameter_list|(
name|byte
index|[]
name|buffer
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
name|i
operator|++
control|)
block|{
name|counts
index|[
name|buffer
index|[
name|offset
operator|+
name|i
index|]
operator|&
literal|0xff
index|]
operator|++
expr_stmt|;
name|total
operator|++
expr_stmt|;
block|}
block|}
comment|/**      * Checks whether at least one byte was seen and that the bytes that      * were seen were mostly plain text (i.e.< 2% control,> 90% ASCII range).      *      * @see<a href="https://issues.apache.org/jira/browse/TIKA-483">TIKA-483</a>      * @see<a href="https://issues.apache.org/jira/browse/TIKA-688">TIKA-688</a>      * @return<code>true</code> if the seen bytes were mostly safe ASCII,      *<code>false</code> otherwise      */
specifier|public
name|boolean
name|isMostlyAscii
parameter_list|()
block|{
name|int
name|control
init|=
name|count
argument_list|(
literal|0
argument_list|,
literal|0x20
argument_list|)
decl_stmt|;
name|int
name|ascii
init|=
name|count
argument_list|(
literal|0x20
argument_list|,
literal|128
argument_list|)
decl_stmt|;
name|int
name|safe
init|=
name|countSafeControl
argument_list|()
decl_stmt|;
return|return
name|total
operator|>
literal|0
operator|&&
operator|(
name|control
operator|-
name|safe
operator|)
operator|*
literal|100
operator|<
name|total
operator|*
literal|2
operator|&&
operator|(
name|ascii
operator|+
name|safe
operator|)
operator|*
literal|100
operator|>
name|total
operator|*
literal|90
return|;
block|}
comment|/**      * Checks whether the observed byte stream looks like UTF-8 encoded text.      *      * @since Apache Tika 1.3      * @return<code>true</code> if the seen bytes look like UTF-8,      *<code>false</code> otherwise      */
specifier|public
name|boolean
name|looksLikeUTF8
parameter_list|()
block|{
name|int
name|control
init|=
name|count
argument_list|(
literal|0
argument_list|,
literal|0x20
argument_list|)
decl_stmt|;
name|int
name|utf8
init|=
name|count
argument_list|(
literal|0x20
argument_list|,
literal|0x80
argument_list|)
decl_stmt|;
name|int
name|safe
init|=
name|countSafeControl
argument_list|()
decl_stmt|;
name|int
name|expectedContinuation
init|=
literal|0
decl_stmt|;
name|int
index|[]
name|leading
init|=
operator|new
name|int
index|[]
block|{
name|count
argument_list|(
literal|0xc0
argument_list|,
literal|0xe0
argument_list|)
block|,
name|count
argument_list|(
literal|0xe0
argument_list|,
literal|0xf0
argument_list|)
block|,
name|count
argument_list|(
literal|0xf0
argument_list|,
literal|0xf8
argument_list|)
block|}
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|leading
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|utf8
operator|+=
name|leading
index|[
name|i
index|]
expr_stmt|;
name|expectedContinuation
operator|+=
operator|(
name|i
operator|+
literal|1
operator|)
operator|*
name|leading
index|[
name|i
index|]
expr_stmt|;
block|}
name|int
name|continuation
init|=
name|count
argument_list|(
literal|0x80
argument_list|,
literal|0xc0
argument_list|)
decl_stmt|;
return|return
name|utf8
operator|>
literal|0
operator|&&
name|continuation
operator|<=
name|expectedContinuation
operator|&&
name|continuation
operator|>=
name|expectedContinuation
operator|-
literal|3
operator|&&
name|count
argument_list|(
literal|0xf80
argument_list|,
literal|0x100
argument_list|)
operator|==
literal|0
operator|&&
operator|(
name|control
operator|-
name|safe
operator|)
operator|*
literal|100
operator|<
name|utf8
operator|*
literal|2
return|;
block|}
comment|/**      * Returns the total number of bytes seen so far.      *      * @return count of all bytes      */
specifier|public
name|int
name|count
parameter_list|()
block|{
return|return
name|total
return|;
block|}
comment|/**      * Returns the number of occurrences of the given byte.      *      * @param b byte      * @return count of the given byte      */
specifier|public
name|int
name|count
parameter_list|(
name|int
name|b
parameter_list|)
block|{
return|return
name|counts
index|[
name|b
operator|&
literal|0xff
index|]
return|;
block|}
comment|/**      * Counts control characters (i.e.< 0x20, excluding tab, CR, LF,      * page feed and escape).      *<p>      * This definition of control characters is based on section 4 of the      * "Content-Type Processing Model" Internet-draft      * (<a href="http://webblaze.cs.berkeley.edu/2009/mime-sniff/mime-sniff.txt"      *>draft-abarth-mime-sniff-01</a>).      *<pre>      * +-------------------------+      * | Binary data byte ranges |      * +-------------------------+      * | 0x00 -- 0x08            |      * | 0x0B                    |      * | 0x0E -- 0x1A            |      * | 0x1C -- 0x1F            |      * +-------------------------+      *</pre>      *      * @see<a href="https://issues.apache.org/jira/browse/TIKA-154">TIKA-154</a>      * @return count of control characters      */
specifier|public
name|int
name|countControl
parameter_list|()
block|{
return|return
name|count
argument_list|(
literal|0
argument_list|,
literal|0x20
argument_list|)
operator|-
name|countSafeControl
argument_list|()
return|;
block|}
comment|/**      * Counts "safe" (i.e. seven-bit non-control) ASCII characters.      *      * @see #countControl()      * @return count of safe ASCII characters      */
specifier|public
name|int
name|countSafeAscii
parameter_list|()
block|{
return|return
name|count
argument_list|(
literal|0x20
argument_list|,
literal|128
argument_list|)
operator|+
name|countSafeControl
argument_list|()
return|;
block|}
comment|/**      * Counts eight bit characters, i.e. bytes with their highest bit set.      *      * @return count of eight bit characters      */
specifier|public
name|int
name|countEightBit
parameter_list|()
block|{
return|return
name|count
argument_list|(
literal|128
argument_list|,
literal|256
argument_list|)
return|;
block|}
specifier|private
name|int
name|count
parameter_list|(
name|int
name|from
parameter_list|,
name|int
name|to
parameter_list|)
block|{
assert|assert
literal|0
operator|<=
name|from
operator|&&
name|to
operator|<=
name|counts
operator|.
name|length
assert|;
name|int
name|count
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|from
init|;
name|i
operator|<
name|to
condition|;
name|i
operator|++
control|)
block|{
name|count
operator|+=
name|counts
index|[
name|i
index|]
expr_stmt|;
block|}
return|return
name|count
return|;
block|}
specifier|private
name|int
name|countSafeControl
parameter_list|()
block|{
return|return
name|count
argument_list|(
literal|'\t'
argument_list|)
operator|+
name|count
argument_list|(
literal|'\n'
argument_list|)
operator|+
name|count
argument_list|(
literal|'\r'
argument_list|)
comment|// tab, LF, CR
operator|+
name|count
argument_list|(
literal|0x0c
argument_list|)
operator|+
name|count
argument_list|(
literal|0x1b
argument_list|)
return|;
comment|// new page, escape
block|}
block|}
end_class

end_unit

