begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|detect
package|;
end_package

begin_class
specifier|public
class|class
name|NNTrainedModel
extends|extends
name|TrainedModel
block|{
specifier|private
name|int
name|numOfInputs
decl_stmt|;
specifier|private
name|int
name|numOfHidden
decl_stmt|;
specifier|private
name|int
name|numOfOutputs
decl_stmt|;
specifier|private
name|float
index|[]
index|[]
name|Theta1
decl_stmt|,
name|Theta2
decl_stmt|;
specifier|public
name|NNTrainedModel
parameter_list|(
specifier|final
name|int
name|nInput
parameter_list|,
specifier|final
name|int
name|nHidden
parameter_list|,
specifier|final
name|int
name|nOutput
parameter_list|,
specifier|final
name|float
index|[]
name|nn_params
parameter_list|)
block|{
name|this
operator|.
name|numOfInputs
operator|=
name|nInput
expr_stmt|;
name|this
operator|.
name|numOfHidden
operator|=
name|nHidden
expr_stmt|;
name|this
operator|.
name|numOfOutputs
operator|=
name|nOutput
expr_stmt|;
name|this
operator|.
name|Theta1
operator|=
operator|new
name|float
index|[
name|numOfHidden
index|]
index|[
name|numOfInputs
operator|+
literal|1
index|]
expr_stmt|;
name|this
operator|.
name|Theta2
operator|=
operator|new
name|float
index|[
name|numOfOutputs
index|]
index|[
name|numOfHidden
operator|+
literal|1
index|]
expr_stmt|;
name|populateThetas
argument_list|(
name|nn_params
argument_list|)
expr_stmt|;
block|}
comment|// convert the vector params to the 2 thetas.
specifier|private
name|void
name|populateThetas
parameter_list|(
specifier|final
name|float
index|[]
name|nn_params
parameter_list|)
block|{
name|int
name|m
init|=
name|this
operator|.
name|Theta1
operator|.
name|length
decl_stmt|;
name|int
name|n
init|=
name|this
operator|.
name|Theta1
index|[
literal|0
index|]
operator|.
name|length
decl_stmt|;
name|int
name|i
decl_stmt|,
name|j
decl_stmt|,
name|k
init|=
literal|0
decl_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|n
condition|;
name|i
operator|++
control|)
block|{
for|for
control|(
name|j
operator|=
literal|0
init|;
name|j
operator|<
name|m
condition|;
name|j
operator|++
control|)
block|{
name|this
operator|.
name|Theta1
index|[
name|j
index|]
index|[
name|i
index|]
operator|=
name|nn_params
index|[
name|k
index|]
expr_stmt|;
name|k
operator|++
expr_stmt|;
block|}
block|}
name|m
operator|=
name|this
operator|.
name|Theta2
operator|.
name|length
expr_stmt|;
name|n
operator|=
name|this
operator|.
name|Theta2
index|[
literal|0
index|]
operator|.
name|length
expr_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|n
condition|;
name|i
operator|++
control|)
block|{
for|for
control|(
name|j
operator|=
literal|0
init|;
name|j
operator|<
name|m
condition|;
name|j
operator|++
control|)
block|{
name|this
operator|.
name|Theta2
index|[
name|j
index|]
index|[
name|i
index|]
operator|=
name|nn_params
index|[
name|k
index|]
expr_stmt|;
name|k
operator|++
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|double
name|predict
parameter_list|(
name|double
index|[]
name|unseen
parameter_list|)
block|{
comment|// TODO Auto-generated method stub
return|return
literal|0
return|;
block|}
comment|/** 	 * The given input vector of unseen is m=(256 + 1) * n= 1 this returns a 	 * prediction probability 	 */
annotation|@
name|Override
specifier|public
name|float
name|predict
parameter_list|(
name|float
index|[]
name|unseen
parameter_list|)
block|{
comment|// please ensure the unseen in size consistent with theta1
name|int
name|i
decl_stmt|,
name|j
decl_stmt|;
name|int
name|m
init|=
name|this
operator|.
name|Theta1
operator|.
name|length
decl_stmt|;
name|int
name|n
init|=
name|this
operator|.
name|Theta1
index|[
literal|0
index|]
operator|.
name|length
decl_stmt|;
name|float
index|[]
name|hh
init|=
operator|new
name|float
index|[
name|m
operator|+
literal|1
index|]
decl_stmt|;
comment|// hidden unit summation
name|hh
index|[
literal|0
index|]
operator|=
literal|1
expr_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|m
condition|;
name|i
operator|++
control|)
block|{
name|double
name|h
init|=
literal|0
decl_stmt|;
for|for
control|(
name|j
operator|=
literal|0
init|;
name|j
operator|<
name|n
condition|;
name|j
operator|++
control|)
block|{
name|h
operator|+=
name|this
operator|.
name|Theta1
index|[
name|i
index|]
index|[
name|j
index|]
operator|*
name|unseen
index|[
name|j
index|]
expr_stmt|;
block|}
comment|// apply sigmoid
name|h
operator|=
literal|1.0
operator|/
operator|(
literal|1.0
operator|+
name|Math
operator|.
name|exp
argument_list|(
operator|-
name|h
argument_list|)
operator|)
expr_stmt|;
name|hh
index|[
name|i
operator|+
literal|1
index|]
operator|=
operator|(
name|float
operator|)
name|h
expr_stmt|;
block|}
name|m
operator|=
name|this
operator|.
name|Theta2
operator|.
name|length
expr_stmt|;
name|n
operator|=
name|this
operator|.
name|Theta2
index|[
literal|0
index|]
operator|.
name|length
expr_stmt|;
name|float
index|[]
name|oo
init|=
operator|new
name|float
index|[
name|m
index|]
decl_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|m
condition|;
name|i
operator|++
control|)
block|{
name|double
name|o
init|=
literal|0
decl_stmt|;
for|for
control|(
name|j
operator|=
literal|0
init|;
name|j
operator|<
name|n
condition|;
name|j
operator|++
control|)
block|{
name|o
operator|+=
name|this
operator|.
name|Theta2
index|[
name|i
index|]
index|[
name|j
index|]
operator|*
name|hh
index|[
name|j
index|]
expr_stmt|;
block|}
comment|// apply sigmoid
name|o
operator|=
literal|1.0
operator|/
operator|(
literal|1.0
operator|+
name|Math
operator|.
name|exp
argument_list|(
operator|-
name|o
argument_list|)
operator|)
expr_stmt|;
name|oo
index|[
name|i
index|]
operator|=
operator|(
name|float
operator|)
name|o
expr_stmt|;
block|}
return|return
name|oo
index|[
literal|0
index|]
return|;
block|}
block|}
end_class

end_unit

