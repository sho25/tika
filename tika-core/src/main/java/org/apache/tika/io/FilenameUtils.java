begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|io
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_class
specifier|public
class|class
name|FilenameUtils
block|{
comment|/**      * Reserved characters      */
specifier|public
specifier|final
specifier|static
name|char
index|[]
name|RESERVED_FILENAME_CHARACTERS
init|=
block|{
literal|0x00
block|,
literal|0x01
block|,
literal|0x02
block|,
literal|0x03
block|,
literal|0x04
block|,
literal|0x05
block|,
literal|0x06
block|,
literal|0x07
block|,
literal|0x08
block|,
literal|0x09
block|,
literal|0x0A
block|,
literal|0x0B
block|,
literal|0x0C
block|,
literal|0x0D
block|,
literal|0x0E
block|,
literal|0x0F
block|,
literal|0x10
block|,
literal|0x11
block|,
literal|0x12
block|,
literal|0x13
block|,
literal|0x14
block|,
literal|0x15
block|,
literal|0x16
block|,
literal|0x17
block|,
literal|0x18
block|,
literal|0x19
block|,
literal|0x1A
block|,
literal|0x1B
block|,
literal|0x1C
block|,
literal|0x1D
block|,
literal|0x1E
block|,
literal|0x1F
block|,
literal|'?'
block|,
literal|':'
block|,
literal|'*'
block|,
literal|'<'
block|,
literal|'>'
block|,
literal|'|'
block|}
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|HashSet
argument_list|<
name|Character
argument_list|>
name|RESERVED
init|=
operator|new
name|HashSet
argument_list|<
name|Character
argument_list|>
argument_list|(
literal|38
argument_list|)
decl_stmt|;
static|static
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|RESERVED_FILENAME_CHARACTERS
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|RESERVED
operator|.
name|add
argument_list|(
name|RESERVED_FILENAME_CHARACTERS
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Scans the given file name for reserved characters on different OSs and      * file systems and returns a sanitized version of the name with the      * reserved chars replaced by their hexadecimal value.      *      * For example<code>why?.zip</code> will be converted into<code>why%3F.zip</code>      *      * @param name the file name to be normalized - NOT NULL      *      * @return the normalized file name      *      * @throws IllegalArgumentException if name is null      */
specifier|public
specifier|static
name|String
name|normalize
parameter_list|(
specifier|final
name|String
name|name
parameter_list|)
block|{
if|if
condition|(
name|name
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"name cannot be null"
argument_list|)
throw|;
block|}
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|char
name|c
range|:
name|name
operator|.
name|toCharArray
argument_list|()
control|)
block|{
if|if
condition|(
name|RESERVED
operator|.
name|contains
argument_list|(
name|c
argument_list|)
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|'%'
argument_list|)
operator|.
name|append
argument_list|(
operator|(
name|c
operator|<
literal|16
operator|)
condition|?
literal|"0"
else|:
literal|""
argument_list|)
operator|.
name|append
argument_list|(
name|Integer
operator|.
name|toHexString
argument_list|(
name|c
argument_list|)
operator|.
name|toUpperCase
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**      * This is a duplication of the algorithm and functionality      * available in commons io FilenameUtils.  If Java's File were       * able handle Windows file paths correctly in linux,      * we wouldn't need this.      *<p>      * The goal of this is to get a filename from a path.      * The package parsers and some other embedded doc      * extractors could put anything into Metadata.RESOURCE_NAME_KEY.      *<p>      * If a careless client used that filename as if it were a      * filename and not a path when writing embedded files,      * bad things could happen.  Consider: "../../../my_ppt.ppt".      *<p>      * Consider using this in combination with {@link #normalize(String)}.      *       * @param path path to strip      * @return empty string or a filename, never null      */
specifier|public
specifier|static
name|String
name|getName
parameter_list|(
specifier|final
name|String
name|path
parameter_list|)
block|{
if|if
condition|(
name|path
operator|==
literal|null
operator|||
name|path
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
literal|""
return|;
block|}
name|int
name|unix
init|=
name|path
operator|.
name|lastIndexOf
argument_list|(
literal|"/"
argument_list|)
decl_stmt|;
name|int
name|windows
init|=
name|path
operator|.
name|lastIndexOf
argument_list|(
literal|"\\"
argument_list|)
decl_stmt|;
comment|//some macintosh file names are stored with : as the delimiter
comment|//also necessary to properly handle C:somefilename
name|int
name|colon
init|=
name|path
operator|.
name|lastIndexOf
argument_list|(
literal|":"
argument_list|)
decl_stmt|;
name|String
name|cand
init|=
name|path
operator|.
name|substring
argument_list|(
name|Math
operator|.
name|max
argument_list|(
name|colon
argument_list|,
name|Math
operator|.
name|max
argument_list|(
name|unix
argument_list|,
name|windows
argument_list|)
argument_list|)
operator|+
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|cand
operator|.
name|equals
argument_list|(
literal|".."
argument_list|)
operator|||
name|cand
operator|.
name|equals
argument_list|(
literal|"."
argument_list|)
condition|)
block|{
return|return
literal|""
return|;
block|}
return|return
name|cand
return|;
block|}
block|}
end_class

end_unit

