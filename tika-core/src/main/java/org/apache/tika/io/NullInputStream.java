begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *   *      http://www.apache.org/licenses/LICENSE-2.0  *   * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|io
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|EOFException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_comment
comment|/**  * A functional, light weight {@link InputStream} that emulates  * a stream of a specified size.  *<p>  * This implementation provides a light weight  * object for testing with an {@link InputStream}  * where the contents don't matter.  *<p>  * One use case would be for testing the handling of  * large {@link InputStream} as it can emulate that  * scenario without the overhead of actually processing  * large numbers of bytes - significantly speeding up  * test execution times.  *<p>  * This implementation returns zero from the method that  * reads a byte and leaves the array unchanged in the read  * methods that are passed a byte array.  * If alternative data is required the<code>processByte()</code> and  *<code>processBytes()</code> methods can be implemented to generate  * data, for example:  *  *<pre>  *  public class TestInputStream extends NullInputStream {  *      public TestInputStream(int size) {  *          super(size);  *      }  *      protected int processByte() {  *          return ... // return required value here  *      }  *      protected void processBytes(byte[] bytes, int offset, int length) {  *          for (int i = offset; i< length; i++) {  *              bytes[i] = ... // set array value here  *          }  *      }  *  }  *</pre>  *  * @since Apache Tika 0.4, copied from Commons IO 1.4  */
end_comment

begin_class
specifier|public
class|class
name|NullInputStream
extends|extends
name|InputStream
block|{
specifier|private
specifier|final
name|long
name|size
decl_stmt|;
specifier|private
name|long
name|position
decl_stmt|;
specifier|private
name|long
name|mark
init|=
operator|-
literal|1
decl_stmt|;
specifier|private
name|long
name|readlimit
decl_stmt|;
specifier|private
name|boolean
name|eof
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|throwEofException
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|markSupported
decl_stmt|;
comment|/**      * Create an {@link InputStream} that emulates a specified size      * which supports marking and does not throw EOFException.      *      * @param size The size of the input stream to emulate.      */
specifier|public
name|NullInputStream
parameter_list|(
name|long
name|size
parameter_list|)
block|{
name|this
argument_list|(
name|size
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|/**      * Create an {@link InputStream} that emulates a specified      * size with option settings.      *      * @param size The size of the input stream to emulate.      * @param markSupported Whether this instance will support      * the<code>mark()</code> functionality.      * @param throwEofException Whether this implementation      * will throw an {@link EOFException} or return -1 when the      * end of file is reached.      */
specifier|public
name|NullInputStream
parameter_list|(
name|long
name|size
parameter_list|,
name|boolean
name|markSupported
parameter_list|,
name|boolean
name|throwEofException
parameter_list|)
block|{
name|this
operator|.
name|size
operator|=
name|size
expr_stmt|;
name|this
operator|.
name|markSupported
operator|=
name|markSupported
expr_stmt|;
name|this
operator|.
name|throwEofException
operator|=
name|throwEofException
expr_stmt|;
block|}
comment|/**      * Return the current position.      *      * @return the current position.      */
specifier|public
name|long
name|getPosition
parameter_list|()
block|{
return|return
name|position
return|;
block|}
comment|/**      * Return the size this {@link InputStream} emulates.      *      * @return The size of the input stream to emulate.      */
specifier|public
name|long
name|getSize
parameter_list|()
block|{
return|return
name|size
return|;
block|}
comment|/**      * Return the number of bytes that can be read.      *      * @return The number of bytes that can be read.      */
annotation|@
name|Override
specifier|public
name|int
name|available
parameter_list|()
block|{
name|long
name|avail
init|=
name|size
operator|-
name|position
decl_stmt|;
if|if
condition|(
name|avail
operator|<=
literal|0
condition|)
block|{
return|return
literal|0
return|;
block|}
elseif|else
if|if
condition|(
name|avail
operator|>
name|Integer
operator|.
name|MAX_VALUE
condition|)
block|{
return|return
name|Integer
operator|.
name|MAX_VALUE
return|;
block|}
else|else
block|{
return|return
operator|(
name|int
operator|)
name|avail
return|;
block|}
block|}
comment|/**      * Close this input stream - resets the internal state to      * the initial values.      *      * @throws IOException If an error occurs.      */
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|eof
operator|=
literal|false
expr_stmt|;
name|position
operator|=
literal|0
expr_stmt|;
name|mark
operator|=
operator|-
literal|1
expr_stmt|;
block|}
comment|/**      * Mark the current position.      *      * @param readlimit The number of bytes before this marked position      * is invalid.      * @throws UnsupportedOperationException if mark is not supported.      */
annotation|@
name|Override
specifier|public
specifier|synchronized
name|void
name|mark
parameter_list|(
name|int
name|readlimit
parameter_list|)
block|{
if|if
condition|(
operator|!
name|markSupported
condition|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Mark not supported"
argument_list|)
throw|;
block|}
name|mark
operator|=
name|position
expr_stmt|;
name|this
operator|.
name|readlimit
operator|=
name|readlimit
expr_stmt|;
block|}
comment|/**      * Indicates whether<i>mark</i> is supported.      *      * @return Whether<i>mark</i> is supported or not.      */
annotation|@
name|Override
specifier|public
name|boolean
name|markSupported
parameter_list|()
block|{
return|return
name|markSupported
return|;
block|}
comment|/**      * Read a byte.      *      * @return Either The byte value returned by<code>processByte()</code>      * or<code>-1</code> if the end of file has been reached and      *<code>throwEofException</code> is set to<code>false</code>.      * @throws EOFException if the end of file is reached and      *<code>throwEofException</code> is set to<code>true</code>.      * @throws IOException if trying to read past the end of file.      */
annotation|@
name|Override
specifier|public
name|int
name|read
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|eof
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Read after end of file"
argument_list|)
throw|;
block|}
if|if
condition|(
name|position
operator|==
name|size
condition|)
block|{
return|return
name|doEndOfFile
argument_list|()
return|;
block|}
name|position
operator|++
expr_stmt|;
return|return
name|processByte
argument_list|()
return|;
block|}
comment|/**      * Read some bytes into the specified array.      *      * @param bytes The byte array to read into      * @return The number of bytes read or<code>-1</code>      * if the end of file has been reached and      *<code>throwEofException</code> is set to<code>false</code>.      * @throws EOFException if the end of file is reached and      *<code>throwEofException</code> is set to<code>true</code>.      * @throws IOException if trying to read past the end of file.      */
annotation|@
name|Override
specifier|public
name|int
name|read
parameter_list|(
name|byte
index|[]
name|bytes
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|read
argument_list|(
name|bytes
argument_list|,
literal|0
argument_list|,
name|bytes
operator|.
name|length
argument_list|)
return|;
block|}
comment|/**      * Read the specified number bytes into an array.      *      * @param bytes The byte array to read into.      * @param offset The offset to start reading bytes into.      * @param length The number of bytes to read.      * @return The number of bytes read or<code>-1</code>      * if the end of file has been reached and      *<code>throwEofException</code> is set to<code>false</code>.      * @throws EOFException if the end of file is reached and      *<code>throwEofException</code> is set to<code>true</code>.      * @throws IOException if trying to read past the end of file.      */
annotation|@
name|Override
specifier|public
name|int
name|read
parameter_list|(
name|byte
index|[]
name|bytes
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|eof
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Read after end of file"
argument_list|)
throw|;
block|}
if|if
condition|(
name|position
operator|==
name|size
condition|)
block|{
return|return
name|doEndOfFile
argument_list|()
return|;
block|}
name|position
operator|+=
name|length
expr_stmt|;
name|int
name|returnLength
init|=
name|length
decl_stmt|;
if|if
condition|(
name|position
operator|>
name|size
condition|)
block|{
name|returnLength
operator|=
name|length
operator|-
call|(
name|int
call|)
argument_list|(
name|position
operator|-
name|size
argument_list|)
expr_stmt|;
name|position
operator|=
name|size
expr_stmt|;
block|}
name|processBytes
argument_list|(
name|bytes
argument_list|,
name|offset
argument_list|,
name|returnLength
argument_list|)
expr_stmt|;
return|return
name|returnLength
return|;
block|}
comment|/**      * Reset the stream to the point when mark was last called.      *      * @throws UnsupportedOperationException if mark is not supported.      * @throws IOException If no position has been marked      * or the read limit has been exceed since the last position was      * marked.      */
annotation|@
name|Override
specifier|public
specifier|synchronized
name|void
name|reset
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|markSupported
condition|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Mark not supported"
argument_list|)
throw|;
block|}
if|if
condition|(
name|mark
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"No position has been marked"
argument_list|)
throw|;
block|}
if|if
condition|(
name|position
operator|>
operator|(
name|mark
operator|+
name|readlimit
operator|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Marked position ["
operator|+
name|mark
operator|+
literal|"] is no longer valid - passed the read limit ["
operator|+
name|readlimit
operator|+
literal|"]"
argument_list|)
throw|;
block|}
name|position
operator|=
name|mark
expr_stmt|;
name|eof
operator|=
literal|false
expr_stmt|;
block|}
comment|/**      * Skip a specified number of bytes.      *      * @param numberOfBytes The number of bytes to skip.      * @return The number of bytes skipped or<code>-1</code>      * if the end of file has been reached and      *<code>throwEofException</code> is set to<code>false</code>.      * @throws EOFException if the end of file is reached and      *<code>throwEofException</code> is set to<code>true</code>.      * @throws IOException if trying to read past the end of file.      */
annotation|@
name|Override
specifier|public
name|long
name|skip
parameter_list|(
name|long
name|numberOfBytes
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|eof
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Skip after end of file"
argument_list|)
throw|;
block|}
if|if
condition|(
name|position
operator|==
name|size
condition|)
block|{
return|return
name|doEndOfFile
argument_list|()
return|;
block|}
name|position
operator|+=
name|numberOfBytes
expr_stmt|;
name|long
name|returnLength
init|=
name|numberOfBytes
decl_stmt|;
if|if
condition|(
name|position
operator|>
name|size
condition|)
block|{
name|returnLength
operator|=
name|numberOfBytes
operator|-
operator|(
name|position
operator|-
name|size
operator|)
expr_stmt|;
name|position
operator|=
name|size
expr_stmt|;
block|}
return|return
name|returnLength
return|;
block|}
comment|/**      * Return a byte value for the<code>read()</code> method.      *<p>      * This implementation returns zero.      *      * @return This implementation always returns zero.      */
specifier|protected
name|int
name|processByte
parameter_list|()
block|{
comment|// do nothing - overridable by subclass
return|return
literal|0
return|;
block|}
comment|/**      * Process the bytes for the<code>read(byte[], offset, length)</code>      * method.      *<p>      * This implementation leaves the byte array unchanged.      *      * @param bytes The byte array      * @param offset The offset to start at.      * @param length The number of bytes.      */
specifier|protected
name|void
name|processBytes
parameter_list|(
name|byte
index|[]
name|bytes
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|)
block|{
comment|// do nothing - overridable by subclass
block|}
comment|/**      * Handle End of File.      *      * @return<code>-1</code> if<code>throwEofException</code> is      * set to<code>false</code>      * @throws EOFException if<code>throwEofException</code> is set      * to<code>true</code>.      */
specifier|private
name|int
name|doEndOfFile
parameter_list|()
throws|throws
name|EOFException
block|{
name|eof
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|throwEofException
condition|)
block|{
throw|throw
operator|new
name|EOFException
argument_list|()
throw|;
block|}
return|return
operator|-
literal|1
return|;
block|}
block|}
end_class

end_unit

