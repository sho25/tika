begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *   *      http://www.apache.org/licenses/LICENSE-2.0  *   * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|io
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|CharArrayWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStreamWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Reader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Writer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|channels
operator|.
name|Channel
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
operator|.
name|UTF_8
import|;
end_import

begin_comment
comment|/**  * General IO stream manipulation utilities.  *<p>  * This class provides static utility methods for input/output operations.  *<ul>  *<li>closeQuietly - these methods close a stream ignoring nulls and exceptions  *<li>toXxx/read - these methods read data from a stream  *<li>write - these methods write data to a stream  *<li>copy - these methods copy all the data from one stream to another  *<li>contentEquals - these methods compare the content of two streams  *</ul>  *<p>  * The byte-to-char methods and char-to-byte methods involve a conversion step.  * Two methods are provided in each case, one that uses the platform default  * encoding and the other which allows you to specify an encoding. You are  * encouraged to always specify an encoding because relying on the platform  * default can lead to unexpected results, for example when moving from  * development to production.  *<p>  * All the methods in this class that read a stream are buffered internally.  * This means that there is no cause to use a<code>BufferedInputStream</code>  * or<code>BufferedReader</code>. The default buffer size of 4K has been shown  * to be efficient in tests.  *<p>  * Wherever possible, the methods in this class do<em>not</em> flush or close  * the stream. This is to avoid making non-portable assumptions about the  * streams' origin and further use. Thus the caller is still responsible for  * closing streams after use.  *<p>  * Origin of code: Excalibur.  *  * @author Peter Donald  * @author Jeff Turner  * @author Matthew Hawthorne  * @author Stephen Colebourne  * @author Gareth Davis  * @author Ian Springer  * @author Niall Pemberton  * @author Sandy McArthur  * @since Apache Tika 0.4, copied (partially) from Commons IO 1.4  */
end_comment

begin_class
specifier|public
class|class
name|IOUtils
block|{
comment|// TODO Remove this when we've finished TIKA-1706 and TIKA-1710
specifier|public
specifier|static
specifier|final
name|Charset
name|UTF_8
init|=
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
operator|.
name|UTF_8
decl_stmt|;
comment|/**      * The default buffer size to use.      */
specifier|private
specifier|static
specifier|final
name|int
name|DEFAULT_BUFFER_SIZE
init|=
literal|1024
operator|*
literal|4
decl_stmt|;
comment|/**      * Instances should NOT be constructed in standard programming.      */
specifier|public
name|IOUtils
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
comment|//-----------------------------------------------------------------------
comment|/**      * Unconditionally close an<code>Reader</code>.      *<p>      * Equivalent to {@link Reader#close()}, except any exceptions will be ignored.      * This is typically used in finally blocks.      *      * @param input  the Reader to close, may be null or already closed      */
specifier|public
specifier|static
name|void
name|closeQuietly
parameter_list|(
name|Reader
name|input
parameter_list|)
block|{
try|try
block|{
if|if
condition|(
name|input
operator|!=
literal|null
condition|)
block|{
name|input
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
comment|// ignore
block|}
block|}
comment|/**      * Unconditionally close a<code>Channel</code>.      *<p>      * Equivalent to {@link Channel#close()}, except any exceptions will be ignored.      * This is typically used in finally blocks.      *      * @param channel the Channel to close, may be null or already closed      */
specifier|public
specifier|static
name|void
name|closeQuietly
parameter_list|(
name|Channel
name|channel
parameter_list|)
block|{
try|try
block|{
if|if
condition|(
name|channel
operator|!=
literal|null
condition|)
block|{
name|channel
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
comment|// ignore
block|}
block|}
comment|/**      * Unconditionally close a<code>Writer</code>.      *<p>      * Equivalent to {@link Writer#close()}, except any exceptions will be ignored.      * This is typically used in finally blocks.      *      * @param output  the Writer to close, may be null or already closed      */
specifier|public
specifier|static
name|void
name|closeQuietly
parameter_list|(
name|Writer
name|output
parameter_list|)
block|{
try|try
block|{
if|if
condition|(
name|output
operator|!=
literal|null
condition|)
block|{
name|output
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
comment|// ignore
block|}
block|}
comment|/**      * Unconditionally close an<code>InputStream</code>.      *<p>      * Equivalent to {@link InputStream#close()}, except any exceptions will be ignored.      * This is typically used in finally blocks.      *      * @param input  the InputStream to close, may be null or already closed      */
specifier|public
specifier|static
name|void
name|closeQuietly
parameter_list|(
name|InputStream
name|input
parameter_list|)
block|{
try|try
block|{
if|if
condition|(
name|input
operator|!=
literal|null
condition|)
block|{
name|input
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
comment|// ignore
block|}
block|}
comment|/**      * Unconditionally close an<code>OutputStream</code>.      *<p>      * Equivalent to {@link OutputStream#close()}, except any exceptions will be ignored.      * This is typically used in finally blocks.      *      * @param output  the OutputStream to close, may be null or already closed      */
specifier|public
specifier|static
name|void
name|closeQuietly
parameter_list|(
name|OutputStream
name|output
parameter_list|)
block|{
try|try
block|{
if|if
condition|(
name|output
operator|!=
literal|null
condition|)
block|{
name|output
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
comment|// ignore
block|}
block|}
comment|// read toByteArray
comment|//-----------------------------------------------------------------------
comment|/**      * Get the contents of an<code>InputStream</code> as a<code>byte[]</code>.      *<p>      * This method buffers the input internally, so there is no need to use a      *<code>BufferedInputStream</code>.      *       * @param input  the<code>InputStream</code> to read from      * @return the requested byte array      * @throws NullPointerException if the input is null      * @throws IOException if an I/O error occurs      */
specifier|public
specifier|static
name|byte
index|[]
name|toByteArray
parameter_list|(
name|InputStream
name|input
parameter_list|)
throws|throws
name|IOException
block|{
name|ByteArrayOutputStream
name|output
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|copy
argument_list|(
name|input
argument_list|,
name|output
argument_list|)
expr_stmt|;
return|return
name|output
operator|.
name|toByteArray
argument_list|()
return|;
block|}
comment|/**      * Get the contents of a<code>Reader</code> as a<code>byte[]</code>      * using the default character encoding of the platform.      *<p>      * This method buffers the input internally, so there is no need to use a      *<code>BufferedReader</code>.      *       * @param input  the<code>Reader</code> to read from      * @return the requested byte array      * @throws NullPointerException if the input is null      * @throws IOException if an I/O error occurs      */
specifier|public
specifier|static
name|byte
index|[]
name|toByteArray
parameter_list|(
name|Reader
name|input
parameter_list|)
throws|throws
name|IOException
block|{
name|ByteArrayOutputStream
name|output
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|copy
argument_list|(
name|input
argument_list|,
name|output
argument_list|)
expr_stmt|;
return|return
name|output
operator|.
name|toByteArray
argument_list|()
return|;
block|}
comment|/**      * Get the contents of a<code>Reader</code> as a<code>byte[]</code>      * using the specified character encoding.      *<p>      * Character encoding names can be found at      *<a href="http://www.iana.org/assignments/character-sets">IANA</a>.      *<p>      * This method buffers the input internally, so there is no need to use a      *<code>BufferedReader</code>.      *       * @param input  the<code>Reader</code> to read from      * @param encoding  the encoding to use, null means platform default      * @return the requested byte array      * @throws NullPointerException if the input is null      * @throws IOException if an I/O error occurs      * @since Commons IO 1.1      */
specifier|public
specifier|static
name|byte
index|[]
name|toByteArray
parameter_list|(
name|Reader
name|input
parameter_list|,
name|String
name|encoding
parameter_list|)
throws|throws
name|IOException
block|{
name|ByteArrayOutputStream
name|output
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|copy
argument_list|(
name|input
argument_list|,
name|output
argument_list|,
name|encoding
argument_list|)
expr_stmt|;
return|return
name|output
operator|.
name|toByteArray
argument_list|()
return|;
block|}
comment|/**      * Get the contents of a<code>String</code> as a<code>byte[]</code>      * using the default character encoding of the platform.      *<p>      * This is the same as {@link String#getBytes()}.      *       * @param input  the<code>String</code> to convert      * @return the requested byte array      * @throws NullPointerException if the input is null      * @throws IOException if an I/O error occurs (never occurs)      * @deprecated Use {@link String#getBytes()}      */
annotation|@
name|Deprecated
specifier|public
specifier|static
name|byte
index|[]
name|toByteArray
parameter_list|(
name|String
name|input
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|input
operator|.
name|getBytes
argument_list|(
name|UTF_8
argument_list|)
return|;
block|}
comment|// read char[]
comment|//-----------------------------------------------------------------------
comment|/**      * Get the contents of an<code>InputStream</code> as a character array      * using the default character encoding of the platform.      *<p>      * This method buffers the input internally, so there is no need to use a      *<code>BufferedInputStream</code>.      *       * @param is  the<code>InputStream</code> to read from      * @return the requested character array      * @throws NullPointerException if the input is null      * @throws IOException if an I/O error occurs      * @since Commons IO 1.1      */
specifier|public
specifier|static
name|char
index|[]
name|toCharArray
parameter_list|(
name|InputStream
name|is
parameter_list|)
throws|throws
name|IOException
block|{
name|CharArrayWriter
name|output
init|=
operator|new
name|CharArrayWriter
argument_list|()
decl_stmt|;
name|copy
argument_list|(
name|is
argument_list|,
name|output
argument_list|)
expr_stmt|;
return|return
name|output
operator|.
name|toCharArray
argument_list|()
return|;
block|}
comment|/**      * Get the contents of an<code>InputStream</code> as a character array      * using the specified character encoding.      *<p>      * Character encoding names can be found at      *<a href="http://www.iana.org/assignments/character-sets">IANA</a>.      *<p>      * This method buffers the input internally, so there is no need to use a      *<code>BufferedInputStream</code>.      *       * @param is  the<code>InputStream</code> to read from      * @param encoding  the encoding to use, null means platform default      * @return the requested character array      * @throws NullPointerException if the input is null      * @throws IOException if an I/O error occurs      * @since Commons IO 1.1      */
specifier|public
specifier|static
name|char
index|[]
name|toCharArray
parameter_list|(
name|InputStream
name|is
parameter_list|,
name|String
name|encoding
parameter_list|)
throws|throws
name|IOException
block|{
name|CharArrayWriter
name|output
init|=
operator|new
name|CharArrayWriter
argument_list|()
decl_stmt|;
name|copy
argument_list|(
name|is
argument_list|,
name|output
argument_list|,
name|encoding
argument_list|)
expr_stmt|;
return|return
name|output
operator|.
name|toCharArray
argument_list|()
return|;
block|}
comment|/**      * Get the contents of a<code>Reader</code> as a character array.      *<p>      * This method buffers the input internally, so there is no need to use a      *<code>BufferedReader</code>.      *       * @param input  the<code>Reader</code> to read from      * @return the requested character array      * @throws NullPointerException if the input is null      * @throws IOException if an I/O error occurs      * @since Commons IO 1.1      */
specifier|public
specifier|static
name|char
index|[]
name|toCharArray
parameter_list|(
name|Reader
name|input
parameter_list|)
throws|throws
name|IOException
block|{
name|CharArrayWriter
name|sw
init|=
operator|new
name|CharArrayWriter
argument_list|()
decl_stmt|;
name|copy
argument_list|(
name|input
argument_list|,
name|sw
argument_list|)
expr_stmt|;
return|return
name|sw
operator|.
name|toCharArray
argument_list|()
return|;
block|}
comment|// read toString
comment|//-----------------------------------------------------------------------
comment|/**      * Get the contents of an<code>InputStream</code> as a String      * using the default character encoding of the platform.      *<p>      * This method buffers the input internally, so there is no need to use a      *<code>BufferedInputStream</code>.      *       * @param input  the<code>InputStream</code> to read from      * @return the requested String      * @throws NullPointerException if the input is null      * @throws IOException if an I/O error occurs      */
specifier|public
specifier|static
name|String
name|toString
parameter_list|(
name|InputStream
name|input
parameter_list|)
throws|throws
name|IOException
block|{
name|StringWriter
name|sw
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|copy
argument_list|(
name|input
argument_list|,
name|sw
argument_list|)
expr_stmt|;
return|return
name|sw
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**      * Get the contents of an<code>InputStream</code> as a String      * using the specified character encoding.      *<p>      * Character encoding names can be found at      *<a href="http://www.iana.org/assignments/character-sets">IANA</a>.      *<p>      * This method buffers the input internally, so there is no need to use a      *<code>BufferedInputStream</code>.      *       * @param input  the<code>InputStream</code> to read from      * @param encoding  the encoding to use, null means platform default      * @return the requested String      * @throws NullPointerException if the input is null      * @throws IOException if an I/O error occurs      */
specifier|public
specifier|static
name|String
name|toString
parameter_list|(
name|InputStream
name|input
parameter_list|,
name|String
name|encoding
parameter_list|)
throws|throws
name|IOException
block|{
name|StringWriter
name|sw
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|copy
argument_list|(
name|input
argument_list|,
name|sw
argument_list|,
name|encoding
argument_list|)
expr_stmt|;
return|return
name|sw
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**      * Get the contents of a<code>Reader</code> as a String.      *<p>      * This method buffers the input internally, so there is no need to use a      *<code>BufferedReader</code>.      *       * @param input  the<code>Reader</code> to read from      * @return the requested String      * @throws NullPointerException if the input is null      * @throws IOException if an I/O error occurs      */
specifier|public
specifier|static
name|String
name|toString
parameter_list|(
name|Reader
name|input
parameter_list|)
throws|throws
name|IOException
block|{
name|StringWriter
name|sw
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|copy
argument_list|(
name|input
argument_list|,
name|sw
argument_list|)
expr_stmt|;
return|return
name|sw
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**      * Get the contents of a<code>byte[]</code> as a String      * using the default character encoding of the platform.      *       * @param input the byte array to read from      * @return the requested String      * @throws NullPointerException if the input is null      * @throws IOException if an I/O error occurs (never occurs)      * @deprecated Use {@link String#String(byte[])}      */
annotation|@
name|Deprecated
specifier|public
specifier|static
name|String
name|toString
parameter_list|(
name|byte
index|[]
name|input
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|String
argument_list|(
name|input
argument_list|,
name|UTF_8
argument_list|)
return|;
block|}
comment|/**      * Get the contents of a<code>byte[]</code> as a String      * using the specified character encoding.      *<p>      * Character encoding names can be found at      *<a href="http://www.iana.org/assignments/character-sets">IANA</a>.      *       * @param input the byte array to read from      * @param encoding  the encoding to use, null means platform default      * @return the requested String      * @throws NullPointerException if the input is null      * @throws IOException if an I/O error occurs (never occurs)      * @deprecated Use {@link String#String(byte[],String)}      */
annotation|@
name|Deprecated
specifier|public
specifier|static
name|String
name|toString
parameter_list|(
name|byte
index|[]
name|input
parameter_list|,
name|String
name|encoding
parameter_list|)
throws|throws
name|IOException
block|{
comment|// If no encoding is specified, default to UTF-8.
if|if
condition|(
name|encoding
operator|==
literal|null
condition|)
block|{
return|return
operator|new
name|String
argument_list|(
name|input
argument_list|,
name|UTF_8
argument_list|)
return|;
block|}
else|else
block|{
return|return
operator|new
name|String
argument_list|(
name|input
argument_list|,
name|encoding
argument_list|)
return|;
block|}
block|}
comment|// readLines
comment|//-----------------------------------------------------------------------
comment|/**      * Get the contents of an<code>InputStream</code> as a list of Strings,      * one entry per line, using the default character encoding of the platform.      *<p>      * This method buffers the input internally, so there is no need to use a      *<code>BufferedInputStream</code>.      *      * @param input  the<code>InputStream</code> to read from, not null      * @return the list of Strings, never null      * @throws NullPointerException if the input is null      * @throws IOException if an I/O error occurs      * @since Commons IO 1.1      */
specifier|public
specifier|static
name|List
argument_list|<
name|String
argument_list|>
name|readLines
parameter_list|(
name|InputStream
name|input
parameter_list|)
throws|throws
name|IOException
block|{
name|InputStreamReader
name|reader
init|=
operator|new
name|InputStreamReader
argument_list|(
name|input
argument_list|,
name|UTF_8
argument_list|)
decl_stmt|;
return|return
name|readLines
argument_list|(
name|reader
argument_list|)
return|;
block|}
comment|/**      * Get the contents of an<code>InputStream</code> as a list of Strings,      * one entry per line, using the specified character encoding.      *<p>      * Character encoding names can be found at      *<a href="http://www.iana.org/assignments/character-sets">IANA</a>.      *<p>      * This method buffers the input internally, so there is no need to use a      *<code>BufferedInputStream</code>.      *      * @param input  the<code>InputStream</code> to read from, not null      * @param encoding  the encoding to use, null means platform default      * @return the list of Strings, never null      * @throws NullPointerException if the input is null      * @throws IOException if an I/O error occurs      * @since Commons IO 1.1      */
specifier|public
specifier|static
name|List
argument_list|<
name|String
argument_list|>
name|readLines
parameter_list|(
name|InputStream
name|input
parameter_list|,
name|String
name|encoding
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|encoding
operator|==
literal|null
condition|)
block|{
return|return
name|readLines
argument_list|(
name|input
argument_list|)
return|;
block|}
else|else
block|{
name|InputStreamReader
name|reader
init|=
operator|new
name|InputStreamReader
argument_list|(
name|input
argument_list|,
name|encoding
argument_list|)
decl_stmt|;
return|return
name|readLines
argument_list|(
name|reader
argument_list|)
return|;
block|}
block|}
comment|/**      * Get the contents of a<code>Reader</code> as a list of Strings,      * one entry per line.      *<p>      * This method buffers the input internally, so there is no need to use a      *<code>BufferedReader</code>.      *      * @param input  the<code>Reader</code> to read from, not null      * @return the list of Strings, never null      * @throws NullPointerException if the input is null      * @throws IOException if an I/O error occurs      * @since Commons IO 1.1      */
specifier|public
specifier|static
name|List
argument_list|<
name|String
argument_list|>
name|readLines
parameter_list|(
name|Reader
name|input
parameter_list|)
throws|throws
name|IOException
block|{
name|BufferedReader
name|reader
init|=
operator|new
name|BufferedReader
argument_list|(
name|input
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|String
name|line
init|=
name|reader
operator|.
name|readLine
argument_list|()
decl_stmt|;
while|while
condition|(
name|line
operator|!=
literal|null
condition|)
block|{
name|list
operator|.
name|add
argument_list|(
name|line
argument_list|)
expr_stmt|;
name|line
operator|=
name|reader
operator|.
name|readLine
argument_list|()
expr_stmt|;
block|}
return|return
name|list
return|;
block|}
comment|//-----------------------------------------------------------------------
comment|/**      * Convert the specified CharSequence to an input stream, encoded as bytes      * using the default character encoding of the platform.      *      * @param input the CharSequence to convert      * @return an input stream      * @since IO 2.0      */
specifier|public
specifier|static
name|InputStream
name|toInputStream
parameter_list|(
name|CharSequence
name|input
parameter_list|)
block|{
return|return
name|toInputStream
argument_list|(
name|input
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * Convert the specified CharSequence to an input stream, encoded as bytes      * using the specified character encoding.      *<p>      * Character encoding names can be found at      *<a href="http://www.iana.org/assignments/character-sets">IANA</a>.      *      * @param input the CharSequence to convert      * @param encoding the encoding to use, null means platform default      * @throws IOException if the encoding is invalid      * @return an input stream      * @since IO 2.0      */
specifier|public
specifier|static
name|InputStream
name|toInputStream
parameter_list|(
name|CharSequence
name|input
parameter_list|,
name|String
name|encoding
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|toInputStream
argument_list|(
name|input
operator|.
name|toString
argument_list|()
argument_list|,
name|encoding
argument_list|)
return|;
block|}
comment|//-----------------------------------------------------------------------
comment|/**      * Convert the specified string to an input stream, encoded as bytes      * using the default character encoding of the platform.      *      * @param input the string to convert      * @return an input stream      * @since Commons IO 1.1      */
specifier|public
specifier|static
name|InputStream
name|toInputStream
parameter_list|(
name|String
name|input
parameter_list|)
block|{
name|byte
index|[]
name|bytes
init|=
name|input
operator|.
name|getBytes
argument_list|(
name|UTF_8
argument_list|)
decl_stmt|;
return|return
operator|new
name|ByteArrayInputStream
argument_list|(
name|bytes
argument_list|)
return|;
block|}
comment|/**      * Convert the specified string to an input stream, encoded as bytes      * using the specified character encoding.      *<p>      * Character encoding names can be found at      *<a href="http://www.iana.org/assignments/character-sets">IANA</a>.      *      * @param input the string to convert      * @param encoding the encoding to use, null means platform default      * @throws IOException if the encoding is invalid      * @return an input stream      * @since Commons IO 1.1      */
specifier|public
specifier|static
name|InputStream
name|toInputStream
parameter_list|(
name|String
name|input
parameter_list|,
name|String
name|encoding
parameter_list|)
throws|throws
name|IOException
block|{
name|byte
index|[]
name|bytes
init|=
name|encoding
operator|!=
literal|null
condition|?
name|input
operator|.
name|getBytes
argument_list|(
name|encoding
argument_list|)
else|:
name|input
operator|.
name|getBytes
argument_list|(
name|UTF_8
argument_list|)
decl_stmt|;
return|return
operator|new
name|ByteArrayInputStream
argument_list|(
name|bytes
argument_list|)
return|;
block|}
comment|// write byte[]
comment|//-----------------------------------------------------------------------
comment|/**      * Writes bytes from a<code>byte[]</code> to an<code>OutputStream</code>.      *       * @param data  the byte array to write, do not modify during output,      * null ignored      * @param output  the<code>OutputStream</code> to write to      * @throws NullPointerException if output is null      * @throws IOException if an I/O error occurs      * @since Commons IO 1.1      */
specifier|public
specifier|static
name|void
name|write
parameter_list|(
name|byte
index|[]
name|data
parameter_list|,
name|OutputStream
name|output
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|data
operator|!=
literal|null
condition|)
block|{
name|output
operator|.
name|write
argument_list|(
name|data
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Writes bytes from a<code>byte[]</code> to chars on a<code>Writer</code>      * using the default character encoding of the platform.      *<p>      * This method uses {@link String#String(byte[])}.      *       * @param data  the byte array to write, do not modify during output,      * null ignored      * @param output  the<code>Writer</code> to write to      * @throws NullPointerException if output is null      * @throws IOException if an I/O error occurs      * @since Commons IO 1.1      */
specifier|public
specifier|static
name|void
name|write
parameter_list|(
name|byte
index|[]
name|data
parameter_list|,
name|Writer
name|output
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|data
operator|!=
literal|null
condition|)
block|{
name|output
operator|.
name|write
argument_list|(
operator|new
name|String
argument_list|(
name|data
argument_list|,
name|UTF_8
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Writes bytes from a<code>byte[]</code> to chars on a<code>Writer</code>      * using the specified character encoding.      *<p>      * Character encoding names can be found at      *<a href="http://www.iana.org/assignments/character-sets">IANA</a>.      *<p>      * This method uses {@link String#String(byte[], String)}.      *       * @param data  the byte array to write, do not modify during output,      * null ignored      * @param output  the<code>Writer</code> to write to      * @param encoding  the encoding to use, null means platform default      * @throws NullPointerException if output is null      * @throws IOException if an I/O error occurs      * @since Commons IO 1.1      */
specifier|public
specifier|static
name|void
name|write
parameter_list|(
name|byte
index|[]
name|data
parameter_list|,
name|Writer
name|output
parameter_list|,
name|String
name|encoding
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|data
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|encoding
operator|==
literal|null
condition|)
block|{
name|write
argument_list|(
name|data
argument_list|,
name|output
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|output
operator|.
name|write
argument_list|(
operator|new
name|String
argument_list|(
name|data
argument_list|,
name|encoding
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// write char[]
comment|//-----------------------------------------------------------------------
comment|/**      * Writes chars from a<code>char[]</code> to a<code>Writer</code>      * using the default character encoding of the platform.      *       * @param data  the char array to write, do not modify during output,      * null ignored      * @param output  the<code>Writer</code> to write to      * @throws NullPointerException if output is null      * @throws IOException if an I/O error occurs      * @since Commons IO 1.1      */
specifier|public
specifier|static
name|void
name|write
parameter_list|(
name|char
index|[]
name|data
parameter_list|,
name|Writer
name|output
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|data
operator|!=
literal|null
condition|)
block|{
name|output
operator|.
name|write
argument_list|(
name|data
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Writes chars from a<code>char[]</code> to bytes on an      *<code>OutputStream</code>.      *<p>      * This method uses {@link String#String(char[])} and      * {@link String#getBytes()}.      *       * @param data  the char array to write, do not modify during output,      * null ignored      * @param output  the<code>OutputStream</code> to write to      * @throws NullPointerException if output is null      * @throws IOException if an I/O error occurs      * @since Commons IO 1.1      */
specifier|public
specifier|static
name|void
name|write
parameter_list|(
name|char
index|[]
name|data
parameter_list|,
name|OutputStream
name|output
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|data
operator|!=
literal|null
condition|)
block|{
name|output
operator|.
name|write
argument_list|(
operator|new
name|String
argument_list|(
name|data
argument_list|)
operator|.
name|getBytes
argument_list|(
name|UTF_8
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Writes chars from a<code>char[]</code> to bytes on an      *<code>OutputStream</code> using the specified character encoding.      *<p>      * Character encoding names can be found at      *<a href="http://www.iana.org/assignments/character-sets">IANA</a>.      *<p>      * This method uses {@link String#String(char[])} and      * {@link String#getBytes(String)}.      *       * @param data  the char array to write, do not modify during output,      * null ignored      * @param output  the<code>OutputStream</code> to write to      * @param encoding  the encoding to use, null means platform default      * @throws NullPointerException if output is null      * @throws IOException if an I/O error occurs      * @since Commons IO 1.1      */
specifier|public
specifier|static
name|void
name|write
parameter_list|(
name|char
index|[]
name|data
parameter_list|,
name|OutputStream
name|output
parameter_list|,
name|String
name|encoding
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|data
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|encoding
operator|==
literal|null
condition|)
block|{
name|write
argument_list|(
name|data
argument_list|,
name|output
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|output
operator|.
name|write
argument_list|(
operator|new
name|String
argument_list|(
name|data
argument_list|)
operator|.
name|getBytes
argument_list|(
name|encoding
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// write CharSequence
comment|//-----------------------------------------------------------------------
comment|/**      * Writes chars from a<code>CharSequence</code> to a<code>Writer</code>.      *       * @param data  the<code>CharSequence</code> to write, null ignored      * @param output  the<code>Writer</code> to write to      * @throws NullPointerException if output is null      * @throws IOException if an I/O error occurs      * @since Commons IO 2.0      */
specifier|public
specifier|static
name|void
name|write
parameter_list|(
name|CharSequence
name|data
parameter_list|,
name|Writer
name|output
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|data
operator|!=
literal|null
condition|)
block|{
name|write
argument_list|(
name|data
operator|.
name|toString
argument_list|()
argument_list|,
name|output
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Writes chars from a<code>CharSequence</code> to bytes on an      *<code>OutputStream</code> using the default character encoding of the      * platform.      *<p>      * This method uses {@link String#getBytes()}.      *       * @param data  the<code>CharSequence</code> to write, null ignored      * @param output  the<code>OutputStream</code> to write to      * @throws NullPointerException if output is null      * @throws IOException if an I/O error occurs      * @since Commons IO 2.0      */
specifier|public
specifier|static
name|void
name|write
parameter_list|(
name|CharSequence
name|data
parameter_list|,
name|OutputStream
name|output
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|data
operator|!=
literal|null
condition|)
block|{
name|write
argument_list|(
name|data
operator|.
name|toString
argument_list|()
argument_list|,
name|output
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Writes chars from a<code>CharSequence</code> to bytes on an      *<code>OutputStream</code> using the specified character encoding.      *<p>      * Character encoding names can be found at      *<a href="http://www.iana.org/assignments/character-sets">IANA</a>.      *<p>      * This method uses {@link String#getBytes(String)}.      *       * @param data  the<code>CharSequence</code> to write, null ignored      * @param output  the<code>OutputStream</code> to write to      * @param encoding  the encoding to use, null means platform default      * @throws NullPointerException if output is null      * @throws IOException if an I/O error occurs      * @since Commons IO 2.0      */
specifier|public
specifier|static
name|void
name|write
parameter_list|(
name|CharSequence
name|data
parameter_list|,
name|OutputStream
name|output
parameter_list|,
name|String
name|encoding
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|data
operator|!=
literal|null
condition|)
block|{
name|write
argument_list|(
name|data
operator|.
name|toString
argument_list|()
argument_list|,
name|output
argument_list|,
name|encoding
argument_list|)
expr_stmt|;
block|}
block|}
comment|// write String
comment|//-----------------------------------------------------------------------
comment|/**      * Writes chars from a<code>String</code> to a<code>Writer</code>.      *       * @param data  the<code>String</code> to write, null ignored      * @param output  the<code>Writer</code> to write to      * @throws NullPointerException if output is null      * @throws IOException if an I/O error occurs      * @since Commons IO 1.1      */
specifier|public
specifier|static
name|void
name|write
parameter_list|(
name|String
name|data
parameter_list|,
name|Writer
name|output
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|data
operator|!=
literal|null
condition|)
block|{
name|output
operator|.
name|write
argument_list|(
name|data
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Writes chars from a<code>String</code> to bytes on an      *<code>OutputStream</code> using the default character encoding of the      * platform.      *<p>      * This method uses {@link String#getBytes()}.      *       * @param data  the<code>String</code> to write, null ignored      * @param output  the<code>OutputStream</code> to write to      * @throws NullPointerException if output is null      * @throws IOException if an I/O error occurs      * @since Commons IO 1.1      */
specifier|public
specifier|static
name|void
name|write
parameter_list|(
name|String
name|data
parameter_list|,
name|OutputStream
name|output
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|data
operator|!=
literal|null
condition|)
block|{
name|output
operator|.
name|write
argument_list|(
name|data
operator|.
name|getBytes
argument_list|(
name|UTF_8
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Writes chars from a<code>String</code> to bytes on an      *<code>OutputStream</code> using the specified character encoding.      *<p>      * Character encoding names can be found at      *<a href="http://www.iana.org/assignments/character-sets">IANA</a>.      *<p>      * This method uses {@link String#getBytes(String)}.      *       * @param data  the<code>String</code> to write, null ignored      * @param output  the<code>OutputStream</code> to write to      * @param encoding  the encoding to use, null means platform default      * @throws NullPointerException if output is null      * @throws IOException if an I/O error occurs      * @since Commons IO 1.1      */
specifier|public
specifier|static
name|void
name|write
parameter_list|(
name|String
name|data
parameter_list|,
name|OutputStream
name|output
parameter_list|,
name|String
name|encoding
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|data
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|encoding
operator|==
literal|null
condition|)
block|{
name|write
argument_list|(
name|data
argument_list|,
name|output
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|output
operator|.
name|write
argument_list|(
name|data
operator|.
name|getBytes
argument_list|(
name|encoding
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// write StringBuffer
comment|//-----------------------------------------------------------------------
comment|/**      * Writes chars from a<code>StringBuffer</code> to a<code>Writer</code>.      *       * @param data  the<code>StringBuffer</code> to write, null ignored      * @param output  the<code>Writer</code> to write to      * @throws NullPointerException if output is null      * @throws IOException if an I/O error occurs      * @since Commons IO 1.1      * @deprecated replaced by write(CharSequence, Writer)      */
annotation|@
name|Deprecated
specifier|public
specifier|static
name|void
name|write
parameter_list|(
name|StringBuffer
name|data
parameter_list|,
name|Writer
name|output
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|data
operator|!=
literal|null
condition|)
block|{
name|output
operator|.
name|write
argument_list|(
name|data
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Writes chars from a<code>StringBuffer</code> to bytes on an      *<code>OutputStream</code> using the default character encoding of the      * platform.      *<p>      * This method uses {@link String#getBytes()}.      *       * @param data  the<code>StringBuffer</code> to write, null ignored      * @param output  the<code>OutputStream</code> to write to      * @throws NullPointerException if output is null      * @throws IOException if an I/O error occurs      * @since Commons IO 1.1      * @deprecated replaced by write(CharSequence, OutputStream)      */
annotation|@
name|Deprecated
specifier|public
specifier|static
name|void
name|write
parameter_list|(
name|StringBuffer
name|data
parameter_list|,
name|OutputStream
name|output
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|data
operator|!=
literal|null
condition|)
block|{
name|output
operator|.
name|write
argument_list|(
name|data
operator|.
name|toString
argument_list|()
operator|.
name|getBytes
argument_list|(
name|UTF_8
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Writes chars from a<code>StringBuffer</code> to bytes on an      *<code>OutputStream</code> using the specified character encoding.      *<p>      * Character encoding names can be found at      *<a href="http://www.iana.org/assignments/character-sets">IANA</a>.      *<p>      * This method uses {@link String#getBytes(String)}.      *       * @param data  the<code>StringBuffer</code> to write, null ignored      * @param output  the<code>OutputStream</code> to write to      * @param encoding  the encoding to use, null means platform default      * @throws NullPointerException if output is null      * @throws IOException if an I/O error occurs      * @since Commons IO 1.1      * @deprecated replaced by write(CharSequence, OutputStream, String)      */
annotation|@
name|Deprecated
specifier|public
specifier|static
name|void
name|write
parameter_list|(
name|StringBuffer
name|data
parameter_list|,
name|OutputStream
name|output
parameter_list|,
name|String
name|encoding
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|data
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|encoding
operator|==
literal|null
condition|)
block|{
name|write
argument_list|(
name|data
argument_list|,
name|output
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|output
operator|.
name|write
argument_list|(
name|data
operator|.
name|toString
argument_list|()
operator|.
name|getBytes
argument_list|(
name|encoding
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// copy from InputStream
comment|//-----------------------------------------------------------------------
comment|/**      * Copy bytes from an<code>InputStream</code> to an      *<code>OutputStream</code>.      *<p>      * This method buffers the input internally, so there is no need to use a      *<code>BufferedInputStream</code>.      *<p>      * Large streams (over 2GB) will return a bytes copied value of      *<code>-1</code> after the copy has completed since the correct      * number of bytes cannot be returned as an int. For large streams      * use the<code>copyLarge(InputStream, OutputStream)</code> method.      *       * @param input  the<code>InputStream</code> to read from      * @param output  the<code>OutputStream</code> to write to      * @return the number of bytes copied      * @throws NullPointerException if the input or output is null      * @throws IOException if an I/O error occurs      * @throws ArithmeticException if the byte count is too large      * @since Commons IO 1.1      */
specifier|public
specifier|static
name|int
name|copy
parameter_list|(
name|InputStream
name|input
parameter_list|,
name|OutputStream
name|output
parameter_list|)
throws|throws
name|IOException
block|{
name|long
name|count
init|=
name|copyLarge
argument_list|(
name|input
argument_list|,
name|output
argument_list|)
decl_stmt|;
if|if
condition|(
name|count
operator|>
name|Integer
operator|.
name|MAX_VALUE
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
return|return
operator|(
name|int
operator|)
name|count
return|;
block|}
comment|/**      * Copy bytes from a large (over 2GB)<code>InputStream</code> to an      *<code>OutputStream</code>.      *<p>      * This method buffers the input internally, so there is no need to use a      *<code>BufferedInputStream</code>.      *       * @param input  the<code>InputStream</code> to read from      * @param output  the<code>OutputStream</code> to write to      * @return the number of bytes copied      * @throws NullPointerException if the input or output is null      * @throws IOException if an I/O error occurs      * @since Commons IO 1.3      */
specifier|public
specifier|static
name|long
name|copyLarge
parameter_list|(
name|InputStream
name|input
parameter_list|,
name|OutputStream
name|output
parameter_list|)
throws|throws
name|IOException
block|{
name|byte
index|[]
name|buffer
init|=
operator|new
name|byte
index|[
name|DEFAULT_BUFFER_SIZE
index|]
decl_stmt|;
name|long
name|count
init|=
literal|0
decl_stmt|;
name|int
name|n
init|=
literal|0
decl_stmt|;
while|while
condition|(
operator|-
literal|1
operator|!=
operator|(
name|n
operator|=
name|input
operator|.
name|read
argument_list|(
name|buffer
argument_list|)
operator|)
condition|)
block|{
name|output
operator|.
name|write
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
name|n
argument_list|)
expr_stmt|;
name|count
operator|+=
name|n
expr_stmt|;
block|}
return|return
name|count
return|;
block|}
comment|/**      * Copy bytes from an<code>InputStream</code> to chars on a      *<code>Writer</code> using the default character encoding of the platform.      *<p>      * This method buffers the input internally, so there is no need to use a      *<code>BufferedInputStream</code>.      *<p>      * This method uses {@link InputStreamReader}.      *      * @param input  the<code>InputStream</code> to read from      * @param output  the<code>Writer</code> to write to      * @throws NullPointerException if the input or output is null      * @throws IOException if an I/O error occurs      * @since Commons IO 1.1      */
specifier|public
specifier|static
name|void
name|copy
parameter_list|(
name|InputStream
name|input
parameter_list|,
name|Writer
name|output
parameter_list|)
throws|throws
name|IOException
block|{
name|InputStreamReader
name|in
init|=
operator|new
name|InputStreamReader
argument_list|(
name|input
argument_list|,
name|UTF_8
argument_list|)
decl_stmt|;
name|copy
argument_list|(
name|in
argument_list|,
name|output
argument_list|)
expr_stmt|;
block|}
comment|/**      * Copy bytes from an<code>InputStream</code> to chars on a      *<code>Writer</code> using the specified character encoding.      *<p>      * This method buffers the input internally, so there is no need to use a      *<code>BufferedInputStream</code>.      *<p>      * Character encoding names can be found at      *<a href="http://www.iana.org/assignments/character-sets">IANA</a>.      *<p>      * This method uses {@link InputStreamReader}.      *      * @param input  the<code>InputStream</code> to read from      * @param output  the<code>Writer</code> to write to      * @param encoding  the encoding to use, null means platform default      * @throws NullPointerException if the input or output is null      * @throws IOException if an I/O error occurs      * @since Commons IO 1.1      */
specifier|public
specifier|static
name|void
name|copy
parameter_list|(
name|InputStream
name|input
parameter_list|,
name|Writer
name|output
parameter_list|,
name|String
name|encoding
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|encoding
operator|==
literal|null
condition|)
block|{
name|copy
argument_list|(
name|input
argument_list|,
name|output
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|InputStreamReader
name|in
init|=
operator|new
name|InputStreamReader
argument_list|(
name|input
argument_list|,
name|encoding
argument_list|)
decl_stmt|;
name|copy
argument_list|(
name|in
argument_list|,
name|output
argument_list|)
expr_stmt|;
block|}
block|}
comment|// copy from Reader
comment|//-----------------------------------------------------------------------
comment|/**      * Copy chars from a<code>Reader</code> to a<code>Writer</code>.      *<p>      * This method buffers the input internally, so there is no need to use a      *<code>BufferedReader</code>.      *<p>      * Large streams (over 2GB) will return a chars copied value of      *<code>-1</code> after the copy has completed since the correct      * number of chars cannot be returned as an int. For large streams      * use the<code>copyLarge(Reader, Writer)</code> method.      *      * @param input  the<code>Reader</code> to read from      * @param output  the<code>Writer</code> to write to      * @return the number of characters copied      * @throws NullPointerException if the input or output is null      * @throws IOException if an I/O error occurs      * @throws ArithmeticException if the character count is too large      * @since Commons IO 1.1      */
specifier|public
specifier|static
name|int
name|copy
parameter_list|(
name|Reader
name|input
parameter_list|,
name|Writer
name|output
parameter_list|)
throws|throws
name|IOException
block|{
name|long
name|count
init|=
name|copyLarge
argument_list|(
name|input
argument_list|,
name|output
argument_list|)
decl_stmt|;
if|if
condition|(
name|count
operator|>
name|Integer
operator|.
name|MAX_VALUE
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
return|return
operator|(
name|int
operator|)
name|count
return|;
block|}
comment|/**      * Copy chars from a large (over 2GB)<code>Reader</code> to a<code>Writer</code>.      *<p>      * This method buffers the input internally, so there is no need to use a      *<code>BufferedReader</code>.      *      * @param input  the<code>Reader</code> to read from      * @param output  the<code>Writer</code> to write to      * @return the number of characters copied      * @throws NullPointerException if the input or output is null      * @throws IOException if an I/O error occurs      * @since Commons IO 1.3      */
specifier|public
specifier|static
name|long
name|copyLarge
parameter_list|(
name|Reader
name|input
parameter_list|,
name|Writer
name|output
parameter_list|)
throws|throws
name|IOException
block|{
name|char
index|[]
name|buffer
init|=
operator|new
name|char
index|[
name|DEFAULT_BUFFER_SIZE
index|]
decl_stmt|;
name|long
name|count
init|=
literal|0
decl_stmt|;
name|int
name|n
init|=
literal|0
decl_stmt|;
while|while
condition|(
operator|-
literal|1
operator|!=
operator|(
name|n
operator|=
name|input
operator|.
name|read
argument_list|(
name|buffer
argument_list|)
operator|)
condition|)
block|{
name|output
operator|.
name|write
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
name|n
argument_list|)
expr_stmt|;
name|count
operator|+=
name|n
expr_stmt|;
block|}
return|return
name|count
return|;
block|}
comment|/**      * Copy chars from a<code>Reader</code> to bytes on an      *<code>OutputStream</code> using the default character encoding of the      * platform, and calling flush.      *<p>      * This method buffers the input internally, so there is no need to use a      *<code>BufferedReader</code>.      *<p>      * Due to the implementation of OutputStreamWriter, this method performs a      * flush.      *<p>      * This method uses {@link OutputStreamWriter}.      *      * @param input  the<code>Reader</code> to read from      * @param output  the<code>OutputStream</code> to write to      * @throws NullPointerException if the input or output is null      * @throws IOException if an I/O error occurs      * @since Commons IO 1.1      */
specifier|public
specifier|static
name|void
name|copy
parameter_list|(
name|Reader
name|input
parameter_list|,
name|OutputStream
name|output
parameter_list|)
throws|throws
name|IOException
block|{
name|OutputStreamWriter
name|out
init|=
operator|new
name|OutputStreamWriter
argument_list|(
name|output
argument_list|,
name|UTF_8
argument_list|)
decl_stmt|;
name|copy
argument_list|(
name|input
argument_list|,
name|out
argument_list|)
expr_stmt|;
comment|// XXX Unless anyone is planning on rewriting OutputStreamWriter, we
comment|// have to flush here.
name|out
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
comment|/**      * Copy chars from a<code>Reader</code> to bytes on an      *<code>OutputStream</code> using the specified character encoding, and      * calling flush.      *<p>      * This method buffers the input internally, so there is no need to use a      *<code>BufferedReader</code>.      *<p>      * Character encoding names can be found at      *<a href="http://www.iana.org/assignments/character-sets">IANA</a>.      *<p>      * Due to the implementation of OutputStreamWriter, this method performs a      * flush.      *<p>      * This method uses {@link OutputStreamWriter}.      *      * @param input  the<code>Reader</code> to read from      * @param output  the<code>OutputStream</code> to write to      * @param encoding  the encoding to use, null means platform default      * @throws NullPointerException if the input or output is null      * @throws IOException if an I/O error occurs      * @since Commons IO 1.1      */
specifier|public
specifier|static
name|void
name|copy
parameter_list|(
name|Reader
name|input
parameter_list|,
name|OutputStream
name|output
parameter_list|,
name|String
name|encoding
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|encoding
operator|==
literal|null
condition|)
block|{
name|copy
argument_list|(
name|input
argument_list|,
name|output
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|OutputStreamWriter
name|out
init|=
operator|new
name|OutputStreamWriter
argument_list|(
name|output
argument_list|,
name|encoding
argument_list|)
decl_stmt|;
name|copy
argument_list|(
name|input
argument_list|,
name|out
argument_list|)
expr_stmt|;
comment|// XXX Unless anyone is planning on rewriting OutputStreamWriter,
comment|// we have to flush here.
name|out
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
block|}
comment|// content equals
comment|//-----------------------------------------------------------------------
comment|/**      * Compare the contents of two Streams to determine if they are equal or      * not.      *<p>      * This method buffers the input internally using      *<code>BufferedInputStream</code> if they are not already buffered.      *      * @param input1  the first stream      * @param input2  the second stream      * @return true if the content of the streams are equal or they both don't      * exist, false otherwise      * @throws NullPointerException if either input is null      * @throws IOException if an I/O error occurs      */
specifier|public
specifier|static
name|boolean
name|contentEquals
parameter_list|(
name|InputStream
name|input1
parameter_list|,
name|InputStream
name|input2
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
operator|(
name|input1
operator|instanceof
name|BufferedInputStream
operator|)
condition|)
block|{
name|input1
operator|=
operator|new
name|BufferedInputStream
argument_list|(
name|input1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
operator|(
name|input2
operator|instanceof
name|BufferedInputStream
operator|)
condition|)
block|{
name|input2
operator|=
operator|new
name|BufferedInputStream
argument_list|(
name|input2
argument_list|)
expr_stmt|;
block|}
name|int
name|ch
init|=
name|input1
operator|.
name|read
argument_list|()
decl_stmt|;
while|while
condition|(
operator|-
literal|1
operator|!=
name|ch
condition|)
block|{
name|int
name|ch2
init|=
name|input2
operator|.
name|read
argument_list|()
decl_stmt|;
if|if
condition|(
name|ch
operator|!=
name|ch2
condition|)
block|{
return|return
literal|false
return|;
block|}
name|ch
operator|=
name|input1
operator|.
name|read
argument_list|()
expr_stmt|;
block|}
name|int
name|ch2
init|=
name|input2
operator|.
name|read
argument_list|()
decl_stmt|;
return|return
operator|(
name|ch2
operator|==
operator|-
literal|1
operator|)
return|;
block|}
comment|/**      * Compare the contents of two Readers to determine if they are equal or      * not.      *<p>      * This method buffers the input internally using      *<code>BufferedReader</code> if they are not already buffered.      *      * @param input1  the first reader      * @param input2  the second reader      * @return true if the content of the readers are equal or they both don't      * exist, false otherwise      * @throws NullPointerException if either input is null      * @throws IOException if an I/O error occurs      * @since Commons IO 1.1      */
specifier|public
specifier|static
name|boolean
name|contentEquals
parameter_list|(
name|Reader
name|input1
parameter_list|,
name|Reader
name|input2
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
operator|(
name|input1
operator|instanceof
name|BufferedReader
operator|)
condition|)
block|{
name|input1
operator|=
operator|new
name|BufferedReader
argument_list|(
name|input1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
operator|(
name|input2
operator|instanceof
name|BufferedReader
operator|)
condition|)
block|{
name|input2
operator|=
operator|new
name|BufferedReader
argument_list|(
name|input2
argument_list|)
expr_stmt|;
block|}
name|int
name|ch
init|=
name|input1
operator|.
name|read
argument_list|()
decl_stmt|;
while|while
condition|(
operator|-
literal|1
operator|!=
name|ch
condition|)
block|{
name|int
name|ch2
init|=
name|input2
operator|.
name|read
argument_list|()
decl_stmt|;
if|if
condition|(
name|ch
operator|!=
name|ch2
condition|)
block|{
return|return
literal|false
return|;
block|}
name|ch
operator|=
name|input1
operator|.
name|read
argument_list|()
expr_stmt|;
block|}
name|int
name|ch2
init|=
name|input2
operator|.
name|read
argument_list|()
decl_stmt|;
return|return
operator|(
name|ch2
operator|==
operator|-
literal|1
operator|)
return|;
block|}
block|}
end_class

end_unit

