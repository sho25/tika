begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|io
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FilterInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_comment
comment|/**  * A Proxy stream which acts as expected, that is it passes the method  * calls on to the proxied stream and doesn't change which methods are  * being called.  *<p>  * It is an alternative base class to FilterInputStream  * to increase reusability, because FilterInputStream changes the  * methods being called, such as read(byte[]) to read(byte[], int, int).  *<p>  * See the protected methods for ways in which a subclass can easily decorate  * a stream with custom pre-, post- or error processing functionality.  *  * @author Stephen Colebourne  * @version $Id$  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|ProxyInputStream
extends|extends
name|FilterInputStream
block|{
comment|/**      * Constructs a new ProxyInputStream.      *      * @param proxy  the InputStream to delegate to      */
specifier|public
name|ProxyInputStream
parameter_list|(
name|InputStream
name|proxy
parameter_list|)
block|{
name|super
argument_list|(
name|proxy
argument_list|)
expr_stmt|;
comment|// the proxy is stored in a protected superclass variable named 'in'
block|}
comment|/**      * Invokes the delegate's<code>read()</code> method.      * @return the byte read or -1 if the end of stream      * @throws IOException if an I/O error occurs      */
annotation|@
name|Override
specifier|public
name|int
name|read
parameter_list|()
throws|throws
name|IOException
block|{
try|try
block|{
name|beforeRead
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|int
name|b
init|=
name|in
operator|.
name|read
argument_list|()
decl_stmt|;
name|afterRead
argument_list|(
name|b
operator|!=
operator|-
literal|1
condition|?
literal|1
else|:
operator|-
literal|1
argument_list|)
expr_stmt|;
return|return
name|b
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|handleIOException
argument_list|(
name|e
argument_list|)
expr_stmt|;
return|return
operator|-
literal|1
return|;
block|}
block|}
comment|/**      * Invokes the delegate's<code>read(byte[])</code> method.      * @param bts the buffer to read the bytes into      * @return the number of bytes read or -1 if the end of stream      * @throws IOException if an I/O error occurs      */
annotation|@
name|Override
specifier|public
name|int
name|read
parameter_list|(
name|byte
index|[]
name|bts
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|beforeRead
argument_list|(
name|bts
operator|.
name|length
argument_list|)
expr_stmt|;
name|int
name|n
init|=
name|in
operator|.
name|read
argument_list|(
name|bts
argument_list|)
decl_stmt|;
name|afterRead
argument_list|(
name|n
argument_list|)
expr_stmt|;
return|return
name|n
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|handleIOException
argument_list|(
name|e
argument_list|)
expr_stmt|;
return|return
operator|-
literal|1
return|;
block|}
block|}
comment|/**      * Invokes the delegate's<code>read(byte[], int, int)</code> method.      * @param bts the buffer to read the bytes into      * @param off The start offset      * @param len The number of bytes to read      * @return the number of bytes read or -1 if the end of stream      * @throws IOException if an I/O error occurs      */
annotation|@
name|Override
specifier|public
name|int
name|read
parameter_list|(
name|byte
index|[]
name|bts
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|beforeRead
argument_list|(
name|len
argument_list|)
expr_stmt|;
name|int
name|n
init|=
name|in
operator|.
name|read
argument_list|(
name|bts
argument_list|,
name|off
argument_list|,
name|len
argument_list|)
decl_stmt|;
name|afterRead
argument_list|(
name|n
argument_list|)
expr_stmt|;
return|return
name|n
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|handleIOException
argument_list|(
name|e
argument_list|)
expr_stmt|;
return|return
operator|-
literal|1
return|;
block|}
block|}
comment|/**      * Invokes the delegate's<code>skip(long)</code> method.      * @param ln the number of bytes to skip      * @return the actual number of bytes skipped      * @throws IOException if an I/O error occurs      */
annotation|@
name|Override
specifier|public
name|long
name|skip
parameter_list|(
name|long
name|ln
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
return|return
name|in
operator|.
name|skip
argument_list|(
name|ln
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|handleIOException
argument_list|(
name|e
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
block|}
comment|/**      * Invokes the delegate's<code>available()</code> method.      * @return the number of available bytes      * @throws IOException if an I/O error occurs      */
annotation|@
name|Override
specifier|public
name|int
name|available
parameter_list|()
throws|throws
name|IOException
block|{
try|try
block|{
return|return
name|super
operator|.
name|available
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|handleIOException
argument_list|(
name|e
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
block|}
comment|/**      * Invokes the delegate's<code>close()</code> method.      * @throws IOException if an I/O error occurs      */
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
try|try
block|{
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|handleIOException
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Invokes the delegate's<code>mark(int)</code> method.      * @param readlimit read ahead limit      */
annotation|@
name|Override
specifier|public
specifier|synchronized
name|void
name|mark
parameter_list|(
name|int
name|readlimit
parameter_list|)
block|{
name|in
operator|.
name|mark
argument_list|(
name|readlimit
argument_list|)
expr_stmt|;
block|}
comment|/**      * Invokes the delegate's<code>reset()</code> method.      * @throws IOException if an I/O error occurs      */
annotation|@
name|Override
specifier|public
specifier|synchronized
name|void
name|reset
parameter_list|()
throws|throws
name|IOException
block|{
try|try
block|{
name|in
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|handleIOException
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Invokes the delegate's<code>markSupported()</code> method.      * @return true if mark is supported, otherwise false      */
annotation|@
name|Override
specifier|public
name|boolean
name|markSupported
parameter_list|()
block|{
return|return
name|in
operator|.
name|markSupported
argument_list|()
return|;
block|}
comment|/**      * Invoked by the read methods before the call is proxied. The number      * of bytes that the caller wanted to read (1 for the {@link #read()}      * method, buffer length for {@link #read(byte[])}, etc.) is given as      * an argument.      *<p>      * Subclasses can override this method to add common pre-processing      * functionality without having to override all the read methods.      * The default implementation does nothing.      *<p>      * Note this method is<em>not</em> called from {@link #skip(long)} or      * {@link #reset()}. You need to explicitly override those methods if      * you want to add pre-processing steps also to them.      *      * @since Commons IO 2.0      * @param n number of bytes that the caller asked to be read      * @throws IOException if the pre-processing fails      */
specifier|protected
name|void
name|beforeRead
parameter_list|(
name|int
name|n
parameter_list|)
throws|throws
name|IOException
block|{     }
comment|/**      * Invoked by the read methods after the proxied call has returned      * successfully. The number of bytes returned to the caller (or -1 if      * the end of stream was reached) is given as an argument.      *<p>      * Subclasses can override this method to add common post-processing      * functionality without having to override all the read methods.      * The default implementation does nothing.      *<p>      * Note this method is<em>not</em> called from {@link #skip(long)} or      * {@link #reset()}. You need to explicitly override those methods if      * you want to add post-processing steps also to them.      *      * @since Commons IO 2.0      * @param n number of bytes read, or -1 if the end of stream was reached      * @throws IOException if the post-processing fails      */
specifier|protected
name|void
name|afterRead
parameter_list|(
name|int
name|n
parameter_list|)
throws|throws
name|IOException
block|{     }
comment|/**      * Handle any IOExceptions thrown.      *<p>      * This method provides a point to implement custom exception      * handling. The default behaviour is to re-throw the exception.      * @param e The IOException thrown      * @throws IOException if an I/O error occurs      * @since Commons IO 2.0      */
specifier|protected
name|void
name|handleIOException
parameter_list|(
name|IOException
name|e
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
name|e
throw|;
block|}
block|}
end_class

end_unit

