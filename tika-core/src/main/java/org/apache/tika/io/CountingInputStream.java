begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *   *      http://www.apache.org/licenses/LICENSE-2.0  *   * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|io
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_comment
comment|/**  * A decorating input stream that counts the number of bytes that have passed  * through the stream so far.  *<p>  * A typical use case would be during debugging, to ensure that data is being  * read as expected.  *  * @author Marcelo Liberato  * @since Apache Tika 0.4, copied from Commons IO 1.4  */
end_comment

begin_class
specifier|public
class|class
name|CountingInputStream
extends|extends
name|ProxyInputStream
block|{
comment|/** The count of bytes that have passed. */
specifier|private
name|long
name|count
decl_stmt|;
comment|/**      * Constructs a new CountingInputStream.      *      * @param in  the InputStream to delegate to      */
specifier|public
name|CountingInputStream
parameter_list|(
name|InputStream
name|in
parameter_list|)
block|{
name|super
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
comment|//-----------------------------------------------------------------------
comment|/**      * Reads a number of bytes into the byte array, keeping count of the      * number read.      *      * @param b  the buffer into which the data is read, not null      * @return the total number of bytes read into the buffer, -1 if end of stream      * @throws IOException if an I/O error occurs      * @see java.io.InputStream#read(byte[])       */
annotation|@
name|Override
specifier|public
name|int
name|read
parameter_list|(
name|byte
index|[]
name|b
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|found
init|=
name|super
operator|.
name|read
argument_list|(
name|b
argument_list|)
decl_stmt|;
name|this
operator|.
name|count
operator|+=
operator|(
name|found
operator|>=
literal|0
operator|)
condition|?
name|found
else|:
literal|0
expr_stmt|;
return|return
name|found
return|;
block|}
comment|/**      * Reads a number of bytes into the byte array at a specific offset,      * keeping count of the number read.      *      * @param b  the buffer into which the data is read, not null      * @param off  the start offset in the buffer      * @param len  the maximum number of bytes to read      * @return the total number of bytes read into the buffer, -1 if end of stream      * @throws IOException if an I/O error occurs      * @see java.io.InputStream#read(byte[], int, int)      */
annotation|@
name|Override
specifier|public
name|int
name|read
parameter_list|(
name|byte
index|[]
name|b
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|found
init|=
name|super
operator|.
name|read
argument_list|(
name|b
argument_list|,
name|off
argument_list|,
name|len
argument_list|)
decl_stmt|;
name|this
operator|.
name|count
operator|+=
operator|(
name|found
operator|>=
literal|0
operator|)
condition|?
name|found
else|:
literal|0
expr_stmt|;
return|return
name|found
return|;
block|}
comment|/**      * Reads the next byte of data adding to the count of bytes received      * if a byte is successfully read.       *      * @return the byte read, -1 if end of stream      * @throws IOException if an I/O error occurs      * @see java.io.InputStream#read()      */
annotation|@
name|Override
specifier|public
name|int
name|read
parameter_list|()
throws|throws
name|IOException
block|{
name|int
name|found
init|=
name|super
operator|.
name|read
argument_list|()
decl_stmt|;
name|this
operator|.
name|count
operator|+=
operator|(
name|found
operator|>=
literal|0
operator|)
condition|?
literal|1
else|:
literal|0
expr_stmt|;
return|return
name|found
return|;
block|}
comment|/**      * Skips the stream over the specified number of bytes, adding the skipped      * amount to the count.      *      * @param length  the number of bytes to skip      * @return the actual number of bytes skipped      * @throws IOException if an I/O error occurs      * @see java.io.InputStream#skip(long)      */
annotation|@
name|Override
specifier|public
name|long
name|skip
parameter_list|(
specifier|final
name|long
name|length
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|long
name|skip
init|=
name|super
operator|.
name|skip
argument_list|(
name|length
argument_list|)
decl_stmt|;
name|this
operator|.
name|count
operator|+=
name|skip
expr_stmt|;
return|return
name|skip
return|;
block|}
comment|//-----------------------------------------------------------------------
comment|/**      * The number of bytes that have passed through this stream.      *<p>      * NOTE: From v1.3 this method throws an ArithmeticException if the      * count is greater than can be expressed by an<code>int</code>.      * See {@link #getByteCount()} for a method using a<code>long</code>.      *      * @return the number of bytes accumulated      * @throws ArithmeticException if the byte count is too large      */
specifier|public
specifier|synchronized
name|int
name|getCount
parameter_list|()
block|{
name|long
name|result
init|=
name|getByteCount
argument_list|()
decl_stmt|;
if|if
condition|(
name|result
operator|>
name|Integer
operator|.
name|MAX_VALUE
condition|)
block|{
throw|throw
operator|new
name|ArithmeticException
argument_list|(
literal|"The byte count "
operator|+
name|result
operator|+
literal|" is too large to be converted to an int"
argument_list|)
throw|;
block|}
return|return
operator|(
name|int
operator|)
name|result
return|;
block|}
comment|/**       * Set the byte count back to 0.       *<p>      * NOTE: From v1.3 this method throws an ArithmeticException if the      * count is greater than can be expressed by an<code>int</code>.      * See {@link #resetByteCount()} for a method using a<code>long</code>.      *      * @return the count previous to resetting      * @throws ArithmeticException if the byte count is too large      */
specifier|public
specifier|synchronized
name|int
name|resetCount
parameter_list|()
block|{
name|long
name|result
init|=
name|resetByteCount
argument_list|()
decl_stmt|;
if|if
condition|(
name|result
operator|>
name|Integer
operator|.
name|MAX_VALUE
condition|)
block|{
throw|throw
operator|new
name|ArithmeticException
argument_list|(
literal|"The byte count "
operator|+
name|result
operator|+
literal|" is too large to be converted to an int"
argument_list|)
throw|;
block|}
return|return
operator|(
name|int
operator|)
name|result
return|;
block|}
comment|/**      * The number of bytes that have passed through this stream.      *<p>      * NOTE: This method is an alternative for<code>getCount()</code>      * and was added because that method returns an integer which will      * result in incorrect count for files over 2GB.      *      * @return the number of bytes accumulated      * @since Commons IO 1.3      */
specifier|public
specifier|synchronized
name|long
name|getByteCount
parameter_list|()
block|{
return|return
name|this
operator|.
name|count
return|;
block|}
comment|/**       * Set the byte count back to 0.       *<p>      * NOTE: This method is an alternative for<code>resetCount()</code>      * and was added because that method returns an integer which will      * result in incorrect count for files over 2GB.      *      * @return the count previous to resetting      * @since Commons IO 1.3      */
specifier|public
specifier|synchronized
name|long
name|resetByteCount
parameter_list|()
block|{
name|long
name|tmp
init|=
name|this
operator|.
name|count
decl_stmt|;
name|this
operator|.
name|count
operator|=
literal|0
expr_stmt|;
return|return
name|tmp
return|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"Tika Counting InputStream wrapping "
operator|+
name|in
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

