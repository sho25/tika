begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|io
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FilterInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_comment
comment|/**  *<p>  * A specialized input stream implementation which records the last portion read  * from an underlying stream.  *</p>  *<p>  * This stream implementation is useful to deal with information which is known  * to be located at the end of a stream (e.g. ID3 v1 tags). While reading bytes  * from the underlying stream, a given number of bytes is kept in an internal  * buffer. This buffer can then be queried after the whole stream was read. It  * contains the last bytes read from the original input stream.  *</p>  *   * @param in the underlying input stream  * @param tailSize the size of the tail buffer  */
end_comment

begin_class
specifier|public
class|class
name|TailStream
extends|extends
name|FilterInputStream
block|{
comment|/** Constant for the default skip buffer size. */
specifier|private
specifier|static
specifier|final
name|int
name|SKIP_SIZE
init|=
literal|4096
decl_stmt|;
comment|/** The buffer in which the tail data is stored. */
specifier|private
specifier|final
name|byte
index|[]
name|tailBuffer
decl_stmt|;
comment|/** The size of the internal tail buffer. */
specifier|private
specifier|final
name|int
name|tailSize
decl_stmt|;
comment|/** A copy of the internal tail buffer used for mark() operations. */
specifier|private
name|byte
index|[]
name|markBuffer
decl_stmt|;
comment|/** The number of bytes that have been read so far. */
specifier|private
name|long
name|bytesRead
decl_stmt|;
comment|/** The number of bytes read at the last mark() operation. */
specifier|private
name|long
name|markBytesRead
decl_stmt|;
comment|/** The current index into the tail buffer. */
specifier|private
name|int
name|currentIndex
decl_stmt|;
comment|/** A copy of the current index used for mark() operations. */
specifier|private
name|int
name|markIndex
decl_stmt|;
comment|/**      * Creates a new instance of {@code TailStream}.      *       * @param in the underlying input stream      * @param size the size of the tail buffer      */
specifier|public
name|TailStream
parameter_list|(
name|InputStream
name|in
parameter_list|,
name|int
name|size
parameter_list|)
block|{
name|super
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|tailSize
operator|=
name|size
expr_stmt|;
name|tailBuffer
operator|=
operator|new
name|byte
index|[
name|size
index|]
expr_stmt|;
block|}
comment|/**      * {@inheritDoc} This implementation adds the read byte to the internal tail      * buffer.      */
annotation|@
name|Override
specifier|public
name|int
name|read
parameter_list|()
throws|throws
name|IOException
block|{
name|int
name|c
init|=
name|super
operator|.
name|read
argument_list|()
decl_stmt|;
if|if
condition|(
name|c
operator|!=
operator|-
literal|1
condition|)
block|{
name|appendByte
argument_list|(
operator|(
name|byte
operator|)
name|c
argument_list|)
expr_stmt|;
block|}
return|return
name|c
return|;
block|}
comment|/**      * {@inheritDoc} This implementation delegates to the underlying stream and      * then adds the correct portion of the read buffer to the internal tail      * buffer.      */
annotation|@
name|Override
specifier|public
name|int
name|read
parameter_list|(
name|byte
index|[]
name|buf
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|read
init|=
name|super
operator|.
name|read
argument_list|(
name|buf
argument_list|)
decl_stmt|;
if|if
condition|(
name|read
operator|>
literal|0
condition|)
block|{
name|appendBuf
argument_list|(
name|buf
argument_list|,
literal|0
argument_list|,
name|read
argument_list|)
expr_stmt|;
block|}
return|return
name|read
return|;
block|}
comment|/**      * {@inheritDoc} This implementation delegates to the underlying stream and      * then adds the correct portion of the read buffer to the internal tail      * buffer.      */
annotation|@
name|Override
specifier|public
name|int
name|read
parameter_list|(
name|byte
index|[]
name|buf
parameter_list|,
name|int
name|ofs
parameter_list|,
name|int
name|length
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|read
init|=
name|super
operator|.
name|read
argument_list|(
name|buf
argument_list|,
name|ofs
argument_list|,
name|length
argument_list|)
decl_stmt|;
if|if
condition|(
name|read
operator|>
literal|0
condition|)
block|{
name|appendBuf
argument_list|(
name|buf
argument_list|,
name|ofs
argument_list|,
name|read
argument_list|)
expr_stmt|;
block|}
return|return
name|read
return|;
block|}
comment|/**      * {@inheritDoc} This implementation delegates to the {@code read()} method      * to ensure that the tail buffer is also filled if data is skipped.      */
annotation|@
name|Override
specifier|public
name|long
name|skip
parameter_list|(
name|long
name|n
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|bufSize
init|=
operator|(
name|int
operator|)
name|Math
operator|.
name|min
argument_list|(
name|n
argument_list|,
name|SKIP_SIZE
argument_list|)
decl_stmt|;
name|byte
index|[]
name|buf
init|=
operator|new
name|byte
index|[
name|bufSize
index|]
decl_stmt|;
name|long
name|bytesSkipped
init|=
literal|0
decl_stmt|;
name|int
name|bytesRead
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|bytesSkipped
operator|<
name|n
operator|&&
name|bytesRead
operator|!=
operator|-
literal|1
condition|)
block|{
name|int
name|len
init|=
operator|(
name|int
operator|)
name|Math
operator|.
name|min
argument_list|(
name|bufSize
argument_list|,
name|n
operator|-
name|bytesSkipped
argument_list|)
decl_stmt|;
name|bytesRead
operator|=
name|read
argument_list|(
name|buf
argument_list|,
literal|0
argument_list|,
name|len
argument_list|)
expr_stmt|;
if|if
condition|(
name|bytesRead
operator|!=
operator|-
literal|1
condition|)
block|{
name|bytesSkipped
operator|+=
name|bytesRead
expr_stmt|;
block|}
block|}
return|return
name|bytesSkipped
return|;
block|}
comment|/**      * {@inheritDoc} This implementation saves the internal state including the      * content of the tail buffer so that it can be restored when ''reset()'' is      * called later.      */
annotation|@
name|Override
specifier|public
name|void
name|mark
parameter_list|(
name|int
name|limit
parameter_list|)
block|{
name|markBuffer
operator|=
operator|new
name|byte
index|[
name|tailSize
index|]
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|tailBuffer
argument_list|,
literal|0
argument_list|,
name|markBuffer
argument_list|,
literal|0
argument_list|,
name|tailSize
argument_list|)
expr_stmt|;
name|markIndex
operator|=
name|currentIndex
expr_stmt|;
name|markBytesRead
operator|=
name|bytesRead
expr_stmt|;
block|}
comment|/**      * {@inheritDoc} This implementation restores this stream's state to the      * state when ''mark()'' was called the last time. If ''mark()'' has not      * been called before, this method has no effect.      */
annotation|@
name|Override
specifier|public
name|void
name|reset
parameter_list|()
block|{
if|if
condition|(
name|markBuffer
operator|!=
literal|null
condition|)
block|{
name|System
operator|.
name|arraycopy
argument_list|(
name|markBuffer
argument_list|,
literal|0
argument_list|,
name|tailBuffer
argument_list|,
literal|0
argument_list|,
name|tailSize
argument_list|)
expr_stmt|;
name|currentIndex
operator|=
name|markIndex
expr_stmt|;
name|bytesRead
operator|=
name|markBytesRead
expr_stmt|;
block|}
block|}
comment|/**      * Returns an array with the last data read from the underlying stream. If      * the underlying stream contained more data than the ''tailSize''      * constructor argument, the returned array has a length of ''tailSize''.      * Otherwise, its length equals the number of bytes read.      *       * @return an array with the last data read from the underlying stream      */
specifier|public
name|byte
index|[]
name|getTail
parameter_list|()
block|{
name|int
name|size
init|=
operator|(
name|int
operator|)
name|Math
operator|.
name|min
argument_list|(
name|tailSize
argument_list|,
name|bytesRead
argument_list|)
decl_stmt|;
name|byte
index|[]
name|result
init|=
operator|new
name|byte
index|[
name|size
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|tailBuffer
argument_list|,
name|currentIndex
argument_list|,
name|result
argument_list|,
literal|0
argument_list|,
name|size
operator|-
name|currentIndex
argument_list|)
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|tailBuffer
argument_list|,
literal|0
argument_list|,
name|result
argument_list|,
name|size
operator|-
name|currentIndex
argument_list|,
name|currentIndex
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
comment|/**      * Adds the given byte to the internal tail buffer.      *       * @param b the byte to be added      */
specifier|private
name|void
name|appendByte
parameter_list|(
name|byte
name|b
parameter_list|)
block|{
name|tailBuffer
index|[
name|currentIndex
operator|++
index|]
operator|=
name|b
expr_stmt|;
if|if
condition|(
name|currentIndex
operator|>=
name|tailSize
condition|)
block|{
name|currentIndex
operator|=
literal|0
expr_stmt|;
block|}
name|bytesRead
operator|++
expr_stmt|;
block|}
comment|/**      * Adds the content of the given buffer to the internal tail buffer.      *       * @param buf the buffer      * @param ofs the start offset in the buffer      * @param length the number of bytes to be copied      */
specifier|private
name|void
name|appendBuf
parameter_list|(
name|byte
index|[]
name|buf
parameter_list|,
name|int
name|ofs
parameter_list|,
name|int
name|length
parameter_list|)
block|{
if|if
condition|(
name|length
operator|>=
name|tailSize
condition|)
block|{
name|replaceTailBuffer
argument_list|(
name|buf
argument_list|,
name|ofs
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|copyToTailBuffer
argument_list|(
name|buf
argument_list|,
name|ofs
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
name|bytesRead
operator|+=
name|length
expr_stmt|;
block|}
comment|/**      * Replaces the content of the internal tail buffer by the last portion of      * the given buffer. This method is called if a buffer was read from the      * underlying stream whose length is larger than the tail buffer.      *       * @param buf the buffer      * @param ofs the start offset in the buffer      * @param length the number of bytes to be copied      */
specifier|private
name|void
name|replaceTailBuffer
parameter_list|(
name|byte
index|[]
name|buf
parameter_list|,
name|int
name|ofs
parameter_list|,
name|int
name|length
parameter_list|)
block|{
name|System
operator|.
name|arraycopy
argument_list|(
name|buf
argument_list|,
name|ofs
operator|+
name|length
operator|-
name|tailSize
argument_list|,
name|tailBuffer
argument_list|,
literal|0
argument_list|,
name|tailSize
argument_list|)
expr_stmt|;
name|currentIndex
operator|=
literal|0
expr_stmt|;
block|}
comment|/**      * Copies the given buffer into the internal tail buffer at the current      * position. This method is called if a buffer is read from the underlying      * stream whose length is smaller than the tail buffer. In this case the      * tail buffer is only partly overwritten.      *       * @param buf the buffer      * @param ofs the start offset in the buffer      * @param length the number of bytes to be copied      */
specifier|private
name|void
name|copyToTailBuffer
parameter_list|(
name|byte
index|[]
name|buf
parameter_list|,
name|int
name|ofs
parameter_list|,
name|int
name|length
parameter_list|)
block|{
name|int
name|remaining
init|=
name|tailSize
operator|-
name|currentIndex
decl_stmt|;
name|int
name|size1
init|=
name|Math
operator|.
name|min
argument_list|(
name|remaining
argument_list|,
name|length
argument_list|)
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|buf
argument_list|,
name|ofs
argument_list|,
name|tailBuffer
argument_list|,
name|currentIndex
argument_list|,
name|size1
argument_list|)
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|buf
argument_list|,
name|ofs
operator|+
name|size1
argument_list|,
name|tailBuffer
argument_list|,
literal|0
argument_list|,
name|length
operator|-
name|size1
argument_list|)
expr_stmt|;
name|currentIndex
operator|=
operator|(
name|currentIndex
operator|+
name|length
operator|)
operator|%
name|tailSize
expr_stmt|;
block|}
block|}
end_class

end_unit

