begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *   *      http://www.apache.org/licenses/LICENSE-2.0  *   * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|io
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|exception
operator|.
name|TikaException
import|;
end_import

begin_comment
comment|/**  * General Endian Related Utilties.  *<p>  * This class provides static utility methods for input/output operations  * on numbers in Big and Little Endian formats.  *<p>  * Origin of code: Based on the version in POI  */
end_comment

begin_class
specifier|public
class|class
name|EndianUtils
block|{
comment|/**      * Get a LE short value from an InputStream      *      * @param stream the InputStream from which the short is to be read      * @return the short (16-bit) value      * @throws IOException             will be propagated back to the caller      * @throws BufferUnderrunException if the stream cannot provide enough bytes      */
specifier|public
specifier|static
name|short
name|readShortLE
parameter_list|(
name|InputStream
name|stream
parameter_list|)
throws|throws
name|IOException
throws|,
name|BufferUnderrunException
block|{
return|return
operator|(
name|short
operator|)
name|readUShortLE
argument_list|(
name|stream
argument_list|)
return|;
block|}
comment|/**      * Get a BE short value from an InputStream      *      * @param stream the InputStream from which the short is to be read      * @return the short (16-bit) value      * @throws IOException             will be propagated back to the caller      * @throws BufferUnderrunException if the stream cannot provide enough bytes      */
specifier|public
specifier|static
name|short
name|readShortBE
parameter_list|(
name|InputStream
name|stream
parameter_list|)
throws|throws
name|IOException
throws|,
name|BufferUnderrunException
block|{
return|return
operator|(
name|short
operator|)
name|readUShortBE
argument_list|(
name|stream
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|int
name|readUShortLE
parameter_list|(
name|InputStream
name|stream
parameter_list|)
throws|throws
name|IOException
throws|,
name|BufferUnderrunException
block|{
name|int
name|ch1
init|=
name|stream
operator|.
name|read
argument_list|()
decl_stmt|;
name|int
name|ch2
init|=
name|stream
operator|.
name|read
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
name|ch1
operator||
name|ch2
operator|)
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|BufferUnderrunException
argument_list|()
throw|;
block|}
return|return
operator|(
name|ch2
operator|<<
literal|8
operator|)
operator|+
operator|(
name|ch1
operator|<<
literal|0
operator|)
return|;
block|}
specifier|public
specifier|static
name|int
name|readUShortBE
parameter_list|(
name|InputStream
name|stream
parameter_list|)
throws|throws
name|IOException
throws|,
name|BufferUnderrunException
block|{
name|int
name|ch1
init|=
name|stream
operator|.
name|read
argument_list|()
decl_stmt|;
name|int
name|ch2
init|=
name|stream
operator|.
name|read
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
name|ch1
operator||
name|ch2
operator|)
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|BufferUnderrunException
argument_list|()
throw|;
block|}
return|return
operator|(
name|ch1
operator|<<
literal|8
operator|)
operator|+
operator|(
name|ch2
operator|<<
literal|0
operator|)
return|;
block|}
comment|/**      * Get a LE unsigned int value from an InputStream      *      * @param stream the InputStream from which the int is to be read      * @return the int (32-bit) value      * @throws IOException             will be propagated back to the caller      * @throws BufferUnderrunException if the stream cannot provide enough bytes      */
specifier|public
specifier|static
name|long
name|readUIntLE
parameter_list|(
name|InputStream
name|stream
parameter_list|)
throws|throws
name|IOException
throws|,
name|BufferUnderrunException
block|{
name|int
name|ch1
init|=
name|stream
operator|.
name|read
argument_list|()
decl_stmt|;
name|int
name|ch2
init|=
name|stream
operator|.
name|read
argument_list|()
decl_stmt|;
name|int
name|ch3
init|=
name|stream
operator|.
name|read
argument_list|()
decl_stmt|;
name|int
name|ch4
init|=
name|stream
operator|.
name|read
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
name|ch1
operator||
name|ch2
operator||
name|ch3
operator||
name|ch4
operator|)
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|BufferUnderrunException
argument_list|()
throw|;
block|}
return|return
operator|(
operator|(
name|ch4
operator|<<
literal|24
operator|)
operator|+
operator|(
name|ch3
operator|<<
literal|16
operator|)
operator|+
operator|(
name|ch2
operator|<<
literal|8
operator|)
operator|+
operator|(
name|ch1
operator|<<
literal|0
operator|)
operator|)
operator|&
literal|0x00FFFFFFFFl
return|;
block|}
comment|/**      * Get a BE unsigned int value from an InputStream      *      * @param stream the InputStream from which the int is to be read      * @return the int (32-bit) value      * @throws IOException             will be propagated back to the caller      * @throws BufferUnderrunException if the stream cannot provide enough bytes      */
specifier|public
specifier|static
name|long
name|readUIntBE
parameter_list|(
name|InputStream
name|stream
parameter_list|)
throws|throws
name|IOException
throws|,
name|BufferUnderrunException
block|{
name|int
name|ch1
init|=
name|stream
operator|.
name|read
argument_list|()
decl_stmt|;
name|int
name|ch2
init|=
name|stream
operator|.
name|read
argument_list|()
decl_stmt|;
name|int
name|ch3
init|=
name|stream
operator|.
name|read
argument_list|()
decl_stmt|;
name|int
name|ch4
init|=
name|stream
operator|.
name|read
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
name|ch1
operator||
name|ch2
operator||
name|ch3
operator||
name|ch4
operator|)
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|BufferUnderrunException
argument_list|()
throw|;
block|}
return|return
operator|(
operator|(
name|ch1
operator|<<
literal|24
operator|)
operator|+
operator|(
name|ch2
operator|<<
literal|16
operator|)
operator|+
operator|(
name|ch3
operator|<<
literal|8
operator|)
operator|+
operator|(
name|ch4
operator|<<
literal|0
operator|)
operator|)
operator|&
literal|0x00FFFFFFFFl
return|;
block|}
comment|/**      * Get a LE int value from an InputStream      *      * @param stream the InputStream from which the int is to be read      * @return the int (32-bit) value      * @throws IOException             will be propagated back to the caller      * @throws BufferUnderrunException if the stream cannot provide enough bytes      */
specifier|public
specifier|static
name|int
name|readIntLE
parameter_list|(
name|InputStream
name|stream
parameter_list|)
throws|throws
name|IOException
throws|,
name|BufferUnderrunException
block|{
name|int
name|ch1
init|=
name|stream
operator|.
name|read
argument_list|()
decl_stmt|;
name|int
name|ch2
init|=
name|stream
operator|.
name|read
argument_list|()
decl_stmt|;
name|int
name|ch3
init|=
name|stream
operator|.
name|read
argument_list|()
decl_stmt|;
name|int
name|ch4
init|=
name|stream
operator|.
name|read
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
name|ch1
operator||
name|ch2
operator||
name|ch3
operator||
name|ch4
operator|)
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|BufferUnderrunException
argument_list|()
throw|;
block|}
return|return
operator|(
name|ch4
operator|<<
literal|24
operator|)
operator|+
operator|(
name|ch3
operator|<<
literal|16
operator|)
operator|+
operator|(
name|ch2
operator|<<
literal|8
operator|)
operator|+
operator|(
name|ch1
operator|<<
literal|0
operator|)
return|;
block|}
comment|/**      * Get a BE int value from an InputStream      *      * @param stream the InputStream from which the int is to be read      * @return the int (32-bit) value      * @throws IOException             will be propagated back to the caller      * @throws BufferUnderrunException if the stream cannot provide enough bytes      */
specifier|public
specifier|static
name|int
name|readIntBE
parameter_list|(
name|InputStream
name|stream
parameter_list|)
throws|throws
name|IOException
throws|,
name|BufferUnderrunException
block|{
name|int
name|ch1
init|=
name|stream
operator|.
name|read
argument_list|()
decl_stmt|;
name|int
name|ch2
init|=
name|stream
operator|.
name|read
argument_list|()
decl_stmt|;
name|int
name|ch3
init|=
name|stream
operator|.
name|read
argument_list|()
decl_stmt|;
name|int
name|ch4
init|=
name|stream
operator|.
name|read
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
name|ch1
operator||
name|ch2
operator||
name|ch3
operator||
name|ch4
operator|)
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|BufferUnderrunException
argument_list|()
throw|;
block|}
return|return
operator|(
name|ch1
operator|<<
literal|24
operator|)
operator|+
operator|(
name|ch2
operator|<<
literal|16
operator|)
operator|+
operator|(
name|ch3
operator|<<
literal|8
operator|)
operator|+
operator|(
name|ch4
operator|<<
literal|0
operator|)
return|;
block|}
comment|/**      * Get a LE long value from an InputStream      *      * @param stream the InputStream from which the long is to be read      * @return the long (64-bit) value      * @throws IOException             will be propagated back to the caller      * @throws BufferUnderrunException if the stream cannot provide enough bytes      */
specifier|public
specifier|static
name|long
name|readLongLE
parameter_list|(
name|InputStream
name|stream
parameter_list|)
throws|throws
name|IOException
throws|,
name|BufferUnderrunException
block|{
name|int
name|ch1
init|=
name|stream
operator|.
name|read
argument_list|()
decl_stmt|;
name|int
name|ch2
init|=
name|stream
operator|.
name|read
argument_list|()
decl_stmt|;
name|int
name|ch3
init|=
name|stream
operator|.
name|read
argument_list|()
decl_stmt|;
name|int
name|ch4
init|=
name|stream
operator|.
name|read
argument_list|()
decl_stmt|;
name|int
name|ch5
init|=
name|stream
operator|.
name|read
argument_list|()
decl_stmt|;
name|int
name|ch6
init|=
name|stream
operator|.
name|read
argument_list|()
decl_stmt|;
name|int
name|ch7
init|=
name|stream
operator|.
name|read
argument_list|()
decl_stmt|;
name|int
name|ch8
init|=
name|stream
operator|.
name|read
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
name|ch1
operator||
name|ch2
operator||
name|ch3
operator||
name|ch4
operator||
name|ch5
operator||
name|ch6
operator||
name|ch7
operator||
name|ch8
operator|)
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|BufferUnderrunException
argument_list|()
throw|;
block|}
return|return
operator|(
operator|(
name|long
operator|)
name|ch8
operator|<<
literal|56
operator|)
operator|+
operator|(
operator|(
name|long
operator|)
name|ch7
operator|<<
literal|48
operator|)
operator|+
operator|(
operator|(
name|long
operator|)
name|ch6
operator|<<
literal|40
operator|)
operator|+
operator|(
operator|(
name|long
operator|)
name|ch5
operator|<<
literal|32
operator|)
operator|+
operator|(
operator|(
name|long
operator|)
name|ch4
operator|<<
literal|24
operator|)
operator|+
comment|// cast to long to preserve bit 31 (sign bit for ints)
operator|(
name|ch3
operator|<<
literal|16
operator|)
operator|+
operator|(
name|ch2
operator|<<
literal|8
operator|)
operator|+
operator|(
name|ch1
operator|<<
literal|0
operator|)
return|;
block|}
comment|/**      * Get a NE long value from an InputStream      *      * @param stream the InputStream from which the long is to be read      * @return the long (64-bit) value      * @throws IOException             will be propagated back to the caller      * @throws BufferUnderrunException if the stream cannot provide enough bytes      */
specifier|public
specifier|static
name|long
name|readLongBE
parameter_list|(
name|InputStream
name|stream
parameter_list|)
throws|throws
name|IOException
throws|,
name|BufferUnderrunException
block|{
name|int
name|ch1
init|=
name|stream
operator|.
name|read
argument_list|()
decl_stmt|;
name|int
name|ch2
init|=
name|stream
operator|.
name|read
argument_list|()
decl_stmt|;
name|int
name|ch3
init|=
name|stream
operator|.
name|read
argument_list|()
decl_stmt|;
name|int
name|ch4
init|=
name|stream
operator|.
name|read
argument_list|()
decl_stmt|;
name|int
name|ch5
init|=
name|stream
operator|.
name|read
argument_list|()
decl_stmt|;
name|int
name|ch6
init|=
name|stream
operator|.
name|read
argument_list|()
decl_stmt|;
name|int
name|ch7
init|=
name|stream
operator|.
name|read
argument_list|()
decl_stmt|;
name|int
name|ch8
init|=
name|stream
operator|.
name|read
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
name|ch1
operator||
name|ch2
operator||
name|ch3
operator||
name|ch4
operator||
name|ch5
operator||
name|ch6
operator||
name|ch7
operator||
name|ch8
operator|)
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|BufferUnderrunException
argument_list|()
throw|;
block|}
return|return
operator|(
operator|(
name|long
operator|)
name|ch1
operator|<<
literal|56
operator|)
operator|+
operator|(
operator|(
name|long
operator|)
name|ch2
operator|<<
literal|48
operator|)
operator|+
operator|(
operator|(
name|long
operator|)
name|ch3
operator|<<
literal|40
operator|)
operator|+
operator|(
operator|(
name|long
operator|)
name|ch4
operator|<<
literal|32
operator|)
operator|+
operator|(
operator|(
name|long
operator|)
name|ch5
operator|<<
literal|24
operator|)
operator|+
comment|// cast to long to preserve bit 31 (sign bit for ints)
operator|(
name|ch6
operator|<<
literal|16
operator|)
operator|+
operator|(
name|ch7
operator|<<
literal|8
operator|)
operator|+
operator|(
name|ch8
operator|<<
literal|0
operator|)
return|;
block|}
comment|/**      * Gets the integer value that is stored in UTF-8 like fashion, in Big Endian      * but with the high bit on each number indicating if it continues or not      */
specifier|public
specifier|static
name|long
name|readUE7
parameter_list|(
name|InputStream
name|stream
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|i
decl_stmt|;
name|long
name|v
init|=
literal|0
decl_stmt|;
while|while
condition|(
operator|(
name|i
operator|=
name|stream
operator|.
name|read
argument_list|()
operator|)
operator|>=
literal|0
condition|)
block|{
name|v
operator|=
name|v
operator|<<
literal|7
expr_stmt|;
if|if
condition|(
operator|(
name|i
operator|&
literal|128
operator|)
operator|==
literal|128
condition|)
block|{
comment|// Continues
name|v
operator|+=
operator|(
name|i
operator|&
literal|127
operator|)
expr_stmt|;
block|}
else|else
block|{
comment|// Last value
name|v
operator|+=
name|i
expr_stmt|;
break|break;
block|}
block|}
return|return
name|v
return|;
block|}
comment|/**      * Get a LE short value from the beginning of a byte array      *      * @param data the byte array      * @return the short (16-bit) value      */
specifier|public
specifier|static
name|short
name|getShortLE
parameter_list|(
name|byte
index|[]
name|data
parameter_list|)
block|{
return|return
name|getShortLE
argument_list|(
name|data
argument_list|,
literal|0
argument_list|)
return|;
block|}
comment|/**      * Get a LE short value from a byte array      *      * @param data   the byte array      * @param offset a starting offset into the byte array      * @return the short (16-bit) value      */
specifier|public
specifier|static
name|short
name|getShortLE
parameter_list|(
name|byte
index|[]
name|data
parameter_list|,
name|int
name|offset
parameter_list|)
block|{
return|return
operator|(
name|short
operator|)
name|getUShortLE
argument_list|(
name|data
argument_list|,
name|offset
argument_list|)
return|;
block|}
comment|/**      * Get a LE unsigned short value from the beginning of a byte array      *      * @param data the byte array      * @return the unsigned short (16-bit) value in an int      */
specifier|public
specifier|static
name|int
name|getUShortLE
parameter_list|(
name|byte
index|[]
name|data
parameter_list|)
block|{
return|return
name|getUShortLE
argument_list|(
name|data
argument_list|,
literal|0
argument_list|)
return|;
block|}
comment|/**      * Get a LE unsigned short value from a byte array      *      * @param data   the byte array      * @param offset a starting offset into the byte array      * @return the unsigned short (16-bit) value in an integer      */
specifier|public
specifier|static
name|int
name|getUShortLE
parameter_list|(
name|byte
index|[]
name|data
parameter_list|,
name|int
name|offset
parameter_list|)
block|{
name|int
name|b0
init|=
name|data
index|[
name|offset
index|]
operator|&
literal|0xFF
decl_stmt|;
name|int
name|b1
init|=
name|data
index|[
name|offset
operator|+
literal|1
index|]
operator|&
literal|0xFF
decl_stmt|;
return|return
operator|(
name|b1
operator|<<
literal|8
operator|)
operator|+
operator|(
name|b0
operator|<<
literal|0
operator|)
return|;
block|}
comment|/**      * Get a BE short value from the beginning of a byte array      *      * @param data the byte array      * @return the short (16-bit) value      */
specifier|public
specifier|static
name|short
name|getShortBE
parameter_list|(
name|byte
index|[]
name|data
parameter_list|)
block|{
return|return
name|getShortBE
argument_list|(
name|data
argument_list|,
literal|0
argument_list|)
return|;
block|}
comment|/**      * Get a BE short value from a byte array      *      * @param data   the byte array      * @param offset a starting offset into the byte array      * @return the short (16-bit) value      */
specifier|public
specifier|static
name|short
name|getShortBE
parameter_list|(
name|byte
index|[]
name|data
parameter_list|,
name|int
name|offset
parameter_list|)
block|{
return|return
operator|(
name|short
operator|)
name|getUShortBE
argument_list|(
name|data
argument_list|,
name|offset
argument_list|)
return|;
block|}
comment|/**      * Get a BE unsigned short value from the beginning of a byte array      *      * @param data the byte array      * @return the unsigned short (16-bit) value in an int      */
specifier|public
specifier|static
name|int
name|getUShortBE
parameter_list|(
name|byte
index|[]
name|data
parameter_list|)
block|{
return|return
name|getUShortBE
argument_list|(
name|data
argument_list|,
literal|0
argument_list|)
return|;
block|}
comment|/**      * Get a BE unsigned short value from a byte array      *      * @param data   the byte array      * @param offset a starting offset into the byte array      * @return the unsigned short (16-bit) value in an integer      */
specifier|public
specifier|static
name|int
name|getUShortBE
parameter_list|(
name|byte
index|[]
name|data
parameter_list|,
name|int
name|offset
parameter_list|)
block|{
name|int
name|b0
init|=
name|data
index|[
name|offset
index|]
operator|&
literal|0xFF
decl_stmt|;
name|int
name|b1
init|=
name|data
index|[
name|offset
operator|+
literal|1
index|]
operator|&
literal|0xFF
decl_stmt|;
return|return
operator|(
name|b0
operator|<<
literal|8
operator|)
operator|+
operator|(
name|b1
operator|<<
literal|0
operator|)
return|;
block|}
comment|/**      * Get a LE int value from the beginning of a byte array      *      * @param data the byte array      * @return the int (32-bit) value      */
specifier|public
specifier|static
name|int
name|getIntLE
parameter_list|(
name|byte
index|[]
name|data
parameter_list|)
block|{
return|return
name|getIntLE
argument_list|(
name|data
argument_list|,
literal|0
argument_list|)
return|;
block|}
comment|/**      * Get a LE int value from a byte array      *      * @param data   the byte array      * @param offset a starting offset into the byte array      * @return the int (32-bit) value      */
specifier|public
specifier|static
name|int
name|getIntLE
parameter_list|(
name|byte
index|[]
name|data
parameter_list|,
name|int
name|offset
parameter_list|)
block|{
name|int
name|i
init|=
name|offset
decl_stmt|;
name|int
name|b0
init|=
name|data
index|[
name|i
operator|++
index|]
operator|&
literal|0xFF
decl_stmt|;
name|int
name|b1
init|=
name|data
index|[
name|i
operator|++
index|]
operator|&
literal|0xFF
decl_stmt|;
name|int
name|b2
init|=
name|data
index|[
name|i
operator|++
index|]
operator|&
literal|0xFF
decl_stmt|;
name|int
name|b3
init|=
name|data
index|[
name|i
operator|++
index|]
operator|&
literal|0xFF
decl_stmt|;
return|return
operator|(
name|b3
operator|<<
literal|24
operator|)
operator|+
operator|(
name|b2
operator|<<
literal|16
operator|)
operator|+
operator|(
name|b1
operator|<<
literal|8
operator|)
operator|+
operator|(
name|b0
operator|<<
literal|0
operator|)
return|;
block|}
comment|/**      * Get a BE int value from the beginning of a byte array      *      * @param data the byte array      * @return the int (32-bit) value      */
specifier|public
specifier|static
name|int
name|getIntBE
parameter_list|(
name|byte
index|[]
name|data
parameter_list|)
block|{
return|return
name|getIntBE
argument_list|(
name|data
argument_list|,
literal|0
argument_list|)
return|;
block|}
comment|/**      * Get a BE int value from a byte array      *      * @param data   the byte array      * @param offset a starting offset into the byte array      * @return the int (32-bit) value      */
specifier|public
specifier|static
name|int
name|getIntBE
parameter_list|(
name|byte
index|[]
name|data
parameter_list|,
name|int
name|offset
parameter_list|)
block|{
name|int
name|i
init|=
name|offset
decl_stmt|;
name|int
name|b0
init|=
name|data
index|[
name|i
operator|++
index|]
operator|&
literal|0xFF
decl_stmt|;
name|int
name|b1
init|=
name|data
index|[
name|i
operator|++
index|]
operator|&
literal|0xFF
decl_stmt|;
name|int
name|b2
init|=
name|data
index|[
name|i
operator|++
index|]
operator|&
literal|0xFF
decl_stmt|;
name|int
name|b3
init|=
name|data
index|[
name|i
operator|++
index|]
operator|&
literal|0xFF
decl_stmt|;
return|return
operator|(
name|b0
operator|<<
literal|24
operator|)
operator|+
operator|(
name|b1
operator|<<
literal|16
operator|)
operator|+
operator|(
name|b2
operator|<<
literal|8
operator|)
operator|+
operator|(
name|b3
operator|<<
literal|0
operator|)
return|;
block|}
comment|/**      * Get a LE unsigned int value from a byte array      *      * @param data the byte array      * @return the unsigned int (32-bit) value in a long      */
specifier|public
specifier|static
name|long
name|getUIntLE
parameter_list|(
name|byte
index|[]
name|data
parameter_list|)
block|{
return|return
name|getUIntLE
argument_list|(
name|data
argument_list|,
literal|0
argument_list|)
return|;
block|}
comment|/**      * Get a LE unsigned int value from a byte array      *      * @param data   the byte array      * @param offset a starting offset into the byte array      * @return the unsigned int (32-bit) value in a long      */
specifier|public
specifier|static
name|long
name|getUIntLE
parameter_list|(
name|byte
index|[]
name|data
parameter_list|,
name|int
name|offset
parameter_list|)
block|{
name|long
name|retNum
init|=
name|getIntLE
argument_list|(
name|data
argument_list|,
name|offset
argument_list|)
decl_stmt|;
return|return
name|retNum
operator|&
literal|0x00FFFFFFFFl
return|;
block|}
comment|/**      * Get a BE unsigned int value from a byte array      *      * @param data the byte array      * @return the unsigned int (32-bit) value in a long      */
specifier|public
specifier|static
name|long
name|getUIntBE
parameter_list|(
name|byte
index|[]
name|data
parameter_list|)
block|{
return|return
name|getUIntBE
argument_list|(
name|data
argument_list|,
literal|0
argument_list|)
return|;
block|}
comment|/**      * Get a BE unsigned int value from a byte array      *      * @param data   the byte array      * @param offset a starting offset into the byte array      * @return the unsigned int (32-bit) value in a long      */
specifier|public
specifier|static
name|long
name|getUIntBE
parameter_list|(
name|byte
index|[]
name|data
parameter_list|,
name|int
name|offset
parameter_list|)
block|{
name|long
name|retNum
init|=
name|getIntBE
argument_list|(
name|data
argument_list|,
name|offset
argument_list|)
decl_stmt|;
return|return
name|retNum
operator|&
literal|0x00FFFFFFFFl
return|;
block|}
comment|/**      * Get a LE long value from a byte array      *      * @param data   the byte array      * @param offset a starting offset into the byte array      * @return the long (64-bit) value      */
specifier|public
specifier|static
name|long
name|getLongLE
parameter_list|(
name|byte
index|[]
name|data
parameter_list|,
name|int
name|offset
parameter_list|)
block|{
name|long
name|result
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
name|offset
operator|+
name|LONG_SIZE
operator|-
literal|1
init|;
name|j
operator|>=
name|offset
condition|;
name|j
operator|--
control|)
block|{
name|result
operator|<<=
literal|8
expr_stmt|;
name|result
operator||=
literal|0xff
operator|&
name|data
index|[
name|j
index|]
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
specifier|private
specifier|static
specifier|final
name|int
name|LONG_SIZE
init|=
literal|8
decl_stmt|;
comment|/**      * Convert an 'unsigned' byte to an integer. ie, don't carry across the      * sign.      *      * @param b Description of the Parameter      * @return Description of the Return Value      */
specifier|public
specifier|static
name|int
name|ubyteToInt
parameter_list|(
name|byte
name|b
parameter_list|)
block|{
return|return
name|b
operator|&
literal|0xFF
return|;
block|}
comment|/**      * get the unsigned value of a byte.      *      * @param data   the byte array.      * @param offset a starting offset into the byte array.      * @return the unsigned value of the byte as a 16 bit short      */
specifier|public
specifier|static
name|short
name|getUByte
parameter_list|(
name|byte
index|[]
name|data
parameter_list|,
name|int
name|offset
parameter_list|)
block|{
return|return
call|(
name|short
call|)
argument_list|(
name|data
index|[
name|offset
index|]
operator|&
literal|0xFF
argument_list|)
return|;
block|}
specifier|public
specifier|static
class|class
name|BufferUnderrunException
extends|extends
name|TikaException
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|8358288231138076276L
decl_stmt|;
specifier|public
name|BufferUnderrunException
parameter_list|()
block|{
name|super
argument_list|(
literal|"Insufficient data left in stream for required read"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

