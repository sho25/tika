begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|utils
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|Charset
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|IllegalCharsetNameException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_class
specifier|public
class|class
name|CharsetUtils
block|{
specifier|private
specifier|static
specifier|final
name|Pattern
name|CHARSET_NAME_PATTERN
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"[ \\\"]*([^>,;\\\"]+).*"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Pattern
name|ISO_NAME_PATTERN
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"(?i).*8859-([\\d]+)"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Pattern
name|CP_NAME_PATTERN
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"(?i)cp-([\\d]+)"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Pattern
name|WIN_NAME_PATTERN
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"(?i)win(|-)([\\d]+)"
argument_list|)
decl_stmt|;
comment|// List of common invalid charset names that we can't fix using
comment|// pattern matching + heuristic
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|CHARSET_ALIASES
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Charset
argument_list|>
name|STANDARD_CHARSETS
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Charset
argument_list|>
argument_list|()
decl_stmt|;
comment|/**      * Safely return whether<charsetName> is supported, without throwing exceptions      *       * @param charsetName Name of charset (can be null)      * @return true if the character set is supported      */
specifier|public
specifier|static
name|boolean
name|isSupported
parameter_list|(
name|String
name|charsetName
parameter_list|)
block|{
try|try
block|{
if|if
condition|(
name|isSupportedICU
operator|!=
literal|null
operator|&&
operator|(
operator|(
name|Boolean
operator|)
name|isSupportedICU
operator|.
name|invoke
argument_list|(
literal|null
argument_list|,
name|charsetName
argument_list|)
operator|)
operator|.
name|booleanValue
argument_list|()
condition|)
block|{
return|return
literal|true
return|;
block|}
return|return
name|Charset
operator|.
name|isSupported
argument_list|(
name|charsetName
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IllegalCharsetNameException
name|e
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
comment|// null, for example
return|return
literal|false
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// Unexpected exception, what to do?
return|return
literal|false
return|;
block|}
block|}
comment|/**      * Handle various common charset name errors, and return something      * that will be considered valid (and is normalized)      *       * @param charsetName name of charset to process      * @return potentially remapped/cleaned up version of charset name      */
specifier|public
specifier|static
name|String
name|clean
parameter_list|(
name|String
name|charsetName
parameter_list|)
block|{
try|try
block|{
return|return
name|forName
argument_list|(
name|charsetName
argument_list|)
operator|.
name|name
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
block|}
specifier|private
specifier|static
name|Method
name|getCharsetICU
decl_stmt|;
specifier|private
specifier|static
name|Method
name|isSupportedICU
decl_stmt|;
static|static
block|{
name|CHARSET_ALIASES
operator|.
name|put
argument_list|(
literal|"none"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|CHARSET_ALIASES
operator|.
name|put
argument_list|(
literal|"no"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|CHARSET_ALIASES
operator|.
name|put
argument_list|(
literal|"iso-8851-1"
argument_list|,
literal|"iso-8859-1"
argument_list|)
expr_stmt|;
name|CHARSET_ALIASES
operator|.
name|put
argument_list|(
literal|"windows"
argument_list|,
literal|"windows-1252"
argument_list|)
expr_stmt|;
name|CHARSET_ALIASES
operator|.
name|put
argument_list|(
literal|"koi8r"
argument_list|,
literal|"KOI8-R"
argument_list|)
expr_stmt|;
name|STANDARD_CHARSETS
operator|.
name|put
argument_list|(
literal|"US-ASCII"
argument_list|,
name|Charset
operator|.
name|forName
argument_list|(
literal|"US-ASCII"
argument_list|)
argument_list|)
expr_stmt|;
name|STANDARD_CHARSETS
operator|.
name|put
argument_list|(
literal|"ISO-8859-1"
argument_list|,
name|Charset
operator|.
name|forName
argument_list|(
literal|"ISO-8859-1"
argument_list|)
argument_list|)
expr_stmt|;
name|STANDARD_CHARSETS
operator|.
name|put
argument_list|(
literal|"UTF-8"
argument_list|,
name|Charset
operator|.
name|forName
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
expr_stmt|;
name|STANDARD_CHARSETS
operator|.
name|put
argument_list|(
literal|"UTF-16BE"
argument_list|,
name|Charset
operator|.
name|forName
argument_list|(
literal|"UTF-16BE"
argument_list|)
argument_list|)
expr_stmt|;
name|STANDARD_CHARSETS
operator|.
name|put
argument_list|(
literal|"UTF-16LE"
argument_list|,
name|Charset
operator|.
name|forName
argument_list|(
literal|"UTF-16LE"
argument_list|)
argument_list|)
expr_stmt|;
name|STANDARD_CHARSETS
operator|.
name|put
argument_list|(
literal|"UTF-16"
argument_list|,
name|Charset
operator|.
name|forName
argument_list|(
literal|"UTF-16"
argument_list|)
argument_list|)
expr_stmt|;
comment|// See if we can load the icu4j CharsetICU class
name|Class
argument_list|<
name|?
argument_list|>
name|icuCharset
init|=
literal|null
decl_stmt|;
try|try
block|{
name|icuCharset
operator|=
name|CharsetUtils
operator|.
name|class
operator|.
name|getClassLoader
argument_list|()
operator|.
name|loadClass
argument_list|(
literal|"com.ibm.icu.charset.CharsetICU"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{         }
if|if
condition|(
name|icuCharset
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|getCharsetICU
operator|=
name|icuCharset
operator|.
name|getMethod
argument_list|(
literal|"forNameICU"
argument_list|,
name|String
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|t
argument_list|)
throw|;
block|}
try|try
block|{
name|isSupportedICU
operator|=
name|icuCharset
operator|.
name|getMethod
argument_list|(
literal|"isSupported"
argument_list|,
name|String
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{             }
comment|// TODO: would be nice to somehow log that we
comment|// successfully found ICU
block|}
block|}
comment|/** Returns Charset impl, if one exists.  This method      *  optionally uses ICU4J's CharsetICU.forNameICU,      *  if it is found on the classpath, else only uses      *  JDK's builtin Charset.forName. */
specifier|public
specifier|static
name|Charset
name|forName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
if|if
condition|(
name|name
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
comment|// Get rid of cruft around names, like<>, trailing commas, etc.
name|Matcher
name|m
init|=
name|CHARSET_NAME_PATTERN
operator|.
name|matcher
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|m
operator|.
name|matches
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|name
argument_list|)
throw|;
block|}
name|String
name|result
init|=
name|m
operator|.
name|group
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|String
name|alias
init|=
name|CHARSET_ALIASES
operator|.
name|get
argument_list|(
name|result
operator|.
name|toLowerCase
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|alias
operator|!=
literal|null
condition|)
block|{
comment|// Handle common erroneous charset names.
name|result
operator|=
name|alias
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ISO_NAME_PATTERN
operator|.
name|matcher
argument_list|(
name|result
argument_list|)
operator|.
name|matches
argument_list|()
condition|)
block|{
comment|// Handle "iso 8859-x" error
name|m
operator|=
name|ISO_NAME_PATTERN
operator|.
name|matcher
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|m
operator|.
name|matches
argument_list|()
expr_stmt|;
name|result
operator|=
literal|"iso-8859-"
operator|+
name|m
operator|.
name|group
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|CP_NAME_PATTERN
operator|.
name|matcher
argument_list|(
name|result
argument_list|)
operator|.
name|matches
argument_list|()
condition|)
block|{
comment|// Handle "cp-xxx" error
name|m
operator|=
name|CP_NAME_PATTERN
operator|.
name|matcher
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|m
operator|.
name|matches
argument_list|()
expr_stmt|;
name|result
operator|=
literal|"cp"
operator|+
name|m
operator|.
name|group
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|WIN_NAME_PATTERN
operator|.
name|matcher
argument_list|(
name|result
argument_list|)
operator|.
name|matches
argument_list|()
condition|)
block|{
comment|// Handle "winxxx" and "win-xxx" errors
name|m
operator|=
name|WIN_NAME_PATTERN
operator|.
name|matcher
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|m
operator|.
name|matches
argument_list|()
expr_stmt|;
name|result
operator|=
literal|"windows-"
operator|+
name|m
operator|.
name|group
argument_list|(
literal|2
argument_list|)
expr_stmt|;
block|}
name|Charset
name|charset
init|=
name|STANDARD_CHARSETS
operator|.
name|get
argument_list|(
name|result
operator|.
name|toUpperCase
argument_list|(
name|Locale
operator|.
name|ENGLISH
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|charset
operator|!=
literal|null
condition|)
block|{
return|return
name|charset
return|;
block|}
if|if
condition|(
name|getCharsetICU
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|Charset
name|cs
init|=
operator|(
name|Charset
operator|)
name|getCharsetICU
operator|.
name|invoke
argument_list|(
literal|null
argument_list|,
name|result
argument_list|)
decl_stmt|;
if|if
condition|(
name|cs
operator|!=
literal|null
condition|)
block|{
return|return
name|cs
return|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// ignore
block|}
block|}
return|return
name|Charset
operator|.
name|forName
argument_list|(
name|result
argument_list|)
return|;
block|}
block|}
end_class

end_unit

