begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|utils
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|config
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|config
operator|.
name|Param
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|config
operator|.
name|ParamField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|config
operator|.
name|TikaConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|exception
operator|.
name|TikaConfigException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|annotation
operator|.
name|Annotation
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|AccessibleObject
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|AccessController
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedAction
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_comment
comment|/**  * This class contains utilities for dealing with tika annotations  * @since Apache Tika 1.14  */
end_comment

begin_class
specifier|public
class|class
name|AnnotationUtils
block|{
comment|/**      * Cache for annotations for Bean classes which have {@link Field}      */
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|,
name|List
argument_list|<
name|ParamField
argument_list|>
argument_list|>
name|PARAM_INFO
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|/**      * Collects all the fields and methods for an annotation      * @param clazz bean class with annotations      * @param annotation annotation class      * @return list of accessible objects such as fields and methods      */
specifier|private
specifier|static
name|List
argument_list|<
name|AccessibleObject
argument_list|>
name|collectInfo
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|Annotation
argument_list|>
name|annotation
parameter_list|)
block|{
name|Class
name|superClazz
init|=
name|clazz
decl_stmt|;
name|List
argument_list|<
name|AccessibleObject
argument_list|>
name|members
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|AccessibleObject
argument_list|>
name|annotatedMembers
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
comment|//walk through the inheritance chain
while|while
condition|(
name|superClazz
operator|!=
literal|null
operator|&&
name|superClazz
operator|!=
name|Object
operator|.
name|class
condition|)
block|{
name|members
operator|.
name|addAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|superClazz
operator|.
name|getDeclaredFields
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|members
operator|.
name|addAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|superClazz
operator|.
name|getDeclaredMethods
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|superClazz
operator|=
name|superClazz
operator|.
name|getSuperclass
argument_list|()
expr_stmt|;
block|}
for|for
control|(
specifier|final
name|AccessibleObject
name|member
range|:
name|members
control|)
block|{
if|if
condition|(
name|member
operator|.
name|isAnnotationPresent
argument_list|(
name|annotation
argument_list|)
condition|)
block|{
name|AccessController
operator|.
name|doPrivileged
argument_list|(
operator|new
name|PrivilegedAction
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|run
parameter_list|()
block|{
name|member
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|annotatedMembers
operator|.
name|add
argument_list|(
name|member
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|annotatedMembers
return|;
block|}
comment|/**      * Assigns the param values to bean      * @throws TikaConfigException when an error occurs while assigning params      */
specifier|public
specifier|static
name|void
name|assignFieldParams
parameter_list|(
name|Object
name|bean
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Param
argument_list|>
name|params
parameter_list|)
throws|throws
name|TikaConfigException
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|beanClass
init|=
name|bean
operator|.
name|getClass
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|PARAM_INFO
operator|.
name|containsKey
argument_list|(
name|beanClass
argument_list|)
condition|)
block|{
synchronized|synchronized
init|(
name|TikaConfig
operator|.
name|class
init|)
block|{
if|if
condition|(
operator|!
name|PARAM_INFO
operator|.
name|containsKey
argument_list|(
name|beanClass
argument_list|)
condition|)
block|{
name|List
argument_list|<
name|AccessibleObject
argument_list|>
name|aObjs
init|=
name|collectInfo
argument_list|(
name|beanClass
argument_list|,
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|config
operator|.
name|Field
operator|.
name|class
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ParamField
argument_list|>
name|fields
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|aObjs
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|AccessibleObject
name|aObj
range|:
name|aObjs
control|)
block|{
name|fields
operator|.
name|add
argument_list|(
operator|new
name|ParamField
argument_list|(
name|aObj
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|PARAM_INFO
operator|.
name|put
argument_list|(
name|beanClass
argument_list|,
name|fields
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|List
argument_list|<
name|ParamField
argument_list|>
name|fields
init|=
name|PARAM_INFO
operator|.
name|get
argument_list|(
name|beanClass
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|validFieldNames
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|ParamField
name|field
range|:
name|fields
control|)
block|{
name|validFieldNames
operator|.
name|add
argument_list|(
name|field
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Param
argument_list|<
name|?
argument_list|>
name|param
init|=
name|params
operator|.
name|get
argument_list|(
name|field
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|param
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|field
operator|.
name|getType
argument_list|()
operator|.
name|isAssignableFrom
argument_list|(
name|param
operator|.
name|getType
argument_list|()
argument_list|)
condition|)
block|{
try|try
block|{
name|field
operator|.
name|assignValue
argument_list|(
name|bean
argument_list|,
name|param
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|TikaConfigException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
else|else
block|{
name|String
name|msg
init|=
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"Value '%s' of type '%s' cant be"
operator|+
literal|" assigned to field '%s' of defined type '%s'"
argument_list|,
name|param
operator|.
name|getValue
argument_list|()
argument_list|,
name|param
operator|.
name|getValue
argument_list|()
operator|.
name|getClass
argument_list|()
argument_list|,
name|field
operator|.
name|getName
argument_list|()
argument_list|,
name|field
operator|.
name|getType
argument_list|()
argument_list|)
decl_stmt|;
throw|throw
operator|new
name|TikaConfigException
argument_list|(
name|msg
argument_list|)
throw|;
block|}
block|}
elseif|else
if|if
condition|(
name|field
operator|.
name|isRequired
argument_list|()
condition|)
block|{
comment|//param not supplied but field is declared as required?
name|String
name|msg
init|=
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"Param %s is required for %s,"
operator|+
literal|" but it is not given in config."
argument_list|,
name|field
operator|.
name|getName
argument_list|()
argument_list|,
name|bean
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
throw|throw
operator|new
name|TikaConfigException
argument_list|(
name|msg
argument_list|)
throw|;
block|}
else|else
block|{
comment|//FIXME: SLF4j is not showing up for import, fix it and send this to LOG.debug
comment|//LOG.debug("Param not supplied, field is not mandatory");
block|}
block|}
block|}
block|}
end_class

end_unit

