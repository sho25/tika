begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|utils
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|config
operator|.
name|ServiceLoader
import|;
end_import

begin_comment
comment|/**  * Service Loading and Ordering related utils  */
end_comment

begin_class
specifier|public
class|class
name|ServiceLoaderUtils
block|{
comment|/**      * Sorts a list of loaded classes, so that non-Tika ones come      *  before Tika ones, and otherwise in reverse alphabetical order      */
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|void
name|sortLoadedClasses
parameter_list|(
name|List
argument_list|<
name|T
argument_list|>
name|loaded
parameter_list|)
block|{
name|Collections
operator|.
name|sort
argument_list|(
name|loaded
argument_list|,
operator|new
name|Comparator
argument_list|<
name|T
argument_list|>
argument_list|()
block|{
specifier|public
name|int
name|compare
parameter_list|(
name|T
name|c1
parameter_list|,
name|T
name|c2
parameter_list|)
block|{
name|String
name|n1
init|=
name|c1
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
name|String
name|n2
init|=
name|c2
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
name|boolean
name|t1
init|=
name|n1
operator|.
name|startsWith
argument_list|(
literal|"org.apache.tika."
argument_list|)
decl_stmt|;
name|boolean
name|t2
init|=
name|n2
operator|.
name|startsWith
argument_list|(
literal|"org.apache.tika."
argument_list|)
decl_stmt|;
if|if
condition|(
name|t1
operator|==
name|t2
condition|)
block|{
return|return
name|n1
operator|.
name|compareTo
argument_list|(
name|n2
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|t1
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
else|else
block|{
return|return
literal|1
return|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
comment|/**      * Loads a class and instantiates it      * @param className service class name      * @param<T> service type      * @return instance of service      */
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|T
name|newInstance
parameter_list|(
name|String
name|className
parameter_list|)
block|{
return|return
name|newInstance
argument_list|(
name|className
argument_list|,
name|ServiceLoader
operator|.
name|class
operator|.
name|getClassLoader
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * Loads a class and instantiates it      * @param className service class name      * @param loader class loader      * @param<T> service type      * @return instance of service      */
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|T
name|newInstance
parameter_list|(
name|String
name|className
parameter_list|,
name|ClassLoader
name|loader
parameter_list|)
block|{
try|try
block|{
name|Class
name|loadedClass
init|=
name|Class
operator|.
name|forName
argument_list|(
name|className
argument_list|,
literal|true
argument_list|,
name|loader
argument_list|)
decl_stmt|;
name|Class
argument_list|<
name|T
argument_list|>
name|castedClass
init|=
name|loadedClass
decl_stmt|;
name|T
name|instance
init|=
name|castedClass
operator|.
name|newInstance
argument_list|()
decl_stmt|;
return|return
name|instance
return|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
decl||
name|InstantiationException
decl||
name|IllegalAccessException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

