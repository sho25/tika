begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|utils
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|metadata
operator|.
name|Metadata
import|;
end_import

begin_comment
comment|/**  * Helper util methods for Parsers themselves.  */
end_comment

begin_class
specifier|public
class|class
name|ParserUtils
block|{
comment|/**      * Does a deep clone of a Metadata object.      */
specifier|public
specifier|static
name|Metadata
name|cloneMetadata
parameter_list|(
name|Metadata
name|m
parameter_list|)
block|{
name|Metadata
name|clone
init|=
operator|new
name|Metadata
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|n
range|:
name|m
operator|.
name|names
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|m
operator|.
name|isMultiValued
argument_list|(
name|n
argument_list|)
condition|)
block|{
name|clone
operator|.
name|set
argument_list|(
name|n
argument_list|,
name|m
operator|.
name|get
argument_list|(
name|n
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|String
index|[]
name|vals
init|=
name|m
operator|.
name|getValues
argument_list|(
name|n
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|vals
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|clone
operator|.
name|add
argument_list|(
name|n
argument_list|,
name|vals
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|clone
return|;
block|}
block|}
end_class

end_unit

