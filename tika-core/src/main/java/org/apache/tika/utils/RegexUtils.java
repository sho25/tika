begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|utils
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_comment
comment|/**  * Inspired from Nutch code class OutlinkExtractor. Apply regex to extract  * content  *   *   */
end_comment

begin_class
specifier|public
class|class
name|RegexUtils
block|{
comment|/**      * Regex pattern to get URLs within a plain text.      *       * @see<a      *      href="http://www.truerwords.net/articles/ut/urlactivation.html">http://www.truerwords.net/articles/ut/urlactivation.html      *</a>      */
specifier|private
specifier|static
specifier|final
name|String
name|LINKS_REGEX
init|=
literal|"([A-Za-z][A-Za-z0-9+.-]{1,120}:"
operator|+
literal|"[A-Za-z0-9/](([A-Za-z0-9$_.+!*,;/?:@&~=-])|%[A-Fa-f0-9]{2}){1,333}"
operator|+
literal|"(#([a-zA-Z0-9][a-zA-Z0-9$_.+!*,;/?:@&~=%-]{0,1000}))?)"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Pattern
name|LINKS_PATTERN
init|=
name|Pattern
operator|.
name|compile
argument_list|(
name|LINKS_REGEX
argument_list|,
name|Pattern
operator|.
name|CASE_INSENSITIVE
operator|+
name|Pattern
operator|.
name|MULTILINE
argument_list|)
decl_stmt|;
comment|/**      * Extract urls from plain text.      *      * @param content The plain text content to examine      * @return List of urls within found in the plain text      */
specifier|public
specifier|static
name|List
argument_list|<
name|String
argument_list|>
name|extractLinks
parameter_list|(
name|String
name|content
parameter_list|)
block|{
if|if
condition|(
name|content
operator|==
literal|null
operator|||
name|content
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|extractions
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
specifier|final
name|Matcher
name|matcher
init|=
name|LINKS_PATTERN
operator|.
name|matcher
argument_list|(
name|content
argument_list|)
decl_stmt|;
while|while
condition|(
name|matcher
operator|.
name|find
argument_list|()
condition|)
block|{
name|extractions
operator|.
name|add
argument_list|(
name|matcher
operator|.
name|group
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|extractions
return|;
block|}
block|}
end_class

end_unit

