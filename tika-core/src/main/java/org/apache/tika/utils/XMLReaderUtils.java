begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|utils
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|exception
operator|.
name|TikaException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|ParseContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|EntityResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|InputSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXNotRecognizedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXNotSupportedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|XMLReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|helpers
operator|.
name|DefaultHandler
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|XMLConstants
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|DocumentBuilder
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|DocumentBuilderFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|ParserConfigurationException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|SAXParser
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|SAXParserFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|XMLInputFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|XMLResolver
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|XMLStreamException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|Transformer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|TransformerConfigurationException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|TransformerFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|TransformerFactoryConfigurationError
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ArrayBlockingQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantReadWriteLock
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_comment
comment|/**  * Utility functions for reading XML.  If you are doing SAX parsing, make sure  * to use the {@link org.apache.tika.sax.OfflineContentHandler} to guard against  * XML External Entity attacks.  */
end_comment

begin_class
specifier|public
class|class
name|XMLReaderUtils
implements|implements
name|Serializable
block|{
comment|/**      * Serial version UID      */
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|6110455808615143122L
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|Logger
operator|.
name|getLogger
argument_list|(
name|XMLReaderUtils
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
comment|/**      * Parser pool size      */
specifier|private
specifier|static
name|int
name|POOL_SIZE
init|=
literal|10
decl_stmt|;
specifier|private
specifier|static
name|long
name|LAST_LOG
init|=
operator|-
literal|1
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|JAXP_ENTITY_EXPANSION_LIMIT_KEY
init|=
literal|"jdk.xml.entityExpansionLimit"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|DEFAULT_MAX_ENTITY_EXPANSIONS
init|=
literal|20
decl_stmt|;
specifier|private
specifier|static
name|int
name|MAX_ENTITY_EXPANSIONS
init|=
name|determineMaxEntityExpansions
argument_list|()
decl_stmt|;
specifier|private
specifier|static
name|int
name|determineMaxEntityExpansions
parameter_list|()
block|{
name|String
name|expansionLimit
init|=
name|System
operator|.
name|getProperty
argument_list|(
name|JAXP_ENTITY_EXPANSION_LIMIT_KEY
argument_list|)
decl_stmt|;
if|if
condition|(
name|expansionLimit
operator|!=
literal|null
condition|)
block|{
try|try
block|{
return|return
name|Integer
operator|.
name|parseInt
argument_list|(
name|expansionLimit
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|WARNING
argument_list|,
literal|"Couldn't parse an integer for the entity expansion limit:"
operator|+
name|expansionLimit
operator|+
literal|"; backing off to default: "
operator|+
name|DEFAULT_MAX_ENTITY_EXPANSIONS
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|DEFAULT_MAX_ENTITY_EXPANSIONS
return|;
block|}
comment|//TODO: figure out if the rw lock is any better than a simple lock
specifier|private
specifier|static
specifier|final
name|ReentrantReadWriteLock
name|SAX_READ_WRITE_LOCK
init|=
operator|new
name|ReentrantReadWriteLock
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|ReentrantReadWriteLock
name|DOM_READ_WRITE_LOCK
init|=
operator|new
name|ReentrantReadWriteLock
argument_list|()
decl_stmt|;
specifier|private
specifier|static
name|ArrayBlockingQueue
argument_list|<
name|SAXParser
argument_list|>
name|SAX_PARSERS
init|=
operator|new
name|ArrayBlockingQueue
argument_list|<>
argument_list|(
name|POOL_SIZE
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|ArrayBlockingQueue
argument_list|<
name|DocumentBuilder
argument_list|>
name|DOM_BUILDERS
init|=
operator|new
name|ArrayBlockingQueue
argument_list|<>
argument_list|(
name|POOL_SIZE
argument_list|)
decl_stmt|;
static|static
block|{
try|try
block|{
name|setPoolSize
argument_list|(
name|POOL_SIZE
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TikaException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"problem initializing SAXParser and DOMBuilder pools"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|static
specifier|final
name|EntityResolver
name|IGNORING_SAX_ENTITY_RESOLVER
init|=
operator|new
name|EntityResolver
argument_list|()
block|{
specifier|public
name|InputSource
name|resolveEntity
parameter_list|(
name|String
name|publicId
parameter_list|,
name|String
name|systemId
parameter_list|)
throws|throws
name|SAXException
throws|,
name|IOException
block|{
return|return
operator|new
name|InputSource
argument_list|(
operator|new
name|StringReader
argument_list|(
literal|""
argument_list|)
argument_list|)
return|;
block|}
block|}
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|XMLResolver
name|IGNORING_STAX_ENTITY_RESOLVER
init|=
operator|new
name|XMLResolver
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|resolveEntity
parameter_list|(
name|String
name|publicID
parameter_list|,
name|String
name|systemID
parameter_list|,
name|String
name|baseURI
parameter_list|,
name|String
name|namespace
parameter_list|)
throws|throws
name|XMLStreamException
block|{
return|return
literal|""
return|;
block|}
block|}
decl_stmt|;
comment|/**      * Set the maximum number of entity expansions allowable in SAX/DOM/StAX parsing.      *<b>NOTE:</b>A value less than or equal to zero indicates no limit.      * This will override the system property {@link #JAXP_ENTITY_EXPANSION_LIMIT_KEY}      * and the {@link #DEFAULT_MAX_ENTITY_EXPANSIONS} value for pa      *      * @param maxEntityExpansions -- maximum number of allowable entity expansions      * @since Apache Tika 1.19      */
specifier|public
specifier|static
name|void
name|setMaxEntityExpansions
parameter_list|(
name|int
name|maxEntityExpansions
parameter_list|)
block|{
name|MAX_ENTITY_EXPANSIONS
operator|=
name|maxEntityExpansions
expr_stmt|;
block|}
comment|/**      * Returns the XMLReader specified in this parsing context. If a reader      * is not explicitly specified, then one is created using the specified      * or the default SAX parser.      *      * @return XMLReader      * @throws TikaException      * @see #getSAXParser()      * @since Apache Tika 1.13      */
specifier|public
specifier|static
name|XMLReader
name|getXMLReader
parameter_list|()
throws|throws
name|TikaException
block|{
name|XMLReader
name|reader
decl_stmt|;
try|try
block|{
name|reader
operator|=
name|getSAXParser
argument_list|()
operator|.
name|getXMLReader
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SAXException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|TikaException
argument_list|(
literal|"Unable to create an XMLReader"
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|reader
operator|.
name|setEntityResolver
argument_list|(
name|IGNORING_SAX_ENTITY_RESOLVER
argument_list|)
expr_stmt|;
return|return
name|reader
return|;
block|}
comment|/**      * Returns the SAX parser specified in this parsing context. If a parser      * is not explicitly specified, then one is created using the specified      * or the default SAX parser factory.      *<p>      * Make sure to wrap your handler in the {@link org.apache.tika.sax.OfflineContentHandler} to      * prevent XML External Entity attacks      *</p>      *      * @return SAX parser      * @throws TikaException if a SAX parser could not be created      * @see #getSAXParserFactory()      * @since Apache Tika 0.8      */
specifier|public
specifier|static
name|SAXParser
name|getSAXParser
parameter_list|()
throws|throws
name|TikaException
block|{
try|try
block|{
name|SAXParser
name|parser
init|=
name|getSAXParserFactory
argument_list|()
operator|.
name|newSAXParser
argument_list|()
decl_stmt|;
name|trySetXercesSecurityManager
argument_list|(
name|parser
argument_list|)
expr_stmt|;
return|return
name|parser
return|;
block|}
catch|catch
parameter_list|(
name|ParserConfigurationException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|TikaException
argument_list|(
literal|"Unable to configure a SAX parser"
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|SAXException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|TikaException
argument_list|(
literal|"Unable to create a SAX parser"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**      * Returns the SAX parser factory specified in this parsing context.      * If a factory is not explicitly specified, then a default factory      * instance is created and returned. The default factory instance is      * configured to be namespace-aware, not validating, and to use      * {@link XMLConstants#FEATURE_SECURE_PROCESSING secure XML processing}.      *<p>      * Make sure to wrap your handler in the {@link org.apache.tika.sax.OfflineContentHandler} to      * prevent XML External Entity attacks      *</p>      *      * @return SAX parser factory      * @since Apache Tika 0.8      */
specifier|public
specifier|static
name|SAXParserFactory
name|getSAXParserFactory
parameter_list|()
block|{
name|SAXParserFactory
name|factory
init|=
name|SAXParserFactory
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|factory
operator|.
name|setNamespaceAware
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|factory
operator|.
name|setValidating
argument_list|(
literal|false
argument_list|)
expr_stmt|;
try|try
block|{
name|factory
operator|.
name|setFeature
argument_list|(
name|XMLConstants
operator|.
name|FEATURE_SECURE_PROCESSING
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParserConfigurationException
name|e
parameter_list|)
block|{         }
catch|catch
parameter_list|(
name|SAXNotSupportedException
name|e
parameter_list|)
block|{         }
catch|catch
parameter_list|(
name|SAXNotRecognizedException
name|e
parameter_list|)
block|{
comment|// TIKA-271: Some XML parsers do not support the
comment|// secure-processing feature, even though it's required by
comment|// JAXP in Java 5. Ignoring the exception is fine here, as
comment|// deployments without this feature are inherently vulnerable
comment|// to XML denial-of-service attacks.
block|}
return|return
name|factory
return|;
block|}
comment|/**      * Returns the DOM builder factory specified in this parsing context.      * If a factory is not explicitly specified, then a default factory      * instance is created and returned. The default factory instance is      * configured to be namespace-aware and to apply reasonable security      * features.      *      * @return DOM parser factory      * @since Apache Tika 1.13      */
specifier|public
specifier|static
name|DocumentBuilderFactory
name|getDocumentBuilderFactory
parameter_list|()
block|{
comment|//borrowed from Apache POI
name|DocumentBuilderFactory
name|factory
init|=
name|DocumentBuilderFactory
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|factory
operator|.
name|setExpandEntityReferences
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|factory
operator|.
name|setNamespaceAware
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|factory
operator|.
name|setValidating
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|trySetSAXFeature
argument_list|(
name|factory
argument_list|,
name|XMLConstants
operator|.
name|FEATURE_SECURE_PROCESSING
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|trySetSAXFeature
argument_list|(
name|factory
argument_list|,
literal|"http://xml.org/sax/features/external-general-entities"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|trySetSAXFeature
argument_list|(
name|factory
argument_list|,
literal|"http://xml.org/sax/features/external-parameter-entities"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|trySetSAXFeature
argument_list|(
name|factory
argument_list|,
literal|"http://apache.org/xml/features/nonvalidating/load-external-dtd"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|trySetSAXFeature
argument_list|(
name|factory
argument_list|,
literal|"http://apache.org/xml/features/nonvalidating/load-dtd-grammar"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|trySetXercesSecurityManager
argument_list|(
name|factory
argument_list|)
expr_stmt|;
return|return
name|factory
return|;
block|}
comment|/**      * Returns the DOM builder specified in this parsing context.      * If a builder is not explicitly specified, then a builder      * instance is created and returned. The builder instance is      * configured to apply an {@link #IGNORING_SAX_ENTITY_RESOLVER},      * and it sets the ErrorHandler to<code>null</code>.      *      * @return DOM Builder      * @since Apache Tika 1.13      */
specifier|public
specifier|static
name|DocumentBuilder
name|getDocumentBuilder
parameter_list|()
throws|throws
name|TikaException
block|{
try|try
block|{
name|DocumentBuilderFactory
name|documentBuilderFactory
init|=
name|getDocumentBuilderFactory
argument_list|()
decl_stmt|;
name|DocumentBuilder
name|documentBuilder
init|=
name|documentBuilderFactory
operator|.
name|newDocumentBuilder
argument_list|()
decl_stmt|;
name|documentBuilder
operator|.
name|setEntityResolver
argument_list|(
name|IGNORING_SAX_ENTITY_RESOLVER
argument_list|)
expr_stmt|;
name|documentBuilder
operator|.
name|setErrorHandler
argument_list|(
literal|null
argument_list|)
expr_stmt|;
return|return
name|documentBuilder
return|;
block|}
catch|catch
parameter_list|(
name|ParserConfigurationException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|TikaException
argument_list|(
literal|"XML parser not available"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**      * Returns the StAX input factory specified in this parsing context.      * If a factory is not explicitly specified, then a default factory      * instance is created and returned. The default factory instance is      * configured to be namespace-aware and to apply reasonable security      * using the {@link #IGNORING_STAX_ENTITY_RESOLVER}.      *      * @return StAX input factory      * @since Apache Tika 1.13      */
specifier|public
specifier|static
name|XMLInputFactory
name|getXMLInputFactory
parameter_list|()
block|{
name|XMLInputFactory
name|factory
init|=
name|XMLInputFactory
operator|.
name|newFactory
argument_list|()
decl_stmt|;
name|tryToSetStaxProperty
argument_list|(
name|factory
argument_list|,
name|XMLInputFactory
operator|.
name|IS_NAMESPACE_AWARE
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|tryToSetStaxProperty
argument_list|(
name|factory
argument_list|,
name|XMLInputFactory
operator|.
name|IS_VALIDATING
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|factory
operator|.
name|setXMLResolver
argument_list|(
name|IGNORING_STAX_ENTITY_RESOLVER
argument_list|)
expr_stmt|;
name|trySetStaxSecurityManager
argument_list|(
name|factory
argument_list|)
expr_stmt|;
return|return
name|factory
return|;
block|}
specifier|private
specifier|static
name|void
name|trySetSAXFeature
parameter_list|(
name|DocumentBuilderFactory
name|documentBuilderFactory
parameter_list|,
name|String
name|feature
parameter_list|,
name|boolean
name|enabled
parameter_list|)
block|{
try|try
block|{
name|documentBuilderFactory
operator|.
name|setFeature
argument_list|(
name|feature
argument_list|,
name|enabled
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|WARNING
argument_list|,
literal|"SAX Feature unsupported: "
operator|+
name|feature
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AbstractMethodError
name|ame
parameter_list|)
block|{
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|WARNING
argument_list|,
literal|"Cannot set SAX feature because outdated XML parser in classpath: "
operator|+
name|feature
argument_list|,
name|ame
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|void
name|tryToSetStaxProperty
parameter_list|(
name|XMLInputFactory
name|factory
parameter_list|,
name|String
name|key
parameter_list|,
name|boolean
name|value
parameter_list|)
block|{
try|try
block|{
name|factory
operator|.
name|setProperty
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|WARNING
argument_list|,
literal|"StAX Feature unsupported: "
operator|+
name|key
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Returns a new transformer      *<p>      * The transformer instance is configured to to use      * {@link XMLConstants#FEATURE_SECURE_PROCESSING secure XML processing}.      *      * @return Transformer      * @throws TikaException when the transformer can not be created      * @since Apache Tika 1.17      */
specifier|public
specifier|static
name|Transformer
name|getTransformer
parameter_list|()
throws|throws
name|TikaException
block|{
try|try
block|{
name|TransformerFactory
name|transformerFactory
init|=
name|TransformerFactory
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|transformerFactory
operator|.
name|setFeature
argument_list|(
name|XMLConstants
operator|.
name|FEATURE_SECURE_PROCESSING
argument_list|,
literal|true
argument_list|)
expr_stmt|;
return|return
name|transformerFactory
operator|.
name|newTransformer
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|TransformerConfigurationException
decl||
name|TransformerFactoryConfigurationError
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|TikaException
argument_list|(
literal|"Transformer not available"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**      * This checks context for a user specified {@link DocumentBuilder}.      * If one is not found, this reuses a DocumentBuilder from the pool.      *      * @since Apache Tika 1.19      * @param is InputStream to parse      * @param context context to use      * @return a document      * @throws TikaException      * @throws IOException      * @throws SAXException      */
specifier|public
specifier|static
name|Document
name|buildDOM
parameter_list|(
name|InputStream
name|is
parameter_list|,
name|ParseContext
name|context
parameter_list|)
throws|throws
name|TikaException
throws|,
name|IOException
throws|,
name|SAXException
block|{
name|DocumentBuilder
name|builderFromContext
init|=
name|context
operator|.
name|get
argument_list|(
name|DocumentBuilder
operator|.
name|class
argument_list|)
decl_stmt|;
name|DocumentBuilder
name|builder
init|=
operator|(
name|builderFromContext
operator|==
literal|null
operator|)
condition|?
name|acquireDOMBuilder
argument_list|()
else|:
name|builderFromContext
decl_stmt|;
try|try
block|{
return|return
name|builder
operator|.
name|parse
argument_list|(
name|is
argument_list|)
return|;
block|}
finally|finally
block|{
if|if
condition|(
name|builderFromContext
operator|==
literal|null
condition|)
block|{
name|releaseDOMBuilder
argument_list|(
name|builder
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * This checks context for a user specified {@link SAXParser}.      * If one is not found, this reuses a SAXParser from the pool.      *      * @since Apache Tika 1.19      * @param is InputStream to parse      * @param contentHandler handler to use      * @param context context to use      * @return      * @throws TikaException      * @throws IOException      * @throws SAXException      */
specifier|public
specifier|static
name|void
name|parseSAX
parameter_list|(
name|InputStream
name|is
parameter_list|,
name|DefaultHandler
name|contentHandler
parameter_list|,
name|ParseContext
name|context
parameter_list|)
throws|throws
name|TikaException
throws|,
name|IOException
throws|,
name|SAXException
block|{
name|SAXParser
name|contextParser
init|=
name|context
operator|.
name|get
argument_list|(
name|SAXParser
operator|.
name|class
argument_list|)
decl_stmt|;
name|SAXParser
name|parser
init|=
operator|(
name|contextParser
operator|==
literal|null
operator|)
condition|?
name|acquireSAXParser
argument_list|()
else|:
name|contextParser
decl_stmt|;
try|try
block|{
name|parser
operator|.
name|parse
argument_list|(
name|is
argument_list|,
name|contentHandler
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|contextParser
operator|==
literal|null
condition|)
block|{
name|releaseParser
argument_list|(
name|parser
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Acquire a SAXParser from the pool.  Make sure to      * {@link #releaseParser(SAXParser)} in      * a<code>finally</code> block every time you call this.      *      * @return a SAXParser      * @throws TikaException      */
specifier|private
specifier|static
name|DocumentBuilder
name|acquireDOMBuilder
parameter_list|()
throws|throws
name|TikaException
block|{
name|int
name|waiting
init|=
literal|0
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|DocumentBuilder
name|builder
init|=
literal|null
decl_stmt|;
try|try
block|{
name|DOM_READ_WRITE_LOCK
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
name|builder
operator|=
name|DOM_BUILDERS
operator|.
name|poll
argument_list|(
literal|100
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|TikaException
argument_list|(
literal|"interrupted while waiting for DOMBuilder"
argument_list|,
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|DOM_READ_WRITE_LOCK
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|builder
operator|!=
literal|null
condition|)
block|{
return|return
name|builder
return|;
block|}
name|waiting
operator|++
expr_stmt|;
if|if
condition|(
name|waiting
operator|>
literal|3000
condition|)
block|{
comment|//freshen the pool.  Something went very wrong...
name|setPoolSize
argument_list|(
name|POOL_SIZE
argument_list|)
expr_stmt|;
comment|//better to get an exception than have permahang by a bug in one of our parsers
throw|throw
operator|new
name|TikaException
argument_list|(
literal|"Waited more than 5 minutes for a DocumentBuilder; "
operator|+
literal|"This could indicate that a parser has not correctly released its DocumentBuilder. "
operator|+
literal|"Please report this to the Tika team: dev@tika.apache.org"
argument_list|)
throw|;
block|}
block|}
block|}
comment|/**      * Return parser to the pool for reuse.      *      * @param builder builder to return      */
specifier|private
specifier|static
name|void
name|releaseDOMBuilder
parameter_list|(
name|DocumentBuilder
name|builder
parameter_list|)
block|{
try|try
block|{
name|builder
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedOperationException
name|e
parameter_list|)
block|{
comment|//ignore
block|}
try|try
block|{
name|DOM_READ_WRITE_LOCK
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
comment|//if there are extra parsers (e.g. after a reset of the pool to a smaller size),
comment|// this parser will not be added and will then be gc'd
name|boolean
name|success
init|=
name|DOM_BUILDERS
operator|.
name|offer
argument_list|(
name|builder
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|success
condition|)
block|{
name|LOG
operator|.
name|warning
argument_list|(
literal|"DocumentBuilder not taken back into pool.  If you haven't resized the pool, this could "
operator|+
literal|"be a sign that there are more calls to 'acquire' than to 'release'"
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|DOM_READ_WRITE_LOCK
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * Acquire a SAXParser from the pool.  Make sure to      * {@link #releaseParser(SAXParser)} in      * a<code>finally</code> block every time you call this.      *      * @return a SAXParser      * @throws TikaException      */
specifier|private
specifier|static
name|SAXParser
name|acquireSAXParser
parameter_list|()
throws|throws
name|TikaException
block|{
name|int
name|waiting
init|=
literal|0
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|SAXParser
name|parser
init|=
literal|null
decl_stmt|;
try|try
block|{
name|SAX_READ_WRITE_LOCK
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
name|parser
operator|=
name|SAX_PARSERS
operator|.
name|poll
argument_list|(
literal|100
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|TikaException
argument_list|(
literal|"interrupted while waiting for SAXParser"
argument_list|,
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|SAX_READ_WRITE_LOCK
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|parser
operator|!=
literal|null
condition|)
block|{
return|return
name|parser
return|;
block|}
name|waiting
operator|++
expr_stmt|;
if|if
condition|(
name|waiting
operator|>
literal|3000
condition|)
block|{
comment|//freshen the pool.  Something went very wrong...
name|setPoolSize
argument_list|(
name|POOL_SIZE
argument_list|)
expr_stmt|;
comment|//better to get an exception than have permahang by a bug in one of our parsers
throw|throw
operator|new
name|TikaException
argument_list|(
literal|"Waited more than 5 minutes for a SAXParser; "
operator|+
literal|"This could indicate that a parser has not correctly released its SAXParser. "
operator|+
literal|"Please report this to the Tika team: dev@tika.apache.org"
argument_list|)
throw|;
block|}
block|}
block|}
comment|/**      * Return parser to the pool for reuse      *      * @param parser parser to return      */
specifier|private
specifier|static
name|void
name|releaseParser
parameter_list|(
name|SAXParser
name|parser
parameter_list|)
block|{
try|try
block|{
name|parser
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedOperationException
name|e
parameter_list|)
block|{
comment|//ignore
block|}
try|try
block|{
name|SAX_READ_WRITE_LOCK
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
comment|//if there are extra parsers (e.g. after a reset of the pool to a smaller size),
comment|// this parser will not be added and will then be gc'd
name|boolean
name|success
init|=
name|SAX_PARSERS
operator|.
name|offer
argument_list|(
name|parser
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|success
condition|)
block|{
name|LOG
operator|.
name|warning
argument_list|(
literal|"SAXParser not taken back into pool.  If you haven't resized the pool, this could "
operator|+
literal|"be a sign that there are more calls to 'acquire' than to 'release'"
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|SAX_READ_WRITE_LOCK
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * Set the pool size for cached XML parsers.      *      * @since Apache Tika 1.19      * @param poolSize      */
specifier|public
specifier|static
name|void
name|setPoolSize
parameter_list|(
name|int
name|poolSize
parameter_list|)
throws|throws
name|TikaException
block|{
try|try
block|{
comment|//stop the world with a write lock.
comment|//parsers that are currently in use will be offered later (once the lock is released),
comment|//but not accepted and will be gc'd.  We have to do this locking and
comment|//the read locking in case one thread resizes the pool when the
comment|//parsers have already started.  We could have an NPE on SAX_PARSERS
comment|//if we didn't lock.
name|SAX_READ_WRITE_LOCK
operator|.
name|writeLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
if|if
condition|(
name|SAX_PARSERS
operator|.
name|size
argument_list|()
operator|!=
name|poolSize
condition|)
block|{
name|SAX_PARSERS
operator|=
operator|new
name|ArrayBlockingQueue
argument_list|<>
argument_list|(
name|poolSize
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|poolSize
condition|;
name|i
operator|++
control|)
block|{
name|SAX_PARSERS
operator|.
name|offer
argument_list|(
name|getSAXParser
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
name|SAX_READ_WRITE_LOCK
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
try|try
block|{
name|DOM_READ_WRITE_LOCK
operator|.
name|writeLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
if|if
condition|(
name|DOM_BUILDERS
operator|.
name|size
argument_list|()
operator|!=
name|poolSize
condition|)
block|{
name|DOM_BUILDERS
operator|=
operator|new
name|ArrayBlockingQueue
argument_list|<>
argument_list|(
name|poolSize
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|poolSize
condition|;
name|i
operator|++
control|)
block|{
name|DOM_BUILDERS
operator|.
name|offer
argument_list|(
name|getDocumentBuilder
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
name|DOM_READ_WRITE_LOCK
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
name|POOL_SIZE
operator|=
name|poolSize
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|trySetXercesSecurityManager
parameter_list|(
name|DocumentBuilderFactory
name|factory
parameter_list|)
block|{
comment|//from POI
comment|// Try built-in JVM one first, standalone if not
for|for
control|(
name|String
name|securityManagerClassName
range|:
operator|new
name|String
index|[]
block|{
comment|//"com.sun.org.apache.xerces.internal.util.SecurityManager",
literal|"org.apache.xerces.util.SecurityManager"
block|}
control|)
block|{
try|try
block|{
name|Object
name|mgr
init|=
name|Class
operator|.
name|forName
argument_list|(
name|securityManagerClassName
argument_list|)
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|Method
name|setLimit
init|=
name|mgr
operator|.
name|getClass
argument_list|()
operator|.
name|getMethod
argument_list|(
literal|"setEntityExpansionLimit"
argument_list|,
name|Integer
operator|.
name|TYPE
argument_list|)
decl_stmt|;
name|setLimit
operator|.
name|invoke
argument_list|(
name|mgr
argument_list|,
name|MAX_ENTITY_EXPANSIONS
argument_list|)
expr_stmt|;
name|factory
operator|.
name|setAttribute
argument_list|(
literal|"http://apache.org/xml/properties/security-manager"
argument_list|,
name|mgr
argument_list|)
expr_stmt|;
comment|// Stop once one can be setup without error
return|return;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
comment|// continue without log, this is expected in some setups
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
comment|// NOSONAR - also catch things like NoClassDefError here
comment|// throttle the log somewhat as it can spam the log otherwise
if|if
condition|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|>
name|LAST_LOG
operator|+
name|TimeUnit
operator|.
name|MINUTES
operator|.
name|toMillis
argument_list|(
literal|5
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|WARNING
argument_list|,
literal|"SAX Security Manager could not be setup [log suppressed for 5 minutes]"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|LAST_LOG
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|// separate old version of Xerces not found => use the builtin way of setting the property
try|try
block|{
name|factory
operator|.
name|setAttribute
argument_list|(
literal|"http://www.oracle.com/xml/jaxp/properties/entityExpansionLimit"
argument_list|,
name|MAX_ENTITY_EXPANSIONS
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
comment|// NOSONAR - also catch things like NoClassDefError here
comment|// throttle the log somewhat as it can spam the log otherwise
if|if
condition|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|>
name|LAST_LOG
operator|+
name|TimeUnit
operator|.
name|MINUTES
operator|.
name|toMillis
argument_list|(
literal|5
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|WARNING
argument_list|,
literal|"SAX Security Manager could not be setup [log suppressed for 5 minutes]"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|LAST_LOG
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|private
specifier|static
name|void
name|trySetXercesSecurityManager
parameter_list|(
name|SAXParser
name|parser
parameter_list|)
block|{
comment|//from POI
comment|// Try built-in JVM one first, standalone if not
for|for
control|(
name|String
name|securityManagerClassName
range|:
operator|new
name|String
index|[]
block|{
comment|//"com.sun.org.apache.xerces.internal.util.SecurityManager",
literal|"org.apache.xerces.util.SecurityManager"
block|}
control|)
block|{
try|try
block|{
name|Object
name|mgr
init|=
name|Class
operator|.
name|forName
argument_list|(
name|securityManagerClassName
argument_list|)
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|Method
name|setLimit
init|=
name|mgr
operator|.
name|getClass
argument_list|()
operator|.
name|getMethod
argument_list|(
literal|"setEntityExpansionLimit"
argument_list|,
name|Integer
operator|.
name|TYPE
argument_list|)
decl_stmt|;
name|setLimit
operator|.
name|invoke
argument_list|(
name|mgr
argument_list|,
name|MAX_ENTITY_EXPANSIONS
argument_list|)
expr_stmt|;
name|parser
operator|.
name|setProperty
argument_list|(
literal|"http://apache.org/xml/properties/security-manager"
argument_list|,
name|mgr
argument_list|)
expr_stmt|;
comment|// Stop once one can be setup without error
return|return;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
comment|// continue without log, this is expected in some setups
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
comment|// NOSONAR - also catch things like NoClassDefError here
comment|// throttle the log somewhat as it can spam the log otherwise
if|if
condition|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|>
name|LAST_LOG
operator|+
name|TimeUnit
operator|.
name|MINUTES
operator|.
name|toMillis
argument_list|(
literal|5
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|WARNING
argument_list|,
literal|"SAX Security Manager could not be setup [log suppressed for 5 minutes]"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|LAST_LOG
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|// separate old version of Xerces not found => use the builtin way of setting the property
try|try
block|{
name|parser
operator|.
name|setProperty
argument_list|(
literal|"http://www.oracle.com/xml/jaxp/properties/entityExpansionLimit"
argument_list|,
name|MAX_ENTITY_EXPANSIONS
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SAXException
name|e
parameter_list|)
block|{
comment|// NOSONAR - also catch things like NoClassDefError here
comment|// throttle the log somewhat as it can spam the log otherwise
if|if
condition|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|>
name|LAST_LOG
operator|+
name|TimeUnit
operator|.
name|MINUTES
operator|.
name|toMillis
argument_list|(
literal|5
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|WARNING
argument_list|,
literal|"SAX Security Manager could not be setup [log suppressed for 5 minutes]"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|LAST_LOG
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|private
specifier|static
name|void
name|trySetStaxSecurityManager
parameter_list|(
name|XMLInputFactory
name|inputFactory
parameter_list|)
block|{
try|try
block|{
name|inputFactory
operator|.
name|setProperty
argument_list|(
literal|"com.ctc.wstx.maxEntityCount"
argument_list|,
name|MAX_ENTITY_EXPANSIONS
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
comment|// throttle the log somewhat as it can spam the log otherwise
if|if
condition|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|>
name|LAST_LOG
operator|+
name|TimeUnit
operator|.
name|MINUTES
operator|.
name|toMillis
argument_list|(
literal|5
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|WARNING
argument_list|,
literal|"SAX Security Manager could not be setup [log suppressed for 5 minutes]"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|LAST_LOG
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

