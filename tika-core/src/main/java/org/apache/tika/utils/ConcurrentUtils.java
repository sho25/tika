begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|utils
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Future
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FutureTask
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|ParseContext
import|;
end_import

begin_comment
comment|/**  * Utility Class for Concurrency in Tika  *  * @since Apache Tika 1.11  */
end_comment

begin_class
specifier|public
class|class
name|ConcurrentUtils
block|{
comment|/**      *       * Execute a runnable using an ExecutorService from the ParseContext if possible.      * Otherwise fallback to individual threads.      *       * @param context      * @param runnable      * @return      */
specifier|public
specifier|static
name|Future
name|execute
parameter_list|(
name|ParseContext
name|context
parameter_list|,
name|Runnable
name|runnable
parameter_list|)
block|{
name|Future
name|future
init|=
literal|null
decl_stmt|;
name|ExecutorService
name|executorService
init|=
name|context
operator|.
name|get
argument_list|(
name|ExecutorService
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|executorService
operator|==
literal|null
condition|)
block|{
name|FutureTask
name|task
init|=
operator|new
name|FutureTask
argument_list|<>
argument_list|(
name|runnable
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Thread
name|thread
init|=
operator|new
name|Thread
argument_list|(
name|task
argument_list|,
literal|"Tika Thread"
argument_list|)
decl_stmt|;
name|thread
operator|.
name|start
argument_list|()
expr_stmt|;
name|future
operator|=
name|task
expr_stmt|;
block|}
else|else
block|{
name|future
operator|=
name|executorService
operator|.
name|submit
argument_list|(
name|runnable
argument_list|)
expr_stmt|;
block|}
return|return
name|future
return|;
block|}
block|}
end_class

end_unit

