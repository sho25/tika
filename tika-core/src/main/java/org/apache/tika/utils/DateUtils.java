begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|utils
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Calendar
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|GregorianCalendar
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TimeZone
import|;
end_import

begin_comment
comment|/**  * Date related utility methods and constants  */
end_comment

begin_class
specifier|public
class|class
name|DateUtils
block|{
comment|/**      * The UTC time zone. Not sure if {@link TimeZone#getTimeZone(String)}      * understands "UTC" in all environments, but it'll fall back to GMT      * in such cases, which is in practice equivalent to UTC.      */
specifier|public
specifier|static
specifier|final
name|TimeZone
name|UTC
init|=
name|TimeZone
operator|.
name|getTimeZone
argument_list|(
literal|"UTC"
argument_list|)
decl_stmt|;
comment|/**      * Custom time zone used to interpret date values without a time      * component in a way that most likely falls within the same day      * regardless of in which time zone it is later interpreted. For      * example, the "2012-02-17" date would map to "2012-02-17T12:00:00Z"      * (instead of the default "2012-02-17T00:00:00Z"), which would still      * map to "2012-02-17" if interpreted in say Pacific time (while the      * default mapping would result in "2012-02-16" for UTC-8).      */
specifier|public
specifier|static
specifier|final
name|TimeZone
name|MIDDAY
init|=
name|TimeZone
operator|.
name|getTimeZone
argument_list|(
literal|"GMT-12:00"
argument_list|)
decl_stmt|;
comment|/**      * Returns a ISO 8601 representation of the given date. This method       * is thread safe and non-blocking.      *      * @see<a href="https://issues.apache.org/jira/browse/TIKA-495">TIKA-495</a>      * @param date given date      * @return ISO 8601 date string, including timezone details      */
specifier|public
specifier|static
name|String
name|formatDate
parameter_list|(
name|Date
name|date
parameter_list|)
block|{
name|Calendar
name|calendar
init|=
name|GregorianCalendar
operator|.
name|getInstance
argument_list|(
name|UTC
argument_list|,
name|Locale
operator|.
name|US
argument_list|)
decl_stmt|;
name|calendar
operator|.
name|setTime
argument_list|(
name|date
argument_list|)
expr_stmt|;
return|return
name|doFormatDate
argument_list|(
name|calendar
argument_list|)
return|;
block|}
comment|/**      * Returns a ISO 8601 representation of the given date. This method       * is thread safe and non-blocking.      *      * @see<a href="https://issues.apache.org/jira/browse/TIKA-495">TIKA-495</a>      * @param date given date      * @return ISO 8601 date string, including timezone details      */
specifier|public
specifier|static
name|String
name|formatDate
parameter_list|(
name|Calendar
name|date
parameter_list|)
block|{
comment|// Explicitly switch it into UTC before formatting
name|date
operator|.
name|setTimeZone
argument_list|(
name|UTC
argument_list|)
expr_stmt|;
return|return
name|doFormatDate
argument_list|(
name|date
argument_list|)
return|;
block|}
comment|/**      * Returns a ISO 8601 representation of the given date, which is      *  in an unknown timezone. This method is thread safe and non-blocking.      *      * @see<a href="https://issues.apache.org/jira/browse/TIKA-495">TIKA-495</a>      * @param date given date      * @return ISO 8601 date string, without timezone details      */
specifier|public
specifier|static
name|String
name|formatDateUnknownTimezone
parameter_list|(
name|Date
name|date
parameter_list|)
block|{
comment|// Create the Calendar object in the system timezone
name|Calendar
name|calendar
init|=
name|GregorianCalendar
operator|.
name|getInstance
argument_list|(
name|Locale
operator|.
name|US
argument_list|)
decl_stmt|;
name|calendar
operator|.
name|setTime
argument_list|(
name|date
argument_list|)
expr_stmt|;
comment|// Have it formatted
name|String
name|formatted
init|=
name|formatDate
argument_list|(
name|calendar
argument_list|)
decl_stmt|;
comment|// Strip the timezone details before returning
return|return
name|formatted
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|formatted
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|String
name|doFormatDate
parameter_list|(
name|Calendar
name|calendar
parameter_list|)
block|{
return|return
name|String
operator|.
name|format
argument_list|(
literal|"%04d-%02d-%02dT%02d:%02d:%02dZ"
argument_list|,
name|calendar
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|YEAR
argument_list|)
argument_list|,
name|calendar
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|MONTH
argument_list|)
operator|+
literal|1
argument_list|,
name|calendar
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|DAY_OF_MONTH
argument_list|)
argument_list|,
name|calendar
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|HOUR_OF_DAY
argument_list|)
argument_list|,
name|calendar
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|MINUTE
argument_list|)
argument_list|,
name|calendar
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|SECOND
argument_list|)
argument_list|)
return|;
block|}
block|}
end_class

end_unit

