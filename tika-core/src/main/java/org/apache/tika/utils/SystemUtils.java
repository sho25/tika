begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|utils
package|;
end_package

begin_comment
comment|/**  * Copied from commons-lang to avoid requiring the dependency  */
end_comment

begin_class
specifier|public
class|class
name|SystemUtils
block|{
specifier|private
specifier|static
specifier|final
name|String
name|OS_NAME_WINDOWS_PREFIX
init|=
literal|"Windows"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|OS_NAME
init|=
name|getSystemProperty
argument_list|(
literal|"os.name"
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|OS_VERSION
init|=
name|getSystemProperty
argument_list|(
literal|"os.version"
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|boolean
name|IS_OS_AIX
init|=
name|getOSMatchesName
argument_list|(
literal|"AIX"
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|boolean
name|IS_OS_HP_UX
init|=
name|getOSMatchesName
argument_list|(
literal|"HP-UX"
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|boolean
name|IS_OS_IRIX
init|=
name|getOSMatchesName
argument_list|(
literal|"Irix"
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|boolean
name|IS_OS_LINUX
init|=
name|getOSMatchesName
argument_list|(
literal|"Linux"
argument_list|)
operator|||
name|getOSMatchesName
argument_list|(
literal|"LINUX"
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|boolean
name|IS_OS_MAC
init|=
name|getOSMatchesName
argument_list|(
literal|"Mac"
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|boolean
name|IS_OS_MAC_OSX
init|=
name|getOSMatchesName
argument_list|(
literal|"Mac OS X"
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|boolean
name|IS_OS_OS2
init|=
name|getOSMatchesName
argument_list|(
literal|"OS/2"
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|boolean
name|IS_OS_SOLARIS
init|=
name|getOSMatchesName
argument_list|(
literal|"Solaris"
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|boolean
name|IS_OS_SUN_OS
init|=
name|getOSMatchesName
argument_list|(
literal|"SunOS"
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|boolean
name|IS_OS_UNIX
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|boolean
name|IS_OS_WINDOWS
decl_stmt|;
specifier|private
specifier|static
name|String
name|getSystemProperty
parameter_list|(
name|String
name|property
parameter_list|)
block|{
try|try
block|{
return|return
name|System
operator|.
name|getProperty
argument_list|(
name|property
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|SecurityException
name|var2
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
block|}
specifier|private
specifier|static
name|boolean
name|getOSMatchesName
parameter_list|(
name|String
name|osNamePrefix
parameter_list|)
block|{
return|return
name|isOSNameMatch
argument_list|(
name|OS_NAME
argument_list|,
name|osNamePrefix
argument_list|)
return|;
block|}
specifier|static
name|boolean
name|isOSNameMatch
parameter_list|(
name|String
name|osName
parameter_list|,
name|String
name|osNamePrefix
parameter_list|)
block|{
return|return
name|osName
operator|==
literal|null
condition|?
literal|false
else|:
name|osName
operator|.
name|startsWith
argument_list|(
name|osNamePrefix
argument_list|)
return|;
block|}
static|static
block|{
name|IS_OS_UNIX
operator|=
name|IS_OS_AIX
operator|||
name|IS_OS_HP_UX
operator|||
name|IS_OS_IRIX
operator|||
name|IS_OS_LINUX
operator|||
name|IS_OS_MAC_OSX
operator|||
name|IS_OS_SOLARIS
operator|||
name|IS_OS_SUN_OS
expr_stmt|;
name|IS_OS_WINDOWS
operator|=
name|getOSMatchesName
argument_list|(
name|OS_NAME_WINDOWS_PREFIX
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

