begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|mime
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_comment
comment|/**  * Registry of known Internet media types.  */
end_comment

begin_class
specifier|public
class|class
name|MediaTypeRegistry
implements|implements
name|Serializable
block|{
comment|/** Serial version UID */
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|4710974869988895410L
decl_stmt|;
comment|/**      * Returns the built-in media type registry included in Tika.      *      * @since Apache Tika 0.8      * @return default media type registry      */
specifier|public
specifier|static
name|MediaTypeRegistry
name|getDefaultRegistry
parameter_list|()
block|{
return|return
name|MimeTypes
operator|.
name|getDefaultMimeTypes
argument_list|()
operator|.
name|getMediaTypeRegistry
argument_list|()
return|;
block|}
comment|/**      * Registry of known media types, including type aliases. A canonical      * media type is handled as an identity mapping, while an alias is stored      * as a mapping from the alias to the corresponding canonical type.      */
specifier|private
specifier|final
name|Map
argument_list|<
name|MediaType
argument_list|,
name|MediaType
argument_list|>
name|registry
init|=
operator|new
name|HashMap
argument_list|<
name|MediaType
argument_list|,
name|MediaType
argument_list|>
argument_list|()
decl_stmt|;
comment|/**      * Known type inheritance relationships. The mapping is from a media type      * to the closest supertype.      */
specifier|private
specifier|final
name|Map
argument_list|<
name|MediaType
argument_list|,
name|MediaType
argument_list|>
name|inheritance
init|=
operator|new
name|HashMap
argument_list|<
name|MediaType
argument_list|,
name|MediaType
argument_list|>
argument_list|()
decl_stmt|;
comment|/**      * Returns the set of all known canonical media types. Type aliases are      * not included in the returned set.      *      * @since Apache Tika 0.8      * @return canonical media types      */
specifier|public
name|SortedSet
argument_list|<
name|MediaType
argument_list|>
name|getTypes
parameter_list|()
block|{
return|return
operator|new
name|TreeSet
argument_list|<
name|MediaType
argument_list|>
argument_list|(
name|registry
operator|.
name|values
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * Returns the set of known aliases of the given canonical media type.      *      * @since Apache Tika 0.8      * @param type canonical media type      * @return known aliases      */
specifier|public
name|SortedSet
argument_list|<
name|MediaType
argument_list|>
name|getAliases
parameter_list|(
name|MediaType
name|type
parameter_list|)
block|{
name|SortedSet
argument_list|<
name|MediaType
argument_list|>
name|aliases
init|=
operator|new
name|TreeSet
argument_list|<
name|MediaType
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|MediaType
argument_list|,
name|MediaType
argument_list|>
name|entry
range|:
name|registry
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|equals
argument_list|(
name|type
argument_list|)
operator|&&
operator|!
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|equals
argument_list|(
name|type
argument_list|)
condition|)
block|{
name|aliases
operator|.
name|add
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|aliases
return|;
block|}
comment|/**      * Returns the set of known children of the given canonical media type      *       * @since Apache Tika 1.8      * @param type canonical media type      * @return known children      */
specifier|public
name|SortedSet
argument_list|<
name|MediaType
argument_list|>
name|getChildTypes
parameter_list|(
name|MediaType
name|type
parameter_list|)
block|{
name|SortedSet
argument_list|<
name|MediaType
argument_list|>
name|children
init|=
operator|new
name|TreeSet
argument_list|<
name|MediaType
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|MediaType
argument_list|,
name|MediaType
argument_list|>
name|entry
range|:
name|inheritance
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|equals
argument_list|(
name|type
argument_list|)
condition|)
block|{
name|children
operator|.
name|add
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|children
return|;
block|}
specifier|public
name|void
name|addType
parameter_list|(
name|MediaType
name|type
parameter_list|)
block|{
name|registry
operator|.
name|put
argument_list|(
name|type
argument_list|,
name|type
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|addAlias
parameter_list|(
name|MediaType
name|type
parameter_list|,
name|MediaType
name|alias
parameter_list|)
block|{
name|registry
operator|.
name|put
argument_list|(
name|alias
argument_list|,
name|type
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|addSuperType
parameter_list|(
name|MediaType
name|type
parameter_list|,
name|MediaType
name|supertype
parameter_list|)
block|{
name|inheritance
operator|.
name|put
argument_list|(
name|type
argument_list|,
name|supertype
argument_list|)
expr_stmt|;
block|}
specifier|public
name|MediaType
name|normalize
parameter_list|(
name|MediaType
name|type
parameter_list|)
block|{
if|if
condition|(
name|type
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|MediaType
name|canonical
init|=
name|registry
operator|.
name|get
argument_list|(
name|type
operator|.
name|getBaseType
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|canonical
operator|==
literal|null
condition|)
block|{
return|return
name|type
return|;
block|}
elseif|else
if|if
condition|(
name|type
operator|.
name|hasParameters
argument_list|()
condition|)
block|{
return|return
operator|new
name|MediaType
argument_list|(
name|canonical
argument_list|,
name|type
operator|.
name|getParameters
argument_list|()
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|canonical
return|;
block|}
block|}
comment|/**      * Checks whether the given media type a is a specialization of a more      * generic type b. Both types should be already normalised.      *      * @since Apache Tika 0.8      * @param a media type, normalised      * @param b suspected supertype, normalised      * @return<code>true</code> if b is a supertype of a,      *<code>false</code> otherwise      */
specifier|public
name|boolean
name|isSpecializationOf
parameter_list|(
name|MediaType
name|a
parameter_list|,
name|MediaType
name|b
parameter_list|)
block|{
return|return
name|isInstanceOf
argument_list|(
name|getSupertype
argument_list|(
name|a
argument_list|)
argument_list|,
name|b
argument_list|)
return|;
block|}
comment|/**      * Checks whether the given media type equals the given base type or      * is a specialization of it. Both types should be already normalised.      *      * @since Apache Tika 1.2      * @param a media type, normalised      * @param b base type, normalised      * @return<code>true</code> if b equals a or is a specialization of it,      *<code>false</code> otherwise      */
specifier|public
name|boolean
name|isInstanceOf
parameter_list|(
name|MediaType
name|a
parameter_list|,
name|MediaType
name|b
parameter_list|)
block|{
return|return
name|a
operator|!=
literal|null
operator|&&
operator|(
name|a
operator|.
name|equals
argument_list|(
name|b
argument_list|)
operator|||
name|isSpecializationOf
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
operator|)
return|;
block|}
comment|/**      * Parses and normalises the given media type string and checks whether      * the result equals the given base type or is a specialization of it.      * The given base type should already be normalised.      *      * @since Apache Tika 1.2      * @param a media type      * @param b base type, normalised      * @return<code>true</code> if b equals a or is a specialization of it,      *<code>false</code> otherwise      */
specifier|public
name|boolean
name|isInstanceOf
parameter_list|(
name|String
name|a
parameter_list|,
name|MediaType
name|b
parameter_list|)
block|{
return|return
name|isInstanceOf
argument_list|(
name|normalize
argument_list|(
name|MediaType
operator|.
name|parse
argument_list|(
name|a
argument_list|)
argument_list|)
argument_list|,
name|b
argument_list|)
return|;
block|}
comment|/**      * Returns the supertype of the given type. If the media type database      * has an explicit inheritance rule for the type, then that is used.       * Next, if the given type has any parameters, then the respective base       * type (parameter-less) is returned. Otherwise built-in heuristics like       * text/... -&gt; text/plain and .../...+xml -&gt; application/xml are used.       * Finally application/octet-stream is returned for all types for which no other      * supertype is known, and the return value for application/octet-stream      * is<code>null</code>.      *      * @since Apache Tika 0.8      * @param type media type      * @return supertype, or<code>null</code> for application/octet-stream      */
specifier|public
name|MediaType
name|getSupertype
parameter_list|(
name|MediaType
name|type
parameter_list|)
block|{
if|if
condition|(
name|type
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
elseif|else
if|if
condition|(
name|inheritance
operator|.
name|containsKey
argument_list|(
name|type
argument_list|)
condition|)
block|{
return|return
name|inheritance
operator|.
name|get
argument_list|(
name|type
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|type
operator|.
name|hasParameters
argument_list|()
condition|)
block|{
return|return
name|type
operator|.
name|getBaseType
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|type
operator|.
name|getSubtype
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|"+xml"
argument_list|)
condition|)
block|{
return|return
name|MediaType
operator|.
name|APPLICATION_XML
return|;
block|}
elseif|else
if|if
condition|(
name|type
operator|.
name|getSubtype
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|"+zip"
argument_list|)
condition|)
block|{
return|return
name|MediaType
operator|.
name|APPLICATION_ZIP
return|;
block|}
elseif|else
if|if
condition|(
literal|"text"
operator|.
name|equals
argument_list|(
name|type
operator|.
name|getType
argument_list|()
argument_list|)
operator|&&
operator|!
name|MediaType
operator|.
name|TEXT_PLAIN
operator|.
name|equals
argument_list|(
name|type
argument_list|)
condition|)
block|{
return|return
name|MediaType
operator|.
name|TEXT_PLAIN
return|;
block|}
elseif|else
if|if
condition|(
name|type
operator|.
name|getType
argument_list|()
operator|.
name|contains
argument_list|(
literal|"empty"
argument_list|)
operator|&&
operator|!
name|MediaType
operator|.
name|EMPTY
operator|.
name|equals
argument_list|(
name|type
argument_list|)
condition|)
block|{
return|return
name|MediaType
operator|.
name|EMPTY
return|;
block|}
elseif|else
if|if
condition|(
operator|!
name|MediaType
operator|.
name|OCTET_STREAM
operator|.
name|equals
argument_list|(
name|type
argument_list|)
condition|)
block|{
return|return
name|MediaType
operator|.
name|OCTET_STREAM
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
block|}
end_class

end_unit

