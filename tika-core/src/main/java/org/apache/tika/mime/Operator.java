begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|mime
package|;
end_package

begin_comment
comment|/**  * Defines a Boolean Binary Operator.  */
end_comment

begin_interface
interface|interface
name|Operator
block|{
comment|/**      * Evaluates the specified bolean operands.      *       * @param o1      *            is the first boolean operand.      * @param o2      *            is the second boolean operand.      * @return the value of this boolean operator applied on the specified      *         boolean operands.      */
name|boolean
name|eval
parameter_list|(
name|boolean
name|o1
parameter_list|,
name|boolean
name|o2
parameter_list|)
function_decl|;
comment|/** The AND Boolean operator */
name|Operator
name|AND
init|=
operator|new
name|Operator
argument_list|()
block|{
specifier|public
name|boolean
name|eval
parameter_list|(
name|boolean
name|o1
parameter_list|,
name|boolean
name|o2
parameter_list|)
block|{
return|return
name|o1
operator|&&
name|o2
return|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"AND"
return|;
block|}
block|}
decl_stmt|;
comment|/** The OR Boolean operator */
name|Operator
name|OR
init|=
operator|new
name|Operator
argument_list|()
block|{
specifier|public
name|boolean
name|eval
parameter_list|(
name|boolean
name|o1
parameter_list|,
name|boolean
name|o2
parameter_list|)
block|{
return|return
name|o1
operator|||
name|o2
return|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"OR"
return|;
block|}
block|}
decl_stmt|;
block|}
end_interface

end_unit

