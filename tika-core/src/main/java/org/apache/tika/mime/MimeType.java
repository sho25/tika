begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|mime
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * Internet media type.  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|MimeType
implements|implements
name|Comparable
argument_list|<
name|MimeType
argument_list|>
implements|,
name|Serializable
block|{
comment|/**      * Serial version UID.      */
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|4357830439860729201L
decl_stmt|;
comment|/**      * Checks that the given string is a valid Internet media type name      * based on rules from RFC 2054 section 5.3. For validation purposes the      * rules can be simplified to the following:      *<pre>      * name := token "/" token      * token := 1*&lt;any (US-ASCII) CHAR except SPACE, CTLs, or tspecials&gt;      * tspecials :=  "(" / ")" / "&lt;" / "&gt;" / "@" / "," / ";" / ":" /      *               "\" /<"> / "/" / "[" / "]" / "?" / "="      *</pre>      *      * @param name name string      * @return<code>true</code> if the string is a valid media type name,      *<code>false</code> otherwise      */
specifier|public
specifier|static
name|boolean
name|isValid
parameter_list|(
name|String
name|name
parameter_list|)
block|{
if|if
condition|(
name|name
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Name is missing"
argument_list|)
throw|;
block|}
name|boolean
name|slash
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|name
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|char
name|ch
init|=
name|name
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|ch
operator|<=
literal|' '
operator|||
name|ch
operator|>=
literal|127
operator|||
name|ch
operator|==
literal|'('
operator|||
name|ch
operator|==
literal|')'
operator|||
name|ch
operator|==
literal|'<'
operator|||
name|ch
operator|==
literal|'>'
operator|||
name|ch
operator|==
literal|'@'
operator|||
name|ch
operator|==
literal|','
operator|||
name|ch
operator|==
literal|';'
operator|||
name|ch
operator|==
literal|':'
operator|||
name|ch
operator|==
literal|'\\'
operator|||
name|ch
operator|==
literal|'"'
operator|||
name|ch
operator|==
literal|'['
operator|||
name|ch
operator|==
literal|']'
operator|||
name|ch
operator|==
literal|'?'
operator|||
name|ch
operator|==
literal|'='
condition|)
block|{
return|return
literal|false
return|;
block|}
elseif|else
if|if
condition|(
name|ch
operator|==
literal|'/'
condition|)
block|{
if|if
condition|(
name|slash
operator|||
name|i
operator|==
literal|0
operator|||
name|i
operator|+
literal|1
operator|==
name|name
operator|.
name|length
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
name|slash
operator|=
literal|true
expr_stmt|;
block|}
block|}
return|return
name|slash
return|;
block|}
comment|/**      * The normalized media type name.      */
specifier|private
specifier|final
name|MediaType
name|type
decl_stmt|;
comment|/**      * The MimeType acronym      */
specifier|private
name|String
name|acronym
init|=
literal|""
decl_stmt|;
comment|/**      * The http://en.wikipedia.org/wiki/Uniform_Type_Identifier      */
specifier|private
name|String
name|uti
init|=
literal|""
decl_stmt|;
comment|/**      * Documentation Links      */
specifier|private
name|List
argument_list|<
name|URI
argument_list|>
name|links
init|=
name|Collections
operator|.
name|emptyList
argument_list|()
decl_stmt|;
comment|/**      * Description of this media type.      */
specifier|private
name|String
name|description
init|=
literal|""
decl_stmt|;
comment|/** The magics associated to this Mime-Type */
specifier|private
name|List
argument_list|<
name|Magic
argument_list|>
name|magics
init|=
literal|null
decl_stmt|;
comment|/** The root-XML associated to this Mime-Type */
specifier|private
name|List
argument_list|<
name|RootXML
argument_list|>
name|rootXML
init|=
literal|null
decl_stmt|;
comment|/** The minimum length of data to provides for magic analyzis */
specifier|private
name|int
name|minLength
init|=
literal|0
decl_stmt|;
comment|/**      * All known file extensions of this type, in order of preference      * (best first).      */
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|extensions
init|=
literal|null
decl_stmt|;
comment|/**      * Whether this mime-type is used for server-side scripts,      * and thus cannot reliably be used for filename-based type detection      */
specifier|private
name|boolean
name|isInterpreted
init|=
literal|false
decl_stmt|;
comment|/**      * Creates a media type with the give name and containing media type      * registry. The name is expected to be valid and normalized to lower      * case. This constructor should only be called by      * {@link MimeTypes#forName(String)} to keep the media type registry      * up to date.      *      * @param type normalized media type name      */
name|MimeType
parameter_list|(
name|MediaType
name|type
parameter_list|)
block|{
if|if
condition|(
name|type
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Media type name is missing"
argument_list|)
throw|;
block|}
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
block|}
comment|/**      * Returns the normalized media type name.      *      * @return media type      */
specifier|public
name|MediaType
name|getType
parameter_list|()
block|{
return|return
name|type
return|;
block|}
comment|/**      * Returns the name of this media type.      *      * @return media type name (lower case)      */
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|type
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**      * Returns the description of this media type.      *      * @return media type description      */
specifier|public
name|String
name|getDescription
parameter_list|()
block|{
return|return
name|description
return|;
block|}
comment|/**      * Set the description of this media type.      *      * @param description media type description      */
specifier|public
name|void
name|setDescription
parameter_list|(
name|String
name|description
parameter_list|)
block|{
if|if
condition|(
name|description
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Description is missing"
argument_list|)
throw|;
block|}
name|this
operator|.
name|description
operator|=
name|description
expr_stmt|;
block|}
comment|/**      * Returns an acronym for this mime type.      *      * @return mime type acronym      */
specifier|public
name|String
name|getAcronym
parameter_list|()
block|{
return|return
name|acronym
return|;
block|}
comment|/**      * Set an acronym for the mime type      *      * @param acronym      */
name|void
name|setAcronym
parameter_list|(
name|String
name|v
parameter_list|)
block|{
if|if
condition|(
name|v
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Acronym is missing"
argument_list|)
throw|;
block|}
name|acronym
operator|=
name|v
expr_stmt|;
block|}
comment|/**      * Get the UTI for this mime type.      *       * @see<a href="http://en.wikipedia.org/wiki/Uniform_Type_Identifier">http://en.wikipedia.org/wiki/Uniform_Type_Identifier</a>      *       * @return The Uniform Type Identifier      */
specifier|public
name|String
name|getUniformTypeIdentifier
parameter_list|()
block|{
return|return
name|uti
return|;
block|}
comment|/**      * Set The Uniform Type Identifier      *      * @param uti      */
name|void
name|setUniformTypeIdentifier
parameter_list|(
name|String
name|v
parameter_list|)
block|{
if|if
condition|(
name|v
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Uniform Type Identifier is missing"
argument_list|)
throw|;
block|}
name|uti
operator|=
name|v
expr_stmt|;
block|}
comment|/**      * Get a list of links to help document this mime type      *       * @return an array of links (will never be null)      */
specifier|public
name|List
argument_list|<
name|URI
argument_list|>
name|getLinks
parameter_list|()
block|{
return|return
name|links
return|;
comment|// this is already unmodifiable
block|}
comment|/**      * Add a link to this mime type      * @param link      */
name|void
name|addLink
parameter_list|(
name|URI
name|link
parameter_list|)
block|{
if|if
condition|(
name|link
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Missing Link"
argument_list|)
throw|;
block|}
name|List
argument_list|<
name|URI
argument_list|>
name|copy
init|=
operator|new
name|ArrayList
argument_list|<
name|URI
argument_list|>
argument_list|(
name|links
operator|.
name|size
argument_list|()
operator|+
literal|1
argument_list|)
decl_stmt|;
name|copy
operator|.
name|addAll
argument_list|(
name|links
argument_list|)
expr_stmt|;
name|copy
operator|.
name|add
argument_list|(
name|link
argument_list|)
expr_stmt|;
name|links
operator|=
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|copy
argument_list|)
expr_stmt|;
block|}
comment|/**      * Add some rootXML info to this mime-type      *      * @param namespaceURI      * @param localName      */
name|void
name|addRootXML
parameter_list|(
name|String
name|namespaceURI
parameter_list|,
name|String
name|localName
parameter_list|)
block|{
if|if
condition|(
name|rootXML
operator|==
literal|null
condition|)
block|{
name|rootXML
operator|=
operator|new
name|ArrayList
argument_list|<
name|RootXML
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|rootXML
operator|.
name|add
argument_list|(
operator|new
name|RootXML
argument_list|(
name|this
argument_list|,
name|namespaceURI
argument_list|,
name|localName
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|boolean
name|matchesXML
parameter_list|(
name|String
name|namespaceURI
parameter_list|,
name|String
name|localName
parameter_list|)
block|{
if|if
condition|(
name|rootXML
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|RootXML
name|xml
range|:
name|rootXML
control|)
block|{
if|if
condition|(
name|xml
operator|.
name|matches
argument_list|(
name|namespaceURI
argument_list|,
name|localName
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
block|}
return|return
literal|false
return|;
block|}
name|boolean
name|hasRootXML
parameter_list|()
block|{
return|return
name|rootXML
operator|!=
literal|null
return|;
block|}
name|List
argument_list|<
name|Magic
argument_list|>
name|getMagics
parameter_list|()
block|{
if|if
condition|(
name|magics
operator|!=
literal|null
condition|)
block|{
return|return
name|magics
return|;
block|}
else|else
block|{
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
block|}
name|void
name|addMagic
parameter_list|(
name|Magic
name|magic
parameter_list|)
block|{
if|if
condition|(
name|magic
operator|==
literal|null
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|magics
operator|==
literal|null
condition|)
block|{
name|magics
operator|=
operator|new
name|ArrayList
argument_list|<
name|Magic
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|magics
operator|.
name|add
argument_list|(
name|magic
argument_list|)
expr_stmt|;
block|}
name|int
name|getMinLength
parameter_list|()
block|{
return|return
name|minLength
return|;
block|}
specifier|public
name|boolean
name|hasMagic
parameter_list|()
block|{
return|return
name|magics
operator|!=
literal|null
return|;
block|}
specifier|public
name|boolean
name|matchesMagic
parameter_list|(
name|byte
index|[]
name|data
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|magics
operator|!=
literal|null
operator|&&
name|i
operator|<
name|magics
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Magic
name|magic
init|=
name|magics
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|magic
operator|.
name|eval
argument_list|(
name|data
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|matches
parameter_list|(
name|byte
index|[]
name|data
parameter_list|)
block|{
return|return
name|matchesMagic
argument_list|(
name|data
argument_list|)
return|;
block|}
comment|/**      * whether the type is used as a server-side scripting technology      */
name|boolean
name|isInterpreted
parameter_list|()
block|{
return|return
name|isInterpreted
return|;
block|}
name|void
name|setInterpreted
parameter_list|(
name|boolean
name|interpreted
parameter_list|)
block|{
name|isInterpreted
operator|=
name|interpreted
expr_stmt|;
block|}
comment|/**      * Defines a RootXML description. RootXML is made of a localName and/or a      * namespaceURI.      */
specifier|static
class|class
name|RootXML
implements|implements
name|Serializable
block|{
comment|/**          * Serial version UID.          */
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|5140496601491000730L
decl_stmt|;
specifier|private
name|MimeType
name|type
init|=
literal|null
decl_stmt|;
specifier|private
name|String
name|namespaceURI
init|=
literal|null
decl_stmt|;
specifier|private
name|String
name|localName
init|=
literal|null
decl_stmt|;
name|RootXML
parameter_list|(
name|MimeType
name|type
parameter_list|,
name|String
name|namespaceURI
parameter_list|,
name|String
name|localName
parameter_list|)
block|{
if|if
condition|(
name|isEmpty
argument_list|(
name|namespaceURI
argument_list|)
operator|&&
name|isEmpty
argument_list|(
name|localName
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Both namespaceURI and localName cannot be empty"
argument_list|)
throw|;
block|}
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
name|this
operator|.
name|namespaceURI
operator|=
name|namespaceURI
expr_stmt|;
name|this
operator|.
name|localName
operator|=
name|localName
expr_stmt|;
block|}
name|boolean
name|matches
parameter_list|(
name|String
name|namespaceURI
parameter_list|,
name|String
name|localName
parameter_list|)
block|{
comment|//Compare namespaces
if|if
condition|(
operator|!
name|isEmpty
argument_list|(
name|this
operator|.
name|namespaceURI
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|this
operator|.
name|namespaceURI
operator|.
name|equals
argument_list|(
name|namespaceURI
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
else|else
block|{
comment|// else if it was empty then check to see if the provided namespaceURI
comment|// is empty. If it is not, then these two aren't equal and return false
if|if
condition|(
operator|!
name|isEmpty
argument_list|(
name|namespaceURI
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
comment|//Compare root element's local name
if|if
condition|(
operator|!
name|isEmpty
argument_list|(
name|this
operator|.
name|localName
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|this
operator|.
name|localName
operator|.
name|equals
argument_list|(
name|localName
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
else|else
block|{
comment|// else if it was empty then check to see if the provided localName
comment|// is empty. If it is not, then these two aren't equal and return false
if|if
condition|(
operator|!
name|isEmpty
argument_list|(
name|localName
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
comment|/**          * Checks if a string is null or empty.          */
specifier|private
name|boolean
name|isEmpty
parameter_list|(
name|String
name|str
parameter_list|)
block|{
return|return
operator|(
name|str
operator|==
literal|null
operator|)
operator|||
operator|(
name|str
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
operator|)
return|;
block|}
name|MimeType
name|getType
parameter_list|()
block|{
return|return
name|type
return|;
block|}
name|String
name|getNameSpaceURI
parameter_list|()
block|{
return|return
name|namespaceURI
return|;
block|}
name|String
name|getLocalName
parameter_list|()
block|{
return|return
name|localName
return|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|type
operator|+
literal|", "
operator|+
name|namespaceURI
operator|+
literal|", "
operator|+
name|localName
return|;
block|}
block|}
comment|//----------------------------------------------------------< Comparable>
specifier|public
name|int
name|compareTo
parameter_list|(
name|MimeType
name|mime
parameter_list|)
block|{
return|return
name|type
operator|.
name|compareTo
argument_list|(
name|mime
operator|.
name|type
argument_list|)
return|;
block|}
comment|//--------------------------------------------------------------< Object>
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|o
operator|instanceof
name|MimeType
condition|)
block|{
name|MimeType
name|that
init|=
operator|(
name|MimeType
operator|)
name|o
decl_stmt|;
return|return
name|this
operator|.
name|type
operator|.
name|equals
argument_list|(
name|that
operator|.
name|type
argument_list|)
return|;
block|}
return|return
literal|false
return|;
block|}
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|type
operator|.
name|hashCode
argument_list|()
return|;
block|}
comment|/**      * Returns the name of this media type.      *      * @return media type name      */
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|type
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**      * Returns the preferred file extension of this type, or an empty string      * if no extensions are known. Use the {@link #getExtensions()} method to      * get the full list of known extensions of this type.      *      * @since Apache Tika 0.9      * @return preferred file extension or empty string      */
specifier|public
name|String
name|getExtension
parameter_list|()
block|{
if|if
condition|(
name|extensions
operator|==
literal|null
condition|)
block|{
return|return
literal|""
return|;
block|}
else|else
block|{
return|return
name|extensions
operator|.
name|get
argument_list|(
literal|0
argument_list|)
return|;
block|}
block|}
comment|/**      * Returns the list of all known file extensions of this media type.      *      * @since Apache Tika 0.10      * @return known extensions in order of preference (best first)      */
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getExtensions
parameter_list|()
block|{
if|if
condition|(
name|extensions
operator|!=
literal|null
condition|)
block|{
return|return
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|extensions
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
block|}
comment|/**      * Adds a known file extension to this type.      *      * @param extension file extension      */
name|void
name|addExtension
parameter_list|(
name|String
name|extension
parameter_list|)
block|{
if|if
condition|(
name|extensions
operator|==
literal|null
condition|)
block|{
name|extensions
operator|=
name|Collections
operator|.
name|singletonList
argument_list|(
name|extension
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|extensions
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
name|extensions
operator|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|extensions
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|extensions
operator|.
name|contains
argument_list|(
name|extension
argument_list|)
condition|)
block|{
name|extensions
operator|.
name|add
argument_list|(
name|extension
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

