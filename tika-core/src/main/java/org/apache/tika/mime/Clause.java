begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|mime
package|;
end_package

begin_comment
comment|/**  * Defines a clause to be evaluated.  *   *   */
end_comment

begin_interface
interface|interface
name|Clause
block|{
comment|/** A clause that is always true. */
specifier|final
specifier|static
name|Clause
name|TRUE
init|=
operator|new
name|True
argument_list|()
decl_stmt|;
comment|/** A clause that is always false. */
specifier|final
specifier|static
name|Clause
name|FALSE
init|=
operator|new
name|False
argument_list|()
decl_stmt|;
comment|/**      * Evaluates this clause with the specified chunk of data.      */
specifier|public
name|boolean
name|eval
parameter_list|(
name|byte
index|[]
name|data
parameter_list|)
function_decl|;
comment|/**      * Returns the size of this clause. The size of a clause is the number of      * chars it is composed of.      */
specifier|public
name|int
name|size
parameter_list|()
function_decl|;
specifier|final
specifier|static
class|class
name|False
implements|implements
name|Clause
block|{
specifier|public
name|boolean
name|eval
parameter_list|(
name|byte
index|[]
name|data
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"FALSE"
return|;
block|}
block|}
specifier|final
specifier|static
class|class
name|True
implements|implements
name|Clause
block|{
specifier|public
name|boolean
name|eval
parameter_list|(
name|byte
index|[]
name|data
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"TRUE"
return|;
block|}
block|}
block|}
end_interface

end_unit

