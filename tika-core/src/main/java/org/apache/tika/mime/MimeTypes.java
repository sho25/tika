begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|mime
package|;
end_package

begin_comment
comment|// JDK imports
end_comment

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|Tika
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|detect
operator|.
name|Detector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|detect
operator|.
name|TextDetector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|detect
operator|.
name|XmlRootExtractor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|metadata
operator|.
name|Metadata
import|;
end_import

begin_comment
comment|/**  * This class is a MimeType repository. It gathers a set of MimeTypes and  * enables to retrieves a content-type from its name, from a file name, or from  * a magic character sequence.  *<p>  * The MIME type detection methods that take an {@link InputStream} as  * an argument will never reads more than {@link #getMinLength()} bytes  * from the stream. Also the given stream is never  * {@link InputStream#close() closed}, {@link InputStream#mark(int) marked},  * or {@link InputStream#reset() reset} by the methods. Thus a client can  * use the {@link InputStream#markSupported() mark feature} of the stream  * (if available) to restore the stream back to the state it was before type  * detection if it wants to process the stream based on the detected type.  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|MimeTypes
implements|implements
name|Detector
implements|,
name|Serializable
block|{
comment|/**      * Serial version UID.      */
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
operator|-
literal|1350863170146349036L
decl_stmt|;
comment|/**      * Name of the {@link #rootMimeType root} type, application/octet-stream.      */
specifier|public
specifier|static
specifier|final
name|String
name|OCTET_STREAM
init|=
literal|"application/octet-stream"
decl_stmt|;
comment|/**      * Name of the {@link #textMimeType text} type, text/plain.      */
specifier|public
specifier|static
specifier|final
name|String
name|PLAIN_TEXT
init|=
literal|"text/plain"
decl_stmt|;
comment|/**      * Name of the {@link #xml xml} type, application/xml.      */
specifier|public
specifier|static
specifier|final
name|String
name|XML
init|=
literal|"application/xml"
decl_stmt|;
comment|/**      * Root type, application/octet-stream.      */
specifier|private
specifier|final
name|MimeType
name|rootMimeType
decl_stmt|;
specifier|private
specifier|final
name|List
argument_list|<
name|MimeType
argument_list|>
name|rootMimeTypeL
decl_stmt|;
comment|/**      * Text type, text/plain.      */
specifier|private
specifier|final
name|MimeType
name|textMimeType
decl_stmt|;
comment|/*      * xml type, application/xml      */
specifier|private
specifier|final
name|MimeType
name|xmlMimeType
decl_stmt|;
comment|/**      * Registered media types and their aliases.      */
specifier|private
specifier|final
name|MediaTypeRegistry
name|registry
init|=
operator|new
name|MediaTypeRegistry
argument_list|()
decl_stmt|;
comment|/** All the registered MimeTypes indexed on their canonical names */
specifier|private
specifier|final
name|Map
argument_list|<
name|MediaType
argument_list|,
name|MimeType
argument_list|>
name|types
init|=
operator|new
name|HashMap
argument_list|<
name|MediaType
argument_list|,
name|MimeType
argument_list|>
argument_list|()
decl_stmt|;
comment|/** The patterns matcher */
specifier|private
name|Patterns
name|patterns
init|=
operator|new
name|Patterns
argument_list|(
name|registry
argument_list|)
decl_stmt|;
comment|/** Sorted list of all registered magics */
specifier|private
specifier|final
name|List
argument_list|<
name|Magic
argument_list|>
name|magics
init|=
operator|new
name|ArrayList
argument_list|<
name|Magic
argument_list|>
argument_list|()
decl_stmt|;
comment|/** Sorted list of all registered rootXML */
specifier|private
specifier|final
name|List
argument_list|<
name|MimeType
argument_list|>
name|xmls
init|=
operator|new
name|ArrayList
argument_list|<
name|MimeType
argument_list|>
argument_list|()
decl_stmt|;
specifier|public
name|MimeTypes
parameter_list|()
block|{
name|rootMimeType
operator|=
operator|new
name|MimeType
argument_list|(
name|MediaType
operator|.
name|OCTET_STREAM
argument_list|)
expr_stmt|;
name|textMimeType
operator|=
operator|new
name|MimeType
argument_list|(
name|MediaType
operator|.
name|TEXT_PLAIN
argument_list|)
expr_stmt|;
name|xmlMimeType
operator|=
operator|new
name|MimeType
argument_list|(
name|MediaType
operator|.
name|APPLICATION_XML
argument_list|)
expr_stmt|;
name|rootMimeTypeL
operator|=
name|Collections
operator|.
name|singletonList
argument_list|(
name|rootMimeType
argument_list|)
expr_stmt|;
name|add
argument_list|(
name|rootMimeType
argument_list|)
expr_stmt|;
name|add
argument_list|(
name|textMimeType
argument_list|)
expr_stmt|;
name|add
argument_list|(
name|xmlMimeType
argument_list|)
expr_stmt|;
block|}
comment|/**      * Find the Mime Content Type of a document from its name.      * Returns application/octet-stream if no better match is found.      *      * @deprecated Use {@link Tika#detect(String)} instead      * @param name of the document to analyze.      * @return the Mime Content Type of the specified document name      */
specifier|public
name|MimeType
name|getMimeType
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|MimeType
name|type
init|=
name|patterns
operator|.
name|matches
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|type
operator|!=
literal|null
condition|)
block|{
return|return
name|type
return|;
block|}
name|type
operator|=
name|patterns
operator|.
name|matches
argument_list|(
name|name
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|ENGLISH
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|type
operator|!=
literal|null
condition|)
block|{
return|return
name|type
return|;
block|}
else|else
block|{
return|return
name|rootMimeType
return|;
block|}
block|}
comment|/**      * Find the Mime Content Type of a document stored in the given file.      * Returns application/octet-stream if no better match is found.      *      * @deprecated Use {@link Tika#detect(File)} instead      * @param file file to analyze      * @return the Mime Content Type of the specified document      * @throws MimeTypeException if the type can't be detected      * @throws IOException if the file can't be read      */
specifier|public
name|MimeType
name|getMimeType
parameter_list|(
name|File
name|file
parameter_list|)
throws|throws
name|MimeTypeException
throws|,
name|IOException
block|{
return|return
name|forName
argument_list|(
operator|new
name|Tika
argument_list|(
name|this
argument_list|)
operator|.
name|detect
argument_list|(
name|file
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Returns the MIME type that best matches the given first few bytes      * of a document stream. Returns application/octet-stream if no better      * match is found.       *<p>      * If multiple matches are found, the best (highest priority) matching      * type is returned. If multiple matches are found with the same priority,      * then all of these are returned.      *<p>      * The given byte array is expected to be at least {@link #getMinLength()}      * long, or shorter only if the document stream itself is shorter.      *      * @param data first few bytes of a document stream      * @return matching MIME type      */
name|List
argument_list|<
name|MimeType
argument_list|>
name|getMimeType
parameter_list|(
name|byte
index|[]
name|data
parameter_list|)
block|{
if|if
condition|(
name|data
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Data is missing"
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
name|data
operator|.
name|length
operator|==
literal|0
condition|)
block|{
comment|// See https://issues.apache.org/jira/browse/TIKA-483
return|return
name|rootMimeTypeL
return|;
block|}
comment|// Then, check for magic bytes
name|List
argument_list|<
name|MimeType
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<
name|MimeType
argument_list|>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|int
name|currentPriority
init|=
operator|-
literal|1
decl_stmt|;
for|for
control|(
name|Magic
name|magic
range|:
name|magics
control|)
block|{
if|if
condition|(
name|currentPriority
operator|>
literal|0
operator|&&
name|currentPriority
operator|>
name|magic
operator|.
name|getPriority
argument_list|()
condition|)
block|{
break|break;
block|}
if|if
condition|(
name|magic
operator|.
name|eval
argument_list|(
name|data
argument_list|)
condition|)
block|{
name|result
operator|.
name|add
argument_list|(
name|magic
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|currentPriority
operator|=
name|magic
operator|.
name|getPriority
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|result
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|result
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|MimeType
name|matched
init|=
name|result
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
comment|// When detecting generic XML (or possibly XHTML),
comment|// extract the root element and match it against known types
if|if
condition|(
literal|"application/xml"
operator|.
name|equals
argument_list|(
name|matched
operator|.
name|getName
argument_list|()
argument_list|)
operator|||
literal|"text/html"
operator|.
name|equals
argument_list|(
name|matched
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|XmlRootExtractor
name|extractor
init|=
operator|new
name|XmlRootExtractor
argument_list|()
decl_stmt|;
name|QName
name|rootElement
init|=
name|extractor
operator|.
name|extractRootElement
argument_list|(
name|data
argument_list|)
decl_stmt|;
if|if
condition|(
name|rootElement
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|MimeType
name|type
range|:
name|xmls
control|)
block|{
if|if
condition|(
name|type
operator|.
name|matchesXML
argument_list|(
name|rootElement
operator|.
name|getNamespaceURI
argument_list|()
argument_list|,
name|rootElement
operator|.
name|getLocalPart
argument_list|()
argument_list|)
condition|)
block|{
name|result
operator|.
name|set
argument_list|(
name|i
argument_list|,
name|type
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
elseif|else
if|if
condition|(
literal|"application/xml"
operator|.
name|equals
argument_list|(
name|matched
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
comment|// Downgrade from application/xml to text/plain since
comment|// the document seems not to be well-formed.
name|result
operator|.
name|set
argument_list|(
name|i
argument_list|,
name|textMimeType
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|result
return|;
block|}
comment|// Finally, assume plain text if no control bytes are found
try|try
block|{
name|TextDetector
name|detector
init|=
operator|new
name|TextDetector
argument_list|(
name|getMinLength
argument_list|()
argument_list|)
decl_stmt|;
name|ByteArrayInputStream
name|stream
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|data
argument_list|)
decl_stmt|;
name|MimeType
name|type
init|=
name|forName
argument_list|(
name|detector
operator|.
name|detect
argument_list|(
name|stream
argument_list|,
operator|new
name|Metadata
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|Collections
operator|.
name|singletonList
argument_list|(
name|type
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
return|return
name|rootMimeTypeL
return|;
block|}
block|}
comment|/**      * Reads the first {@link #getMinLength()} bytes from the given stream.      * If the stream is shorter, then the entire content of the stream is      * returned.      *<p>      * The given stream is never {@link InputStream#close() closed},      * {@link InputStream#mark(int) marked}, or      * {@link InputStream#reset() reset} by this method.      *      * @param stream stream to be read      * @return first {@link #getMinLength()} (or fewer) bytes of the stream      * @throws IOException if the stream can not be read      */
name|byte
index|[]
name|readMagicHeader
parameter_list|(
name|InputStream
name|stream
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|stream
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"InputStream is missing"
argument_list|)
throw|;
block|}
name|byte
index|[]
name|bytes
init|=
operator|new
name|byte
index|[
name|getMinLength
argument_list|()
index|]
decl_stmt|;
name|int
name|totalRead
init|=
literal|0
decl_stmt|;
name|int
name|lastRead
init|=
name|stream
operator|.
name|read
argument_list|(
name|bytes
argument_list|)
decl_stmt|;
while|while
condition|(
name|lastRead
operator|!=
operator|-
literal|1
condition|)
block|{
name|totalRead
operator|+=
name|lastRead
expr_stmt|;
if|if
condition|(
name|totalRead
operator|==
name|bytes
operator|.
name|length
condition|)
block|{
return|return
name|bytes
return|;
block|}
name|lastRead
operator|=
name|stream
operator|.
name|read
argument_list|(
name|bytes
argument_list|,
name|totalRead
argument_list|,
name|bytes
operator|.
name|length
operator|-
name|totalRead
argument_list|)
expr_stmt|;
block|}
name|byte
index|[]
name|shorter
init|=
operator|new
name|byte
index|[
name|totalRead
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|bytes
argument_list|,
literal|0
argument_list|,
name|shorter
argument_list|,
literal|0
argument_list|,
name|totalRead
argument_list|)
expr_stmt|;
return|return
name|shorter
return|;
block|}
comment|/**      * Returns the registered media type with the given name (or alias).      * The named media type is automatically registered (and returned) if      * it doesn't already exist.      *      * @param name media type name (case-insensitive)      * @return the registered media type with the given name or alias      * @throws MimeTypeException if the given media type name is invalid      */
specifier|public
name|MimeType
name|forName
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|MimeTypeException
block|{
name|MediaType
name|type
init|=
name|MediaType
operator|.
name|parse
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|type
operator|!=
literal|null
condition|)
block|{
name|MediaType
name|normalisedType
init|=
name|registry
operator|.
name|normalize
argument_list|(
name|type
argument_list|)
decl_stmt|;
name|MimeType
name|mime
init|=
name|types
operator|.
name|get
argument_list|(
name|normalisedType
argument_list|)
decl_stmt|;
if|if
condition|(
name|mime
operator|==
literal|null
condition|)
block|{
synchronized|synchronized
init|(
name|this
init|)
block|{
comment|// Double check it didn't already get added while
comment|//  we were waiting for the lock
name|mime
operator|=
name|types
operator|.
name|get
argument_list|(
name|normalisedType
argument_list|)
expr_stmt|;
if|if
condition|(
name|mime
operator|==
literal|null
condition|)
block|{
name|mime
operator|=
operator|new
name|MimeType
argument_list|(
name|type
argument_list|)
expr_stmt|;
name|add
argument_list|(
name|mime
argument_list|)
expr_stmt|;
name|types
operator|.
name|put
argument_list|(
name|type
argument_list|,
name|mime
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|mime
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|MimeTypeException
argument_list|(
literal|"Invalid media type name: "
operator|+
name|name
argument_list|)
throw|;
block|}
block|}
comment|/**      * Returns the registered media type with the given name (or alias).      *       * Unlike {@link #forName(String)}, this function will *not* create a new      * MimeType and register it.      *      * Also, unlike {@link #forName(String)}, this function may return a      * mime type that does include the parameters that were included in the name.      * If the registered mime type has parameters (e.g. application/dita+xml;format=map),      * then those will be maintained.  However, if the name has paramenters (e.g.      * "application/xml; charset=UTF-8"), but the _registered_ mime type doesn't,      * those parameters will not be included -- "application/xml".      *      * @param name media type name (case-insensitive)      * @return the registered media type with the given name or alias or null if not found      * @throws MimeTypeException if the given media type name is invalid      */
specifier|public
name|MimeType
name|getRegisteredMimeType
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|MimeTypeException
block|{
name|MediaType
name|type
init|=
name|MediaType
operator|.
name|parse
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|type
operator|!=
literal|null
condition|)
block|{
name|MediaType
name|normalisedType
init|=
name|registry
operator|.
name|normalize
argument_list|(
name|type
argument_list|)
decl_stmt|;
name|MimeType
name|candidate
init|=
name|types
operator|.
name|get
argument_list|(
name|normalisedType
argument_list|)
decl_stmt|;
if|if
condition|(
name|candidate
operator|!=
literal|null
condition|)
block|{
return|return
name|candidate
return|;
block|}
if|if
condition|(
name|normalisedType
operator|.
name|hasParameters
argument_list|()
condition|)
block|{
return|return
name|types
operator|.
name|get
argument_list|(
name|normalisedType
operator|.
name|getBaseType
argument_list|()
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|MimeTypeException
argument_list|(
literal|"Invalid media type name: "
operator|+
name|name
argument_list|)
throw|;
block|}
block|}
specifier|public
specifier|synchronized
name|void
name|setSuperType
parameter_list|(
name|MimeType
name|type
parameter_list|,
name|MediaType
name|parent
parameter_list|)
block|{
name|registry
operator|.
name|addSuperType
argument_list|(
name|type
operator|.
name|getType
argument_list|()
argument_list|,
name|parent
argument_list|)
expr_stmt|;
block|}
comment|/**      * Adds an alias for the given media type. This method should only      * be called from {@link MimeType#addAlias(String)}.      *      * @param type media type      * @param alias media type alias (normalized to lower case)      */
specifier|synchronized
name|void
name|addAlias
parameter_list|(
name|MimeType
name|type
parameter_list|,
name|MediaType
name|alias
parameter_list|)
block|{
name|registry
operator|.
name|addAlias
argument_list|(
name|type
operator|.
name|getType
argument_list|()
argument_list|,
name|alias
argument_list|)
expr_stmt|;
block|}
comment|/**      * Adds a file name pattern for the given media type. Assumes that the      * pattern being added is<b>not</b> a JDK standard regular expression.      *      * @param type      *            media type      * @param pattern      *            file name pattern      * @throws MimeTypeException      *             if the pattern conflicts with existing ones      */
specifier|public
name|void
name|addPattern
parameter_list|(
name|MimeType
name|type
parameter_list|,
name|String
name|pattern
parameter_list|)
throws|throws
name|MimeTypeException
block|{
name|this
operator|.
name|addPattern
argument_list|(
name|type
argument_list|,
name|pattern
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|/**      * Adds a file name pattern for the given media type. The caller can specify      * whether the pattern being added<b>is</b> or<b>is not</b> a JDK standard      * regular expression via the<code>isRegex</code> parameter. If the value      * is set to true, then a JDK standard regex is assumed, otherwise the      * freedesktop glob type is assumed.      *      * @param type      *            media type      * @param pattern      *            file name pattern      * @param isRegex      *            set to true if JDK std regexs are desired, otherwise set to      *            false.      * @throws MimeTypeException      *             if the pattern conflicts with existing ones.      *      */
specifier|public
name|void
name|addPattern
parameter_list|(
name|MimeType
name|type
parameter_list|,
name|String
name|pattern
parameter_list|,
name|boolean
name|isRegex
parameter_list|)
throws|throws
name|MimeTypeException
block|{
name|patterns
operator|.
name|add
argument_list|(
name|pattern
argument_list|,
name|isRegex
argument_list|,
name|type
argument_list|)
expr_stmt|;
block|}
specifier|public
name|MediaTypeRegistry
name|getMediaTypeRegistry
parameter_list|()
block|{
return|return
name|registry
return|;
block|}
comment|/**      * Return the minimum length of data to provide to analyzing methods based      * on the document's content in order to check all the known MimeTypes.      *      * @return the minimum length of data to provide.      * @see #getMimeType(byte[])      * @see #getMimeType(String, byte[])      */
specifier|public
name|int
name|getMinLength
parameter_list|()
block|{
comment|// This needs to be reasonably large to be able to correctly detect
comment|// things like XML root elements after initial comment and DTDs
return|return
literal|64
operator|*
literal|1024
return|;
block|}
comment|/**      * Add the specified mime-type in the repository.      *      * @param type      *            is the mime-type to add.      */
name|void
name|add
parameter_list|(
name|MimeType
name|type
parameter_list|)
block|{
name|registry
operator|.
name|addType
argument_list|(
name|type
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|types
operator|.
name|put
argument_list|(
name|type
operator|.
name|getType
argument_list|()
argument_list|,
name|type
argument_list|)
expr_stmt|;
comment|// Update the magics index...
if|if
condition|(
name|type
operator|.
name|hasMagic
argument_list|()
condition|)
block|{
name|magics
operator|.
name|addAll
argument_list|(
name|type
operator|.
name|getMagics
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Update the xml (xmlRoot) index...
if|if
condition|(
name|type
operator|.
name|hasRootXML
argument_list|()
condition|)
block|{
name|xmls
operator|.
name|add
argument_list|(
name|type
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Called after all configured types have been loaded.      * Initializes the magics and xmls sets.      */
name|void
name|init
parameter_list|()
block|{
for|for
control|(
name|MimeType
name|type
range|:
name|types
operator|.
name|values
argument_list|()
control|)
block|{
name|magics
operator|.
name|addAll
argument_list|(
name|type
operator|.
name|getMagics
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|type
operator|.
name|hasRootXML
argument_list|()
condition|)
block|{
name|xmls
operator|.
name|add
argument_list|(
name|type
argument_list|)
expr_stmt|;
block|}
block|}
name|Collections
operator|.
name|sort
argument_list|(
name|magics
argument_list|)
expr_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|xmls
argument_list|)
expr_stmt|;
block|}
comment|/**      * Automatically detects the MIME type of a document based on magic      * markers in the stream prefix and any given metadata hints.      *<p>      * The given stream is expected to support marks, so that this method      * can reset the stream to the position it was in before this method      * was called.      *      * @param input document stream, or<code>null</code>      * @param metadata metadata hints      * @return MIME type of the document      * @throws IOException if the document stream could not be read      */
specifier|public
name|MediaType
name|detect
parameter_list|(
name|InputStream
name|input
parameter_list|,
name|Metadata
name|metadata
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|MimeType
argument_list|>
name|possibleTypes
init|=
literal|null
decl_stmt|;
comment|// Get type based on magic prefix
if|if
condition|(
name|input
operator|!=
literal|null
condition|)
block|{
name|input
operator|.
name|mark
argument_list|(
name|getMinLength
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|byte
index|[]
name|prefix
init|=
name|readMagicHeader
argument_list|(
name|input
argument_list|)
decl_stmt|;
name|possibleTypes
operator|=
name|getMimeType
argument_list|(
name|prefix
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|input
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
block|}
comment|// Get type based on resourceName hint (if available)
name|String
name|resourceName
init|=
name|metadata
operator|.
name|get
argument_list|(
name|Metadata
operator|.
name|RESOURCE_NAME_KEY
argument_list|)
decl_stmt|;
if|if
condition|(
name|resourceName
operator|!=
literal|null
condition|)
block|{
name|String
name|name
init|=
literal|null
decl_stmt|;
comment|// Deal with a URI or a path name in as the resource  name
try|try
block|{
name|URI
name|uri
init|=
operator|new
name|URI
argument_list|(
name|resourceName
argument_list|)
decl_stmt|;
name|String
name|path
init|=
name|uri
operator|.
name|getPath
argument_list|()
decl_stmt|;
if|if
condition|(
name|path
operator|!=
literal|null
condition|)
block|{
name|int
name|slash
init|=
name|path
operator|.
name|lastIndexOf
argument_list|(
literal|'/'
argument_list|)
decl_stmt|;
if|if
condition|(
name|slash
operator|+
literal|1
operator|<
name|path
operator|.
name|length
argument_list|()
condition|)
block|{
name|name
operator|=
name|path
operator|.
name|substring
argument_list|(
name|slash
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|e
parameter_list|)
block|{
name|name
operator|=
name|resourceName
expr_stmt|;
block|}
if|if
condition|(
name|name
operator|!=
literal|null
condition|)
block|{
name|MimeType
name|hint
init|=
name|getMimeType
argument_list|(
name|name
argument_list|)
decl_stmt|;
comment|// If we have some types based on mime magic, try to specialise
comment|//  and/or select the type based on that
comment|// Otherwise, use the type identified from the name
name|possibleTypes
operator|=
name|applyHint
argument_list|(
name|possibleTypes
argument_list|,
name|hint
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Get type based on metadata hint (if available)
name|String
name|typeName
init|=
name|metadata
operator|.
name|get
argument_list|(
name|Metadata
operator|.
name|CONTENT_TYPE
argument_list|)
decl_stmt|;
if|if
condition|(
name|typeName
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|MimeType
name|hint
init|=
name|forName
argument_list|(
name|typeName
argument_list|)
decl_stmt|;
name|possibleTypes
operator|=
name|applyHint
argument_list|(
name|possibleTypes
argument_list|,
name|hint
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MimeTypeException
name|e
parameter_list|)
block|{
comment|// Malformed type name, ignore
block|}
block|}
if|if
condition|(
name|possibleTypes
operator|==
literal|null
operator|||
name|possibleTypes
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// Report that we don't know what it is
return|return
name|MediaType
operator|.
name|OCTET_STREAM
return|;
block|}
else|else
block|{
return|return
name|possibleTypes
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getType
argument_list|()
return|;
block|}
block|}
comment|/**      * Use the MimeType hint to try to clarify or specialise the current      *  possible types list.      * If the hint is a specialised form, use that instead      * If there are multiple possible types, use the hint to select one      */
specifier|private
name|List
argument_list|<
name|MimeType
argument_list|>
name|applyHint
parameter_list|(
name|List
argument_list|<
name|MimeType
argument_list|>
name|possibleTypes
parameter_list|,
name|MimeType
name|hint
parameter_list|)
block|{
if|if
condition|(
name|possibleTypes
operator|==
literal|null
operator|||
name|possibleTypes
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|Collections
operator|.
name|singletonList
argument_list|(
name|hint
argument_list|)
return|;
block|}
else|else
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|possibleTypes
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|MimeType
name|type
init|=
name|possibleTypes
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|hint
operator|.
name|equals
argument_list|(
name|type
argument_list|)
operator|||
name|registry
operator|.
name|isSpecializationOf
argument_list|(
name|hint
operator|.
name|getType
argument_list|()
argument_list|,
name|type
operator|.
name|getType
argument_list|()
argument_list|)
condition|)
block|{
comment|// Use just this type
return|return
name|Collections
operator|.
name|singletonList
argument_list|(
name|hint
argument_list|)
return|;
block|}
block|}
block|}
comment|// Hint didn't help, sorry
return|return
name|possibleTypes
return|;
block|}
specifier|private
specifier|static
name|MimeTypes
name|DEFAULT_TYPES
init|=
literal|null
decl_stmt|;
specifier|private
specifier|static
name|Map
argument_list|<
name|ClassLoader
argument_list|,
name|MimeTypes
argument_list|>
name|CLASSLOADER_SPECIFIC_DEFAULT_TYPES
init|=
operator|new
name|HashMap
argument_list|<
name|ClassLoader
argument_list|,
name|MimeTypes
argument_list|>
argument_list|()
decl_stmt|;
comment|/**      * Get the default MimeTypes. This includes all the build in      * media types, and any custom override ones present.      *       * @return MimeTypes default type registry      */
specifier|public
specifier|static
specifier|synchronized
name|MimeTypes
name|getDefaultMimeTypes
parameter_list|()
block|{
return|return
name|getDefaultMimeTypes
argument_list|(
literal|null
argument_list|)
return|;
block|}
comment|/**      * Get the default MimeTypes. This includes all the built-in      * media types, and any custom override ones present.      *       * @param ClassLoader to use, if not the default      * @return MimeTypes default type registry      */
specifier|public
specifier|static
specifier|synchronized
name|MimeTypes
name|getDefaultMimeTypes
parameter_list|(
name|ClassLoader
name|classLoader
parameter_list|)
block|{
name|MimeTypes
name|types
init|=
name|DEFAULT_TYPES
decl_stmt|;
if|if
condition|(
name|classLoader
operator|!=
literal|null
condition|)
block|{
name|types
operator|=
name|CLASSLOADER_SPECIFIC_DEFAULT_TYPES
operator|.
name|get
argument_list|(
name|classLoader
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|types
operator|==
literal|null
condition|)
block|{
try|try
block|{
name|types
operator|=
name|MimeTypesFactory
operator|.
name|create
argument_list|(
literal|"tika-mimetypes.xml"
argument_list|,
literal|"custom-mimetypes.xml"
argument_list|,
name|classLoader
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MimeTypeException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Unable to parse the default media type registry"
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Unable to read the default media type registry"
argument_list|,
name|e
argument_list|)
throw|;
block|}
if|if
condition|(
name|classLoader
operator|==
literal|null
condition|)
block|{
name|DEFAULT_TYPES
operator|=
name|types
expr_stmt|;
block|}
else|else
block|{
name|CLASSLOADER_SPECIFIC_DEFAULT_TYPES
operator|.
name|put
argument_list|(
name|classLoader
argument_list|,
name|types
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|types
return|;
block|}
block|}
end_class

end_unit

