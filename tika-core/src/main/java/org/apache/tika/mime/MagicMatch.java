begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|mime
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|detect
operator|.
name|MagicDetector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|metadata
operator|.
name|Metadata
import|;
end_import

begin_comment
comment|/**  * Defines a magic match.  */
end_comment

begin_class
class|class
name|MagicMatch
implements|implements
name|Clause
block|{
specifier|private
specifier|static
specifier|final
name|MediaType
name|MATCH
init|=
operator|new
name|MediaType
argument_list|(
literal|"x-tika"
argument_list|,
literal|"magic-match"
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|int
name|length
decl_stmt|;
specifier|private
specifier|final
name|MagicDetector
name|detector
decl_stmt|;
name|MagicMatch
parameter_list|(
name|int
name|offsetStart
parameter_list|,
name|int
name|offsetEnd
parameter_list|,
name|String
name|type
parameter_list|,
name|String
name|mask
parameter_list|,
name|String
name|value
parameter_list|)
throws|throws
name|MimeTypeException
block|{
name|byte
index|[]
name|patternBytes
init|=
name|decodeValue
argument_list|(
name|type
argument_list|,
name|value
argument_list|)
decl_stmt|;
name|byte
index|[]
name|maskBytes
decl_stmt|;
if|if
condition|(
name|mask
operator|!=
literal|null
condition|)
block|{
name|maskBytes
operator|=
name|decodeValue
argument_list|(
name|type
argument_list|,
name|mask
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|maskBytes
operator|=
operator|new
name|byte
index|[
name|patternBytes
operator|.
name|length
index|]
expr_stmt|;
name|Arrays
operator|.
name|fill
argument_list|(
name|maskBytes
argument_list|,
operator|(
name|byte
operator|)
literal|0xff
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|length
operator|=
name|Math
operator|.
name|max
argument_list|(
name|patternBytes
operator|.
name|length
argument_list|,
name|maskBytes
operator|.
name|length
argument_list|)
expr_stmt|;
if|if
condition|(
name|patternBytes
operator|.
name|length
operator|<
name|length
condition|)
block|{
name|byte
index|[]
name|buffer
init|=
operator|new
name|byte
index|[
name|length
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|patternBytes
argument_list|,
literal|0
argument_list|,
name|buffer
argument_list|,
literal|0
argument_list|,
name|patternBytes
operator|.
name|length
argument_list|)
expr_stmt|;
name|patternBytes
operator|=
name|buffer
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|maskBytes
operator|.
name|length
operator|<
name|length
condition|)
block|{
name|byte
index|[]
name|buffer
init|=
operator|new
name|byte
index|[
name|length
index|]
decl_stmt|;
name|Arrays
operator|.
name|fill
argument_list|(
name|buffer
argument_list|,
operator|(
name|byte
operator|)
literal|0xff
argument_list|)
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|maskBytes
argument_list|,
literal|0
argument_list|,
name|buffer
argument_list|,
literal|0
argument_list|,
name|maskBytes
operator|.
name|length
argument_list|)
expr_stmt|;
name|maskBytes
operator|=
name|buffer
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
name|i
operator|++
control|)
block|{
name|patternBytes
index|[
name|i
index|]
operator|&=
name|maskBytes
index|[
name|i
index|]
expr_stmt|;
block|}
name|this
operator|.
name|detector
operator|=
operator|new
name|MagicDetector
argument_list|(
name|MATCH
argument_list|,
name|patternBytes
argument_list|,
name|maskBytes
argument_list|,
name|offsetStart
argument_list|,
name|offsetEnd
argument_list|)
expr_stmt|;
block|}
specifier|private
name|byte
index|[]
name|decodeValue
parameter_list|(
name|String
name|type
parameter_list|,
name|String
name|value
parameter_list|)
throws|throws
name|MimeTypeException
block|{
comment|// Preliminary check
if|if
condition|(
operator|(
name|value
operator|==
literal|null
operator|)
operator|||
operator|(
name|type
operator|==
literal|null
operator|)
condition|)
block|{
return|return
literal|null
return|;
block|}
name|byte
index|[]
name|decoded
init|=
literal|null
decl_stmt|;
name|String
name|tmpVal
init|=
literal|null
decl_stmt|;
name|int
name|radix
init|=
literal|8
decl_stmt|;
comment|// hex
if|if
condition|(
name|value
operator|.
name|startsWith
argument_list|(
literal|"0x"
argument_list|)
condition|)
block|{
name|tmpVal
operator|=
name|value
operator|.
name|substring
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|radix
operator|=
literal|16
expr_stmt|;
block|}
else|else
block|{
name|tmpVal
operator|=
name|value
expr_stmt|;
name|radix
operator|=
literal|8
expr_stmt|;
block|}
if|if
condition|(
name|type
operator|.
name|equals
argument_list|(
literal|"string"
argument_list|)
condition|)
block|{
name|decoded
operator|=
name|decodeString
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|type
operator|.
name|equals
argument_list|(
literal|"byte"
argument_list|)
condition|)
block|{
name|decoded
operator|=
name|tmpVal
operator|.
name|getBytes
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|type
operator|.
name|equals
argument_list|(
literal|"host16"
argument_list|)
operator|||
name|type
operator|.
name|equals
argument_list|(
literal|"little16"
argument_list|)
condition|)
block|{
name|int
name|i
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|tmpVal
argument_list|,
name|radix
argument_list|)
decl_stmt|;
name|decoded
operator|=
operator|new
name|byte
index|[]
block|{
call|(
name|byte
call|)
argument_list|(
name|i
operator|>>
literal|8
argument_list|)
block|,
call|(
name|byte
call|)
argument_list|(
name|i
operator|&
literal|0x00FF
argument_list|)
block|}
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|type
operator|.
name|equals
argument_list|(
literal|"big16"
argument_list|)
condition|)
block|{
name|int
name|i
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|tmpVal
argument_list|,
name|radix
argument_list|)
decl_stmt|;
name|decoded
operator|=
operator|new
name|byte
index|[]
block|{
call|(
name|byte
call|)
argument_list|(
name|i
operator|>>
literal|8
argument_list|)
block|,
call|(
name|byte
call|)
argument_list|(
name|i
operator|&
literal|0x00FF
argument_list|)
block|}
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|type
operator|.
name|equals
argument_list|(
literal|"host32"
argument_list|)
operator|||
name|type
operator|.
name|equals
argument_list|(
literal|"little32"
argument_list|)
condition|)
block|{
name|long
name|i
init|=
name|Long
operator|.
name|parseLong
argument_list|(
name|tmpVal
argument_list|,
name|radix
argument_list|)
decl_stmt|;
name|decoded
operator|=
operator|new
name|byte
index|[]
block|{
call|(
name|byte
call|)
argument_list|(
operator|(
name|i
operator|&
literal|0x000000FF
operator|)
argument_list|)
block|,
call|(
name|byte
call|)
argument_list|(
operator|(
name|i
operator|&
literal|0x0000FF00
operator|)
operator|>>
literal|8
argument_list|)
block|,
call|(
name|byte
call|)
argument_list|(
operator|(
name|i
operator|&
literal|0x00FF0000
operator|)
operator|>>
literal|16
argument_list|)
block|,
call|(
name|byte
call|)
argument_list|(
operator|(
name|i
operator|&
literal|0xFF000000
operator|)
operator|>>
literal|24
argument_list|)
block|}
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|type
operator|.
name|equals
argument_list|(
literal|"big32"
argument_list|)
condition|)
block|{
name|long
name|i
init|=
name|Long
operator|.
name|parseLong
argument_list|(
name|tmpVal
argument_list|,
name|radix
argument_list|)
decl_stmt|;
name|decoded
operator|=
operator|new
name|byte
index|[]
block|{
call|(
name|byte
call|)
argument_list|(
operator|(
name|i
operator|&
literal|0xFF000000
operator|)
operator|>>
literal|24
argument_list|)
block|,
call|(
name|byte
call|)
argument_list|(
operator|(
name|i
operator|&
literal|0x00FF0000
operator|)
operator|>>
literal|16
argument_list|)
block|,
call|(
name|byte
call|)
argument_list|(
operator|(
name|i
operator|&
literal|0x0000FF00
operator|)
operator|>>
literal|8
argument_list|)
block|,
call|(
name|byte
call|)
argument_list|(
operator|(
name|i
operator|&
literal|0x000000FF
operator|)
argument_list|)
block|}
expr_stmt|;
block|}
return|return
name|decoded
return|;
block|}
specifier|private
name|byte
index|[]
name|decodeString
parameter_list|(
name|String
name|value
parameter_list|)
throws|throws
name|MimeTypeException
block|{
if|if
condition|(
name|value
operator|.
name|startsWith
argument_list|(
literal|"0x"
argument_list|)
condition|)
block|{
name|byte
index|[]
name|bytes
init|=
operator|new
name|byte
index|[
operator|(
name|value
operator|.
name|length
argument_list|()
operator|-
literal|2
operator|)
operator|/
literal|2
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|bytes
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|bytes
index|[
name|i
index|]
operator|=
operator|(
name|byte
operator|)
name|Integer
operator|.
name|parseInt
argument_list|(
name|value
operator|.
name|substring
argument_list|(
literal|2
operator|+
name|i
operator|*
literal|2
argument_list|,
literal|4
operator|+
name|i
operator|*
literal|2
argument_list|)
argument_list|,
literal|16
argument_list|)
expr_stmt|;
block|}
return|return
name|bytes
return|;
block|}
try|try
block|{
name|ByteArrayOutputStream
name|decoded
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|value
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|value
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
operator|==
literal|'\\'
condition|)
block|{
if|if
condition|(
name|value
operator|.
name|charAt
argument_list|(
name|i
operator|+
literal|1
argument_list|)
operator|==
literal|'\\'
condition|)
block|{
name|decoded
operator|.
name|write
argument_list|(
literal|'\\'
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|value
operator|.
name|charAt
argument_list|(
name|i
operator|+
literal|1
argument_list|)
operator|==
literal|'x'
condition|)
block|{
name|decoded
operator|.
name|write
argument_list|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|value
operator|.
name|substring
argument_list|(
name|i
operator|+
literal|2
argument_list|,
name|i
operator|+
literal|4
argument_list|)
argument_list|,
literal|16
argument_list|)
argument_list|)
expr_stmt|;
name|i
operator|+=
literal|3
expr_stmt|;
block|}
else|else
block|{
name|int
name|j
init|=
name|i
operator|+
literal|1
decl_stmt|;
while|while
condition|(
operator|(
name|j
operator|<
name|i
operator|+
literal|4
operator|)
operator|&&
operator|(
name|j
operator|<
name|value
operator|.
name|length
argument_list|()
operator|)
operator|&&
operator|(
name|Character
operator|.
name|isDigit
argument_list|(
name|value
operator|.
name|charAt
argument_list|(
name|j
argument_list|)
argument_list|)
operator|)
condition|)
block|{
name|j
operator|++
expr_stmt|;
block|}
name|decoded
operator|.
name|write
argument_list|(
name|Short
operator|.
name|decode
argument_list|(
literal|"0"
operator|+
name|value
operator|.
name|substring
argument_list|(
name|i
operator|+
literal|1
argument_list|,
name|j
argument_list|)
argument_list|)
operator|.
name|byteValue
argument_list|()
argument_list|)
expr_stmt|;
name|i
operator|=
name|j
operator|-
literal|1
expr_stmt|;
block|}
block|}
else|else
block|{
name|decoded
operator|.
name|write
argument_list|(
name|value
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|decoded
operator|.
name|toByteArray
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MimeTypeException
argument_list|(
literal|"Invalid string value: "
operator|+
name|value
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|boolean
name|eval
parameter_list|(
name|byte
index|[]
name|data
parameter_list|)
block|{
try|try
block|{
return|return
name|detector
operator|.
name|detect
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|data
argument_list|)
argument_list|,
operator|new
name|Metadata
argument_list|()
argument_list|)
operator|==
name|MATCH
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// Should never happen with a ByteArrayInputStream
return|return
literal|false
return|;
block|}
block|}
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|length
return|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|detector
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

