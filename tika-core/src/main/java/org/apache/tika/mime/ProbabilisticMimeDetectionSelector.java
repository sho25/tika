begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|mime
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|detect
operator|.
name|Detector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|metadata
operator|.
name|Metadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|mime
operator|.
name|MediaType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|mime
operator|.
name|MediaTypeRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|mime
operator|.
name|MimeType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|mime
operator|.
name|MimeTypeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|mime
operator|.
name|MimeTypes
import|;
end_import

begin_comment
comment|/**  * Selector for combining different mime detection results  *  based on probability  */
end_comment

begin_class
specifier|public
class|class
name|ProbabilisticMimeDetectionSelector
implements|implements
name|Detector
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|224589862960269260L
decl_stmt|;
specifier|private
name|MimeTypes
name|mimeTypes
decl_stmt|;
specifier|private
specifier|final
name|MediaType
name|rootMediaType
decl_stmt|;
comment|/** probability parameters default value */
specifier|private
specifier|static
specifier|final
name|float
name|DEFAULT_MAGIC_TRUST
init|=
literal|0.9f
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|float
name|DEFAULT_META_TRUST
init|=
literal|0.8f
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|float
name|DEFAULT_EXTENSION_TRUST
init|=
literal|0.8f
decl_stmt|;
specifier|private
name|float
name|priorMagicFileType
decl_stmt|,
name|priorExtensionFileType
decl_stmt|,
name|priorMetaFileType
decl_stmt|;
specifier|private
name|float
name|magic_trust
decl_stmt|,
name|extension_trust
decl_stmt|,
name|meta_trust
decl_stmt|;
specifier|private
name|float
name|magic_neg
decl_stmt|,
name|extension_neg
decl_stmt|,
name|meta_neg
decl_stmt|;
comment|/*      * any posterior probability lower than the threshold, will be considered as      * an oct-stream type, the default value is 0.5      */
specifier|private
name|float
name|threshold
decl_stmt|;
comment|/*      * this change rate is used when there are multiple types predicted by      * magic-bytes. the first predicted type has the highest probability, and      * the probability for the next type predicted by magic-bytes will decay      * with this change rate. The idea is to have the first one to take      * precedence among the multiple possible types predicted by MAGIC-bytes.      */
specifier|private
name|float
name|changeRate
decl_stmt|;
comment|/** ***********************/
specifier|public
name|ProbabilisticMimeDetectionSelector
parameter_list|()
block|{
name|this
argument_list|(
name|MimeTypes
operator|.
name|getDefaultMimeTypes
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|public
name|ProbabilisticMimeDetectionSelector
parameter_list|(
specifier|final
name|Builder
name|builder
parameter_list|)
block|{
name|this
argument_list|(
name|MimeTypes
operator|.
name|getDefaultMimeTypes
argument_list|()
argument_list|,
name|builder
argument_list|)
expr_stmt|;
block|}
specifier|public
name|ProbabilisticMimeDetectionSelector
parameter_list|(
specifier|final
name|MimeTypes
name|mimeTypes
parameter_list|)
block|{
name|this
argument_list|(
name|mimeTypes
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|public
name|ProbabilisticMimeDetectionSelector
parameter_list|(
specifier|final
name|MimeTypes
name|mimeTypes
parameter_list|,
specifier|final
name|Builder
name|builder
parameter_list|)
block|{
name|this
operator|.
name|mimeTypes
operator|=
name|mimeTypes
expr_stmt|;
name|rootMediaType
operator|=
name|MediaType
operator|.
name|OCTET_STREAM
expr_stmt|;
name|this
operator|.
name|initializeDefaultProbabilityParameters
argument_list|()
expr_stmt|;
name|this
operator|.
name|changeRate
operator|=
literal|0.1f
expr_stmt|;
if|if
condition|(
name|builder
operator|!=
literal|null
condition|)
block|{
name|priorMagicFileType
operator|=
name|builder
operator|.
name|priorMagicFileType
operator|==
literal|0f
condition|?
name|priorMagicFileType
else|:
name|builder
operator|.
name|priorMagicFileType
expr_stmt|;
name|priorExtensionFileType
operator|=
name|builder
operator|.
name|priorExtensionFileType
operator|==
literal|0f
condition|?
name|priorExtensionFileType
else|:
name|builder
operator|.
name|priorExtensionFileType
expr_stmt|;
name|priorMetaFileType
operator|=
name|builder
operator|.
name|priorMetaFileType
operator|==
literal|0f
condition|?
name|priorMetaFileType
else|:
name|builder
operator|.
name|priorMetaFileType
expr_stmt|;
name|magic_trust
operator|=
name|builder
operator|.
name|magic_trust
operator|==
literal|0f
condition|?
name|magic_trust
else|:
name|builder
operator|.
name|extension_neg
expr_stmt|;
name|extension_trust
operator|=
name|builder
operator|.
name|extension_trust
operator|==
literal|0f
condition|?
name|extension_trust
else|:
name|builder
operator|.
name|extension_trust
expr_stmt|;
name|meta_trust
operator|=
name|builder
operator|.
name|meta_trust
operator|==
literal|0f
condition|?
name|meta_trust
else|:
name|builder
operator|.
name|meta_trust
expr_stmt|;
name|magic_neg
operator|=
name|builder
operator|.
name|magic_neg
operator|==
literal|0f
condition|?
name|magic_neg
else|:
name|builder
operator|.
name|magic_neg
expr_stmt|;
name|extension_neg
operator|=
name|builder
operator|.
name|extension_neg
operator|==
literal|0f
condition|?
name|extension_neg
else|:
name|builder
operator|.
name|extension_neg
expr_stmt|;
name|meta_neg
operator|=
name|builder
operator|.
name|meta_neg
operator|==
literal|0f
condition|?
name|meta_neg
else|:
name|builder
operator|.
name|meta_neg
expr_stmt|;
name|threshold
operator|=
name|builder
operator|.
name|threshold
operator|==
literal|0f
condition|?
name|threshold
else|:
name|builder
operator|.
name|threshold
expr_stmt|;
block|}
block|}
comment|/**      * Initilize probability parameters with default values;      */
specifier|private
name|void
name|initializeDefaultProbabilityParameters
parameter_list|()
block|{
name|priorMagicFileType
operator|=
literal|0.5f
expr_stmt|;
name|priorExtensionFileType
operator|=
literal|0.5f
expr_stmt|;
name|priorMetaFileType
operator|=
literal|0.5f
expr_stmt|;
name|magic_trust
operator|=
name|DEFAULT_MAGIC_TRUST
expr_stmt|;
name|extension_trust
operator|=
name|DEFAULT_EXTENSION_TRUST
expr_stmt|;
name|meta_trust
operator|=
name|DEFAULT_META_TRUST
expr_stmt|;
comment|// probability of the type detected by magic test given that the type is
comment|// not the detected type. The default is taken by 1 - the magic trust
name|magic_neg
operator|=
literal|1
operator|-
name|DEFAULT_MAGIC_TRUST
expr_stmt|;
comment|// probability of the type detected by extension test given that the
comment|// type is not the type detected by extension test
name|extension_neg
operator|=
literal|1
operator|-
name|DEFAULT_EXTENSION_TRUST
expr_stmt|;
comment|// same as above; but it could be customized to suffice different use.
name|meta_neg
operator|=
literal|1
operator|-
name|DEFAULT_META_TRUST
expr_stmt|;
name|threshold
operator|=
literal|0.5001f
expr_stmt|;
block|}
specifier|public
name|MediaType
name|detect
parameter_list|(
name|InputStream
name|input
parameter_list|,
name|Metadata
name|metadata
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|MimeType
argument_list|>
name|possibleTypes
init|=
literal|null
decl_stmt|;
comment|// Get type based on magic prefix
if|if
condition|(
name|input
operator|!=
literal|null
condition|)
block|{
name|input
operator|.
name|mark
argument_list|(
name|mimeTypes
operator|.
name|getMinLength
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|byte
index|[]
name|prefix
init|=
name|mimeTypes
operator|.
name|readMagicHeader
argument_list|(
name|input
argument_list|)
decl_stmt|;
name|possibleTypes
operator|=
name|mimeTypes
operator|.
name|getMimeType
argument_list|(
name|prefix
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|input
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
block|}
name|MimeType
name|extHint
init|=
literal|null
decl_stmt|;
comment|// Get type based on resourceName hint (if available)
name|String
name|resourceName
init|=
name|metadata
operator|.
name|get
argument_list|(
name|Metadata
operator|.
name|RESOURCE_NAME_KEY
argument_list|)
decl_stmt|;
if|if
condition|(
name|resourceName
operator|!=
literal|null
condition|)
block|{
name|String
name|name
init|=
literal|null
decl_stmt|;
comment|// Deal with a URI or a path name in as the resource name
try|try
block|{
name|URI
name|uri
init|=
operator|new
name|URI
argument_list|(
name|resourceName
argument_list|)
decl_stmt|;
name|String
name|path
init|=
name|uri
operator|.
name|getPath
argument_list|()
decl_stmt|;
if|if
condition|(
name|path
operator|!=
literal|null
condition|)
block|{
name|int
name|slash
init|=
name|path
operator|.
name|lastIndexOf
argument_list|(
literal|'/'
argument_list|)
decl_stmt|;
if|if
condition|(
name|slash
operator|+
literal|1
operator|<
name|path
operator|.
name|length
argument_list|()
condition|)
block|{
name|name
operator|=
name|path
operator|.
name|substring
argument_list|(
name|slash
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|e
parameter_list|)
block|{
name|name
operator|=
name|resourceName
expr_stmt|;
block|}
if|if
condition|(
name|name
operator|!=
literal|null
condition|)
block|{
comment|// MimeType hint = getMimeType(name);
name|extHint
operator|=
name|mimeTypes
operator|.
name|getMimeType
argument_list|(
name|name
argument_list|)
expr_stmt|;
comment|// If we have some types based on mime magic, try to specialise
comment|// and/or select the type based on that
comment|// Otherwise, use the type identified from the name
comment|// possibleTypes = applyHint(possibleTypes, hint);
block|}
block|}
comment|// Get type based on metadata hint (if available)
name|MimeType
name|metaHint
init|=
literal|null
decl_stmt|;
name|String
name|typeName
init|=
name|metadata
operator|.
name|get
argument_list|(
name|Metadata
operator|.
name|CONTENT_TYPE
argument_list|)
decl_stmt|;
if|if
condition|(
name|typeName
operator|!=
literal|null
condition|)
block|{
try|try
block|{
comment|// MimeType hint = forName(typeName);
name|metaHint
operator|=
name|mimeTypes
operator|.
name|forName
argument_list|(
name|typeName
argument_list|)
expr_stmt|;
comment|// possibleTypes = applyHint(possibleTypes, hint);
block|}
catch|catch
parameter_list|(
name|MimeTypeException
name|e
parameter_list|)
block|{
comment|// Malformed type name, ignore
block|}
block|}
comment|/*          * the following calls the probability selection.          */
return|return
name|applyProbilities
argument_list|(
name|possibleTypes
argument_list|,
name|extHint
argument_list|,
name|metaHint
argument_list|)
return|;
block|}
specifier|private
name|MediaType
name|applyProbilities
parameter_list|(
specifier|final
name|List
argument_list|<
name|MimeType
argument_list|>
name|possibleTypes
parameter_list|,
specifier|final
name|MimeType
name|extMimeType
parameter_list|,
specifier|final
name|MimeType
name|metadataMimeType
parameter_list|)
block|{
comment|/* initialize some probability variables */
name|MediaType
name|extensionMediaType_
init|=
name|extMimeType
operator|==
literal|null
condition|?
literal|null
else|:
name|extMimeType
operator|.
name|getType
argument_list|()
decl_stmt|;
name|MediaType
name|metaMediaType_
init|=
name|metadataMimeType
operator|==
literal|null
condition|?
literal|null
else|:
name|metadataMimeType
operator|.
name|getType
argument_list|()
decl_stmt|;
name|int
name|n
init|=
name|possibleTypes
operator|.
name|size
argument_list|()
decl_stmt|;
name|float
name|mag_trust
init|=
name|magic_trust
decl_stmt|;
name|float
name|mag_neg
init|=
name|magic_neg
decl_stmt|;
name|float
name|ext_trust
init|=
name|extension_trust
decl_stmt|;
name|float
name|ext_neg
init|=
name|extension_neg
decl_stmt|;
name|float
name|met_trust
init|=
name|meta_trust
decl_stmt|;
name|float
name|met_neg
init|=
name|meta_neg
decl_stmt|;
comment|/* ************************** */
comment|/* pre-process some probability variables */
if|if
condition|(
name|extensionMediaType_
operator|==
literal|null
operator|||
name|extensionMediaType_
operator|.
name|compareTo
argument_list|(
name|rootMediaType
argument_list|)
operator|==
literal|0
condition|)
block|{
comment|/*              * this is a root type, that means the extension method fails to              * identify any type.              */
name|ext_trust
operator|=
literal|1
expr_stmt|;
name|ext_neg
operator|=
literal|1
expr_stmt|;
block|}
if|if
condition|(
name|metaMediaType_
operator|==
literal|null
operator|||
name|metaMediaType_
operator|.
name|compareTo
argument_list|(
name|rootMediaType
argument_list|)
operator|==
literal|0
condition|)
block|{
name|met_trust
operator|=
literal|1
expr_stmt|;
name|met_neg
operator|=
literal|1
expr_stmt|;
block|}
name|float
name|maxProb
init|=
operator|-
literal|1f
decl_stmt|;
name|MediaType
name|bestEstimate
init|=
name|rootMediaType
decl_stmt|;
if|if
condition|(
name|possibleTypes
operator|!=
literal|null
operator|&&
operator|!
name|possibleTypes
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|int
name|i
decl_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|n
condition|;
name|i
operator|++
control|)
block|{
name|MediaType
name|magictype
init|=
name|possibleTypes
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getType
argument_list|()
decl_stmt|;
name|MediaTypeRegistry
name|registry
init|=
name|mimeTypes
operator|.
name|getMediaTypeRegistry
argument_list|()
decl_stmt|;
if|if
condition|(
name|magictype
operator|!=
literal|null
operator|&&
name|magictype
operator|.
name|equals
argument_list|(
name|rootMediaType
argument_list|)
condition|)
block|{
name|mag_trust
operator|=
literal|1
expr_stmt|;
name|mag_neg
operator|=
literal|1
expr_stmt|;
block|}
else|else
block|{
comment|// check if each identified type belongs to the same class;
if|if
condition|(
name|extensionMediaType_
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|extensionMediaType_
operator|.
name|equals
argument_list|(
name|magictype
argument_list|)
operator|||
name|registry
operator|.
name|isSpecializationOf
argument_list|(
name|extensionMediaType_
argument_list|,
name|magictype
argument_list|)
condition|)
block|{
comment|// Use just this type
name|possibleTypes
operator|.
name|set
argument_list|(
name|i
argument_list|,
name|extMimeType
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|registry
operator|.
name|isSpecializationOf
argument_list|(
name|magictype
argument_list|,
name|extensionMediaType_
argument_list|)
condition|)
block|{
name|extensionMediaType_
operator|=
name|magictype
expr_stmt|;
block|}
block|}
if|if
condition|(
name|metaMediaType_
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|metaMediaType_
operator|.
name|equals
argument_list|(
name|magictype
argument_list|)
operator|||
name|registry
operator|.
name|isSpecializationOf
argument_list|(
name|metaMediaType_
argument_list|,
name|magictype
argument_list|)
condition|)
block|{
comment|// Use just this type
name|possibleTypes
operator|.
name|set
argument_list|(
name|i
argument_list|,
name|metadataMimeType
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|registry
operator|.
name|isSpecializationOf
argument_list|(
name|magictype
argument_list|,
name|metaMediaType_
argument_list|)
condition|)
block|{
name|metaMediaType_
operator|=
name|magictype
expr_stmt|;
block|}
block|}
block|}
comment|/*                  * prepare the conditional probability for file type prediction.                  */
name|float
index|[]
name|results
init|=
operator|new
name|float
index|[
literal|3
index|]
decl_stmt|;
name|float
index|[]
name|trust1
init|=
operator|new
name|float
index|[
literal|3
index|]
decl_stmt|;
name|float
index|[]
name|negtrust1
init|=
operator|new
name|float
index|[
literal|3
index|]
decl_stmt|;
name|magictype
operator|=
name|possibleTypes
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getType
argument_list|()
expr_stmt|;
if|if
condition|(
name|i
operator|>
literal|0
condition|)
block|{
comment|/*                      * decay as our trust goes down with next type predicted by                      * magic                      */
name|mag_trust
operator|=
name|mag_trust
operator|*
operator|(
literal|1
operator|-
name|changeRate
operator|)
expr_stmt|;
comment|/*                      * grow as our trust goes down                      */
name|mag_neg
operator|=
name|mag_neg
operator|*
operator|(
literal|1
operator|+
name|changeRate
operator|)
expr_stmt|;
block|}
if|if
condition|(
name|magictype
operator|!=
literal|null
operator|&&
name|mag_trust
operator|!=
literal|1
condition|)
block|{
name|trust1
index|[
literal|0
index|]
operator|=
name|mag_trust
expr_stmt|;
name|negtrust1
index|[
literal|0
index|]
operator|=
name|mag_neg
expr_stmt|;
if|if
condition|(
name|metaMediaType_
operator|!=
literal|null
operator|&&
name|met_trust
operator|!=
literal|1
condition|)
block|{
if|if
condition|(
name|magictype
operator|.
name|equals
argument_list|(
name|metaMediaType_
argument_list|)
condition|)
block|{
name|trust1
index|[
literal|1
index|]
operator|=
name|met_trust
expr_stmt|;
name|negtrust1
index|[
literal|1
index|]
operator|=
name|met_neg
expr_stmt|;
block|}
else|else
block|{
name|trust1
index|[
literal|1
index|]
operator|=
literal|1
operator|-
name|met_trust
expr_stmt|;
name|negtrust1
index|[
literal|1
index|]
operator|=
literal|1
operator|-
name|met_neg
expr_stmt|;
block|}
block|}
else|else
block|{
name|trust1
index|[
literal|1
index|]
operator|=
literal|1
expr_stmt|;
name|negtrust1
index|[
literal|1
index|]
operator|=
literal|1
expr_stmt|;
block|}
if|if
condition|(
name|extensionMediaType_
operator|!=
literal|null
operator|&&
name|ext_trust
operator|!=
literal|1
condition|)
block|{
if|if
condition|(
name|magictype
operator|.
name|equals
argument_list|(
name|extensionMediaType_
argument_list|)
condition|)
block|{
name|trust1
index|[
literal|2
index|]
operator|=
name|ext_trust
expr_stmt|;
name|negtrust1
index|[
literal|2
index|]
operator|=
name|ext_neg
expr_stmt|;
block|}
else|else
block|{
name|trust1
index|[
literal|2
index|]
operator|=
literal|1
operator|-
name|ext_trust
expr_stmt|;
name|negtrust1
index|[
literal|2
index|]
operator|=
literal|1
operator|-
name|ext_neg
expr_stmt|;
block|}
block|}
else|else
block|{
name|trust1
index|[
literal|2
index|]
operator|=
literal|1
expr_stmt|;
name|negtrust1
index|[
literal|2
index|]
operator|=
literal|1
expr_stmt|;
block|}
block|}
else|else
block|{
name|results
index|[
literal|0
index|]
operator|=
literal|0.1f
expr_stmt|;
block|}
name|float
index|[]
name|trust2
init|=
operator|new
name|float
index|[
literal|3
index|]
decl_stmt|;
name|float
index|[]
name|negtrust2
init|=
operator|new
name|float
index|[
literal|3
index|]
decl_stmt|;
if|if
condition|(
name|metadataMimeType
operator|!=
literal|null
operator|&&
name|met_trust
operator|!=
literal|1
condition|)
block|{
name|trust2
index|[
literal|1
index|]
operator|=
name|met_trust
expr_stmt|;
name|negtrust2
index|[
literal|1
index|]
operator|=
name|met_neg
expr_stmt|;
if|if
condition|(
name|magictype
operator|!=
literal|null
operator|&&
name|mag_trust
operator|!=
literal|1
condition|)
block|{
if|if
condition|(
name|metaMediaType_
operator|.
name|equals
argument_list|(
name|magictype
argument_list|)
condition|)
block|{
name|trust2
index|[
literal|0
index|]
operator|=
name|mag_trust
expr_stmt|;
name|negtrust2
index|[
literal|0
index|]
operator|=
name|mag_neg
expr_stmt|;
block|}
else|else
block|{
name|trust2
index|[
literal|0
index|]
operator|=
literal|1
operator|-
name|mag_trust
expr_stmt|;
name|negtrust2
index|[
literal|0
index|]
operator|=
literal|1
operator|-
name|mag_neg
expr_stmt|;
block|}
block|}
else|else
block|{
name|trust2
index|[
literal|0
index|]
operator|=
literal|1f
expr_stmt|;
name|negtrust2
index|[
literal|0
index|]
operator|=
literal|1f
expr_stmt|;
block|}
if|if
condition|(
name|extensionMediaType_
operator|!=
literal|null
operator|&&
name|ext_trust
operator|!=
literal|1
condition|)
block|{
if|if
condition|(
name|metaMediaType_
operator|.
name|equals
argument_list|(
name|extensionMediaType_
argument_list|)
condition|)
block|{
name|trust2
index|[
literal|2
index|]
operator|=
name|ext_trust
expr_stmt|;
name|negtrust2
index|[
literal|2
index|]
operator|=
name|ext_neg
expr_stmt|;
block|}
else|else
block|{
name|trust2
index|[
literal|2
index|]
operator|=
literal|1
operator|-
name|ext_trust
expr_stmt|;
name|negtrust2
index|[
literal|2
index|]
operator|=
literal|1
operator|-
name|ext_neg
expr_stmt|;
block|}
block|}
else|else
block|{
name|trust2
index|[
literal|2
index|]
operator|=
literal|1f
expr_stmt|;
name|negtrust2
index|[
literal|2
index|]
operator|=
literal|1f
expr_stmt|;
block|}
block|}
else|else
block|{
name|results
index|[
literal|1
index|]
operator|=
literal|0.1f
expr_stmt|;
block|}
name|float
index|[]
name|trust3
init|=
operator|new
name|float
index|[
literal|3
index|]
decl_stmt|;
name|float
index|[]
name|negtrust3
init|=
operator|new
name|float
index|[
literal|3
index|]
decl_stmt|;
if|if
condition|(
name|extensionMediaType_
operator|!=
literal|null
operator|&&
name|ext_trust
operator|!=
literal|1
condition|)
block|{
name|trust3
index|[
literal|2
index|]
operator|=
name|ext_trust
expr_stmt|;
name|negtrust3
index|[
literal|2
index|]
operator|=
name|ext_neg
expr_stmt|;
if|if
condition|(
name|magictype
operator|!=
literal|null
operator|&&
name|mag_trust
operator|!=
literal|1
condition|)
block|{
if|if
condition|(
name|magictype
operator|.
name|equals
argument_list|(
name|extensionMediaType_
argument_list|)
condition|)
block|{
name|trust3
index|[
literal|0
index|]
operator|=
name|mag_trust
expr_stmt|;
name|negtrust3
index|[
literal|0
index|]
operator|=
name|mag_neg
expr_stmt|;
block|}
else|else
block|{
name|trust3
index|[
literal|0
index|]
operator|=
literal|1
operator|-
name|mag_trust
expr_stmt|;
name|negtrust3
index|[
literal|0
index|]
operator|=
literal|1
operator|-
name|mag_neg
expr_stmt|;
block|}
block|}
else|else
block|{
name|trust3
index|[
literal|0
index|]
operator|=
literal|1f
expr_stmt|;
name|negtrust3
index|[
literal|0
index|]
operator|=
literal|1f
expr_stmt|;
block|}
if|if
condition|(
name|metaMediaType_
operator|!=
literal|null
operator|&&
name|met_trust
operator|!=
literal|1
condition|)
block|{
if|if
condition|(
name|metaMediaType_
operator|.
name|equals
argument_list|(
name|extensionMediaType_
argument_list|)
condition|)
block|{
name|trust3
index|[
literal|1
index|]
operator|=
name|met_trust
expr_stmt|;
name|negtrust3
index|[
literal|1
index|]
operator|=
name|met_neg
expr_stmt|;
block|}
else|else
block|{
name|trust3
index|[
literal|1
index|]
operator|=
literal|1
operator|-
name|met_trust
expr_stmt|;
name|negtrust3
index|[
literal|1
index|]
operator|=
literal|1
operator|-
name|met_neg
expr_stmt|;
block|}
block|}
else|else
block|{
name|trust3
index|[
literal|1
index|]
operator|=
literal|1f
expr_stmt|;
name|negtrust3
index|[
literal|1
index|]
operator|=
literal|1f
expr_stmt|;
block|}
block|}
else|else
block|{
name|results
index|[
literal|2
index|]
operator|=
literal|0.1f
expr_stmt|;
block|}
comment|/*                  * compute the posterior probability for each predicted file                  * type and store them into the "results" array.                  */
name|float
name|pPrime
init|=
name|priorMagicFileType
decl_stmt|;
name|float
name|deno
init|=
literal|1
operator|-
name|priorMagicFileType
decl_stmt|;
name|int
name|j
decl_stmt|;
if|if
condition|(
name|results
index|[
literal|0
index|]
operator|==
literal|0
condition|)
block|{
for|for
control|(
name|j
operator|=
literal|0
init|;
name|j
operator|<
name|trust1
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
name|pPrime
operator|*=
name|trust1
index|[
name|j
index|]
expr_stmt|;
if|if
condition|(
name|trust1
index|[
name|j
index|]
operator|!=
literal|1
condition|)
block|{
name|deno
operator|*=
name|negtrust1
index|[
name|j
index|]
expr_stmt|;
block|}
block|}
name|pPrime
operator|/=
operator|(
name|pPrime
operator|+
name|deno
operator|)
expr_stmt|;
name|results
index|[
literal|0
index|]
operator|=
name|pPrime
expr_stmt|;
block|}
if|if
condition|(
name|maxProb
operator|<
name|results
index|[
literal|0
index|]
condition|)
block|{
name|maxProb
operator|=
name|results
index|[
literal|0
index|]
expr_stmt|;
name|bestEstimate
operator|=
name|magictype
expr_stmt|;
block|}
name|pPrime
operator|=
name|priorMetaFileType
expr_stmt|;
name|deno
operator|=
literal|1
operator|-
name|priorMetaFileType
expr_stmt|;
if|if
condition|(
name|results
index|[
literal|1
index|]
operator|==
literal|0
condition|)
block|{
for|for
control|(
name|j
operator|=
literal|0
init|;
name|j
operator|<
name|trust2
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
name|pPrime
operator|*=
name|trust2
index|[
name|j
index|]
expr_stmt|;
if|if
condition|(
name|trust2
index|[
name|j
index|]
operator|!=
literal|1
condition|)
block|{
name|deno
operator|*=
name|negtrust2
index|[
name|j
index|]
expr_stmt|;
block|}
block|}
name|pPrime
operator|/=
operator|(
name|pPrime
operator|+
name|deno
operator|)
expr_stmt|;
name|results
index|[
literal|1
index|]
operator|=
name|pPrime
expr_stmt|;
block|}
if|if
condition|(
name|maxProb
operator|<
name|results
index|[
literal|1
index|]
condition|)
block|{
name|maxProb
operator|=
name|results
index|[
literal|1
index|]
expr_stmt|;
name|bestEstimate
operator|=
name|metaMediaType_
expr_stmt|;
block|}
name|pPrime
operator|=
name|priorExtensionFileType
expr_stmt|;
name|deno
operator|=
literal|1
operator|-
name|priorExtensionFileType
expr_stmt|;
if|if
condition|(
name|results
index|[
literal|2
index|]
operator|==
literal|0
condition|)
block|{
for|for
control|(
name|j
operator|=
literal|0
init|;
name|j
operator|<
name|trust3
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
name|pPrime
operator|*=
name|trust3
index|[
name|j
index|]
expr_stmt|;
if|if
condition|(
name|trust3
index|[
name|j
index|]
operator|!=
literal|1
condition|)
block|{
name|deno
operator|*=
name|negtrust3
index|[
name|j
index|]
expr_stmt|;
block|}
block|}
name|pPrime
operator|/=
operator|(
name|pPrime
operator|+
name|deno
operator|)
expr_stmt|;
name|results
index|[
literal|2
index|]
operator|=
name|pPrime
expr_stmt|;
block|}
if|if
condition|(
name|maxProb
operator|<
name|results
index|[
literal|2
index|]
condition|)
block|{
name|maxProb
operator|=
name|results
index|[
literal|2
index|]
expr_stmt|;
name|bestEstimate
operator|=
name|extensionMediaType_
expr_stmt|;
block|}
comment|/* 				for (float r : results) { 					System.out.print(r + "; "); 				} 				System.out.println();                  */
block|}
block|}
return|return
name|maxProb
operator|<
name|threshold
condition|?
name|this
operator|.
name|rootMediaType
else|:
name|bestEstimate
return|;
block|}
specifier|public
name|MediaTypeRegistry
name|getMediaTypeRegistry
parameter_list|()
block|{
return|return
name|this
operator|.
name|mimeTypes
operator|.
name|getMediaTypeRegistry
argument_list|()
return|;
block|}
comment|/**      * build class for probability parameters setting      *       *       */
specifier|public
specifier|static
class|class
name|Builder
block|{
comment|/*          * the following are the prior probabilities for the file type          * identified by each method.          */
specifier|private
name|float
name|priorMagicFileType
decl_stmt|,
name|priorExtensionFileType
decl_stmt|,
name|priorMetaFileType
decl_stmt|;
comment|/*          * the following are the conditional probability for each method with          * positive conditions          */
specifier|private
name|float
name|magic_trust
decl_stmt|,
name|extension_trust
decl_stmt|,
name|meta_trust
decl_stmt|;
comment|/*          * the following *_neg are the conditional probabilities with negative          * conditions          */
specifier|private
name|float
name|magic_neg
decl_stmt|,
name|extension_neg
decl_stmt|,
name|meta_neg
decl_stmt|;
specifier|private
name|float
name|threshold
decl_stmt|;
specifier|public
specifier|synchronized
name|Builder
name|priorMagicFileType
parameter_list|(
specifier|final
name|float
name|prior
parameter_list|)
block|{
name|this
operator|.
name|priorMagicFileType
operator|=
name|prior
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
specifier|synchronized
name|Builder
name|priorExtensionFileType
parameter_list|(
specifier|final
name|float
name|prior
parameter_list|)
block|{
name|this
operator|.
name|priorExtensionFileType
operator|=
name|prior
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
specifier|synchronized
name|Builder
name|priorMetaFileType
parameter_list|(
specifier|final
name|float
name|prior
parameter_list|)
block|{
name|this
operator|.
name|priorMetaFileType
operator|=
name|prior
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
specifier|synchronized
name|Builder
name|magic_trust
parameter_list|(
specifier|final
name|float
name|trust
parameter_list|)
block|{
name|this
operator|.
name|magic_trust
operator|=
name|trust
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
specifier|synchronized
name|Builder
name|extension_trust
parameter_list|(
specifier|final
name|float
name|trust
parameter_list|)
block|{
name|this
operator|.
name|extension_trust
operator|=
name|trust
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
specifier|synchronized
name|Builder
name|meta_trust
parameter_list|(
specifier|final
name|float
name|trust
parameter_list|)
block|{
name|this
operator|.
name|meta_trust
operator|=
name|trust
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
specifier|synchronized
name|Builder
name|magic_neg
parameter_list|(
specifier|final
name|float
name|trust
parameter_list|)
block|{
name|this
operator|.
name|magic_neg
operator|=
name|trust
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
specifier|synchronized
name|Builder
name|extension_neg
parameter_list|(
specifier|final
name|float
name|trust
parameter_list|)
block|{
name|this
operator|.
name|extension_neg
operator|=
name|trust
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
specifier|synchronized
name|Builder
name|meta_neg
parameter_list|(
specifier|final
name|float
name|trust
parameter_list|)
block|{
name|this
operator|.
name|meta_neg
operator|=
name|trust
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
specifier|synchronized
name|Builder
name|threshold
parameter_list|(
specifier|final
name|float
name|threshold
parameter_list|)
block|{
name|this
operator|.
name|threshold
operator|=
name|threshold
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Initialize the MimeTypes with this builder instance          */
specifier|public
name|ProbabilisticMimeDetectionSelector
name|build2
parameter_list|()
block|{
return|return
operator|new
name|ProbabilisticMimeDetectionSelector
argument_list|(
name|this
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

