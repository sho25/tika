begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|fork
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|metadata
operator|.
name|Metadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|sax
operator|.
name|AbstractRecursiveParserWrapperHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|sax
operator|.
name|ContentHandlerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|sax
operator|.
name|RecursiveParserWrapperHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|ContentHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|NotSerializableException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ObjectOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_comment
comment|/**  *<p>This class calls #toString() on the ContentHandler, inserts it into the Metadata object  * and serializes the Metadata object.  *</p>  * Ideally, this would serialize the ContentHandler and the Metadata object as separate objects,  * but we can't guarantee that the ContentHandler is Serializable (e.g. the StringWriter in  * the WriteOutContentHandler).  */
end_comment

begin_class
class|class
name|RecursiveMetadataContentHandlerProxy
extends|extends
name|RecursiveParserWrapperHandler
implements|implements
name|ForkProxy
block|{
specifier|public
specifier|static
specifier|final
name|byte
name|EMBEDDED_DOCUMENT
init|=
literal|1
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|byte
name|MAIN_DOCUMENT
init|=
literal|2
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|byte
name|HANDLER_AND_METADATA
init|=
literal|3
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|byte
name|METADATA_ONLY
init|=
literal|4
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|byte
name|COMPLETE
init|=
literal|5
decl_stmt|;
comment|/** Serial version UID */
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|737511106054617524L
decl_stmt|;
specifier|private
specifier|final
name|int
name|resource
decl_stmt|;
specifier|private
specifier|transient
name|DataOutputStream
name|output
decl_stmt|;
specifier|public
name|RecursiveMetadataContentHandlerProxy
parameter_list|(
name|int
name|resource
parameter_list|,
name|ContentHandlerFactory
name|contentHandlerFactory
parameter_list|)
block|{
name|super
argument_list|(
name|contentHandlerFactory
argument_list|)
expr_stmt|;
name|this
operator|.
name|resource
operator|=
name|resource
expr_stmt|;
block|}
specifier|public
name|void
name|init
parameter_list|(
name|DataInputStream
name|input
parameter_list|,
name|DataOutputStream
name|output
parameter_list|)
block|{
name|this
operator|.
name|output
operator|=
name|output
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|endEmbeddedDocument
parameter_list|(
name|ContentHandler
name|contentHandler
parameter_list|,
name|Metadata
name|metadata
parameter_list|)
throws|throws
name|SAXException
block|{
name|proxyBackToClient
argument_list|(
name|EMBEDDED_DOCUMENT
argument_list|,
name|contentHandler
argument_list|,
name|metadata
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|endDocument
parameter_list|(
name|ContentHandler
name|contentHandler
parameter_list|,
name|Metadata
name|metadata
parameter_list|)
throws|throws
name|SAXException
block|{
if|if
condition|(
name|hasHitMaximumEmbeddedResources
argument_list|()
condition|)
block|{
name|metadata
operator|.
name|set
argument_list|(
name|EMBEDDED_RESOURCE_LIMIT_REACHED
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
block|}
name|proxyBackToClient
argument_list|(
name|MAIN_DOCUMENT
argument_list|,
name|contentHandler
argument_list|,
name|metadata
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|proxyBackToClient
parameter_list|(
name|int
name|embeddedOrMainDocument
parameter_list|,
name|ContentHandler
name|contentHandler
parameter_list|,
name|Metadata
name|metadata
parameter_list|)
throws|throws
name|SAXException
block|{
try|try
block|{
name|output
operator|.
name|write
argument_list|(
name|ForkServer
operator|.
name|RESOURCE
argument_list|)
expr_stmt|;
name|output
operator|.
name|writeByte
argument_list|(
name|resource
argument_list|)
expr_stmt|;
name|output
operator|.
name|writeByte
argument_list|(
name|embeddedOrMainDocument
argument_list|)
expr_stmt|;
name|boolean
name|success
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|contentHandler
operator|instanceof
name|Serializable
condition|)
block|{
name|byte
index|[]
name|bytes
init|=
literal|null
decl_stmt|;
try|try
block|{
name|bytes
operator|=
name|serialize
argument_list|(
name|contentHandler
argument_list|)
expr_stmt|;
name|success
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NotSerializableException
name|e
parameter_list|)
block|{
comment|//object lied
block|}
if|if
condition|(
name|success
condition|)
block|{
name|output
operator|.
name|write
argument_list|(
name|HANDLER_AND_METADATA
argument_list|)
expr_stmt|;
name|sendBytes
argument_list|(
name|bytes
argument_list|)
expr_stmt|;
name|send
argument_list|(
name|metadata
argument_list|)
expr_stmt|;
name|output
operator|.
name|writeByte
argument_list|(
name|COMPLETE
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
comment|//if contenthandler is not allegedly or actually Serializable
comment|//fall back to adding contentHandler.toString() to the metadata object
comment|//and send that.
name|metadata
operator|.
name|set
argument_list|(
name|RecursiveParserWrapperHandler
operator|.
name|TIKA_CONTENT
argument_list|,
name|contentHandler
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|output
operator|.
name|writeByte
argument_list|(
name|METADATA_ONLY
argument_list|)
expr_stmt|;
name|send
argument_list|(
name|metadata
argument_list|)
expr_stmt|;
name|output
operator|.
name|writeByte
argument_list|(
name|COMPLETE
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SAXException
argument_list|(
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|doneSending
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|send
parameter_list|(
name|Object
name|object
parameter_list|)
throws|throws
name|IOException
block|{
name|byte
index|[]
name|bytes
init|=
name|serialize
argument_list|(
name|object
argument_list|)
decl_stmt|;
name|sendBytes
argument_list|(
name|bytes
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|sendBytes
parameter_list|(
name|byte
index|[]
name|bytes
parameter_list|)
throws|throws
name|IOException
block|{
name|output
operator|.
name|writeInt
argument_list|(
name|bytes
operator|.
name|length
argument_list|)
expr_stmt|;
name|output
operator|.
name|write
argument_list|(
name|bytes
argument_list|)
expr_stmt|;
name|output
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
specifier|private
name|byte
index|[]
name|serialize
parameter_list|(
name|Object
name|object
parameter_list|)
throws|throws
name|IOException
block|{
comment|//can't figure out why I'm getting an IllegalAccessException
comment|//when I try to use ForkedObjectInputStream, but
comment|//not when I do this manually ?!
name|ByteArrayOutputStream
name|bos
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|ObjectOutputStream
name|oos
init|=
operator|new
name|ObjectOutputStream
argument_list|(
name|bos
argument_list|)
decl_stmt|;
name|oos
operator|.
name|writeObject
argument_list|(
name|object
argument_list|)
expr_stmt|;
name|oos
operator|.
name|flush
argument_list|()
expr_stmt|;
name|oos
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|bos
operator|.
name|toByteArray
argument_list|()
return|;
block|}
specifier|private
name|void
name|doneSending
parameter_list|()
throws|throws
name|SAXException
block|{
try|try
block|{
name|output
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SAXException
argument_list|(
literal|"Unexpected fork proxy problem"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

