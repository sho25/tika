begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|fork
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|io
operator|.
name|IOExceptionWithCause
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_class
class|class
name|ForkClient
block|{
specifier|private
specifier|final
name|ClassLoader
name|loader
decl_stmt|;
specifier|private
specifier|final
name|File
name|directory
decl_stmt|;
specifier|private
specifier|final
name|Process
name|process
decl_stmt|;
specifier|private
specifier|final
name|DataOutputStream
name|output
decl_stmt|;
specifier|private
specifier|final
name|DataInputStream
name|input
decl_stmt|;
specifier|private
specifier|final
name|InputStream
name|error
decl_stmt|;
specifier|public
name|ForkClient
parameter_list|(
name|ClassLoader
name|loader
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|loader
operator|=
name|loader
expr_stmt|;
name|this
operator|.
name|directory
operator|=
name|File
operator|.
name|createTempFile
argument_list|(
literal|"apache-tika-"
argument_list|,
literal|"-oop"
argument_list|)
expr_stmt|;
name|directory
operator|.
name|delete
argument_list|()
expr_stmt|;
name|directory
operator|.
name|mkdir
argument_list|()
expr_stmt|;
name|boolean
name|ok
init|=
literal|false
decl_stmt|;
try|try
block|{
name|copyClassToDirectory
argument_list|(
name|ForkServer
operator|.
name|class
argument_list|)
expr_stmt|;
name|copyClassToDirectory
argument_list|(
name|ForkSerializer
operator|.
name|class
argument_list|)
expr_stmt|;
name|ProcessBuilder
name|builder
init|=
operator|new
name|ProcessBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|directory
argument_list|(
name|directory
argument_list|)
expr_stmt|;
name|builder
operator|.
name|command
argument_list|(
literal|"java"
argument_list|,
name|ForkServer
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|process
operator|=
name|builder
operator|.
name|start
argument_list|()
expr_stmt|;
name|this
operator|.
name|output
operator|=
operator|new
name|DataOutputStream
argument_list|(
name|process
operator|.
name|getOutputStream
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|input
operator|=
operator|new
name|DataInputStream
argument_list|(
name|process
operator|.
name|getInputStream
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|error
operator|=
name|process
operator|.
name|getErrorStream
argument_list|()
expr_stmt|;
name|ok
operator|=
literal|true
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|ok
condition|)
block|{
name|delete
argument_list|(
name|directory
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Copies the<code>.class</code> file of the given class to the      * directory from where the forked server process can load it      * during startup before setting up the stdin/out communication      * channel with the parent process.      *      * @param klass the class to be copied      * @throws IOException if the class could not be copied      */
specifier|private
name|void
name|copyClassToDirectory
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|klass
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|path
init|=
name|klass
operator|.
name|getName
argument_list|()
operator|.
name|replace
argument_list|(
literal|'.'
argument_list|,
literal|'/'
argument_list|)
operator|+
literal|".class"
decl_stmt|;
name|InputStream
name|input
init|=
name|loader
operator|.
name|getResourceAsStream
argument_list|(
name|path
argument_list|)
decl_stmt|;
try|try
block|{
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|directory
argument_list|,
name|path
argument_list|)
decl_stmt|;
name|file
operator|.
name|getParentFile
argument_list|()
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
name|OutputStream
name|output
init|=
operator|new
name|FileOutputStream
argument_list|(
name|file
argument_list|)
decl_stmt|;
try|try
block|{
name|IOUtils
operator|.
name|copy
argument_list|(
name|input
argument_list|,
name|output
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|output
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|input
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
specifier|synchronized
name|Object
name|echo
parameter_list|(
name|Object
name|message
parameter_list|)
throws|throws
name|IOException
block|{
name|consumeErrors
argument_list|()
expr_stmt|;
name|output
operator|.
name|write
argument_list|(
name|ForkServer
operator|.
name|ECHO
argument_list|)
expr_stmt|;
name|ForkSerializer
operator|.
name|serialize
argument_list|(
name|output
argument_list|,
name|message
argument_list|)
expr_stmt|;
name|output
operator|.
name|flush
argument_list|()
expr_stmt|;
name|readResponseType
argument_list|()
expr_stmt|;
try|try
block|{
return|return
name|ForkSerializer
operator|.
name|deserialize
argument_list|(
name|input
argument_list|,
name|loader
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOExceptionWithCause
argument_list|(
literal|"Unable to read echo response"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
specifier|synchronized
name|void
name|close
parameter_list|()
block|{
try|try
block|{
name|output
operator|.
name|close
argument_list|()
expr_stmt|;
name|input
operator|.
name|close
argument_list|()
expr_stmt|;
name|error
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ignore
parameter_list|)
block|{         }
name|process
operator|.
name|destroy
argument_list|()
expr_stmt|;
name|delete
argument_list|(
name|directory
argument_list|)
expr_stmt|;
block|}
specifier|private
name|byte
name|readResponseType
parameter_list|()
throws|throws
name|IOException
block|{
while|while
condition|(
literal|true
condition|)
block|{
name|consumeErrors
argument_list|()
expr_stmt|;
name|int
name|type
init|=
name|input
operator|.
name|read
argument_list|()
decl_stmt|;
if|if
condition|(
name|type
operator|==
operator|-
literal|1
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unexpected end of stream encountered"
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
name|type
operator|==
name|ForkServer
operator|.
name|FIND_RESOURCE
condition|)
block|{
name|sendResource
argument_list|(
name|input
operator|.
name|readUTF
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|type
operator|==
name|ForkServer
operator|.
name|FIND_RESOURCES
condition|)
block|{
name|sendResources
argument_list|(
name|input
operator|.
name|readUTF
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
return|return
operator|(
name|byte
operator|)
name|type
return|;
block|}
block|}
block|}
comment|/**      * Sends the named resource to the forked server process over the      * stdin/out communication channel. The resource stream is preceded      * with a boolean<code>true</code> value if the resource was found,      * otherwise just a boolean<code>false</code> value is written.      *      * @param name resource name      * @throws IOException if the resource could not be sent      */
specifier|private
name|void
name|sendResource
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|IOException
block|{
name|InputStream
name|stream
init|=
name|loader
operator|.
name|getResourceAsStream
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|stream
operator|!=
literal|null
condition|)
block|{
name|output
operator|.
name|writeBoolean
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|writeAndCloseStream
argument_list|(
name|stream
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|output
operator|.
name|writeBoolean
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
name|output
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
comment|/**      * Sends all the named resources to the forked server process over the      * stdin/out communication channel. Each resource stream is preceded      * with a boolean<code>true</code> value, and a single boolean      *<code>false</code> value is written when no longer resources      * are available.      *      * @param name resource name      * @throws IOException if the resources could not be sent      */
specifier|private
name|void
name|sendResources
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|IOException
block|{
name|Enumeration
argument_list|<
name|URL
argument_list|>
name|resources
init|=
name|loader
operator|.
name|getResources
argument_list|(
name|name
argument_list|)
decl_stmt|;
while|while
condition|(
name|resources
operator|.
name|hasMoreElements
argument_list|()
condition|)
block|{
name|output
operator|.
name|writeBoolean
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|writeAndCloseStream
argument_list|(
name|resources
operator|.
name|nextElement
argument_list|()
operator|.
name|openStream
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|output
operator|.
name|writeBoolean
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|output
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
comment|/**      * Sends the given byte stream to the forked server process over the      * stdin/out communication channel. The stream is sent in chunks of      * less than 64kB, each preceded by a short value that indicates the      * length of the following chunk. A zero short value is sent at the      * end to signify the end of the stream.      *<p>      * The stream is guaranteed to be closed by this method, regardless of      * the way it returns.      *      * @param stream the stream to be sent      * @throws IOException if the stream could not be sent      */
specifier|private
name|void
name|writeAndCloseStream
parameter_list|(
name|InputStream
name|stream
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|byte
index|[]
name|buffer
init|=
operator|new
name|byte
index|[
literal|0xffff
index|]
decl_stmt|;
name|int
name|n
decl_stmt|;
while|while
condition|(
operator|(
name|n
operator|=
name|stream
operator|.
name|read
argument_list|(
name|buffer
argument_list|)
operator|)
operator|!=
operator|-
literal|1
condition|)
block|{
name|output
operator|.
name|writeShort
argument_list|(
name|n
argument_list|)
expr_stmt|;
name|output
operator|.
name|write
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
name|n
argument_list|)
expr_stmt|;
block|}
name|output
operator|.
name|writeShort
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|stream
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|consumeErrors
parameter_list|()
throws|throws
name|IOException
block|{
name|int
name|n
decl_stmt|;
while|while
condition|(
operator|(
name|n
operator|=
name|error
operator|.
name|available
argument_list|()
operator|)
operator|>
literal|0
condition|)
block|{
name|byte
index|[]
name|b
init|=
operator|new
name|byte
index|[
name|n
index|]
decl_stmt|;
name|n
operator|=
name|error
operator|.
name|read
argument_list|(
name|b
argument_list|)
expr_stmt|;
if|if
condition|(
name|n
operator|>
literal|0
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|write
argument_list|(
name|b
argument_list|,
literal|0
argument_list|,
name|n
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Recursively deletes the given file or directory.      *      * @param file file or directory      */
specifier|private
name|void
name|delete
parameter_list|(
name|File
name|file
parameter_list|)
block|{
name|File
index|[]
name|children
init|=
name|file
operator|.
name|listFiles
argument_list|()
decl_stmt|;
if|if
condition|(
name|children
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|File
name|child
range|:
name|children
control|)
block|{
name|delete
argument_list|(
name|child
argument_list|)
expr_stmt|;
block|}
block|}
name|file
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

