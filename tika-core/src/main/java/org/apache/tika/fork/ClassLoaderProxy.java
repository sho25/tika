begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|fork
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_class
class|class
name|ClassLoaderProxy
extends|extends
name|ClassLoader
implements|implements
name|ForkProxy
block|{
comment|/** Serial version UID */
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
operator|-
literal|7303109260448540420L
decl_stmt|;
comment|/**      * Names of resources that could not be found. Used to avoid repeated      * lookup of commonly accessed, but often not present, resources like      *<code>META-INF/services/javax.xml.parsers.SAXParserFactory</code>.      */
specifier|private
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|notFound
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|int
name|resource
decl_stmt|;
specifier|private
specifier|transient
name|DataInputStream
name|input
decl_stmt|;
specifier|private
specifier|transient
name|DataOutputStream
name|output
decl_stmt|;
specifier|public
name|ClassLoaderProxy
parameter_list|(
name|int
name|resource
parameter_list|)
block|{
name|this
operator|.
name|resource
operator|=
name|resource
expr_stmt|;
block|}
specifier|public
name|void
name|init
parameter_list|(
name|DataInputStream
name|input
parameter_list|,
name|DataOutputStream
name|output
parameter_list|)
block|{
name|this
operator|.
name|input
operator|=
name|input
expr_stmt|;
name|this
operator|.
name|output
operator|=
name|output
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
specifier|synchronized
name|URL
name|findResource
parameter_list|(
name|String
name|name
parameter_list|)
block|{
if|if
condition|(
name|notFound
operator|.
name|contains
argument_list|(
name|name
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
try|try
block|{
comment|// Send a request to load the resource data
name|output
operator|.
name|write
argument_list|(
name|ForkServer
operator|.
name|RESOURCE
argument_list|)
expr_stmt|;
name|output
operator|.
name|write
argument_list|(
name|resource
argument_list|)
expr_stmt|;
name|output
operator|.
name|write
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|output
operator|.
name|writeUTF
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|output
operator|.
name|flush
argument_list|()
expr_stmt|;
comment|// Receive the response
if|if
condition|(
name|input
operator|.
name|readBoolean
argument_list|()
condition|)
block|{
return|return
name|MemoryURLStreamHandler
operator|.
name|createURL
argument_list|(
name|readStream
argument_list|()
argument_list|)
return|;
block|}
else|else
block|{
name|notFound
operator|.
name|add
argument_list|(
name|name
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
block|}
annotation|@
name|Override
specifier|protected
specifier|synchronized
name|Enumeration
argument_list|<
name|URL
argument_list|>
name|findResources
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Send a request to load the resources
name|output
operator|.
name|write
argument_list|(
name|ForkServer
operator|.
name|RESOURCE
argument_list|)
expr_stmt|;
name|output
operator|.
name|write
argument_list|(
name|resource
argument_list|)
expr_stmt|;
name|output
operator|.
name|write
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|output
operator|.
name|writeUTF
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|output
operator|.
name|flush
argument_list|()
expr_stmt|;
comment|// Receive the response
name|List
argument_list|<
name|URL
argument_list|>
name|resources
init|=
operator|new
name|ArrayList
argument_list|<
name|URL
argument_list|>
argument_list|()
decl_stmt|;
while|while
condition|(
name|input
operator|.
name|readBoolean
argument_list|()
condition|)
block|{
name|resources
operator|.
name|add
argument_list|(
name|MemoryURLStreamHandler
operator|.
name|createURL
argument_list|(
name|readStream
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|Collections
operator|.
name|enumeration
argument_list|(
name|resources
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|protected
specifier|synchronized
name|Class
argument_list|<
name|?
argument_list|>
name|findClass
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|ClassNotFoundException
block|{
try|try
block|{
comment|// Send a request to load the class data
name|output
operator|.
name|write
argument_list|(
name|ForkServer
operator|.
name|RESOURCE
argument_list|)
expr_stmt|;
name|output
operator|.
name|write
argument_list|(
name|resource
argument_list|)
expr_stmt|;
name|output
operator|.
name|write
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|output
operator|.
name|writeUTF
argument_list|(
name|name
operator|.
name|replace
argument_list|(
literal|'.'
argument_list|,
literal|'/'
argument_list|)
operator|+
literal|".class"
argument_list|)
expr_stmt|;
name|output
operator|.
name|flush
argument_list|()
expr_stmt|;
comment|// Receive the response
if|if
condition|(
name|input
operator|.
name|readBoolean
argument_list|()
condition|)
block|{
name|byte
index|[]
name|data
init|=
name|readStream
argument_list|()
decl_stmt|;
return|return
name|defineClass
argument_list|(
name|name
argument_list|,
name|data
argument_list|,
literal|0
argument_list|,
name|data
operator|.
name|length
argument_list|)
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|ClassNotFoundException
argument_list|(
literal|"Unable to find class "
operator|+
name|name
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ClassNotFoundException
argument_list|(
literal|"Unable to load class "
operator|+
name|name
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
name|byte
index|[]
name|readStream
parameter_list|()
throws|throws
name|IOException
block|{
name|ByteArrayOutputStream
name|stream
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|byte
index|[]
name|buffer
init|=
operator|new
name|byte
index|[
literal|0xffff
index|]
decl_stmt|;
name|int
name|n
decl_stmt|;
while|while
condition|(
operator|(
name|n
operator|=
name|input
operator|.
name|readUnsignedShort
argument_list|()
operator|)
operator|>
literal|0
condition|)
block|{
name|input
operator|.
name|readFully
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
name|n
argument_list|)
expr_stmt|;
name|stream
operator|.
name|write
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
name|n
argument_list|)
expr_stmt|;
block|}
return|return
name|stream
operator|.
name|toByteArray
argument_list|()
return|;
block|}
block|}
end_class

end_unit

