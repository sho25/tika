begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|fork
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|Attributes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|ContentHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|Locator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_class
class|class
name|ContentHandlerProxy
implements|implements
name|ContentHandler
implements|,
name|ForkProxy
block|{
specifier|public
specifier|static
specifier|final
name|int
name|START_DOCUMENT
init|=
literal|1
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|END_DOCUMENT
init|=
literal|2
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|START_PREFIX_MAPPING
init|=
literal|3
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|END_PREFIX_MAPPING
init|=
literal|4
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|START_ELEMENT
init|=
literal|5
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|END_ELEMENT
init|=
literal|6
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|CHARACTERS
init|=
literal|7
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|IGNORABLE_WHITESPACE
init|=
literal|8
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|PROCESSING_INSTRUCTION
init|=
literal|9
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|SKIPPED_ENTITY
init|=
literal|10
decl_stmt|;
comment|/** Serial version UID */
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|737511106054617524L
decl_stmt|;
specifier|private
specifier|final
name|int
name|resource
decl_stmt|;
specifier|private
specifier|transient
name|DataOutputStream
name|output
decl_stmt|;
specifier|public
name|ContentHandlerProxy
parameter_list|(
name|int
name|resource
parameter_list|)
block|{
name|this
operator|.
name|resource
operator|=
name|resource
expr_stmt|;
block|}
specifier|public
name|void
name|init
parameter_list|(
name|DataInputStream
name|input
parameter_list|,
name|DataOutputStream
name|output
parameter_list|)
block|{
name|this
operator|.
name|output
operator|=
name|output
expr_stmt|;
block|}
specifier|private
name|void
name|sendRequest
parameter_list|(
name|int
name|type
parameter_list|)
throws|throws
name|SAXException
block|{
try|try
block|{
name|output
operator|.
name|writeByte
argument_list|(
name|ForkServer
operator|.
name|RESOURCE
argument_list|)
expr_stmt|;
name|output
operator|.
name|writeByte
argument_list|(
name|resource
argument_list|)
expr_stmt|;
name|output
operator|.
name|writeByte
argument_list|(
name|type
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SAXException
argument_list|(
literal|"Unexpected fork proxy problem"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
name|void
name|sendString
parameter_list|(
name|String
name|string
parameter_list|)
throws|throws
name|SAXException
block|{
try|try
block|{
if|if
condition|(
name|string
operator|!=
literal|null
condition|)
block|{
name|output
operator|.
name|writeBoolean
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|output
operator|.
name|writeUTF
argument_list|(
name|string
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|output
operator|.
name|writeBoolean
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SAXException
argument_list|(
literal|"Unexpected fork proxy problem"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
name|void
name|sendCharacters
parameter_list|(
name|char
index|[]
name|ch
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|length
parameter_list|)
throws|throws
name|SAXException
block|{
try|try
block|{
name|output
operator|.
name|writeInt
argument_list|(
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
name|i
operator|++
control|)
block|{
name|output
operator|.
name|writeChar
argument_list|(
name|ch
index|[
name|start
operator|+
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SAXException
argument_list|(
literal|"Unexpected fork proxy problem"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
name|void
name|doneSending
parameter_list|()
throws|throws
name|SAXException
block|{
try|try
block|{
name|output
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SAXException
argument_list|(
literal|"Unexpected fork proxy problem"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|void
name|setDocumentLocator
parameter_list|(
name|Locator
name|locator
parameter_list|)
block|{
comment|// skip
block|}
specifier|public
name|void
name|startDocument
parameter_list|()
throws|throws
name|SAXException
block|{
name|sendRequest
argument_list|(
name|START_DOCUMENT
argument_list|)
expr_stmt|;
name|doneSending
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|endDocument
parameter_list|()
throws|throws
name|SAXException
block|{
name|sendRequest
argument_list|(
name|END_DOCUMENT
argument_list|)
expr_stmt|;
name|doneSending
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|startPrefixMapping
parameter_list|(
name|String
name|prefix
parameter_list|,
name|String
name|uri
parameter_list|)
throws|throws
name|SAXException
block|{
name|sendRequest
argument_list|(
name|START_PREFIX_MAPPING
argument_list|)
expr_stmt|;
name|sendString
argument_list|(
name|prefix
argument_list|)
expr_stmt|;
name|sendString
argument_list|(
name|uri
argument_list|)
expr_stmt|;
name|doneSending
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|endPrefixMapping
parameter_list|(
name|String
name|prefix
parameter_list|)
throws|throws
name|SAXException
block|{
name|sendRequest
argument_list|(
name|END_PREFIX_MAPPING
argument_list|)
expr_stmt|;
name|sendString
argument_list|(
name|prefix
argument_list|)
expr_stmt|;
name|doneSending
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|startElement
parameter_list|(
name|String
name|uri
parameter_list|,
name|String
name|localName
parameter_list|,
name|String
name|qName
parameter_list|,
name|Attributes
name|atts
parameter_list|)
throws|throws
name|SAXException
block|{
name|sendRequest
argument_list|(
name|START_ELEMENT
argument_list|)
expr_stmt|;
name|sendString
argument_list|(
name|uri
argument_list|)
expr_stmt|;
name|sendString
argument_list|(
name|localName
argument_list|)
expr_stmt|;
name|sendString
argument_list|(
name|qName
argument_list|)
expr_stmt|;
name|int
name|n
init|=
operator|-
literal|1
decl_stmt|;
if|if
condition|(
name|atts
operator|!=
literal|null
condition|)
block|{
name|n
operator|=
name|atts
operator|.
name|getLength
argument_list|()
expr_stmt|;
block|}
try|try
block|{
name|output
operator|.
name|writeInt
argument_list|(
name|n
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SAXException
argument_list|(
literal|"Unexpected fork proxy problem"
argument_list|,
name|e
argument_list|)
throw|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|n
condition|;
name|i
operator|++
control|)
block|{
name|sendString
argument_list|(
name|atts
operator|.
name|getURI
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|sendString
argument_list|(
name|atts
operator|.
name|getLocalName
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|sendString
argument_list|(
name|atts
operator|.
name|getQName
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|sendString
argument_list|(
name|atts
operator|.
name|getType
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|sendString
argument_list|(
name|atts
operator|.
name|getValue
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|doneSending
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|endElement
parameter_list|(
name|String
name|uri
parameter_list|,
name|String
name|localName
parameter_list|,
name|String
name|qName
parameter_list|)
throws|throws
name|SAXException
block|{
name|sendRequest
argument_list|(
name|END_ELEMENT
argument_list|)
expr_stmt|;
name|sendString
argument_list|(
name|uri
argument_list|)
expr_stmt|;
name|sendString
argument_list|(
name|localName
argument_list|)
expr_stmt|;
name|sendString
argument_list|(
name|qName
argument_list|)
expr_stmt|;
name|doneSending
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|characters
parameter_list|(
name|char
index|[]
name|ch
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|length
parameter_list|)
throws|throws
name|SAXException
block|{
name|sendRequest
argument_list|(
name|CHARACTERS
argument_list|)
expr_stmt|;
name|sendCharacters
argument_list|(
name|ch
argument_list|,
name|start
argument_list|,
name|length
argument_list|)
expr_stmt|;
name|doneSending
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|ignorableWhitespace
parameter_list|(
name|char
index|[]
name|ch
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|length
parameter_list|)
throws|throws
name|SAXException
block|{
name|sendRequest
argument_list|(
name|IGNORABLE_WHITESPACE
argument_list|)
expr_stmt|;
name|sendCharacters
argument_list|(
name|ch
argument_list|,
name|start
argument_list|,
name|length
argument_list|)
expr_stmt|;
name|doneSending
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|processingInstruction
parameter_list|(
name|String
name|target
parameter_list|,
name|String
name|data
parameter_list|)
throws|throws
name|SAXException
block|{
name|sendRequest
argument_list|(
name|PROCESSING_INSTRUCTION
argument_list|)
expr_stmt|;
name|sendString
argument_list|(
name|target
argument_list|)
expr_stmt|;
name|sendString
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|doneSending
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|skippedEntity
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|SAXException
block|{
name|sendRequest
argument_list|(
name|SKIPPED_ENTITY
argument_list|)
expr_stmt|;
name|sendString
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|doneSending
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

