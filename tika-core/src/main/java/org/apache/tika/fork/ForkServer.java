begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|fork
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_class
class|class
name|ForkServer
extends|extends
name|ClassLoader
block|{
specifier|public
specifier|static
specifier|final
name|byte
name|ERROR
init|=
operator|-
literal|1
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|byte
name|REPLY
init|=
literal|0
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|byte
name|CALL
init|=
literal|1
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|byte
name|RESOURCE
init|=
literal|2
decl_stmt|;
comment|/**      * Starts a forked server process.      *       * @param args command line arguments, ignored      * @throws Exception if the server could not be started      */
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
name|ForkServer
name|server
init|=
operator|new
name|ForkServer
argument_list|(
name|System
operator|.
name|in
argument_list|,
name|System
operator|.
name|out
argument_list|)
decl_stmt|;
comment|// Set the server instance as the context class loader
comment|// to make classes from the parent process available
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|setContextClassLoader
argument_list|(
name|server
argument_list|)
expr_stmt|;
comment|// Redirect standard input and output streams to prevent
comment|// stray code from interfering with the message stream
name|System
operator|.
name|setIn
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
operator|new
name|byte
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|System
operator|.
name|setOut
argument_list|(
name|System
operator|.
name|err
argument_list|)
expr_stmt|;
comment|// Start processing request
name|server
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
specifier|private
specifier|final
name|DataInputStream
name|input
decl_stmt|;
specifier|private
specifier|final
name|DataOutputStream
name|output
decl_stmt|;
comment|/**      * Sets up a forked server instance using the given stdin/out      * communication channel.      *      * @param input input stream for reading from the parent process      * @param output output stream for writing to the parent process      * @throws IOException if the server instance could not be created      */
specifier|public
name|ForkServer
parameter_list|(
name|InputStream
name|input
parameter_list|,
name|OutputStream
name|output
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|input
operator|=
operator|new
name|DataInputStream
argument_list|(
name|input
argument_list|)
expr_stmt|;
name|this
operator|.
name|output
operator|=
operator|new
name|DataOutputStream
argument_list|(
name|output
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|run
parameter_list|()
throws|throws
name|IOException
block|{
name|int
name|b
decl_stmt|;
while|while
condition|(
operator|(
name|b
operator|=
name|input
operator|.
name|read
argument_list|()
operator|)
operator|!=
operator|-
literal|1
condition|)
block|{
if|if
condition|(
name|b
operator|==
name|CALL
condition|)
block|{
try|try
block|{
name|call
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|output
operator|.
name|write
argument_list|(
name|ERROR
argument_list|)
expr_stmt|;
name|ForkSerializer
operator|.
name|serialize
argument_list|(
name|output
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|output
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|call
parameter_list|()
throws|throws
name|Exception
block|{
name|ClassLoader
name|loader
init|=
operator|(
name|ClassLoader
operator|)
name|ForkSerializer
operator|.
name|deserialize
argument_list|(
name|input
argument_list|,
name|output
argument_list|,
name|ForkServer
operator|.
name|class
operator|.
name|getClassLoader
argument_list|()
argument_list|)
decl_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Loader loaded"
argument_list|)
expr_stmt|;
name|Object
name|object
init|=
name|ForkSerializer
operator|.
name|deserialize
argument_list|(
name|input
argument_list|,
name|output
argument_list|,
name|loader
argument_list|)
decl_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Object loaded"
argument_list|)
expr_stmt|;
name|Method
name|method
init|=
name|getMethod
argument_list|(
name|object
argument_list|,
name|input
operator|.
name|readUTF
argument_list|()
argument_list|)
decl_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Method loaded"
argument_list|)
expr_stmt|;
name|int
name|n
init|=
name|method
operator|.
name|getParameterTypes
argument_list|()
operator|.
name|length
decl_stmt|;
name|Object
index|[]
name|args
init|=
operator|new
name|Object
index|[
name|n
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|n
condition|;
name|i
operator|++
control|)
block|{
name|args
index|[
name|i
index|]
operator|=
name|ForkSerializer
operator|.
name|deserialize
argument_list|(
name|input
argument_list|,
name|output
argument_list|,
name|loader
argument_list|)
expr_stmt|;
block|}
name|method
operator|.
name|invoke
argument_list|(
name|object
argument_list|,
name|args
argument_list|)
expr_stmt|;
name|output
operator|.
name|write
argument_list|(
name|REPLY
argument_list|)
expr_stmt|;
name|output
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
specifier|private
name|Method
name|getMethod
parameter_list|(
name|Object
name|object
parameter_list|,
name|String
name|name
parameter_list|)
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|klass
init|=
name|object
operator|.
name|getClass
argument_list|()
decl_stmt|;
for|for
control|(
name|Method
name|method
range|:
name|klass
operator|.
name|getMethods
argument_list|()
control|)
block|{
if|if
condition|(
name|name
operator|.
name|equals
argument_list|(
name|method
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|method
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

