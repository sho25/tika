begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|fork
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_class
class|class
name|ForkServer
extends|extends
name|ClassLoader
block|{
specifier|public
specifier|static
specifier|final
name|byte
name|ERROR
init|=
operator|-
literal|1
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|byte
name|REPLY
init|=
literal|0
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|byte
name|ECHO
init|=
literal|1
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|byte
name|FIND_RESOURCE
init|=
literal|2
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|byte
name|FIND_RESOURCES
init|=
literal|3
decl_stmt|;
comment|/**      * Starts a forked server process.      *       * @param args command line arguments, ignored      * @throws Exception if the server could not be started      */
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
name|ForkServer
name|server
init|=
operator|new
name|ForkServer
argument_list|(
name|System
operator|.
name|in
argument_list|,
name|System
operator|.
name|out
argument_list|)
decl_stmt|;
comment|// Set the server instance as the context class loader
comment|// to make classes from the parent process available
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|setContextClassLoader
argument_list|(
name|server
argument_list|)
expr_stmt|;
comment|// Redirect standard input and output streams to prevent
comment|// stray code from interfering with the message stream
name|System
operator|.
name|setIn
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
operator|new
name|byte
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|System
operator|.
name|setOut
argument_list|(
name|System
operator|.
name|err
argument_list|)
expr_stmt|;
comment|// Start processing request
name|server
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
specifier|private
specifier|final
name|DataInputStream
name|input
decl_stmt|;
specifier|private
specifier|final
name|DataOutputStream
name|output
decl_stmt|;
specifier|private
name|int
name|count
init|=
literal|0
decl_stmt|;
comment|/**      * Sets up a forked server instance using the given stdin/out      * communication channel.      *      * @param input input stream for reading from the parent process      * @param output output stream for writing to the parent process      * @throws IOException if the server instance could not be created      */
specifier|public
name|ForkServer
parameter_list|(
name|InputStream
name|input
parameter_list|,
name|OutputStream
name|output
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|input
operator|=
operator|new
name|DataInputStream
argument_list|(
name|input
argument_list|)
expr_stmt|;
name|this
operator|.
name|output
operator|=
operator|new
name|DataOutputStream
argument_list|(
name|output
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|run
parameter_list|()
throws|throws
name|IOException
block|{
name|int
name|b
decl_stmt|;
while|while
condition|(
operator|(
name|b
operator|=
name|input
operator|.
name|read
argument_list|()
operator|)
operator|!=
operator|-
literal|1
condition|)
block|{
if|if
condition|(
name|b
operator|==
name|ECHO
condition|)
block|{
try|try
block|{
name|Object
name|message
init|=
name|ForkSerializer
operator|.
name|deserialize
argument_list|(
name|input
argument_list|,
name|this
argument_list|)
decl_stmt|;
name|output
operator|.
name|write
argument_list|(
name|ECHO
argument_list|)
expr_stmt|;
name|ForkSerializer
operator|.
name|serialize
argument_list|(
name|output
argument_list|,
literal|"echo: "
operator|+
name|message
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
name|output
operator|.
name|write
argument_list|(
name|ERROR
argument_list|)
expr_stmt|;
name|ForkSerializer
operator|.
name|serialize
argument_list|(
name|output
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|output
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|protected
specifier|synchronized
name|URL
name|findResource
parameter_list|(
name|String
name|name
parameter_list|)
block|{
try|try
block|{
comment|// Send a request to load the resource data
name|output
operator|.
name|write
argument_list|(
name|FIND_RESOURCE
argument_list|)
expr_stmt|;
name|output
operator|.
name|writeUTF
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|output
operator|.
name|flush
argument_list|()
expr_stmt|;
comment|// Receive the response
if|if
condition|(
name|input
operator|.
name|readBoolean
argument_list|()
condition|)
block|{
return|return
name|readStreamToFile
argument_list|()
operator|.
name|toURI
argument_list|()
operator|.
name|toURL
argument_list|()
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
block|}
annotation|@
name|Override
specifier|protected
specifier|synchronized
name|Enumeration
argument_list|<
name|URL
argument_list|>
name|findResources
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Send a request to load the resources
name|output
operator|.
name|write
argument_list|(
name|FIND_RESOURCE
argument_list|)
expr_stmt|;
name|output
operator|.
name|writeUTF
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|output
operator|.
name|flush
argument_list|()
expr_stmt|;
comment|// Receive the response
name|List
argument_list|<
name|URL
argument_list|>
name|resources
init|=
operator|new
name|ArrayList
argument_list|<
name|URL
argument_list|>
argument_list|()
decl_stmt|;
while|while
condition|(
name|input
operator|.
name|readBoolean
argument_list|()
condition|)
block|{
name|resources
operator|.
name|add
argument_list|(
name|readStreamToFile
argument_list|()
operator|.
name|toURI
argument_list|()
operator|.
name|toURL
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|Collections
operator|.
name|enumeration
argument_list|(
name|resources
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|protected
specifier|synchronized
name|Class
argument_list|<
name|?
argument_list|>
name|findClass
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|ClassNotFoundException
block|{
try|try
block|{
comment|// Send a request to load the class data
name|output
operator|.
name|write
argument_list|(
name|FIND_RESOURCE
argument_list|)
expr_stmt|;
name|output
operator|.
name|writeUTF
argument_list|(
name|name
operator|.
name|replace
argument_list|(
literal|'.'
argument_list|,
literal|'/'
argument_list|)
operator|+
literal|".class"
argument_list|)
expr_stmt|;
name|output
operator|.
name|flush
argument_list|()
expr_stmt|;
comment|// Receive the response
if|if
condition|(
name|input
operator|.
name|readBoolean
argument_list|()
condition|)
block|{
name|byte
index|[]
name|data
init|=
name|readStreamToMemory
argument_list|()
decl_stmt|;
return|return
name|defineClass
argument_list|(
name|name
argument_list|,
name|data
argument_list|,
literal|0
argument_list|,
name|data
operator|.
name|length
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|ClassNotFoundException
argument_list|(
literal|"Unable load class "
operator|+
name|name
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
name|byte
index|[]
name|readStreamToMemory
parameter_list|()
throws|throws
name|IOException
block|{
name|ByteArrayOutputStream
name|stream
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|byte
index|[]
name|buffer
init|=
operator|new
name|byte
index|[
literal|0xffff
index|]
decl_stmt|;
name|int
name|n
decl_stmt|;
while|while
condition|(
operator|(
name|n
operator|=
name|input
operator|.
name|readUnsignedShort
argument_list|()
operator|)
operator|>
literal|0
condition|)
block|{
name|input
operator|.
name|readFully
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
name|n
argument_list|)
expr_stmt|;
name|stream
operator|.
name|write
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
name|n
argument_list|)
expr_stmt|;
block|}
return|return
name|stream
operator|.
name|toByteArray
argument_list|()
return|;
block|}
specifier|private
name|File
name|readStreamToFile
parameter_list|()
throws|throws
name|IOException
block|{
name|File
name|file
init|=
operator|new
name|File
argument_list|(
literal|"resource-"
operator|+
name|count
operator|++
operator|+
literal|".bin"
argument_list|)
decl_stmt|;
name|OutputStream
name|stream
init|=
operator|new
name|FileOutputStream
argument_list|(
name|file
argument_list|)
decl_stmt|;
try|try
block|{
name|byte
index|[]
name|buffer
init|=
operator|new
name|byte
index|[
literal|0xffff
index|]
decl_stmt|;
name|int
name|n
decl_stmt|;
while|while
condition|(
operator|(
name|n
operator|=
name|input
operator|.
name|readUnsignedShort
argument_list|()
operator|)
operator|>
literal|0
condition|)
block|{
name|input
operator|.
name|readFully
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
name|n
argument_list|)
expr_stmt|;
name|stream
operator|.
name|write
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
name|n
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|stream
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
return|return
name|file
return|;
block|}
block|}
end_class

end_unit

