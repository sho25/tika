begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|language
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * Identifier of the language that best matches a given content profile.  * The content profile is compared to generic language profiles based on  * material from various sources.  *  * @since Apache Tika 0.5  * @see<a href="http://www.iccs.inf.ed.ac.uk/~pkoehn/publications/europarl/">  *      Europarl: A Parallel Corpus for Statistical Machine Translation</a>  * @see<a href="http://www.w3.org/WAI/ER/IG/ert/iso639.htm">  *      ISO 639 Language Codes</a>  */
end_comment

begin_class
specifier|public
class|class
name|LanguageIdentifier
block|{
comment|/**      * The available language profiles.      */
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|LanguageProfile
argument_list|>
name|PROFILES
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|LanguageProfile
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|static
name|void
name|addProfile
parameter_list|(
name|String
name|language
parameter_list|)
block|{
try|try
block|{
name|LanguageProfile
name|profile
init|=
operator|new
name|LanguageProfile
argument_list|()
decl_stmt|;
name|InputStream
name|stream
init|=
name|LanguageIdentifier
operator|.
name|class
operator|.
name|getResourceAsStream
argument_list|(
name|language
operator|+
literal|".ngp"
argument_list|)
decl_stmt|;
try|try
block|{
name|BufferedReader
name|reader
init|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|stream
argument_list|,
literal|"UTF-8"
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|line
init|=
name|reader
operator|.
name|readLine
argument_list|()
decl_stmt|;
while|while
condition|(
name|line
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|line
operator|.
name|length
argument_list|()
operator|>
literal|0
operator|&&
operator|!
name|line
operator|.
name|startsWith
argument_list|(
literal|"#"
argument_list|)
condition|)
block|{
name|int
name|space
init|=
name|line
operator|.
name|indexOf
argument_list|(
literal|' '
argument_list|)
decl_stmt|;
name|profile
operator|.
name|add
argument_list|(
name|line
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|space
argument_list|)
argument_list|,
name|Long
operator|.
name|parseLong
argument_list|(
name|line
operator|.
name|substring
argument_list|(
name|space
operator|+
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|line
operator|=
name|reader
operator|.
name|readLine
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|stream
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|PROFILES
operator|.
name|put
argument_list|(
name|language
argument_list|,
name|profile
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
comment|// Failed to load this language profile. Log the problem?
block|}
block|}
static|static
block|{
name|addProfile
argument_list|(
literal|"da"
argument_list|)
expr_stmt|;
comment|// Danish
name|addProfile
argument_list|(
literal|"de"
argument_list|)
expr_stmt|;
comment|// German
name|addProfile
argument_list|(
literal|"ee"
argument_list|)
expr_stmt|;
name|addProfile
argument_list|(
literal|"el"
argument_list|)
expr_stmt|;
comment|// Greek
name|addProfile
argument_list|(
literal|"en"
argument_list|)
expr_stmt|;
comment|// English
name|addProfile
argument_list|(
literal|"es"
argument_list|)
expr_stmt|;
comment|// Spanish
name|addProfile
argument_list|(
literal|"fi"
argument_list|)
expr_stmt|;
comment|// Finnish
name|addProfile
argument_list|(
literal|"fr"
argument_list|)
expr_stmt|;
comment|// French
name|addProfile
argument_list|(
literal|"hu"
argument_list|)
expr_stmt|;
comment|// Hungarian
name|addProfile
argument_list|(
literal|"is"
argument_list|)
expr_stmt|;
comment|// Icelandic
name|addProfile
argument_list|(
literal|"it"
argument_list|)
expr_stmt|;
comment|// Italian
name|addProfile
argument_list|(
literal|"nl"
argument_list|)
expr_stmt|;
comment|// Dutch
name|addProfile
argument_list|(
literal|"no"
argument_list|)
expr_stmt|;
comment|// Norwegian
name|addProfile
argument_list|(
literal|"pl"
argument_list|)
expr_stmt|;
comment|// Polish
name|addProfile
argument_list|(
literal|"pt"
argument_list|)
expr_stmt|;
comment|// Portuguese
name|addProfile
argument_list|(
literal|"ru"
argument_list|)
expr_stmt|;
comment|// Russian
name|addProfile
argument_list|(
literal|"sv"
argument_list|)
expr_stmt|;
comment|// Swedish
name|addProfile
argument_list|(
literal|"th"
argument_list|)
expr_stmt|;
comment|// Thai
block|}
specifier|private
specifier|final
name|String
name|language
decl_stmt|;
specifier|private
specifier|final
name|double
name|distance
decl_stmt|;
specifier|public
name|LanguageIdentifier
parameter_list|(
name|LanguageProfile
name|profile
parameter_list|)
block|{
name|String
name|minLanguage
init|=
literal|"unknown"
decl_stmt|;
name|double
name|minDistance
init|=
literal|1.0
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|LanguageProfile
argument_list|>
name|entry
range|:
name|PROFILES
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|double
name|distance
init|=
name|profile
operator|.
name|distance
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|distance
operator|<
name|minDistance
condition|)
block|{
name|minDistance
operator|=
name|distance
expr_stmt|;
name|minLanguage
operator|=
name|entry
operator|.
name|getKey
argument_list|()
expr_stmt|;
block|}
block|}
name|this
operator|.
name|language
operator|=
name|minLanguage
expr_stmt|;
name|this
operator|.
name|distance
operator|=
name|minDistance
expr_stmt|;
block|}
specifier|public
name|LanguageIdentifier
parameter_list|(
name|String
name|content
parameter_list|)
block|{
name|this
argument_list|(
operator|new
name|LanguageProfile
argument_list|(
name|content
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|String
name|getLanguage
parameter_list|()
block|{
return|return
name|language
return|;
block|}
specifier|public
name|boolean
name|isReasonablyCertain
parameter_list|()
block|{
return|return
name|distance
operator|<
literal|0.022
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|language
operator|+
literal|" ("
operator|+
name|distance
operator|+
literal|")"
return|;
block|}
block|}
end_class

end_unit

