begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|language
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|metadata
operator|.
name|Metadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|sax
operator|.
name|BodyContentHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_class
specifier|public
class|class
name|ProfilingHandler
extends|extends
name|BodyContentHandler
block|{
specifier|private
specifier|static
specifier|final
name|long
name|CHECK_INTERVAL
init|=
literal|1000
decl_stmt|;
specifier|private
specifier|final
name|LanguageProfile
name|profile
decl_stmt|;
specifier|private
specifier|final
name|Metadata
name|metadata
decl_stmt|;
specifier|private
name|long
name|nextCheckCount
init|=
name|CHECK_INTERVAL
decl_stmt|;
specifier|private
name|ProfilingHandler
parameter_list|(
name|ProfilingWriter
name|writer
parameter_list|,
name|Metadata
name|metadata
parameter_list|)
block|{
name|super
argument_list|(
name|writer
argument_list|)
expr_stmt|;
name|this
operator|.
name|profile
operator|=
name|writer
operator|.
name|getProfile
argument_list|()
expr_stmt|;
name|this
operator|.
name|metadata
operator|=
name|metadata
expr_stmt|;
block|}
specifier|public
name|ProfilingHandler
parameter_list|(
name|Metadata
name|metadata
parameter_list|)
block|{
name|this
argument_list|(
operator|new
name|ProfilingWriter
argument_list|()
argument_list|,
name|metadata
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|checkAndSetLanguage
parameter_list|()
block|{
name|LanguageIdentifier
name|identifier
init|=
operator|new
name|LanguageIdentifier
argument_list|(
name|profile
argument_list|)
decl_stmt|;
if|if
condition|(
name|identifier
operator|.
name|isReasonablyCertain
argument_list|()
condition|)
block|{
name|metadata
operator|.
name|set
argument_list|(
name|Metadata
operator|.
name|LANGUAGE
argument_list|,
name|identifier
operator|.
name|getLanguage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|characters
parameter_list|(
name|char
index|[]
name|ch
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|length
parameter_list|)
throws|throws
name|SAXException
block|{
name|super
operator|.
name|characters
argument_list|(
name|ch
argument_list|,
name|start
argument_list|,
name|length
argument_list|)
expr_stmt|;
if|if
condition|(
name|profile
operator|.
name|getCount
argument_list|()
operator|>
name|nextCheckCount
condition|)
block|{
name|checkAndSetLanguage
argument_list|()
expr_stmt|;
name|nextCheckCount
operator|=
name|profile
operator|.
name|getCount
argument_list|()
operator|+
name|CHECK_INTERVAL
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|endDocument
parameter_list|()
throws|throws
name|SAXException
block|{
name|super
operator|.
name|endDocument
argument_list|()
expr_stmt|;
name|checkAndSetLanguage
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

