begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|language
package|;
end_package

begin_comment
comment|/**  * NGram entry.  */
end_comment

begin_class
class|class
name|NGramEntry
implements|implements
name|Comparable
argument_list|<
name|NGramEntry
argument_list|>
block|{
comment|/**      * The ngram profile this entry is related to      */
specifier|private
specifier|final
name|NGramProfile
name|profile
decl_stmt|;
comment|/**      * The sequence of characters of the ngram      */
specifier|private
name|CharSequence
name|seq
init|=
literal|null
decl_stmt|;
comment|/**      * The number of occurrences of this ngram in its profile      */
specifier|private
name|int
name|count
init|=
literal|0
decl_stmt|;
comment|/**      * The frequency of this ngram in its profile. Calculated by the      * {@link #calculateFrequency(int)} method.      */
specifier|private
name|float
name|frequency
init|=
literal|0.0F
decl_stmt|;
comment|/**       * Constructs a new NGramEntry      * @param seq is the sequence of characters of the ngram      * @param nGramProfile TODO      */
specifier|public
name|NGramEntry
parameter_list|(
name|NGramProfile
name|nGramProfile
parameter_list|,
name|CharSequence
name|seq
parameter_list|)
block|{
name|this
operator|.
name|profile
operator|=
name|nGramProfile
expr_stmt|;
name|this
operator|.
name|seq
operator|=
name|seq
expr_stmt|;
block|}
comment|/**       * Constructs a new NGramEntry      * @param seq is the sequence of characters of the ngram      * @param count is the number of occurrences of this ngram      * @param nGramProfile TODO      */
specifier|public
name|NGramEntry
parameter_list|(
name|NGramProfile
name|nGramProfile
parameter_list|,
name|String
name|seq
parameter_list|,
name|int
name|count
parameter_list|)
block|{
name|this
operator|.
name|profile
operator|=
name|nGramProfile
expr_stmt|;
name|this
operator|.
name|seq
operator|=
operator|new
name|StringBuffer
argument_list|(
name|seq
argument_list|)
operator|.
name|subSequence
argument_list|(
literal|0
argument_list|,
name|seq
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|count
operator|=
name|count
expr_stmt|;
block|}
comment|/**      * Returns the number of occurrences of this ngram in its profile      * @return the number of occurrences of this ngram in its profile      */
specifier|public
name|int
name|getCount
parameter_list|()
block|{
return|return
name|count
return|;
block|}
comment|/**      * Returns the frequency of this ngram in its profile      * @return the frequency of this ngram in its profile      */
specifier|public
name|float
name|getFrequency
parameter_list|()
block|{
return|return
name|frequency
return|;
block|}
specifier|public
name|void
name|calculateFrequency
parameter_list|(
name|int
name|totalCount
parameter_list|)
block|{
name|frequency
operator|=
operator|(
name|float
operator|)
name|count
operator|/
operator|(
name|float
operator|)
name|totalCount
expr_stmt|;
block|}
comment|/**      * Returns the sequence of characters of this ngram      * @return the sequence of characters of this ngram      */
specifier|public
name|CharSequence
name|getSeq
parameter_list|()
block|{
return|return
name|seq
return|;
block|}
comment|/**      * Returns the size of this ngram      * @return the size of this ngram      */
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|seq
operator|.
name|length
argument_list|()
return|;
block|}
comment|// Inherited JavaDoc
specifier|public
name|int
name|compareTo
parameter_list|(
name|NGramEntry
name|ngram
parameter_list|)
block|{
name|int
name|diff
init|=
name|Float
operator|.
name|compare
argument_list|(
name|ngram
operator|.
name|getFrequency
argument_list|()
argument_list|,
name|frequency
argument_list|)
decl_stmt|;
if|if
condition|(
name|diff
operator|!=
literal|0
condition|)
block|{
return|return
name|diff
return|;
block|}
else|else
block|{
return|return
operator|(
name|toString
argument_list|()
operator|.
name|compareTo
argument_list|(
name|ngram
operator|.
name|toString
argument_list|()
argument_list|)
operator|)
return|;
block|}
block|}
comment|/**      * Increments the number of occurrences of this ngram.      */
specifier|public
name|void
name|inc
parameter_list|()
block|{
name|count
operator|++
expr_stmt|;
block|}
comment|/**      * Returns the profile associated to this ngram      * @return the profile associated to this ngram      */
specifier|public
name|NGramProfile
name|getProfile
parameter_list|()
block|{
return|return
name|profile
return|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"ngram("
operator|+
name|seq
operator|+
literal|","
operator|+
name|count
operator|+
literal|","
operator|+
name|frequency
operator|+
literal|")"
return|;
block|}
comment|// Inherited JavaDoc
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|seq
operator|.
name|hashCode
argument_list|()
return|;
block|}
comment|// Inherited JavaDoc
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
name|NGramEntry
name|ngram
init|=
literal|null
decl_stmt|;
try|try
block|{
name|ngram
operator|=
operator|(
name|NGramEntry
operator|)
name|obj
expr_stmt|;
return|return
name|ngram
operator|.
name|seq
operator|.
name|equals
argument_list|(
name|seq
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
block|}
block|}
end_class

end_unit

