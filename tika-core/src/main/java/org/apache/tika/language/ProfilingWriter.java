begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|language
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Writer
import|;
end_import

begin_comment
comment|/**  * Writer that builds a language profile based on all the written content.  *  * @since Apache Tika 0.5  * @deprecated use {@link org.apache.tika.language.detect.LanguageWriter}  */
end_comment

begin_class
annotation|@
name|Deprecated
specifier|public
class|class
name|ProfilingWriter
extends|extends
name|Writer
block|{
specifier|private
specifier|final
name|LanguageProfile
name|profile
decl_stmt|;
specifier|private
name|char
index|[]
name|buffer
init|=
operator|new
name|char
index|[]
block|{
literal|0
block|,
literal|0
block|,
literal|'_'
block|}
decl_stmt|;
specifier|private
name|int
name|n
init|=
literal|1
decl_stmt|;
specifier|public
name|ProfilingWriter
parameter_list|(
name|LanguageProfile
name|profile
parameter_list|)
block|{
name|this
operator|.
name|profile
operator|=
name|profile
expr_stmt|;
block|}
specifier|public
name|ProfilingWriter
parameter_list|()
block|{
name|this
argument_list|(
operator|new
name|LanguageProfile
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Returns the language profile being built by this writer. Note that      * the returned profile gets updated whenever new characters are written.      * Use the {@link #getLanguage()} method to get the language that best      * matches the current state of the profile.      *      * @return language profile      */
specifier|public
name|LanguageProfile
name|getProfile
parameter_list|()
block|{
return|return
name|profile
return|;
block|}
comment|/**      * Returns the language that best matches the current state of the      * language profile.      *      * @return language that best matches the current profile      */
specifier|public
name|LanguageIdentifier
name|getLanguage
parameter_list|()
block|{
return|return
operator|new
name|LanguageIdentifier
argument_list|(
name|profile
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|char
index|[]
name|cbuf
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|len
condition|;
name|i
operator|++
control|)
block|{
name|char
name|c
init|=
name|Character
operator|.
name|toLowerCase
argument_list|(
name|cbuf
index|[
name|off
operator|+
name|i
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|Character
operator|.
name|isLetter
argument_list|(
name|c
argument_list|)
condition|)
block|{
name|addLetter
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|addSeparator
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|addLetter
parameter_list|(
name|char
name|c
parameter_list|)
block|{
name|System
operator|.
name|arraycopy
argument_list|(
name|buffer
argument_list|,
literal|1
argument_list|,
name|buffer
argument_list|,
literal|0
argument_list|,
name|buffer
operator|.
name|length
operator|-
literal|1
argument_list|)
expr_stmt|;
name|buffer
index|[
name|buffer
operator|.
name|length
operator|-
literal|1
index|]
operator|=
name|c
expr_stmt|;
name|n
operator|++
expr_stmt|;
if|if
condition|(
name|n
operator|>=
name|buffer
operator|.
name|length
condition|)
block|{
name|profile
operator|.
name|add
argument_list|(
operator|new
name|String
argument_list|(
name|buffer
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|addSeparator
parameter_list|()
block|{
name|addLetter
argument_list|(
literal|'_'
argument_list|)
expr_stmt|;
name|n
operator|=
literal|1
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|addSeparator
argument_list|()
expr_stmt|;
block|}
comment|/**      * Ignored.      */
annotation|@
name|Override
specifier|public
name|void
name|flush
parameter_list|()
block|{     }
block|}
end_class

end_unit

