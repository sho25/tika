begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|language
operator|.
name|detect
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_class
specifier|public
class|class
name|LanguageResult
block|{
comment|// A result that indicates no match. Used when no language was detected.
specifier|public
specifier|static
specifier|final
name|LanguageResult
name|NULL
init|=
operator|new
name|LanguageResult
argument_list|(
literal|""
argument_list|,
name|LanguageConfidence
operator|.
name|NONE
argument_list|,
literal|0.0f
argument_list|)
decl_stmt|;
specifier|private
name|String
name|language
decl_stmt|;
specifier|private
name|LanguageConfidence
name|confidence
decl_stmt|;
comment|// rawScore should be a number from 0.0 to 1.0, with higher values implying
comment|// greater confidence.
specifier|private
name|float
name|rawScore
decl_stmt|;
comment|/** 	 *  	 * @param language ISO 639-1 language code (plus optional "-<country code>") 	 * @param rawScore confidence of detector in the result. 	 */
specifier|public
name|LanguageResult
parameter_list|(
name|String
name|language
parameter_list|,
name|LanguageConfidence
name|confidence
parameter_list|,
name|float
name|rawScore
parameter_list|)
block|{
name|this
operator|.
name|language
operator|=
name|language
expr_stmt|;
name|this
operator|.
name|confidence
operator|=
name|confidence
expr_stmt|;
name|this
operator|.
name|rawScore
operator|=
name|rawScore
expr_stmt|;
block|}
specifier|public
name|String
name|getLanguage
parameter_list|()
block|{
return|return
name|language
return|;
block|}
specifier|public
name|float
name|getRawScore
parameter_list|()
block|{
return|return
name|rawScore
return|;
block|}
specifier|public
name|LanguageConfidence
name|getConfidence
parameter_list|()
block|{
return|return
name|confidence
return|;
block|}
specifier|public
name|boolean
name|isReasonablyCertain
parameter_list|()
block|{
return|return
name|confidence
operator|==
name|LanguageConfidence
operator|.
name|HIGH
return|;
block|}
specifier|public
name|boolean
name|isUnknown
parameter_list|()
block|{
return|return
name|confidence
operator|==
name|LanguageConfidence
operator|.
name|NONE
return|;
block|}
comment|/** 	 * Return true if the target language matches the detected language. We consider 	 * it a match if, for the precision requested or detected, it matches. This means: 	 *  	 * target	|	detected	| match? 	 * zh		|	en			| false 	 * zh		|	zh			| true 	 * zh		|	zh-CN		| true 	 * zh-CN	|	zh			| true 	 * zh-CN	|	zh-TW		| false 	 * zh-CN	|	zh-cn		| true (case-insensitive) 	 *  	 * @param language 	 * @return 	 */
specifier|public
name|boolean
name|isLanguage
parameter_list|(
name|String
name|language
parameter_list|)
block|{
name|String
index|[]
name|targetLanguage
init|=
name|language
operator|.
name|split
argument_list|(
literal|"\\-"
argument_list|)
decl_stmt|;
name|String
index|[]
name|resultLanguage
init|=
name|this
operator|.
name|language
operator|.
name|split
argument_list|(
literal|"\\-"
argument_list|)
decl_stmt|;
name|int
name|minLength
init|=
name|Math
operator|.
name|min
argument_list|(
name|targetLanguage
operator|.
name|length
argument_list|,
name|resultLanguage
operator|.
name|length
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|minLength
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|targetLanguage
index|[
name|i
index|]
operator|.
name|equalsIgnoreCase
argument_list|(
name|resultLanguage
index|[
name|i
index|]
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|US
argument_list|,
literal|"%s: %s (%f)"
argument_list|,
name|language
argument_list|,
name|confidence
argument_list|,
name|rawScore
argument_list|)
return|;
block|}
block|}
end_class

end_unit

