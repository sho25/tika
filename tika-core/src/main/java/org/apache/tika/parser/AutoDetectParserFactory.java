begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|config
operator|.
name|TikaConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|exception
operator|.
name|TikaException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Paths
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * Factory for an AutoDetectParser  */
end_comment

begin_class
specifier|public
class|class
name|AutoDetectParserFactory
extends|extends
name|ParserFactory
block|{
comment|/**      * Path to a tika-config file.  This must be a literal      * file or findable on the classpath.      */
specifier|public
specifier|static
specifier|final
name|String
name|TIKA_CONFIG_PATH
init|=
literal|"tika_config_path"
decl_stmt|;
specifier|public
name|AutoDetectParserFactory
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|args
parameter_list|)
block|{
name|super
argument_list|(
name|args
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Parser
name|build
parameter_list|()
throws|throws
name|IOException
throws|,
name|SAXException
throws|,
name|TikaException
block|{
name|String
name|tikaConfigPath
init|=
name|args
operator|.
name|remove
argument_list|(
name|TIKA_CONFIG_PATH
argument_list|)
decl_stmt|;
name|TikaConfig
name|tikaConfig
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|tikaConfigPath
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|Files
operator|.
name|isReadable
argument_list|(
name|Paths
operator|.
name|get
argument_list|(
name|tikaConfigPath
argument_list|)
argument_list|)
condition|)
block|{
name|tikaConfig
operator|=
operator|new
name|TikaConfig
argument_list|(
name|Paths
operator|.
name|get
argument_list|(
name|tikaConfigPath
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getResource
argument_list|(
name|tikaConfigPath
argument_list|)
operator|!=
literal|null
condition|)
block|{
try|try
init|(
name|InputStream
name|is
init|=
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getResourceAsStream
argument_list|(
name|tikaConfigPath
argument_list|)
init|)
block|{
name|tikaConfig
operator|=
operator|new
name|TikaConfig
argument_list|(
name|is
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|tikaConfig
operator|==
literal|null
condition|)
block|{
name|tikaConfig
operator|=
name|TikaConfig
operator|.
name|getDefaultConfig
argument_list|()
expr_stmt|;
block|}
return|return
operator|new
name|AutoDetectParser
argument_list|(
name|tikaConfig
argument_list|)
return|;
block|}
block|}
end_class

end_unit

