begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|exception
operator|.
name|TikaException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|metadata
operator|.
name|Metadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|sax
operator|.
name|BodyContentHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|sax
operator|.
name|TeeContentHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|utils
operator|.
name|RegexUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|ContentHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_comment
comment|/**  * Parser decorator that post-processes the results from a decorated parser.  * The post-processing takes care of filling in the "fulltext", "summary",  * and "outlinks" metadata entries based on the full text content returned by  * the decorated parser.  */
end_comment

begin_class
specifier|public
class|class
name|ParserPostProcessor
extends|extends
name|ParserDecorator
block|{
comment|/**      * Creates a post-processing decorator for the given parser.      *      * @param parser the parser to be decorated      */
specifier|public
name|ParserPostProcessor
parameter_list|(
name|Parser
name|parser
parameter_list|)
block|{
name|super
argument_list|(
name|parser
argument_list|)
expr_stmt|;
block|}
comment|/**      * Forwards the call to the delegated parser and post-processes the      * results as described above.      */
specifier|public
name|void
name|parse
parameter_list|(
name|InputStream
name|stream
parameter_list|,
name|ContentHandler
name|handler
parameter_list|,
name|Metadata
name|metadata
parameter_list|,
name|ParseContext
name|context
parameter_list|)
throws|throws
name|IOException
throws|,
name|SAXException
throws|,
name|TikaException
block|{
name|ContentHandler
name|body
init|=
operator|new
name|BodyContentHandler
argument_list|()
decl_stmt|;
name|ContentHandler
name|tee
init|=
operator|new
name|TeeContentHandler
argument_list|(
name|handler
argument_list|,
name|body
argument_list|)
decl_stmt|;
name|super
operator|.
name|parse
argument_list|(
name|stream
argument_list|,
name|tee
argument_list|,
name|metadata
argument_list|,
name|context
argument_list|)
expr_stmt|;
name|String
name|content
init|=
name|body
operator|.
name|toString
argument_list|()
decl_stmt|;
name|metadata
operator|.
name|set
argument_list|(
literal|"fulltext"
argument_list|,
name|content
argument_list|)
expr_stmt|;
name|int
name|length
init|=
name|Math
operator|.
name|min
argument_list|(
name|content
operator|.
name|length
argument_list|()
argument_list|,
literal|500
argument_list|)
decl_stmt|;
name|metadata
operator|.
name|set
argument_list|(
literal|"summary"
argument_list|,
name|content
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|length
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|link
range|:
name|RegexUtils
operator|.
name|extractLinks
argument_list|(
name|content
argument_list|)
control|)
block|{
name|metadata
operator|.
name|add
argument_list|(
literal|"outlinks"
argument_list|,
name|link
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

