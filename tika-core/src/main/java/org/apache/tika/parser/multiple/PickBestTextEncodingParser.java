begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|multiple
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|Charset
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|detect
operator|.
name|EncodingDetector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|detect
operator|.
name|NonDetectingEncodingDetector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|exception
operator|.
name|TikaException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|metadata
operator|.
name|Metadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|mime
operator|.
name|MediaTypeRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|EmptyParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|ParseContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|Parser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|ContentHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_comment
comment|/**  * Inspired by TIKA-1443 and https://wiki.apache.org/tika/CompositeParserDiscussion  *  this tries several different text encodings, then does the real  *  text parsing based on which is "best".  *    * The logic for "best" needs a lot of work!  *   * This is not recommended for actual production use... It is mostly to  *  prove that the {@link AbstractMultipleParser} environment is  *  sufficient to support this use-case  *  * @deprecated Currently not suitable for real use, more a demo / prototype!  */
end_comment

begin_class
specifier|public
class|class
name|PickBestTextEncodingParser
extends|extends
name|AbstractMultipleParser
block|{
comment|/**      * Serial version UID.      */
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|730345169223211807L
decl_stmt|;
comment|/**      * Which charsets we should try      */
specifier|private
name|String
index|[]
name|charsetsToTry
decl_stmt|;
specifier|public
name|PickBestTextEncodingParser
parameter_list|(
name|MediaTypeRegistry
name|registry
parameter_list|,
name|String
index|[]
name|charsets
parameter_list|)
block|{
comment|// TODO Actually give 1 more TXTParser than we have charsets
name|super
argument_list|(
name|registry
argument_list|,
name|MetadataPolicy
operator|.
name|DISCARD_ALL
argument_list|,
name|makeParsers
argument_list|(
name|charsets
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|charsetsToTry
operator|=
name|charsets
expr_stmt|;
block|}
specifier|private
specifier|static
name|List
argument_list|<
name|Parser
argument_list|>
name|makeParsers
parameter_list|(
name|String
index|[]
name|charsets
parameter_list|)
block|{
comment|// One more TXTParser than we have charsets, for the real thing
name|List
argument_list|<
name|Parser
argument_list|>
name|parsers
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|charsets
operator|.
name|length
operator|+
literal|1
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|charsets
operator|.
name|length
operator|+
literal|1
condition|;
name|i
operator|++
control|)
block|{
comment|// TODO Actually get the right parser, TXTParser
name|parsers
operator|.
name|set
argument_list|(
name|i
argument_list|,
operator|new
name|EmptyParser
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|parsers
return|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|parserPrepare
parameter_list|(
name|Parser
name|parser
parameter_list|,
name|Metadata
name|metadata
parameter_list|,
name|ParseContext
name|context
parameter_list|)
block|{
name|super
operator|.
name|parserPrepare
argument_list|(
name|parser
argument_list|,
name|metadata
argument_list|,
name|context
argument_list|)
expr_stmt|;
comment|// Specify which charset to try
name|String
name|charset
init|=
name|context
operator|.
name|get
argument_list|(
name|CharsetTester
operator|.
name|class
argument_list|)
operator|.
name|getNextCharset
argument_list|()
decl_stmt|;
name|Charset
name|charsetCS
init|=
name|Charset
operator|.
name|forName
argument_list|(
name|charset
argument_list|)
decl_stmt|;
name|context
operator|.
name|set
argument_list|(
name|EncodingDetector
operator|.
name|class
argument_list|,
operator|new
name|NonDetectingEncodingDetector
argument_list|(
name|charsetCS
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|boolean
name|parserCompleted
parameter_list|(
name|Parser
name|parser
parameter_list|,
name|Metadata
name|metadata
parameter_list|,
name|ContentHandler
name|handler
parameter_list|,
name|ParseContext
name|context
parameter_list|,
name|Exception
name|exception
parameter_list|)
block|{
comment|// Get the current charset
name|CharsetTester
name|charsetTester
init|=
name|context
operator|.
name|get
argument_list|(
name|CharsetTester
operator|.
name|class
argument_list|)
decl_stmt|;
name|String
name|charset
init|=
name|charsetTester
operator|.
name|getCurrentCharset
argument_list|()
decl_stmt|;
comment|// Record the text
if|if
condition|(
name|charsetTester
operator|.
name|stillTesting
argument_list|()
condition|)
block|{
name|charsetTester
operator|.
name|charsetText
operator|.
name|put
argument_list|(
name|charset
argument_list|,
name|handler
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// If this was the last real charset, see which one is best
if|if
condition|(
operator|!
name|charsetTester
operator|.
name|moreToTest
argument_list|()
condition|)
block|{
comment|// TODO Properly work out the best!
name|charsetTester
operator|.
name|pickedCharset
operator|=
name|charsetsToTry
index|[
literal|0
index|]
expr_stmt|;
block|}
block|}
comment|// Always have the next parser tried
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|parse
parameter_list|(
name|InputStream
name|stream
parameter_list|,
name|ContentHandler
name|handler
parameter_list|,
name|Metadata
name|originalMetadata
parameter_list|,
name|ParseContext
name|context
parameter_list|)
throws|throws
name|IOException
throws|,
name|SAXException
throws|,
name|TikaException
block|{
comment|// TODO Create our own ContentHandlerFactory
comment|// This will give a BodyContentHandler for each of the charset
comment|//  tests, then their real ContentHandler for the last one
comment|// Put something on the ParseContext to get the charset
name|context
operator|.
name|set
argument_list|(
name|CharsetTester
operator|.
name|class
argument_list|,
operator|new
name|CharsetTester
argument_list|()
argument_list|)
expr_stmt|;
comment|// TODO Have the parsing done with our ContentHandlerFactory instead
name|super
operator|.
name|parse
argument_list|(
name|stream
argument_list|,
name|handler
argument_list|,
name|originalMetadata
argument_list|,
name|context
argument_list|)
expr_stmt|;
block|}
specifier|protected
class|class
name|CharsetTester
block|{
comment|/**          * Our current charset's index          */
specifier|private
name|int
name|index
init|=
operator|-
literal|1
decl_stmt|;
comment|/**          * What charset we felt was best          */
specifier|private
name|String
name|pickedCharset
decl_stmt|;
comment|/**          * What text we got for each charset, so we can test for the best          */
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|charsetText
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|protected
name|String
name|getNextCharset
parameter_list|()
block|{
name|index
operator|++
expr_stmt|;
return|return
name|getCurrentCharset
argument_list|()
return|;
block|}
specifier|protected
name|String
name|getCurrentCharset
parameter_list|()
block|{
if|if
condition|(
name|index
operator|<
name|charsetsToTry
operator|.
name|length
condition|)
block|{
return|return
name|charsetsToTry
index|[
name|index
index|]
return|;
block|}
return|return
name|pickedCharset
return|;
block|}
specifier|protected
name|boolean
name|stillTesting
parameter_list|()
block|{
return|return
name|index
operator|<
name|charsetsToTry
operator|.
name|length
return|;
block|}
specifier|protected
name|boolean
name|moreToTest
parameter_list|()
block|{
return|return
name|index
operator|<
name|charsetsToTry
operator|.
name|length
operator|-
literal|1
return|;
block|}
block|}
block|}
end_class

end_unit

