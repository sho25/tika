begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|exception
operator|.
name|TikaException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|metadata
operator|.
name|Metadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|mime
operator|.
name|MediaType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|mime
operator|.
name|MediaTypeRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|multiple
operator|.
name|AbstractMultipleParser
operator|.
name|MetadataPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|multiple
operator|.
name|FallbackParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|ContentHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_comment
comment|/**  * Decorator base class for the {@link Parser} interface.   *<p>This class simply delegates all parsing calls to an underlying decorated   * parser instance. Subclasses can provide extra decoration by overriding the  * parse method.  *<p>To decorate several different parsers at the same time, wrap them in  *  a {@link CompositeParser} instance first.  */
end_comment

begin_class
specifier|public
class|class
name|ParserDecorator
extends|extends
name|AbstractParser
block|{
comment|/** Serial version UID */
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
operator|-
literal|3861669115439125268L
decl_stmt|;
comment|/**      * Decorates the given parser so that it always claims to support      * parsing of the given media types.      *      * @param parser the parser to be decorated      * @param types supported media types      * @return the decorated parser      */
specifier|public
specifier|static
specifier|final
name|Parser
name|withTypes
parameter_list|(
name|Parser
name|parser
parameter_list|,
specifier|final
name|Set
argument_list|<
name|MediaType
argument_list|>
name|types
parameter_list|)
block|{
return|return
operator|new
name|ParserDecorator
argument_list|(
name|parser
argument_list|)
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
operator|-
literal|7345051519565330731L
decl_stmt|;
annotation|@
name|Override
specifier|public
name|Set
argument_list|<
name|MediaType
argument_list|>
name|getSupportedTypes
parameter_list|(
name|ParseContext
name|context
parameter_list|)
block|{
return|return
name|types
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getDecorationName
parameter_list|()
block|{
return|return
literal|"With Types"
return|;
block|}
block|}
return|;
block|}
comment|/**      * Decorates the given parser so that it never claims to support      * parsing of the given media types, but will work for all others.      *      * @param parser the parser to be decorated      * @param excludeTypes excluded/ignored media types      * @return the decorated parser      */
specifier|public
specifier|static
specifier|final
name|Parser
name|withoutTypes
parameter_list|(
name|Parser
name|parser
parameter_list|,
specifier|final
name|Set
argument_list|<
name|MediaType
argument_list|>
name|excludeTypes
parameter_list|)
block|{
return|return
operator|new
name|ParserDecorator
argument_list|(
name|parser
argument_list|)
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|7979614774021768609L
decl_stmt|;
annotation|@
name|Override
specifier|public
name|Set
argument_list|<
name|MediaType
argument_list|>
name|getSupportedTypes
parameter_list|(
name|ParseContext
name|context
parameter_list|)
block|{
comment|// Get our own, writable copy of the types the parser supports
name|Set
argument_list|<
name|MediaType
argument_list|>
name|parserTypes
init|=
operator|new
name|HashSet
argument_list|<
name|MediaType
argument_list|>
argument_list|(
name|super
operator|.
name|getSupportedTypes
argument_list|(
name|context
argument_list|)
argument_list|)
decl_stmt|;
comment|// Remove anything on our excludes list
name|parserTypes
operator|.
name|removeAll
argument_list|(
name|excludeTypes
argument_list|)
expr_stmt|;
comment|// Return whatever is left
return|return
name|parserTypes
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getDecorationName
parameter_list|()
block|{
return|return
literal|"Without Types"
return|;
block|}
block|}
return|;
block|}
comment|/**      * Decorates the given parsers into a virtual parser, where they'll      *  be tried in preference order until one works without error.      * @deprecated This has been replaced by {@link FallbackParser}      */
specifier|public
specifier|static
specifier|final
name|Parser
name|withFallbacks
parameter_list|(
specifier|final
name|Collection
argument_list|<
name|?
extends|extends
name|Parser
argument_list|>
name|parsers
parameter_list|,
specifier|final
name|Set
argument_list|<
name|MediaType
argument_list|>
name|types
parameter_list|)
block|{
comment|// Delegate to the new FallbackParser for now, until people upgrade
comment|// Keep old behaviour on metadata, which was to preseve all
name|MediaTypeRegistry
name|registry
init|=
name|MediaTypeRegistry
operator|.
name|getDefaultRegistry
argument_list|()
decl_stmt|;
return|return
operator|new
name|FallbackParser
argument_list|(
name|registry
argument_list|,
name|MetadataPolicy
operator|.
name|KEEP_ALL
argument_list|,
name|parsers
argument_list|)
return|;
block|}
comment|/**      * The decorated parser instance.      */
specifier|private
specifier|final
name|Parser
name|parser
decl_stmt|;
comment|/**      * Creates a decorator for the given parser.      *      * @param parser the parser instance to be decorated      */
specifier|public
name|ParserDecorator
parameter_list|(
name|Parser
name|parser
parameter_list|)
block|{
name|this
operator|.
name|parser
operator|=
name|parser
expr_stmt|;
block|}
comment|/**      * Delegates the method call to the decorated parser. Subclasses should      * override this method (and use<code>super.getSupportedTypes()</code>      * to invoke the decorated parser) to implement extra decoration.      */
specifier|public
name|Set
argument_list|<
name|MediaType
argument_list|>
name|getSupportedTypes
parameter_list|(
name|ParseContext
name|context
parameter_list|)
block|{
return|return
name|parser
operator|.
name|getSupportedTypes
argument_list|(
name|context
argument_list|)
return|;
block|}
comment|/**      * Delegates the method call to the decorated parser. Subclasses should      * override this method (and use<code>super.parse()</code> to invoke      * the decorated parser) to implement extra decoration.      */
specifier|public
name|void
name|parse
parameter_list|(
name|InputStream
name|stream
parameter_list|,
name|ContentHandler
name|handler
parameter_list|,
name|Metadata
name|metadata
parameter_list|,
name|ParseContext
name|context
parameter_list|)
throws|throws
name|IOException
throws|,
name|SAXException
throws|,
name|TikaException
block|{
name|parser
operator|.
name|parse
argument_list|(
name|stream
argument_list|,
name|handler
argument_list|,
name|metadata
argument_list|,
name|context
argument_list|)
expr_stmt|;
block|}
comment|/**      * @return A name/description of the decoration, or null if none available      */
specifier|public
name|String
name|getDecorationName
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
comment|/**      * Gets the parser wrapped by this ParserDecorator      * @return the parser wrapped by this ParserDecorator      */
specifier|public
name|Parser
name|getWrappedParser
parameter_list|()
block|{
return|return
name|this
operator|.
name|parser
return|;
block|}
block|}
end_class

end_unit

