begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|external
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|config
operator|.
name|ServiceLoader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|config
operator|.
name|TikaConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|exception
operator|.
name|TikaException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|mime
operator|.
name|MediaType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|CompositeParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|Parser
import|;
end_import

begin_comment
comment|/**  * Creates instances of ExternalParser based on XML   *  configuration files.  *    * @see ExternalParsersConfigReader  */
end_comment

begin_class
specifier|public
class|class
name|ExternalParsersFactory
block|{
specifier|public
specifier|static
name|List
argument_list|<
name|ExternalParser
argument_list|>
name|create
parameter_list|()
throws|throws
name|IOException
throws|,
name|TikaException
block|{
return|return
name|create
argument_list|(
operator|new
name|ServiceLoader
argument_list|()
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|List
argument_list|<
name|ExternalParser
argument_list|>
name|create
parameter_list|(
name|ServiceLoader
name|loader
parameter_list|)
throws|throws
name|IOException
throws|,
name|TikaException
block|{
return|return
name|create
argument_list|(
literal|"tika-external-parsers.xml"
argument_list|,
name|loader
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|List
argument_list|<
name|ExternalParser
argument_list|>
name|create
parameter_list|(
name|String
name|filename
parameter_list|,
name|ServiceLoader
name|loader
parameter_list|)
throws|throws
name|IOException
throws|,
name|TikaException
block|{
name|String
name|filepath
init|=
name|ExternalParsersFactory
operator|.
name|class
operator|.
name|getPackage
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|replace
argument_list|(
literal|'.'
argument_list|,
literal|'/'
argument_list|)
operator|+
literal|"/"
operator|+
name|filename
decl_stmt|;
name|Enumeration
argument_list|<
name|URL
argument_list|>
name|files
init|=
name|loader
operator|.
name|findServiceResources
argument_list|(
name|filepath
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|URL
argument_list|>
name|list
init|=
name|Collections
operator|.
name|list
argument_list|(
name|files
argument_list|)
decl_stmt|;
name|URL
index|[]
name|urls
init|=
name|list
operator|.
name|toArray
argument_list|(
operator|new
name|URL
index|[
name|list
operator|.
name|size
argument_list|()
index|]
argument_list|)
decl_stmt|;
return|return
name|create
argument_list|(
name|urls
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|List
argument_list|<
name|ExternalParser
argument_list|>
name|create
parameter_list|(
name|URL
modifier|...
name|urls
parameter_list|)
throws|throws
name|IOException
throws|,
name|TikaException
block|{
name|List
argument_list|<
name|ExternalParser
argument_list|>
name|parsers
init|=
operator|new
name|ArrayList
argument_list|<
name|ExternalParser
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|URL
name|url
range|:
name|urls
control|)
block|{
try|try
init|(
name|InputStream
name|stream
init|=
name|url
operator|.
name|openStream
argument_list|()
init|)
block|{
name|parsers
operator|.
name|addAll
argument_list|(
name|ExternalParsersConfigReader
operator|.
name|read
argument_list|(
name|stream
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|parsers
return|;
block|}
specifier|public
specifier|static
name|void
name|attachExternalParsers
parameter_list|(
name|TikaConfig
name|config
parameter_list|)
throws|throws
name|IOException
throws|,
name|TikaException
block|{
name|attachExternalParsers
argument_list|(
name|create
argument_list|()
argument_list|,
name|config
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|attachExternalParsers
parameter_list|(
name|List
argument_list|<
name|ExternalParser
argument_list|>
name|parsers
parameter_list|,
name|TikaConfig
name|config
parameter_list|)
block|{
name|Parser
name|parser
init|=
name|config
operator|.
name|getParser
argument_list|()
decl_stmt|;
if|if
condition|(
name|parser
operator|instanceof
name|CompositeParser
condition|)
block|{
name|CompositeParser
name|cParser
init|=
operator|(
name|CompositeParser
operator|)
name|parser
decl_stmt|;
name|Map
argument_list|<
name|MediaType
argument_list|,
name|Parser
argument_list|>
name|parserMap
init|=
name|cParser
operator|.
name|getParsers
argument_list|()
decl_stmt|;
block|}
comment|// TODO
block|}
block|}
end_class

end_unit

