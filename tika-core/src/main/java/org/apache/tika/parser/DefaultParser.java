begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|imageio
operator|.
name|spi
operator|.
name|ServiceRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|config
operator|.
name|ServiceLoader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|mime
operator|.
name|MediaTypeRegistry
import|;
end_import

begin_comment
comment|/**  * A composite parser based on all the {@link Parser} implementations  * available through the {@link ServiceRegistry service provider mechanism}.  *  * @since Apache Tika 0.8  */
end_comment

begin_class
specifier|public
class|class
name|DefaultParser
extends|extends
name|CompositeParser
block|{
comment|/** Serial version UID */
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|3612324825403757520L
decl_stmt|;
specifier|private
specifier|static
name|List
argument_list|<
name|Parser
argument_list|>
name|getDefaultParsers
parameter_list|(
name|ServiceLoader
name|loader
parameter_list|)
block|{
comment|// Find all the Parsers available as services
name|List
argument_list|<
name|Parser
argument_list|>
name|svcParsers
init|=
name|loader
operator|.
name|loadServiceProviders
argument_list|(
name|Parser
operator|.
name|class
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Parser
argument_list|>
name|parsers
init|=
operator|new
name|ArrayList
argument_list|<
name|Parser
argument_list|>
argument_list|(
name|svcParsers
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
comment|// Sort the list by classname, rather than discovery order
name|Collections
operator|.
name|sort
argument_list|(
name|svcParsers
argument_list|,
operator|new
name|Comparator
argument_list|<
name|Parser
argument_list|>
argument_list|()
block|{
specifier|public
name|int
name|compare
parameter_list|(
name|Parser
name|p1
parameter_list|,
name|Parser
name|p2
parameter_list|)
block|{
return|return
name|p1
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|p2
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
comment|// CompositeParser takes the last parser for any given mime type, so put the
comment|// TikaParsers first so that non-Tika (user supplied) parsers can take presidence
for|for
control|(
name|Parser
name|p
range|:
name|svcParsers
control|)
block|{
if|if
condition|(
name|p
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"org.apache.tika"
argument_list|)
condition|)
block|{
name|parsers
operator|.
name|add
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|Parser
name|p
range|:
name|svcParsers
control|)
block|{
if|if
condition|(
operator|!
name|p
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"org.apache.tika"
argument_list|)
condition|)
block|{
name|parsers
operator|.
name|add
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|parsers
return|;
block|}
specifier|private
name|DefaultParser
parameter_list|(
name|MediaTypeRegistry
name|registry
parameter_list|,
name|ServiceLoader
name|loader
parameter_list|)
block|{
name|super
argument_list|(
name|registry
argument_list|,
name|getDefaultParsers
argument_list|(
name|loader
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|DefaultParser
parameter_list|(
name|MediaTypeRegistry
name|registry
parameter_list|,
name|ClassLoader
name|loader
parameter_list|)
block|{
name|this
argument_list|(
name|registry
argument_list|,
operator|new
name|ServiceLoader
argument_list|(
name|loader
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|DefaultParser
parameter_list|(
name|ClassLoader
name|loader
parameter_list|)
block|{
name|this
argument_list|(
name|MediaTypeRegistry
operator|.
name|getDefaultRegistry
argument_list|()
argument_list|,
operator|new
name|ServiceLoader
argument_list|(
name|loader
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|DefaultParser
parameter_list|(
name|MediaTypeRegistry
name|registry
parameter_list|)
block|{
name|this
argument_list|(
name|registry
argument_list|,
operator|new
name|ServiceLoader
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|DefaultParser
parameter_list|()
block|{
name|this
argument_list|(
name|MediaTypeRegistry
operator|.
name|getDefaultRegistry
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

