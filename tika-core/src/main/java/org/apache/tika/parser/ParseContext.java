begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|XMLConstants
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|DocumentBuilder
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|DocumentBuilderFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|ParserConfigurationException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|SAXParser
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|SAXParserFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|XMLInputFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|exception
operator|.
name|TikaException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|utils
operator|.
name|XMLReaderUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXNotRecognizedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXNotSupportedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|XMLReader
import|;
end_import

begin_comment
comment|/**  * Parse context. Used to pass context information to Tika parsers.  *  * @since Apache Tika 0.5  * @see<a href="https://issues.apache.org/jira/browse/TIKA-275">TIKA-275</a>  */
end_comment

begin_class
specifier|public
class|class
name|ParseContext
implements|implements
name|Serializable
block|{
comment|/** Serial version UID. */
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
operator|-
literal|5921436862145826534L
decl_stmt|;
comment|/** Map of objects in this context */
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|context
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
comment|/**      * Adds the given value to the context as an implementation of the given      * interface.      *      * @param key the interface implemented by the given value      * @param value the value to be added, or<code>null</code> to remove      */
specifier|public
parameter_list|<
name|T
parameter_list|>
name|void
name|set
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|key
parameter_list|,
name|T
name|value
parameter_list|)
block|{
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
name|context
operator|.
name|put
argument_list|(
name|key
operator|.
name|getName
argument_list|()
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|context
operator|.
name|remove
argument_list|(
name|key
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Returns the object in this context that implements the given interface.      *      * @param key the interface implemented by the requested object      * @return the object that implements the given interface,      *         or<code>null</code> if not found      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|get
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|key
parameter_list|)
block|{
return|return
operator|(
name|T
operator|)
name|context
operator|.
name|get
argument_list|(
name|key
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * Returns the object in this context that implements the given interface,      * or the given default value if such an object is not found.      *      * @param key the interface implemented by the requested object      * @param defaultValue value to return if the requested object is not found      * @return the object that implements the given interface,      *         or the given default value if not found      */
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|get
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|key
parameter_list|,
name|T
name|defaultValue
parameter_list|)
block|{
name|T
name|value
init|=
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
return|return
name|value
return|;
block|}
else|else
block|{
return|return
name|defaultValue
return|;
block|}
block|}
comment|/**      * Returns the XMLReader specified in this parsing context. If a reader      * is not explicitly specified, then one is created using the specified      * or the default SAX parser.      *      * @see #getSAXParser()      * @since Apache Tika 1.13      * @return XMLReader      * @throws TikaException      */
specifier|public
name|XMLReader
name|getXMLReader
parameter_list|()
throws|throws
name|TikaException
block|{
name|XMLReader
name|reader
init|=
name|get
argument_list|(
name|XMLReader
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|reader
operator|!=
literal|null
condition|)
block|{
return|return
name|reader
return|;
block|}
return|return
name|XMLReaderUtils
operator|.
name|getXMLReader
argument_list|()
return|;
block|}
comment|/**      * Returns the SAX parser specified in this parsing context. If a parser      * is not explicitly specified, then one is created using the specified      * or the default SAX parser factory.      *      * @see #getSAXParserFactory()      * @since Apache Tika 0.8      * @return SAX parser      * @throws TikaException if a SAX parser could not be created      */
specifier|public
name|SAXParser
name|getSAXParser
parameter_list|()
throws|throws
name|TikaException
block|{
name|SAXParser
name|parser
init|=
name|get
argument_list|(
name|SAXParser
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|parser
operator|!=
literal|null
condition|)
block|{
return|return
name|parser
return|;
block|}
else|else
block|{
return|return
name|XMLReaderUtils
operator|.
name|getSAXParser
argument_list|()
return|;
block|}
block|}
comment|/**      * Returns the SAX parser factory specified in this parsing context.      * If a factory is not explicitly specified, then a default factory      * instance is created and returned. The default factory instance is      * configured to be namespace-aware, not validating, and to use      * {@link XMLConstants#FEATURE_SECURE_PROCESSING secure XML processing}.      *      * @since Apache Tika 0.8      * @return SAX parser factory      */
specifier|public
name|SAXParserFactory
name|getSAXParserFactory
parameter_list|()
block|{
name|SAXParserFactory
name|factory
init|=
name|get
argument_list|(
name|SAXParserFactory
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|factory
operator|==
literal|null
condition|)
block|{
name|factory
operator|=
name|SAXParserFactory
operator|.
name|newInstance
argument_list|()
expr_stmt|;
name|factory
operator|.
name|setNamespaceAware
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|factory
operator|.
name|setValidating
argument_list|(
literal|false
argument_list|)
expr_stmt|;
try|try
block|{
name|factory
operator|.
name|setFeature
argument_list|(
name|XMLConstants
operator|.
name|FEATURE_SECURE_PROCESSING
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParserConfigurationException
name|e
parameter_list|)
block|{             }
catch|catch
parameter_list|(
name|SAXNotSupportedException
name|e
parameter_list|)
block|{             }
catch|catch
parameter_list|(
name|SAXNotRecognizedException
name|e
parameter_list|)
block|{
comment|// TIKA-271: Some XML parsers do not support the
comment|// secure-processing feature, even though it's required by
comment|// JAXP in Java 5. Ignoring the exception is fine here, as
comment|// deployments without this feature are inherently vulnerable
comment|// to XML denial-of-service attacks.
block|}
block|}
return|return
name|factory
return|;
block|}
comment|/**      * Returns the DOM builder factory specified in this parsing context.      * If a factory is not explicitly specified, then a default factory      * instance is created and returned. The default factory instance is      * configured to be namespace-aware and to apply reasonable security      * features.      *      * @since Apache Tika 1.13      * @return DOM parser factory      */
specifier|private
name|DocumentBuilderFactory
name|getDocumentBuilderFactory
parameter_list|()
block|{
comment|//borrowed from Apache POI
name|DocumentBuilderFactory
name|documentBuilderFactory
init|=
name|get
argument_list|(
name|DocumentBuilderFactory
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|documentBuilderFactory
operator|!=
literal|null
condition|)
block|{
return|return
name|documentBuilderFactory
return|;
block|}
else|else
block|{
return|return
name|XMLReaderUtils
operator|.
name|getDocumentBuilderFactory
argument_list|()
return|;
block|}
block|}
comment|/**      * Returns the DOM builder specified in this parsing context.      * If a builder is not explicitly specified, then a builder      * instance is created and returned. The builder instance is      * configured to apply an {@link XMLReaderUtils#IGNORING_SAX_ENTITY_RESOLVER},      * and it sets the ErrorHandler to<code>null</code>.      *      * @since Apache Tika 1.13      * @return DOM Builder      */
specifier|public
name|DocumentBuilder
name|getDocumentBuilder
parameter_list|()
throws|throws
name|TikaException
block|{
name|DocumentBuilder
name|documentBuilder
init|=
name|get
argument_list|(
name|DocumentBuilder
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|documentBuilder
operator|!=
literal|null
condition|)
block|{
return|return
name|documentBuilder
return|;
block|}
else|else
block|{
return|return
name|XMLReaderUtils
operator|.
name|getDocumentBuilder
argument_list|()
return|;
block|}
block|}
comment|/**      * Returns the StAX input factory specified in this parsing context.      * If a factory is not explicitly specified, then a default factory      * instance is created and returned. The default factory instance is      * configured to be namespace-aware and to apply reasonable security      * using the {@link XMLReaderUtils#IGNORING_STAX_ENTITY_RESOLVER}.      *      * @since Apache Tika 1.13      * @return StAX input factory      */
specifier|public
name|XMLInputFactory
name|getXMLInputFactory
parameter_list|()
block|{
name|XMLInputFactory
name|factory
init|=
name|get
argument_list|(
name|XMLInputFactory
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|factory
operator|!=
literal|null
condition|)
block|{
return|return
name|factory
return|;
block|}
return|return
name|XMLReaderUtils
operator|.
name|getXMLInputFactory
argument_list|()
return|;
block|}
block|}
end_class

end_unit

