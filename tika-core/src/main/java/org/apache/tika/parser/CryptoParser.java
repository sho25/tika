begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|AlgorithmParameters
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|GeneralSecurityException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Key
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Provider
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|SecureRandom
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|crypto
operator|.
name|Cipher
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|crypto
operator|.
name|CipherInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|exception
operator|.
name|TikaException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|metadata
operator|.
name|Metadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|mime
operator|.
name|MediaType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|ContentHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_comment
comment|/**  * Decrypts the incoming document stream and delegates further parsing to  * another parser instance. The decryption key and other settings as well  * as the delegate parser are taken from the parsing context.  *  * @since Apache Tika 1.0  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|CryptoParser
extends|extends
name|DelegatingParser
block|{
comment|/** Serial version UID */
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
operator|-
literal|3507995752666557731L
decl_stmt|;
specifier|private
specifier|final
name|String
name|transformation
decl_stmt|;
specifier|private
specifier|final
name|Provider
name|provider
decl_stmt|;
specifier|private
specifier|final
name|Set
argument_list|<
name|MediaType
argument_list|>
name|types
decl_stmt|;
specifier|public
name|CryptoParser
parameter_list|(
name|String
name|transformation
parameter_list|,
name|Provider
name|provider
parameter_list|,
name|Set
argument_list|<
name|MediaType
argument_list|>
name|types
parameter_list|)
block|{
name|this
operator|.
name|transformation
operator|=
name|transformation
expr_stmt|;
name|this
operator|.
name|provider
operator|=
name|provider
expr_stmt|;
name|this
operator|.
name|types
operator|=
name|types
expr_stmt|;
block|}
specifier|public
name|CryptoParser
parameter_list|(
name|String
name|transformation
parameter_list|,
name|Set
argument_list|<
name|MediaType
argument_list|>
name|types
parameter_list|)
block|{
name|this
argument_list|(
name|transformation
argument_list|,
literal|null
argument_list|,
name|types
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Set
argument_list|<
name|MediaType
argument_list|>
name|getSupportedTypes
parameter_list|(
name|ParseContext
name|context
parameter_list|)
block|{
return|return
name|types
return|;
block|}
specifier|public
name|void
name|parse
parameter_list|(
name|InputStream
name|stream
parameter_list|,
name|ContentHandler
name|handler
parameter_list|,
name|Metadata
name|metadata
parameter_list|,
name|ParseContext
name|context
parameter_list|)
throws|throws
name|IOException
throws|,
name|SAXException
throws|,
name|TikaException
block|{
try|try
block|{
name|Cipher
name|cipher
decl_stmt|;
if|if
condition|(
name|provider
operator|!=
literal|null
condition|)
block|{
name|cipher
operator|=
name|Cipher
operator|.
name|getInstance
argument_list|(
name|transformation
argument_list|,
name|provider
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|cipher
operator|=
name|Cipher
operator|.
name|getInstance
argument_list|(
name|transformation
argument_list|)
expr_stmt|;
block|}
name|Key
name|key
init|=
name|context
operator|.
name|get
argument_list|(
name|Key
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|key
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|TikaException
argument_list|(
literal|"No decryption key provided"
argument_list|)
throw|;
block|}
name|AlgorithmParameters
name|params
init|=
name|context
operator|.
name|get
argument_list|(
name|AlgorithmParameters
operator|.
name|class
argument_list|)
decl_stmt|;
name|SecureRandom
name|random
init|=
name|context
operator|.
name|get
argument_list|(
name|SecureRandom
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|params
operator|!=
literal|null
operator|&&
name|random
operator|!=
literal|null
condition|)
block|{
name|cipher
operator|.
name|init
argument_list|(
name|Cipher
operator|.
name|DECRYPT_MODE
argument_list|,
name|key
argument_list|,
name|params
argument_list|,
name|random
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|params
operator|!=
literal|null
condition|)
block|{
name|cipher
operator|.
name|init
argument_list|(
name|Cipher
operator|.
name|DECRYPT_MODE
argument_list|,
name|key
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|random
operator|!=
literal|null
condition|)
block|{
name|cipher
operator|.
name|init
argument_list|(
name|Cipher
operator|.
name|DECRYPT_MODE
argument_list|,
name|key
argument_list|,
name|random
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|cipher
operator|.
name|init
argument_list|(
name|Cipher
operator|.
name|DECRYPT_MODE
argument_list|,
name|key
argument_list|)
expr_stmt|;
block|}
name|super
operator|.
name|parse
argument_list|(
operator|new
name|CipherInputStream
argument_list|(
name|stream
argument_list|,
name|cipher
argument_list|)
argument_list|,
name|handler
argument_list|,
name|metadata
argument_list|,
name|context
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|GeneralSecurityException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|TikaException
argument_list|(
literal|"Unable to decrypt document stream"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

