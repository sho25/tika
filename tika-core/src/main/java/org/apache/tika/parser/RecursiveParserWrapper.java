begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|exception
operator|.
name|CorruptedFileException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|exception
operator|.
name|TikaException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|io
operator|.
name|FilenameUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|metadata
operator|.
name|Metadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|metadata
operator|.
name|Property
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|metadata
operator|.
name|TikaCoreProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|mime
operator|.
name|MediaType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|sax
operator|.
name|AbstractRecursiveParserWrapperHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|sax
operator|.
name|ContentHandlerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|sax
operator|.
name|RecursiveParserWrapperHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|utils
operator|.
name|ExceptionUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|utils
operator|.
name|ParserUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|ContentHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_comment
comment|/**  * This is a helper class that wraps a parser in a recursive handler.  * It takes care of setting the embedded parser in the ParseContext   * and handling the embedded path calculations.  *<p>  * After parsing a document, call getMetadata() to retrieve a list of   * Metadata objects, one for each embedded resource.  The first item  * in the list will contain the Metadata for the outer container file.  *<p>  * Content can also be extracted and stored in the {@link #TIKA_CONTENT} field  * of a Metadata object.  Select the type of content to be stored  * at initialization.  *<p>  * If a WriteLimitReachedException is encountered, the wrapper will stop  * processing the current resource, and it will not process  * any of the child resources for the given resource.  However, it will try to   * parse as much as it can.  If a WLRE is reached in the parent document,   * no child resources will be parsed.  *<p>  * The implementation is based on Jukka's RecursiveMetadataParser  * and Nick's additions. See:   *<a href="http://wiki.apache.org/tika/RecursiveMetadata#Jukka.27s_RecursiveMetadata_Parser">RecursiveMetadataParser</a>.  *<p>  * Note that this wrapper holds all data in memory and is not appropriate  * for files with content too large to be held in memory.  *<p>  * Note, too, that this wrapper is not thread safe because it stores state.    * The client must initialize a new wrapper for each thread, and the client  * is responsible for calling {@link #reset()} after each parse.  *<p>  * The unit tests for this class are in the tika-parsers module.  *</p>  */
end_comment

begin_class
specifier|public
class|class
name|RecursiveParserWrapper
extends|extends
name|ParserDecorator
block|{
comment|/**      * Generated serial version      */
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|9086536568120690938L
decl_stmt|;
comment|/**      * @deprecated use {@link org.apache.tika.sax.RecursiveParserWrapperHandler#TIKA_CONTENT}      */
annotation|@
name|Deprecated
specifier|public
specifier|final
specifier|static
name|Property
name|TIKA_CONTENT
init|=
name|AbstractRecursiveParserWrapperHandler
operator|.
name|TIKA_CONTENT
decl_stmt|;
comment|/**      * @deprecated use {@link org.apache.tika.sax.RecursiveParserWrapperHandler#PARSE_TIME_MILLIS}      */
annotation|@
name|Deprecated
specifier|public
specifier|final
specifier|static
name|Property
name|PARSE_TIME_MILLIS
init|=
name|AbstractRecursiveParserWrapperHandler
operator|.
name|PARSE_TIME_MILLIS
decl_stmt|;
comment|/**      * @deprecated use {@link org.apache.tika.sax.RecursiveParserWrapperHandler#EMBEDDED_EXCEPTION}      */
annotation|@
name|Deprecated
specifier|public
specifier|final
specifier|static
name|Property
name|WRITE_LIMIT_REACHED
init|=
name|AbstractRecursiveParserWrapperHandler
operator|.
name|WRITE_LIMIT_REACHED
decl_stmt|;
comment|/**      * @deprecated use {@link org.apache.tika.sax.RecursiveParserWrapperHandler#EMBEDDED_RESOURCE_LIMIT_REACHED}      */
annotation|@
name|Deprecated
specifier|public
specifier|final
specifier|static
name|Property
name|EMBEDDED_RESOURCE_LIMIT_REACHED
init|=
name|AbstractRecursiveParserWrapperHandler
operator|.
name|EMBEDDED_RESOURCE_LIMIT_REACHED
decl_stmt|;
comment|/**      * @deprecated use {@link org.apache.tika.sax.RecursiveParserWrapperHandler#EMBEDDED_EXCEPTION}      */
annotation|@
name|Deprecated
specifier|public
specifier|final
specifier|static
name|Property
name|EMBEDDED_EXCEPTION
init|=
name|AbstractRecursiveParserWrapperHandler
operator|.
name|EMBEDDED_EXCEPTION
decl_stmt|;
comment|/**      * @deprecated use {@link org.apache.tika.sax.RecursiveParserWrapperHandler#EMBEDDED_RESOURCE_PATH}      */
annotation|@
name|Deprecated
specifier|public
specifier|final
specifier|static
name|Property
name|EMBEDDED_RESOURCE_PATH
init|=
name|AbstractRecursiveParserWrapperHandler
operator|.
name|EMBEDDED_RESOURCE_PATH
decl_stmt|;
comment|/**      * @deprecated this should be passed in via the {@link RecursiveParserWrapperHandler}      */
annotation|@
name|Deprecated
specifier|private
name|ContentHandlerFactory
name|contentHandlerFactory
init|=
literal|null
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|catchEmbeddedExceptions
decl_stmt|;
comment|/**      * set this on the RecursiveParserWrapperHandler instead      * @deprecated this is here only for legacy behavior; it will be removed in 2.0 and/or 1.20      */
annotation|@
name|Deprecated
specifier|private
name|int
name|maxEmbeddedResources
init|=
operator|-
literal|1
decl_stmt|;
comment|/**      * @deprecated this is here only for legacy behavior; it will be removed in 2.0 and/or 1.20      */
annotation|@
name|Deprecated
specifier|private
name|ParserState
name|lastParseState
init|=
literal|null
decl_stmt|;
comment|/**      * Initialize the wrapper with {@link #catchEmbeddedExceptions} set      * to<code>true</code> as default.      *      * @param wrappedParser parser to use for the container documents and the embedded documents      */
specifier|public
name|RecursiveParserWrapper
parameter_list|(
name|Parser
name|wrappedParser
parameter_list|)
block|{
name|this
argument_list|(
name|wrappedParser
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**      *      * @param wrappedParser parser to wrap      * @param catchEmbeddedExceptions whether or not to catch+record embedded exceptions.      *                                If set to<code>false</code>, embedded exceptions will be thrown and      *                                the rest of the file will not be parsed. The following will not be ignored:      *                                  {@link CorruptedFileException}, {@link RuntimeException}      */
specifier|public
name|RecursiveParserWrapper
parameter_list|(
name|Parser
name|wrappedParser
parameter_list|,
name|boolean
name|catchEmbeddedExceptions
parameter_list|)
block|{
name|super
argument_list|(
name|wrappedParser
argument_list|)
expr_stmt|;
name|this
operator|.
name|catchEmbeddedExceptions
operator|=
name|catchEmbeddedExceptions
expr_stmt|;
block|}
comment|/**      * Initialize the wrapper with {@link #catchEmbeddedExceptions} set      * to<code>true</code> as default.      *      * @param wrappedParser parser to use for the container documents and the embedded documents      * @param contentHandlerFactory factory to use to generate a new content handler for      *                              the container document and each embedded document      * @deprecated use {@link RecursiveParserWrapper#RecursiveParserWrapper(Parser)}      */
annotation|@
name|Deprecated
specifier|public
name|RecursiveParserWrapper
parameter_list|(
name|Parser
name|wrappedParser
parameter_list|,
name|ContentHandlerFactory
name|contentHandlerFactory
parameter_list|)
block|{
name|this
argument_list|(
name|wrappedParser
argument_list|,
name|contentHandlerFactory
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**      * Initialize the wrapper.      *      * @param wrappedParser parser to use for the container documents and the embedded documents      * @param contentHandlerFactory factory to use to generate a new content handler for      *                              the container document and each embedded document      * @param catchEmbeddedExceptions whether or not to catch the embedded exceptions.      *                                If set to<code>true</code>, the stack traces will be stored in      *                                the metadata object with key: {@link #EMBEDDED_EXCEPTION}.      * @deprecated use {@link RecursiveParserWrapper#RecursiveParserWrapper(Parser, boolean)}      */
annotation|@
name|Deprecated
specifier|public
name|RecursiveParserWrapper
parameter_list|(
name|Parser
name|wrappedParser
parameter_list|,
name|ContentHandlerFactory
name|contentHandlerFactory
parameter_list|,
name|boolean
name|catchEmbeddedExceptions
parameter_list|)
block|{
name|super
argument_list|(
name|wrappedParser
argument_list|)
expr_stmt|;
name|this
operator|.
name|contentHandlerFactory
operator|=
name|contentHandlerFactory
expr_stmt|;
name|this
operator|.
name|catchEmbeddedExceptions
operator|=
name|catchEmbeddedExceptions
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Set
argument_list|<
name|MediaType
argument_list|>
name|getSupportedTypes
parameter_list|(
name|ParseContext
name|context
parameter_list|)
block|{
return|return
name|getWrappedParser
argument_list|()
operator|.
name|getSupportedTypes
argument_list|(
name|context
argument_list|)
return|;
block|}
comment|/**      * Acts like a regular parser except it ignores the ContentHandler      * and it automatically sets/overwrites the embedded Parser in the       * ParseContext object.      *<p>      * To retrieve the results of the parse, use {@link #getMetadata()}.      *<p>      * Make sure to call {@link #reset()} after each parse.      */
annotation|@
name|Override
specifier|public
name|void
name|parse
parameter_list|(
name|InputStream
name|stream
parameter_list|,
name|ContentHandler
name|recursiveParserWrapperHandler
parameter_list|,
name|Metadata
name|metadata
parameter_list|,
name|ParseContext
name|context
parameter_list|)
throws|throws
name|IOException
throws|,
name|SAXException
throws|,
name|TikaException
block|{
comment|//this tracks the state of the parent parser, per call to #parse
comment|//in future versions, we can remove lastParseState, and this will be thread-safe
name|ParserState
name|parserState
decl_stmt|;
if|if
condition|(
name|recursiveParserWrapperHandler
operator|instanceof
name|AbstractRecursiveParserWrapperHandler
condition|)
block|{
name|parserState
operator|=
operator|new
name|ParserState
argument_list|(
operator|(
name|AbstractRecursiveParserWrapperHandler
operator|)
name|recursiveParserWrapperHandler
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|parserState
operator|=
operator|new
name|ParserState
argument_list|(
operator|new
name|RecursiveParserWrapperHandler
argument_list|(
name|contentHandlerFactory
argument_list|,
name|maxEmbeddedResources
argument_list|)
argument_list|)
expr_stmt|;
name|lastParseState
operator|=
name|parserState
expr_stmt|;
block|}
name|EmbeddedParserDecorator
name|decorator
init|=
operator|new
name|EmbeddedParserDecorator
argument_list|(
name|getWrappedParser
argument_list|()
argument_list|,
literal|"/"
argument_list|,
name|parserState
argument_list|)
decl_stmt|;
name|context
operator|.
name|set
argument_list|(
name|Parser
operator|.
name|class
argument_list|,
name|decorator
argument_list|)
expr_stmt|;
name|ContentHandler
name|localHandler
init|=
name|parserState
operator|.
name|recursiveParserWrapperHandler
operator|.
name|getNewContentHandler
argument_list|()
decl_stmt|;
name|long
name|started
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|parserState
operator|.
name|recursiveParserWrapperHandler
operator|.
name|startDocument
argument_list|()
expr_stmt|;
try|try
block|{
name|getWrappedParser
argument_list|()
operator|.
name|parse
argument_list|(
name|stream
argument_list|,
name|localHandler
argument_list|,
name|metadata
argument_list|,
name|context
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SAXException
name|e
parameter_list|)
block|{
name|boolean
name|wlr
init|=
name|isWriteLimitReached
argument_list|(
name|e
argument_list|)
decl_stmt|;
if|if
condition|(
name|wlr
operator|==
literal|false
condition|)
block|{
throw|throw
name|e
throw|;
block|}
name|metadata
operator|.
name|set
argument_list|(
name|RecursiveParserWrapperHandler
operator|.
name|WRITE_LIMIT_REACHED
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
comment|//try our best to record the problem in the metadata object
comment|//then rethrow
name|String
name|stackTrace
init|=
name|ExceptionUtils
operator|.
name|getFilteredStackTrace
argument_list|(
name|e
argument_list|)
decl_stmt|;
name|metadata
operator|.
name|add
argument_list|(
name|TikaCoreProperties
operator|.
name|TIKA_META_EXCEPTION_PREFIX
operator|+
literal|"runtime"
argument_list|,
name|stackTrace
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
finally|finally
block|{
name|long
name|elapsedMillis
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|started
decl_stmt|;
name|metadata
operator|.
name|set
argument_list|(
name|RecursiveParserWrapperHandler
operator|.
name|PARSE_TIME_MILLIS
argument_list|,
name|Long
operator|.
name|toString
argument_list|(
name|elapsedMillis
argument_list|)
argument_list|)
expr_stmt|;
name|parserState
operator|.
name|recursiveParserWrapperHandler
operator|.
name|endDocument
argument_list|(
name|localHandler
argument_list|,
name|metadata
argument_list|)
expr_stmt|;
name|parserState
operator|.
name|recursiveParserWrapperHandler
operator|.
name|endDocument
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      *       * The first element in the returned list represents the       * data from the outer container file.  There is no guarantee      * about the ordering of the list after that.      *      * @deprecated use a {@link RecursiveParserWrapperHandler} instead      *      * @return list of Metadata objects that were gathered during the parse      * @throws IllegalStateException if you've used a {@link RecursiveParserWrapperHandler} in your last      * call to {@link #parse(InputStream, ContentHandler, Metadata, ParseContext)}      */
annotation|@
name|Deprecated
specifier|public
name|List
argument_list|<
name|Metadata
argument_list|>
name|getMetadata
parameter_list|()
block|{
if|if
condition|(
name|lastParseState
operator|!=
literal|null
condition|)
block|{
return|return
operator|(
operator|(
name|RecursiveParserWrapperHandler
operator|)
name|lastParseState
operator|.
name|recursiveParserWrapperHandler
operator|)
operator|.
name|getMetadataList
argument_list|()
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"This is deprecated; please use a RecursiveParserWrapperHandler instead"
argument_list|)
throw|;
block|}
block|}
comment|/**      * Set the maximum number of embedded resources to store.      * If the max is hit during parsing, the {@link #EMBEDDED_RESOURCE_LIMIT_REACHED}      * property will be added to the container document's Metadata.      *       *<p>      * If this value is< 0 (the default), the wrapper will store all Metadata.      * @deprecated set this on a {@link RecursiveParserWrapperHandler}      * @param max maximum number of embedded resources to store      */
annotation|@
name|Deprecated
specifier|public
name|void
name|setMaxEmbeddedResources
parameter_list|(
name|int
name|max
parameter_list|)
block|{
name|maxEmbeddedResources
operator|=
name|max
expr_stmt|;
block|}
comment|/**      * This clears the last parser state (metadata list, unknown count, hit embeddedresource count)      *      * @deprecated use a {@link org.apache.tika.sax.RecursiveParserWrapperHandler} instead      * @throws IllegalStateException if you used a {@link RecursiveParserWrapper} in your call      * to {@link #parse(InputStream, ContentHandler, Metadata, ParseContext)}      */
annotation|@
name|Deprecated
specifier|public
name|void
name|reset
parameter_list|()
block|{
if|if
condition|(
name|lastParseState
operator|!=
literal|null
condition|)
block|{
name|lastParseState
operator|=
operator|new
name|ParserState
argument_list|(
operator|new
name|RecursiveParserWrapperHandler
argument_list|(
name|contentHandlerFactory
argument_list|,
name|maxEmbeddedResources
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"This is deprecated; please use a RecursiveParserWrapperHandler instead"
argument_list|)
throw|;
block|}
block|}
comment|/**      * Copied/modified from WriteOutContentHandler.  Couldn't make that       * static, and we need to have something that will work       * with exceptions thrown from both BodyContentHandler and WriteOutContentHandler      * @param t      * @return      */
specifier|private
name|boolean
name|isWriteLimitReached
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
if|if
condition|(
name|t
operator|.
name|getMessage
argument_list|()
operator|!=
literal|null
operator|&&
name|t
operator|.
name|getMessage
argument_list|()
operator|.
name|indexOf
argument_list|(
literal|"Your document contained more than"
argument_list|)
operator|==
literal|0
condition|)
block|{
return|return
literal|true
return|;
block|}
else|else
block|{
return|return
name|t
operator|.
name|getCause
argument_list|()
operator|!=
literal|null
operator|&&
name|isWriteLimitReached
argument_list|(
name|t
operator|.
name|getCause
argument_list|()
argument_list|)
return|;
block|}
block|}
specifier|private
name|String
name|getResourceName
parameter_list|(
name|Metadata
name|metadata
parameter_list|,
name|ParserState
name|state
parameter_list|)
block|{
name|String
name|objectName
init|=
literal|""
decl_stmt|;
if|if
condition|(
name|metadata
operator|.
name|get
argument_list|(
name|TikaCoreProperties
operator|.
name|RESOURCE_NAME_KEY
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|objectName
operator|=
name|metadata
operator|.
name|get
argument_list|(
name|TikaCoreProperties
operator|.
name|RESOURCE_NAME_KEY
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|metadata
operator|.
name|get
argument_list|(
name|TikaCoreProperties
operator|.
name|EMBEDDED_RELATIONSHIP_ID
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|objectName
operator|=
name|metadata
operator|.
name|get
argument_list|(
name|TikaCoreProperties
operator|.
name|EMBEDDED_RELATIONSHIP_ID
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|objectName
operator|=
literal|"embedded-"
operator|+
operator|(
operator|++
name|state
operator|.
name|unknownCount
operator|)
expr_stmt|;
block|}
comment|//make sure that there isn't any path info in the objectName
comment|//some parsers can return paths, not just file names
name|objectName
operator|=
name|FilenameUtils
operator|.
name|getName
argument_list|(
name|objectName
argument_list|)
expr_stmt|;
return|return
name|objectName
return|;
block|}
specifier|private
class|class
name|EmbeddedParserDecorator
extends|extends
name|ParserDecorator
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|207648200464263337L
decl_stmt|;
specifier|private
name|String
name|location
init|=
literal|null
decl_stmt|;
specifier|private
specifier|final
name|ParserState
name|parserState
decl_stmt|;
specifier|private
name|EmbeddedParserDecorator
parameter_list|(
name|Parser
name|parser
parameter_list|,
name|String
name|location
parameter_list|,
name|ParserState
name|parseState
parameter_list|)
block|{
name|super
argument_list|(
name|parser
argument_list|)
expr_stmt|;
name|this
operator|.
name|location
operator|=
name|location
expr_stmt|;
if|if
condition|(
operator|!
name|this
operator|.
name|location
operator|.
name|endsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
name|this
operator|.
name|location
operator|+=
literal|"/"
expr_stmt|;
block|}
name|this
operator|.
name|parserState
operator|=
name|parseState
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|parse
parameter_list|(
name|InputStream
name|stream
parameter_list|,
name|ContentHandler
name|ignore
parameter_list|,
name|Metadata
name|metadata
parameter_list|,
name|ParseContext
name|context
parameter_list|)
throws|throws
name|IOException
throws|,
name|SAXException
throws|,
name|TikaException
block|{
comment|//Test to see if we should avoid parsing
if|if
condition|(
name|parserState
operator|.
name|recursiveParserWrapperHandler
operator|.
name|hasHitMaximumEmbeddedResources
argument_list|()
condition|)
block|{
return|return;
block|}
comment|// Work out what this thing is
name|String
name|objectName
init|=
name|getResourceName
argument_list|(
name|metadata
argument_list|,
name|parserState
argument_list|)
decl_stmt|;
name|String
name|objectLocation
init|=
name|this
operator|.
name|location
operator|+
name|objectName
decl_stmt|;
name|metadata
operator|.
name|add
argument_list|(
name|AbstractRecursiveParserWrapperHandler
operator|.
name|EMBEDDED_RESOURCE_PATH
argument_list|,
name|objectLocation
argument_list|)
expr_stmt|;
comment|//get a fresh handler
name|ContentHandler
name|localHandler
init|=
name|parserState
operator|.
name|recursiveParserWrapperHandler
operator|.
name|getNewContentHandler
argument_list|()
decl_stmt|;
name|parserState
operator|.
name|recursiveParserWrapperHandler
operator|.
name|startEmbeddedDocument
argument_list|(
name|localHandler
argument_list|,
name|metadata
argument_list|)
expr_stmt|;
name|Parser
name|preContextParser
init|=
name|context
operator|.
name|get
argument_list|(
name|Parser
operator|.
name|class
argument_list|)
decl_stmt|;
name|context
operator|.
name|set
argument_list|(
name|Parser
operator|.
name|class
argument_list|,
operator|new
name|EmbeddedParserDecorator
argument_list|(
name|getWrappedParser
argument_list|()
argument_list|,
name|objectLocation
argument_list|,
name|parserState
argument_list|)
argument_list|)
expr_stmt|;
name|long
name|started
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
try|try
block|{
name|super
operator|.
name|parse
argument_list|(
name|stream
argument_list|,
name|localHandler
argument_list|,
name|metadata
argument_list|,
name|context
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SAXException
name|e
parameter_list|)
block|{
name|boolean
name|wlr
init|=
name|isWriteLimitReached
argument_list|(
name|e
argument_list|)
decl_stmt|;
if|if
condition|(
name|wlr
operator|==
literal|true
condition|)
block|{
name|metadata
operator|.
name|add
argument_list|(
name|WRITE_LIMIT_REACHED
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|catchEmbeddedExceptions
condition|)
block|{
name|ParserUtils
operator|.
name|recordParserFailure
argument_list|(
name|this
argument_list|,
name|e
argument_list|,
name|metadata
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
name|e
throw|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|CorruptedFileException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|TikaException
name|e
parameter_list|)
block|{
if|if
condition|(
name|catchEmbeddedExceptions
condition|)
block|{
name|ParserUtils
operator|.
name|recordParserFailure
argument_list|(
name|this
argument_list|,
name|e
argument_list|,
name|metadata
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
name|e
throw|;
block|}
block|}
finally|finally
block|{
name|context
operator|.
name|set
argument_list|(
name|Parser
operator|.
name|class
argument_list|,
name|preContextParser
argument_list|)
expr_stmt|;
name|long
name|elapsedMillis
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|started
decl_stmt|;
name|metadata
operator|.
name|set
argument_list|(
name|RecursiveParserWrapperHandler
operator|.
name|PARSE_TIME_MILLIS
argument_list|,
name|Long
operator|.
name|toString
argument_list|(
name|elapsedMillis
argument_list|)
argument_list|)
expr_stmt|;
name|parserState
operator|.
name|recursiveParserWrapperHandler
operator|.
name|endEmbeddedDocument
argument_list|(
name|localHandler
argument_list|,
name|metadata
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * This tracks the state of the parse of a single document.      * In future versions, this will allow the RecursiveParserWrapper to be thread safe.      */
specifier|private
class|class
name|ParserState
block|{
specifier|private
name|int
name|unknownCount
init|=
literal|0
decl_stmt|;
specifier|private
specifier|final
name|AbstractRecursiveParserWrapperHandler
name|recursiveParserWrapperHandler
decl_stmt|;
specifier|private
name|ParserState
parameter_list|(
name|AbstractRecursiveParserWrapperHandler
name|handler
parameter_list|)
block|{
name|this
operator|.
name|recursiveParserWrapperHandler
operator|=
name|handler
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

