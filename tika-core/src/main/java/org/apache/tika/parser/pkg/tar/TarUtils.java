begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  Licensed to the Apache Software Foundation (ASF) under one or more  *  contributor license agreements.  See the NOTICE file distributed with  *  this work for additional information regarding copyright ownership.  *  The ASF licenses this file to You under the Apache License, Version 2.0  *  (the "License"); you may not use this file except in compliance with  *  the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  *  */
end_comment

begin_comment
comment|/*  * This package is based on the work done by Timothy Gerard Endres  * (time@ice.com) to whom the Ant project is very grateful for his great code.  *  * This package has since been copied from Apache Ant to Apache Tika.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|pkg
operator|.
name|tar
package|;
end_package

begin_comment
comment|/**  * This class provides static utility methods to work with byte streams.  *  */
end_comment

begin_comment
comment|// CheckStyle:HideUtilityClassConstructorCheck OFF (bc)
end_comment

begin_class
specifier|public
class|class
name|TarUtils
block|{
specifier|private
specifier|static
specifier|final
name|int
name|BYTE_MASK
init|=
literal|255
decl_stmt|;
comment|/**      * Parse an octal string from a header buffer. This is used for the      * file permission mode value.      *      * @param header The header buffer from which to parse.      * @param offset The offset into the buffer from which to parse.      * @param length The number of header bytes to parse.      * @return The long value of the octal string.      */
specifier|public
specifier|static
name|long
name|parseOctal
parameter_list|(
name|byte
index|[]
name|header
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|)
block|{
name|long
name|result
init|=
literal|0
decl_stmt|;
name|boolean
name|stillPadding
init|=
literal|true
decl_stmt|;
name|int
name|end
init|=
name|offset
operator|+
name|length
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|offset
init|;
name|i
operator|<
name|end
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|header
index|[
name|i
index|]
operator|==
literal|0
condition|)
block|{
break|break;
block|}
if|if
condition|(
name|header
index|[
name|i
index|]
operator|==
operator|(
name|byte
operator|)
literal|' '
operator|||
name|header
index|[
name|i
index|]
operator|==
literal|'0'
condition|)
block|{
if|if
condition|(
name|stillPadding
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|header
index|[
name|i
index|]
operator|==
operator|(
name|byte
operator|)
literal|' '
condition|)
block|{
break|break;
block|}
block|}
name|stillPadding
operator|=
literal|false
expr_stmt|;
comment|// CheckStyle:MagicNumber OFF
name|result
operator|=
operator|(
name|result
operator|<<
literal|3
operator|)
operator|+
operator|(
name|header
index|[
name|i
index|]
operator|-
literal|'0'
operator|)
expr_stmt|;
comment|// CheckStyle:MagicNumber ON
block|}
return|return
name|result
return|;
block|}
comment|/**      * Parse an entry name from a header buffer.      *      * @param header The header buffer from which to parse.      * @param offset The offset into the buffer from which to parse.      * @param length The number of header bytes to parse.      * @return The header's entry name.      */
specifier|public
specifier|static
name|StringBuffer
name|parseName
parameter_list|(
name|byte
index|[]
name|header
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|)
block|{
name|StringBuffer
name|result
init|=
operator|new
name|StringBuffer
argument_list|(
name|length
argument_list|)
decl_stmt|;
name|int
name|end
init|=
name|offset
operator|+
name|length
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|offset
init|;
name|i
operator|<
name|end
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|header
index|[
name|i
index|]
operator|==
literal|0
condition|)
block|{
break|break;
block|}
name|result
operator|.
name|append
argument_list|(
operator|(
name|char
operator|)
name|header
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
comment|/**      * Determine the number of bytes in an entry name.      *      * @param name The header name from which to parse.      * @param buf The buffer from which to parse.      * @param offset The offset into the buffer from which to parse.      * @param length The number of header bytes to parse.      * @return The number of bytes in a header's entry name.      */
specifier|public
specifier|static
name|int
name|getNameBytes
parameter_list|(
name|StringBuffer
name|name
parameter_list|,
name|byte
index|[]
name|buf
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|)
block|{
name|int
name|i
decl_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|length
operator|&&
name|i
operator|<
name|name
operator|.
name|length
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|buf
index|[
name|offset
operator|+
name|i
index|]
operator|=
operator|(
name|byte
operator|)
name|name
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
for|for
control|(
init|;
name|i
operator|<
name|length
condition|;
operator|++
name|i
control|)
block|{
name|buf
index|[
name|offset
operator|+
name|i
index|]
operator|=
literal|0
expr_stmt|;
block|}
return|return
name|offset
operator|+
name|length
return|;
block|}
comment|/**      * Parse an octal integer from a header buffer.      *      * @param value The header value      * @param buf The buffer from which to parse.      * @param offset The offset into the buffer from which to parse.      * @param length The number of header bytes to parse.      * @return The integer value of the octal bytes.      */
specifier|public
specifier|static
name|int
name|getOctalBytes
parameter_list|(
name|long
name|value
parameter_list|,
name|byte
index|[]
name|buf
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|)
block|{
name|int
name|idx
init|=
name|length
operator|-
literal|1
decl_stmt|;
name|buf
index|[
name|offset
operator|+
name|idx
index|]
operator|=
literal|0
expr_stmt|;
operator|--
name|idx
expr_stmt|;
name|buf
index|[
name|offset
operator|+
name|idx
index|]
operator|=
operator|(
name|byte
operator|)
literal|' '
expr_stmt|;
operator|--
name|idx
expr_stmt|;
if|if
condition|(
name|value
operator|==
literal|0
condition|)
block|{
name|buf
index|[
name|offset
operator|+
name|idx
index|]
operator|=
operator|(
name|byte
operator|)
literal|'0'
expr_stmt|;
operator|--
name|idx
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|long
name|val
init|=
name|value
init|;
name|idx
operator|>=
literal|0
operator|&&
name|val
operator|>
literal|0
condition|;
operator|--
name|idx
control|)
block|{
comment|// CheckStyle:MagicNumber OFF
name|buf
index|[
name|offset
operator|+
name|idx
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
operator|(
name|byte
operator|)
literal|'0'
operator|+
call|(
name|byte
call|)
argument_list|(
name|val
operator|&
literal|7
argument_list|)
argument_list|)
expr_stmt|;
name|val
operator|=
name|val
operator|>>
literal|3
expr_stmt|;
comment|// CheckStyle:MagicNumber ON
block|}
block|}
for|for
control|(
init|;
name|idx
operator|>=
literal|0
condition|;
operator|--
name|idx
control|)
block|{
name|buf
index|[
name|offset
operator|+
name|idx
index|]
operator|=
operator|(
name|byte
operator|)
literal|' '
expr_stmt|;
block|}
return|return
name|offset
operator|+
name|length
return|;
block|}
comment|/**      * Parse an octal long integer from a header buffer.      *      * @param value The header value      * @param buf The buffer from which to parse.      * @param offset The offset into the buffer from which to parse.      * @param length The number of header bytes to parse.      * @return The long value of the octal bytes.      */
specifier|public
specifier|static
name|int
name|getLongOctalBytes
parameter_list|(
name|long
name|value
parameter_list|,
name|byte
index|[]
name|buf
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|)
block|{
name|byte
index|[]
name|temp
init|=
operator|new
name|byte
index|[
name|length
operator|+
literal|1
index|]
decl_stmt|;
name|getOctalBytes
argument_list|(
name|value
argument_list|,
name|temp
argument_list|,
literal|0
argument_list|,
name|length
operator|+
literal|1
argument_list|)
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|temp
argument_list|,
literal|0
argument_list|,
name|buf
argument_list|,
name|offset
argument_list|,
name|length
argument_list|)
expr_stmt|;
return|return
name|offset
operator|+
name|length
return|;
block|}
comment|/**      * Parse the checksum octal integer from a header buffer.      *      * @param value The header value      * @param buf The buffer from which to parse.      * @param offset The offset into the buffer from which to parse.      * @param length The number of header bytes to parse.      * @return The integer value of the entry's checksum.      */
specifier|public
specifier|static
name|int
name|getCheckSumOctalBytes
parameter_list|(
name|long
name|value
parameter_list|,
name|byte
index|[]
name|buf
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|)
block|{
name|getOctalBytes
argument_list|(
name|value
argument_list|,
name|buf
argument_list|,
name|offset
argument_list|,
name|length
argument_list|)
expr_stmt|;
name|buf
index|[
name|offset
operator|+
name|length
operator|-
literal|1
index|]
operator|=
operator|(
name|byte
operator|)
literal|' '
expr_stmt|;
name|buf
index|[
name|offset
operator|+
name|length
operator|-
literal|2
index|]
operator|=
literal|0
expr_stmt|;
return|return
name|offset
operator|+
name|length
return|;
block|}
comment|/**      * Compute the checksum of a tar entry header.      *      * @param buf The tar entry's header buffer.      * @return The computed checksum.      */
specifier|public
specifier|static
name|long
name|computeCheckSum
parameter_list|(
name|byte
index|[]
name|buf
parameter_list|)
block|{
name|long
name|sum
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|buf
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|sum
operator|+=
name|BYTE_MASK
operator|&
name|buf
index|[
name|i
index|]
expr_stmt|;
block|}
return|return
name|sum
return|;
block|}
block|}
end_class

end_unit

