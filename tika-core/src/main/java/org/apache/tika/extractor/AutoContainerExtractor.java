begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|extractor
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|config
operator|.
name|TikaConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|detect
operator|.
name|Detector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|exception
operator|.
name|TikaException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|io
operator|.
name|CountingInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|io
operator|.
name|TikaInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|metadata
operator|.
name|Metadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|mime
operator|.
name|MediaType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|sax
operator|.
name|SecureContentHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|ContentHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_class
specifier|public
class|class
name|AutoContainerExtractor
implements|implements
name|ContainerExtractor
block|{
comment|/**      * Serial version UID      */
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|2261131045580861514L
decl_stmt|;
specifier|private
name|List
argument_list|<
name|ContainerExtractor
argument_list|>
name|extractors
decl_stmt|;
comment|/**      * Creates an auto-detecting parser instance using the default Tika      * configuration.      */
specifier|public
name|AutoContainerExtractor
parameter_list|()
block|{
name|this
argument_list|(
name|TikaConfig
operator|.
name|getDefaultConfig
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|AutoContainerExtractor
parameter_list|(
name|TikaConfig
name|config
parameter_list|)
block|{
name|this
operator|.
name|extractors
operator|=
name|config
operator|.
name|getContainerExtractors
argument_list|()
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|ContainerExtractor
argument_list|>
name|getExtractors
parameter_list|()
block|{
return|return
name|extractors
return|;
block|}
specifier|public
name|void
name|setExtractors
parameter_list|(
name|List
argument_list|<
name|ContainerExtractor
argument_list|>
name|extractors
parameter_list|)
block|{
name|this
operator|.
name|extractors
operator|=
name|extractors
expr_stmt|;
block|}
specifier|public
name|boolean
name|isSupported
parameter_list|(
name|TikaInputStream
name|input
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|ContainerExtractor
name|extractor
range|:
name|extractors
control|)
block|{
if|if
condition|(
name|extractor
operator|.
name|isSupported
argument_list|(
name|input
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
specifier|public
name|void
name|extract
parameter_list|(
name|TikaInputStream
name|stream
parameter_list|,
name|ContainerExtractor
name|recurseExtractor
parameter_list|,
name|ContainerEmbededResourceHandler
name|handler
parameter_list|)
throws|throws
name|IOException
throws|,
name|TikaException
block|{
comment|// Find a suitable extractor
name|ContainerExtractor
name|extractor
init|=
literal|null
decl_stmt|;
for|for
control|(
name|ContainerExtractor
name|e
range|:
name|extractors
control|)
block|{
if|if
condition|(
name|e
operator|.
name|isSupported
argument_list|(
name|stream
argument_list|)
condition|)
block|{
name|extractor
operator|=
name|e
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|extractor
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|TikaException
argument_list|(
literal|"Not a supported container format - no extractor found"
argument_list|)
throw|;
block|}
comment|// Have the extractor process it for us
name|extractor
operator|.
name|extract
argument_list|(
name|stream
argument_list|,
name|recurseExtractor
argument_list|,
name|handler
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

