begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|extractor
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|config
operator|.
name|TikaConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|detect
operator|.
name|Detector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|io
operator|.
name|TikaInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|metadata
operator|.
name|Metadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|metadata
operator|.
name|TikaCoreProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|mime
operator|.
name|MediaType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|mime
operator|.
name|MimeType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|mime
operator|.
name|MimeTypeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|mime
operator|.
name|MimeTypes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|AutoDetectParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|CompositeParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|ParseContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|Parser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|ParserDecorator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|PasswordProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|utils
operator|.
name|ExceptionUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|ContentHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_comment
comment|/**  * Utility class to handle common issues with embedded documents.  *<p/>  * Use statically if all that is needed is getting the EmbeddedDocumentExtractor.  * Otherwise, instantiate an instance.  *<p/>  * Note: This is not thread safe.  Make sure to instantiate one per thread.  */
end_comment

begin_class
specifier|public
class|class
name|EmbeddedDocumentUtil
implements|implements
name|Serializable
block|{
specifier|private
specifier|final
name|ParseContext
name|context
decl_stmt|;
specifier|private
specifier|final
name|EmbeddedDocumentExtractor
name|embeddedDocumentExtractor
decl_stmt|;
comment|//these are lazily initialized and can be null
specifier|private
name|TikaConfig
name|tikaConfig
decl_stmt|;
specifier|private
name|MimeTypes
name|mimeTypes
decl_stmt|;
specifier|private
name|Detector
name|detector
decl_stmt|;
specifier|public
name|EmbeddedDocumentUtil
parameter_list|(
name|ParseContext
name|context
parameter_list|)
block|{
name|this
operator|.
name|context
operator|=
name|context
expr_stmt|;
name|this
operator|.
name|embeddedDocumentExtractor
operator|=
name|getEmbeddedDocumentExtractor
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
comment|/**      * This offers a uniform way to get an EmbeddedDocumentExtractor from a ParseContext.      * As of Tika 1.15, an AutoDetectParser will automatically be added to parse      * embedded documents if no Parser.class is specified in the ParseContext.      *<p/>      * If you'd prefer not to parse embedded documents, set Parser.class      * to {@link org.apache.tika.parser.EmptyParser} in the ParseContext.      *      * @param context      * @return EmbeddedDocumentExtractor      */
specifier|public
specifier|static
name|EmbeddedDocumentExtractor
name|getEmbeddedDocumentExtractor
parameter_list|(
name|ParseContext
name|context
parameter_list|)
block|{
name|EmbeddedDocumentExtractor
name|extractor
init|=
name|context
operator|.
name|get
argument_list|(
name|EmbeddedDocumentExtractor
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|extractor
operator|==
literal|null
condition|)
block|{
comment|//ensure that an AutoDetectParser is
comment|//available for parsing embedded docs TIKA-2096
name|Parser
name|embeddedParser
init|=
name|context
operator|.
name|get
argument_list|(
name|Parser
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|embeddedParser
operator|==
literal|null
condition|)
block|{
name|TikaConfig
name|tikaConfig
init|=
name|context
operator|.
name|get
argument_list|(
name|TikaConfig
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|tikaConfig
operator|==
literal|null
condition|)
block|{
name|context
operator|.
name|set
argument_list|(
name|Parser
operator|.
name|class
argument_list|,
operator|new
name|AutoDetectParser
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|context
operator|.
name|set
argument_list|(
name|Parser
operator|.
name|class
argument_list|,
operator|new
name|AutoDetectParser
argument_list|(
name|tikaConfig
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|extractor
operator|=
operator|new
name|ParsingEmbeddedDocumentExtractor
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
return|return
name|extractor
return|;
block|}
specifier|public
name|PasswordProvider
name|getPasswordProvider
parameter_list|()
block|{
return|return
name|context
operator|.
name|get
argument_list|(
name|PasswordProvider
operator|.
name|class
argument_list|)
return|;
block|}
specifier|public
name|Detector
name|getDetector
parameter_list|()
block|{
comment|//be as lazy as possible and cache
name|Detector
name|localDetector
init|=
name|context
operator|.
name|get
argument_list|(
name|Detector
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|localDetector
operator|!=
literal|null
condition|)
block|{
return|return
name|localDetector
return|;
block|}
if|if
condition|(
name|detector
operator|!=
literal|null
condition|)
block|{
return|return
name|detector
return|;
block|}
name|detector
operator|=
name|getTikaConfig
argument_list|()
operator|.
name|getDetector
argument_list|()
expr_stmt|;
return|return
name|detector
return|;
block|}
specifier|public
name|MimeTypes
name|getMimeTypes
parameter_list|()
block|{
name|MimeTypes
name|localMimeTypes
init|=
name|context
operator|.
name|get
argument_list|(
name|MimeTypes
operator|.
name|class
argument_list|)
decl_stmt|;
comment|//be as lazy as possible and cache the mimeTypes
if|if
condition|(
name|localMimeTypes
operator|!=
literal|null
condition|)
block|{
return|return
name|localMimeTypes
return|;
block|}
if|if
condition|(
name|mimeTypes
operator|!=
literal|null
condition|)
block|{
return|return
name|mimeTypes
return|;
block|}
name|mimeTypes
operator|=
name|getTikaConfig
argument_list|()
operator|.
name|getMimeRepository
argument_list|()
expr_stmt|;
return|return
name|mimeTypes
return|;
block|}
comment|/**      * @return Returns a {@link TikaConfig} -- trying to find it first in the ParseContext      * that was included during initialization, and then creating a new one from      * via {@link TikaConfig#getDefaultConfig()} if it can't find one in the      * ParseContext. This caches the default config so that it only has to be created once.      */
specifier|public
name|TikaConfig
name|getTikaConfig
parameter_list|()
block|{
comment|//be as lazy as possible and cache the TikaConfig
if|if
condition|(
name|tikaConfig
operator|==
literal|null
condition|)
block|{
name|tikaConfig
operator|=
name|context
operator|.
name|get
argument_list|(
name|TikaConfig
operator|.
name|class
argument_list|)
expr_stmt|;
if|if
condition|(
name|tikaConfig
operator|==
literal|null
condition|)
block|{
name|tikaConfig
operator|=
name|TikaConfig
operator|.
name|getDefaultConfig
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|tikaConfig
return|;
block|}
specifier|public
name|String
name|getExtension
parameter_list|(
name|TikaInputStream
name|is
parameter_list|,
name|Metadata
name|metadata
parameter_list|)
block|{
name|String
name|mimeString
init|=
name|metadata
operator|.
name|get
argument_list|(
name|Metadata
operator|.
name|CONTENT_TYPE
argument_list|)
decl_stmt|;
comment|//use the buffered mimetypes as default
name|MimeTypes
name|localMimeTypes
init|=
name|getMimeTypes
argument_list|()
decl_stmt|;
name|MimeType
name|mimeType
init|=
literal|null
decl_stmt|;
name|boolean
name|detected
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|mimeString
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|mimeType
operator|=
name|localMimeTypes
operator|.
name|forName
argument_list|(
name|mimeString
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MimeTypeException
name|e
parameter_list|)
block|{
comment|//swallow
block|}
block|}
if|if
condition|(
name|mimeType
operator|==
literal|null
condition|)
block|{
try|try
block|{
name|MediaType
name|mediaType
init|=
name|getDetector
argument_list|()
operator|.
name|detect
argument_list|(
name|is
argument_list|,
name|metadata
argument_list|)
decl_stmt|;
name|mimeType
operator|=
name|localMimeTypes
operator|.
name|forName
argument_list|(
name|mediaType
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|detected
operator|=
literal|true
expr_stmt|;
name|is
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|//swallow
block|}
catch|catch
parameter_list|(
name|MimeTypeException
name|e
parameter_list|)
block|{
comment|//swallow
block|}
block|}
if|if
condition|(
name|mimeType
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|detected
condition|)
block|{
comment|//set or correct the mime type
name|metadata
operator|.
name|set
argument_list|(
name|Metadata
operator|.
name|CONTENT_TYPE
argument_list|,
name|mimeType
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|mimeType
operator|.
name|getExtension
argument_list|()
return|;
block|}
return|return
literal|".bin"
return|;
block|}
comment|/**      * @return Returns a {@link TikaConfig} -- trying to find it first in the ParseContext      * that was included in the initialization, and then creating a new one from      * via {@link TikaConfig#getDefaultConfig()} if it can't find one in the      * ParseContext.      *      * @deprecated as of 1.17, use {@link #getTikaConfig()} instead      */
annotation|@
name|Deprecated
specifier|public
name|TikaConfig
name|getConfig
parameter_list|()
block|{
name|TikaConfig
name|config
init|=
name|context
operator|.
name|get
argument_list|(
name|TikaConfig
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|config
operator|==
literal|null
condition|)
block|{
name|config
operator|=
name|TikaConfig
operator|.
name|getDefaultConfig
argument_list|()
expr_stmt|;
block|}
return|return
name|config
return|;
block|}
specifier|public
specifier|static
name|void
name|recordException
parameter_list|(
name|Throwable
name|t
parameter_list|,
name|Metadata
name|m
parameter_list|)
block|{
name|String
name|ex
init|=
name|ExceptionUtils
operator|.
name|getFilteredStackTrace
argument_list|(
name|t
argument_list|)
decl_stmt|;
name|m
operator|.
name|add
argument_list|(
name|TikaCoreProperties
operator|.
name|TIKA_META_EXCEPTION_WARNING
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|recordEmbeddedStreamException
parameter_list|(
name|Throwable
name|t
parameter_list|,
name|Metadata
name|m
parameter_list|)
block|{
name|String
name|ex
init|=
name|ExceptionUtils
operator|.
name|getFilteredStackTrace
argument_list|(
name|t
argument_list|)
decl_stmt|;
name|m
operator|.
name|add
argument_list|(
name|TikaCoreProperties
operator|.
name|TIKA_META_EXCEPTION_EMBEDDED_STREAM
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
specifier|public
name|boolean
name|shouldParseEmbedded
parameter_list|(
name|Metadata
name|m
parameter_list|)
block|{
return|return
name|getEmbeddedDocumentExtractor
argument_list|()
operator|.
name|shouldParseEmbedded
argument_list|(
name|m
argument_list|)
return|;
block|}
specifier|private
name|EmbeddedDocumentExtractor
name|getEmbeddedDocumentExtractor
parameter_list|()
block|{
return|return
name|embeddedDocumentExtractor
return|;
block|}
specifier|public
name|void
name|parseEmbedded
parameter_list|(
name|InputStream
name|inputStream
parameter_list|,
name|ContentHandler
name|handler
parameter_list|,
name|Metadata
name|metadata
parameter_list|,
name|boolean
name|outputHtml
parameter_list|)
throws|throws
name|IOException
throws|,
name|SAXException
block|{
name|embeddedDocumentExtractor
operator|.
name|parseEmbedded
argument_list|(
name|inputStream
argument_list|,
name|handler
argument_list|,
name|metadata
argument_list|,
name|outputHtml
argument_list|)
expr_stmt|;
block|}
comment|/**      * Tries to find an existing parser within the ParseContext.      * It looks inside of CompositeParsers and ParserDecorators.      * The use case is when a parser needs to parse an internal stream      * that is _part_ of the document, e.g. rtf body inside an msg.      *<p/>      * Can return<code>null</code> if the context contains no parser or      * the correct parser can't be found.      *      * @param clazz parser class to search for      * @param context      * @return      */
specifier|public
specifier|static
name|Parser
name|tryToFindExistingLeafParser
parameter_list|(
name|Class
name|clazz
parameter_list|,
name|ParseContext
name|context
parameter_list|)
block|{
name|Parser
name|p
init|=
name|context
operator|.
name|get
argument_list|(
name|Parser
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|equals
argument_list|(
name|p
argument_list|,
name|clazz
argument_list|)
condition|)
block|{
return|return
name|p
return|;
block|}
name|Parser
name|returnParser
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|p
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|p
operator|instanceof
name|ParserDecorator
condition|)
block|{
name|p
operator|=
name|findInDecorated
argument_list|(
operator|(
name|ParserDecorator
operator|)
name|p
argument_list|,
name|clazz
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|equals
argument_list|(
name|p
argument_list|,
name|clazz
argument_list|)
condition|)
block|{
return|return
name|p
return|;
block|}
if|if
condition|(
name|p
operator|instanceof
name|CompositeParser
condition|)
block|{
name|returnParser
operator|=
name|findInComposite
argument_list|(
operator|(
name|CompositeParser
operator|)
name|p
argument_list|,
name|clazz
argument_list|,
name|context
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|returnParser
operator|!=
literal|null
operator|&&
name|equals
argument_list|(
name|returnParser
argument_list|,
name|clazz
argument_list|)
condition|)
block|{
return|return
name|returnParser
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|private
specifier|static
name|Parser
name|findInDecorated
parameter_list|(
name|ParserDecorator
name|p
parameter_list|,
name|Class
name|clazz
parameter_list|)
block|{
name|Parser
name|candidate
init|=
name|p
operator|.
name|getWrappedParser
argument_list|()
decl_stmt|;
if|if
condition|(
name|equals
argument_list|(
name|candidate
argument_list|,
name|clazz
argument_list|)
condition|)
block|{
return|return
name|candidate
return|;
block|}
if|if
condition|(
name|candidate
operator|instanceof
name|ParserDecorator
condition|)
block|{
name|candidate
operator|=
name|findInDecorated
argument_list|(
operator|(
name|ParserDecorator
operator|)
name|candidate
argument_list|,
name|clazz
argument_list|)
expr_stmt|;
block|}
return|return
name|candidate
return|;
block|}
specifier|private
specifier|static
name|Parser
name|findInComposite
parameter_list|(
name|CompositeParser
name|p
parameter_list|,
name|Class
name|clazz
parameter_list|,
name|ParseContext
name|context
parameter_list|)
block|{
name|Map
argument_list|<
name|MediaType
argument_list|,
name|Parser
argument_list|>
name|map
init|=
name|p
operator|.
name|getParsers
argument_list|(
name|context
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|MediaType
argument_list|,
name|Parser
argument_list|>
name|e
range|:
name|map
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|Parser
name|candidate
init|=
name|e
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|equals
argument_list|(
name|candidate
argument_list|,
name|clazz
argument_list|)
condition|)
block|{
return|return
name|candidate
return|;
block|}
if|if
condition|(
name|candidate
operator|instanceof
name|ParserDecorator
condition|)
block|{
name|candidate
operator|=
name|findInDecorated
argument_list|(
operator|(
name|ParserDecorator
operator|)
name|candidate
argument_list|,
name|clazz
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|equals
argument_list|(
name|candidate
argument_list|,
name|clazz
argument_list|)
condition|)
block|{
return|return
name|candidate
return|;
block|}
if|if
condition|(
name|candidate
operator|instanceof
name|CompositeParser
condition|)
block|{
name|candidate
operator|=
name|findInComposite
argument_list|(
operator|(
name|CompositeParser
operator|)
name|candidate
argument_list|,
name|clazz
argument_list|,
name|context
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|equals
argument_list|(
name|candidate
argument_list|,
name|clazz
argument_list|)
condition|)
block|{
return|return
name|candidate
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|private
specifier|static
name|boolean
name|equals
parameter_list|(
name|Parser
name|parser
parameter_list|,
name|Class
name|clazz
parameter_list|)
block|{
if|if
condition|(
name|parser
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
name|parser
operator|.
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|clazz
argument_list|)
return|;
block|}
block|}
end_class

end_unit

