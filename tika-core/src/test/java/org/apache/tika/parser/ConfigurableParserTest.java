begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|Tika
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|config
operator|.
name|TikaConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|metadata
operator|.
name|Metadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigInteger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_class
specifier|public
class|class
name|ConfigurableParserTest
block|{
specifier|public
specifier|static
specifier|final
name|String
name|TIKA_CFG_FILE
init|=
literal|"org/apache/tika/config/TIKA-1508-configurable.xml"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|TEST_PARAM
init|=
literal|"testparam"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|TEST_PARAM_VAL
init|=
literal|"testparamval"
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|testConfigurableParser
parameter_list|()
throws|throws
name|Exception
block|{
name|URL
name|configFileUrl
init|=
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
operator|.
name|getResource
argument_list|(
name|TIKA_CFG_FILE
argument_list|)
decl_stmt|;
assert|assert
name|configFileUrl
operator|!=
literal|null
assert|;
name|TikaConfig
name|config
init|=
operator|new
name|TikaConfig
argument_list|(
name|configFileUrl
argument_list|)
decl_stmt|;
name|Tika
name|tika
init|=
operator|new
name|Tika
argument_list|(
name|config
argument_list|)
decl_stmt|;
name|Metadata
name|md
init|=
operator|new
name|Metadata
argument_list|()
decl_stmt|;
name|tika
operator|.
name|parse
argument_list|(
name|configFileUrl
operator|.
name|openStream
argument_list|()
argument_list|,
name|md
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|TEST_PARAM_VAL
argument_list|,
name|md
operator|.
name|get
argument_list|(
name|TEST_PARAM
argument_list|)
argument_list|)
expr_stmt|;
comment|//assert that param from configuration file is read, given to parser and it copied to metadata
block|}
annotation|@
name|Test
specifier|public
name|void
name|testConfigurableParserTypes
parameter_list|()
throws|throws
name|Exception
block|{
name|URL
name|configFileUrl
init|=
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
operator|.
name|getResource
argument_list|(
name|TIKA_CFG_FILE
argument_list|)
decl_stmt|;
assert|assert
name|configFileUrl
operator|!=
literal|null
assert|;
name|TikaConfig
name|config
init|=
operator|new
name|TikaConfig
argument_list|(
name|configFileUrl
argument_list|)
decl_stmt|;
name|Tika
name|tika
init|=
operator|new
name|Tika
argument_list|(
name|config
argument_list|)
decl_stmt|;
name|Metadata
name|md
init|=
operator|new
name|Metadata
argument_list|()
decl_stmt|;
name|tika
operator|.
name|parse
argument_list|(
name|configFileUrl
operator|.
name|openStream
argument_list|()
argument_list|,
name|md
argument_list|)
expr_stmt|;
name|HashMap
argument_list|<
name|String
argument_list|,
name|Class
argument_list|>
name|expct
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Class
argument_list|>
argument_list|()
block|{
block|{
name|put
argument_list|(
literal|"xint"
argument_list|,
name|Integer
operator|.
name|class
argument_list|)
expr_stmt|;
name|put
argument_list|(
literal|"xfile"
argument_list|,
name|File
operator|.
name|class
argument_list|)
expr_stmt|;
name|put
argument_list|(
literal|"xlong"
argument_list|,
name|Long
operator|.
name|class
argument_list|)
expr_stmt|;
name|put
argument_list|(
literal|"xshort"
argument_list|,
name|Short
operator|.
name|class
argument_list|)
expr_stmt|;
name|put
argument_list|(
literal|"xfloat"
argument_list|,
name|Float
operator|.
name|class
argument_list|)
expr_stmt|;
name|put
argument_list|(
literal|"xdouble"
argument_list|,
name|Double
operator|.
name|class
argument_list|)
expr_stmt|;
name|put
argument_list|(
literal|"xbigint"
argument_list|,
name|BigInteger
operator|.
name|class
argument_list|)
expr_stmt|;
name|put
argument_list|(
literal|"xurl"
argument_list|,
name|URL
operator|.
name|class
argument_list|)
expr_stmt|;
name|put
argument_list|(
literal|"xuri"
argument_list|,
name|URI
operator|.
name|class
argument_list|)
expr_stmt|;
name|put
argument_list|(
literal|"xbool"
argument_list|,
name|Boolean
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Class
argument_list|>
name|entry
range|:
name|expct
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|md
operator|.
name|get
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
operator|+
literal|"-type"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

