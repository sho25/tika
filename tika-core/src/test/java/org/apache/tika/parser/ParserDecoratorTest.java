begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|mime
operator|.
name|MediaType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|ParserDecoratorTest
block|{
annotation|@
name|Test
specifier|public
name|void
name|withAndWithoutTypes
parameter_list|()
block|{
name|Set
argument_list|<
name|MediaType
argument_list|>
name|onlyTxt
init|=
name|Collections
operator|.
name|singleton
argument_list|(
name|MediaType
operator|.
name|TEXT_PLAIN
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|MediaType
argument_list|>
name|onlyOct
init|=
name|Collections
operator|.
name|singleton
argument_list|(
name|MediaType
operator|.
name|OCTET_STREAM
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|MediaType
argument_list|>
name|both
init|=
operator|new
name|HashSet
argument_list|<
name|MediaType
argument_list|>
argument_list|()
decl_stmt|;
name|both
operator|.
name|addAll
argument_list|(
name|onlyOct
argument_list|)
expr_stmt|;
name|both
operator|.
name|addAll
argument_list|(
name|onlyTxt
argument_list|)
expr_stmt|;
name|Parser
name|p
decl_stmt|;
name|Set
argument_list|<
name|MediaType
argument_list|>
name|types
decl_stmt|;
name|ParseContext
name|context
init|=
operator|new
name|ParseContext
argument_list|()
decl_stmt|;
comment|// With a parser of no types, get the decorated type
name|p
operator|=
name|ParserDecorator
operator|.
name|withTypes
argument_list|(
name|EmptyParser
operator|.
name|INSTANCE
argument_list|,
name|onlyTxt
argument_list|)
expr_stmt|;
name|types
operator|=
name|p
operator|.
name|getSupportedTypes
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|types
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|types
operator|.
name|toString
argument_list|()
argument_list|,
literal|true
argument_list|,
name|types
operator|.
name|contains
argument_list|(
name|MediaType
operator|.
name|TEXT_PLAIN
argument_list|)
argument_list|)
expr_stmt|;
comment|// With a parser with other types, still just the decorated type
name|p
operator|=
name|ParserDecorator
operator|.
name|withTypes
argument_list|(
operator|new
name|DummyParser
argument_list|(
name|onlyOct
argument_list|,
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
argument_list|,
literal|""
argument_list|)
argument_list|,
name|onlyTxt
argument_list|)
expr_stmt|;
name|types
operator|=
name|p
operator|.
name|getSupportedTypes
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|types
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|types
operator|.
name|toString
argument_list|()
argument_list|,
literal|true
argument_list|,
name|types
operator|.
name|contains
argument_list|(
name|MediaType
operator|.
name|TEXT_PLAIN
argument_list|)
argument_list|)
expr_stmt|;
comment|// Exclude will remove if there
name|p
operator|=
name|ParserDecorator
operator|.
name|withoutTypes
argument_list|(
name|EmptyParser
operator|.
name|INSTANCE
argument_list|,
name|onlyTxt
argument_list|)
expr_stmt|;
name|types
operator|=
name|p
operator|.
name|getSupportedTypes
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|types
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|p
operator|=
name|ParserDecorator
operator|.
name|withoutTypes
argument_list|(
operator|new
name|DummyParser
argument_list|(
name|onlyOct
argument_list|,
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
argument_list|,
literal|""
argument_list|)
argument_list|,
name|onlyTxt
argument_list|)
expr_stmt|;
name|types
operator|=
name|p
operator|.
name|getSupportedTypes
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|types
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|types
operator|.
name|toString
argument_list|()
argument_list|,
literal|true
argument_list|,
name|types
operator|.
name|contains
argument_list|(
name|MediaType
operator|.
name|OCTET_STREAM
argument_list|)
argument_list|)
expr_stmt|;
name|p
operator|=
name|ParserDecorator
operator|.
name|withoutTypes
argument_list|(
operator|new
name|DummyParser
argument_list|(
name|both
argument_list|,
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
argument_list|,
literal|""
argument_list|)
argument_list|,
name|onlyTxt
argument_list|)
expr_stmt|;
name|types
operator|=
name|p
operator|.
name|getSupportedTypes
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|types
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|types
operator|.
name|toString
argument_list|()
argument_list|,
literal|true
argument_list|,
name|types
operator|.
name|contains
argument_list|(
name|MediaType
operator|.
name|OCTET_STREAM
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

