begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|utils
operator|.
name|RereadableInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_class
specifier|public
class|class
name|TestRereadableInputStream
block|{
specifier|private
specifier|final
name|int
name|TEST_SIZE
init|=
literal|3
decl_stmt|;
specifier|private
specifier|final
name|int
name|MEMORY_THRESHOLD
init|=
literal|1
decl_stmt|;
specifier|private
specifier|final
name|int
name|NUM_PASSES
init|=
literal|4
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|test
parameter_list|()
throws|throws
name|IOException
block|{
name|InputStream
name|is
init|=
name|createTestInputStream
argument_list|()
decl_stmt|;
name|RereadableInputStream
name|ris
init|=
operator|new
name|RereadableInputStream
argument_list|(
name|is
argument_list|,
name|MEMORY_THRESHOLD
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
decl_stmt|;
try|try
block|{
for|for
control|(
name|int
name|pass
init|=
literal|0
init|;
name|pass
operator|<
name|NUM_PASSES
condition|;
name|pass
operator|++
control|)
block|{
for|for
control|(
name|int
name|byteNum
init|=
literal|0
init|;
name|byteNum
operator|<
name|TEST_SIZE
condition|;
name|byteNum
operator|++
control|)
block|{
name|int
name|byteRead
init|=
name|ris
operator|.
name|read
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Pass = "
operator|+
name|pass
operator|+
literal|", byte num should be "
operator|+
name|byteNum
operator|+
literal|" but is "
operator|+
name|byteRead
operator|+
literal|"."
argument_list|,
name|byteNum
argument_list|,
name|byteRead
argument_list|)
expr_stmt|;
block|}
name|ris
operator|.
name|rewind
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
comment|// The RereadableInputStream should close the original input
comment|// stream (if it hasn't already).
name|ris
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * Test that the constructor's readToEndOfStreamOnFirstRewind parameter      * correctly determines the behavior.      *       * @throws IOException      */
annotation|@
name|Test
specifier|public
name|void
name|testRewind
parameter_list|()
throws|throws
name|IOException
block|{
name|doTestRewind
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|doTestRewind
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|doTestRewind
parameter_list|(
name|boolean
name|readToEndOnRewind
parameter_list|)
throws|throws
name|IOException
block|{
name|RereadableInputStream
name|ris
init|=
literal|null
decl_stmt|;
try|try
block|{
name|InputStream
name|s1
init|=
name|createTestInputStream
argument_list|()
decl_stmt|;
name|ris
operator|=
operator|new
name|RereadableInputStream
argument_list|(
name|s1
argument_list|,
literal|5
argument_list|,
name|readToEndOnRewind
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|ris
operator|.
name|read
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|ris
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|ris
operator|.
name|rewind
argument_list|()
expr_stmt|;
name|boolean
name|moreBytesWereRead
init|=
operator|(
name|ris
operator|.
name|getSize
argument_list|()
operator|>
literal|1
operator|)
decl_stmt|;
name|assertEquals
argument_list|(
name|readToEndOnRewind
argument_list|,
name|moreBytesWereRead
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|ris
operator|!=
literal|null
condition|)
block|{
name|ris
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|TestInputStream
name|createTestInputStream
parameter_list|()
throws|throws
name|IOException
block|{
return|return
operator|new
name|TestInputStream
argument_list|(
operator|new
name|BufferedInputStream
argument_list|(
operator|new
name|FileInputStream
argument_list|(
name|createTestFile
argument_list|()
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
specifier|private
name|File
name|createTestFile
parameter_list|()
throws|throws
name|IOException
block|{
name|File
name|testfile
init|=
name|File
operator|.
name|createTempFile
argument_list|(
literal|"TIKA_ris_test"
argument_list|,
literal|".tmp"
argument_list|)
decl_stmt|;
name|testfile
operator|.
name|deleteOnExit
argument_list|()
expr_stmt|;
name|FileOutputStream
name|fos
init|=
operator|new
name|FileOutputStream
argument_list|(
name|testfile
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|TEST_SIZE
condition|;
name|i
operator|++
control|)
block|{
name|fos
operator|.
name|write
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
name|fos
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|testfile
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCloseBehavior
parameter_list|()
throws|throws
name|IOException
block|{
name|doACloseBehaviorTest
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|doACloseBehaviorTest
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|doACloseBehaviorTest
parameter_list|(
name|boolean
name|wantToClose
parameter_list|)
throws|throws
name|IOException
block|{
name|TestInputStream
name|tis
init|=
name|createTestInputStream
argument_list|()
decl_stmt|;
name|RereadableInputStream
name|ris
init|=
operator|new
name|RereadableInputStream
argument_list|(
name|tis
argument_list|,
literal|5
argument_list|,
literal|true
argument_list|,
name|wantToClose
argument_list|)
decl_stmt|;
name|ris
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|wantToClose
argument_list|,
name|tis
operator|.
name|isClosed
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|tis
operator|.
name|isClosed
argument_list|()
condition|)
block|{
name|tis
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * Adds isClosed() to a BufferedInputStream.      */
class|class
name|TestInputStream
extends|extends
name|BufferedInputStream
block|{
specifier|private
name|boolean
name|closed
decl_stmt|;
specifier|public
name|TestInputStream
parameter_list|(
name|InputStream
name|inputStream
parameter_list|)
block|{
name|super
argument_list|(
name|inputStream
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|super
operator|.
name|close
argument_list|()
expr_stmt|;
name|closed
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|boolean
name|isClosed
parameter_list|()
block|{
return|return
name|closed
return|;
block|}
block|}
block|}
end_class

end_unit

