begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|detect
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|metadata
operator|.
name|Metadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|mime
operator|.
name|MediaType
import|;
end_import

begin_comment
comment|/**  * Test cases for the {@link TypeDetector} class.  */
end_comment

begin_class
specifier|public
class|class
name|TypeDetectorTest
extends|extends
name|TestCase
block|{
specifier|private
name|Detector
name|detector
init|=
operator|new
name|TypeDetector
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
init|=
operator|new
name|TreeMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
name|params
operator|.
name|put
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
specifier|final
name|MediaType
name|TEXT_PLAIN_A_EQ_B
init|=
operator|new
name|MediaType
argument_list|(
literal|"text"
argument_list|,
literal|"plain"
argument_list|,
name|params
argument_list|)
decl_stmt|;
specifier|public
name|void
name|testDetect
parameter_list|()
block|{
name|assertDetect
argument_list|(
name|MediaType
operator|.
name|TEXT_PLAIN
argument_list|,
literal|"text/plain"
argument_list|)
expr_stmt|;
name|assertDetect
argument_list|(
name|MediaType
operator|.
name|TEXT_PLAIN
argument_list|,
literal|"TEXT/PLAIN"
argument_list|)
expr_stmt|;
name|assertDetect
argument_list|(
name|MediaType
operator|.
name|TEXT_PLAIN
argument_list|,
literal|" text/\tplain\n"
argument_list|)
expr_stmt|;
name|assertDetect
argument_list|(
name|TEXT_PLAIN_A_EQ_B
argument_list|,
literal|"text/plain; a=b"
argument_list|)
expr_stmt|;
name|assertDetect
argument_list|(
name|TEXT_PLAIN_A_EQ_B
argument_list|,
literal|"\ttext/plain; a=b\n"
argument_list|)
expr_stmt|;
name|assertDetect
argument_list|(
name|MediaType
operator|.
name|OCTET_STREAM
argument_list|,
literal|"text\\plain"
argument_list|)
expr_stmt|;
comment|// test also the zero input cases
name|assertDetect
argument_list|(
name|MediaType
operator|.
name|OCTET_STREAM
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|assertDetect
argument_list|(
name|MediaType
operator|.
name|OCTET_STREAM
argument_list|,
literal|null
argument_list|)
expr_stmt|;
try|try
block|{
name|assertEquals
argument_list|(
name|MediaType
operator|.
name|OCTET_STREAM
argument_list|,
name|detector
operator|.
name|detect
argument_list|(
literal|null
argument_list|,
operator|new
name|Metadata
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|fail
argument_list|(
literal|"TypeDetector should never throw an IOException"
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|assertDetect
parameter_list|(
name|MediaType
name|type
parameter_list|,
name|String
name|name
parameter_list|)
block|{
name|Metadata
name|metadata
init|=
operator|new
name|Metadata
argument_list|()
decl_stmt|;
name|metadata
operator|.
name|set
argument_list|(
name|Metadata
operator|.
name|CONTENT_TYPE
argument_list|,
name|name
argument_list|)
expr_stmt|;
try|try
block|{
name|assertEquals
argument_list|(
name|type
argument_list|,
name|detector
operator|.
name|detect
argument_list|(
literal|null
argument_list|,
name|metadata
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|fail
argument_list|(
literal|"TypeDetector should never throw an IOException"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

