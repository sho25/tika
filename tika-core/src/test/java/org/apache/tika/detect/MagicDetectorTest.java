begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|detect
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|metadata
operator|.
name|Metadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|mime
operator|.
name|MediaType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
operator|.
name|US_ASCII
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
operator|.
name|UTF_16BE
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
operator|.
name|UTF_16LE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_comment
comment|/**  * Test cases for the {@link MagicDetector} class.  */
end_comment

begin_class
specifier|public
class|class
name|MagicDetectorTest
block|{
annotation|@
name|Test
specifier|public
name|void
name|testDetectNull
parameter_list|()
throws|throws
name|Exception
block|{
name|MediaType
name|html
init|=
operator|new
name|MediaType
argument_list|(
literal|"text"
argument_list|,
literal|"html"
argument_list|)
decl_stmt|;
name|Detector
name|detector
init|=
operator|new
name|MagicDetector
argument_list|(
name|html
argument_list|,
literal|"<html"
operator|.
name|getBytes
argument_list|(
name|US_ASCII
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|MediaType
operator|.
name|OCTET_STREAM
argument_list|,
name|detector
operator|.
name|detect
argument_list|(
literal|null
argument_list|,
operator|new
name|Metadata
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDetectSimple
parameter_list|()
throws|throws
name|Exception
block|{
name|MediaType
name|html
init|=
operator|new
name|MediaType
argument_list|(
literal|"text"
argument_list|,
literal|"html"
argument_list|)
decl_stmt|;
name|Detector
name|detector
init|=
operator|new
name|MagicDetector
argument_list|(
name|html
argument_list|,
literal|"<html"
operator|.
name|getBytes
argument_list|(
name|US_ASCII
argument_list|)
argument_list|)
decl_stmt|;
name|assertDetect
argument_list|(
name|detector
argument_list|,
name|html
argument_list|,
literal|"<html"
argument_list|)
expr_stmt|;
name|assertDetect
argument_list|(
name|detector
argument_list|,
name|html
argument_list|,
literal|"<html><head/><body/></html>"
argument_list|)
expr_stmt|;
name|assertDetect
argument_list|(
name|detector
argument_list|,
name|MediaType
operator|.
name|OCTET_STREAM
argument_list|,
literal|"<HTML"
argument_list|)
expr_stmt|;
name|assertDetect
argument_list|(
name|detector
argument_list|,
name|MediaType
operator|.
name|OCTET_STREAM
argument_list|,
literal|"<?xml?><html"
argument_list|)
expr_stmt|;
name|assertDetect
argument_list|(
name|detector
argument_list|,
name|MediaType
operator|.
name|OCTET_STREAM
argument_list|,
literal|"<html"
argument_list|)
expr_stmt|;
name|assertDetect
argument_list|(
name|detector
argument_list|,
name|MediaType
operator|.
name|OCTET_STREAM
argument_list|,
literal|""
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDetectOffsetRange
parameter_list|()
throws|throws
name|Exception
block|{
name|MediaType
name|html
init|=
operator|new
name|MediaType
argument_list|(
literal|"text"
argument_list|,
literal|"html"
argument_list|)
decl_stmt|;
name|Detector
name|detector
init|=
operator|new
name|MagicDetector
argument_list|(
name|html
argument_list|,
literal|"<html"
operator|.
name|getBytes
argument_list|(
name|US_ASCII
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|0
argument_list|,
literal|64
argument_list|)
decl_stmt|;
name|assertDetect
argument_list|(
name|detector
argument_list|,
name|html
argument_list|,
literal|"<html"
argument_list|)
expr_stmt|;
name|assertDetect
argument_list|(
name|detector
argument_list|,
name|html
argument_list|,
literal|"<html><head/><body/></html>"
argument_list|)
expr_stmt|;
name|assertDetect
argument_list|(
name|detector
argument_list|,
name|html
argument_list|,
literal|"<?xml?><html/>"
argument_list|)
expr_stmt|;
name|assertDetect
argument_list|(
name|detector
argument_list|,
name|html
argument_list|,
literal|"\n<html"
argument_list|)
expr_stmt|;
name|assertDetect
argument_list|(
name|detector
argument_list|,
name|html
argument_list|,
literal|"\u0000<html"
argument_list|)
expr_stmt|;
name|assertDetect
argument_list|(
name|detector
argument_list|,
name|MediaType
operator|.
name|OCTET_STREAM
argument_list|,
literal|"<htm"
argument_list|)
expr_stmt|;
name|assertDetect
argument_list|(
name|detector
argument_list|,
name|MediaType
operator|.
name|OCTET_STREAM
argument_list|,
literal|" html"
argument_list|)
expr_stmt|;
name|assertDetect
argument_list|(
name|detector
argument_list|,
name|MediaType
operator|.
name|OCTET_STREAM
argument_list|,
literal|"<HTML"
argument_list|)
expr_stmt|;
name|assertDetect
argument_list|(
name|detector
argument_list|,
name|html
argument_list|,
literal|"0........1.........2.........3.........4.........5.........6"
operator|+
literal|"1234<html"
argument_list|)
expr_stmt|;
name|assertDetect
argument_list|(
name|detector
argument_list|,
name|MediaType
operator|.
name|OCTET_STREAM
argument_list|,
literal|"0........1.........2.........3.........4.........5.........6"
operator|+
literal|"12345<html"
argument_list|)
expr_stmt|;
name|assertDetect
argument_list|(
name|detector
argument_list|,
name|MediaType
operator|.
name|OCTET_STREAM
argument_list|,
literal|""
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDetectMask
parameter_list|()
throws|throws
name|Exception
block|{
name|MediaType
name|html
init|=
operator|new
name|MediaType
argument_list|(
literal|"text"
argument_list|,
literal|"html"
argument_list|)
decl_stmt|;
name|byte
name|up
init|=
operator|(
name|byte
operator|)
literal|0xdf
decl_stmt|;
name|Detector
name|detector
init|=
operator|new
name|MagicDetector
argument_list|(
name|html
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|'<'
block|,
literal|'H'
block|,
literal|'T'
block|,
literal|'M'
block|,
literal|'L'
block|}
argument_list|,
operator|new
name|byte
index|[]
block|{
operator|(
name|byte
operator|)
literal|0xff
block|,
name|up
block|,
name|up
block|,
name|up
block|,
name|up
block|}
argument_list|,
literal|0
argument_list|,
literal|64
argument_list|)
decl_stmt|;
name|assertDetect
argument_list|(
name|detector
argument_list|,
name|html
argument_list|,
literal|"<html"
argument_list|)
expr_stmt|;
name|assertDetect
argument_list|(
name|detector
argument_list|,
name|html
argument_list|,
literal|"<HTML><head/><body/></html>"
argument_list|)
expr_stmt|;
name|assertDetect
argument_list|(
name|detector
argument_list|,
name|html
argument_list|,
literal|"<?xml?><HtMl/>"
argument_list|)
expr_stmt|;
name|assertDetect
argument_list|(
name|detector
argument_list|,
name|html
argument_list|,
literal|"\n<html"
argument_list|)
expr_stmt|;
name|assertDetect
argument_list|(
name|detector
argument_list|,
name|html
argument_list|,
literal|"\u0000<HTML"
argument_list|)
expr_stmt|;
name|assertDetect
argument_list|(
name|detector
argument_list|,
name|MediaType
operator|.
name|OCTET_STREAM
argument_list|,
literal|"<htm"
argument_list|)
expr_stmt|;
name|assertDetect
argument_list|(
name|detector
argument_list|,
name|MediaType
operator|.
name|OCTET_STREAM
argument_list|,
literal|" html"
argument_list|)
expr_stmt|;
name|assertDetect
argument_list|(
name|detector
argument_list|,
name|html
argument_list|,
literal|"0        1         2         3         4         5         6"
operator|+
literal|"1234<html"
argument_list|)
expr_stmt|;
name|assertDetect
argument_list|(
name|detector
argument_list|,
name|MediaType
operator|.
name|OCTET_STREAM
argument_list|,
literal|"0        1         2         3         4         5         6"
operator|+
literal|"12345<html"
argument_list|)
expr_stmt|;
name|assertDetect
argument_list|(
name|detector
argument_list|,
name|MediaType
operator|.
name|OCTET_STREAM
argument_list|,
literal|""
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDetectRegExPDF
parameter_list|()
throws|throws
name|Exception
block|{
name|MediaType
name|pdf
init|=
operator|new
name|MediaType
argument_list|(
literal|"application"
argument_list|,
literal|"pdf"
argument_list|)
decl_stmt|;
name|Detector
name|detector
init|=
operator|new
name|MagicDetector
argument_list|(
name|pdf
argument_list|,
literal|"(?s)\\A.{0,144}%PDF-"
operator|.
name|getBytes
argument_list|(
name|US_ASCII
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|assertDetect
argument_list|(
name|detector
argument_list|,
name|pdf
argument_list|,
literal|"%PDF-1.0"
argument_list|)
expr_stmt|;
name|assertDetect
argument_list|(
name|detector
argument_list|,
name|pdf
argument_list|,
literal|"0        10        20        30        40        50        6"
operator|+
literal|"0        70        80        90        100       110       1"
operator|+
literal|"20       130       140"
operator|+
literal|"34%PDF-1.0"
argument_list|)
expr_stmt|;
name|assertDetect
argument_list|(
name|detector
argument_list|,
name|MediaType
operator|.
name|OCTET_STREAM
argument_list|,
literal|"0        10        20        30        40        50        6"
operator|+
literal|"0        70        80        90        100       110       1"
operator|+
literal|"20       130       140"
operator|+
literal|"345%PDF-1.0"
argument_list|)
expr_stmt|;
name|assertDetect
argument_list|(
name|detector
argument_list|,
name|MediaType
operator|.
name|OCTET_STREAM
argument_list|,
literal|""
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDetectRegExGreedy
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|pattern
init|=
literal|"(?s)\\x3chtml xmlns=\"http://www\\.w3\\.org/1999/xhtml"
operator|+
literal|"\".*\\x3ctitle\\x3e.*\\x3c/title\\x3e"
decl_stmt|;
name|MediaType
name|xhtml
init|=
operator|new
name|MediaType
argument_list|(
literal|"application"
argument_list|,
literal|"xhtml+xml"
argument_list|)
decl_stmt|;
name|Detector
name|detector
init|=
operator|new
name|MagicDetector
argument_list|(
name|xhtml
argument_list|,
name|pattern
operator|.
name|getBytes
argument_list|(
name|US_ASCII
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
literal|0
argument_list|,
literal|8192
argument_list|)
decl_stmt|;
name|assertDetect
argument_list|(
name|detector
argument_list|,
name|xhtml
argument_list|,
literal|"<html xmlns=\"http://www.w3.org/1999/xhtml\">"
operator|+
literal|"<head><title>XHTML test document</title></head>"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDetectRegExOptions
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|pattern
init|=
literal|"(?s)\\A.{0,1024}\\x3c\\!(?:DOCTYPE|doctype) (?:HTML|html) "
operator|+
literal|"(?:PUBLIC|public) \"-//.{1,16}//(?:DTD|dtd) .{0,64}"
operator|+
literal|"(?:HTML|html) 4\\.01"
decl_stmt|;
name|String
name|data
init|=
literal|"<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01//EN\""
operator|+
literal|"\"http://www.w3.org/TR/html4/strict.dtd\"><HTML>"
operator|+
literal|"<HEAD><TITLE>HTML document</TITLE></HEAD>"
operator|+
literal|"<BODY><P>Hello world!</BODY></HTML>"
decl_stmt|;
name|String
name|data1
init|=
literal|"<!DOCTYPE html PUBLIC \"-//W3C//dtd html 4.01//EN\""
operator|+
literal|"\"http://www.w3.org/TR/html4/strict.dtd\"><HTML>"
operator|+
literal|"<HEAD><TITLE>HTML document</TITLE></HEAD>"
operator|+
literal|"<BODY><P>Hello world!</BODY></HTML>"
decl_stmt|;
name|String
name|data2
init|=
literal|"<!DoCtYpE hTmL pUbLiC \"-//W3C//dTd HtMl 4.01//EN\""
operator|+
literal|"\"http://www.w3.org/TR/html4/strict.dtd\"><HTML>"
operator|+
literal|"<HEAD><TITLE>HTML document</TITLE></HEAD>"
operator|+
literal|"<BODY><P>Hello world!</BODY></HTML>"
decl_stmt|;
name|MediaType
name|html
init|=
operator|new
name|MediaType
argument_list|(
literal|"text"
argument_list|,
literal|"html"
argument_list|)
decl_stmt|;
name|Detector
name|detector
init|=
operator|new
name|MagicDetector
argument_list|(
name|html
argument_list|,
name|pattern
operator|.
name|getBytes
argument_list|(
name|US_ASCII
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|assertDetect
argument_list|(
name|detector
argument_list|,
name|html
argument_list|,
name|data
argument_list|)
expr_stmt|;
name|assertDetect
argument_list|(
name|detector
argument_list|,
name|html
argument_list|,
name|data1
argument_list|)
expr_stmt|;
name|assertDetect
argument_list|(
name|detector
argument_list|,
name|MediaType
operator|.
name|OCTET_STREAM
argument_list|,
name|data2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDetectStreamReadProblems
parameter_list|()
throws|throws
name|Exception
block|{
name|byte
index|[]
name|data
init|=
literal|"abcdefghijklmnopqrstuvwxyz0123456789"
operator|.
name|getBytes
argument_list|(
name|US_ASCII
argument_list|)
decl_stmt|;
name|MediaType
name|testMT
init|=
operator|new
name|MediaType
argument_list|(
literal|"application"
argument_list|,
literal|"test"
argument_list|)
decl_stmt|;
name|Detector
name|detector
init|=
operator|new
name|MagicDetector
argument_list|(
name|testMT
argument_list|,
name|data
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
comment|// Deliberately prevent InputStream.read(...) from reading the entire
comment|// buffer in one go
name|InputStream
name|stream
init|=
operator|new
name|RestrictiveInputStream
argument_list|(
name|data
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|testMT
argument_list|,
name|detector
operator|.
name|detect
argument_list|(
name|stream
argument_list|,
operator|new
name|Metadata
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDetectString
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|data
init|=
literal|"abcdEFGhijklmnoPQRstuvwxyz0123456789"
decl_stmt|;
name|MediaType
name|testMT
init|=
operator|new
name|MediaType
argument_list|(
literal|"application"
argument_list|,
literal|"test"
argument_list|)
decl_stmt|;
name|Detector
name|detector
decl_stmt|;
comment|// Check regular String matching
name|detector
operator|=
name|MagicDetector
operator|.
name|parse
argument_list|(
name|testMT
argument_list|,
literal|"string"
argument_list|,
literal|"0:20"
argument_list|,
literal|"abcd"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertDetect
argument_list|(
name|detector
argument_list|,
name|testMT
argument_list|,
name|data
operator|.
name|getBytes
argument_list|(
name|US_ASCII
argument_list|)
argument_list|)
expr_stmt|;
name|detector
operator|=
name|MagicDetector
operator|.
name|parse
argument_list|(
name|testMT
argument_list|,
literal|"string"
argument_list|,
literal|"0:20"
argument_list|,
literal|"cdEFGh"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertDetect
argument_list|(
name|detector
argument_list|,
name|testMT
argument_list|,
name|data
operator|.
name|getBytes
argument_list|(
name|US_ASCII
argument_list|)
argument_list|)
expr_stmt|;
comment|// Check Little Endian and Big Endian utf-16 strings
name|detector
operator|=
name|MagicDetector
operator|.
name|parse
argument_list|(
name|testMT
argument_list|,
literal|"unicodeLE"
argument_list|,
literal|"0:20"
argument_list|,
literal|"cdEFGh"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertDetect
argument_list|(
name|detector
argument_list|,
name|testMT
argument_list|,
name|data
operator|.
name|getBytes
argument_list|(
name|UTF_16LE
argument_list|)
argument_list|)
expr_stmt|;
name|detector
operator|=
name|MagicDetector
operator|.
name|parse
argument_list|(
name|testMT
argument_list|,
literal|"unicodeBE"
argument_list|,
literal|"0:20"
argument_list|,
literal|"cdEFGh"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertDetect
argument_list|(
name|detector
argument_list|,
name|testMT
argument_list|,
name|data
operator|.
name|getBytes
argument_list|(
name|UTF_16BE
argument_list|)
argument_list|)
expr_stmt|;
comment|// Check case ignoring String matching
name|detector
operator|=
name|MagicDetector
operator|.
name|parse
argument_list|(
name|testMT
argument_list|,
literal|"stringignorecase"
argument_list|,
literal|"0:20"
argument_list|,
literal|"BcDeFgHiJKlm"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertDetect
argument_list|(
name|detector
argument_list|,
name|testMT
argument_list|,
name|data
operator|.
name|getBytes
argument_list|(
name|US_ASCII
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|assertDetect
parameter_list|(
name|Detector
name|detector
parameter_list|,
name|MediaType
name|type
parameter_list|,
name|String
name|data
parameter_list|)
block|{
name|byte
index|[]
name|bytes
init|=
name|data
operator|.
name|getBytes
argument_list|(
name|US_ASCII
argument_list|)
decl_stmt|;
name|assertDetect
argument_list|(
name|detector
argument_list|,
name|type
argument_list|,
name|bytes
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|assertDetect
parameter_list|(
name|Detector
name|detector
parameter_list|,
name|MediaType
name|type
parameter_list|,
name|byte
index|[]
name|bytes
parameter_list|)
block|{
try|try
block|{
name|InputStream
name|stream
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|bytes
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|type
argument_list|,
name|detector
operator|.
name|detect
argument_list|(
name|stream
argument_list|,
operator|new
name|Metadata
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// Test that the stream has been reset
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|bytes
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
name|bytes
index|[
name|i
index|]
argument_list|,
operator|(
name|byte
operator|)
name|stream
operator|.
name|read
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|stream
operator|.
name|read
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|fail
argument_list|(
literal|"Unexpected exception from MagicDetector"
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * InputStream class that does not read in all available bytes in      * one go.      */
specifier|private
class|class
name|RestrictiveInputStream
extends|extends
name|ByteArrayInputStream
block|{
specifier|public
name|RestrictiveInputStream
parameter_list|(
name|byte
index|[]
name|buf
parameter_list|)
block|{
name|super
argument_list|(
name|buf
argument_list|)
expr_stmt|;
block|}
comment|/**          * Prevent reading the entire len of bytes if requesting more          * than 10 bytes.          */
specifier|public
name|int
name|read
parameter_list|(
name|byte
index|[]
name|b
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|)
block|{
if|if
condition|(
name|len
operator|>
literal|10
condition|)
block|{
return|return
name|super
operator|.
name|read
argument_list|(
name|b
argument_list|,
name|off
argument_list|,
name|len
operator|-
literal|10
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|super
operator|.
name|read
argument_list|(
name|b
argument_list|,
name|off
argument_list|,
name|len
argument_list|)
return|;
block|}
block|}
block|}
block|}
end_class

end_unit

