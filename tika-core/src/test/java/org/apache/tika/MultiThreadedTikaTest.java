begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|detect
operator|.
name|Detector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|detect
operator|.
name|XmlRootExtractor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|exception
operator|.
name|TikaException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|io
operator|.
name|TikaInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|metadata
operator|.
name|Metadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|mime
operator|.
name|MediaType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|ParseContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|Parser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|RecursiveParserWrapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|sax
operator|.
name|AbstractRecursiveParserWrapperHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|sax
operator|.
name|BasicContentHandlerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|sax
operator|.
name|RecursiveParserWrapperHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|utils
operator|.
name|XMLReaderUtils
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileFilter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|FileVisitResult
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Paths
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|SimpleFileVisitor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|attribute
operator|.
name|BasicFileAttributes
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorCompletionService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Future
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_class
specifier|public
class|class
name|MultiThreadedTikaTest
extends|extends
name|TikaTest
block|{
comment|//TODO: figure out how to make failures reproducible a la Lucene/Solr with a seed
comment|//TODO: Consider randomizing the Locale and timezone, like Lucene/Solr...
name|XmlRootExtractor
name|ex
init|=
operator|new
name|XmlRootExtractor
argument_list|()
decl_stmt|;
comment|/**      * This calls {@link #testEach(Parser parser, Path[], ParseContext[], int, int)} and      * then {@link #testAll(Parser parser, Path[], ParseContext[], int, int)}      *      * @param numThreads    number of threads to use      * @param numIterations number of iterations per thread      * @param filter        file filter to select files from "/test-documents"; if<code>null</code>,      *                      all files will be used      * @throws Exception      */
specifier|protected
name|void
name|testMultiThreaded
parameter_list|(
name|Parser
name|parser
parameter_list|,
name|ParseContext
index|[]
name|parseContext
parameter_list|,
name|int
name|numThreads
parameter_list|,
name|int
name|numIterations
parameter_list|,
name|FileFilter
name|filter
parameter_list|)
throws|throws
name|Exception
block|{
name|Path
index|[]
name|allFiles
init|=
name|getTestFiles
argument_list|(
name|filter
argument_list|)
decl_stmt|;
name|testEach
argument_list|(
name|parser
argument_list|,
name|allFiles
argument_list|,
name|parseContext
argument_list|,
name|numThreads
argument_list|,
name|numIterations
argument_list|)
expr_stmt|;
name|testAll
argument_list|(
name|parser
argument_list|,
name|allFiles
argument_list|,
name|parseContext
argument_list|,
name|numThreads
argument_list|,
name|numIterations
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testDetector
parameter_list|(
name|Detector
name|detector
parameter_list|,
name|int
name|numThreads
parameter_list|,
name|int
name|numIterations
parameter_list|,
name|FileFilter
name|filter
parameter_list|,
name|int
name|randomlyResizeSAXPool
parameter_list|)
throws|throws
name|Exception
block|{
name|Path
index|[]
name|files
init|=
name|getTestFiles
argument_list|(
name|filter
argument_list|)
decl_stmt|;
name|testDetectorEach
argument_list|(
name|detector
argument_list|,
name|files
argument_list|,
name|numThreads
argument_list|,
name|numIterations
argument_list|,
name|randomlyResizeSAXPool
argument_list|)
expr_stmt|;
name|testDetectorOnAll
argument_list|(
name|detector
argument_list|,
name|files
argument_list|,
name|numThreads
argument_list|,
name|numIterations
argument_list|,
name|randomlyResizeSAXPool
argument_list|)
expr_stmt|;
block|}
name|void
name|testDetectorEach
parameter_list|(
name|Detector
name|detector
parameter_list|,
name|Path
index|[]
name|files
parameter_list|,
name|int
name|numThreads
parameter_list|,
name|int
name|numIterations
parameter_list|,
name|int
name|randomlyResizeSAXPool
parameter_list|)
block|{
for|for
control|(
name|Path
name|p
range|:
name|files
control|)
block|{
name|Path
index|[]
name|toTest
init|=
operator|new
name|Path
index|[
literal|1
index|]
decl_stmt|;
name|toTest
index|[
literal|0
index|]
operator|=
name|p
expr_stmt|;
name|testDetectorOnAll
argument_list|(
name|detector
argument_list|,
name|toTest
argument_list|,
name|numThreads
argument_list|,
name|numIterations
argument_list|,
name|randomlyResizeSAXPool
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|testDetectorOnAll
parameter_list|(
name|Detector
name|detector
parameter_list|,
name|Path
index|[]
name|toTest
parameter_list|,
name|int
name|numThreads
parameter_list|,
name|int
name|numIterations
parameter_list|,
name|int
name|randomlyResizeSAXPool
parameter_list|)
block|{
name|Map
argument_list|<
name|Path
argument_list|,
name|MediaType
argument_list|>
name|truth
init|=
name|getBaselineDetection
argument_list|(
name|detector
argument_list|,
name|toTest
argument_list|)
decl_stmt|;
comment|//if all files caused an exception
if|if
condition|(
name|truth
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return;
block|}
comment|//only those that parsed without exception
name|Path
index|[]
name|testFiles
init|=
operator|new
name|Path
index|[
name|truth
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|int
name|j
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Path
name|testFile
range|:
name|truth
operator|.
name|keySet
argument_list|()
control|)
block|{
name|testFiles
index|[
name|j
operator|++
index|]
operator|=
name|testFile
expr_stmt|;
block|}
name|int
name|actualThreadCount
init|=
name|numThreads
operator|+
operator|(
operator|(
name|randomlyResizeSAXPool
operator|>
literal|0
operator|)
condition|?
name|randomlyResizeSAXPool
else|:
literal|0
operator|)
decl_stmt|;
name|ExecutorService
name|ex
init|=
name|Executors
operator|.
name|newFixedThreadPool
argument_list|(
name|actualThreadCount
argument_list|)
decl_stmt|;
try|try
block|{
name|_testDetectorOnAll
argument_list|(
name|detector
argument_list|,
name|testFiles
argument_list|,
name|numThreads
argument_list|,
name|numIterations
argument_list|,
name|truth
argument_list|,
name|ex
argument_list|,
name|randomlyResizeSAXPool
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|ex
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|ex
operator|.
name|shutdownNow
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|_testDetectorOnAll
parameter_list|(
name|Detector
name|detector
parameter_list|,
name|Path
index|[]
name|testFiles
parameter_list|,
name|int
name|numThreads
parameter_list|,
name|int
name|numIterations
parameter_list|,
name|Map
argument_list|<
name|Path
argument_list|,
name|MediaType
argument_list|>
name|truth
parameter_list|,
name|ExecutorService
name|ex
parameter_list|,
name|int
name|randomlyResizeSAXPool
parameter_list|)
block|{
name|ExecutorCompletionService
argument_list|<
name|Integer
argument_list|>
name|executorCompletionService
init|=
operator|new
name|ExecutorCompletionService
argument_list|<>
argument_list|(
name|ex
argument_list|)
decl_stmt|;
name|executorCompletionService
operator|.
name|submit
argument_list|(
operator|new
name|SAXPoolResizer
argument_list|(
name|randomlyResizeSAXPool
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numThreads
condition|;
name|i
operator|++
control|)
block|{
name|executorCompletionService
operator|.
name|submit
argument_list|(
operator|new
name|TikaDetectorRunner
argument_list|(
name|detector
argument_list|,
name|numIterations
argument_list|,
name|testFiles
argument_list|,
name|truth
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|int
name|completed
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|completed
operator|<
name|numThreads
condition|)
block|{
comment|//TODO: add a maximum timeout threshold
name|Future
argument_list|<
name|Integer
argument_list|>
name|future
init|=
literal|null
decl_stmt|;
try|try
block|{
name|future
operator|=
name|executorCompletionService
operator|.
name|poll
argument_list|(
literal|1000
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
if|if
condition|(
name|future
operator|!=
literal|null
condition|)
block|{
name|future
operator|.
name|get
argument_list|()
expr_stmt|;
comment|//trigger exceptions from thread
name|completed
operator|++
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|InterruptedException
decl||
name|ExecutionException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
name|ex
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|ex
operator|.
name|shutdownNow
argument_list|()
expr_stmt|;
block|}
comment|/**      * Test each file, one at a time in multiple threads.      * This was required to test TIKA-2519 in a reasonable      * amount of time.  This forced the parser to use the      * same underlying memory structures because it was the same file.      * This is stricter than I think our agreement with clients is      * because this run tests on literally the same file and      * not a copy of the file per thread.  Let's leave this as is      * unless there's a good reason to create a separate copy per thread.      *      * @param files         files to test, one at a time      * @param numThreads    number of threads to use      * @param numIterations number of iterations per thread      */
specifier|protected
name|void
name|testEach
parameter_list|(
name|Parser
name|parser
parameter_list|,
name|Path
index|[]
name|files
parameter_list|,
name|ParseContext
index|[]
name|parseContext
parameter_list|,
name|int
name|numThreads
parameter_list|,
name|int
name|numIterations
parameter_list|)
block|{
for|for
control|(
name|Path
name|p
range|:
name|files
control|)
block|{
name|Path
index|[]
name|toTest
init|=
operator|new
name|Path
index|[
literal|1
index|]
decl_stmt|;
name|toTest
index|[
literal|0
index|]
operator|=
name|p
expr_stmt|;
name|testAll
argument_list|(
name|parser
argument_list|,
name|toTest
argument_list|,
name|parseContext
argument_list|,
name|numThreads
argument_list|,
name|numIterations
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * This tests all files together.  Each parser randomly selects      * a file from the array.  Two parsers could wind up parsing the      * same file at the same time.  Good.      *<p>      * In the current implementation, this gets ground truth only      * from files that do not throw exceptions.  This will ignore      * files that cause exceptions.      *      * @param files         files to parse      * @param numThreads    number of parser threads      * @param numIterations number of iterations per parser      */
specifier|protected
name|void
name|testAll
parameter_list|(
name|Parser
name|parser
parameter_list|,
name|Path
index|[]
name|files
parameter_list|,
name|ParseContext
index|[]
name|parseContext
parameter_list|,
name|int
name|numThreads
parameter_list|,
name|int
name|numIterations
parameter_list|)
block|{
name|Map
argument_list|<
name|Path
argument_list|,
name|Extract
argument_list|>
name|truth
init|=
name|getBaseline
argument_list|(
name|parser
argument_list|,
name|files
argument_list|,
name|parseContext
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
comment|//if all files caused an exception
if|if
condition|(
name|truth
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
comment|//return;
block|}
comment|//only those that parsed without exception
name|Path
index|[]
name|testFiles
init|=
operator|new
name|Path
index|[
name|truth
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|int
name|j
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Path
name|testFile
range|:
name|truth
operator|.
name|keySet
argument_list|()
control|)
block|{
name|testFiles
index|[
name|j
operator|++
index|]
operator|=
name|testFile
expr_stmt|;
block|}
name|ExecutorService
name|ex
init|=
name|Executors
operator|.
name|newFixedThreadPool
argument_list|(
name|numThreads
argument_list|)
decl_stmt|;
try|try
block|{
name|_testAll
argument_list|(
name|parser
argument_list|,
name|files
argument_list|,
name|parseContext
argument_list|,
name|numThreads
argument_list|,
name|numIterations
argument_list|,
name|truth
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|ex
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|ex
operator|.
name|shutdownNow
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|_testAll
parameter_list|(
name|Parser
name|parser
parameter_list|,
name|Path
index|[]
name|testFiles
parameter_list|,
name|ParseContext
index|[]
name|parseContext
parameter_list|,
name|int
name|numThreads
parameter_list|,
name|int
name|numIterations
parameter_list|,
name|Map
argument_list|<
name|Path
argument_list|,
name|Extract
argument_list|>
name|truth
parameter_list|,
name|ExecutorService
name|ex
parameter_list|)
block|{
name|ExecutorCompletionService
argument_list|<
name|Integer
argument_list|>
name|executorCompletionService
init|=
operator|new
name|ExecutorCompletionService
argument_list|<>
argument_list|(
name|ex
argument_list|)
decl_stmt|;
comment|//use the same parser in all threads
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numThreads
condition|;
name|i
operator|++
control|)
block|{
name|executorCompletionService
operator|.
name|submit
argument_list|(
operator|new
name|TikaRunner
argument_list|(
name|parser
argument_list|,
name|parseContext
index|[
name|i
index|]
argument_list|,
name|numIterations
argument_list|,
name|testFiles
argument_list|,
name|truth
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|int
name|completed
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|completed
operator|<
name|numThreads
condition|)
block|{
comment|//TODO: add a maximum timeout threshold
name|Future
argument_list|<
name|Integer
argument_list|>
name|future
init|=
literal|null
decl_stmt|;
try|try
block|{
name|future
operator|=
name|executorCompletionService
operator|.
name|poll
argument_list|(
literal|1000
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
if|if
condition|(
name|future
operator|!=
literal|null
condition|)
block|{
name|future
operator|.
name|get
argument_list|()
expr_stmt|;
comment|//trigger exceptions from thread
name|completed
operator|++
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|InterruptedException
decl||
name|ExecutionException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
specifier|public
specifier|static
name|Path
index|[]
name|getTestFiles
parameter_list|(
specifier|final
name|FileFilter
name|fileFilter
parameter_list|)
throws|throws
name|URISyntaxException
throws|,
name|IOException
block|{
name|Path
name|root
init|=
name|Paths
operator|.
name|get
argument_list|(
name|MultiThreadedTikaTest
operator|.
name|class
operator|.
name|getResource
argument_list|(
literal|"/test-documents"
argument_list|)
operator|.
name|toURI
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|Path
argument_list|>
name|files
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|Files
operator|.
name|walkFileTree
argument_list|(
name|root
argument_list|,
operator|new
name|SimpleFileVisitor
argument_list|<
name|Path
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|FileVisitResult
name|visitFile
parameter_list|(
name|Path
name|file
parameter_list|,
name|BasicFileAttributes
name|attrs
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|fileFilter
operator|!=
literal|null
operator|&&
operator|!
name|fileFilter
operator|.
name|accept
argument_list|(
name|file
operator|.
name|toFile
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|FileVisitResult
operator|.
name|CONTINUE
return|;
block|}
if|if
condition|(
operator|!
name|attrs
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|files
operator|.
name|add
argument_list|(
name|file
argument_list|)
expr_stmt|;
block|}
return|return
name|FileVisitResult
operator|.
name|CONTINUE
return|;
block|}
block|}
argument_list|)
expr_stmt|;
return|return
name|files
operator|.
name|toArray
argument_list|(
operator|new
name|Path
index|[
name|files
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|ConcurrentHashMap
argument_list|<
name|Path
argument_list|,
name|MediaType
argument_list|>
name|getBaselineDetection
parameter_list|(
name|Detector
name|detector
parameter_list|,
name|Path
index|[]
name|files
parameter_list|)
block|{
name|ConcurrentHashMap
argument_list|<
name|Path
argument_list|,
name|MediaType
argument_list|>
name|baseline
init|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|XmlRootExtractor
name|extractor
init|=
operator|new
name|XmlRootExtractor
argument_list|()
decl_stmt|;
for|for
control|(
name|Path
name|f
range|:
name|files
control|)
block|{
name|Metadata
name|metadata
init|=
operator|new
name|Metadata
argument_list|()
decl_stmt|;
try|try
init|(
name|TikaInputStream
name|tis
init|=
name|TikaInputStream
operator|.
name|get
argument_list|(
name|f
argument_list|,
name|metadata
argument_list|)
init|)
block|{
name|baseline
operator|.
name|put
argument_list|(
name|f
argument_list|,
name|detector
operator|.
name|detect
argument_list|(
name|tis
argument_list|,
name|metadata
argument_list|)
argument_list|)
expr_stmt|;
name|baseline
operator|.
name|put
argument_list|(
name|f
argument_list|,
name|detector
operator|.
name|detect
argument_list|(
name|tis
argument_list|,
name|metadata
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|baseline
return|;
block|}
specifier|private
specifier|static
name|ConcurrentHashMap
argument_list|<
name|Path
argument_list|,
name|Extract
argument_list|>
name|getBaseline
parameter_list|(
name|Parser
name|parser
parameter_list|,
name|Path
index|[]
name|files
parameter_list|,
name|ParseContext
name|parseContext
parameter_list|)
block|{
name|ConcurrentHashMap
argument_list|<
name|Path
argument_list|,
name|Extract
argument_list|>
name|baseline
init|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Path
name|f
range|:
name|files
control|)
block|{
try|try
init|(
name|TikaInputStream
name|is
init|=
name|TikaInputStream
operator|.
name|get
argument_list|(
name|f
argument_list|)
init|)
block|{
name|List
argument_list|<
name|Metadata
argument_list|>
name|metadataList
init|=
name|getRecursiveMetadata
argument_list|(
name|is
argument_list|,
name|parser
argument_list|,
name|parseContext
argument_list|)
decl_stmt|;
name|baseline
operator|.
name|put
argument_list|(
name|f
argument_list|,
operator|new
name|Extract
argument_list|(
name|metadataList
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
comment|//swallow
block|}
block|}
return|return
name|baseline
return|;
block|}
specifier|private
specifier|static
name|List
argument_list|<
name|Metadata
argument_list|>
name|getRecursiveMetadata
parameter_list|(
name|InputStream
name|is
parameter_list|,
name|Parser
name|parser
parameter_list|,
name|ParseContext
name|parseContext
parameter_list|)
throws|throws
name|Exception
block|{
comment|//different from parent TikaTest in that this extracts text.
comment|//can't extract xhtml because "tmp" file names wind up in
comment|//content's metadata and they'll differ by file.
name|parseContext
operator|=
operator|new
name|ParseContext
argument_list|()
expr_stmt|;
name|RecursiveParserWrapperHandler
name|handler
init|=
operator|new
name|RecursiveParserWrapperHandler
argument_list|(
operator|new
name|BasicContentHandlerFactory
argument_list|(
name|BasicContentHandlerFactory
operator|.
name|HANDLER_TYPE
operator|.
name|TEXT
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|,
operator|-
literal|1
argument_list|)
decl_stmt|;
name|parser
operator|.
name|parse
argument_list|(
name|is
argument_list|,
name|handler
argument_list|,
operator|new
name|Metadata
argument_list|()
argument_list|,
name|parseContext
argument_list|)
expr_stmt|;
return|return
name|handler
operator|.
name|getMetadataList
argument_list|()
return|;
block|}
specifier|private
class|class
name|SAXPoolResizer
implements|implements
name|Callable
argument_list|<
name|Integer
argument_list|>
block|{
specifier|private
specifier|final
name|int
name|maxResize
decl_stmt|;
specifier|private
specifier|final
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
name|SAXPoolResizer
parameter_list|(
name|int
name|maxResize
parameter_list|)
block|{
name|this
operator|.
name|maxResize
operator|=
name|maxResize
expr_stmt|;
block|}
specifier|public
name|Integer
name|call
parameter_list|()
throws|throws
name|TikaException
block|{
name|int
name|resized
init|=
literal|0
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
try|try
block|{
name|Thread
operator|.
name|yield
argument_list|()
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|500
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
return|return
name|resized
return|;
block|}
if|if
condition|(
name|maxResize
operator|>
literal|0
operator|&&
name|rand
operator|.
name|nextFloat
argument_list|()
operator|>
literal|0.01
condition|)
block|{
name|int
name|sz
init|=
name|rand
operator|.
name|nextInt
argument_list|(
name|maxResize
argument_list|)
operator|+
literal|1
decl_stmt|;
name|XMLReaderUtils
operator|.
name|setPoolSize
argument_list|(
name|sz
argument_list|)
expr_stmt|;
name|resized
operator|++
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|private
class|class
name|TikaDetectorRunner
implements|implements
name|Callable
argument_list|<
name|Integer
argument_list|>
block|{
specifier|private
specifier|final
name|Detector
name|detector
decl_stmt|;
specifier|private
specifier|final
name|int
name|iterations
decl_stmt|;
specifier|private
specifier|final
name|Path
index|[]
name|files
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|Path
argument_list|,
name|MediaType
argument_list|>
name|truth
decl_stmt|;
specifier|private
specifier|final
name|Random
name|random
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
specifier|private
name|TikaDetectorRunner
parameter_list|(
name|Detector
name|detector
parameter_list|,
name|int
name|iterations
parameter_list|,
name|Path
index|[]
name|files
parameter_list|,
name|Map
argument_list|<
name|Path
argument_list|,
name|MediaType
argument_list|>
name|truth
parameter_list|)
block|{
name|this
operator|.
name|detector
operator|=
name|detector
expr_stmt|;
name|this
operator|.
name|iterations
operator|=
name|iterations
expr_stmt|;
name|this
operator|.
name|files
operator|=
name|files
expr_stmt|;
name|this
operator|.
name|truth
operator|=
name|truth
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Integer
name|call
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iterations
condition|;
name|i
operator|++
control|)
block|{
name|int
name|randIndex
init|=
name|random
operator|.
name|nextInt
argument_list|(
name|files
operator|.
name|length
argument_list|)
decl_stmt|;
name|Path
name|testFile
init|=
name|files
index|[
name|randIndex
index|]
decl_stmt|;
name|Metadata
name|metadata
init|=
operator|new
name|Metadata
argument_list|()
decl_stmt|;
try|try
init|(
name|TikaInputStream
name|tis
init|=
name|TikaInputStream
operator|.
name|get
argument_list|(
name|testFile
argument_list|,
name|metadata
argument_list|)
init|)
block|{
name|MediaType
name|mediaType
init|=
name|detector
operator|.
name|detect
argument_list|(
name|tis
argument_list|,
name|metadata
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"failed on: "
operator|+
name|testFile
operator|.
name|getFileName
argument_list|()
argument_list|,
name|truth
operator|.
name|get
argument_list|(
name|testFile
argument_list|)
argument_list|,
name|mediaType
argument_list|)
expr_stmt|;
block|}
block|}
return|return
literal|1
return|;
block|}
block|}
comment|//TODO: make this return something useful besides an integer
specifier|private
specifier|static
class|class
name|TikaRunner
implements|implements
name|Callable
argument_list|<
name|Integer
argument_list|>
block|{
specifier|private
specifier|static
name|AtomicInteger
name|threadCount
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|Parser
name|parser
decl_stmt|;
specifier|private
specifier|final
name|int
name|iterations
decl_stmt|;
specifier|private
specifier|final
name|Path
index|[]
name|files
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|Path
argument_list|,
name|Extract
argument_list|>
name|truth
decl_stmt|;
specifier|private
specifier|final
name|ParseContext
name|parseContext
decl_stmt|;
specifier|private
specifier|final
name|Random
name|random
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|int
name|threadNumber
decl_stmt|;
specifier|private
name|TikaRunner
parameter_list|(
name|Parser
name|parser
parameter_list|,
name|ParseContext
name|parseContext
parameter_list|,
name|int
name|iterations
parameter_list|,
name|Path
index|[]
name|files
parameter_list|,
name|Map
argument_list|<
name|Path
argument_list|,
name|Extract
argument_list|>
name|truth
parameter_list|)
block|{
name|this
operator|.
name|parser
operator|=
name|parser
expr_stmt|;
name|this
operator|.
name|iterations
operator|=
name|iterations
expr_stmt|;
name|this
operator|.
name|files
operator|=
name|files
expr_stmt|;
name|this
operator|.
name|truth
operator|=
name|truth
expr_stmt|;
name|this
operator|.
name|parseContext
operator|=
name|parseContext
expr_stmt|;
name|threadNumber
operator|=
name|threadCount
operator|.
name|getAndIncrement
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Integer
name|call
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iterations
condition|;
name|i
operator|++
control|)
block|{
name|int
name|randIndex
init|=
name|random
operator|.
name|nextInt
argument_list|(
name|files
operator|.
name|length
argument_list|)
decl_stmt|;
name|Path
name|testFile
init|=
name|files
index|[
name|randIndex
index|]
decl_stmt|;
name|List
argument_list|<
name|Metadata
argument_list|>
name|metadataList
init|=
literal|null
decl_stmt|;
name|boolean
name|success
init|=
literal|false
decl_stmt|;
try|try
init|(
name|InputStream
name|is
init|=
name|Files
operator|.
name|newInputStream
argument_list|(
name|testFile
argument_list|)
init|)
block|{
name|metadataList
operator|=
name|getRecursiveMetadata
argument_list|(
name|is
argument_list|,
name|parser
argument_list|,
operator|new
name|ParseContext
argument_list|()
argument_list|)
expr_stmt|;
name|success
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|//swallow
comment|//throw new RuntimeException(testFile + " triggered this exception", e);
block|}
if|if
condition|(
name|success
condition|)
block|{
name|assertExtractEquals
argument_list|(
name|truth
operator|.
name|get
argument_list|(
name|testFile
argument_list|)
argument_list|,
operator|new
name|Extract
argument_list|(
name|metadataList
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
literal|1
return|;
block|}
block|}
specifier|private
specifier|static
name|void
name|assertExtractEquals
parameter_list|(
name|Extract
name|extractA
parameter_list|,
name|Extract
name|extractB
parameter_list|)
block|{
comment|//this currently only checks the basics
comment|//might want to add more checks
name|assertEquals
argument_list|(
literal|"number of embedded files"
argument_list|,
name|extractA
operator|.
name|metadataList
operator|.
name|size
argument_list|()
argument_list|,
name|extractB
operator|.
name|metadataList
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|extractA
operator|.
name|metadataList
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
literal|"number of metadata elements in attachment: "
operator|+
name|i
argument_list|,
name|extractA
operator|.
name|metadataList
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
name|extractB
operator|.
name|metadataList
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"content in attachment: "
operator|+
name|i
argument_list|,
name|extractA
operator|.
name|metadataList
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|get
argument_list|(
name|AbstractRecursiveParserWrapperHandler
operator|.
name|TIKA_CONTENT
argument_list|)
argument_list|,
name|extractB
operator|.
name|metadataList
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|get
argument_list|(
name|AbstractRecursiveParserWrapperHandler
operator|.
name|TIKA_CONTENT
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
class|class
name|Extract
block|{
specifier|final
name|List
argument_list|<
name|Metadata
argument_list|>
name|metadataList
decl_stmt|;
specifier|private
name|Extract
parameter_list|(
name|List
argument_list|<
name|Metadata
argument_list|>
name|metadataList
parameter_list|)
block|{
name|this
operator|.
name|metadataList
operator|=
name|metadataList
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

