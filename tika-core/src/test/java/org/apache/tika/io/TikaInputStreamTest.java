begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|io
package|;
end_package

begin_import
import|import static
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
operator|.
name|UTF_8
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Paths
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|metadata
operator|.
name|Metadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|metadata
operator|.
name|TikaCoreProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|TikaInputStreamTest
block|{
annotation|@
name|Test
specifier|public
name|void
name|testFileBased
parameter_list|()
throws|throws
name|IOException
block|{
name|Path
name|path
init|=
name|createTempFile
argument_list|(
literal|"Hello, World!"
argument_list|)
decl_stmt|;
name|InputStream
name|stream
init|=
name|TikaInputStream
operator|.
name|get
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"The file returned by the getFile() method should"
operator|+
literal|" be the file used to instantiate a TikaInputStream"
argument_list|,
name|path
argument_list|,
name|TikaInputStream
operator|.
name|get
argument_list|(
name|stream
argument_list|)
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"The contents of the TikaInputStream should equal the"
operator|+
literal|" contents of the underlying file"
argument_list|,
literal|"Hello, World!"
argument_list|,
name|readStream
argument_list|(
name|stream
argument_list|)
argument_list|)
expr_stmt|;
name|stream
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"The close() method must not remove the file used to"
operator|+
literal|" instantiate a TikaInputStream"
argument_list|,
name|Files
operator|.
name|exists
argument_list|(
name|path
argument_list|)
argument_list|)
expr_stmt|;
name|Files
operator|.
name|delete
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testStreamBased
parameter_list|()
throws|throws
name|IOException
block|{
name|InputStream
name|input
init|=
name|IOUtils
operator|.
name|toInputStream
argument_list|(
literal|"Hello, World!"
argument_list|,
name|UTF_8
operator|.
name|name
argument_list|()
argument_list|)
decl_stmt|;
name|InputStream
name|stream
init|=
name|TikaInputStream
operator|.
name|get
argument_list|(
name|input
argument_list|)
decl_stmt|;
name|Path
name|file
init|=
name|TikaInputStream
operator|.
name|get
argument_list|(
name|stream
argument_list|)
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|file
operator|!=
literal|null
operator|&&
name|Files
operator|.
name|isRegularFile
argument_list|(
name|file
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"The contents of the file returned by the getFile method"
operator|+
literal|" should equal the contents of the TikaInputStream"
argument_list|,
literal|"Hello, World!"
argument_list|,
name|readFile
argument_list|(
name|file
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"The contents of the TikaInputStream should not get modified"
operator|+
literal|" by reading the file first"
argument_list|,
literal|"Hello, World!"
argument_list|,
name|readStream
argument_list|(
name|stream
argument_list|)
argument_list|)
expr_stmt|;
name|stream
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
literal|"The close() method must remove the temporary file created"
operator|+
literal|" by a TikaInputStream"
argument_list|,
name|Files
operator|.
name|exists
argument_list|(
name|file
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|Path
name|createTempFile
parameter_list|(
name|String
name|data
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|file
init|=
name|Files
operator|.
name|createTempFile
argument_list|(
literal|"tika-"
argument_list|,
literal|".tmp"
argument_list|)
decl_stmt|;
name|Files
operator|.
name|write
argument_list|(
name|file
argument_list|,
name|data
operator|.
name|getBytes
argument_list|(
name|UTF_8
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|file
return|;
block|}
specifier|private
name|String
name|readFile
parameter_list|(
name|Path
name|file
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|String
argument_list|(
name|Files
operator|.
name|readAllBytes
argument_list|(
name|file
argument_list|)
argument_list|,
name|UTF_8
argument_list|)
return|;
block|}
specifier|private
name|String
name|readStream
parameter_list|(
name|InputStream
name|stream
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|IOUtils
operator|.
name|toString
argument_list|(
name|stream
argument_list|,
name|UTF_8
operator|.
name|name
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetMetadata
parameter_list|()
throws|throws
name|Exception
block|{
name|URL
name|url
init|=
name|TikaInputStreamTest
operator|.
name|class
operator|.
name|getResource
argument_list|(
literal|"test.txt"
argument_list|)
decl_stmt|;
name|Metadata
name|metadata
init|=
operator|new
name|Metadata
argument_list|()
decl_stmt|;
name|TikaInputStream
operator|.
name|get
argument_list|(
name|url
argument_list|,
name|metadata
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"test.txt"
argument_list|,
name|metadata
operator|.
name|get
argument_list|(
name|TikaCoreProperties
operator|.
name|RESOURCE_NAME_KEY
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Long
operator|.
name|toString
argument_list|(
name|Files
operator|.
name|size
argument_list|(
name|Paths
operator|.
name|get
argument_list|(
name|url
operator|.
name|toURI
argument_list|()
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|metadata
operator|.
name|get
argument_list|(
name|Metadata
operator|.
name|CONTENT_LENGTH
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

