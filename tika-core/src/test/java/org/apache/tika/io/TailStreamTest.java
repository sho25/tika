begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|io
package|;
end_package

begin_import
import|import static
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
operator|.
name|UTF_8
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * Test class for {@code TailStream}.  */
end_comment

begin_class
specifier|public
class|class
name|TailStreamTest
block|{
comment|/** Constant for generating test text. */
specifier|private
specifier|static
specifier|final
name|String
name|TEXT
init|=
literal|"Lorem ipsum dolor sit amet, consetetur "
operator|+
literal|"sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut "
operator|+
literal|"labore et dolore magna aliquyam erat, sed diam voluptua. At vero"
operator|+
literal|" eos et accusam et justo duo dolores et ea rebum. Stet clita "
operator|+
literal|"kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor "
operator|+
literal|"sit amet."
decl_stmt|;
comment|/**      * Generates a test text using the specified parameters.      *       * @param from the start index of the text      * @param length the length of the text      * @return the generated test text      */
specifier|private
specifier|static
name|String
name|generateText
parameter_list|(
name|int
name|from
parameter_list|,
name|int
name|length
parameter_list|)
block|{
name|int
name|count
init|=
name|from
operator|+
name|length
decl_stmt|;
name|StringBuilder
name|buf
init|=
operator|new
name|StringBuilder
argument_list|(
name|count
argument_list|)
decl_stmt|;
while|while
condition|(
name|buf
operator|.
name|length
argument_list|()
operator|<
name|count
condition|)
block|{
name|buf
operator|.
name|append
argument_list|(
name|TEXT
argument_list|)
expr_stmt|;
block|}
return|return
name|buf
operator|.
name|substring
argument_list|(
name|from
argument_list|,
name|from
operator|+
name|length
argument_list|)
return|;
block|}
comment|/**      * Generates a stream which contains a test text.      *       * @param from the start index of the text      * @param length the length of the generated stream      * @return the stream with the test text      */
specifier|private
specifier|static
name|InputStream
name|generateStream
parameter_list|(
name|int
name|from
parameter_list|,
name|int
name|length
parameter_list|)
block|{
return|return
operator|new
name|ByteArrayInputStream
argument_list|(
name|generateText
argument_list|(
name|from
argument_list|,
name|length
argument_list|)
operator|.
name|getBytes
argument_list|(
name|UTF_8
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Helper method for reading the content of an input stream.      *       * @param in the stream to be read      * @return an array with the content of the stream      * @throws IOException if an error occurs      */
specifier|private
specifier|static
name|byte
index|[]
name|readStream
parameter_list|(
name|InputStream
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|ByteArrayOutputStream
name|bos
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|int
name|c
decl_stmt|;
while|while
condition|(
operator|(
name|c
operator|=
name|in
operator|.
name|read
argument_list|()
operator|)
operator|!=
operator|-
literal|1
condition|)
block|{
name|bos
operator|.
name|write
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
return|return
name|bos
operator|.
name|toByteArray
argument_list|()
return|;
block|}
comment|/**      * Tests whether the tail buffer can be obtained before data was read.      */
annotation|@
name|Test
specifier|public
name|void
name|testTailBeforeRead
parameter_list|()
throws|throws
name|IOException
block|{
name|TailStream
name|stream
init|=
operator|new
name|TailStream
argument_list|(
name|generateStream
argument_list|(
literal|0
argument_list|,
literal|100
argument_list|)
argument_list|,
literal|50
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Wrong buffer length"
argument_list|,
literal|0
argument_list|,
name|stream
operator|.
name|getTail
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|stream
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/**      * Tests the content of the tail buffer if it is only partly filled.      */
annotation|@
name|Test
specifier|public
name|void
name|testTailBufferPartlyRead
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|int
name|count
init|=
literal|64
decl_stmt|;
name|TailStream
name|stream
init|=
operator|new
name|TailStream
argument_list|(
name|generateStream
argument_list|(
literal|0
argument_list|,
name|count
argument_list|)
argument_list|,
literal|2
operator|*
name|count
argument_list|)
decl_stmt|;
name|byte
index|[]
name|data
init|=
name|readStream
argument_list|(
name|stream
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Wrong content"
argument_list|,
name|Arrays
operator|.
name|equals
argument_list|(
name|data
argument_list|,
name|stream
operator|.
name|getTail
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|stream
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/**      * Tests the content of the tail buffer if only single bytes were read.      */
annotation|@
name|Test
specifier|public
name|void
name|testTailSingleByteReads
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|int
name|count
init|=
literal|128
decl_stmt|;
name|TailStream
name|stream
init|=
operator|new
name|TailStream
argument_list|(
name|generateStream
argument_list|(
literal|0
argument_list|,
literal|2
operator|*
name|count
argument_list|)
argument_list|,
name|count
argument_list|)
decl_stmt|;
name|readStream
argument_list|(
name|stream
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Wrong buffer"
argument_list|,
name|generateText
argument_list|(
name|count
argument_list|,
name|count
argument_list|)
argument_list|,
operator|new
name|String
argument_list|(
name|stream
operator|.
name|getTail
argument_list|()
argument_list|,
name|UTF_8
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Tests the content of the tail buffer if larger chunks are read.      */
annotation|@
name|Test
specifier|public
name|void
name|testTailChunkReads
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|int
name|count
init|=
literal|16384
decl_stmt|;
specifier|final
name|int
name|tailSize
init|=
literal|61
decl_stmt|;
specifier|final
name|int
name|bufSize
init|=
literal|100
decl_stmt|;
name|TailStream
name|stream
init|=
operator|new
name|TailStream
argument_list|(
name|generateStream
argument_list|(
literal|0
argument_list|,
name|count
argument_list|)
argument_list|,
name|tailSize
argument_list|)
decl_stmt|;
name|byte
index|[]
name|buf
init|=
operator|new
name|byte
index|[
name|bufSize
index|]
decl_stmt|;
name|int
name|read
init|=
name|stream
operator|.
name|read
argument_list|(
name|buf
argument_list|,
literal|10
argument_list|,
literal|8
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Wrong number of bytes read"
argument_list|,
literal|8
argument_list|,
name|read
argument_list|)
expr_stmt|;
while|while
condition|(
name|read
operator|!=
operator|-
literal|1
condition|)
block|{
name|read
operator|=
name|stream
operator|.
name|read
argument_list|(
name|buf
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"Wrong buffer"
argument_list|,
name|generateText
argument_list|(
name|count
operator|-
name|tailSize
argument_list|,
name|tailSize
argument_list|)
argument_list|,
operator|new
name|String
argument_list|(
name|stream
operator|.
name|getTail
argument_list|()
argument_list|,
name|UTF_8
argument_list|)
argument_list|)
expr_stmt|;
name|stream
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/**      * Tests whether mark() and reset() work as expected.      */
annotation|@
name|Test
specifier|public
name|void
name|testReadWithMarkAndReset
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|int
name|tailSize
init|=
literal|64
decl_stmt|;
name|TailStream
name|stream
init|=
operator|new
name|TailStream
argument_list|(
name|generateStream
argument_list|(
literal|0
argument_list|,
literal|2
operator|*
name|tailSize
argument_list|)
argument_list|,
name|tailSize
argument_list|)
decl_stmt|;
name|byte
index|[]
name|buf
init|=
operator|new
name|byte
index|[
name|tailSize
operator|/
literal|2
index|]
decl_stmt|;
name|stream
operator|.
name|read
argument_list|(
name|buf
argument_list|)
expr_stmt|;
name|stream
operator|.
name|mark
argument_list|(
name|tailSize
argument_list|)
expr_stmt|;
name|stream
operator|.
name|read
argument_list|(
name|buf
argument_list|)
expr_stmt|;
name|stream
operator|.
name|reset
argument_list|()
expr_stmt|;
name|readStream
argument_list|(
name|stream
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Wrong buffer"
argument_list|,
name|generateText
argument_list|(
name|tailSize
argument_list|,
name|tailSize
argument_list|)
argument_list|,
operator|new
name|String
argument_list|(
name|stream
operator|.
name|getTail
argument_list|()
argument_list|,
name|UTF_8
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Tests whether a reset() operation without a mark is simply ignored.      */
annotation|@
name|Test
specifier|public
name|void
name|testResetWithoutMark
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|int
name|tailSize
init|=
literal|75
decl_stmt|;
specifier|final
name|int
name|count
init|=
literal|128
decl_stmt|;
name|TailStream
name|stream
init|=
operator|new
name|TailStream
argument_list|(
name|generateStream
argument_list|(
literal|0
argument_list|,
name|count
argument_list|)
argument_list|,
name|tailSize
argument_list|)
decl_stmt|;
name|stream
operator|.
name|reset
argument_list|()
expr_stmt|;
name|byte
index|[]
name|buf
init|=
operator|new
name|byte
index|[
name|count
index|]
decl_stmt|;
name|stream
operator|.
name|read
argument_list|(
name|buf
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Wrong buffer"
argument_list|,
name|generateText
argument_list|(
name|count
operator|-
name|tailSize
argument_list|,
name|tailSize
argument_list|)
argument_list|,
operator|new
name|String
argument_list|(
name|stream
operator|.
name|getTail
argument_list|()
argument_list|,
name|UTF_8
argument_list|)
argument_list|)
expr_stmt|;
name|stream
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/**      * Tests whether skip() also fills the tail buffer.      */
annotation|@
name|Test
specifier|public
name|void
name|testSkip
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|int
name|tailSize
init|=
literal|128
decl_stmt|;
specifier|final
name|int
name|count
init|=
literal|1024
decl_stmt|;
specifier|final
name|int
name|skipCount
init|=
literal|512
decl_stmt|;
name|TailStream
name|stream
init|=
operator|new
name|TailStream
argument_list|(
name|generateStream
argument_list|(
literal|0
argument_list|,
name|count
argument_list|)
argument_list|,
name|tailSize
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Wrong skip result"
argument_list|,
name|skipCount
argument_list|,
name|stream
operator|.
name|skip
argument_list|(
name|skipCount
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Wrong buffer"
argument_list|,
name|generateText
argument_list|(
name|skipCount
operator|-
name|tailSize
argument_list|,
name|tailSize
argument_list|)
argument_list|,
operator|new
name|String
argument_list|(
name|stream
operator|.
name|getTail
argument_list|()
argument_list|,
name|UTF_8
argument_list|)
argument_list|)
expr_stmt|;
name|stream
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/**      * Tests a skip operation at the end of the stream.      */
annotation|@
name|Test
specifier|public
name|void
name|testSkipEOS
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|int
name|count
init|=
literal|128
decl_stmt|;
name|TailStream
name|stream
init|=
operator|new
name|TailStream
argument_list|(
name|generateStream
argument_list|(
literal|0
argument_list|,
name|count
argument_list|)
argument_list|,
literal|2
operator|*
name|count
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Wrong skip result"
argument_list|,
name|count
argument_list|,
name|stream
operator|.
name|skip
argument_list|(
literal|2
operator|*
name|count
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Wrong buffer"
argument_list|,
name|generateText
argument_list|(
literal|0
argument_list|,
name|count
argument_list|)
argument_list|,
operator|new
name|String
argument_list|(
name|stream
operator|.
name|getTail
argument_list|()
argument_list|,
name|UTF_8
argument_list|)
argument_list|)
expr_stmt|;
name|stream
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/**      * Tests skip() if read reaches the end of the stream and returns -1.      */
annotation|@
name|Test
specifier|public
name|void
name|testSkipReadEnd
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|int
name|count
init|=
literal|128
decl_stmt|;
name|TailStream
name|stream
init|=
operator|new
name|TailStream
argument_list|(
name|generateStream
argument_list|(
literal|0
argument_list|,
name|count
argument_list|)
argument_list|,
literal|2
operator|*
name|count
argument_list|)
decl_stmt|;
name|readStream
argument_list|(
name|stream
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Wrong result"
argument_list|,
operator|-
literal|1
argument_list|,
name|stream
operator|.
name|skip
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

