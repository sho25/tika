begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|io
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|EndianUtilsTest
block|{
annotation|@
name|Test
specifier|public
name|void
name|testReadUE7
parameter_list|()
throws|throws
name|Exception
block|{
name|byte
index|[]
name|data
decl_stmt|;
name|data
operator|=
operator|new
name|byte
index|[]
block|{
literal|0x08
block|}
expr_stmt|;
name|assertEquals
argument_list|(
operator|(
name|long
operator|)
literal|8
argument_list|,
name|EndianUtils
operator|.
name|readUE7
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|data
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|data
operator|=
operator|new
name|byte
index|[]
block|{
operator|(
name|byte
operator|)
literal|0x84
block|,
literal|0x1e
block|}
expr_stmt|;
name|assertEquals
argument_list|(
operator|(
name|long
operator|)
literal|542
argument_list|,
name|EndianUtils
operator|.
name|readUE7
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|data
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|data
operator|=
operator|new
name|byte
index|[]
block|{
operator|(
name|byte
operator|)
literal|0xac
block|,
operator|(
name|byte
operator|)
literal|0xbe
block|,
literal|0x17
block|}
expr_stmt|;
name|assertEquals
argument_list|(
operator|(
name|long
operator|)
literal|728855
argument_list|,
name|EndianUtils
operator|.
name|readUE7
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|data
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testReadUIntLE
parameter_list|()
throws|throws
name|Exception
block|{
name|byte
index|[]
name|data
init|=
operator|new
name|byte
index|[]
block|{
operator|(
name|byte
operator|)
literal|0x08
block|,
operator|(
name|byte
operator|)
literal|0x00
block|,
operator|(
name|byte
operator|)
literal|0x00
block|,
operator|(
name|byte
operator|)
literal|0x00
block|}
decl_stmt|;
name|assertEquals
argument_list|(
operator|(
name|long
operator|)
literal|8
argument_list|,
name|EndianUtils
operator|.
name|readUIntLE
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|data
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|data
operator|=
operator|new
name|byte
index|[]
block|{
operator|(
name|byte
operator|)
literal|0xFF
block|,
operator|(
name|byte
operator|)
literal|0xFF
block|,
operator|(
name|byte
operator|)
literal|0xFF
block|,
operator|(
name|byte
operator|)
literal|0xFF
block|}
expr_stmt|;
name|assertEquals
argument_list|(
literal|4294967295L
argument_list|,
name|EndianUtils
operator|.
name|readUIntLE
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|data
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|data
operator|=
operator|new
name|byte
index|[]
block|{
operator|(
name|byte
operator|)
literal|0xFF
block|,
operator|(
name|byte
operator|)
literal|0xFF
block|,
operator|(
name|byte
operator|)
literal|0xFF
block|}
expr_stmt|;
try|try
block|{
name|EndianUtils
operator|.
name|readUIntLE
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|data
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should have thrown exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|EndianUtils
operator|.
name|BufferUnderrunException
name|e
parameter_list|)
block|{          }
block|}
block|}
end_class

end_unit

