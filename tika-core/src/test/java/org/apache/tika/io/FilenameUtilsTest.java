begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|io
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|FilenameUtilsTest
block|{
comment|/**      * Different filesystems and operating systems have different restrictions      * on the name that can be used for files and directories.      * FilenameUtils.normalize() returns a cross platform file name that turns      * special characters in a HEX based code convention. This is %<code>.      * For example why?.zip will be converted into why%3F.zip      *      * @see http://en.wikipedia.org/wiki/Filename#Comparison_of_filename_limitations      *      * Reserved chars are the ones in FilenameUtils.RESERVED_FILENAME_CHARACTERS:      */
annotation|@
name|Test
specifier|public
name|void
name|normalizeNothingTodo
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|TEST_NAME
init|=
literal|"test.zip"
decl_stmt|;
name|assertEquals
argument_list|(
name|TEST_NAME
argument_list|,
name|FilenameUtils
operator|.
name|normalize
argument_list|(
name|TEST_NAME
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|normalizeWithNull
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|FilenameUtils
operator|.
name|normalize
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"missing check for null parameters"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|x
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|x
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"name"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|x
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"not be null"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|normalizeWithReservedChar
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
index|[]
name|TEST_NAMES
init|=
block|{
literal|"test?.txt"
block|,
literal|"?test.txt"
block|,
literal|"test.txt?"
block|,
literal|"?test?txt?"
block|}
decl_stmt|;
specifier|final
name|String
index|[]
name|EXPECTED_NAMES
init|=
block|{
literal|"test%3F.txt"
block|,
literal|"%3Ftest.txt"
block|,
literal|"test.txt%3F"
block|,
literal|"%3Ftest%3Ftxt%3F"
block|}
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|TEST_NAMES
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
comment|//System.out.println("checking " + TEST_NAMES[i]);
name|assertEquals
argument_list|(
name|EXPECTED_NAMES
index|[
name|i
index|]
argument_list|,
name|FilenameUtils
operator|.
name|normalize
argument_list|(
name|TEST_NAMES
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|normalizeWithReservedChars
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|TEST_NAME
init|=
literal|"?a/b\nc\td\re*f\\g:h<i>j.txt|"
decl_stmt|;
specifier|final
name|String
name|EXPECTED_NAME
init|=
literal|"%3Fa/b%0Ac%09d%0De%2Af\\g%3Ah%3Ci%3Ej.txt%7C"
decl_stmt|;
name|assertEquals
argument_list|(
name|EXPECTED_NAME
argument_list|,
name|FilenameUtils
operator|.
name|normalize
argument_list|(
name|TEST_NAME
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|normalizeWithNotPrintableChars
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|TEST_NAME
init|=
operator|new
name|String
argument_list|(
operator|new
name|char
index|[]
block|{
literal|0
block|,
literal|1
block|,
literal|2
block|,
literal|3
block|,
literal|4
block|,
literal|5
block|,
literal|6
block|,
literal|7
block|,
literal|8
block|,
literal|9
block|,
literal|10
block|,
literal|11
block|,
literal|12
block|,
literal|13
block|,
literal|14
block|,
literal|15
block|,
literal|'.'
block|,
literal|16
block|,
literal|17
block|,
literal|18
block|,
literal|19
block|,
literal|20
block|,
literal|21
block|,
literal|22
block|,
literal|23
block|,
literal|24
block|,
literal|25
block|,
literal|26
block|,
literal|27
block|,
literal|28
block|,
literal|29
block|,
literal|30
block|,
literal|31
block|}
argument_list|)
decl_stmt|;
specifier|final
name|String
name|EXPECTED_NAME
init|=
literal|"%00%01%02%03%04%05%06%07%08%09%0A%0B%0C%0D%0E%0F"
operator|+
literal|"."
operator|+
literal|"%10%11%12%13%14%15%16%17%18%19%1A%1B%1C%1D%1E%1F"
decl_stmt|;
name|assertEquals
argument_list|(
name|EXPECTED_NAME
argument_list|,
name|FilenameUtils
operator|.
name|normalize
argument_list|(
name|TEST_NAME
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetName
parameter_list|()
throws|throws
name|Exception
block|{
name|testFilenameEquality
argument_list|(
literal|"quick.ppt"
argument_list|,
literal|"C:\\the\\quick.ppt"
argument_list|)
expr_stmt|;
name|testFilenameEquality
argument_list|(
literal|"quick.ppt"
argument_list|,
literal|"/the/quick.ppt"
argument_list|)
expr_stmt|;
name|testFilenameEquality
argument_list|(
literal|""
argument_list|,
literal|"/the/quick/"
argument_list|)
expr_stmt|;
name|testFilenameEquality
argument_list|(
literal|""
argument_list|,
literal|"~/the/quick////\\\\//"
argument_list|)
expr_stmt|;
name|testFilenameEquality
argument_list|(
literal|"~~quick"
argument_list|,
literal|"~~quick"
argument_list|)
expr_stmt|;
name|testFilenameEquality
argument_list|(
literal|"quick.ppt"
argument_list|,
literal|"quick.ppt"
argument_list|)
expr_stmt|;
name|testFilenameEquality
argument_list|(
literal|""
argument_list|,
literal|"////"
argument_list|)
expr_stmt|;
name|testFilenameEquality
argument_list|(
literal|""
argument_list|,
literal|"C:////"
argument_list|)
expr_stmt|;
name|testFilenameEquality
argument_list|(
literal|""
argument_list|,
literal|".."
argument_list|)
expr_stmt|;
name|testFilenameEquality
argument_list|(
literal|"quick"
argument_list|,
literal|"C:////../the/D:/quick"
argument_list|)
expr_stmt|;
name|testFilenameEquality
argument_list|(
literal|"file.ppt"
argument_list|,
literal|"path:to:file.ppt"
argument_list|)
expr_stmt|;
name|testFilenameEquality
argument_list|(
literal|"HW.txt"
argument_list|,
literal|"_1457338542/HW.txt"
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|testFilenameEquality
parameter_list|(
name|String
name|expected
parameter_list|,
name|String
name|path
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|FilenameUtils
operator|.
name|getName
argument_list|(
name|path
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

