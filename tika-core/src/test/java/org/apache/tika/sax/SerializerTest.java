begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|sax
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|ContentHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|helpers
operator|.
name|AttributesImpl
import|;
end_import

begin_class
specifier|public
class|class
name|SerializerTest
block|{
annotation|@
name|Test
specifier|public
name|void
name|testToTextContentHandler
parameter_list|()
throws|throws
name|Exception
block|{
name|assertStartDocument
argument_list|(
literal|""
argument_list|,
operator|new
name|ToTextContentHandler
argument_list|()
argument_list|)
expr_stmt|;
name|assertCharacters
argument_list|(
literal|"content"
argument_list|,
operator|new
name|ToTextContentHandler
argument_list|()
argument_list|)
expr_stmt|;
name|assertCharacterEscaping
argument_list|(
literal|"<&\">"
argument_list|,
operator|new
name|ToTextContentHandler
argument_list|()
argument_list|)
expr_stmt|;
name|assertIgnorableWhitespace
argument_list|(
literal|" \t\r\n"
argument_list|,
operator|new
name|ToTextContentHandler
argument_list|()
argument_list|)
expr_stmt|;
name|assertEmptyElement
argument_list|(
literal|""
argument_list|,
operator|new
name|ToTextContentHandler
argument_list|()
argument_list|)
expr_stmt|;
name|assertEmptyElementWithAttributes
argument_list|(
literal|""
argument_list|,
operator|new
name|ToTextContentHandler
argument_list|()
argument_list|)
expr_stmt|;
name|assertEmptyElementWithAttributeEscaping
argument_list|(
literal|""
argument_list|,
operator|new
name|ToTextContentHandler
argument_list|()
argument_list|)
expr_stmt|;
name|assertElement
argument_list|(
literal|"content"
argument_list|,
operator|new
name|ToTextContentHandler
argument_list|()
argument_list|)
expr_stmt|;
name|assertElementWithAttributes
argument_list|(
literal|"content"
argument_list|,
operator|new
name|ToTextContentHandler
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testToXMLContentHandler
parameter_list|()
throws|throws
name|Exception
block|{
name|assertStartDocument
argument_list|(
literal|""
argument_list|,
operator|new
name|ToXMLContentHandler
argument_list|()
argument_list|)
expr_stmt|;
name|assertStartDocument
argument_list|(
literal|"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n"
argument_list|,
operator|new
name|ToXMLContentHandler
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
expr_stmt|;
name|assertCharacters
argument_list|(
literal|"content"
argument_list|,
operator|new
name|ToXMLContentHandler
argument_list|()
argument_list|)
expr_stmt|;
name|assertCharacterEscaping
argument_list|(
literal|"&lt;&amp;\"&gt;"
argument_list|,
operator|new
name|ToXMLContentHandler
argument_list|()
argument_list|)
expr_stmt|;
name|assertIgnorableWhitespace
argument_list|(
literal|" \t\r\n"
argument_list|,
operator|new
name|ToXMLContentHandler
argument_list|()
argument_list|)
expr_stmt|;
name|assertEmptyElement
argument_list|(
literal|"<br />"
argument_list|,
operator|new
name|ToXMLContentHandler
argument_list|()
argument_list|)
expr_stmt|;
name|assertEmptyElementWithAttributes
argument_list|(
literal|"<meta name=\"foo\" value=\"bar\" />"
argument_list|,
operator|new
name|ToXMLContentHandler
argument_list|()
argument_list|)
expr_stmt|;
name|assertEmptyElementWithAttributeEscaping
argument_list|(
literal|"<p class=\"&lt;&amp;&quot;&gt;\" />"
argument_list|,
operator|new
name|ToXMLContentHandler
argument_list|()
argument_list|)
expr_stmt|;
name|assertElement
argument_list|(
literal|"<p>content</p>"
argument_list|,
operator|new
name|ToXMLContentHandler
argument_list|()
argument_list|)
expr_stmt|;
name|assertElementWithAttributes
argument_list|(
literal|"<p class=\"test\">content</p>"
argument_list|,
operator|new
name|ToXMLContentHandler
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testToHTMLContentHandler
parameter_list|()
throws|throws
name|Exception
block|{
name|assertStartDocument
argument_list|(
literal|""
argument_list|,
operator|new
name|ToHTMLContentHandler
argument_list|()
argument_list|)
expr_stmt|;
name|assertCharacters
argument_list|(
literal|"content"
argument_list|,
operator|new
name|ToHTMLContentHandler
argument_list|()
argument_list|)
expr_stmt|;
name|assertCharacterEscaping
argument_list|(
literal|"&lt;&amp;\"&gt;"
argument_list|,
operator|new
name|ToHTMLContentHandler
argument_list|()
argument_list|)
expr_stmt|;
name|assertIgnorableWhitespace
argument_list|(
literal|" \t\r\n"
argument_list|,
operator|new
name|ToHTMLContentHandler
argument_list|()
argument_list|)
expr_stmt|;
name|assertEmptyElement
argument_list|(
literal|"<br>"
argument_list|,
operator|new
name|ToHTMLContentHandler
argument_list|()
argument_list|)
expr_stmt|;
name|assertEmptyElementWithAttributes
argument_list|(
literal|"<meta name=\"foo\" value=\"bar\">"
argument_list|,
operator|new
name|ToHTMLContentHandler
argument_list|()
argument_list|)
expr_stmt|;
name|assertEmptyElementWithAttributeEscaping
argument_list|(
literal|"<p class=\"&lt;&amp;&quot;&gt;\"></p>"
argument_list|,
operator|new
name|ToHTMLContentHandler
argument_list|()
argument_list|)
expr_stmt|;
name|assertElement
argument_list|(
literal|"<p>content</p>"
argument_list|,
operator|new
name|ToHTMLContentHandler
argument_list|()
argument_list|)
expr_stmt|;
name|assertElementWithAttributes
argument_list|(
literal|"<p class=\"test\">content</p>"
argument_list|,
operator|new
name|ToHTMLContentHandler
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|assertStartDocument
parameter_list|(
name|String
name|expected
parameter_list|,
name|ContentHandler
name|handler
parameter_list|)
throws|throws
name|Exception
block|{
name|handler
operator|.
name|startDocument
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|handler
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|assertCharacters
parameter_list|(
name|String
name|expected
parameter_list|,
name|ContentHandler
name|handler
parameter_list|)
throws|throws
name|Exception
block|{
name|handler
operator|.
name|characters
argument_list|(
literal|"content"
operator|.
name|toCharArray
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|7
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|handler
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|assertCharacterEscaping
parameter_list|(
name|String
name|expected
parameter_list|,
name|ContentHandler
name|handler
parameter_list|)
throws|throws
name|Exception
block|{
name|handler
operator|.
name|characters
argument_list|(
literal|"<&\">"
operator|.
name|toCharArray
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|handler
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|assertIgnorableWhitespace
parameter_list|(
name|String
name|expected
parameter_list|,
name|ContentHandler
name|handler
parameter_list|)
throws|throws
name|Exception
block|{
name|handler
operator|.
name|ignorableWhitespace
argument_list|(
literal|" \t\r\n"
operator|.
name|toCharArray
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|handler
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|assertEmptyElement
parameter_list|(
name|String
name|expected
parameter_list|,
name|ContentHandler
name|handler
parameter_list|)
throws|throws
name|Exception
block|{
name|AttributesImpl
name|attributes
init|=
operator|new
name|AttributesImpl
argument_list|()
decl_stmt|;
name|handler
operator|.
name|startElement
argument_list|(
literal|""
argument_list|,
literal|"br"
argument_list|,
literal|"br"
argument_list|,
name|attributes
argument_list|)
expr_stmt|;
name|handler
operator|.
name|endElement
argument_list|(
literal|""
argument_list|,
literal|"br"
argument_list|,
literal|"br"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|handler
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|assertEmptyElementWithAttributes
parameter_list|(
name|String
name|expected
parameter_list|,
name|ContentHandler
name|handler
parameter_list|)
throws|throws
name|Exception
block|{
name|AttributesImpl
name|attributes
init|=
operator|new
name|AttributesImpl
argument_list|()
decl_stmt|;
name|attributes
operator|.
name|addAttribute
argument_list|(
literal|""
argument_list|,
literal|"name"
argument_list|,
literal|"name"
argument_list|,
literal|"CDATA"
argument_list|,
literal|"foo"
argument_list|)
expr_stmt|;
name|attributes
operator|.
name|addAttribute
argument_list|(
literal|""
argument_list|,
literal|"value"
argument_list|,
literal|"value"
argument_list|,
literal|"CDATA"
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
name|handler
operator|.
name|startElement
argument_list|(
literal|""
argument_list|,
literal|"meta"
argument_list|,
literal|"meta"
argument_list|,
name|attributes
argument_list|)
expr_stmt|;
name|handler
operator|.
name|endElement
argument_list|(
literal|""
argument_list|,
literal|"meta"
argument_list|,
literal|"meta"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|handler
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|assertEmptyElementWithAttributeEscaping
parameter_list|(
name|String
name|expected
parameter_list|,
name|ContentHandler
name|handler
parameter_list|)
throws|throws
name|Exception
block|{
name|AttributesImpl
name|attributes
init|=
operator|new
name|AttributesImpl
argument_list|()
decl_stmt|;
name|attributes
operator|.
name|addAttribute
argument_list|(
literal|""
argument_list|,
literal|"class"
argument_list|,
literal|"class"
argument_list|,
literal|"CDATA"
argument_list|,
literal|"<&\">"
argument_list|)
expr_stmt|;
name|handler
operator|.
name|startElement
argument_list|(
literal|""
argument_list|,
literal|"p"
argument_list|,
literal|"p"
argument_list|,
name|attributes
argument_list|)
expr_stmt|;
name|handler
operator|.
name|endElement
argument_list|(
literal|""
argument_list|,
literal|"p"
argument_list|,
literal|"p"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|handler
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|assertElement
parameter_list|(
name|String
name|expected
parameter_list|,
name|ContentHandler
name|handler
parameter_list|)
throws|throws
name|Exception
block|{
name|AttributesImpl
name|attributes
init|=
operator|new
name|AttributesImpl
argument_list|()
decl_stmt|;
name|handler
operator|.
name|startElement
argument_list|(
literal|""
argument_list|,
literal|"p"
argument_list|,
literal|"p"
argument_list|,
name|attributes
argument_list|)
expr_stmt|;
name|handler
operator|.
name|characters
argument_list|(
literal|"content"
operator|.
name|toCharArray
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|7
argument_list|)
expr_stmt|;
name|handler
operator|.
name|endElement
argument_list|(
literal|""
argument_list|,
literal|"p"
argument_list|,
literal|"p"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|handler
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|assertElementWithAttributes
parameter_list|(
name|String
name|expected
parameter_list|,
name|ContentHandler
name|handler
parameter_list|)
throws|throws
name|Exception
block|{
name|AttributesImpl
name|attributes
init|=
operator|new
name|AttributesImpl
argument_list|()
decl_stmt|;
name|attributes
operator|.
name|addAttribute
argument_list|(
literal|""
argument_list|,
literal|"class"
argument_list|,
literal|"class"
argument_list|,
literal|"CDATA"
argument_list|,
literal|"test"
argument_list|)
expr_stmt|;
name|handler
operator|.
name|startElement
argument_list|(
literal|""
argument_list|,
literal|"p"
argument_list|,
literal|"p"
argument_list|,
name|attributes
argument_list|)
expr_stmt|;
name|handler
operator|.
name|characters
argument_list|(
literal|"content"
operator|.
name|toCharArray
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|7
argument_list|)
expr_stmt|;
name|handler
operator|.
name|endElement
argument_list|(
literal|""
argument_list|,
literal|"p"
argument_list|,
literal|"p"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|handler
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

