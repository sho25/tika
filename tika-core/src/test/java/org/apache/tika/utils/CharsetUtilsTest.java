begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|utils
package|;
end_package

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_class
specifier|public
class|class
name|CharsetUtilsTest
extends|extends
name|TestCase
block|{
specifier|public
name|void
name|testInvalidCharset
parameter_list|()
block|{
name|assertFalse
argument_list|(
name|CharsetUtils
operator|.
name|isSupported
argument_list|(
literal|" utf-8"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|CharsetUtils
operator|.
name|isSupported
argument_list|(
literal|"my charset name"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|CharsetUtils
operator|.
name|isSupported
argument_list|(
literal|"charset1; charset2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|CharsetUtils
operator|.
name|isSupported
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|CharsetUtils
operator|.
name|isSupported
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testValidCharset
parameter_list|()
block|{
name|assertTrue
argument_list|(
name|CharsetUtils
operator|.
name|isSupported
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|CharsetUtils
operator|.
name|isSupported
argument_list|(
literal|"bogus"
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testCleaningCharsetName
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|"UTF-8"
argument_list|,
name|CharsetUtils
operator|.
name|clean
argument_list|(
literal|"utf-8"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|CharsetUtils
operator|.
name|clean
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|CharsetUtils
operator|.
name|clean
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"US-ASCII"
argument_list|,
name|CharsetUtils
operator|.
name|clean
argument_list|(
literal|" us-ascii  "
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"UTF-8"
argument_list|,
name|CharsetUtils
operator|.
name|clean
argument_list|(
literal|"\"utf-8\""
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"ISO-8859-1"
argument_list|,
name|CharsetUtils
operator|.
name|clean
argument_list|(
literal|"ISO-8859-1, latin1"
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testFunkyNames
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|CharsetUtils
operator|.
name|clean
argument_list|(
literal|"none"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|CharsetUtils
operator|.
name|clean
argument_list|(
literal|"no"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"UTF-8"
argument_list|,
name|CharsetUtils
operator|.
name|clean
argument_list|(
literal|"utf-8>"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"ISO-8859-1"
argument_list|,
name|CharsetUtils
operator|.
name|clean
argument_list|(
literal|"iso-8851-1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"ISO-8859-15"
argument_list|,
name|CharsetUtils
operator|.
name|clean
argument_list|(
literal|"8859-15"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"windows-1251"
argument_list|,
name|CharsetUtils
operator|.
name|clean
argument_list|(
literal|"cp-1251"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"windows-1251"
argument_list|,
name|CharsetUtils
operator|.
name|clean
argument_list|(
literal|"win1251"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"windows-1251"
argument_list|,
name|CharsetUtils
operator|.
name|clean
argument_list|(
literal|"WIN-1251"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"windows-1251"
argument_list|,
name|CharsetUtils
operator|.
name|clean
argument_list|(
literal|"win-1251"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"windows-1252"
argument_list|,
name|CharsetUtils
operator|.
name|clean
argument_list|(
literal|"Windows"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"KOI8-R"
argument_list|,
name|CharsetUtils
operator|.
name|clean
argument_list|(
literal|"koi8r"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

