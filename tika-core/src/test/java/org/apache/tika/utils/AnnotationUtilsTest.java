begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|utils
package|;
end_package

begin_import
import|import
name|aQute
operator|.
name|bnd
operator|.
name|annotation
operator|.
name|metatype
operator|.
name|Configurable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|config
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|config
operator|.
name|Param
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|exception
operator|.
name|TikaConfigException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * @since 6/1/16  */
end_comment

begin_class
specifier|public
class|class
name|AnnotationUtilsTest
block|{
annotation|@
name|Test
specifier|public
name|void
name|testMisMatchType
parameter_list|()
block|{
class|class
name|MyParser
extends|extends
name|Configurable
block|{
annotation|@
name|Field
argument_list|(
name|required
operator|=
literal|true
argument_list|)
name|int
name|config
decl_stmt|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|Param
argument_list|>
name|params
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
try|try
block|{
name|params
operator|.
name|put
argument_list|(
literal|"config"
argument_list|,
operator|new
name|Param
argument_list|<>
argument_list|(
literal|"config"
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|MyParser
name|bean
init|=
operator|new
name|MyParser
argument_list|()
decl_stmt|;
name|AnnotationUtils
operator|.
name|assignFieldParams
argument_list|(
name|bean
argument_list|,
name|params
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|bean
operator|.
name|config
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TikaConfigException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Exception Not expected"
argument_list|)
expr_stmt|;
block|}
name|params
operator|.
name|clear
argument_list|()
expr_stmt|;
try|try
block|{
name|params
operator|.
name|put
argument_list|(
literal|"config"
argument_list|,
operator|new
name|Param
argument_list|<>
argument_list|(
literal|"config"
argument_list|,
literal|"a string value"
argument_list|)
argument_list|)
expr_stmt|;
name|AnnotationUtils
operator|.
name|assignFieldParams
argument_list|(
operator|new
name|MyParser
argument_list|()
argument_list|,
name|params
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Exception expected"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TikaConfigException
name|e
parameter_list|)
block|{
comment|//expected
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPrimitiveAndBoxedTypes
parameter_list|()
block|{
class|class
name|MyParser
extends|extends
name|Configurable
block|{
annotation|@
name|Field
argument_list|(
name|required
operator|=
literal|true
argument_list|)
name|int
name|config
decl_stmt|;
annotation|@
name|Field
argument_list|(
name|required
operator|=
literal|true
argument_list|,
name|name
operator|=
literal|"config"
argument_list|)
name|Integer
name|config2
decl_stmt|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|Param
argument_list|>
name|params
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
try|try
block|{
name|MyParser
name|bean
init|=
operator|new
name|MyParser
argument_list|()
decl_stmt|;
name|int
name|val
init|=
literal|100
decl_stmt|;
name|params
operator|.
name|put
argument_list|(
literal|"config"
argument_list|,
operator|new
name|Param
argument_list|<>
argument_list|(
literal|"config"
argument_list|,
name|val
argument_list|)
argument_list|)
expr_stmt|;
name|AnnotationUtils
operator|.
name|assignFieldParams
argument_list|(
name|bean
argument_list|,
name|params
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|bean
operator|.
name|config
operator|==
name|bean
operator|.
name|config2
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|bean
operator|.
name|config
operator|==
name|val
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TikaConfigException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Exception Not expected"
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRequiredParam
parameter_list|()
block|{
class|class
name|MyParser
extends|extends
name|Configurable
block|{
annotation|@
name|Field
argument_list|(
name|required
operator|=
literal|true
argument_list|)
name|String
name|config
decl_stmt|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|Param
argument_list|>
name|params
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|String
name|someval
init|=
literal|"someval"
decl_stmt|;
name|params
operator|.
name|put
argument_list|(
literal|"config"
argument_list|,
operator|new
name|Param
argument_list|<>
argument_list|(
literal|"config"
argument_list|,
name|someval
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|MyParser
name|bean
init|=
operator|new
name|MyParser
argument_list|()
decl_stmt|;
name|AnnotationUtils
operator|.
name|assignFieldParams
argument_list|(
name|bean
argument_list|,
name|params
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|bean
operator|.
name|config
argument_list|,
name|someval
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TikaConfigException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Exception Not expected"
argument_list|)
expr_stmt|;
block|}
name|params
operator|.
name|clear
argument_list|()
expr_stmt|;
try|try
block|{
name|AnnotationUtils
operator|.
name|assignFieldParams
argument_list|(
operator|new
name|MyParser
argument_list|()
argument_list|,
name|params
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Exception expected"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TikaConfigException
name|e
parameter_list|)
block|{
comment|//expected
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testParserInheritance
parameter_list|()
block|{
class|class
name|Parent
block|{
annotation|@
name|Field
argument_list|(
name|required
operator|=
literal|true
argument_list|)
name|int
name|overridden
decl_stmt|;
annotation|@
name|Field
argument_list|(
name|required
operator|=
literal|true
argument_list|)
name|int
name|parentField
decl_stmt|;
block|}
class|class
name|Child
extends|extends
name|Parent
block|{
annotation|@
name|Field
argument_list|(
name|required
operator|=
literal|true
argument_list|)
name|int
name|overridden
decl_stmt|;
annotation|@
name|Field
argument_list|(
name|required
operator|=
literal|true
argument_list|)
name|int
name|childField
decl_stmt|;
block|}
name|int
name|val
init|=
literal|1
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Param
argument_list|>
name|params
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|params
operator|.
name|put
argument_list|(
literal|"overridden"
argument_list|,
operator|new
name|Param
argument_list|<>
argument_list|(
literal|"oevrriden"
argument_list|,
name|val
argument_list|)
argument_list|)
expr_stmt|;
name|params
operator|.
name|put
argument_list|(
literal|"parentField"
argument_list|,
operator|new
name|Param
argument_list|<>
argument_list|(
literal|"parentField"
argument_list|,
name|val
argument_list|)
argument_list|)
expr_stmt|;
name|params
operator|.
name|put
argument_list|(
literal|"childField"
argument_list|,
operator|new
name|Param
argument_list|<>
argument_list|(
literal|"childField"
argument_list|,
name|val
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|Child
name|child
init|=
operator|new
name|Child
argument_list|()
decl_stmt|;
name|AnnotationUtils
operator|.
name|assignFieldParams
argument_list|(
name|child
argument_list|,
name|params
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|child
operator|.
name|overridden
argument_list|,
name|val
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|child
operator|.
name|parentField
argument_list|,
name|val
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|child
operator|.
name|childField
argument_list|,
name|val
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TikaConfigException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Exception Not expected"
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|params
operator|.
name|remove
argument_list|(
literal|"parentField"
argument_list|)
expr_stmt|;
name|AnnotationUtils
operator|.
name|assignFieldParams
argument_list|(
operator|new
name|Child
argument_list|()
argument_list|,
name|params
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Exception expected, parent class field not set"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TikaConfigException
name|e
parameter_list|)
block|{
comment|//expected
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testParamValueInheritance
parameter_list|()
block|{
class|class
name|Bean
block|{
annotation|@
name|Field
argument_list|(
name|required
operator|=
literal|true
argument_list|)
name|CharSequence
name|field
decl_stmt|;
block|}
name|Bean
name|parser
init|=
operator|new
name|Bean
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Param
argument_list|>
name|params
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
try|try
block|{
name|String
name|val
init|=
literal|"someval"
decl_stmt|;
name|params
operator|.
name|put
argument_list|(
literal|"field"
argument_list|,
operator|new
name|Param
argument_list|<
name|String
argument_list|>
argument_list|(
literal|"field"
argument_list|,
name|String
operator|.
name|class
argument_list|,
name|val
argument_list|)
argument_list|)
expr_stmt|;
name|AnnotationUtils
operator|.
name|assignFieldParams
argument_list|(
name|parser
argument_list|,
name|params
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|val
argument_list|,
name|parser
operator|.
name|field
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Exception not expected, string is assignable to CharSequence"
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|Date
name|val
init|=
operator|new
name|Date
argument_list|()
decl_stmt|;
name|params
operator|.
name|put
argument_list|(
literal|"field"
argument_list|,
operator|new
name|Param
argument_list|<
name|Date
argument_list|>
argument_list|(
literal|"field"
argument_list|,
name|Date
operator|.
name|class
argument_list|,
name|val
argument_list|)
argument_list|)
expr_stmt|;
name|AnnotationUtils
operator|.
name|assignFieldParams
argument_list|(
name|parser
argument_list|,
name|params
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Exception expected, Date is not assignable to CharSequence."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TikaConfigException
name|e
parameter_list|)
block|{
comment|//expected
block|}
block|}
block|}
end_class

end_unit

