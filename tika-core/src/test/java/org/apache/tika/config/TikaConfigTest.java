begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|config
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Paths
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadPoolExecutor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|ResourceLoggingClassLoader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|config
operator|.
name|DummyExecutor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|config
operator|.
name|TikaConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|config
operator|.
name|TikaConfigTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|exception
operator|.
name|TikaConfigException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|exception
operator|.
name|TikaException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|AutoDetectParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|CompositeParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|DefaultParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|EmptyParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|ErrorParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|Parser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|ParserDecorator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_comment
comment|/**  * Tests for the Tika Config, which don't require real parsers /  *  detectors / etc.  * There's also {@link TikaParserConfigTest} and {@link TikaDetectorConfigTest}  *  over in the Tika Parsers project, which do further Tika Config  *  testing using real parsers and detectors.  */
end_comment

begin_class
specifier|public
class|class
name|TikaConfigTest
extends|extends
name|AbstractTikaConfigTest
block|{
comment|/**      * Make sure that a configuration file can't reference the      * {@link AutoDetectParser} class a&lt;parser&gt; configuration element.      *      * @see<a href="https://issues.apache.org/jira/browse/TIKA-866">TIKA-866</a>      */
annotation|@
name|Test
specifier|public
name|void
name|withInvalidParser
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|getConfig
argument_list|(
literal|"TIKA-866-invalid.xml"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"AutoDetectParser allowed in a<parser> element"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TikaException
name|expected
parameter_list|)
block|{}
block|}
comment|/**      * Make sure that with a service loader given, we can      * get different configurable behaviour on parser classes      * which can't be found.      */
annotation|@
name|Test
specifier|public
name|void
name|testUnknownParser
parameter_list|()
throws|throws
name|Exception
block|{
name|ServiceLoader
name|ignoreLoader
init|=
operator|new
name|ServiceLoader
argument_list|(
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
argument_list|,
name|LoadErrorHandler
operator|.
name|IGNORE
argument_list|)
decl_stmt|;
name|ServiceLoader
name|warnLoader
init|=
operator|new
name|ServiceLoader
argument_list|(
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
argument_list|,
name|LoadErrorHandler
operator|.
name|WARN
argument_list|)
decl_stmt|;
name|ServiceLoader
name|throwLoader
init|=
operator|new
name|ServiceLoader
argument_list|(
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
argument_list|,
name|LoadErrorHandler
operator|.
name|THROW
argument_list|)
decl_stmt|;
name|Path
name|configPath
init|=
name|Paths
operator|.
name|get
argument_list|(
operator|new
name|URI
argument_list|(
name|getConfigPath
argument_list|(
literal|"TIKA-1700-unknown-parser.xml"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|TikaConfig
name|ignore
init|=
operator|new
name|TikaConfig
argument_list|(
name|configPath
argument_list|,
name|ignoreLoader
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|ignore
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|ignore
operator|.
name|getParser
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
operator|(
operator|(
name|CompositeParser
operator|)
name|ignore
operator|.
name|getParser
argument_list|()
operator|)
operator|.
name|getAllComponentParsers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|TikaConfig
name|warn
init|=
operator|new
name|TikaConfig
argument_list|(
name|configPath
argument_list|,
name|warnLoader
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|warn
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|warn
operator|.
name|getParser
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
operator|(
operator|(
name|CompositeParser
operator|)
name|warn
operator|.
name|getParser
argument_list|()
operator|)
operator|.
name|getAllComponentParsers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
operator|new
name|TikaConfig
argument_list|(
name|configPath
argument_list|,
name|throwLoader
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Shouldn't get here, invalid parser class"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TikaException
name|expected
parameter_list|)
block|{}
block|}
comment|/**      * Make sure that a configuration file can reference also a composite      * parser class like {@link DefaultParser} in a&lt;parser&gt;      * configuration element.      *      * @see<a href="https://issues.apache.org/jira/browse/TIKA-866">TIKA-866</a>      */
annotation|@
name|Test
specifier|public
name|void
name|asCompositeParser
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|getConfig
argument_list|(
literal|"TIKA-866-composite.xml"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TikaException
name|e
parameter_list|)
block|{
name|fail
argument_list|(
literal|"Unexpected TikaException: "
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Make sure that a valid configuration file without mimetypes or      * detector entries can be loaded without problems.      *      * @see<a href="https://issues.apache.org/jira/browse/TIKA-866">TIKA-866</a>      */
annotation|@
name|Test
specifier|public
name|void
name|onlyValidParser
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|getConfig
argument_list|(
literal|"TIKA-866-valid.xml"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TikaException
name|e
parameter_list|)
block|{
name|fail
argument_list|(
literal|"Unexpected TikaException: "
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * TIKA-1145 If the TikaConfig has a ClassLoader set on it,      * that should be used when loading the mimetypes and when      * discovering services      */
annotation|@
name|Test
specifier|public
name|void
name|ensureClassLoaderUsedEverywhere
parameter_list|()
throws|throws
name|Exception
block|{
name|ResourceLoggingClassLoader
name|customLoader
init|=
operator|new
name|ResourceLoggingClassLoader
argument_list|(
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
argument_list|)
decl_stmt|;
name|TikaConfig
name|config
decl_stmt|;
comment|// Without a classloader set, normal one will be used
name|config
operator|=
operator|new
name|TikaConfig
argument_list|()
expr_stmt|;
name|config
operator|.
name|getMediaTypeRegistry
argument_list|()
expr_stmt|;
name|config
operator|.
name|getParser
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|customLoader
operator|.
name|getLoadedResources
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// With a classloader set, resources will come through it
name|config
operator|=
operator|new
name|TikaConfig
argument_list|(
name|customLoader
argument_list|)
expr_stmt|;
name|config
operator|.
name|getMediaTypeRegistry
argument_list|()
expr_stmt|;
name|config
operator|.
name|getParser
argument_list|()
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|URL
argument_list|>
argument_list|>
name|resources
init|=
name|customLoader
operator|.
name|getLoadedResources
argument_list|()
decl_stmt|;
name|int
name|resourcesCount
init|=
name|resources
operator|.
name|size
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Not enough things used the classloader, found only "
operator|+
name|resourcesCount
argument_list|,
name|resourcesCount
operator|>
literal|3
argument_list|)
expr_stmt|;
comment|// Ensure everything that should do, did use it
comment|// - Parsers
name|assertNotNull
argument_list|(
name|resources
operator|.
name|get
argument_list|(
literal|"META-INF/services/org.apache.tika.parser.Parser"
argument_list|)
argument_list|)
expr_stmt|;
comment|// - Detectors
name|assertNotNull
argument_list|(
name|resources
operator|.
name|get
argument_list|(
literal|"META-INF/services/org.apache.tika.detect.Detector"
argument_list|)
argument_list|)
expr_stmt|;
comment|// - Built-In Mimetypes
name|assertNotNull
argument_list|(
name|resources
operator|.
name|get
argument_list|(
literal|"org/apache/tika/mime/tika-mimetypes.xml"
argument_list|)
argument_list|)
expr_stmt|;
comment|// - Custom Mimetypes
name|assertNotNull
argument_list|(
name|resources
operator|.
name|get
argument_list|(
literal|"org/apache/tika/mime/custom-mimetypes.xml"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * TIKA-1445 It should be possible to exclude DefaultParser from      *  certain types, so another parser explicitly listed will take them      */
annotation|@
name|Test
specifier|public
name|void
name|defaultParserWithExcludes
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|TikaConfig
name|config
init|=
name|getConfig
argument_list|(
literal|"TIKA-1445-default-except.xml"
argument_list|)
decl_stmt|;
name|CompositeParser
name|cp
init|=
operator|(
name|CompositeParser
operator|)
name|config
operator|.
name|getParser
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Parser
argument_list|>
name|parsers
init|=
name|cp
operator|.
name|getAllComponentParsers
argument_list|()
decl_stmt|;
name|Parser
name|p
decl_stmt|;
comment|// Will be the three parsers defined in the xml
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|parsers
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Should have a wrapped DefaultParser, not the main DefaultParser,
comment|//  as it is excluded from handling certain classes
name|p
operator|=
name|parsers
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|p
operator|.
name|toString
argument_list|()
argument_list|,
name|p
operator|instanceof
name|ParserDecorator
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|DefaultParser
operator|.
name|class
argument_list|,
operator|(
operator|(
name|ParserDecorator
operator|)
name|p
operator|)
operator|.
name|getWrappedParser
argument_list|()
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
comment|// Should have two others which claim things, which they wouldn't
comment|//  otherwise handle
name|p
operator|=
name|parsers
operator|.
name|get
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|p
operator|.
name|toString
argument_list|()
argument_list|,
name|p
operator|instanceof
name|ParserDecorator
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|EmptyParser
operator|.
name|class
argument_list|,
operator|(
operator|(
name|ParserDecorator
operator|)
name|p
operator|)
operator|.
name|getWrappedParser
argument_list|()
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"hello/world"
argument_list|,
name|p
operator|.
name|getSupportedTypes
argument_list|(
literal|null
argument_list|)
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|p
operator|=
name|parsers
operator|.
name|get
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|p
operator|.
name|toString
argument_list|()
argument_list|,
name|p
operator|instanceof
name|ParserDecorator
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ErrorParser
operator|.
name|class
argument_list|,
operator|(
operator|(
name|ParserDecorator
operator|)
name|p
operator|)
operator|.
name|getWrappedParser
argument_list|()
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"fail/world"
argument_list|,
name|p
operator|.
name|getSupportedTypes
argument_list|(
literal|null
argument_list|)
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TikaException
name|e
parameter_list|)
block|{
name|fail
argument_list|(
literal|"Unexpected TikaException: "
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * TIKA-1653 If one parser has child parsers, those child parsers shouldn't      *  show up at the top level as well      */
annotation|@
name|Test
specifier|public
name|void
name|parserWithChildParsers
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|TikaConfig
name|config
init|=
name|getConfig
argument_list|(
literal|"TIKA-1653-norepeat.xml"
argument_list|)
decl_stmt|;
name|CompositeParser
name|cp
init|=
operator|(
name|CompositeParser
operator|)
name|config
operator|.
name|getParser
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Parser
argument_list|>
name|parsers
init|=
name|cp
operator|.
name|getAllComponentParsers
argument_list|()
decl_stmt|;
name|Parser
name|p
decl_stmt|;
comment|// Just 2 top level parsers
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|parsers
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Should have a CompositeParser with 2 child ones, and
comment|//  and a wrapped empty parser
name|p
operator|=
name|parsers
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|p
operator|.
name|toString
argument_list|()
argument_list|,
name|p
operator|instanceof
name|CompositeParser
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
operator|(
operator|(
name|CompositeParser
operator|)
name|p
operator|)
operator|.
name|getAllComponentParsers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|p
operator|=
name|parsers
operator|.
name|get
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|p
operator|.
name|toString
argument_list|()
argument_list|,
name|p
operator|instanceof
name|ParserDecorator
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|EmptyParser
operator|.
name|class
argument_list|,
operator|(
operator|(
name|ParserDecorator
operator|)
name|p
operator|)
operator|.
name|getWrappedParser
argument_list|()
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"hello/world"
argument_list|,
name|p
operator|.
name|getSupportedTypes
argument_list|(
literal|null
argument_list|)
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TikaException
name|e
parameter_list|)
block|{
name|fail
argument_list|(
literal|"Unexpected TikaException: "
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDynamicServiceLoaderFromConfig
parameter_list|()
throws|throws
name|Exception
block|{
name|URL
name|url
init|=
name|TikaConfigTest
operator|.
name|class
operator|.
name|getResource
argument_list|(
literal|"TIKA-1700-dynamic.xml"
argument_list|)
decl_stmt|;
name|TikaConfig
name|config
init|=
operator|new
name|TikaConfig
argument_list|(
name|url
argument_list|)
decl_stmt|;
name|DummyParser
name|parser
init|=
operator|(
name|DummyParser
operator|)
name|config
operator|.
name|getParser
argument_list|()
decl_stmt|;
name|ServiceLoader
name|loader
init|=
name|parser
operator|.
name|getLoader
argument_list|()
decl_stmt|;
name|boolean
name|dynamicValue
init|=
name|loader
operator|.
name|isDynamic
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Dynamic Service Loading Should be true"
argument_list|,
name|dynamicValue
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTikaExecutorServiceFromConfig
parameter_list|()
throws|throws
name|Exception
block|{
name|URL
name|url
init|=
name|TikaConfigTest
operator|.
name|class
operator|.
name|getResource
argument_list|(
literal|"TIKA-1762-executors.xml"
argument_list|)
decl_stmt|;
name|TikaConfig
name|config
init|=
operator|new
name|TikaConfig
argument_list|(
name|url
argument_list|)
decl_stmt|;
name|ThreadPoolExecutor
name|executorService
init|=
operator|(
name|ThreadPoolExecutor
operator|)
name|config
operator|.
name|getExecutorService
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Should use Dummy Executor"
argument_list|,
operator|(
name|executorService
operator|instanceof
name|DummyExecutor
operator|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Should have configured Core Threads"
argument_list|,
literal|3
argument_list|,
name|executorService
operator|.
name|getCorePoolSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Should have configured Max Threads"
argument_list|,
literal|10
argument_list|,
name|executorService
operator|.
name|getMaximumPoolSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|TikaConfigException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testInitializerBadValue
parameter_list|()
throws|throws
name|Exception
block|{
name|TikaConfig
name|config
init|=
name|getConfig
argument_list|(
literal|"TIKA-2389-illegal.xml"
argument_list|)
decl_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|TikaConfigException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testInitializerPerParserThrow
parameter_list|()
throws|throws
name|Exception
block|{
name|TikaConfig
name|config
init|=
name|getConfig
argument_list|(
literal|"TIKA-2389-throw-per-parser.xml"
argument_list|)
decl_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|TikaConfigException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testInitializerServiceLoaderThrow
parameter_list|()
throws|throws
name|Exception
block|{
name|TikaConfig
name|config
init|=
name|getConfig
argument_list|(
literal|"TIKA-2389-throw-default.xml"
argument_list|)
decl_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testInitializerServiceLoaderThrowButOverridden
parameter_list|()
throws|throws
name|Exception
block|{
comment|//TODO: test that this was logged at INFO level
name|TikaConfig
name|config
init|=
name|getConfig
argument_list|(
literal|"TIKA-2389-throw-default-overridden.xml"
argument_list|)
decl_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testInitializerPerParserWarn
parameter_list|()
throws|throws
name|Exception
block|{
comment|//TODO: test that this was logged at WARN level
name|TikaConfig
name|config
init|=
name|getConfig
argument_list|(
literal|"TIKA-2389-warn-per-parser.xml"
argument_list|)
decl_stmt|;
block|}
block|}
end_class

end_unit

