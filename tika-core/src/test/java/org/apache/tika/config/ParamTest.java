begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|config
package|;
end_package

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigInteger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_class
specifier|public
class|class
name|ParamTest
block|{
annotation|@
name|Test
specifier|public
name|void
name|testSaveAndLoad
parameter_list|()
throws|throws
name|Exception
block|{
name|Object
name|objects
index|[]
init|=
block|{
name|Integer
operator|.
name|MAX_VALUE
block|,
literal|2.5f
block|,
literal|4000.57576
block|,
literal|true
block|,
literal|false
block|,
name|Long
operator|.
name|MAX_VALUE
block|,
literal|"Hello this is a boring string"
block|,
operator|new
name|URL
argument_list|(
literal|"http://apache.org"
argument_list|)
block|,
operator|new
name|URI
argument_list|(
literal|"tika://org.apache.tika.ner.parser?impl=xyz"
argument_list|)
block|,
operator|new
name|BigInteger
argument_list|(
name|Long
operator|.
name|MAX_VALUE
operator|+
literal|""
argument_list|)
operator|.
name|add
argument_list|(
operator|new
name|BigInteger
argument_list|(
name|Long
operator|.
name|MAX_VALUE
operator|+
literal|""
argument_list|)
argument_list|)
block|,
operator|new
name|File
argument_list|(
literal|"."
argument_list|)
block|,         }
decl_stmt|;
for|for
control|(
name|Object
name|object
range|:
name|objects
control|)
block|{
name|String
name|name
init|=
literal|"name"
operator|+
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|Param
argument_list|<
name|?
argument_list|>
name|param
init|=
operator|new
name|Param
argument_list|<>
argument_list|(
name|name
argument_list|,
name|object
argument_list|)
decl_stmt|;
name|ByteArrayOutputStream
name|stream
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|param
operator|.
name|save
argument_list|(
name|stream
argument_list|)
expr_stmt|;
name|ByteArrayInputStream
name|inStream
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|stream
operator|.
name|toByteArray
argument_list|()
argument_list|)
decl_stmt|;
name|stream
operator|.
name|close
argument_list|()
expr_stmt|;
name|inStream
operator|.
name|close
argument_list|()
expr_stmt|;
name|Param
argument_list|<
name|?
argument_list|>
name|loaded
init|=
name|Param
operator|.
name|load
argument_list|(
name|inStream
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|param
operator|.
name|getName
argument_list|()
argument_list|,
name|loaded
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|param
operator|.
name|getTypeString
argument_list|()
argument_list|,
name|loaded
operator|.
name|getTypeString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|param
operator|.
name|getType
argument_list|()
argument_list|,
name|loaded
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|param
operator|.
name|getValue
argument_list|()
argument_list|,
name|loaded
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|loaded
operator|.
name|getValue
argument_list|()
argument_list|,
name|object
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|loaded
operator|.
name|getName
argument_list|()
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|loaded
operator|.
name|getType
argument_list|()
argument_list|,
name|object
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

