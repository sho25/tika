begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|mime
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|Attributes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_class
specifier|public
class|class
name|CustomReaderTest
block|{
specifier|static
class|class
name|CustomMimeTypesReader
extends|extends
name|MimeTypesReader
block|{
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|values
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|ignorePatterns
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|CustomMimeTypesReader
parameter_list|(
name|MimeTypes
name|types
parameter_list|)
block|{
name|super
argument_list|(
name|types
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|startElement
parameter_list|(
name|String
name|uri
parameter_list|,
name|String
name|localName
parameter_list|,
name|String
name|qName
parameter_list|,
name|Attributes
name|attributes
parameter_list|)
throws|throws
name|SAXException
block|{
name|super
operator|.
name|startElement
argument_list|(
name|uri
argument_list|,
name|localName
argument_list|,
name|qName
argument_list|,
name|attributes
argument_list|)
expr_stmt|;
if|if
condition|(
literal|"hello"
operator|.
name|equals
argument_list|(
name|qName
argument_list|)
condition|)
block|{
name|characters
operator|=
operator|new
name|StringBuilder
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|endElement
parameter_list|(
name|String
name|uri
parameter_list|,
name|String
name|localName
parameter_list|,
name|String
name|qName
parameter_list|)
block|{
name|super
operator|.
name|endElement
argument_list|(
name|uri
argument_list|,
name|localName
argument_list|,
name|qName
argument_list|)
expr_stmt|;
if|if
condition|(
name|type
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
literal|"hello"
operator|.
name|equals
argument_list|(
name|qName
argument_list|)
condition|)
block|{
name|values
operator|.
name|put
argument_list|(
name|type
operator|.
name|toString
argument_list|()
argument_list|,
name|characters
operator|.
name|toString
argument_list|()
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
name|characters
operator|=
literal|null
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|protected
name|void
name|handleGlobError
parameter_list|(
name|MimeType
name|type
parameter_list|,
name|String
name|pattern
parameter_list|,
name|MimeTypeException
name|ex
parameter_list|,
name|String
name|qName
parameter_list|,
name|Attributes
name|attributes
parameter_list|)
throws|throws
name|SAXException
block|{
name|ignorePatterns
operator|.
name|add
argument_list|(
name|type
operator|.
name|toString
argument_list|()
operator|+
literal|">>"
operator|+
name|pattern
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCustomReader
parameter_list|()
throws|throws
name|Exception
block|{
name|MimeTypes
name|mimeTypes
init|=
operator|new
name|MimeTypes
argument_list|()
decl_stmt|;
name|CustomMimeTypesReader
name|reader
init|=
operator|new
name|CustomMimeTypesReader
argument_list|(
name|mimeTypes
argument_list|)
decl_stmt|;
name|reader
operator|.
name|read
argument_list|(
name|getClass
argument_list|()
operator|.
name|getResourceAsStream
argument_list|(
literal|"custom-mimetypes.xml"
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|key
init|=
literal|"hello/world-file"
decl_stmt|;
name|MimeType
name|hello
init|=
name|mimeTypes
operator|.
name|forName
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"A \"Hello World\" file"
argument_list|,
name|hello
operator|.
name|getDescription
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"world"
argument_list|,
name|reader
operator|.
name|values
operator|.
name|get
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|reader
operator|.
name|ignorePatterns
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Now add another resource with conflicting regex
name|reader
operator|.
name|read
argument_list|(
name|getClass
argument_list|()
operator|.
name|getResourceAsStream
argument_list|(
literal|"custom-mimetypes2.xml"
argument_list|)
argument_list|)
expr_stmt|;
name|key
operator|=
literal|"another/world-file"
expr_stmt|;
name|MimeType
name|another
init|=
name|mimeTypes
operator|.
name|forName
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"kittens"
argument_list|,
name|reader
operator|.
name|values
operator|.
name|get
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|reader
operator|.
name|ignorePatterns
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|another
operator|.
name|toString
argument_list|()
operator|+
literal|">>*"
operator|+
name|hello
operator|.
name|getExtension
argument_list|()
argument_list|,
name|reader
operator|.
name|ignorePatterns
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Server-side script type not detected"
argument_list|,
name|another
operator|.
name|isInterpreted
argument_list|()
argument_list|)
expr_stmt|;
comment|//System.out.println( mimeTypes.getMediaTypeRegistry().getTypes() );
block|}
block|}
end_class

end_unit

