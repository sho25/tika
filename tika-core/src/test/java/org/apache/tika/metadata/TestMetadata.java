begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|metadata
package|;
end_package

begin_comment
comment|//JDK imports
end_comment

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|DateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|SimpleDateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TimeZone
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorCompletionService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Future
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|utils
operator|.
name|DateUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|//Junit imports
end_comment

begin_comment
comment|/**  * JUnit based tests of class {@link org.apache.tika.metadata.Metadata}.  */
end_comment

begin_class
specifier|public
class|class
name|TestMetadata
block|{
specifier|private
specifier|static
specifier|final
name|String
name|CONTENTTYPE
init|=
literal|"contenttype"
decl_stmt|;
comment|/** Test for the<code>add(String, String)</code> method. */
annotation|@
name|Test
specifier|public
name|void
name|testAdd
parameter_list|()
block|{
name|String
index|[]
name|values
init|=
literal|null
decl_stmt|;
name|Metadata
name|meta
init|=
operator|new
name|Metadata
argument_list|()
decl_stmt|;
name|values
operator|=
name|meta
operator|.
name|getValues
argument_list|(
name|CONTENTTYPE
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|values
operator|.
name|length
argument_list|)
expr_stmt|;
name|meta
operator|.
name|add
argument_list|(
name|CONTENTTYPE
argument_list|,
literal|"value1"
argument_list|)
expr_stmt|;
name|values
operator|=
name|meta
operator|.
name|getValues
argument_list|(
name|CONTENTTYPE
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|values
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"value1"
argument_list|,
name|values
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|meta
operator|.
name|add
argument_list|(
name|CONTENTTYPE
argument_list|,
literal|"value2"
argument_list|)
expr_stmt|;
name|values
operator|=
name|meta
operator|.
name|getValues
argument_list|(
name|CONTENTTYPE
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|values
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"value1"
argument_list|,
name|values
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"value2"
argument_list|,
name|values
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
comment|// NOTE : For now, the same value can be added many times.
comment|// Should it be changed?
name|meta
operator|.
name|add
argument_list|(
name|CONTENTTYPE
argument_list|,
literal|"value1"
argument_list|)
expr_stmt|;
name|values
operator|=
name|meta
operator|.
name|getValues
argument_list|(
name|CONTENTTYPE
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|values
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"value1"
argument_list|,
name|values
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"value2"
argument_list|,
name|values
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"value1"
argument_list|,
name|values
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|Property
name|nonMultiValued
init|=
name|Property
operator|.
name|internalText
argument_list|(
literal|"nonMultiValued"
argument_list|)
decl_stmt|;
name|meta
operator|.
name|add
argument_list|(
name|nonMultiValued
argument_list|,
literal|"value1"
argument_list|)
expr_stmt|;
try|try
block|{
name|meta
operator|.
name|add
argument_list|(
name|nonMultiValued
argument_list|,
literal|"value2"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"add should fail on the second call of a non-multi valued item"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|PropertyTypeException
name|e
parameter_list|)
block|{         }
block|}
comment|/** Test for the<code>set(String, String)</code> method. */
annotation|@
name|Test
specifier|public
name|void
name|testSet
parameter_list|()
block|{
name|String
index|[]
name|values
init|=
literal|null
decl_stmt|;
name|Metadata
name|meta
init|=
operator|new
name|Metadata
argument_list|()
decl_stmt|;
name|values
operator|=
name|meta
operator|.
name|getValues
argument_list|(
name|CONTENTTYPE
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|values
operator|.
name|length
argument_list|)
expr_stmt|;
name|meta
operator|.
name|set
argument_list|(
name|CONTENTTYPE
argument_list|,
literal|"value1"
argument_list|)
expr_stmt|;
name|values
operator|=
name|meta
operator|.
name|getValues
argument_list|(
name|CONTENTTYPE
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|values
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"value1"
argument_list|,
name|values
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|meta
operator|.
name|set
argument_list|(
name|CONTENTTYPE
argument_list|,
literal|"value2"
argument_list|)
expr_stmt|;
name|values
operator|=
name|meta
operator|.
name|getValues
argument_list|(
name|CONTENTTYPE
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|values
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"value2"
argument_list|,
name|values
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|meta
operator|.
name|set
argument_list|(
name|CONTENTTYPE
argument_list|,
literal|"new value 1"
argument_list|)
expr_stmt|;
name|meta
operator|.
name|add
argument_list|(
literal|"contenttype"
argument_list|,
literal|"new value 2"
argument_list|)
expr_stmt|;
name|values
operator|=
name|meta
operator|.
name|getValues
argument_list|(
name|CONTENTTYPE
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|values
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"new value 1"
argument_list|,
name|values
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"new value 2"
argument_list|,
name|values
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
comment|/** Test for<code>setAll(Properties)</code> method. */
annotation|@
name|Test
specifier|public
name|void
name|testSetProperties
parameter_list|()
block|{
name|String
index|[]
name|values
init|=
literal|null
decl_stmt|;
name|Metadata
name|meta
init|=
operator|new
name|Metadata
argument_list|()
decl_stmt|;
name|Properties
name|props
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|meta
operator|.
name|setAll
argument_list|(
name|props
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|meta
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
literal|"name-one"
argument_list|,
literal|"value1.1"
argument_list|)
expr_stmt|;
name|meta
operator|.
name|setAll
argument_list|(
name|props
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|meta
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|values
operator|=
name|meta
operator|.
name|getValues
argument_list|(
literal|"name-one"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|values
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"value1.1"
argument_list|,
name|values
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
literal|"name-two"
argument_list|,
literal|"value2.1"
argument_list|)
expr_stmt|;
name|meta
operator|.
name|setAll
argument_list|(
name|props
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|meta
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|values
operator|=
name|meta
operator|.
name|getValues
argument_list|(
literal|"name-one"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|values
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"value1.1"
argument_list|,
name|values
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|values
operator|=
name|meta
operator|.
name|getValues
argument_list|(
literal|"name-two"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|values
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"value2.1"
argument_list|,
name|values
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
comment|/** Test for<code>get(String)</code> method. */
annotation|@
name|Test
specifier|public
name|void
name|testGet
parameter_list|()
block|{
name|Metadata
name|meta
init|=
operator|new
name|Metadata
argument_list|()
decl_stmt|;
name|assertNull
argument_list|(
name|meta
operator|.
name|get
argument_list|(
literal|"a-name"
argument_list|)
argument_list|)
expr_stmt|;
name|meta
operator|.
name|add
argument_list|(
literal|"a-name"
argument_list|,
literal|"value-1"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"value-1"
argument_list|,
name|meta
operator|.
name|get
argument_list|(
literal|"a-name"
argument_list|)
argument_list|)
expr_stmt|;
name|meta
operator|.
name|add
argument_list|(
literal|"a-name"
argument_list|,
literal|"value-2"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"value-1"
argument_list|,
name|meta
operator|.
name|get
argument_list|(
literal|"a-name"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/** Test for<code>isMultiValued()</code> method. */
annotation|@
name|Test
specifier|public
name|void
name|testIsMultiValued
parameter_list|()
block|{
name|Metadata
name|meta
init|=
operator|new
name|Metadata
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
name|meta
operator|.
name|isMultiValued
argument_list|(
literal|"key"
argument_list|)
argument_list|)
expr_stmt|;
name|meta
operator|.
name|add
argument_list|(
literal|"key"
argument_list|,
literal|"value1"
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|meta
operator|.
name|isMultiValued
argument_list|(
literal|"key"
argument_list|)
argument_list|)
expr_stmt|;
name|meta
operator|.
name|add
argument_list|(
literal|"key"
argument_list|,
literal|"value2"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|meta
operator|.
name|isMultiValued
argument_list|(
literal|"key"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/** Test for<code>names</code> method. */
annotation|@
name|Test
specifier|public
name|void
name|testNames
parameter_list|()
block|{
name|String
index|[]
name|names
init|=
literal|null
decl_stmt|;
name|Metadata
name|meta
init|=
operator|new
name|Metadata
argument_list|()
decl_stmt|;
name|names
operator|=
name|meta
operator|.
name|names
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|names
operator|.
name|length
argument_list|)
expr_stmt|;
name|meta
operator|.
name|add
argument_list|(
literal|"name-one"
argument_list|,
literal|"value"
argument_list|)
expr_stmt|;
name|names
operator|=
name|meta
operator|.
name|names
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|names
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"name-one"
argument_list|,
name|names
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|meta
operator|.
name|add
argument_list|(
literal|"name-two"
argument_list|,
literal|"value"
argument_list|)
expr_stmt|;
name|names
operator|=
name|meta
operator|.
name|names
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|names
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
comment|/** Test for<code>remove(String)</code> method. */
annotation|@
name|Test
specifier|public
name|void
name|testRemove
parameter_list|()
block|{
name|Metadata
name|meta
init|=
operator|new
name|Metadata
argument_list|()
decl_stmt|;
name|meta
operator|.
name|remove
argument_list|(
literal|"name-one"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|meta
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|meta
operator|.
name|add
argument_list|(
literal|"name-one"
argument_list|,
literal|"value-1.1"
argument_list|)
expr_stmt|;
name|meta
operator|.
name|add
argument_list|(
literal|"name-one"
argument_list|,
literal|"value-1.2"
argument_list|)
expr_stmt|;
name|meta
operator|.
name|add
argument_list|(
literal|"name-two"
argument_list|,
literal|"value-2.2"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|meta
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|meta
operator|.
name|get
argument_list|(
literal|"name-one"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|meta
operator|.
name|get
argument_list|(
literal|"name-two"
argument_list|)
argument_list|)
expr_stmt|;
name|meta
operator|.
name|remove
argument_list|(
literal|"name-one"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|meta
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|meta
operator|.
name|get
argument_list|(
literal|"name-one"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|meta
operator|.
name|get
argument_list|(
literal|"name-two"
argument_list|)
argument_list|)
expr_stmt|;
name|meta
operator|.
name|remove
argument_list|(
literal|"name-two"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|meta
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|meta
operator|.
name|get
argument_list|(
literal|"name-one"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|meta
operator|.
name|get
argument_list|(
literal|"name-two"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/** Test for<code>equals(Object)</code> method. */
annotation|@
name|Test
specifier|public
name|void
name|testObject
parameter_list|()
block|{
name|Metadata
name|meta1
init|=
operator|new
name|Metadata
argument_list|()
decl_stmt|;
name|Metadata
name|meta2
init|=
operator|new
name|Metadata
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
name|meta1
operator|.
name|equals
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|meta1
operator|.
name|equals
argument_list|(
literal|"String"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|meta1
operator|.
name|equals
argument_list|(
name|meta2
argument_list|)
argument_list|)
expr_stmt|;
name|meta1
operator|.
name|add
argument_list|(
literal|"name-one"
argument_list|,
literal|"value-1.1"
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|meta1
operator|.
name|equals
argument_list|(
name|meta2
argument_list|)
argument_list|)
expr_stmt|;
name|meta2
operator|.
name|add
argument_list|(
literal|"name-one"
argument_list|,
literal|"value-1.1"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|meta1
operator|.
name|equals
argument_list|(
name|meta2
argument_list|)
argument_list|)
expr_stmt|;
name|meta1
operator|.
name|add
argument_list|(
literal|"name-one"
argument_list|,
literal|"value-1.2"
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|meta1
operator|.
name|equals
argument_list|(
name|meta2
argument_list|)
argument_list|)
expr_stmt|;
name|meta2
operator|.
name|add
argument_list|(
literal|"name-one"
argument_list|,
literal|"value-1.2"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|meta1
operator|.
name|equals
argument_list|(
name|meta2
argument_list|)
argument_list|)
expr_stmt|;
name|meta1
operator|.
name|add
argument_list|(
literal|"name-two"
argument_list|,
literal|"value-2.1"
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|meta1
operator|.
name|equals
argument_list|(
name|meta2
argument_list|)
argument_list|)
expr_stmt|;
name|meta2
operator|.
name|add
argument_list|(
literal|"name-two"
argument_list|,
literal|"value-2.1"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|meta1
operator|.
name|equals
argument_list|(
name|meta2
argument_list|)
argument_list|)
expr_stmt|;
name|meta1
operator|.
name|add
argument_list|(
literal|"name-two"
argument_list|,
literal|"value-2.2"
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|meta1
operator|.
name|equals
argument_list|(
name|meta2
argument_list|)
argument_list|)
expr_stmt|;
name|meta2
operator|.
name|add
argument_list|(
literal|"name-two"
argument_list|,
literal|"value-2.x"
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|meta1
operator|.
name|equals
argument_list|(
name|meta2
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Tests for getting and setting integer      *  based properties      */
annotation|@
name|Test
specifier|public
name|void
name|testGetSetInt
parameter_list|()
block|{
name|Metadata
name|meta
init|=
operator|new
name|Metadata
argument_list|()
decl_stmt|;
comment|// Isn't initially set, will get null back
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|meta
operator|.
name|get
argument_list|(
name|Metadata
operator|.
name|IMAGE_WIDTH
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|meta
operator|.
name|getInt
argument_list|(
name|Metadata
operator|.
name|IMAGE_WIDTH
argument_list|)
argument_list|)
expr_stmt|;
comment|// Can only set as a single valued int
try|try
block|{
name|meta
operator|.
name|set
argument_list|(
name|Metadata
operator|.
name|BITS_PER_SAMPLE
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Shouldn't be able to set a multi valued property as an int"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|PropertyTypeException
name|e
parameter_list|)
block|{}
try|try
block|{
name|meta
operator|.
name|set
argument_list|(
name|TikaCoreProperties
operator|.
name|CREATED
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Shouldn't be able to set a date property as an int"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|PropertyTypeException
name|e
parameter_list|)
block|{}
comment|// Can set it and retrieve it
name|meta
operator|.
name|set
argument_list|(
name|Metadata
operator|.
name|IMAGE_WIDTH
argument_list|,
literal|22
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"22"
argument_list|,
name|meta
operator|.
name|get
argument_list|(
name|Metadata
operator|.
name|IMAGE_WIDTH
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|22
argument_list|,
name|meta
operator|.
name|getInt
argument_list|(
name|Metadata
operator|.
name|IMAGE_WIDTH
argument_list|)
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
comment|// If you save a non int value, you get null
name|meta
operator|.
name|set
argument_list|(
name|Metadata
operator|.
name|IMAGE_WIDTH
argument_list|,
literal|"INVALID"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"INVALID"
argument_list|,
name|meta
operator|.
name|get
argument_list|(
name|Metadata
operator|.
name|IMAGE_WIDTH
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|meta
operator|.
name|getInt
argument_list|(
name|Metadata
operator|.
name|IMAGE_WIDTH
argument_list|)
argument_list|)
expr_stmt|;
comment|// If you try to retrieve a non simple int value, you get null
name|meta
operator|.
name|set
argument_list|(
name|Metadata
operator|.
name|IMAGE_WIDTH
argument_list|,
literal|22
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|22
argument_list|,
name|meta
operator|.
name|getInt
argument_list|(
name|Metadata
operator|.
name|IMAGE_WIDTH
argument_list|)
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|meta
operator|.
name|getInt
argument_list|(
name|Metadata
operator|.
name|BITS_PER_SAMPLE
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|meta
operator|.
name|getInt
argument_list|(
name|TikaCoreProperties
operator|.
name|CREATED
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Tests for getting and setting date      *  based properties      */
annotation|@
name|Test
specifier|public
name|void
name|testGetSetDate
parameter_list|()
block|{
name|Metadata
name|meta
init|=
operator|new
name|Metadata
argument_list|()
decl_stmt|;
name|long
name|hour
init|=
literal|60
operator|*
literal|60
operator|*
literal|1000
decl_stmt|;
comment|// Isn't initially set, will get null back
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|meta
operator|.
name|get
argument_list|(
name|TikaCoreProperties
operator|.
name|CREATED
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|meta
operator|.
name|getInt
argument_list|(
name|TikaCoreProperties
operator|.
name|CREATED
argument_list|)
argument_list|)
expr_stmt|;
comment|// Can only set as a single valued date
try|try
block|{
name|meta
operator|.
name|set
argument_list|(
name|Metadata
operator|.
name|BITS_PER_SAMPLE
argument_list|,
operator|new
name|Date
argument_list|(
literal|1000
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Shouldn't be able to set a multi valued property as a date"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|PropertyTypeException
name|e
parameter_list|)
block|{}
try|try
block|{
name|meta
operator|.
name|set
argument_list|(
name|Metadata
operator|.
name|IMAGE_WIDTH
argument_list|,
operator|new
name|Date
argument_list|(
literal|1000
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Shouldn't be able to set an int property as an date"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|PropertyTypeException
name|e
parameter_list|)
block|{}
comment|// Can set it and retrieve it
name|meta
operator|.
name|set
argument_list|(
name|TikaCoreProperties
operator|.
name|CREATED
argument_list|,
operator|new
name|Date
argument_list|(
literal|1000
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"1970-01-01T00:00:01Z"
argument_list|,
name|meta
operator|.
name|get
argument_list|(
name|TikaCoreProperties
operator|.
name|CREATED
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1000
argument_list|,
name|meta
operator|.
name|getDate
argument_list|(
name|TikaCoreProperties
operator|.
name|CREATED
argument_list|)
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
comment|// If you save a non date value, you get null
name|meta
operator|.
name|set
argument_list|(
name|TikaCoreProperties
operator|.
name|CREATED
argument_list|,
literal|"INVALID"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"INVALID"
argument_list|,
name|meta
operator|.
name|get
argument_list|(
name|TikaCoreProperties
operator|.
name|CREATED
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|meta
operator|.
name|getDate
argument_list|(
name|TikaCoreProperties
operator|.
name|CREATED
argument_list|)
argument_list|)
expr_stmt|;
comment|// If you try to retrieve a non simple date value, you get null
name|meta
operator|.
name|set
argument_list|(
name|TikaCoreProperties
operator|.
name|CREATED
argument_list|,
operator|new
name|Date
argument_list|(
literal|1000
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1000
argument_list|,
name|meta
operator|.
name|getDate
argument_list|(
name|TikaCoreProperties
operator|.
name|CREATED
argument_list|)
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|meta
operator|.
name|getInt
argument_list|(
name|Metadata
operator|.
name|BITS_PER_SAMPLE
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|meta
operator|.
name|getInt
argument_list|(
name|TikaCoreProperties
operator|.
name|CREATED
argument_list|)
argument_list|)
expr_stmt|;
comment|// Our format doesn't include milliseconds
comment|// This means things get rounded
name|meta
operator|.
name|set
argument_list|(
name|TikaCoreProperties
operator|.
name|CREATED
argument_list|,
operator|new
name|Date
argument_list|(
literal|1050
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"1970-01-01T00:00:01Z"
argument_list|,
name|meta
operator|.
name|get
argument_list|(
name|TikaCoreProperties
operator|.
name|CREATED
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1000
argument_list|,
name|meta
operator|.
name|getDate
argument_list|(
name|TikaCoreProperties
operator|.
name|CREATED
argument_list|)
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
comment|// We can accept a number of different ISO-8601 variants
name|meta
operator|.
name|set
argument_list|(
name|TikaCoreProperties
operator|.
name|CREATED
argument_list|,
literal|"1970-01-01T00:00:01Z"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1000
argument_list|,
name|meta
operator|.
name|getDate
argument_list|(
name|TikaCoreProperties
operator|.
name|CREATED
argument_list|)
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
name|meta
operator|.
name|set
argument_list|(
name|TikaCoreProperties
operator|.
name|CREATED
argument_list|,
literal|"1970-01-01 00:00:01Z"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1000
argument_list|,
name|meta
operator|.
name|getDate
argument_list|(
name|TikaCoreProperties
operator|.
name|CREATED
argument_list|)
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
name|meta
operator|.
name|set
argument_list|(
name|TikaCoreProperties
operator|.
name|CREATED
argument_list|,
literal|"1970-01-01T01:00:01+01:00"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1000
argument_list|,
name|meta
operator|.
name|getDate
argument_list|(
name|TikaCoreProperties
operator|.
name|CREATED
argument_list|)
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
name|meta
operator|.
name|set
argument_list|(
name|TikaCoreProperties
operator|.
name|CREATED
argument_list|,
literal|"1970-01-01 01:00:01+01:00"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1000
argument_list|,
name|meta
operator|.
name|getDate
argument_list|(
name|TikaCoreProperties
operator|.
name|CREATED
argument_list|)
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
name|meta
operator|.
name|set
argument_list|(
name|TikaCoreProperties
operator|.
name|CREATED
argument_list|,
literal|"1970-01-01T12:00:01+12:00"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1000
argument_list|,
name|meta
operator|.
name|getDate
argument_list|(
name|TikaCoreProperties
operator|.
name|CREATED
argument_list|)
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
name|meta
operator|.
name|set
argument_list|(
name|TikaCoreProperties
operator|.
name|CREATED
argument_list|,
literal|"1969-12-31T12:00:01-12:00"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1000
argument_list|,
name|meta
operator|.
name|getDate
argument_list|(
name|TikaCoreProperties
operator|.
name|CREATED
argument_list|)
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
comment|// Dates without times, come in at midday UTC
name|meta
operator|.
name|set
argument_list|(
name|TikaCoreProperties
operator|.
name|CREATED
argument_list|,
literal|"1970-01-01"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|12
operator|*
name|hour
argument_list|,
name|meta
operator|.
name|getDate
argument_list|(
name|TikaCoreProperties
operator|.
name|CREATED
argument_list|)
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
name|meta
operator|.
name|set
argument_list|(
name|TikaCoreProperties
operator|.
name|CREATED
argument_list|,
literal|"1970:01:01"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|12
operator|*
name|hour
argument_list|,
name|meta
operator|.
name|getDate
argument_list|(
name|TikaCoreProperties
operator|.
name|CREATED
argument_list|)
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Some documents, like jpegs, might have date in unspecified time zone      * which should be handled like strings but verified to have parseable ISO 8601 format      */
annotation|@
name|Test
specifier|public
name|void
name|testGetSetDateUnspecifiedTimezone
parameter_list|()
block|{
name|Metadata
name|meta
init|=
operator|new
name|Metadata
argument_list|()
decl_stmt|;
comment|// Set explictly without a timezone
name|meta
operator|.
name|set
argument_list|(
name|TikaCoreProperties
operator|.
name|CREATED
argument_list|,
literal|"1970-01-01T00:00:01"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"should return string without time zone specifier because zone is not known"
argument_list|,
literal|"1970-01-01T00:00:01"
argument_list|,
name|meta
operator|.
name|get
argument_list|(
name|TikaCoreProperties
operator|.
name|CREATED
argument_list|)
argument_list|)
expr_stmt|;
comment|// Now ask DateUtils to format for us without one
name|meta
operator|.
name|set
argument_list|(
name|TikaCoreProperties
operator|.
name|CREATED
argument_list|,
name|DateUtils
operator|.
name|formatDateUnknownTimezone
argument_list|(
operator|new
name|Date
argument_list|(
literal|1000
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"should return string without time zone specifier because zone is not known"
argument_list|,
literal|"1970-01-01T00:00:01"
argument_list|,
name|meta
operator|.
name|get
argument_list|(
name|TikaCoreProperties
operator|.
name|CREATED
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Defines a composite property, then checks that when set as the      *  composite the value can be retrieved with the property or the aliases      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
annotation|@
name|Test
specifier|public
name|void
name|testCompositeProperty
parameter_list|()
block|{
name|Metadata
name|meta
init|=
operator|new
name|Metadata
argument_list|()
decl_stmt|;
name|Property
name|compositeProperty
init|=
name|Property
operator|.
name|composite
argument_list|(
name|DublinCore
operator|.
name|DESCRIPTION
argument_list|,
operator|new
name|Property
index|[]
block|{
name|TikaCoreProperties
operator|.
name|DESCRIPTION
block|,
name|Property
operator|.
name|internalText
argument_list|(
literal|"testDescriptionAlt"
argument_list|)
block|}
argument_list|)
decl_stmt|;
name|String
name|message
init|=
literal|"composite description"
decl_stmt|;
name|meta
operator|.
name|set
argument_list|(
name|compositeProperty
argument_list|,
name|message
argument_list|)
expr_stmt|;
comment|// Fetch as the composite
name|assertEquals
argument_list|(
name|message
argument_list|,
name|meta
operator|.
name|get
argument_list|(
name|compositeProperty
argument_list|)
argument_list|)
expr_stmt|;
comment|// Fetch as the primary property on the composite
name|assertEquals
argument_list|(
name|message
argument_list|,
name|meta
operator|.
name|get
argument_list|(
name|DublinCore
operator|.
name|DESCRIPTION
argument_list|)
argument_list|)
expr_stmt|;
comment|// Fetch as the aliases
name|assertEquals
argument_list|(
name|message
argument_list|,
name|meta
operator|.
name|get
argument_list|(
literal|"testDescriptionAlt"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMultithreadedDates
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|numThreads
init|=
literal|10
decl_stmt|;
name|ExecutorService
name|executorService
init|=
name|Executors
operator|.
name|newFixedThreadPool
argument_list|(
name|numThreads
argument_list|)
decl_stmt|;
name|ExecutorCompletionService
argument_list|<
name|Integer
argument_list|>
name|executorCompletionService
init|=
operator|new
name|ExecutorCompletionService
argument_list|<
name|Integer
argument_list|>
argument_list|(
name|executorService
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numThreads
condition|;
name|i
operator|++
control|)
block|{
name|executorCompletionService
operator|.
name|submit
argument_list|(
operator|new
name|MetadataDateAdder
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|int
name|finished
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|finished
operator|<
name|numThreads
condition|)
block|{
name|Future
argument_list|<
name|Integer
argument_list|>
name|future
init|=
name|executorCompletionService
operator|.
name|take
argument_list|()
decl_stmt|;
if|if
condition|(
name|future
operator|!=
literal|null
operator|&&
name|future
operator|.
name|isDone
argument_list|()
condition|)
block|{
name|Integer
name|retVal
init|=
name|future
operator|.
name|get
argument_list|()
decl_stmt|;
name|finished
operator|++
expr_stmt|;
block|}
block|}
block|}
specifier|private
class|class
name|MetadataDateAdder
implements|implements
name|Callable
argument_list|<
name|Integer
argument_list|>
block|{
specifier|private
specifier|final
name|Random
name|random
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
annotation|@
name|Override
specifier|public
name|Integer
name|call
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|1000
condition|;
name|i
operator|++
control|)
block|{
name|Metadata
name|m
init|=
operator|new
name|Metadata
argument_list|()
decl_stmt|;
name|long
name|start
init|=
operator|new
name|Date
argument_list|()
operator|.
name|getTime
argument_list|()
decl_stmt|;
name|start
operator|+=
name|random
operator|.
name|nextInt
argument_list|(
literal|1000000
argument_list|)
expr_stmt|;
name|Date
name|now
init|=
operator|new
name|Date
argument_list|(
name|start
argument_list|)
decl_stmt|;
name|DateFormat
name|df
init|=
operator|new
name|SimpleDateFormat
argument_list|(
literal|"yyyy-MM-dd'T'HH:mm:ss'Z'"
argument_list|,
name|Locale
operator|.
name|US
argument_list|)
decl_stmt|;
name|m
operator|.
name|set
argument_list|(
name|TikaCoreProperties
operator|.
name|CREATED
argument_list|,
name|df
operator|.
name|format
argument_list|(
name|now
argument_list|)
argument_list|)
expr_stmt|;
name|df
operator|.
name|setTimeZone
argument_list|(
name|TimeZone
operator|.
name|getTimeZone
argument_list|(
literal|"UTC"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Math
operator|.
name|abs
argument_list|(
name|now
operator|.
name|getTime
argument_list|()
operator|-
name|m
operator|.
name|getDate
argument_list|(
name|TikaCoreProperties
operator|.
name|CREATED
argument_list|)
operator|.
name|getTime
argument_list|()
argument_list|)
operator|<
literal|2000
argument_list|)
expr_stmt|;
block|}
return|return
literal|1
return|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEquals
parameter_list|()
block|{
name|Metadata
name|meta1
init|=
operator|new
name|Metadata
argument_list|()
decl_stmt|;
name|meta1
operator|.
name|add
argument_list|(
literal|"key"
argument_list|,
literal|"value1"
argument_list|)
expr_stmt|;
name|meta1
operator|.
name|add
argument_list|(
literal|"key"
argument_list|,
literal|"value2"
argument_list|)
expr_stmt|;
name|meta1
operator|.
name|add
argument_list|(
literal|"key2"
argument_list|,
literal|"value12"
argument_list|)
expr_stmt|;
name|Metadata
name|meta2
init|=
operator|new
name|Metadata
argument_list|()
decl_stmt|;
name|meta2
operator|.
name|add
argument_list|(
literal|"key"
argument_list|,
literal|"value1"
argument_list|)
expr_stmt|;
name|meta2
operator|.
name|add
argument_list|(
literal|"key"
argument_list|,
literal|"value2"
argument_list|)
expr_stmt|;
name|meta2
operator|.
name|add
argument_list|(
literal|"key2"
argument_list|,
literal|"value12"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|meta1
argument_list|,
name|meta2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNotEquals
parameter_list|()
block|{
name|Metadata
name|meta1
init|=
operator|new
name|Metadata
argument_list|()
decl_stmt|;
name|meta1
operator|.
name|add
argument_list|(
literal|"key"
argument_list|,
literal|"value1"
argument_list|)
expr_stmt|;
name|meta1
operator|.
name|add
argument_list|(
literal|"key"
argument_list|,
literal|"value2"
argument_list|)
expr_stmt|;
name|meta1
operator|.
name|add
argument_list|(
literal|"key2"
argument_list|,
literal|"value12"
argument_list|)
expr_stmt|;
name|Metadata
name|meta2
init|=
operator|new
name|Metadata
argument_list|()
decl_stmt|;
name|meta2
operator|.
name|add
argument_list|(
literal|"key"
argument_list|,
literal|"value1"
argument_list|)
expr_stmt|;
name|meta2
operator|.
name|add
argument_list|(
literal|"key"
argument_list|,
literal|"value2"
argument_list|)
expr_stmt|;
name|meta2
operator|.
name|add
argument_list|(
literal|"key2"
argument_list|,
literal|"value22"
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|meta1
operator|.
name|equals
argument_list|(
name|meta2
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEqualAndHashCode
parameter_list|()
block|{
name|Metadata
name|meta1
init|=
operator|new
name|Metadata
argument_list|()
decl_stmt|;
name|meta1
operator|.
name|add
argument_list|(
literal|"key"
argument_list|,
literal|"value1"
argument_list|)
expr_stmt|;
name|meta1
operator|.
name|add
argument_list|(
literal|"key"
argument_list|,
literal|"value2"
argument_list|)
expr_stmt|;
name|meta1
operator|.
name|add
argument_list|(
literal|"key2"
argument_list|,
literal|"value12"
argument_list|)
expr_stmt|;
name|Metadata
name|meta2
init|=
operator|new
name|Metadata
argument_list|()
decl_stmt|;
name|meta2
operator|.
name|add
argument_list|(
literal|"key"
argument_list|,
literal|"value1"
argument_list|)
expr_stmt|;
name|meta2
operator|.
name|add
argument_list|(
literal|"key"
argument_list|,
literal|"value2"
argument_list|)
expr_stmt|;
name|meta2
operator|.
name|add
argument_list|(
literal|"key2"
argument_list|,
literal|"value12"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|meta1
argument_list|,
name|meta2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|meta1
operator|.
name|hashCode
argument_list|()
argument_list|,
name|meta2
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testToStringWithManyEntries
parameter_list|()
block|{
name|Metadata
name|m
init|=
operator|new
name|Metadata
argument_list|()
decl_stmt|;
name|m
operator|.
name|add
argument_list|(
literal|"key"
argument_list|,
literal|"value1"
argument_list|)
expr_stmt|;
name|m
operator|.
name|add
argument_list|(
literal|"key"
argument_list|,
literal|"value2"
argument_list|)
expr_stmt|;
name|m
operator|.
name|add
argument_list|(
literal|"key2"
argument_list|,
literal|"value12"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"key2=value12 key=value1 key=value2"
argument_list|,
name|m
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testToStringWithSingleEntry
parameter_list|()
block|{
name|Metadata
name|m
init|=
operator|new
name|Metadata
argument_list|()
decl_stmt|;
name|m
operator|.
name|add
argument_list|(
literal|"key"
argument_list|,
literal|"value1"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"key=value1"
argument_list|,
name|m
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

