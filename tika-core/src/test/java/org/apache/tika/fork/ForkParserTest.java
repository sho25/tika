begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|fork
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PipedInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PipedOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Reader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|UnsupportedEncodingException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|Charset
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Paths
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Semaphore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|TikaTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|exception
operator|.
name|TikaException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|metadata
operator|.
name|Metadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|metadata
operator|.
name|TikaCoreProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|AutoDetectParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|ParseContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|Parser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|RecursiveParserWrapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|mock
operator|.
name|MockParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|sax
operator|.
name|AbstractRecursiveParserWrapperHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|sax
operator|.
name|BasicContentHandlerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|sax
operator|.
name|BodyContentHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|sax
operator|.
name|ContentHandlerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|sax
operator|.
name|RecursiveParserWrapperHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|sax
operator|.
name|ToTextContentHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|ContentHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|helpers
operator|.
name|DefaultHandler
import|;
end_import

begin_class
specifier|public
class|class
name|ForkParserTest
extends|extends
name|TikaTest
block|{
annotation|@
name|Test
specifier|public
name|void
name|testHelloWorld
parameter_list|()
throws|throws
name|Exception
block|{
try|try
init|(
name|ForkParser
name|parser
init|=
operator|new
name|ForkParser
argument_list|(
name|ForkParserTest
operator|.
name|class
operator|.
name|getClassLoader
argument_list|()
argument_list|,
operator|new
name|ForkTestParser
argument_list|()
argument_list|)
init|)
block|{
name|Metadata
name|metadata
init|=
operator|new
name|Metadata
argument_list|()
decl_stmt|;
name|ContentHandler
name|output
init|=
operator|new
name|BodyContentHandler
argument_list|()
decl_stmt|;
name|InputStream
name|stream
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
operator|new
name|byte
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|ParseContext
name|context
init|=
operator|new
name|ParseContext
argument_list|()
decl_stmt|;
name|parser
operator|.
name|parse
argument_list|(
name|stream
argument_list|,
name|output
argument_list|,
name|metadata
argument_list|,
name|context
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Hello, World!"
argument_list|,
name|output
operator|.
name|toString
argument_list|()
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"text/plain"
argument_list|,
name|metadata
operator|.
name|get
argument_list|(
name|Metadata
operator|.
name|CONTENT_TYPE
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSerialParsing
parameter_list|()
throws|throws
name|Exception
block|{
try|try
init|(
name|ForkParser
name|parser
init|=
operator|new
name|ForkParser
argument_list|(
name|ForkParserTest
operator|.
name|class
operator|.
name|getClassLoader
argument_list|()
argument_list|,
operator|new
name|ForkTestParser
argument_list|()
argument_list|)
init|)
block|{
name|ParseContext
name|context
init|=
operator|new
name|ParseContext
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|ContentHandler
name|output
init|=
operator|new
name|BodyContentHandler
argument_list|()
decl_stmt|;
name|InputStream
name|stream
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
operator|new
name|byte
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|parser
operator|.
name|parse
argument_list|(
name|stream
argument_list|,
name|output
argument_list|,
operator|new
name|Metadata
argument_list|()
argument_list|,
name|context
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Hello, World!"
argument_list|,
name|output
operator|.
name|toString
argument_list|()
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testParallelParsing
parameter_list|()
throws|throws
name|Exception
block|{
try|try
init|(
name|ForkParser
name|parser
init|=
operator|new
name|ForkParser
argument_list|(
name|ForkParserTest
operator|.
name|class
operator|.
name|getClassLoader
argument_list|()
argument_list|,
operator|new
name|ForkTestParser
argument_list|()
argument_list|)
init|)
block|{
specifier|final
name|ParseContext
name|context
init|=
operator|new
name|ParseContext
argument_list|()
decl_stmt|;
name|Thread
index|[]
name|threads
init|=
operator|new
name|Thread
index|[
literal|10
index|]
decl_stmt|;
name|ContentHandler
index|[]
name|output
init|=
operator|new
name|ContentHandler
index|[
name|threads
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|threads
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|ContentHandler
name|o
init|=
operator|new
name|BodyContentHandler
argument_list|()
decl_stmt|;
name|output
index|[
name|i
index|]
operator|=
name|o
expr_stmt|;
name|threads
index|[
name|i
index|]
operator|=
operator|new
name|Thread
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|InputStream
name|stream
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
operator|new
name|byte
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|parser
operator|.
name|parse
argument_list|(
name|stream
argument_list|,
name|o
argument_list|,
operator|new
name|Metadata
argument_list|()
argument_list|,
name|context
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
expr_stmt|;
name|threads
index|[
name|i
index|]
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|threads
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|threads
index|[
name|i
index|]
operator|.
name|join
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Hello, World!"
argument_list|,
name|output
index|[
name|i
index|]
operator|.
name|toString
argument_list|()
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPoolSizeReached
parameter_list|()
throws|throws
name|Exception
block|{
try|try
init|(
name|ForkParser
name|parser
init|=
operator|new
name|ForkParser
argument_list|(
name|ForkParserTest
operator|.
name|class
operator|.
name|getClassLoader
argument_list|()
argument_list|,
operator|new
name|ForkTestParser
argument_list|()
argument_list|)
init|)
block|{
specifier|final
name|Semaphore
name|barrier
init|=
operator|new
name|Semaphore
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Thread
index|[]
name|threads
init|=
operator|new
name|Thread
index|[
name|parser
operator|.
name|getPoolSize
argument_list|()
index|]
decl_stmt|;
name|PipedOutputStream
index|[]
name|pipes
init|=
operator|new
name|PipedOutputStream
index|[
name|threads
operator|.
name|length
index|]
decl_stmt|;
specifier|final
name|ParseContext
name|context
init|=
operator|new
name|ParseContext
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|threads
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|PipedInputStream
name|input
init|=
operator|new
name|PipedInputStream
argument_list|()
block|{
annotation|@
name|Override
specifier|public
specifier|synchronized
name|int
name|read
parameter_list|()
throws|throws
name|IOException
block|{
name|barrier
operator|.
name|release
argument_list|()
expr_stmt|;
return|return
name|super
operator|.
name|read
argument_list|()
return|;
block|}
block|}
decl_stmt|;
name|pipes
index|[
name|i
index|]
operator|=
operator|new
name|PipedOutputStream
argument_list|(
name|input
argument_list|)
expr_stmt|;
name|threads
index|[
name|i
index|]
operator|=
operator|new
name|Thread
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|ContentHandler
name|o
init|=
operator|new
name|DefaultHandler
argument_list|()
decl_stmt|;
name|parser
operator|.
name|parse
argument_list|(
name|input
argument_list|,
name|o
argument_list|,
operator|new
name|Metadata
argument_list|()
argument_list|,
name|context
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
expr_stmt|;
name|threads
index|[
name|i
index|]
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
comment|// Wait until all the background parsers have been started
name|barrier
operator|.
name|acquire
argument_list|(
name|parser
operator|.
name|getPoolSize
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|ContentHandler
name|o
init|=
operator|new
name|BodyContentHandler
argument_list|()
decl_stmt|;
name|Thread
name|blocked
init|=
operator|new
name|Thread
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|barrier
operator|.
name|release
argument_list|()
expr_stmt|;
name|InputStream
name|stream
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
operator|new
name|byte
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|parser
operator|.
name|parse
argument_list|(
name|stream
argument_list|,
name|o
argument_list|,
operator|new
name|Metadata
argument_list|()
argument_list|,
name|context
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
decl_stmt|;
name|blocked
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// Wait until the last thread is started, and then some to
comment|// make sure that it would have had a chance to start processing
comment|// data had it not been blocked.
name|barrier
operator|.
name|acquire
argument_list|()
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|o
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|threads
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|pipes
index|[
name|i
index|]
operator|.
name|close
argument_list|()
expr_stmt|;
name|threads
index|[
name|i
index|]
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
name|blocked
operator|.
name|join
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Hello, World!"
argument_list|,
name|o
operator|.
name|toString
argument_list|()
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPulseAndTimeouts
parameter_list|()
throws|throws
name|Exception
block|{
name|ForkParser
name|forkParser
init|=
operator|new
name|ForkParser
argument_list|(
name|ForkParserTest
operator|.
name|class
operator|.
name|getClassLoader
argument_list|()
argument_list|,
operator|new
name|MockParser
argument_list|()
argument_list|)
decl_stmt|;
name|forkParser
operator|.
name|setServerPulseMillis
argument_list|(
literal|500
argument_list|)
expr_stmt|;
name|forkParser
operator|.
name|setServerParseTimeoutMillis
argument_list|(
literal|5000
argument_list|)
expr_stmt|;
name|forkParser
operator|.
name|setServerWaitTimeoutMillis
argument_list|(
literal|60000
argument_list|)
expr_stmt|;
name|String
name|sleepCommand
init|=
literal|"<mock>\n"
operator|+
literal|"<write element=\"p\">Hello, World!</write>\n"
operator|+
literal|"<hang millis=\"11000\" heavy=\"false\" interruptible=\"false\" />\n"
operator|+
literal|"</mock>"
decl_stmt|;
name|ContentHandler
name|o
init|=
operator|new
name|BodyContentHandler
argument_list|(
operator|-
literal|1
argument_list|)
decl_stmt|;
name|Metadata
name|m
init|=
operator|new
name|Metadata
argument_list|()
decl_stmt|;
name|ParseContext
name|c
init|=
operator|new
name|ParseContext
argument_list|()
decl_stmt|;
try|try
block|{
name|forkParser
operator|.
name|parse
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|sleepCommand
operator|.
name|getBytes
argument_list|(
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
argument_list|)
argument_list|,
name|o
argument_list|,
name|m
argument_list|,
name|c
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"should have thrown IOException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TikaException
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
literal|"failed to communicate with forked parser process"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|//test setting very short pulse (10 ms) and a parser that takes at least 1000 ms
name|forkParser
operator|=
operator|new
name|ForkParser
argument_list|(
name|ForkParserTest
operator|.
name|class
operator|.
name|getClassLoader
argument_list|()
argument_list|,
operator|new
name|MockParser
argument_list|()
argument_list|)
expr_stmt|;
name|forkParser
operator|.
name|setServerPulseMillis
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|forkParser
operator|.
name|setServerParseTimeoutMillis
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|sleepCommand
operator|=
literal|"<mock>\n"
operator|+
literal|"<write element=\"p\">Hello, World!</write>\n"
operator|+
literal|"<hang millis=\"1000\" heavy=\"false\" interruptible=\"false\" />\n"
operator|+
literal|"</mock>"
expr_stmt|;
name|o
operator|=
operator|new
name|BodyContentHandler
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|m
operator|=
operator|new
name|Metadata
argument_list|()
expr_stmt|;
name|c
operator|=
operator|new
name|ParseContext
argument_list|()
expr_stmt|;
try|try
block|{
name|forkParser
operator|.
name|parse
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|sleepCommand
operator|.
name|getBytes
argument_list|(
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
argument_list|)
argument_list|,
name|o
argument_list|,
name|m
argument_list|,
name|c
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should have thrown exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
decl||
name|TikaException
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
literal|"should have thrown IOException lost connection"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPackageCanBeAccessed
parameter_list|()
throws|throws
name|Exception
block|{
try|try
init|(
name|ForkParser
name|parser
init|=
operator|new
name|ForkParser
argument_list|(
name|ForkParserTest
operator|.
name|class
operator|.
name|getClassLoader
argument_list|()
argument_list|,
operator|new
name|ForkTestParser
operator|.
name|ForkTestParserAccessingPackage
argument_list|()
argument_list|)
init|)
block|{
name|Metadata
name|metadata
init|=
operator|new
name|Metadata
argument_list|()
decl_stmt|;
name|ContentHandler
name|output
init|=
operator|new
name|BodyContentHandler
argument_list|()
decl_stmt|;
name|InputStream
name|stream
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
operator|new
name|byte
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|ParseContext
name|context
init|=
operator|new
name|ParseContext
argument_list|()
decl_stmt|;
name|parser
operator|.
name|parse
argument_list|(
name|stream
argument_list|,
name|output
argument_list|,
name|metadata
argument_list|,
name|context
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Hello, World!"
argument_list|,
name|output
operator|.
name|toString
argument_list|()
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"text/plain"
argument_list|,
name|metadata
operator|.
name|get
argument_list|(
name|Metadata
operator|.
name|CONTENT_TYPE
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRecursiveParserWrapper
parameter_list|()
throws|throws
name|Exception
block|{
name|Parser
name|parser
init|=
operator|new
name|AutoDetectParser
argument_list|()
decl_stmt|;
name|RecursiveParserWrapper
name|wrapper
init|=
operator|new
name|RecursiveParserWrapper
argument_list|(
name|parser
argument_list|)
decl_stmt|;
name|RecursiveParserWrapperHandler
name|handler
init|=
operator|new
name|RecursiveParserWrapperHandler
argument_list|(
operator|new
name|BasicContentHandlerFactory
argument_list|(
name|BasicContentHandlerFactory
operator|.
name|HANDLER_TYPE
operator|.
name|TEXT
argument_list|,
literal|20000
argument_list|)
argument_list|)
decl_stmt|;
name|ForkParser
name|fork
init|=
operator|new
name|ForkParser
argument_list|(
name|ForkParserTest
operator|.
name|class
operator|.
name|getClassLoader
argument_list|()
argument_list|,
name|wrapper
argument_list|)
decl_stmt|;
name|Metadata
name|metadata
init|=
operator|new
name|Metadata
argument_list|()
decl_stmt|;
name|ParseContext
name|context
init|=
operator|new
name|ParseContext
argument_list|()
decl_stmt|;
try|try
init|(
name|InputStream
name|is
init|=
name|getClass
argument_list|()
operator|.
name|getResourceAsStream
argument_list|(
literal|"/test-documents/basic_embedded.xml"
argument_list|)
init|)
block|{
name|fork
operator|.
name|parse
argument_list|(
name|is
argument_list|,
name|handler
argument_list|,
name|metadata
argument_list|,
name|context
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|fork
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|List
argument_list|<
name|Metadata
argument_list|>
name|metadataList
init|=
name|handler
operator|.
name|getMetadataList
argument_list|()
decl_stmt|;
name|Metadata
name|m0
init|=
name|metadataList
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Nikolai Lobachevsky"
argument_list|,
name|m0
operator|.
name|get
argument_list|(
name|TikaCoreProperties
operator|.
name|CREATOR
argument_list|)
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"main_content"
argument_list|,
name|m0
operator|.
name|get
argument_list|(
name|RecursiveParserWrapperHandler
operator|.
name|TIKA_CONTENT
argument_list|)
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"embed1.xml"
argument_list|,
name|m0
operator|.
name|get
argument_list|(
name|RecursiveParserWrapperHandler
operator|.
name|TIKA_CONTENT
argument_list|)
argument_list|)
expr_stmt|;
name|Metadata
name|m1
init|=
name|metadataList
operator|.
name|get
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"embeddedAuthor"
argument_list|,
name|m1
operator|.
name|get
argument_list|(
name|TikaCoreProperties
operator|.
name|CREATOR
argument_list|)
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"some_embedded_content"
argument_list|,
name|m1
operator|.
name|get
argument_list|(
name|RecursiveParserWrapperHandler
operator|.
name|TIKA_CONTENT
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/embed1.xml"
argument_list|,
name|m1
operator|.
name|get
argument_list|(
name|RecursiveParserWrapperHandler
operator|.
name|EMBEDDED_RESOURCE_PATH
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRPWWithEmbeddedNPE
parameter_list|()
throws|throws
name|Exception
block|{
name|Parser
name|parser
init|=
operator|new
name|AutoDetectParser
argument_list|()
decl_stmt|;
name|RecursiveParserWrapper
name|wrapper
init|=
operator|new
name|RecursiveParserWrapper
argument_list|(
name|parser
argument_list|)
decl_stmt|;
name|RecursiveParserWrapperHandler
name|handler
init|=
operator|new
name|RecursiveParserWrapperHandler
argument_list|(
operator|new
name|BasicContentHandlerFactory
argument_list|(
name|BasicContentHandlerFactory
operator|.
name|HANDLER_TYPE
operator|.
name|TEXT
argument_list|,
literal|20000
argument_list|)
argument_list|)
decl_stmt|;
name|ForkParser
name|fork
init|=
operator|new
name|ForkParser
argument_list|(
name|ForkParserTest
operator|.
name|class
operator|.
name|getClassLoader
argument_list|()
argument_list|,
name|wrapper
argument_list|)
decl_stmt|;
name|Metadata
name|metadata
init|=
operator|new
name|Metadata
argument_list|()
decl_stmt|;
name|ParseContext
name|context
init|=
operator|new
name|ParseContext
argument_list|()
decl_stmt|;
try|try
init|(
name|InputStream
name|is
init|=
name|getClass
argument_list|()
operator|.
name|getResourceAsStream
argument_list|(
literal|"/test-documents/embedded_with_npe.xml"
argument_list|)
init|)
block|{
name|fork
operator|.
name|parse
argument_list|(
name|is
argument_list|,
name|handler
argument_list|,
name|metadata
argument_list|,
name|context
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|fork
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|List
argument_list|<
name|Metadata
argument_list|>
name|metadataList
init|=
name|handler
operator|.
name|getMetadataList
argument_list|()
decl_stmt|;
name|Metadata
name|m0
init|=
name|metadataList
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Nikolai Lobachevsky"
argument_list|,
name|m0
operator|.
name|get
argument_list|(
name|TikaCoreProperties
operator|.
name|CREATOR
argument_list|)
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"main_content"
argument_list|,
name|m0
operator|.
name|get
argument_list|(
name|RecursiveParserWrapperHandler
operator|.
name|TIKA_CONTENT
argument_list|)
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"embed1.xml"
argument_list|,
name|m0
operator|.
name|get
argument_list|(
name|RecursiveParserWrapperHandler
operator|.
name|TIKA_CONTENT
argument_list|)
argument_list|)
expr_stmt|;
name|Metadata
name|m1
init|=
name|metadataList
operator|.
name|get
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"embeddedAuthor"
argument_list|,
name|m1
operator|.
name|get
argument_list|(
name|TikaCoreProperties
operator|.
name|CREATOR
argument_list|)
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"some_embedded_content"
argument_list|,
name|m1
operator|.
name|get
argument_list|(
name|RecursiveParserWrapperHandler
operator|.
name|TIKA_CONTENT
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/embed1.xml"
argument_list|,
name|m1
operator|.
name|get
argument_list|(
name|RecursiveParserWrapperHandler
operator|.
name|EMBEDDED_RESOURCE_PATH
argument_list|)
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"another null pointer exception"
argument_list|,
name|m1
operator|.
name|get
argument_list|(
name|RecursiveParserWrapperHandler
operator|.
name|EMBEDDED_EXCEPTION
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRPWWithMainDocNPE
parameter_list|()
throws|throws
name|Exception
block|{
name|Parser
name|parser
init|=
operator|new
name|AutoDetectParser
argument_list|()
decl_stmt|;
name|RecursiveParserWrapper
name|wrapper
init|=
operator|new
name|RecursiveParserWrapper
argument_list|(
name|parser
argument_list|)
decl_stmt|;
name|RecursiveParserWrapperHandler
name|handler
init|=
operator|new
name|RecursiveParserWrapperHandler
argument_list|(
operator|new
name|BasicContentHandlerFactory
argument_list|(
name|BasicContentHandlerFactory
operator|.
name|HANDLER_TYPE
operator|.
name|TEXT
argument_list|,
literal|20000
argument_list|)
argument_list|)
decl_stmt|;
name|ForkParser
name|fork
init|=
operator|new
name|ForkParser
argument_list|(
name|ForkParserTest
operator|.
name|class
operator|.
name|getClassLoader
argument_list|()
argument_list|,
name|wrapper
argument_list|)
decl_stmt|;
name|Metadata
name|metadata
init|=
operator|new
name|Metadata
argument_list|()
decl_stmt|;
name|ParseContext
name|context
init|=
operator|new
name|ParseContext
argument_list|()
decl_stmt|;
try|try
init|(
name|InputStream
name|is
init|=
name|getClass
argument_list|()
operator|.
name|getResourceAsStream
argument_list|(
literal|"/test-documents/embedded_then_npe.xml"
argument_list|)
init|)
block|{
name|fork
operator|.
name|parse
argument_list|(
name|is
argument_list|,
name|handler
argument_list|,
name|metadata
argument_list|,
name|context
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TikaException
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|e
operator|.
name|getCause
argument_list|()
operator|instanceof
name|NullPointerException
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"another"
argument_list|,
name|e
operator|.
name|getCause
argument_list|()
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|fork
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|List
argument_list|<
name|Metadata
argument_list|>
name|metadataList
init|=
name|handler
operator|.
name|getMetadataList
argument_list|()
decl_stmt|;
name|Metadata
name|m0
init|=
name|metadataList
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Nikolai Lobachevsky"
argument_list|,
name|m0
operator|.
name|get
argument_list|(
name|TikaCoreProperties
operator|.
name|CREATOR
argument_list|)
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"main_content"
argument_list|,
name|m0
operator|.
name|get
argument_list|(
name|RecursiveParserWrapperHandler
operator|.
name|TIKA_CONTENT
argument_list|)
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"embed1.xml"
argument_list|,
name|m0
operator|.
name|get
argument_list|(
name|RecursiveParserWrapperHandler
operator|.
name|TIKA_CONTENT
argument_list|)
argument_list|)
expr_stmt|;
name|Metadata
name|m1
init|=
name|metadataList
operator|.
name|get
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"embeddedAuthor"
argument_list|,
name|m1
operator|.
name|get
argument_list|(
name|TikaCoreProperties
operator|.
name|CREATOR
argument_list|)
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"some_embedded_content"
argument_list|,
name|m1
operator|.
name|get
argument_list|(
name|RecursiveParserWrapperHandler
operator|.
name|TIKA_CONTENT
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/embed1.xml"
argument_list|,
name|m1
operator|.
name|get
argument_list|(
name|RecursiveParserWrapperHandler
operator|.
name|EMBEDDED_RESOURCE_PATH
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testToFileHandler
parameter_list|()
throws|throws
name|Exception
block|{
comment|//test that a server-side write-to-file works without proxying back the
comment|//AbstractContentHandlerFactory
name|Path
name|target
init|=
name|Files
operator|.
name|createTempFile
argument_list|(
literal|"fork-to-file-handler-"
argument_list|,
literal|".txt"
argument_list|)
decl_stmt|;
try|try
block|{
name|ForkParser
name|forkParser
init|=
literal|null
decl_stmt|;
try|try
init|(
name|InputStream
name|is
init|=
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getResourceAsStream
argument_list|(
literal|"/test-documents/basic_embedded.xml"
argument_list|)
init|)
block|{
name|RecursiveParserWrapper
name|wrapper
init|=
operator|new
name|RecursiveParserWrapper
argument_list|(
operator|new
name|AutoDetectParser
argument_list|()
argument_list|)
decl_stmt|;
name|ToFileHandler
name|toFileHandler
init|=
operator|new
name|ToFileHandler
argument_list|(
operator|new
name|SBContentHandlerFactory
argument_list|()
argument_list|,
name|target
operator|.
name|toFile
argument_list|()
argument_list|)
decl_stmt|;
name|forkParser
operator|=
operator|new
name|ForkParser
argument_list|(
name|ForkParserTest
operator|.
name|class
operator|.
name|getClassLoader
argument_list|()
argument_list|,
name|wrapper
argument_list|)
expr_stmt|;
name|Metadata
name|m
init|=
operator|new
name|Metadata
argument_list|()
decl_stmt|;
name|ParseContext
name|context
init|=
operator|new
name|ParseContext
argument_list|()
decl_stmt|;
name|forkParser
operator|.
name|parse
argument_list|(
name|is
argument_list|,
name|toFileHandler
argument_list|,
name|m
argument_list|,
name|context
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|forkParser
operator|!=
literal|null
condition|)
block|{
name|forkParser
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
name|String
name|contents
init|=
literal|null
decl_stmt|;
try|try
init|(
name|Reader
name|reader
init|=
name|Files
operator|.
name|newBufferedReader
argument_list|(
name|target
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
init|)
block|{
name|contents
operator|=
name|IOUtils
operator|.
name|toString
argument_list|(
name|reader
argument_list|)
expr_stmt|;
block|}
name|assertContainsCount
argument_list|(
literal|"X-Parsed-By : org.apache.tika.parser.DefaultParser"
argument_list|,
name|contents
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertContainsCount
argument_list|(
literal|"X-Parsed-By : org.apache.tika.parser.mock.MockParser"
argument_list|,
name|contents
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"Nikolai Lobachevsky"
argument_list|,
name|contents
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"embeddedAuthor"
argument_list|,
name|contents
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"main_content"
argument_list|,
name|contents
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"some_embedded_content"
argument_list|,
name|contents
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"X-TIKA:embedded_resource_path : /embed1.xml"
argument_list|,
name|contents
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|Files
operator|.
name|delete
argument_list|(
name|target
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRecursiveParserWrapperWithProxyingContentHandlersAndMetadata
parameter_list|()
throws|throws
name|Exception
block|{
name|Parser
name|parser
init|=
operator|new
name|AutoDetectParser
argument_list|()
decl_stmt|;
name|RecursiveParserWrapper
name|wrapper
init|=
operator|new
name|RecursiveParserWrapper
argument_list|(
name|parser
argument_list|)
decl_stmt|;
name|BufferingHandler
name|handler
init|=
operator|new
name|BufferingHandler
argument_list|(
operator|new
name|SBContentHandlerFactory
argument_list|()
argument_list|)
decl_stmt|;
name|ForkParser
name|fork
init|=
operator|new
name|ForkParser
argument_list|(
name|ForkParserTest
operator|.
name|class
operator|.
name|getClassLoader
argument_list|()
argument_list|,
name|wrapper
argument_list|)
decl_stmt|;
name|Metadata
name|metadata
init|=
operator|new
name|Metadata
argument_list|()
decl_stmt|;
name|ParseContext
name|context
init|=
operator|new
name|ParseContext
argument_list|()
decl_stmt|;
try|try
init|(
name|InputStream
name|is
init|=
name|getClass
argument_list|()
operator|.
name|getResourceAsStream
argument_list|(
literal|"/test-documents/basic_embedded.xml"
argument_list|)
init|)
block|{
name|fork
operator|.
name|parse
argument_list|(
name|is
argument_list|,
name|handler
argument_list|,
name|metadata
argument_list|,
name|context
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|fork
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|List
argument_list|<
name|Metadata
argument_list|>
name|metadataList
init|=
name|handler
operator|.
name|getMetadataList
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ContentHandler
argument_list|>
name|contentHandlers
init|=
name|handler
operator|.
name|getContentHandlers
argument_list|()
decl_stmt|;
name|Metadata
name|m0
init|=
name|metadataList
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|String
name|content0
init|=
name|contentHandlers
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Nikolai Lobachevsky"
argument_list|,
name|m0
operator|.
name|get
argument_list|(
name|TikaCoreProperties
operator|.
name|CREATOR
argument_list|)
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"main_content"
argument_list|,
name|content0
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"embed1.xml"
argument_list|,
name|content0
argument_list|)
expr_stmt|;
name|Metadata
name|m1
init|=
name|metadataList
operator|.
name|get
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|String
name|content1
init|=
name|contentHandlers
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"embeddedAuthor"
argument_list|,
name|m1
operator|.
name|get
argument_list|(
name|TikaCoreProperties
operator|.
name|CREATOR
argument_list|)
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"some_embedded_content"
argument_list|,
name|content1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/embed1.xml"
argument_list|,
name|m1
operator|.
name|get
argument_list|(
name|RecursiveParserWrapperHandler
operator|.
name|EMBEDDED_RESOURCE_PATH
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRPWWithNonSerializableContentHandler
parameter_list|()
throws|throws
name|Exception
block|{
name|Parser
name|parser
init|=
operator|new
name|AutoDetectParser
argument_list|()
decl_stmt|;
name|RecursiveParserWrapper
name|wrapper
init|=
operator|new
name|RecursiveParserWrapper
argument_list|(
name|parser
argument_list|)
decl_stmt|;
name|RecursiveParserWrapperHandler
name|handler
init|=
operator|new
name|RecursiveParserWrapperHandler
argument_list|(
operator|new
name|NonSerializableHandlerFactory
argument_list|()
argument_list|)
decl_stmt|;
name|ForkParser
name|fork
init|=
operator|new
name|ForkParser
argument_list|(
name|ForkParserTest
operator|.
name|class
operator|.
name|getClassLoader
argument_list|()
argument_list|,
name|wrapper
argument_list|)
decl_stmt|;
name|Metadata
name|metadata
init|=
operator|new
name|Metadata
argument_list|()
decl_stmt|;
name|ParseContext
name|context
init|=
operator|new
name|ParseContext
argument_list|()
decl_stmt|;
try|try
init|(
name|InputStream
name|is
init|=
name|getClass
argument_list|()
operator|.
name|getResourceAsStream
argument_list|(
literal|"/test-documents/embedded_then_npe.xml"
argument_list|)
init|)
block|{
name|fork
operator|.
name|parse
argument_list|(
name|is
argument_list|,
name|handler
argument_list|,
name|metadata
argument_list|,
name|context
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TikaException
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|e
operator|.
name|getCause
argument_list|()
operator|instanceof
name|NullPointerException
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"another"
argument_list|,
name|e
operator|.
name|getCause
argument_list|()
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|fork
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|List
argument_list|<
name|Metadata
argument_list|>
name|metadataList
init|=
name|handler
operator|.
name|getMetadataList
argument_list|()
decl_stmt|;
name|Metadata
name|m0
init|=
name|metadataList
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Nikolai Lobachevsky"
argument_list|,
name|m0
operator|.
name|get
argument_list|(
name|TikaCoreProperties
operator|.
name|CREATOR
argument_list|)
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"main_content"
argument_list|,
name|m0
operator|.
name|get
argument_list|(
name|RecursiveParserWrapperHandler
operator|.
name|TIKA_CONTENT
argument_list|)
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"embed1.xml"
argument_list|,
name|m0
operator|.
name|get
argument_list|(
name|RecursiveParserWrapperHandler
operator|.
name|TIKA_CONTENT
argument_list|)
argument_list|)
expr_stmt|;
name|Metadata
name|m1
init|=
name|metadataList
operator|.
name|get
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"embeddedAuthor"
argument_list|,
name|m1
operator|.
name|get
argument_list|(
name|TikaCoreProperties
operator|.
name|CREATOR
argument_list|)
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"some_embedded_content"
argument_list|,
name|m1
operator|.
name|get
argument_list|(
name|RecursiveParserWrapperHandler
operator|.
name|TIKA_CONTENT
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/embed1.xml"
argument_list|,
name|m1
operator|.
name|get
argument_list|(
name|RecursiveParserWrapperHandler
operator|.
name|EMBEDDED_RESOURCE_PATH
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|//use this to test that the wrapper handler is acted upon by the server but not proxied back
specifier|private
specifier|static
class|class
name|ToFileHandler
extends|extends
name|AbstractRecursiveParserWrapperHandler
block|{
comment|//this needs to be a file because a File is serializable
specifier|private
specifier|final
name|File
name|file
decl_stmt|;
specifier|private
name|OutputStream
name|os
decl_stmt|;
specifier|public
name|ToFileHandler
parameter_list|(
name|ContentHandlerFactory
name|contentHandlerFactory
parameter_list|,
name|File
name|file
parameter_list|)
block|{
name|super
argument_list|(
name|contentHandlerFactory
argument_list|)
expr_stmt|;
name|this
operator|.
name|file
operator|=
name|file
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|startDocument
parameter_list|()
throws|throws
name|SAXException
block|{
try|try
block|{
name|os
operator|=
name|Files
operator|.
name|newOutputStream
argument_list|(
name|file
operator|.
name|toPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SAXException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|endDocument
parameter_list|()
throws|throws
name|SAXException
block|{
try|try
block|{
name|os
operator|.
name|flush
argument_list|()
expr_stmt|;
name|os
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SAXException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|endEmbeddedDocument
parameter_list|(
name|ContentHandler
name|contentHandler
parameter_list|,
name|Metadata
name|metadata
parameter_list|)
throws|throws
name|SAXException
block|{
try|try
block|{
name|byte
index|[]
name|bytes
init|=
name|toString
argument_list|(
name|contentHandler
argument_list|,
name|metadata
argument_list|)
decl_stmt|;
name|os
operator|.
name|write
argument_list|(
name|bytes
argument_list|,
literal|0
argument_list|,
name|bytes
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SAXException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|endDocument
parameter_list|(
name|ContentHandler
name|contentHandler
parameter_list|,
name|Metadata
name|metadata
parameter_list|)
throws|throws
name|SAXException
block|{
try|try
block|{
name|byte
index|[]
name|bytes
init|=
name|toString
argument_list|(
name|contentHandler
argument_list|,
name|metadata
argument_list|)
decl_stmt|;
name|os
operator|.
name|write
argument_list|(
name|bytes
argument_list|,
literal|0
argument_list|,
name|bytes
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SAXException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
name|byte
index|[]
name|toString
parameter_list|(
name|ContentHandler
name|contentHandler
parameter_list|,
name|Metadata
name|metadata
parameter_list|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|n
range|:
name|metadata
operator|.
name|names
argument_list|()
control|)
block|{
for|for
control|(
name|String
name|v
range|:
name|metadata
operator|.
name|getValues
argument_list|(
name|n
argument_list|)
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|n
argument_list|)
operator|.
name|append
argument_list|(
literal|" : "
argument_list|)
operator|.
name|append
argument_list|(
name|v
argument_list|)
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
empty_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|contentHandler
operator|.
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|DefaultHandler
operator|.
name|class
argument_list|)
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"CONTENT: "
operator|+
name|contentHandler
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"\n\n"
argument_list|)
expr_stmt|;
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
operator|.
name|getBytes
argument_list|(
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|SBContentHandler
extends|extends
name|DefaultHandler
implements|implements
name|Serializable
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|characters
parameter_list|(
name|char
name|ch
index|[]
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|length
parameter_list|)
throws|throws
name|SAXException
block|{
name|sb
operator|.
name|append
argument_list|(
name|ch
argument_list|,
name|start
argument_list|,
name|length
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|SBContentHandlerFactory
implements|implements
name|ContentHandlerFactory
block|{
annotation|@
name|Override
specifier|public
name|ContentHandler
name|getNewContentHandler
parameter_list|()
block|{
return|return
operator|new
name|SBContentHandler
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|ContentHandler
name|getNewContentHandler
parameter_list|(
name|OutputStream
name|os
parameter_list|,
name|String
name|encoding
parameter_list|)
throws|throws
name|UnsupportedEncodingException
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"can't use this option in this test class"
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|ContentHandler
name|getNewContentHandler
parameter_list|(
name|OutputStream
name|os
parameter_list|,
name|Charset
name|charset
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"can't use this option in this test class"
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|static
class|class
name|NonSerializableHandlerFactory
implements|implements
name|ContentHandlerFactory
block|{
annotation|@
name|Override
specifier|public
name|ContentHandler
name|getNewContentHandler
parameter_list|()
block|{
return|return
operator|new
name|LyingNonSerializableContentHandler
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|ContentHandler
name|getNewContentHandler
parameter_list|(
name|OutputStream
name|os
parameter_list|,
name|String
name|encoding
parameter_list|)
throws|throws
name|UnsupportedEncodingException
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"can't use this option in this test class"
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|ContentHandler
name|getNewContentHandler
parameter_list|(
name|OutputStream
name|os
parameter_list|,
name|Charset
name|charset
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"can't use this option in this test class"
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|static
class|class
name|LyingNonSerializableContentHandler
extends|extends
name|DefaultHandler
implements|implements
name|Serializable
block|{
comment|//StringWriter makes this class not actually Serializable
comment|//as is.
name|StringWriter
name|writer
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|characters
parameter_list|(
name|char
name|ch
index|[]
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|length
parameter_list|)
throws|throws
name|SAXException
block|{
name|writer
operator|.
name|write
argument_list|(
name|ch
argument_list|,
name|start
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|writer
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
comment|//use this to test that a handler that extends RecursiveParserWrapperHandler
comment|//does have both contenthandlers and metadata objects proxied back from the
comment|//server.
specifier|private
specifier|static
class|class
name|BufferingHandler
extends|extends
name|RecursiveParserWrapperHandler
block|{
name|List
argument_list|<
name|ContentHandler
argument_list|>
name|contentHandlers
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|public
name|BufferingHandler
parameter_list|(
name|ContentHandlerFactory
name|contentHandlerFactory
parameter_list|)
block|{
name|super
argument_list|(
name|contentHandlerFactory
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|endEmbeddedDocument
parameter_list|(
name|ContentHandler
name|contentHandler
parameter_list|,
name|Metadata
name|metadata
parameter_list|)
throws|throws
name|SAXException
block|{
name|contentHandlers
operator|.
name|add
argument_list|(
name|contentHandler
argument_list|)
expr_stmt|;
name|metadataList
operator|.
name|add
argument_list|(
name|metadata
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|endDocument
parameter_list|(
name|ContentHandler
name|contentHandler
parameter_list|,
name|Metadata
name|metadata
parameter_list|)
throws|throws
name|SAXException
block|{
name|contentHandlers
operator|.
name|add
argument_list|(
literal|0
argument_list|,
name|contentHandler
argument_list|)
expr_stmt|;
name|metadataList
operator|.
name|add
argument_list|(
literal|0
argument_list|,
name|metadata
argument_list|)
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|ContentHandler
argument_list|>
name|getContentHandlers
parameter_list|()
block|{
return|return
name|contentHandlers
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|Metadata
argument_list|>
name|getMetadataList
parameter_list|()
block|{
return|return
name|metadataList
return|;
block|}
block|}
block|}
end_class

end_unit

