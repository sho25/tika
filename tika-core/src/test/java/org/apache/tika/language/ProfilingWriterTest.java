begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|language
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
annotation|@
name|Deprecated
specifier|public
class|class
name|ProfilingWriterTest
block|{
annotation|@
name|Test
specifier|public
name|void
name|testProfilingWriter
parameter_list|()
throws|throws
name|IOException
block|{
name|ProfilingWriter
name|writer
init|=
operator|new
name|ProfilingWriter
argument_list|()
decl_stmt|;
name|writer
operator|.
name|write
argument_list|(
literal|" foo+BAR FooBar\n"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|LanguageProfile
name|profile
init|=
name|writer
operator|.
name|getProfile
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|profile
operator|.
name|getCount
argument_list|(
literal|"_fo"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|profile
operator|.
name|getCount
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|profile
operator|.
name|getCount
argument_list|(
literal|"oo_"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|profile
operator|.
name|getCount
argument_list|(
literal|"oob"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|profile
operator|.
name|getCount
argument_list|(
literal|"oba"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|profile
operator|.
name|getCount
argument_list|(
literal|"_ba"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|profile
operator|.
name|getCount
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|profile
operator|.
name|getCount
argument_list|(
literal|"ar_"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

