begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|dl
operator|.
name|imagerec
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|config
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|config
operator|.
name|Param
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|exception
operator|.
name|TikaConfigException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|exception
operator|.
name|TikaException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|metadata
operator|.
name|Metadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|mime
operator|.
name|MediaType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|ParseContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|recognition
operator|.
name|ObjectRecogniser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|recognition
operator|.
name|RecognisedObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|datavec
operator|.
name|image
operator|.
name|loader
operator|.
name|NativeImageLoader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|deeplearning4j
operator|.
name|nn
operator|.
name|graph
operator|.
name|ComputationGraph
import|;
end_import

begin_import
import|import
name|org
operator|.
name|deeplearning4j
operator|.
name|nn
operator|.
name|modelimport
operator|.
name|keras
operator|.
name|InvalidKerasConfigurationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|deeplearning4j
operator|.
name|nn
operator|.
name|modelimport
operator|.
name|keras
operator|.
name|KerasModelImport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|deeplearning4j
operator|.
name|nn
operator|.
name|modelimport
operator|.
name|keras
operator|.
name|UnsupportedKerasConfigurationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|json
operator|.
name|simple
operator|.
name|JSONArray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|json
operator|.
name|simple
operator|.
name|JSONObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|json
operator|.
name|simple
operator|.
name|parser
operator|.
name|JSONParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|json
operator|.
name|simple
operator|.
name|parser
operator|.
name|ParseException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|nd4j
operator|.
name|linalg
operator|.
name|api
operator|.
name|ndarray
operator|.
name|INDArray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|ContentHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|Charset
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_comment
comment|/**  * {@link DL4JInceptionV3Net} is an implementation of {@link ObjectRecogniser}.  * This object recogniser is powered by<a href="http://deeplearning4j.org">Deeplearning4j</a>.  * This implementation is pre configured to use<a href="https://arxiv.org/abs/1512.00567"> Google's InceptionV3 model</a> pre trained on  * ImageNet corpus. The models references in default settings are originally trained and exported from<a href="http://keras.io">Keras</a> and imported using DL4J's importer tools.  *<p>  * Although this implementation is made to work out of the box without user attention,  * for advances users who are interested in tweaking the settings, the following fields are configurable:  *<ul>  *<li>{@link #modelWeightsPath}</li>  *<li>{@link #modelJsonPath}</li>  *<li>{@link #labelFile}</li>  *<li>{@link #labelLang}</li>  *<li>{@link #cacheDir}</li>  *<li>{@link #imgWidth}</li>  *<li>{@link #imgHeight}</li>  *<li>{@link #imgChannels}</li>  *<li>{@link #minConfidence}</li>  *</ul>  *</p>  *  * @see ObjectRecogniser  * @see org.apache.tika.parser.recognition.ObjectRecognitionParser  * @see org.apache.tika.parser.recognition.tf.TensorflowImageRecParser  * @see org.apache.tika.parser.recognition.tf.TensorflowRESTRecogniser  * @since Tika 1.15  */
end_comment

begin_class
specifier|public
class|class
name|DL4JInceptionV3Net
implements|implements
name|ObjectRecogniser
block|{
specifier|private
specifier|static
specifier|final
name|Set
argument_list|<
name|MediaType
argument_list|>
name|MEDIA_TYPES
init|=
name|Collections
operator|.
name|singleton
argument_list|(
name|MediaType
operator|.
name|image
argument_list|(
literal|"jpeg"
argument_list|)
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|DL4JInceptionV3Net
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|DEF_WEIGHTS_URL
init|=
literal|"https://raw.githubusercontent.com/USCDataScience/dl4j-kerasimport-examples/98ec48b56a5b8fb7d54a2994ce9cb23bfefac821/dl4j-import-example/data/inception-model-weights.h5"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|DEF_MODEL_JSON
init|=
literal|"org/apache/tika/dl/imagerec/inceptionv3-model.json"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|DEF_LABEL_MAPPING
init|=
literal|"org/apache/tika/dl/imagerec/imagenet_incpetionv3_class_index.json"
decl_stmt|;
comment|/**      * Cache dir to be used for downloading the weights file.      * This is used to download the model.      */
annotation|@
name|Field
specifier|private
name|File
name|cacheDir
init|=
operator|new
name|File
argument_list|(
literal|".tmp-inception"
argument_list|)
decl_stmt|;
comment|/**      * Path to a HDF5 file that contains weights of the Keras network      * that was obtained by training the network on a labelled dataset.      *<br/>      * Note: when the value is set to&lt;download&gt;, the default model will be      * downloaded from {@value #DEF_WEIGHTS_URL}      */
annotation|@
name|Field
specifier|private
name|String
name|modelWeightsPath
init|=
name|DEF_WEIGHTS_URL
decl_stmt|;
comment|/**      * Path to a JSON file that contains network (graph) structure exported from Keras.      *<p>      *<br/>      * Default is retrieved from {@value DEF_MODEL_JSON}      */
annotation|@
name|Field
specifier|private
name|String
name|modelJsonPath
init|=
name|DEF_MODEL_JSON
decl_stmt|;
comment|/***      * Path to file that tells how to map node index to human readable label names      *<br/>      * The default is retrieved from {@value DEF_LABEL_MAPPING}      */
annotation|@
name|Field
specifier|private
name|String
name|labelFile
init|=
name|DEF_LABEL_MAPPING
decl_stmt|;
comment|/**      * Language name of the labels.      *<br/>      * Default is 'en'      */
annotation|@
name|Field
specifier|private
name|String
name|labelLang
init|=
literal|"en"
decl_stmt|;
annotation|@
name|Field
specifier|private
name|int
name|imgHeight
init|=
literal|299
decl_stmt|;
annotation|@
name|Field
specifier|private
name|int
name|imgWidth
init|=
literal|299
decl_stmt|;
annotation|@
name|Field
specifier|private
name|int
name|imgChannels
init|=
literal|3
decl_stmt|;
comment|/***      * Ignores the labels that are below this confidence score      */
annotation|@
name|Field
specifier|private
name|double
name|minConfidence
init|=
literal|0.005
decl_stmt|;
specifier|private
name|ComputationGraph
name|graph
decl_stmt|;
specifier|private
name|NativeImageLoader
name|imageLoader
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|labelMap
decl_stmt|;
annotation|@
name|Override
specifier|public
name|Set
argument_list|<
name|MediaType
argument_list|>
name|getSupportedMimes
parameter_list|()
block|{
return|return
name|MEDIA_TYPES
return|;
block|}
comment|/***      *      * @param path path to resolve the file      * @return File or null      */
specifier|private
name|File
name|retrieveFile
parameter_list|(
name|String
name|path
parameter_list|)
block|{
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|file
operator|.
name|exists
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"File {} not found in local file system."
operator|+
literal|" Asking the classloader"
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|URL
name|url
init|=
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
operator|.
name|getResource
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|url
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Classloader does not knows the file {}"
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|file
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Class loader knows the file {}"
argument_list|,
name|path
argument_list|)
expr_stmt|;
try|try
block|{
name|file
operator|=
name|cachedDownload
argument_list|(
name|cacheDir
argument_list|,
name|url
operator|.
name|toURI
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|URISyntaxException
decl||
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|file
return|;
block|}
specifier|private
name|InputStream
name|retrieveResource
parameter_list|(
name|String
name|path
parameter_list|)
throws|throws
name|FileNotFoundException
block|{
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|file
operator|.
name|exists
argument_list|()
condition|)
block|{
return|return
operator|new
name|FileInputStream
argument_list|(
name|file
argument_list|)
return|;
block|}
name|LOG
operator|.
name|warn
argument_list|(
literal|"File {} not found in local file system. Asking the classloader"
argument_list|,
name|path
argument_list|)
expr_stmt|;
return|return
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
operator|.
name|getResourceAsStream
argument_list|(
name|path
argument_list|)
return|;
block|}
specifier|public
specifier|static
specifier|synchronized
name|File
name|cachedDownload
parameter_list|(
name|File
name|cacheDir
parameter_list|,
name|URI
name|uri
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
literal|"file"
operator|.
name|equals
argument_list|(
name|uri
operator|.
name|getScheme
argument_list|()
argument_list|)
operator|||
name|uri
operator|.
name|getScheme
argument_list|()
operator|==
literal|null
condition|)
block|{
return|return
operator|new
name|File
argument_list|(
name|uri
argument_list|)
return|;
block|}
if|if
condition|(
operator|!
name|cacheDir
operator|.
name|exists
argument_list|()
condition|)
block|{
name|cacheDir
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
block|}
name|String
index|[]
name|parts
init|=
name|uri
operator|.
name|toASCIIString
argument_list|()
operator|.
name|split
argument_list|(
literal|"/"
argument_list|)
decl_stmt|;
name|File
name|cacheFile
init|=
operator|new
name|File
argument_list|(
name|cacheDir
argument_list|,
name|parts
index|[
name|parts
operator|.
name|length
operator|-
literal|1
index|]
argument_list|)
decl_stmt|;
name|File
name|successFlag
init|=
operator|new
name|File
argument_list|(
name|cacheFile
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|".success"
argument_list|)
decl_stmt|;
if|if
condition|(
name|cacheFile
operator|.
name|exists
argument_list|()
operator|&&
name|successFlag
operator|.
name|exists
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Cache exist at {}. Not downloading it"
argument_list|,
name|cacheFile
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|successFlag
operator|.
name|exists
argument_list|()
condition|)
block|{
name|successFlag
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Cache doesn't exist. Going to make a copy"
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"This might take a while! GET {}"
argument_list|,
name|uri
argument_list|)
expr_stmt|;
name|FileUtils
operator|.
name|copyURLToFile
argument_list|(
name|uri
operator|.
name|toURL
argument_list|()
argument_list|,
name|cacheFile
argument_list|,
literal|5000
argument_list|,
literal|5000
argument_list|)
expr_stmt|;
comment|//restore the success flag again
name|FileUtils
operator|.
name|write
argument_list|(
name|successFlag
argument_list|,
literal|"CopiedAt:"
operator|+
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|,
name|Charset
operator|.
name|defaultCharset
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|cacheFile
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|initialize
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Param
argument_list|>
name|params
parameter_list|)
throws|throws
name|TikaConfigException
block|{
comment|//STEP 1: resolve weights file, download if necessary
if|if
condition|(
name|modelWeightsPath
operator|.
name|startsWith
argument_list|(
literal|"http://"
argument_list|)
operator|||
name|modelWeightsPath
operator|.
name|startsWith
argument_list|(
literal|"https://"
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Config instructed to download the weights file, doing so."
argument_list|)
expr_stmt|;
try|try
block|{
name|modelWeightsPath
operator|=
name|cachedDownload
argument_list|(
name|cacheDir
argument_list|,
name|URI
operator|.
name|create
argument_list|(
name|modelWeightsPath
argument_list|)
argument_list|)
operator|.
name|getAbsolutePath
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|TikaConfigException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
else|else
block|{
name|File
name|modelFile
init|=
name|retrieveFile
argument_list|(
name|modelWeightsPath
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|modelFile
operator|.
name|exists
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"modelWeights does not exist at :: {}"
argument_list|,
name|modelWeightsPath
argument_list|)
expr_stmt|;
return|return;
block|}
name|modelWeightsPath
operator|=
name|modelFile
operator|.
name|getAbsolutePath
argument_list|()
expr_stmt|;
block|}
comment|//STEP 2: resolve model JSON
name|File
name|modelJsonFile
init|=
name|retrieveFile
argument_list|(
name|modelJsonPath
argument_list|)
decl_stmt|;
if|if
condition|(
name|modelJsonFile
operator|==
literal|null
operator|||
operator|!
name|modelJsonFile
operator|.
name|exists
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Could not locate file {}"
argument_list|,
name|modelJsonPath
argument_list|)
expr_stmt|;
return|return;
block|}
name|modelJsonPath
operator|=
name|modelJsonFile
operator|.
name|getAbsolutePath
argument_list|()
expr_stmt|;
comment|//STEP 3: Load labels map
try|try
init|(
name|InputStream
name|stream
init|=
name|retrieveResource
argument_list|(
name|labelFile
argument_list|)
init|)
block|{
name|this
operator|.
name|labelMap
operator|=
name|loadClassIndex
argument_list|(
name|stream
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
decl||
name|ParseException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Could not load labels map"
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return;
block|}
comment|//STEP 4: initialize the graph
try|try
block|{
name|this
operator|.
name|imageLoader
operator|=
operator|new
name|NativeImageLoader
argument_list|(
name|imgHeight
argument_list|,
name|imgWidth
argument_list|,
name|imgChannels
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Going to load Inception network..."
argument_list|)
expr_stmt|;
name|long
name|st
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|this
operator|.
name|graph
operator|=
name|KerasModelImport
operator|.
name|importKerasModelAndWeights
argument_list|(
name|modelJsonPath
argument_list|,
name|modelWeightsPath
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|long
name|time
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|st
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Loaded the Inception model. Time taken={}ms"
argument_list|,
name|time
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
decl||
name|InvalidKerasConfigurationException
decl||
name|UnsupportedKerasConfigurationException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|TikaConfigException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isAvailable
parameter_list|()
block|{
return|return
name|graph
operator|!=
literal|null
return|;
block|}
comment|/**      * Pre process image to reduce to make it feedable to inception network      *      * @param input Input image      * @return processed image      */
specifier|public
name|INDArray
name|preProcessImage
parameter_list|(
name|INDArray
name|input
parameter_list|)
block|{
comment|// Transform to [-1.0, 1.0] range
return|return
name|input
operator|.
name|div
argument_list|(
literal|255.0
argument_list|)
operator|.
name|sub
argument_list|(
literal|0.5
argument_list|)
operator|.
name|mul
argument_list|(
literal|2.0
argument_list|)
return|;
block|}
comment|/**      * Loads the class to      *      * @param stream label index stream      * @return Map of integer -> label name      * @throws IOException    when the stream breaks unexpectedly      * @throws ParseException when the input doesn't contain a valid JSON map      */
specifier|public
name|Map
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|loadClassIndex
parameter_list|(
name|InputStream
name|stream
parameter_list|)
throws|throws
name|IOException
throws|,
name|ParseException
block|{
name|String
name|content
init|=
name|IOUtils
operator|.
name|toString
argument_list|(
name|stream
argument_list|)
decl_stmt|;
name|JSONObject
name|jIndex
init|=
operator|(
name|JSONObject
operator|)
operator|new
name|JSONParser
argument_list|()
operator|.
name|parse
argument_list|(
name|content
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|classMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Object
name|key
range|:
name|jIndex
operator|.
name|keySet
argument_list|()
control|)
block|{
name|JSONArray
name|names
init|=
operator|(
name|JSONArray
operator|)
name|jIndex
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|classMap
operator|.
name|put
argument_list|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|key
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|,
name|names
operator|.
name|get
argument_list|(
name|names
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|classMap
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|RecognisedObject
argument_list|>
name|recognise
parameter_list|(
name|InputStream
name|stream
parameter_list|,
name|ContentHandler
name|handler
parameter_list|,
name|Metadata
name|metadata
parameter_list|,
name|ParseContext
name|context
parameter_list|)
throws|throws
name|IOException
throws|,
name|SAXException
throws|,
name|TikaException
block|{
name|INDArray
name|image
init|=
name|preProcessImage
argument_list|(
name|imageLoader
operator|.
name|asMatrix
argument_list|(
name|stream
argument_list|)
argument_list|)
decl_stmt|;
name|INDArray
name|scores
init|=
name|graph
operator|.
name|outputSingle
argument_list|(
name|image
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|RecognisedObject
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|scores
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|scores
operator|.
name|getDouble
argument_list|(
name|i
argument_list|)
operator|>
name|minConfidence
condition|)
block|{
name|String
name|label
init|=
name|labelMap
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|String
name|id
init|=
name|i
operator|+
literal|""
decl_stmt|;
name|result
operator|.
name|add
argument_list|(
operator|new
name|RecognisedObject
argument_list|(
name|label
argument_list|,
name|labelLang
argument_list|,
name|id
argument_list|,
name|scores
operator|.
name|getDouble
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Found Object {}"
argument_list|,
name|label
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
block|}
end_class

end_unit

