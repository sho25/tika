begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|language
operator|.
name|translate
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|language
operator|.
name|LanguageIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|language
operator|.
name|LanguageProfile
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Reader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|Charset
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_comment
comment|/**  * Abstract class used to interact with command line/external Translators.  *  * @see org.apache.tika.language.translate.MosesTranslator for an example of extending this class.  *  * @since Tika 1.7  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|ExternalTranslator
implements|implements
name|Translator
block|{
comment|/**      * Run the given command and return the output written to standard out.      *      * @param command The complete command to run.      * @param env The environment to pass along to the Runtime.      * @param workingDirectory The directory from which to run the command.      * @return The output of the command written to standard out.      * @throws IOException      * @throws InterruptedException      */
specifier|public
name|Reader
name|runAndGetOutput
parameter_list|(
name|String
name|command
parameter_list|,
name|String
index|[]
name|env
parameter_list|,
name|File
name|workingDirectory
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|Process
name|process
init|=
name|Runtime
operator|.
name|getRuntime
argument_list|()
operator|.
name|exec
argument_list|(
name|command
argument_list|,
name|env
argument_list|,
name|workingDirectory
argument_list|)
decl_stmt|;
name|InputStreamReader
name|reader
init|=
operator|new
name|InputStreamReader
argument_list|(
name|process
operator|.
name|getInputStream
argument_list|()
argument_list|,
name|Charset
operator|.
name|defaultCharset
argument_list|()
argument_list|)
decl_stmt|;
name|BufferedReader
name|bufferedReader
init|=
operator|new
name|BufferedReader
argument_list|(
name|reader
argument_list|)
decl_stmt|;
name|process
operator|.
name|waitFor
argument_list|()
expr_stmt|;
return|return
name|bufferedReader
return|;
block|}
comment|/**      * Checks to see if the command can be run. Typically used with      *  something like "myapp --version" to check to see if "myapp"      *  is installed and on the path.      *      * @param checkCommandString The command to run and check the return code of.      * @param successCodes Return codes that signify success.      */
specifier|public
name|boolean
name|checkCommand
parameter_list|(
name|String
name|checkCommandString
parameter_list|,
name|int
modifier|...
name|successCodes
parameter_list|)
block|{
try|try
block|{
name|Process
name|process
init|=
name|Runtime
operator|.
name|getRuntime
argument_list|()
operator|.
name|exec
argument_list|(
name|checkCommandString
argument_list|)
decl_stmt|;
name|process
operator|.
name|waitFor
argument_list|()
expr_stmt|;
name|int
name|result
init|=
name|process
operator|.
name|waitFor
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|code
range|:
name|successCodes
control|)
block|{
if|if
condition|(
name|code
operator|==
name|result
condition|)
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// Some problem, command is there or is broken
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Broken pipe"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ie
parameter_list|)
block|{
comment|// Some problem, command is there or is broken
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Interrupted"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
comment|/**      * Default translate method which uses built Tika language identification.      * @param text The text to translate.      * @param targetLanguage The desired language to translate to (for example, "hi").      * @return The translated text.      * @throws Exception      */
annotation|@
name|Override
specifier|public
name|String
name|translate
parameter_list|(
name|String
name|text
parameter_list|,
name|String
name|targetLanguage
parameter_list|)
throws|throws
name|Exception
block|{
name|LanguageIdentifier
name|language
init|=
operator|new
name|LanguageIdentifier
argument_list|(
operator|new
name|LanguageProfile
argument_list|(
name|text
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|sourceLanguage
init|=
name|language
operator|.
name|getLanguage
argument_list|()
decl_stmt|;
return|return
name|translate
argument_list|(
name|text
argument_list|,
name|sourceLanguage
argument_list|,
name|targetLanguage
argument_list|)
return|;
block|}
block|}
end_class

end_unit

