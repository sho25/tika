begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|language
operator|.
name|translate
package|;
end_package

begin_import
import|import static
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
operator|.
name|UTF_8
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|HttpURLConnection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|MalformedURLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|MediaType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Response
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|client
operator|.
name|WebClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|exception
operator|.
name|TikaException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|core
operator|.
name|JsonParseException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|databind
operator|.
name|JsonNode
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|databind
operator|.
name|ObjectMapper
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|databind
operator|.
name|node
operator|.
name|ObjectNode
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|jaxrs
operator|.
name|json
operator|.
name|JacksonJsonProvider
import|;
end_import

begin_comment
comment|/**  *<p>This translator is designed to work with a TCP-IP available  * Joshua translation server, specifically the  *<a href="https://github.com/joshua-decoder/joshua_translation_engine">  * REST-based Joshua server</a>.</p>  *   *<p>If you were to interact with the server via curl a request  * would look as follows</p>  *   *<pre>  * {code  * curl http://localhost:5000/joshua/translate/english \  *   -i -H "Content-Type: application/json" \  *   -X POST -d '{"inputLanguage": "Spanish", "inputText": "vuelo"}' -v  * }  *</pre>  *   * Joshua requires input to be pre-formatted into sentences, one per line,  * so this translation implementation takes care of that.  */
end_comment

begin_class
specifier|public
class|class
name|JoshuaNetworkTranslator
extends|extends
name|AbstractTranslator
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|JoshuaNetworkTranslator
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|PROPERTIES_FILE
init|=
literal|"translator.joshua.properties"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|JOSHUA_SERVER
init|=
literal|"joshua.server.url"
decl_stmt|;
specifier|private
name|String
name|networkServer
decl_stmt|;
specifier|private
name|String
name|networkURI
decl_stmt|;
comment|/**    * Default constructor which first checks for the presence of    * the<code>translator.joshua.properties</code> file.     * We check if the remote server is available on each     * translation process. This check is not a remote call, but instead    * a check for null value within of a local variable represetning the     * value for<code>joshua.server.url</code>, which should be populated     * within the<code>translator.joshua.properties</code> file.    */
specifier|public
name|JoshuaNetworkTranslator
parameter_list|()
block|{
name|Properties
name|props
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|InputStream
name|stream
decl_stmt|;
name|stream
operator|=
name|JoshuaNetworkTranslator
operator|.
name|class
operator|.
name|getResourceAsStream
argument_list|(
name|PROPERTIES_FILE
argument_list|)
expr_stmt|;
try|try
block|{
if|if
condition|(
name|stream
operator|!=
literal|null
condition|)
block|{
name|props
operator|.
name|load
argument_list|(
name|stream
argument_list|)
expr_stmt|;
name|networkServer
operator|=
name|props
operator|.
name|getProperty
argument_list|(
name|JOSHUA_SERVER
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"An error occured whilst reading translator.joshua.properties file"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    *<p>Initially then check if the source language has been provided.    * If no source language (or a null value) has been provided then    * we make an attempt to guess the source using Tika's    * {@link org.apache.tika.langdetect.OptimaizeLangDetector}. If we    * are still unable to guess the language then we return the source    * text.</p>    *     *<p>We then process the input text into a new string consisting of     * sentences, one per line e.g. insert \n between the presence of '.'</p>    *     * @see org.apache.tika.language.translate.Translator#translate    * (java.lang.String, java.lang.String, java.lang.String)    */
annotation|@
name|Override
specifier|public
name|String
name|translate
parameter_list|(
name|String
name|text
parameter_list|,
name|String
name|sourceLanguage
parameter_list|,
name|String
name|targetLanguage
parameter_list|)
throws|throws
name|TikaException
throws|,
name|IOException
block|{
comment|//create networkURI
if|if
condition|(
operator|!
name|networkServer
operator|.
name|endsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
name|networkURI
operator|=
name|networkServer
operator|+
literal|"/"
operator|+
name|targetLanguage
expr_stmt|;
block|}
else|else
block|{
name|networkURI
operator|=
name|networkServer
operator|+
name|targetLanguage
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|this
operator|.
name|isAvailable
argument_list|()
condition|)
return|return
name|text
return|;
comment|//make an attempt to guess language if one is not provided.
if|if
condition|(
name|sourceLanguage
operator|==
literal|null
condition|)
name|sourceLanguage
operator|=
name|detectLanguage
argument_list|(
name|text
argument_list|)
operator|.
name|getLanguage
argument_list|()
expr_stmt|;
comment|//process input text into sentences, one per line
comment|// e.g. insert \n between the presence of '.'
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
name|text
argument_list|)
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
while|while
condition|(
operator|(
name|i
operator|=
name|sb
operator|.
name|indexOf
argument_list|(
literal|"."
argument_list|,
name|i
operator|+
literal|1
argument_list|)
operator|)
operator|!=
operator|-
literal|1
condition|)
block|{
name|sb
operator|.
name|replace
argument_list|(
name|i
argument_list|,
name|i
operator|+
literal|1
argument_list|,
literal|"\n"
argument_list|)
expr_stmt|;
block|}
name|String
name|inputText
init|=
name|sb
operator|.
name|toString
argument_list|()
decl_stmt|;
name|WebClient
name|client
decl_stmt|;
specifier|final
name|List
argument_list|<
name|Object
argument_list|>
name|providers
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|JacksonJsonProvider
name|jacksonJsonProvider
init|=
operator|new
name|JacksonJsonProvider
argument_list|()
decl_stmt|;
name|providers
operator|.
name|add
argument_list|(
name|jacksonJsonProvider
argument_list|)
expr_stmt|;
name|client
operator|=
name|WebClient
operator|.
name|create
argument_list|(
name|networkURI
argument_list|,
name|providers
argument_list|)
expr_stmt|;
name|ObjectMapper
name|requestMapper
init|=
operator|new
name|ObjectMapper
argument_list|()
decl_stmt|;
name|ObjectNode
name|jsonNode
init|=
name|requestMapper
operator|.
name|createObjectNode
argument_list|()
decl_stmt|;
name|jsonNode
operator|.
name|put
argument_list|(
literal|"inputLanguage"
argument_list|,
name|sourceLanguage
argument_list|)
expr_stmt|;
name|jsonNode
operator|.
name|put
argument_list|(
literal|"inputText"
argument_list|,
name|inputText
argument_list|)
expr_stmt|;
comment|//make the reuest
name|Response
name|response
init|=
name|client
operator|.
name|accept
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
operator|.
name|type
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
operator|.
name|post
argument_list|(
name|jsonNode
argument_list|)
decl_stmt|;
name|BufferedReader
name|reader
init|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
operator|(
name|InputStream
operator|)
name|response
operator|.
name|getEntity
argument_list|()
argument_list|,
name|UTF_8
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|line
decl_stmt|;
name|StringBuilder
name|responseText
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
while|while
condition|(
operator|(
name|line
operator|=
name|reader
operator|.
name|readLine
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
name|responseText
operator|.
name|append
argument_list|(
name|line
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|ObjectMapper
name|responseMapper
init|=
operator|new
name|ObjectMapper
argument_list|()
decl_stmt|;
name|JsonNode
name|jsonResp
init|=
name|responseMapper
operator|.
name|readTree
argument_list|(
name|responseText
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|jsonResp
operator|.
name|findValuesAsText
argument_list|(
literal|"outputText"
argument_list|)
operator|!=
literal|null
condition|)
block|{
return|return
name|jsonResp
operator|.
name|findValuesAsText
argument_list|(
literal|"outputText"
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|TikaException
argument_list|(
name|jsonResp
operator|.
name|findValue
argument_list|(
literal|"message"
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|asText
argument_list|()
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|JsonParseException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|TikaException
argument_list|(
literal|"Error requesting translation from '"
operator|+
name|sourceLanguage
operator|+
literal|"' to '"
operator|+
name|targetLanguage
operator|+
literal|"', JSON response "
operator|+
literal|"from Joshua REST Server is not well formatted: "
operator|+
name|responseText
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
block|}
comment|/**    * Make an attempt to guess the source language via    * {@link org.apache.tika.language.translate.AbstractTranslator#detectLanguage(String)}     * before making the call to     * {@link org.apache.tika.language.translate.JoshuaNetworkTranslator#translate(String, String, String)}    * @see org.apache.tika.language.translate.Translator#translate(java.lang.String, java.lang.String)    */
annotation|@
name|Override
specifier|public
name|String
name|translate
parameter_list|(
name|String
name|text
parameter_list|,
name|String
name|targetLanguage
parameter_list|)
throws|throws
name|TikaException
throws|,
name|IOException
block|{
if|if
condition|(
name|isAvailable
argument_list|()
condition|)
return|return
name|text
return|;
name|String
name|sourceLanguage
init|=
name|detectLanguage
argument_list|(
name|text
argument_list|)
operator|.
name|getLanguage
argument_list|()
decl_stmt|;
return|return
name|translate
argument_list|(
name|text
argument_list|,
name|sourceLanguage
argument_list|,
name|targetLanguage
argument_list|)
return|;
block|}
comment|/**    * @see org.apache.tika.language.translate.Translator#isAvailable()    */
annotation|@
name|Override
specifier|public
name|boolean
name|isAvailable
parameter_list|()
block|{
if|if
condition|(
name|this
operator|.
name|networkServer
operator|!=
literal|null
condition|)
block|{
name|URL
name|url
init|=
literal|null
decl_stmt|;
try|try
block|{
name|url
operator|=
operator|new
name|URL
argument_list|(
name|networkURI
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MalformedURLException
name|mue
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error reading {} property from {}. {}"
argument_list|,
name|JOSHUA_SERVER
argument_list|,
name|PROPERTIES_FILE
argument_list|,
name|mue
argument_list|)
expr_stmt|;
block|}
name|HttpURLConnection
name|connection
init|=
literal|null
decl_stmt|;
try|try
block|{
if|if
condition|(
name|url
operator|!=
literal|null
condition|)
block|{
name|connection
operator|=
operator|(
name|HttpURLConnection
operator|)
name|url
operator|.
name|openConnection
argument_list|()
expr_stmt|;
name|connection
operator|.
name|setRequestProperty
argument_list|(
literal|"Connection"
argument_list|,
literal|"close"
argument_list|)
expr_stmt|;
name|connection
operator|.
name|setConnectTimeout
argument_list|(
literal|2000
argument_list|)
expr_stmt|;
comment|// Timeout 2 seconds
name|connection
operator|.
name|connect
argument_list|()
expr_stmt|;
return|return
name|tryResponseCode
argument_list|(
name|connection
argument_list|)
return|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error whilst checking availability of {}. {}"
argument_list|,
name|JOSHUA_SERVER
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
block|}
block|}
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|tryResponseCode
parameter_list|(
name|HttpURLConnection
name|connection
parameter_list|)
block|{
comment|// If the web service is available
try|try
block|{
if|if
condition|(
name|connection
operator|.
name|getResponseCode
argument_list|()
operator|==
literal|200
condition|)
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error retreiving response code from Joshua Network Translator. {}"
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
block|}
end_class

end_unit

