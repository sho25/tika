begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|language
operator|.
name|translate
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|MediaType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Response
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|core
operator|.
name|JsonParseException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|databind
operator|.
name|JsonNode
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|databind
operator|.
name|ObjectMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|client
operator|.
name|WebClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|exception
operator|.
name|TikaException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|language
operator|.
name|translate
operator|.
name|Translator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
operator|.
name|UTF_8
import|;
end_import

begin_comment
comment|/**  * An implementation of a REST client for the YANDEX<a href="https://tech.yandex.com/translate/">Translate API</a>.  * You can sign up for free access online on the<a href="https://tech.yandex.com/key/form.xml?service=trnsl">API Key form</a>  * and set your Application's User Key in the<code>translator.yandex.properties</code> file.  */
end_comment

begin_class
specifier|public
class|class
name|YandexTranslator
implements|implements
name|Translator
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|YandexTranslator
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**      * Yandex Translate API service end-point URL      */
specifier|private
specifier|static
specifier|final
name|String
name|YANDEX_TRANSLATE_URL_BASE
init|=
literal|"https://translate.yandex.net/api/v1.5/tr.json/translate"
decl_stmt|;
comment|/**      * Default USer-Key, a real User-Key must be provided before the Lingo24 can successfully request translations      */
specifier|private
specifier|static
specifier|final
name|String
name|DEFAULT_KEY
init|=
literal|"dummy-key"
decl_stmt|;
comment|/**      * Identifies the client of the request, used for authentication       */
specifier|private
name|String
name|apiKey
decl_stmt|;
comment|/**      * The Yandex Translate API can handle text in<b>plain</b> and/or<b>html</b> format, the default      * format is<b>plain</b>      */
specifier|private
name|String
name|format
init|=
literal|"plain"
decl_stmt|;
specifier|public
name|YandexTranslator
parameter_list|()
block|{
name|Properties
name|config
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
try|try
block|{
name|config
operator|.
name|load
argument_list|(
name|YandexTranslator
operator|.
name|class
operator|.
name|getResourceAsStream
argument_list|(
literal|"translator.yandex.properties"
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|apiKey
operator|=
name|config
operator|.
name|getProperty
argument_list|(
literal|"translator.api-key"
argument_list|)
expr_stmt|;
name|this
operator|.
name|format
operator|=
name|config
operator|.
name|getProperty
argument_list|(
literal|"translator.text.format"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Exception loading Yandex config"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|String
name|translate
parameter_list|(
name|String
name|text
parameter_list|,
name|String
name|sourceLanguage
parameter_list|,
name|String
name|targetLanguage
parameter_list|)
throws|throws
name|TikaException
throws|,
name|IOException
block|{
if|if
condition|(
operator|!
name|this
operator|.
name|isAvailable
argument_list|()
condition|)
block|{
return|return
name|text
return|;
block|}
name|WebClient
name|client
init|=
name|WebClient
operator|.
name|create
argument_list|(
name|YANDEX_TRANSLATE_URL_BASE
argument_list|)
decl_stmt|;
name|String
name|langCode
decl_stmt|;
if|if
condition|(
name|sourceLanguage
operator|==
literal|null
condition|)
block|{
comment|//Translate Service will identify source language
name|langCode
operator|=
name|targetLanguage
expr_stmt|;
block|}
else|else
block|{
comment|//Source language is well known
name|langCode
operator|=
name|sourceLanguage
operator|+
literal|'-'
operator|+
name|targetLanguage
expr_stmt|;
block|}
comment|//TODO Add support for text over 10k characters
name|Response
name|response
init|=
name|client
operator|.
name|accept
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
operator|.
name|query
argument_list|(
literal|"key"
argument_list|,
name|this
operator|.
name|apiKey
argument_list|)
operator|.
name|query
argument_list|(
literal|"lang"
argument_list|,
name|langCode
argument_list|)
operator|.
name|query
argument_list|(
literal|"text"
argument_list|,
name|text
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|BufferedReader
name|reader
init|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
operator|(
name|InputStream
operator|)
name|response
operator|.
name|getEntity
argument_list|()
argument_list|,
name|UTF_8
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|line
init|=
literal|null
decl_stmt|;
name|StringBuffer
name|responseText
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
while|while
condition|(
operator|(
name|line
operator|=
name|reader
operator|.
name|readLine
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
name|responseText
operator|.
name|append
argument_list|(
name|line
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|ObjectMapper
name|mapper
init|=
operator|new
name|ObjectMapper
argument_list|()
decl_stmt|;
name|JsonNode
name|jsonResp
init|=
name|mapper
operator|.
name|readTree
argument_list|(
name|responseText
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|jsonResp
operator|.
name|findValuesAsText
argument_list|(
literal|"code"
argument_list|)
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|String
name|code
init|=
name|jsonResp
operator|.
name|findValuesAsText
argument_list|(
literal|"code"
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|code
operator|.
name|equals
argument_list|(
literal|"200"
argument_list|)
condition|)
block|{
return|return
name|jsonResp
operator|.
name|findValue
argument_list|(
literal|"text"
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|asText
argument_list|()
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|TikaException
argument_list|(
name|jsonResp
operator|.
name|findValue
argument_list|(
literal|"message"
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|asText
argument_list|()
argument_list|)
throw|;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|TikaException
argument_list|(
literal|"Return message not recognized: "
operator|+
name|responseText
operator|.
name|toString
argument_list|()
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|Math
operator|.
name|min
argument_list|(
name|responseText
operator|.
name|length
argument_list|()
argument_list|,
literal|100
argument_list|)
argument_list|)
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|JsonParseException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|TikaException
argument_list|(
literal|"Error requesting translation from '"
operator|+
name|sourceLanguage
operator|+
literal|"' to '"
operator|+
name|targetLanguage
operator|+
literal|"', JSON response from Lingo24 is not well formatted: "
operator|+
name|responseText
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
block|}
comment|/**      * Get the API Key in use for client authentication      * @return API Key      */
specifier|public
name|String
name|getApiKey
parameter_list|()
block|{
return|return
name|apiKey
return|;
block|}
comment|/**      * Set the API Key for client authentication      * @param apiKey API Key      */
specifier|public
name|void
name|setApiKey
parameter_list|(
name|String
name|apiKey
parameter_list|)
block|{
name|this
operator|.
name|apiKey
operator|=
name|apiKey
expr_stmt|;
block|}
comment|/**      * Retrieve the current text format setting.      * The Yandex Translate API can handle text in<b>plain</b> and/or<b>html</b> format, the default      * format is<b>plain</b>      * @return      */
specifier|public
name|String
name|getFormat
parameter_list|()
block|{
return|return
name|format
return|;
block|}
comment|/**      * Set the text format to use (plain/html)      * @param format Text format setting, either plain or html      */
specifier|public
name|void
name|setFormat
parameter_list|(
name|String
name|format
parameter_list|)
block|{
name|this
operator|.
name|format
operator|=
name|format
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|translate
parameter_list|(
name|String
name|text
parameter_list|,
name|String
name|targetLanguage
parameter_list|)
throws|throws
name|TikaException
throws|,
name|IOException
block|{
return|return
name|this
operator|.
name|translate
argument_list|(
name|text
argument_list|,
literal|null
argument_list|,
name|targetLanguage
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isAvailable
parameter_list|()
block|{
return|return
name|this
operator|.
name|apiKey
operator|!=
literal|null
operator|&&
operator|!
name|this
operator|.
name|apiKey
operator|.
name|equals
argument_list|(
name|DEFAULT_KEY
argument_list|)
return|;
block|}
block|}
end_class

end_unit

