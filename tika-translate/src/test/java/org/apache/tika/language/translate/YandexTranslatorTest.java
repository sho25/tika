begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|language
operator|.
name|translate
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|FixMethodOrder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|MethodSorters
import|;
end_import

begin_comment
comment|/**  * Generic Tests to ensure that the RSS library behaves as expected  * @author mark  *  */
end_comment

begin_class
annotation|@
name|FixMethodOrder
argument_list|(
name|MethodSorters
operator|.
name|NAME_ASCENDING
argument_list|)
specifier|public
class|class
name|YandexTranslatorTest
block|{
specifier|private
name|YandexTranslator
name|translator
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|this
operator|.
name|translator
operator|=
operator|new
name|YandexTranslator
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|test1EN_ES_Translation
parameter_list|()
block|{
name|String
name|inputText
init|=
literal|"Hello World!!!"
decl_stmt|;
name|String
name|expectedText
init|=
literal|"Hola Mundo!!!"
decl_stmt|;
try|try
block|{
name|String
name|transText
init|=
name|translator
operator|.
name|translate
argument_list|(
name|inputText
argument_list|,
literal|"en"
argument_list|,
literal|"es"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Text not translated"
argument_list|,
name|transText
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Result: ["
operator|+
name|transText
operator|+
literal|"]: not equal to expected: ["
operator|+
name|expectedText
operator|+
literal|"]"
argument_list|,
name|expectedText
argument_list|,
name|transText
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|fail
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|test2UNDEFINED_DE_ES_Translation
parameter_list|()
block|{
name|String
name|inputText
init|=
literal|"Guten Tag!!!"
decl_stmt|;
name|String
name|expectedText
init|=
literal|"Buen DÃ­a!!!"
decl_stmt|;
try|try
block|{
name|String
name|transText
init|=
name|translator
operator|.
name|translate
argument_list|(
name|inputText
argument_list|,
literal|"es"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Text not translated"
argument_list|,
name|transText
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Result: ["
operator|+
name|transText
operator|+
literal|"]: not equal to expected: ["
operator|+
name|expectedText
operator|+
literal|"]"
argument_list|,
name|expectedText
argument_list|,
name|transText
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|fail
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|test3UNDEFINED_IT_EN_Translation
parameter_list|()
block|{
name|String
name|inputText
init|=
literal|"Buona Sera!!!"
decl_stmt|;
name|String
name|expectedText
init|=
literal|"Good Evening!!!"
decl_stmt|;
try|try
block|{
name|String
name|transText
init|=
name|translator
operator|.
name|translate
argument_list|(
name|inputText
argument_list|,
literal|"en"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Text not translated"
argument_list|,
name|transText
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Result: ["
operator|+
name|transText
operator|+
literal|"]: not equal to expected: ["
operator|+
name|expectedText
operator|+
literal|"]"
argument_list|,
name|expectedText
argument_list|,
name|transText
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|fail
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

