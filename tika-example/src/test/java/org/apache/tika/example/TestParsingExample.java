begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|example
package|;
end_package

begin_import
import|import static
name|junit
operator|.
name|framework
operator|.
name|TestCase
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|exception
operator|.
name|TikaException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|metadata
operator|.
name|Metadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|metadata
operator|.
name|serialization
operator|.
name|JsonMetadataList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_class
specifier|public
class|class
name|TestParsingExample
block|{
name|ParsingExample
name|parsingExample
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
block|{
name|parsingExample
operator|=
operator|new
name|ParsingExample
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testParseToStringExample
parameter_list|()
throws|throws
name|IOException
throws|,
name|SAXException
throws|,
name|TikaException
block|{
name|String
name|result
init|=
name|parsingExample
operator|.
name|parseToStringExample
argument_list|()
operator|.
name|trim
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Expected 'test', but got '"
operator|+
name|result
operator|+
literal|"'"
argument_list|,
literal|"test"
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testParseExample
parameter_list|()
throws|throws
name|IOException
throws|,
name|SAXException
throws|,
name|TikaException
block|{
name|String
name|result
init|=
name|parsingExample
operator|.
name|parseExample
argument_list|()
operator|.
name|trim
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Expected 'test', but got '"
operator|+
name|result
operator|+
literal|"'"
argument_list|,
literal|"test"
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNoEmbeddedExample
parameter_list|()
throws|throws
name|IOException
throws|,
name|SAXException
throws|,
name|TikaException
block|{
name|String
name|result
init|=
name|parsingExample
operator|.
name|parseNoEmbeddedExample
argument_list|()
decl_stmt|;
name|assertContains
argument_list|(
literal|"embed_0"
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|assertNotContains
argument_list|(
literal|"embed1/embed1a.txt"
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|assertNotContains
argument_list|(
literal|"embed3/embed3.txt"
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|assertNotContains
argument_list|(
literal|"When in the Course"
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRecursiveParseExample
parameter_list|()
throws|throws
name|IOException
throws|,
name|SAXException
throws|,
name|TikaException
block|{
name|String
name|result
init|=
name|parsingExample
operator|.
name|parseEmbeddedExample
argument_list|()
decl_stmt|;
name|assertContains
argument_list|(
literal|"embed_0"
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"embed1/embed1a.txt"
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"embed3/embed3.txt"
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"When in the Course"
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRecursiveParserWrapperExample
parameter_list|()
throws|throws
name|IOException
throws|,
name|SAXException
throws|,
name|TikaException
block|{
name|List
argument_list|<
name|Metadata
argument_list|>
name|metadataList
init|=
name|parsingExample
operator|.
name|recursiveParserWrapperExample
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Number of embedded documents + 1 for the container document"
argument_list|,
literal|12
argument_list|,
name|metadataList
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Metadata
name|m
init|=
name|metadataList
operator|.
name|get
argument_list|(
literal|6
argument_list|)
decl_stmt|;
comment|//this is the location the embed3.txt text file within the outer .docx
name|assertEquals
argument_list|(
literal|"test_recursive_embedded.docx/embed1.zip/embed2.zip/embed3.zip/embed3.txt"
argument_list|,
name|m
operator|.
name|get
argument_list|(
literal|"X-TIKA:embedded_resource_path"
argument_list|)
argument_list|)
expr_stmt|;
comment|//it contains some html encoded content
name|assertContains
argument_list|(
literal|"When in the Course"
argument_list|,
name|m
operator|.
name|get
argument_list|(
literal|"X-TIKA:content"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSerializedRecursiveParserWrapperExample
parameter_list|()
throws|throws
name|IOException
throws|,
name|SAXException
throws|,
name|TikaException
block|{
name|String
name|json
init|=
name|parsingExample
operator|.
name|serializedRecursiveParserWrapperExample
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|json
operator|.
name|indexOf
argument_list|(
literal|"When in the Course"
argument_list|)
operator|>
operator|-
literal|1
argument_list|)
expr_stmt|;
comment|//now try deserializing the JSON
name|List
argument_list|<
name|Metadata
argument_list|>
name|metadataList
init|=
name|JsonMetadataList
operator|.
name|fromJson
argument_list|(
operator|new
name|StringReader
argument_list|(
name|json
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|12
argument_list|,
name|metadataList
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|assertContains
parameter_list|(
name|String
name|needle
parameter_list|,
name|String
name|haystack
parameter_list|)
block|{
name|assertTrue
argument_list|(
literal|"Should have found "
operator|+
name|needle
operator|+
literal|" in: "
operator|+
name|haystack
argument_list|,
name|haystack
operator|.
name|contains
argument_list|(
name|needle
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|assertNotContains
parameter_list|(
name|String
name|needle
parameter_list|,
name|String
name|haystack
parameter_list|)
block|{
name|assertFalse
argument_list|(
literal|"Should not have found "
operator|+
name|needle
operator|+
literal|" in: "
operator|+
name|haystack
argument_list|,
name|haystack
operator|.
name|contains
argument_list|(
name|needle
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

