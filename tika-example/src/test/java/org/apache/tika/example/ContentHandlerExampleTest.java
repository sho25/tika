begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|example
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|exception
operator|.
name|TikaException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|TikaTest
operator|.
name|assertContains
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|TikaTest
operator|.
name|assertNotContained
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_class
specifier|public
class|class
name|ContentHandlerExampleTest
block|{
name|ContentHandlerExample
name|example
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
block|{
name|example
operator|=
operator|new
name|ContentHandlerExample
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testParseToPlainText
parameter_list|()
throws|throws
name|IOException
throws|,
name|SAXException
throws|,
name|TikaException
block|{
name|String
name|result
init|=
name|example
operator|.
name|parseToPlainText
argument_list|()
operator|.
name|trim
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Expected 'test', but got '"
operator|+
name|result
operator|+
literal|"'"
argument_list|,
literal|"test"
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testParseToHTML
parameter_list|()
throws|throws
name|IOException
throws|,
name|SAXException
throws|,
name|TikaException
block|{
name|String
name|result
init|=
name|example
operator|.
name|parseToHTML
argument_list|()
operator|.
name|trim
argument_list|()
decl_stmt|;
name|assertContains
argument_list|(
literal|"<html"
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"<head>"
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"<meta name=\"dc:creator\""
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"<title>"
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"<body>"
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|">test"
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testParseBodyToHTML
parameter_list|()
throws|throws
name|IOException
throws|,
name|SAXException
throws|,
name|TikaException
block|{
name|String
name|result
init|=
name|example
operator|.
name|parseBodyToHTML
argument_list|()
operator|.
name|trim
argument_list|()
decl_stmt|;
name|assertNotContained
argument_list|(
literal|"<html"
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|assertNotContained
argument_list|(
literal|"<head>"
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|assertNotContained
argument_list|(
literal|"<meta name=\"dc:creator\""
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|assertNotContained
argument_list|(
literal|"<title>"
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|assertNotContained
argument_list|(
literal|"<body>"
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|">test"
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testParseOnePartToHTML
parameter_list|()
throws|throws
name|IOException
throws|,
name|SAXException
throws|,
name|TikaException
block|{
name|String
name|result
init|=
name|example
operator|.
name|parseOnePartToHTML
argument_list|()
operator|.
name|trim
argument_list|()
decl_stmt|;
name|assertNotContained
argument_list|(
literal|"<html"
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|assertNotContained
argument_list|(
literal|"<head>"
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|assertNotContained
argument_list|(
literal|"<meta name=\"dc:creator\""
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|assertNotContained
argument_list|(
literal|"<title>"
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|assertNotContained
argument_list|(
literal|"<body>"
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"<p class=\"header\""
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"This is in the header"
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|assertNotContained
argument_list|(
literal|"<h1>Test Document"
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|assertNotContained
argument_list|(
literal|"<p>1 2 3"
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testParseToPlainTextChunks
parameter_list|()
throws|throws
name|IOException
throws|,
name|SAXException
throws|,
name|TikaException
block|{
name|List
argument_list|<
name|String
argument_list|>
name|result
init|=
name|example
operator|.
name|parseToPlainTextChunks
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|result
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|chunk
range|:
name|result
control|)
block|{
name|assertTrue
argument_list|(
literal|"Chunk under max size"
argument_list|,
name|chunk
operator|.
name|length
argument_list|()
operator|<=
name|example
operator|.
name|MAXIMUM_TEXT_CHUNK_SIZE
argument_list|)
expr_stmt|;
block|}
name|assertContains
argument_list|(
literal|"This is in the header"
argument_list|,
name|result
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"Test Document"
argument_list|,
name|result
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"Testing"
argument_list|,
name|result
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"1 2 3"
argument_list|,
name|result
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"TestTable"
argument_list|,
name|result
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"Testing 123"
argument_list|,
name|result
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

