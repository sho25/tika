begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|example
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|DirectoryStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|ExtractEmbeddedFilesTest
block|{
name|ParsingExample
name|parsingExample
decl_stmt|;
name|Path
name|outputPath
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|IOException
block|{
name|parsingExample
operator|=
operator|new
name|ParsingExample
argument_list|()
expr_stmt|;
name|outputPath
operator|=
name|Files
operator|.
name|createTempDirectory
argument_list|(
literal|"tika-ext-emb-example-"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|IOException
block|{
comment|//this does not act recursively, this only assumes single level directory
try|try
init|(
name|DirectoryStream
argument_list|<
name|Path
argument_list|>
name|dirStream
init|=
name|Files
operator|.
name|newDirectoryStream
argument_list|(
name|outputPath
argument_list|)
init|)
block|{
for|for
control|(
name|Path
name|entry
range|:
name|dirStream
control|)
block|{
name|Files
operator|.
name|delete
argument_list|(
name|entry
argument_list|)
expr_stmt|;
block|}
block|}
name|Files
operator|.
name|delete
argument_list|(
name|outputPath
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testExtractEmbeddedFiles
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|Path
argument_list|>
name|extracted
init|=
name|parsingExample
operator|.
name|extractEmbeddedDocumentsExample
argument_list|(
name|outputPath
argument_list|)
decl_stmt|;
comment|//this number should be bigger!!!
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|extracted
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

