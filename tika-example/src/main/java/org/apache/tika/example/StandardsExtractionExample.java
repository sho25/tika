begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|sax
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|FileVisitResult
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Paths
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|SimpleFileVisitor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|attribute
operator|.
name|BasicFileAttributes
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|metadata
operator|.
name|Metadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|AutoDetectParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|ParseContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|Parser
import|;
end_import

begin_comment
comment|/**  * Class to demonstrate how to use the {@link StandardsExtractingContentHandler}  * to get a list of the standard references from every file in a directory.  *   *<p>  * You can run this main method by running   *<code>  *   mvn exec:java -Dexec.mainClass="org.apache.tika.example.StandardsExtractionExample" -Dexec.args="/path/to/input"  *</code>  * from the tika-example directory.  *</p>  */
end_comment

begin_class
specifier|public
class|class
name|StandardsExtractionExample
block|{
specifier|private
specifier|static
name|HashSet
argument_list|<
name|String
argument_list|>
name|standardReferences
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
specifier|static
name|int
name|failedFiles
init|=
literal|0
decl_stmt|;
specifier|private
specifier|static
name|int
name|successfulFiles
init|=
literal|0
decl_stmt|;
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
if|if
condition|(
name|args
operator|.
name|length
operator|<
literal|1
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Usage: "
operator|+
name|StandardsExtractionExample
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|" /path/to/input"
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
name|String
name|pathname
init|=
name|args
index|[
literal|0
index|]
decl_stmt|;
name|Path
name|folder
init|=
name|Paths
operator|.
name|get
argument_list|(
name|pathname
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Searching "
operator|+
name|folder
operator|.
name|toAbsolutePath
argument_list|()
operator|+
literal|"..."
argument_list|)
expr_stmt|;
name|processFolder
argument_list|(
name|folder
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|standardReferences
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Parsed "
operator|+
name|successfulFiles
operator|+
literal|"/"
operator|+
operator|(
name|successfulFiles
operator|+
name|failedFiles
operator|)
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|processFolder
parameter_list|(
name|Path
name|folder
parameter_list|)
block|{
try|try
block|{
name|Files
operator|.
name|walkFileTree
argument_list|(
name|folder
argument_list|,
operator|new
name|SimpleFileVisitor
argument_list|<
name|Path
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|FileVisitResult
name|visitFile
parameter_list|(
name|Path
name|file
parameter_list|,
name|BasicFileAttributes
name|attrs
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|process
argument_list|(
name|file
argument_list|)
expr_stmt|;
name|successfulFiles
operator|++
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|failedFiles
operator|++
expr_stmt|;
comment|// ignore this file
block|}
return|return
name|FileVisitResult
operator|.
name|CONTINUE
return|;
block|}
annotation|@
name|Override
specifier|public
name|FileVisitResult
name|visitFileFailed
parameter_list|(
name|Path
name|file
parameter_list|,
name|IOException
name|exc
parameter_list|)
throws|throws
name|IOException
block|{
name|failedFiles
operator|++
expr_stmt|;
return|return
name|FileVisitResult
operator|.
name|CONTINUE
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// ignore failure
block|}
block|}
specifier|public
specifier|static
name|void
name|process
parameter_list|(
name|Path
name|path
parameter_list|)
throws|throws
name|Exception
block|{
name|Parser
name|parser
init|=
operator|new
name|AutoDetectParser
argument_list|()
decl_stmt|;
name|Metadata
name|metadata
init|=
operator|new
name|Metadata
argument_list|()
decl_stmt|;
comment|// The StandardsExtractingContentHandler will examine any characters for
comment|// standard references before passing them
comment|// to the underlying Handler.
name|StandardsExtractingContentHandler
name|handler
init|=
operator|new
name|StandardsExtractingContentHandler
argument_list|(
operator|new
name|BodyContentHandler
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|,
name|metadata
argument_list|)
decl_stmt|;
name|handler
operator|.
name|setThreshold
argument_list|(
literal|1.0
argument_list|)
expr_stmt|;
try|try
init|(
name|InputStream
name|stream
init|=
operator|new
name|BufferedInputStream
argument_list|(
name|Files
operator|.
name|newInputStream
argument_list|(
name|path
argument_list|)
argument_list|)
init|)
block|{
name|parser
operator|.
name|parse
argument_list|(
name|stream
argument_list|,
name|handler
argument_list|,
name|metadata
argument_list|,
operator|new
name|ParseContext
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|String
index|[]
name|references
init|=
name|metadata
operator|.
name|getValues
argument_list|(
name|StandardsExtractingContentHandler
operator|.
name|STANDARD_REFERENCES
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|addAll
argument_list|(
name|standardReferences
argument_list|,
name|references
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

