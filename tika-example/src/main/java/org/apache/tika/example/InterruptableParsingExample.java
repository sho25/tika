begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|example
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|Tika
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|exception
operator|.
name|TikaException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|metadata
operator|.
name|Metadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|ParseContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|Parser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|helpers
operator|.
name|DefaultHandler
import|;
end_import

begin_comment
comment|/**  * This example demonstrates how to interrupt document parsing if  * some condition is met.  *<p>  * {@link InterruptingContentHandler} throws special exception as soon as  * find {@code query} string in parsed file.  *  * See also http://stackoverflow.com/questions/31939851  */
end_comment

begin_class
specifier|public
class|class
name|InterruptableParsingExample
block|{
specifier|private
name|Tika
name|tika
init|=
operator|new
name|Tika
argument_list|()
decl_stmt|;
comment|// for default autodetect parser
specifier|public
name|boolean
name|findInFile
parameter_list|(
name|String
name|query
parameter_list|,
name|Path
name|path
parameter_list|)
block|{
name|InterruptingContentHandler
name|handler
init|=
operator|new
name|InterruptingContentHandler
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|Metadata
name|metadata
init|=
operator|new
name|Metadata
argument_list|()
decl_stmt|;
name|ParseContext
name|context
init|=
operator|new
name|ParseContext
argument_list|()
decl_stmt|;
name|context
operator|.
name|set
argument_list|(
name|Parser
operator|.
name|class
argument_list|,
name|tika
operator|.
name|getParser
argument_list|()
argument_list|)
expr_stmt|;
try|try
init|(
name|InputStream
name|is
init|=
operator|new
name|BufferedInputStream
argument_list|(
name|Files
operator|.
name|newInputStream
argument_list|(
name|path
argument_list|)
argument_list|)
init|)
block|{
name|tika
operator|.
name|getParser
argument_list|()
operator|.
name|parse
argument_list|(
name|is
argument_list|,
name|handler
argument_list|,
name|metadata
argument_list|,
name|context
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|QueryMatchedException
name|e
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|SAXException
decl||
name|TikaException
decl||
name|IOException
name|e
parameter_list|)
block|{
comment|// something went wrong with parsing...
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
class|class
name|QueryMatchedException
extends|extends
name|SAXException
block|{     }
comment|/**      * Trivial content handler that searched for {@code query} in characters send to it.      *<p>      * Throws {@link QueryMatchedException} when query string is found.      */
class|class
name|InterruptingContentHandler
extends|extends
name|DefaultHandler
block|{
specifier|private
name|String
name|query
decl_stmt|;
specifier|private
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|InterruptingContentHandler
parameter_list|(
name|String
name|query
parameter_list|)
block|{
name|this
operator|.
name|query
operator|=
name|query
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|characters
parameter_list|(
name|char
index|[]
name|ch
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|length
parameter_list|)
throws|throws
name|SAXException
block|{
name|sb
operator|.
name|append
argument_list|(
operator|new
name|String
argument_list|(
name|ch
argument_list|,
name|start
argument_list|,
name|length
argument_list|)
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|getDefault
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|sb
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
name|query
argument_list|)
condition|)
throw|throw
operator|new
name|QueryMatchedException
argument_list|()
throw|;
if|if
condition|(
name|sb
operator|.
name|length
argument_list|()
operator|>
literal|2
operator|*
name|query
operator|.
name|length
argument_list|()
condition|)
name|sb
operator|.
name|delete
argument_list|(
literal|0
argument_list|,
name|sb
operator|.
name|length
argument_list|()
operator|-
name|query
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
comment|// keep tail with query.length() chars
block|}
block|}
block|}
end_class

end_unit

