begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|example
package|;
end_package

begin_import
import|import static
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
operator|.
name|UTF_8
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStreamWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Writer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|Charset
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|config
operator|.
name|TikaConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|config
operator|.
name|TikaConfigSerializer
import|;
end_import

begin_comment
comment|/**  * This class shows how to dump a TikaConfig object to a configuration file.  * This allows users to easily dump the default TikaConfig as a base from which  * to start if they want to modify the default configuration file.  *<p>  * For those who want to modify the mimes file, take a look at  * tika-core/src/main/resources/org/apache/tika/mime/tika-mimetypes.xml  * for inspiration.  Consider adding org/apache/tika/mime/custom-mimetypes.xml  * for your custom mime types.  */
end_comment

begin_class
specifier|public
class|class
name|DumpTikaConfigExample
block|{
comment|/**      * @param args outputFile, outputEncoding, if args is empty, this prints to console      * @throws Exception      */
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
name|Charset
name|encoding
init|=
name|UTF_8
decl_stmt|;
name|TikaConfigSerializer
operator|.
name|Mode
name|mode
init|=
name|TikaConfigSerializer
operator|.
name|Mode
operator|.
name|CURRENT
decl_stmt|;
name|String
name|filename
init|=
literal|null
decl_stmt|;
for|for
control|(
name|String
name|arg
range|:
name|args
control|)
block|{
if|if
condition|(
name|arg
operator|.
name|startsWith
argument_list|(
literal|"-"
argument_list|)
condition|)
block|{
if|if
condition|(
name|arg
operator|.
name|contains
argument_list|(
literal|"-dump-minimal"
argument_list|)
condition|)
block|{
name|mode
operator|=
name|TikaConfigSerializer
operator|.
name|Mode
operator|.
name|MINIMAL
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|arg
operator|.
name|contains
argument_list|(
literal|"-dump-current"
argument_list|)
condition|)
block|{
name|mode
operator|=
name|TikaConfigSerializer
operator|.
name|Mode
operator|.
name|CURRENT
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|arg
operator|.
name|contains
argument_list|(
literal|"-dump-static"
argument_list|)
condition|)
block|{
name|mode
operator|=
name|TikaConfigSerializer
operator|.
name|Mode
operator|.
name|STATIC
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Use:"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  DumpTikaConfig [--dump-minimal] [--dump-current] [--dump-static] [filename] [encoding]"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"--dump-minimal    Produce the minimal config file"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"--dump-current    The current (with defaults) config file"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"--dump-static     Convert dynamic parts to static"
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
elseif|else
if|if
condition|(
name|filename
operator|==
literal|null
condition|)
block|{
name|filename
operator|=
name|arg
expr_stmt|;
block|}
else|else
block|{
name|encoding
operator|=
name|Charset
operator|.
name|forName
argument_list|(
name|arg
argument_list|)
expr_stmt|;
block|}
block|}
name|Writer
name|writer
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|filename
operator|!=
literal|null
condition|)
block|{
name|writer
operator|=
operator|new
name|OutputStreamWriter
argument_list|(
operator|new
name|FileOutputStream
argument_list|(
name|filename
argument_list|)
argument_list|,
name|encoding
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|writer
operator|=
operator|new
name|StringWriter
argument_list|()
expr_stmt|;
block|}
name|DumpTikaConfigExample
name|ex
init|=
operator|new
name|DumpTikaConfigExample
argument_list|()
decl_stmt|;
name|TikaConfigSerializer
operator|.
name|serialize
argument_list|(
name|TikaConfig
operator|.
name|getDefaultConfig
argument_list|()
argument_list|,
name|mode
argument_list|,
name|writer
argument_list|,
name|encoding
argument_list|)
expr_stmt|;
name|writer
operator|.
name|flush
argument_list|()
expr_stmt|;
if|if
condition|(
name|writer
operator|instanceof
name|StringWriter
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|writer
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

