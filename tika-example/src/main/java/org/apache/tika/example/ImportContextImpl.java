begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|example
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Item
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|server
operator|.
name|io
operator|.
name|DefaultIOListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|server
operator|.
name|io
operator|.
name|IOListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|server
operator|.
name|io
operator|.
name|IOUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|server
operator|.
name|io
operator|.
name|ImportContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|webdav
operator|.
name|io
operator|.
name|InputContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|detect
operator|.
name|Detector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|metadata
operator|.
name|Metadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|mime
operator|.
name|MediaType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  *<code>ImportContextImpl</code>...  */
end_comment

begin_class
specifier|public
class|class
name|ImportContextImpl
implements|implements
name|ImportContext
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ImportContextImpl
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|IOListener
name|ioListener
decl_stmt|;
specifier|private
specifier|final
name|Item
name|importRoot
decl_stmt|;
specifier|private
specifier|final
name|String
name|systemId
decl_stmt|;
specifier|private
specifier|final
name|File
name|inputFile
decl_stmt|;
specifier|private
name|InputContext
name|inputCtx
decl_stmt|;
specifier|private
name|boolean
name|completed
decl_stmt|;
specifier|private
specifier|final
name|Detector
name|detector
decl_stmt|;
specifier|private
specifier|final
name|MediaType
name|type
decl_stmt|;
comment|/**      * Creates a new item import context. The specified InputStream is written      * to a temporary file in order to avoid problems with multiple IOHandlers      * that try to run the import but fail. The temporary file is deleted as      * soon as this context is informed that the import has been completed and      * it will not be used any more.      *      * @param importRoot      * @param systemId      * @param ctx        input context, or<code>null</code>      * @param stream     document input stream, or<code>null</code>      * @param ioListener      * @param detector   content type detector      * @throws IOException      * @see ImportContext#informCompleted(boolean)      */
specifier|public
name|ImportContextImpl
parameter_list|(
name|Item
name|importRoot
parameter_list|,
name|String
name|systemId
parameter_list|,
name|InputContext
name|ctx
parameter_list|,
name|InputStream
name|stream
parameter_list|,
name|IOListener
name|ioListener
parameter_list|,
name|Detector
name|detector
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|importRoot
operator|=
name|importRoot
expr_stmt|;
name|this
operator|.
name|systemId
operator|=
name|systemId
expr_stmt|;
name|this
operator|.
name|inputCtx
operator|=
name|ctx
expr_stmt|;
name|this
operator|.
name|ioListener
operator|=
operator|(
name|ioListener
operator|!=
literal|null
operator|)
condition|?
name|ioListener
else|:
operator|new
name|DefaultIOListener
argument_list|(
name|LOG
argument_list|)
expr_stmt|;
name|this
operator|.
name|detector
operator|=
name|detector
expr_stmt|;
name|Metadata
name|metadata
init|=
operator|new
name|Metadata
argument_list|()
decl_stmt|;
if|if
condition|(
name|ctx
operator|!=
literal|null
operator|&&
name|ctx
operator|.
name|getContentType
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|metadata
operator|.
name|set
argument_list|(
name|Metadata
operator|.
name|CONTENT_TYPE
argument_list|,
name|ctx
operator|.
name|getContentType
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|systemId
operator|!=
literal|null
condition|)
block|{
name|metadata
operator|.
name|set
argument_list|(
name|Metadata
operator|.
name|RESOURCE_NAME_KEY
argument_list|,
name|systemId
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|stream
operator|!=
literal|null
operator|&&
operator|!
name|stream
operator|.
name|markSupported
argument_list|()
condition|)
block|{
name|stream
operator|=
operator|new
name|BufferedInputStream
argument_list|(
name|stream
argument_list|)
expr_stmt|;
block|}
name|type
operator|=
name|detector
operator|.
name|detect
argument_list|(
name|stream
argument_list|,
name|metadata
argument_list|)
expr_stmt|;
name|this
operator|.
name|inputFile
operator|=
name|IOUtil
operator|.
name|getTempFile
argument_list|(
name|stream
argument_list|)
expr_stmt|;
block|}
comment|/**      * @see ImportContext#getIOListener()      */
specifier|public
name|IOListener
name|getIOListener
parameter_list|()
block|{
return|return
name|ioListener
return|;
block|}
comment|/**      * @see ImportContext#getImportRoot()      */
specifier|public
name|Item
name|getImportRoot
parameter_list|()
block|{
return|return
name|importRoot
return|;
block|}
comment|/**      * @see ImportContext#getDetector()      */
specifier|public
name|Detector
name|getDetector
parameter_list|()
block|{
return|return
name|detector
return|;
block|}
comment|/**      * @see ImportContext#hasStream()      */
specifier|public
name|boolean
name|hasStream
parameter_list|()
block|{
return|return
name|inputFile
operator|!=
literal|null
return|;
block|}
comment|/**      * Returns a new<code>InputStream</code> to the temporary file created      * during instanciation or<code>null</code>, if this context does not      * provide a stream.      *      * @see ImportContext#getInputStream()      * @see #hasStream()      */
specifier|public
name|InputStream
name|getInputStream
parameter_list|()
block|{
name|checkCompleted
argument_list|()
expr_stmt|;
name|InputStream
name|in
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|inputFile
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|in
operator|=
operator|new
name|FileInputStream
argument_list|(
name|inputFile
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// unexpected error... ignore and return null
block|}
block|}
return|return
name|in
return|;
block|}
comment|/**      * @see ImportContext#getSystemId()      */
specifier|public
name|String
name|getSystemId
parameter_list|()
block|{
return|return
name|systemId
return|;
block|}
comment|/**      * @see ImportContext#getModificationTime()      */
specifier|public
name|long
name|getModificationTime
parameter_list|()
block|{
return|return
operator|(
name|inputCtx
operator|!=
literal|null
operator|)
condition|?
name|inputCtx
operator|.
name|getModificationTime
argument_list|()
else|:
operator|new
name|Date
argument_list|()
operator|.
name|getTime
argument_list|()
return|;
block|}
comment|/**      * @see ImportContext#getContentLanguage()      */
specifier|public
name|String
name|getContentLanguage
parameter_list|()
block|{
return|return
operator|(
name|inputCtx
operator|!=
literal|null
operator|)
condition|?
name|inputCtx
operator|.
name|getContentLanguage
argument_list|()
else|:
literal|null
return|;
block|}
comment|/**      * @see ImportContext#getContentLength()      */
specifier|public
name|long
name|getContentLength
parameter_list|()
block|{
name|long
name|length
init|=
name|IOUtil
operator|.
name|UNDEFINED_LENGTH
decl_stmt|;
if|if
condition|(
name|inputCtx
operator|!=
literal|null
condition|)
block|{
name|length
operator|=
name|inputCtx
operator|.
name|getContentLength
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|length
operator|<
literal|0
operator|&&
name|inputFile
operator|!=
literal|null
condition|)
block|{
name|length
operator|=
name|inputFile
operator|.
name|length
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|length
operator|<
literal|0
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Unable to determine content length -> default value = {}"
argument_list|,
name|IOUtil
operator|.
name|UNDEFINED_LENGTH
argument_list|)
expr_stmt|;
block|}
return|return
name|length
return|;
block|}
comment|/**      * @see ImportContext#getMimeType()      */
specifier|public
name|String
name|getMimeType
parameter_list|()
block|{
return|return
name|IOUtil
operator|.
name|getMimeType
argument_list|(
name|type
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * @see ImportContext#getEncoding()      */
specifier|public
name|String
name|getEncoding
parameter_list|()
block|{
return|return
name|IOUtil
operator|.
name|getEncoding
argument_list|(
name|type
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * @see ImportContext#getProperty(Object)      */
specifier|public
name|Object
name|getProperty
parameter_list|(
name|Object
name|propertyName
parameter_list|)
block|{
return|return
operator|(
name|inputCtx
operator|!=
literal|null
operator|)
condition|?
name|inputCtx
operator|.
name|getProperty
argument_list|(
name|propertyName
operator|.
name|toString
argument_list|()
argument_list|)
else|:
literal|null
return|;
block|}
comment|/**      * @see ImportContext#informCompleted(boolean)      */
specifier|public
name|void
name|informCompleted
parameter_list|(
name|boolean
name|success
parameter_list|)
block|{
name|checkCompleted
argument_list|()
expr_stmt|;
name|completed
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|inputFile
operator|!=
literal|null
condition|)
block|{
name|inputFile
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * @see ImportContext#isCompleted()      */
specifier|public
name|boolean
name|isCompleted
parameter_list|()
block|{
return|return
name|completed
return|;
block|}
comment|/**      * @throws IllegalStateException if the context is already completed.      * @see #isCompleted()      * @see #informCompleted(boolean)      */
specifier|private
name|void
name|checkCompleted
parameter_list|()
block|{
if|if
condition|(
name|completed
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"ImportContext has already been consumed."
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

