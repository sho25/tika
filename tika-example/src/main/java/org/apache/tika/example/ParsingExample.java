begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|example
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|Tika
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|exception
operator|.
name|TikaException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|metadata
operator|.
name|Metadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|AutoDetectParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|sax
operator|.
name|BodyContentHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_class
specifier|public
class|class
name|ParsingExample
block|{
comment|/**      * Example of how to use Tika's parseToString method to parse the content of a file,      * and return any text found.      *      * @return The content of a file.      */
specifier|public
name|String
name|parseToStringExample
parameter_list|()
throws|throws
name|IOException
throws|,
name|SAXException
throws|,
name|TikaException
block|{
name|InputStream
name|stream
init|=
name|ParsingExample
operator|.
name|class
operator|.
name|getResourceAsStream
argument_list|(
literal|"test.doc"
argument_list|)
decl_stmt|;
name|Tika
name|tika
init|=
operator|new
name|Tika
argument_list|()
decl_stmt|;
try|try
block|{
return|return
name|tika
operator|.
name|parseToString
argument_list|(
name|stream
argument_list|)
return|;
block|}
finally|finally
block|{
name|stream
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * Example of how to use Tika to parse an file when you do not know its file type      * ahead of time.      *      * AutoDetectParser attempts to discover the file's type automatically, then call      * the exact Parser built for that file type.      *      * The stream to be parsed by the Parser. In this case, we get a file from the      * resources folder of this project.      *      * Handlers are used to get the exact information you want out of the host of      * information gathered by Parsers. The body content handler, intuitively, extracts      * everything that would go between HTML body tags.      *      * The Metadata object will be filled by the Parser with Metadata discovered about      * the file being parsed.      *      * @return The content of a file.      */
specifier|public
name|String
name|parseExample
parameter_list|()
throws|throws
name|IOException
throws|,
name|SAXException
throws|,
name|TikaException
block|{
name|InputStream
name|stream
init|=
name|ParsingExample
operator|.
name|class
operator|.
name|getResourceAsStream
argument_list|(
literal|"test.doc"
argument_list|)
decl_stmt|;
name|AutoDetectParser
name|parser
init|=
operator|new
name|AutoDetectParser
argument_list|()
decl_stmt|;
name|BodyContentHandler
name|handler
init|=
operator|new
name|BodyContentHandler
argument_list|()
decl_stmt|;
name|Metadata
name|metadata
init|=
operator|new
name|Metadata
argument_list|()
decl_stmt|;
try|try
block|{
name|parser
operator|.
name|parse
argument_list|(
name|stream
argument_list|,
name|handler
argument_list|,
name|metadata
argument_list|)
expr_stmt|;
return|return
name|handler
operator|.
name|toString
argument_list|()
return|;
block|}
finally|finally
block|{
name|stream
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

