begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|example
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|metadata
operator|.
name|Metadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|sax
operator|.
name|ContentHandlerDecorator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|ContentHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|helpers
operator|.
name|DefaultHandler
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * Class used to extract phone numbers while parsing.  *  * Every time a document is parsed in Tika, the content is split into SAX events.  * Those SAX events are handled by a ContentHandler. You can think of these events  * as marking a tag in an HTML file. Once you're finished parsing, you can call  * handler.toString(), for example, to get the text contents of the file. On the other  * hand, any of the metadata of the file will be added to the Metadata object passed  * in during the parse() call.  So, the Parser class sends metadata to the Metadata  * object and content to the ContentHandler.  *  * This class is an example of how to combine a ContentHandler and a Metadata.  * As content is passed to the handler, we first check to see if it matches a  * textual pattern for a phone number. If the extracted content is a phone number,  * we add it to the metadata under the key "phonenumbers". So, if you used this  * ContentHandler when you parsed a document, then called  * metadata.getValues("phonenumbers"), you would get an array of Strings of phone  * numbers found in the document.  *  * Please see the PhoneExtractingContentHandlerTest for an example of how to use  * this class.  *  */
end_comment

begin_class
specifier|public
class|class
name|PhoneExtractingContentHandler
extends|extends
name|ContentHandlerDecorator
block|{
specifier|private
name|Metadata
name|metadata
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|PHONE_NUMBERS
init|=
literal|"phonenumbers"
decl_stmt|;
specifier|private
name|StringBuilder
name|stringBuilder
decl_stmt|;
comment|/**      * Creates a decorator for the given SAX event handler and Metadata object.      *      * @param handler SAX event handler to be decorated      */
specifier|public
name|PhoneExtractingContentHandler
parameter_list|(
name|ContentHandler
name|handler
parameter_list|,
name|Metadata
name|metadata
parameter_list|)
block|{
name|super
argument_list|(
name|handler
argument_list|)
expr_stmt|;
name|this
operator|.
name|metadata
operator|=
name|metadata
expr_stmt|;
name|this
operator|.
name|stringBuilder
operator|=
operator|new
name|StringBuilder
argument_list|()
expr_stmt|;
block|}
comment|/**      * Creates a decorator that by default forwards incoming SAX events to      * a dummy content handler that simply ignores all the events. Subclasses      * should use the {@link #setContentHandler(ContentHandler)} method to      * switch to a more usable underlying content handler.      * Also creates a dummy Metadata object to store phone numbers in.      */
specifier|protected
name|PhoneExtractingContentHandler
parameter_list|()
block|{
name|this
argument_list|(
operator|new
name|DefaultHandler
argument_list|()
argument_list|,
operator|new
name|Metadata
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * The characters method is called whenever a Parser wants to pass raw...      * characters to the ContentHandler. But, sometimes, phone numbers are split      * accross different calls to characters, depending on the specific Parser      * used. So, we simply add all characters to a StringBuilder and analyze it      * once the document is finished.      */
annotation|@
name|Override
specifier|public
name|void
name|characters
parameter_list|(
name|char
index|[]
name|ch
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|length
parameter_list|)
throws|throws
name|SAXException
block|{
try|try
block|{
name|String
name|text
init|=
operator|new
name|String
argument_list|(
name|Arrays
operator|.
name|copyOfRange
argument_list|(
name|ch
argument_list|,
name|start
argument_list|,
name|start
operator|+
name|length
argument_list|)
argument_list|)
decl_stmt|;
name|stringBuilder
operator|.
name|append
argument_list|(
name|text
argument_list|)
expr_stmt|;
name|super
operator|.
name|characters
argument_list|(
name|ch
argument_list|,
name|start
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SAXException
name|e
parameter_list|)
block|{
name|handleException
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * This method is called whenever the Parser is done parsing the file. So,      * we check the output for any phone numbers.      */
annotation|@
name|Override
specifier|public
name|void
name|endDocument
parameter_list|()
throws|throws
name|SAXException
block|{
name|super
operator|.
name|endDocument
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|numbers
init|=
name|CleanPhoneText
operator|.
name|extractPhoneNumbers
argument_list|(
name|stringBuilder
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|number
range|:
name|numbers
control|)
block|{
name|metadata
operator|.
name|add
argument_list|(
name|PHONE_NUMBERS
argument_list|,
name|number
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

