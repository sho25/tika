begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|example
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|langdetect
operator|.
name|LanguageDetector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|langdetect
operator|.
name|LanguageHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|langdetect
operator|.
name|LanguageResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|langdetect
operator|.
name|LanguageWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|langdetect
operator|.
name|OptimaizeLangDetector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|metadata
operator|.
name|Metadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|AutoDetectParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|ParseContext
import|;
end_import

begin_class
specifier|public
class|class
name|Language
block|{
specifier|public
specifier|static
name|void
name|languageDetection
parameter_list|()
throws|throws
name|IOException
block|{
name|LanguageDetector
name|detector
init|=
operator|new
name|OptimaizeLangDetector
argument_list|()
operator|.
name|loadModels
argument_list|()
decl_stmt|;
name|LanguageResult
name|result
init|=
name|detector
operator|.
name|detect
argument_list|(
literal|"Alla människor är födda fria och lika i värde och rättigheter."
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|result
operator|.
name|getLanguage
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|languageDetectionWithWriter
parameter_list|()
throws|throws
name|IOException
block|{
comment|// TODO support version of LanguageWriter that doesn't need a detector.
name|LanguageDetector
name|detector
init|=
operator|new
name|OptimaizeLangDetector
argument_list|()
operator|.
name|loadModels
argument_list|()
decl_stmt|;
name|LanguageWriter
name|writer
init|=
operator|new
name|LanguageWriter
argument_list|(
name|detector
argument_list|)
decl_stmt|;
name|writer
operator|.
name|append
argument_list|(
literal|"Minden emberi lény"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|append
argument_list|(
literal|" szabadon születik és"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|append
argument_list|(
literal|" egyenlő méltósága és"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|append
argument_list|(
literal|" joga van."
argument_list|)
expr_stmt|;
name|LanguageResult
name|result
init|=
name|writer
operator|.
name|getLanguage
argument_list|()
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|result
operator|.
name|getLanguage
argument_list|()
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|languageDetectionWithHandler
parameter_list|()
throws|throws
name|Exception
block|{
name|LanguageHandler
name|handler
init|=
operator|new
name|LanguageHandler
argument_list|()
decl_stmt|;
operator|new
name|AutoDetectParser
argument_list|()
operator|.
name|parse
argument_list|(
name|System
operator|.
name|in
argument_list|,
name|handler
argument_list|,
operator|new
name|Metadata
argument_list|()
argument_list|,
operator|new
name|ParseContext
argument_list|()
argument_list|)
expr_stmt|;
name|LanguageResult
name|result
init|=
name|handler
operator|.
name|getLanguage
argument_list|()
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|result
operator|.
name|getLanguage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

