begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|example
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|eval
operator|.
name|textstats
operator|.
name|CommonTokens
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|eval
operator|.
name|textstats
operator|.
name|CompositeTextStatsCalculator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|eval
operator|.
name|textstats
operator|.
name|TextStatsCalculator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|eval
operator|.
name|tokens
operator|.
name|CommonTokenResult
import|;
end_import

begin_comment
comment|/**  * These examples create a new {@link CompositeTextStatsCalculator}  * for each call.  This is extremely inefficient because the lang id  * model has to be loaded and the common words for each call.  *  */
end_comment

begin_class
specifier|public
class|class
name|TextStatsFromTikaEval
block|{
comment|/**      * Use the default language id models and the default common tokens      * lists in tika-eval to calculate the out-of-vocabulary percentage      * for a given string.      *      * @param txt      * @return      */
specifier|public
name|double
name|getOOV
parameter_list|(
name|String
name|txt
parameter_list|)
block|{
name|List
argument_list|<
name|TextStatsCalculator
argument_list|>
name|calculators
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|calculators
operator|.
name|add
argument_list|(
operator|new
name|CommonTokens
argument_list|()
argument_list|)
expr_stmt|;
name|CompositeTextStatsCalculator
name|calc
init|=
operator|new
name|CompositeTextStatsCalculator
argument_list|(
name|calculators
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|Class
argument_list|,
name|Object
argument_list|>
name|results
init|=
name|calc
operator|.
name|calculate
argument_list|(
name|txt
argument_list|)
decl_stmt|;
comment|/*             Note that the OOV requires language id, so you can also             retrieve the detected languages with this:              List<Language> detectedLanguages = (List<Language>) results.get(LanguageIDWrapper.class);           */
name|CommonTokenResult
name|result
init|=
operator|(
name|CommonTokenResult
operator|)
name|results
operator|.
name|get
argument_list|(
name|CommonTokens
operator|.
name|class
argument_list|)
decl_stmt|;
name|result
operator|.
name|getLangCode
argument_list|()
expr_stmt|;
return|return
name|result
operator|.
name|getOOV
argument_list|()
return|;
block|}
block|}
end_class

end_unit

