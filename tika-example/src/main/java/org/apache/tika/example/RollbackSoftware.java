begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|example
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileFilter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|exception
operator|.
name|TikaException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|metadata
operator|.
name|Metadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|mime
operator|.
name|MediaType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|ParseContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|Parser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|sax
operator|.
name|Link
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|sax
operator|.
name|LinkContentHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|sax
operator|.
name|XHTMLContentHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|ContentHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
operator|.
name|UTF_8
import|;
end_import

begin_comment
comment|/**  * Demonstrates Tika and its ability to sense symlinks.  */
end_comment

begin_class
specifier|public
class|class
name|RollbackSoftware
block|{
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
name|RollbackSoftware
name|r
init|=
operator|new
name|RollbackSoftware
argument_list|()
decl_stmt|;
name|r
operator|.
name|rollback
argument_list|(
operator|new
name|File
argument_list|(
name|args
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|rollback
parameter_list|(
name|File
name|deployArea
parameter_list|)
throws|throws
name|IOException
throws|,
name|SAXException
throws|,
name|TikaException
block|{
name|LinkContentHandler
name|handler
init|=
operator|new
name|LinkContentHandler
argument_list|()
decl_stmt|;
name|Metadata
name|met
init|=
operator|new
name|Metadata
argument_list|()
decl_stmt|;
name|DeploymentAreaParser
name|parser
init|=
operator|new
name|DeploymentAreaParser
argument_list|()
decl_stmt|;
name|parser
operator|.
name|parse
argument_list|(
name|IOUtils
operator|.
name|toInputStream
argument_list|(
name|deployArea
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
name|UTF_8
argument_list|)
argument_list|,
name|handler
argument_list|,
name|met
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Link
argument_list|>
name|links
init|=
name|handler
operator|.
name|getLinks
argument_list|()
decl_stmt|;
if|if
condition|(
name|links
operator|.
name|size
argument_list|()
operator|<
literal|2
condition|)
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Must have installed at least 2 versions!"
argument_list|)
throw|;
name|Collections
operator|.
name|sort
argument_list|(
name|links
argument_list|,
operator|new
name|Comparator
argument_list|<
name|Link
argument_list|>
argument_list|()
block|{
specifier|public
name|int
name|compare
parameter_list|(
name|Link
name|o1
parameter_list|,
name|Link
name|o2
parameter_list|)
block|{
return|return
name|o1
operator|.
name|getText
argument_list|()
operator|.
name|compareTo
argument_list|(
name|o2
operator|.
name|getText
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|this
operator|.
name|updateVersion
argument_list|(
name|links
operator|.
name|get
argument_list|(
name|links
operator|.
name|size
argument_list|()
operator|-
literal|2
argument_list|)
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|updateVersion
parameter_list|(
name|String
name|version
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Rolling back to version: ["
operator|+
name|version
operator|+
literal|"]"
argument_list|)
expr_stmt|;
block|}
class|class
name|DeploymentAreaParser
implements|implements
name|Parser
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
operator|-
literal|2356647405087933468L
decl_stmt|;
comment|/* 		 * (non-Javadoc) 		 *  		 * @see org.apache.tika.parser.Parser#getSupportedTypes( 		 * org.apache.tika.parser.ParseContext) 		 */
specifier|public
name|Set
argument_list|<
name|MediaType
argument_list|>
name|getSupportedTypes
parameter_list|(
name|ParseContext
name|context
parameter_list|)
block|{
return|return
name|Collections
operator|.
name|unmodifiableSet
argument_list|(
operator|new
name|HashSet
argument_list|<
name|MediaType
argument_list|>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|MediaType
operator|.
name|TEXT_PLAIN
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
comment|/* 		 * (non-Javadoc) 		 *  		 * @see org.apache.tika.parser.Parser#parse(java.io.InputStream, 		 * org.xml.sax.ContentHandler, org.apache.tika.metadata.Metadata) 		 */
specifier|public
name|void
name|parse
parameter_list|(
name|InputStream
name|is
parameter_list|,
name|ContentHandler
name|handler
parameter_list|,
name|Metadata
name|metadata
parameter_list|)
throws|throws
name|IOException
throws|,
name|SAXException
throws|,
name|TikaException
block|{
name|parse
argument_list|(
name|is
argument_list|,
name|handler
argument_list|,
name|metadata
argument_list|,
operator|new
name|ParseContext
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/* 		 * (non-Javadoc) 		 *  		 * @see org.apache.tika.parser.Parser#parse(java.io.InputStream, 		 * org.xml.sax.ContentHandler, org.apache.tika.metadata.Metadata, 		 * org.apache.tika.parser.ParseContext) 		 */
specifier|public
name|void
name|parse
parameter_list|(
name|InputStream
name|is
parameter_list|,
name|ContentHandler
name|handler
parameter_list|,
name|Metadata
name|metadata
parameter_list|,
name|ParseContext
name|context
parameter_list|)
throws|throws
name|IOException
throws|,
name|SAXException
throws|,
name|TikaException
block|{
name|File
name|deployArea
init|=
operator|new
name|File
argument_list|(
name|IOUtils
operator|.
name|toString
argument_list|(
name|is
argument_list|,
name|UTF_8
argument_list|)
argument_list|)
decl_stmt|;
name|File
index|[]
name|versions
init|=
name|deployArea
operator|.
name|listFiles
argument_list|(
operator|new
name|FileFilter
argument_list|()
block|{
specifier|public
name|boolean
name|accept
parameter_list|(
name|File
name|pathname
parameter_list|)
block|{
return|return
operator|!
name|pathname
operator|.
name|getName
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"current"
argument_list|)
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|XHTMLContentHandler
name|xhtml
init|=
operator|new
name|XHTMLContentHandler
argument_list|(
name|handler
argument_list|,
name|metadata
argument_list|)
decl_stmt|;
name|xhtml
operator|.
name|startDocument
argument_list|()
expr_stmt|;
for|for
control|(
name|File
name|v
range|:
name|versions
control|)
block|{
if|if
condition|(
name|isSymlink
argument_list|(
name|v
argument_list|)
condition|)
continue|continue;
name|xhtml
operator|.
name|startElement
argument_list|(
literal|"a"
argument_list|,
literal|"href"
argument_list|,
name|v
operator|.
name|toURI
argument_list|()
operator|.
name|toURL
argument_list|()
operator|.
name|toExternalForm
argument_list|()
argument_list|)
expr_stmt|;
name|xhtml
operator|.
name|characters
argument_list|(
name|v
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|xhtml
operator|.
name|endElement
argument_list|(
literal|"a"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|boolean
name|isSymlink
parameter_list|(
name|File
name|f
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|!
name|f
operator|.
name|getAbsolutePath
argument_list|()
operator|.
name|equals
argument_list|(
name|f
operator|.
name|getCanonicalPath
argument_list|()
argument_list|)
return|;
block|}
block|}
end_class

end_unit

