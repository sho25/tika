begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|example
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FilenameUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|config
operator|.
name|TikaConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|detect
operator|.
name|Detector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|exception
operator|.
name|TikaException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|extractor
operator|.
name|EmbeddedDocumentExtractor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|extractor
operator|.
name|ParsingEmbeddedDocumentExtractor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|metadata
operator|.
name|Metadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|metadata
operator|.
name|TikaCoreProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|mime
operator|.
name|MediaType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|mime
operator|.
name|MimeTypeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|AutoDetectParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|ParseContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|Parser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|sax
operator|.
name|BodyContentHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|ContentHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_class
specifier|public
class|class
name|ExtractEmbeddedFiles
block|{
specifier|private
name|Parser
name|parser
init|=
operator|new
name|AutoDetectParser
argument_list|()
decl_stmt|;
specifier|private
name|Detector
name|detector
init|=
operator|(
operator|(
name|AutoDetectParser
operator|)
name|parser
operator|)
operator|.
name|getDetector
argument_list|()
decl_stmt|;
specifier|private
name|TikaConfig
name|config
init|=
name|TikaConfig
operator|.
name|getDefaultConfig
argument_list|()
decl_stmt|;
specifier|public
name|void
name|extract
parameter_list|(
name|InputStream
name|is
parameter_list|,
name|Path
name|outputDir
parameter_list|)
throws|throws
name|SAXException
throws|,
name|TikaException
throws|,
name|IOException
block|{
name|Metadata
name|m
init|=
operator|new
name|Metadata
argument_list|()
decl_stmt|;
name|ParseContext
name|c
init|=
operator|new
name|ParseContext
argument_list|()
decl_stmt|;
name|ContentHandler
name|h
init|=
operator|new
name|BodyContentHandler
argument_list|(
operator|-
literal|1
argument_list|)
decl_stmt|;
name|c
operator|.
name|set
argument_list|(
name|Parser
operator|.
name|class
argument_list|,
name|parser
argument_list|)
expr_stmt|;
name|EmbeddedDocumentExtractor
name|ex
init|=
operator|new
name|MyEmbeddedDocumentExtractor
argument_list|(
name|outputDir
argument_list|,
name|c
argument_list|)
decl_stmt|;
name|c
operator|.
name|set
argument_list|(
name|EmbeddedDocumentExtractor
operator|.
name|class
argument_list|,
name|ex
argument_list|)
expr_stmt|;
name|parser
operator|.
name|parse
argument_list|(
name|is
argument_list|,
name|h
argument_list|,
name|m
argument_list|,
name|c
argument_list|)
expr_stmt|;
block|}
specifier|private
class|class
name|MyEmbeddedDocumentExtractor
extends|extends
name|ParsingEmbeddedDocumentExtractor
block|{
specifier|private
specifier|final
name|Path
name|outputDir
decl_stmt|;
specifier|private
name|int
name|fileCount
init|=
literal|0
decl_stmt|;
specifier|private
name|MyEmbeddedDocumentExtractor
parameter_list|(
name|Path
name|outputDir
parameter_list|,
name|ParseContext
name|context
parameter_list|)
block|{
name|super
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|this
operator|.
name|outputDir
operator|=
name|outputDir
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|shouldParseEmbedded
parameter_list|(
name|Metadata
name|metadata
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|parseEmbedded
parameter_list|(
name|InputStream
name|stream
parameter_list|,
name|ContentHandler
name|handler
parameter_list|,
name|Metadata
name|metadata
parameter_list|,
name|boolean
name|outputHtml
parameter_list|)
throws|throws
name|SAXException
throws|,
name|IOException
block|{
comment|//try to get the name of the embedded file from the metadata
name|String
name|name
init|=
name|metadata
operator|.
name|get
argument_list|(
name|TikaCoreProperties
operator|.
name|RESOURCE_NAME_KEY
argument_list|)
decl_stmt|;
if|if
condition|(
name|name
operator|==
literal|null
condition|)
block|{
name|name
operator|=
literal|"file_"
operator|+
name|fileCount
operator|++
expr_stmt|;
block|}
else|else
block|{
comment|//make sure to select only the file name (not any directory paths
comment|//that might be included in the name) and make sure
comment|//to normalize the name
name|name
operator|=
name|name
operator|.
name|replaceAll
argument_list|(
literal|"\u0000"
argument_list|,
literal|" "
argument_list|)
expr_stmt|;
name|int
name|prefix
init|=
name|FilenameUtils
operator|.
name|getPrefixLength
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|prefix
operator|>
operator|-
literal|1
condition|)
block|{
name|name
operator|=
name|name
operator|.
name|substring
argument_list|(
name|prefix
argument_list|)
expr_stmt|;
block|}
name|name
operator|=
name|FilenameUtils
operator|.
name|normalize
argument_list|(
name|FilenameUtils
operator|.
name|getName
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|//now try to figure out the right extension for the embedded file
name|MediaType
name|contentType
init|=
name|detector
operator|.
name|detect
argument_list|(
name|stream
argument_list|,
name|metadata
argument_list|)
decl_stmt|;
if|if
condition|(
name|name
operator|.
name|indexOf
argument_list|(
literal|'.'
argument_list|)
operator|==
operator|-
literal|1
operator|&&
name|contentType
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|name
operator|+=
name|config
operator|.
name|getMimeRepository
argument_list|()
operator|.
name|forName
argument_list|(
name|contentType
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|getExtension
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MimeTypeException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
name|Path
name|outputFile
init|=
name|outputDir
operator|.
name|resolve
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|Files
operator|.
name|exists
argument_list|(
name|outputFile
argument_list|)
condition|)
block|{
name|outputFile
operator|=
name|outputDir
operator|.
name|resolve
argument_list|(
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
literal|"-"
operator|+
name|name
argument_list|)
expr_stmt|;
block|}
name|Files
operator|.
name|createDirectories
argument_list|(
name|outputFile
operator|.
name|getParent
argument_list|()
argument_list|)
expr_stmt|;
name|Files
operator|.
name|copy
argument_list|(
name|stream
argument_list|,
name|outputFile
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

