begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|example
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|exception
operator|.
name|TikaException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|metadata
operator|.
name|Metadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|AutoDetectParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|sax
operator|.
name|BodyContentHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|sax
operator|.
name|ContentHandlerDecorator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|sax
operator|.
name|ToXMLContentHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|sax
operator|.
name|XHTMLContentHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|sax
operator|.
name|xpath
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|sax
operator|.
name|xpath
operator|.
name|MatchingContentHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|sax
operator|.
name|xpath
operator|.
name|XPathParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|ContentHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_comment
comment|/**  * Examples of using different Content Handlers to  *  get different parts of the file's contents   */
end_comment

begin_class
specifier|public
class|class
name|ContentHandlerExample
block|{
comment|/**      * Example of extracting the plain text of the contents.      * Will return only the "body" part of the document      */
specifier|public
name|String
name|parseToPlainText
parameter_list|()
throws|throws
name|IOException
throws|,
name|SAXException
throws|,
name|TikaException
block|{
name|BodyContentHandler
name|handler
init|=
operator|new
name|BodyContentHandler
argument_list|()
decl_stmt|;
name|AutoDetectParser
name|parser
init|=
operator|new
name|AutoDetectParser
argument_list|()
decl_stmt|;
name|Metadata
name|metadata
init|=
operator|new
name|Metadata
argument_list|()
decl_stmt|;
try|try
init|(
name|InputStream
name|stream
init|=
name|ContentHandlerExample
operator|.
name|class
operator|.
name|getResourceAsStream
argument_list|(
literal|"test.doc"
argument_list|)
init|)
block|{
name|parser
operator|.
name|parse
argument_list|(
name|stream
argument_list|,
name|handler
argument_list|,
name|metadata
argument_list|)
expr_stmt|;
return|return
name|handler
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
comment|/**      * Example of extracting the contents as HTML, as a string.      */
specifier|public
name|String
name|parseToHTML
parameter_list|()
throws|throws
name|IOException
throws|,
name|SAXException
throws|,
name|TikaException
block|{
name|ContentHandler
name|handler
init|=
operator|new
name|ToXMLContentHandler
argument_list|()
decl_stmt|;
name|AutoDetectParser
name|parser
init|=
operator|new
name|AutoDetectParser
argument_list|()
decl_stmt|;
name|Metadata
name|metadata
init|=
operator|new
name|Metadata
argument_list|()
decl_stmt|;
try|try
init|(
name|InputStream
name|stream
init|=
name|ContentHandlerExample
operator|.
name|class
operator|.
name|getResourceAsStream
argument_list|(
literal|"test.doc"
argument_list|)
init|)
block|{
name|parser
operator|.
name|parse
argument_list|(
name|stream
argument_list|,
name|handler
argument_list|,
name|metadata
argument_list|)
expr_stmt|;
return|return
name|handler
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
comment|/**      * Example of extracting just the body as HTML, without the      *  head part, as a string      */
specifier|public
name|String
name|parseBodyToHTML
parameter_list|()
throws|throws
name|IOException
throws|,
name|SAXException
throws|,
name|TikaException
block|{
name|ContentHandler
name|handler
init|=
operator|new
name|BodyContentHandler
argument_list|(
operator|new
name|ToXMLContentHandler
argument_list|()
argument_list|)
decl_stmt|;
name|AutoDetectParser
name|parser
init|=
operator|new
name|AutoDetectParser
argument_list|()
decl_stmt|;
name|Metadata
name|metadata
init|=
operator|new
name|Metadata
argument_list|()
decl_stmt|;
try|try
init|(
name|InputStream
name|stream
init|=
name|ContentHandlerExample
operator|.
name|class
operator|.
name|getResourceAsStream
argument_list|(
literal|"test.doc"
argument_list|)
init|)
block|{
name|parser
operator|.
name|parse
argument_list|(
name|stream
argument_list|,
name|handler
argument_list|,
name|metadata
argument_list|)
expr_stmt|;
return|return
name|handler
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
comment|/**      * Example of extracting just one part of the document's body,      *  as HTML as a string, excluding the rest      */
specifier|public
name|String
name|parseOnePartToHTML
parameter_list|()
throws|throws
name|IOException
throws|,
name|SAXException
throws|,
name|TikaException
block|{
comment|// Only get things under html -> body -> div (class=header)
name|XPathParser
name|xhtmlParser
init|=
operator|new
name|XPathParser
argument_list|(
literal|"xhtml"
argument_list|,
name|XHTMLContentHandler
operator|.
name|XHTML
argument_list|)
decl_stmt|;
name|Matcher
name|divContentMatcher
init|=
name|xhtmlParser
operator|.
name|parse
argument_list|(
literal|"/xhtml:html/xhtml:body/xhtml:div/descendant::node()"
argument_list|)
decl_stmt|;
name|ContentHandler
name|handler
init|=
operator|new
name|MatchingContentHandler
argument_list|(
operator|new
name|ToXMLContentHandler
argument_list|()
argument_list|,
name|divContentMatcher
argument_list|)
decl_stmt|;
name|AutoDetectParser
name|parser
init|=
operator|new
name|AutoDetectParser
argument_list|()
decl_stmt|;
name|Metadata
name|metadata
init|=
operator|new
name|Metadata
argument_list|()
decl_stmt|;
try|try
init|(
name|InputStream
name|stream
init|=
name|ContentHandlerExample
operator|.
name|class
operator|.
name|getResourceAsStream
argument_list|(
literal|"test2.doc"
argument_list|)
init|)
block|{
name|parser
operator|.
name|parse
argument_list|(
name|stream
argument_list|,
name|handler
argument_list|,
name|metadata
argument_list|)
expr_stmt|;
return|return
name|handler
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
specifier|protected
specifier|final
name|int
name|MAXIMUM_TEXT_CHUNK_SIZE
init|=
literal|40
decl_stmt|;
comment|/**      * Example of extracting the plain text in chunks, with each chunk      *  of no more than a certain maximum size      */
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|parseToPlainTextChunks
parameter_list|()
throws|throws
name|IOException
throws|,
name|SAXException
throws|,
name|TikaException
block|{
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|chunks
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|chunks
operator|.
name|add
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|ContentHandlerDecorator
name|handler
init|=
operator|new
name|ContentHandlerDecorator
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|characters
parameter_list|(
name|char
index|[]
name|ch
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|length
parameter_list|)
block|{
name|String
name|lastChunk
init|=
name|chunks
operator|.
name|get
argument_list|(
name|chunks
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
decl_stmt|;
name|String
name|thisStr
init|=
operator|new
name|String
argument_list|(
name|ch
argument_list|,
name|start
argument_list|,
name|length
argument_list|)
decl_stmt|;
if|if
condition|(
name|lastChunk
operator|.
name|length
argument_list|()
operator|+
name|length
operator|>
name|MAXIMUM_TEXT_CHUNK_SIZE
condition|)
block|{
name|chunks
operator|.
name|add
argument_list|(
name|thisStr
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|chunks
operator|.
name|set
argument_list|(
name|chunks
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|,
name|lastChunk
operator|+
name|thisStr
argument_list|)
expr_stmt|;
block|}
block|}
block|}
decl_stmt|;
name|AutoDetectParser
name|parser
init|=
operator|new
name|AutoDetectParser
argument_list|()
decl_stmt|;
name|Metadata
name|metadata
init|=
operator|new
name|Metadata
argument_list|()
decl_stmt|;
try|try
init|(
name|InputStream
name|stream
init|=
name|ContentHandlerExample
operator|.
name|class
operator|.
name|getResourceAsStream
argument_list|(
literal|"test2.doc"
argument_list|)
init|)
block|{
name|parser
operator|.
name|parse
argument_list|(
name|stream
argument_list|,
name|handler
argument_list|,
name|metadata
argument_list|)
expr_stmt|;
return|return
name|chunks
return|;
block|}
block|}
block|}
end_class

end_unit

