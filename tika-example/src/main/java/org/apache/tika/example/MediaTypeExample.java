begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|example
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|mime
operator|.
name|MediaType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|mime
operator|.
name|MediaTypeRegistry
import|;
end_import

begin_class
specifier|public
class|class
name|MediaTypeExample
block|{
specifier|public
specifier|static
name|void
name|describeMediaType
parameter_list|()
block|{
name|MediaType
name|type
init|=
name|MediaType
operator|.
name|parse
argument_list|(
literal|"text/plain; charset=UTF-8"
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"type:    "
operator|+
name|type
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"subtype: "
operator|+
name|type
operator|.
name|getSubtype
argument_list|()
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|parameters
init|=
name|type
operator|.
name|getParameters
argument_list|()
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"parameters:"
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|name
range|:
name|parameters
operator|.
name|keySet
argument_list|()
control|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  "
operator|+
name|name
operator|+
literal|"="
operator|+
name|parameters
operator|.
name|get
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
name|void
name|listAllTypes
parameter_list|()
block|{
name|MediaTypeRegistry
name|registry
init|=
name|MediaTypeRegistry
operator|.
name|getDefaultRegistry
argument_list|()
decl_stmt|;
for|for
control|(
name|MediaType
name|type
range|:
name|registry
operator|.
name|getTypes
argument_list|()
control|)
block|{
name|Set
argument_list|<
name|MediaType
argument_list|>
name|aliases
init|=
name|registry
operator|.
name|getAliases
argument_list|(
name|type
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|type
operator|+
literal|", also known as "
operator|+
name|aliases
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
name|MediaTypeRegistry
name|registry
init|=
name|MediaTypeRegistry
operator|.
name|getDefaultRegistry
argument_list|()
decl_stmt|;
name|MediaType
name|type
init|=
name|MediaType
operator|.
name|parse
argument_list|(
literal|"image/svg+xml"
argument_list|)
decl_stmt|;
while|while
condition|(
name|type
operator|!=
literal|null
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|type
argument_list|)
expr_stmt|;
name|type
operator|=
name|registry
operator|.
name|getSupertype
argument_list|(
name|type
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

