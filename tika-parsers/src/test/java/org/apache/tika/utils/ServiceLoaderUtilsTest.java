begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|utils
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|TikaTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|DefaultParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|Parser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|ServiceLoaderUtilsTest
extends|extends
name|TikaTest
block|{
annotation|@
name|Test
specifier|public
name|void
name|testOrdering
parameter_list|()
throws|throws
name|Exception
block|{
comment|//make sure that non Tika parsers come last
comment|//which means that they'll overwrite Tika parsers and
comment|//be preferred.
name|DefaultParser
name|defaultParser
init|=
operator|new
name|DefaultParser
argument_list|()
decl_stmt|;
name|int
name|vorbisIndex
init|=
operator|-
literal|1
decl_stmt|;
name|int
name|fictIndex
init|=
operator|-
literal|1
decl_stmt|;
name|int
name|dcxmlIndex
init|=
operator|-
literal|1
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Parser
name|p
range|:
name|defaultParser
operator|.
name|getAllComponentParsers
argument_list|()
control|)
block|{
if|if
condition|(
literal|"class org.gagravarr.tika.VorbisParser"
operator|.
name|equals
argument_list|(
name|p
operator|.
name|getClass
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
block|{
name|vorbisIndex
operator|=
name|i
expr_stmt|;
block|}
if|if
condition|(
literal|"class org.apache.tika.parser.xml.FictionBookParser"
operator|.
name|equals
argument_list|(
name|p
operator|.
name|getClass
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
block|{
name|fictIndex
operator|=
name|i
expr_stmt|;
block|}
if|if
condition|(
literal|"class org.apache.tika.parser.xml.DcXMLParser"
operator|.
name|equals
argument_list|(
name|p
operator|.
name|getClass
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
block|{
name|dcxmlIndex
operator|=
name|i
expr_stmt|;
block|}
name|i
operator|++
expr_stmt|;
block|}
name|assertNotEquals
argument_list|(
name|vorbisIndex
argument_list|,
name|fictIndex
argument_list|)
expr_stmt|;
name|assertNotEquals
argument_list|(
name|fictIndex
argument_list|,
name|dcxmlIndex
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|vorbisIndex
operator|>
name|fictIndex
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fictIndex
operator|>
name|dcxmlIndex
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

