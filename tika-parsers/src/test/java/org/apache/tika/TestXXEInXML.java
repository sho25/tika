begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|openxml4j
operator|.
name|exceptions
operator|.
name|InvalidFormatException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|config
operator|.
name|TikaConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|exception
operator|.
name|TikaException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|metadata
operator|.
name|Metadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|ParseContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|Parser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|microsoft
operator|.
name|OfficeParserConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|sax
operator|.
name|ToHTMLContentHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|utils
operator|.
name|XMLReaderUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Ignore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|ContentHandler
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|SAXParser
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|SAXParserFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_comment
comment|/**  * This tests for XXE in basically xml type files, straight xml and zipped xmls, e.g. ebook and ooxml.  * It does not test for XXE prevention in files that may contain xml  * files, such as PDFs and other XMP-containing files.  */
end_comment

begin_class
specifier|public
class|class
name|TestXXEInXML
extends|extends
name|XMLTestBase
block|{
comment|//TODO: figure out how to test XFA and xmp in PDFs
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|XXE
init|=
literal|"<!DOCTYPE roottag PUBLIC \"-//OXML/XXE/EN\" \"file:///couldnt_possibly_exist\">"
operator|.
name|getBytes
argument_list|(
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
decl_stmt|;
annotation|@
name|Test
annotation|@
name|Ignore
argument_list|(
literal|"ignore vulnerable tests"
argument_list|)
specifier|public
name|void
name|testConfirmVulnerable
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|parse
argument_list|(
literal|"testXXE.xml"
argument_list|,
name|getResourceAsStream
argument_list|(
literal|"/test-documents/testXXE.xml"
argument_list|)
argument_list|,
operator|new
name|VulnerableSAXParser
argument_list|()
argument_list|,
operator|new
name|ParseContext
argument_list|()
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"should have failed!!!"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|e
parameter_list|)
block|{          }
block|}
annotation|@
name|Test
specifier|public
name|void
name|testXML
parameter_list|()
throws|throws
name|Exception
block|{
name|parse
argument_list|(
literal|"testXXE.xml"
argument_list|,
name|getResourceAsStream
argument_list|(
literal|"/test-documents/testXXE.xml"
argument_list|)
argument_list|,
name|AUTO_DETECT_PARSER
argument_list|,
operator|new
name|ParseContext
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testInjectedXML
parameter_list|()
throws|throws
name|Exception
block|{
name|byte
index|[]
name|bytes
init|=
literal|"<?xml version=\"1.0\" encoding=\"UTF-8\"?><document>blah</document>"
operator|.
name|getBytes
argument_list|(
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
decl_stmt|;
name|byte
index|[]
name|injected
init|=
name|injectXML
argument_list|(
name|bytes
argument_list|,
name|XXE
argument_list|)
decl_stmt|;
try|try
block|{
name|parse
argument_list|(
literal|"injected"
argument_list|,
operator|new
name|ByteArrayInputStream
argument_list|(
name|injected
argument_list|)
argument_list|,
operator|new
name|VulnerableSAXParser
argument_list|()
argument_list|,
operator|new
name|ParseContext
argument_list|()
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"injected should have triggered xxe"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|e
parameter_list|)
block|{          }
block|}
annotation|@
name|Test
specifier|public
name|void
name|test2003_2006xml
parameter_list|()
throws|throws
name|Exception
block|{
name|InputStream
name|is
init|=
name|getResourceAsStream
argument_list|(
literal|"/test-documents/testWORD_2003ml.xml"
argument_list|)
decl_stmt|;
name|ByteArrayOutputStream
name|bos
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|IOUtils
operator|.
name|copy
argument_list|(
name|is
argument_list|,
name|bos
argument_list|)
expr_stmt|;
name|byte
index|[]
name|injected
init|=
name|injectXML
argument_list|(
name|bos
operator|.
name|toByteArray
argument_list|()
argument_list|,
name|XXE
argument_list|)
decl_stmt|;
name|parse
argument_list|(
literal|"testWORD_2003ml.xml"
argument_list|,
operator|new
name|ByteArrayInputStream
argument_list|(
name|injected
argument_list|)
argument_list|,
name|AUTO_DETECT_PARSER
argument_list|,
operator|new
name|ParseContext
argument_list|()
argument_list|)
expr_stmt|;
name|is
operator|.
name|close
argument_list|()
expr_stmt|;
name|is
operator|=
name|getResourceAsStream
argument_list|(
literal|"/test-documents/testWORD_2006ml.xml"
argument_list|)
expr_stmt|;
name|bos
operator|=
operator|new
name|ByteArrayOutputStream
argument_list|()
expr_stmt|;
name|IOUtils
operator|.
name|copy
argument_list|(
name|is
argument_list|,
name|bos
argument_list|)
expr_stmt|;
name|injected
operator|=
name|injectXML
argument_list|(
name|bos
operator|.
name|toByteArray
argument_list|()
argument_list|,
name|XXE
argument_list|)
expr_stmt|;
name|parse
argument_list|(
literal|"testWORD_2006ml.xml"
argument_list|,
operator|new
name|ByteArrayInputStream
argument_list|(
name|injected
argument_list|)
argument_list|,
name|AUTO_DETECT_PARSER
argument_list|,
operator|new
name|ParseContext
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPOIOOXMLs
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|String
name|fileName
range|:
operator|new
name|String
index|[]
block|{
literal|"testWORD.docx"
block|,
literal|"testWORD_1img.docx"
block|,
literal|"testWORD_2006ml.docx"
block|,
literal|"testWORD_embedded_pics.docx"
block|,
literal|"testWORD_macros.docm"
block|,
literal|"testEXCEL_textbox.xlsx"
block|,
literal|"testEXCEL_macro.xlsm"
block|,
literal|"testEXCEL_phonetic.xlsx"
block|,
literal|"testEXCEL_embeddedPDF_windows.xlsx"
block|,
literal|"testPPT_2imgs.pptx"
block|,
literal|"testPPT_comment.pptx"
block|,
literal|"testPPT_EmbeddedPDF.pptx"
block|,
literal|"testPPT_macros.pptm"
block|}
control|)
block|{
name|_testPOIOOXMLs
argument_list|(
name|fileName
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|_testPOIOOXMLs
parameter_list|(
name|String
name|fileName
parameter_list|)
throws|throws
name|Exception
block|{
name|Path
name|originalOOXML
init|=
name|getResourceAsFile
argument_list|(
literal|"/test-documents/"
operator|+
name|fileName
argument_list|)
operator|.
name|toPath
argument_list|()
decl_stmt|;
name|Path
name|injected
init|=
name|injectZippedXMLs
argument_list|(
name|originalOOXML
argument_list|,
name|XXE
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|ContentHandler
name|xhtml
init|=
operator|new
name|ToHTMLContentHandler
argument_list|()
decl_stmt|;
name|ParseContext
name|parseContext
init|=
operator|new
name|ParseContext
argument_list|()
decl_stmt|;
comment|//if the SafeContentHandler is turned off, this will throw an FNFE
name|Metadata
name|metadata
init|=
operator|new
name|Metadata
argument_list|()
decl_stmt|;
try|try
block|{
name|AUTO_DETECT_PARSER
operator|.
name|parse
argument_list|(
name|Files
operator|.
name|newInputStream
argument_list|(
name|injected
argument_list|)
argument_list|,
name|xhtml
argument_list|,
name|metadata
argument_list|,
name|parseContext
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TikaException
name|e
parameter_list|)
block|{
name|Throwable
name|cause
init|=
name|e
operator|.
name|getCause
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|cause
operator|instanceof
name|InvalidFormatException
operator|)
condition|)
block|{
comment|//as of POI 4.1.x
name|fail
argument_list|(
literal|"POI should have thrown an IFE complaining about "
operator|+
literal|"not being able to read content types part !"
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|Files
operator|.
name|delete
argument_list|(
name|injected
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|metadata
operator|=
operator|new
name|Metadata
argument_list|()
expr_stmt|;
name|xhtml
operator|=
operator|new
name|ToHTMLContentHandler
argument_list|()
expr_stmt|;
name|OfficeParserConfig
name|officeParserConfig
init|=
operator|new
name|OfficeParserConfig
argument_list|()
decl_stmt|;
name|parseContext
operator|.
name|set
argument_list|(
name|OfficeParserConfig
operator|.
name|class
argument_list|,
name|officeParserConfig
argument_list|)
expr_stmt|;
name|officeParserConfig
operator|.
name|setUseSAXDocxExtractor
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|officeParserConfig
operator|.
name|setUseSAXPptxExtractor
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|injected
operator|=
name|injectZippedXMLs
argument_list|(
name|originalOOXML
argument_list|,
name|XXE
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|AUTO_DETECT_PARSER
operator|.
name|parse
argument_list|(
name|Files
operator|.
name|newInputStream
argument_list|(
name|injected
argument_list|)
argument_list|,
name|xhtml
argument_list|,
name|metadata
argument_list|,
name|parseContext
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"problem with SAX-based: "
operator|+
name|fileName
operator|+
literal|": "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|Files
operator|.
name|delete
argument_list|(
name|injected
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testXMLInZips
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|String
name|fileName
range|:
operator|new
name|String
index|[]
block|{
literal|"testEPUB.epub"
block|}
control|)
block|{
name|_testXMLInZips
argument_list|(
name|fileName
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|_testXMLInZips
parameter_list|(
name|String
name|fileName
parameter_list|)
throws|throws
name|Exception
block|{
name|Path
name|originalOOXML
init|=
name|getResourceAsFile
argument_list|(
literal|"/test-documents/"
operator|+
name|fileName
argument_list|)
operator|.
name|toPath
argument_list|()
decl_stmt|;
name|Path
name|injected
init|=
name|injectZippedXMLs
argument_list|(
name|originalOOXML
argument_list|,
name|XXE
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|Parser
name|p
init|=
name|AUTO_DETECT_PARSER
decl_stmt|;
name|ContentHandler
name|xhtml
init|=
operator|new
name|ToHTMLContentHandler
argument_list|()
decl_stmt|;
name|ParseContext
name|parseContext
init|=
operator|new
name|ParseContext
argument_list|()
decl_stmt|;
comment|//if the SafeContentHandler is turned off, this will throw an FNFE
name|Metadata
name|metadata
init|=
operator|new
name|Metadata
argument_list|()
decl_stmt|;
try|try
block|{
name|p
operator|.
name|parse
argument_list|(
name|Files
operator|.
name|newInputStream
argument_list|(
name|injected
argument_list|)
argument_list|,
name|xhtml
argument_list|,
name|metadata
argument_list|,
name|parseContext
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|Files
operator|.
name|delete
argument_list|(
name|injected
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDOM
parameter_list|()
throws|throws
name|Exception
block|{
name|byte
index|[]
name|bytes
init|=
literal|"<?xml version=\"1.0\" encoding=\"UTF-8\"?><document>blah</document>"
operator|.
name|getBytes
argument_list|(
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
decl_stmt|;
name|byte
index|[]
name|injected
init|=
name|injectXML
argument_list|(
name|bytes
argument_list|,
name|XXE
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|XMLReaderUtils
operator|.
name|getPoolSize
argument_list|()
operator|*
literal|2
condition|;
name|i
operator|++
control|)
block|{
comment|//this shouldn't throw an exception
name|XMLReaderUtils
operator|.
name|buildDOM
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|injected
argument_list|)
argument_list|,
operator|new
name|ParseContext
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|//use this to confirm that this works
comment|//by manually turning off the SafeContentHandler in SXWPFWordExtractorDecorator's
comment|//handlePart
specifier|public
name|void
name|testDocxWithIncorrectSAXConfiguration
parameter_list|()
throws|throws
name|Exception
block|{
name|Path
name|originalDocx
init|=
name|getResourceAsFile
argument_list|(
literal|"/test-documents/testWORD_macros.docm"
argument_list|)
operator|.
name|toPath
argument_list|()
decl_stmt|;
name|Path
name|injected
init|=
name|injectZippedXMLs
argument_list|(
name|originalDocx
argument_list|,
name|XXE
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|ContentHandler
name|xhtml
init|=
operator|new
name|ToHTMLContentHandler
argument_list|()
decl_stmt|;
name|ParseContext
name|parseContext
init|=
operator|new
name|ParseContext
argument_list|()
decl_stmt|;
name|OfficeParserConfig
name|officeParserConfig
init|=
operator|new
name|OfficeParserConfig
argument_list|()
decl_stmt|;
name|officeParserConfig
operator|.
name|setUseSAXDocxExtractor
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|parseContext
operator|.
name|set
argument_list|(
name|OfficeParserConfig
operator|.
name|class
argument_list|,
name|officeParserConfig
argument_list|)
expr_stmt|;
name|parseContext
operator|.
name|set
argument_list|(
name|SAXParser
operator|.
name|class
argument_list|,
name|SAXParserFactory
operator|.
name|newInstance
argument_list|()
operator|.
name|newSAXParser
argument_list|()
argument_list|)
expr_stmt|;
comment|//if the SafeContentHandler is turned off, this will throw an FNFE
try|try
block|{
name|AUTO_DETECT_PARSER
operator|.
name|parse
argument_list|(
name|Files
operator|.
name|newInputStream
argument_list|(
name|injected
argument_list|)
argument_list|,
name|xhtml
argument_list|,
operator|new
name|Metadata
argument_list|()
argument_list|,
name|parseContext
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
comment|//Files.delete(injected);
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDOMTikaConfig
parameter_list|()
throws|throws
name|Exception
block|{
comment|//tests the DOM reader in TikaConfig
comment|//if the safeguards aren't in place, this throws a FNFE
try|try
init|(
name|InputStream
name|is
init|=
name|getResourceAsStream
argument_list|(
literal|"/org/apache/tika/config/TIKA-1558-blacklist.xml"
argument_list|)
init|)
block|{
name|ByteArrayOutputStream
name|bos
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|IOUtils
operator|.
name|copy
argument_list|(
name|is
argument_list|,
name|bos
argument_list|)
expr_stmt|;
name|byte
index|[]
name|injected
init|=
name|injectXML
argument_list|(
name|bos
operator|.
name|toByteArray
argument_list|()
argument_list|,
name|XXE
argument_list|)
decl_stmt|;
name|TikaConfig
name|tikaConfig
init|=
operator|new
name|TikaConfig
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|injected
argument_list|)
argument_list|)
decl_stmt|;
block|}
block|}
block|}
end_class

end_unit

