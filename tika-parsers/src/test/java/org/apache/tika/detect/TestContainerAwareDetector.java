begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|detect
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|openxml4j
operator|.
name|opc
operator|.
name|OPCPackage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|poifs
operator|.
name|filesystem
operator|.
name|POIFSFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|config
operator|.
name|TikaConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|io
operator|.
name|TikaInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|metadata
operator|.
name|Metadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|mime
operator|.
name|MediaType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|mime
operator|.
name|MimeTypes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|mime
operator|.
name|MimeTypesFactory
import|;
end_import

begin_comment
comment|/**  * Junit test class for {@link ContainerAwareDetector}  */
end_comment

begin_class
specifier|public
class|class
name|TestContainerAwareDetector
extends|extends
name|TestCase
block|{
specifier|private
name|TikaConfig
name|tc
decl_stmt|;
specifier|private
name|ContainerAwareDetector
name|d
decl_stmt|;
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|tc
operator|=
name|TikaConfig
operator|.
name|getDefaultConfig
argument_list|()
expr_stmt|;
name|d
operator|=
operator|new
name|ContainerAwareDetector
argument_list|(
name|tc
operator|.
name|getMimeRepository
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|InputStream
name|getTestDoc
parameter_list|(
name|String
name|filename
parameter_list|)
block|{
name|InputStream
name|input
init|=
name|TestContainerAwareDetector
operator|.
name|class
operator|.
name|getResourceAsStream
argument_list|(
literal|"/test-documents/"
operator|+
name|filename
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Test file not found - "
operator|+
name|filename
argument_list|,
name|input
argument_list|)
expr_stmt|;
return|return
name|input
return|;
block|}
specifier|public
name|void
name|testDetectOLE2
parameter_list|()
throws|throws
name|Exception
block|{
name|InputStream
name|input
decl_stmt|;
name|input
operator|=
name|getTestDoc
argument_list|(
literal|"testEXCEL.xls"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|MediaType
operator|.
name|application
argument_list|(
literal|"vnd.ms-excel"
argument_list|)
argument_list|,
name|d
operator|.
name|detect
argument_list|(
name|input
argument_list|,
operator|new
name|Metadata
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|input
operator|=
name|getTestDoc
argument_list|(
literal|"testWORD.doc"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|MediaType
operator|.
name|application
argument_list|(
literal|"msword"
argument_list|)
argument_list|,
name|d
operator|.
name|detect
argument_list|(
name|input
argument_list|,
operator|new
name|Metadata
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|input
operator|=
name|getTestDoc
argument_list|(
literal|"testPPT.ppt"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|MediaType
operator|.
name|application
argument_list|(
literal|"vnd.ms-powerpoint"
argument_list|)
argument_list|,
name|d
operator|.
name|detect
argument_list|(
name|input
argument_list|,
operator|new
name|Metadata
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|TikaInputStream
name|tis
init|=
name|TikaInputStream
operator|.
name|get
argument_list|(
name|getTestDoc
argument_list|(
literal|"testPPT.ppt"
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|MediaType
operator|.
name|application
argument_list|(
literal|"vnd.ms-powerpoint"
argument_list|)
argument_list|,
name|d
operator|.
name|detect
argument_list|(
name|tis
argument_list|,
operator|new
name|Metadata
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|tis
operator|.
name|getOpenContainer
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|POIFSFileSystem
operator|.
name|class
argument_list|,
name|tis
operator|.
name|getOpenContainer
argument_list|()
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testDetectODF
parameter_list|()
throws|throws
name|Exception
block|{
name|InputStream
name|input
decl_stmt|;
name|input
operator|=
name|getTestDoc
argument_list|(
literal|"testODFwithOOo3.odt"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|MediaType
operator|.
name|application
argument_list|(
literal|"vnd.oasis.opendocument.text"
argument_list|)
argument_list|,
name|d
operator|.
name|detect
argument_list|(
name|input
argument_list|,
operator|new
name|Metadata
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|input
operator|=
name|getTestDoc
argument_list|(
literal|"testOpenOffice2.odf"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|MediaType
operator|.
name|application
argument_list|(
literal|"vnd.oasis.opendocument.formula"
argument_list|)
argument_list|,
name|d
operator|.
name|detect
argument_list|(
name|input
argument_list|,
operator|new
name|Metadata
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|TikaInputStream
name|tis
init|=
name|TikaInputStream
operator|.
name|get
argument_list|(
name|getTestDoc
argument_list|(
literal|"testOpenOffice2.odf"
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|MediaType
operator|.
name|application
argument_list|(
literal|"vnd.oasis.opendocument.formula"
argument_list|)
argument_list|,
name|d
operator|.
name|detect
argument_list|(
name|tis
argument_list|,
operator|new
name|Metadata
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// Doesn't store the zip parser yet
name|assertNull
argument_list|(
name|tis
operator|.
name|getOpenContainer
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testDetectOOXML
parameter_list|()
throws|throws
name|Exception
block|{
name|InputStream
name|input
decl_stmt|;
name|input
operator|=
name|getTestDoc
argument_list|(
literal|"testEXCEL.xlsx"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|MediaType
operator|.
name|application
argument_list|(
literal|"vnd.openxmlformats-officedocument.spreadsheetml.sheet"
argument_list|)
argument_list|,
name|d
operator|.
name|detect
argument_list|(
name|input
argument_list|,
operator|new
name|Metadata
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|input
operator|=
name|getTestDoc
argument_list|(
literal|"testWORD.docx"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|MediaType
operator|.
name|application
argument_list|(
literal|"vnd.openxmlformats-officedocument.wordprocessingml.document"
argument_list|)
argument_list|,
name|d
operator|.
name|detect
argument_list|(
name|input
argument_list|,
operator|new
name|Metadata
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|input
operator|=
name|getTestDoc
argument_list|(
literal|"testPPT.pptx"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|MediaType
operator|.
name|application
argument_list|(
literal|"vnd.openxmlformats-officedocument.presentationml.presentation"
argument_list|)
argument_list|,
name|d
operator|.
name|detect
argument_list|(
name|input
argument_list|,
operator|new
name|Metadata
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|TikaInputStream
name|tis
init|=
name|TikaInputStream
operator|.
name|get
argument_list|(
name|getTestDoc
argument_list|(
literal|"testPPT.pptx"
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|MediaType
operator|.
name|application
argument_list|(
literal|"vnd.openxmlformats-officedocument.presentationml.presentation"
argument_list|)
argument_list|,
name|d
operator|.
name|detect
argument_list|(
name|tis
argument_list|,
operator|new
name|Metadata
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|tis
operator|.
name|getOpenContainer
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Open container should be OPCPackage, not "
operator|+
name|tis
operator|.
name|getOpenContainer
argument_list|()
operator|.
name|getClass
argument_list|()
argument_list|,
name|tis
operator|.
name|getOpenContainer
argument_list|()
operator|instanceof
name|OPCPackage
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testDetectIWork
parameter_list|()
throws|throws
name|Exception
block|{
comment|// TODO
block|}
specifier|public
name|void
name|testDetectZip
parameter_list|()
throws|throws
name|Exception
block|{
name|TikaInputStream
name|tis
decl_stmt|;
name|tis
operator|=
name|TikaInputStream
operator|.
name|get
argument_list|(
name|getTestDoc
argument_list|(
literal|"test-documents.zip"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|MediaType
operator|.
name|application
argument_list|(
literal|"zip"
argument_list|)
argument_list|,
name|d
operator|.
name|detect
argument_list|(
name|tis
argument_list|,
operator|new
name|Metadata
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|tis
operator|=
name|TikaInputStream
operator|.
name|get
argument_list|(
name|getTestDoc
argument_list|(
literal|"testJAR.jar"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|MediaType
operator|.
name|application
argument_list|(
literal|"java-archive"
argument_list|)
argument_list|,
name|d
operator|.
name|detect
argument_list|(
name|tis
argument_list|,
operator|new
name|Metadata
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testTruncatedOOXMLFile
parameter_list|()
throws|throws
name|Exception
block|{
name|MimeTypes
name|mimeTypes
init|=
name|MimeTypesFactory
operator|.
name|create
argument_list|(
literal|"tika-mimetypes.xml"
argument_list|)
decl_stmt|;
name|ContainerAwareDetector
name|detector
init|=
operator|new
name|ContainerAwareDetector
argument_list|(
name|mimeTypes
argument_list|)
decl_stmt|;
name|InputStream
name|input
init|=
name|getTestDoc
argument_list|(
literal|"testWORD.docx"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|buffer
init|=
operator|new
name|byte
index|[
literal|300
index|]
decl_stmt|;
name|assertEquals
argument_list|(
literal|300
argument_list|,
name|input
operator|.
name|read
argument_list|(
name|buffer
argument_list|)
argument_list|)
expr_stmt|;
name|Metadata
name|metadata
init|=
operator|new
name|Metadata
argument_list|()
decl_stmt|;
name|MediaType
name|mt
init|=
name|detector
operator|.
name|detect
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|buffer
argument_list|)
argument_list|,
name|metadata
argument_list|)
decl_stmt|;
comment|// no exception should be thrown
name|assertEquals
argument_list|(
name|MediaType
operator|.
name|application
argument_list|(
literal|"x-tika-ooxml"
argument_list|)
argument_list|,
name|mt
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

