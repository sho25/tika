begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/* * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|mime
package|;
end_package

begin_comment
comment|// Junit imports
end_comment

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|Tika
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|config
operator|.
name|TikaConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|detect
operator|.
name|DefaultDetector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|metadata
operator|.
name|Metadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|microsoft
operator|.
name|POIFSContainerDetector
import|;
end_import

begin_comment
comment|/**  *   * Test Suite for the {@link MimeTypes} repository.  *   */
end_comment

begin_class
specifier|public
class|class
name|TestMimeTypes
extends|extends
name|TestCase
block|{
specifier|private
name|Tika
name|tika
decl_stmt|;
specifier|private
name|MimeTypes
name|repo
decl_stmt|;
specifier|private
name|URL
name|u
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|File
name|f
init|=
operator|new
name|File
argument_list|(
literal|"/a/b/c/x.pdf"
argument_list|)
decl_stmt|;
specifier|protected
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|TikaConfig
name|config
init|=
name|TikaConfig
operator|.
name|getDefaultConfig
argument_list|()
decl_stmt|;
name|repo
operator|=
name|config
operator|.
name|getMimeRepository
argument_list|()
expr_stmt|;
name|tika
operator|=
operator|new
name|Tika
argument_list|(
name|config
argument_list|)
expr_stmt|;
name|u
operator|=
operator|new
name|URL
argument_list|(
literal|"http://mydomain.com/x.pdf?x=y"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testCaseSensitivity
parameter_list|()
block|{
name|String
name|type
init|=
name|tika
operator|.
name|detect
argument_list|(
literal|"test.PDF"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|type
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|type
argument_list|,
name|tika
operator|.
name|detect
argument_list|(
literal|"test.pdf"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|type
argument_list|,
name|tika
operator|.
name|detect
argument_list|(
literal|"test.PdF"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|type
argument_list|,
name|tika
operator|.
name|detect
argument_list|(
literal|"test.pdF"
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testLoadMimeTypes
parameter_list|()
throws|throws
name|MimeTypeException
block|{
name|assertNotNull
argument_list|(
name|repo
operator|.
name|forName
argument_list|(
literal|"application/octet-stream"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|repo
operator|.
name|forName
argument_list|(
literal|"text/x-tex"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Tests MIME type determination based solely on the URL's extension.      */
specifier|public
name|void
name|testGuessMimeTypes
parameter_list|()
throws|throws
name|Exception
block|{
name|assertTypeByName
argument_list|(
literal|"application/pdf"
argument_list|,
literal|"x.pdf"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"application/pdf"
argument_list|,
name|tika
operator|.
name|detect
argument_list|(
name|u
operator|.
name|toExternalForm
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"application/pdf"
argument_list|,
name|tika
operator|.
name|detect
argument_list|(
name|f
operator|.
name|getPath
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTypeByName
argument_list|(
literal|"text/plain"
argument_list|,
literal|"x.txt"
argument_list|)
expr_stmt|;
name|assertTypeByName
argument_list|(
literal|"text/html"
argument_list|,
literal|"x.htm"
argument_list|)
expr_stmt|;
name|assertTypeByName
argument_list|(
literal|"text/html"
argument_list|,
literal|"x.html"
argument_list|)
expr_stmt|;
name|assertTypeByName
argument_list|(
literal|"application/xhtml+xml"
argument_list|,
literal|"x.xhtml"
argument_list|)
expr_stmt|;
name|assertTypeByName
argument_list|(
literal|"application/xml"
argument_list|,
literal|"x.xml"
argument_list|)
expr_stmt|;
name|assertTypeByName
argument_list|(
literal|"application/zip"
argument_list|,
literal|"x.zip"
argument_list|)
expr_stmt|;
name|assertTypeByName
argument_list|(
literal|"application/vnd.oasis.opendocument.text"
argument_list|,
literal|"x.odt"
argument_list|)
expr_stmt|;
name|assertTypeByName
argument_list|(
literal|"application/octet-stream"
argument_list|,
literal|"x.unknown"
argument_list|)
expr_stmt|;
comment|// Test for the MS Office media types and file extensions listed in
comment|// http://blogs.msdn.com/vsofficedeveloper/pages/Office-2007-Open-XML-MIME-Types.aspx
name|assertTypeByName
argument_list|(
literal|"application/msword"
argument_list|,
literal|"x.doc"
argument_list|)
expr_stmt|;
name|assertTypeByName
argument_list|(
literal|"application/msword"
argument_list|,
literal|"x.dot"
argument_list|)
expr_stmt|;
name|assertTypeByName
argument_list|(
literal|"application/vnd.openxmlformats-officedocument.wordprocessingml.document"
argument_list|,
literal|"x.docx"
argument_list|)
expr_stmt|;
name|assertTypeByName
argument_list|(
literal|"application/vnd.openxmlformats-officedocument.wordprocessingml.template"
argument_list|,
literal|"x.dotx"
argument_list|)
expr_stmt|;
name|assertTypeByName
argument_list|(
literal|"application/vnd.ms-word.document.macroenabled.12"
argument_list|,
literal|"x.docm"
argument_list|)
expr_stmt|;
name|assertTypeByName
argument_list|(
literal|"application/vnd.ms-word.template.macroenabled.12"
argument_list|,
literal|"x.dotm"
argument_list|)
expr_stmt|;
name|assertTypeByName
argument_list|(
literal|"application/vnd.ms-excel"
argument_list|,
literal|"x.xls"
argument_list|)
expr_stmt|;
name|assertTypeByName
argument_list|(
literal|"application/vnd.ms-excel"
argument_list|,
literal|"x.xlt"
argument_list|)
expr_stmt|;
name|assertTypeByName
argument_list|(
literal|"application/vnd.ms-excel"
argument_list|,
literal|"x.xla"
argument_list|)
expr_stmt|;
name|assertTypeByName
argument_list|(
literal|"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
argument_list|,
literal|"x.xlsx"
argument_list|)
expr_stmt|;
name|assertTypeByName
argument_list|(
literal|"application/vnd.openxmlformats-officedocument.spreadsheetml.template"
argument_list|,
literal|"x.xltx"
argument_list|)
expr_stmt|;
name|assertTypeByName
argument_list|(
literal|"application/vnd.ms-excel.sheet.macroenabled.12"
argument_list|,
literal|"x.xlsm"
argument_list|)
expr_stmt|;
name|assertTypeByName
argument_list|(
literal|"application/vnd.ms-excel.template.macroenabled.12"
argument_list|,
literal|"x.xltm"
argument_list|)
expr_stmt|;
name|assertTypeByName
argument_list|(
literal|"application/vnd.ms-excel.addin.macroenabled.12"
argument_list|,
literal|"x.xlam"
argument_list|)
expr_stmt|;
name|assertTypeByName
argument_list|(
literal|"application/vnd.ms-excel.sheet.binary.macroenabled.12"
argument_list|,
literal|"x.xlsb"
argument_list|)
expr_stmt|;
name|assertTypeByName
argument_list|(
literal|"application/vnd.ms-powerpoint"
argument_list|,
literal|"x.ppt"
argument_list|)
expr_stmt|;
name|assertTypeByName
argument_list|(
literal|"application/vnd.ms-powerpoint"
argument_list|,
literal|"x.pot"
argument_list|)
expr_stmt|;
name|assertTypeByName
argument_list|(
literal|"application/vnd.ms-powerpoint"
argument_list|,
literal|"x.pps"
argument_list|)
expr_stmt|;
name|assertTypeByName
argument_list|(
literal|"application/vnd.ms-powerpoint"
argument_list|,
literal|"x.ppa"
argument_list|)
expr_stmt|;
name|assertTypeByName
argument_list|(
literal|"application/vnd.openxmlformats-officedocument.presentationml.presentation"
argument_list|,
literal|"x.pptx"
argument_list|)
expr_stmt|;
name|assertTypeByName
argument_list|(
literal|"application/vnd.openxmlformats-officedocument.presentationml.template"
argument_list|,
literal|"x.potx"
argument_list|)
expr_stmt|;
name|assertTypeByName
argument_list|(
literal|"application/vnd.openxmlformats-officedocument.presentationml.slideshow"
argument_list|,
literal|"x.ppsx"
argument_list|)
expr_stmt|;
name|assertTypeByName
argument_list|(
literal|"application/vnd.ms-powerpoint.addin.macroenabled.12"
argument_list|,
literal|"x.ppam"
argument_list|)
expr_stmt|;
name|assertTypeByName
argument_list|(
literal|"application/vnd.ms-powerpoint.presentation.macroenabled.12"
argument_list|,
literal|"x.pptm"
argument_list|)
expr_stmt|;
name|assertTypeByName
argument_list|(
literal|"application/vnd.ms-powerpoint.template.macroenabled.12"
argument_list|,
literal|"x.potm"
argument_list|)
expr_stmt|;
name|assertTypeByName
argument_list|(
literal|"application/vnd.ms-powerpoint.slideshow.macroenabled.12"
argument_list|,
literal|"x.ppsm"
argument_list|)
expr_stmt|;
name|assertTypeByName
argument_list|(
literal|"application/x-staroffice-template"
argument_list|,
literal|"x.vor"
argument_list|)
expr_stmt|;
name|assertTypeByData
argument_list|(
literal|"application/x-tika-msoffice"
argument_list|,
literal|"testVORCalcTemplate.vor"
argument_list|)
expr_stmt|;
name|assertTypeByData
argument_list|(
literal|"application/x-tika-msoffice"
argument_list|,
literal|"testVORDrawTemplate.vor"
argument_list|)
expr_stmt|;
name|assertTypeByData
argument_list|(
literal|"application/x-tika-msoffice"
argument_list|,
literal|"testVORImpressTemplate.vor"
argument_list|)
expr_stmt|;
name|assertTypeByData
argument_list|(
literal|"application/x-tika-msoffice"
argument_list|,
literal|"testVORWriterTemplate.vor"
argument_list|)
expr_stmt|;
name|assertTypeByNameAndData
argument_list|(
literal|"application/x-staroffice-template"
argument_list|,
literal|"testVORCalcTemplate.vor"
argument_list|)
expr_stmt|;
name|assertTypeByNameAndData
argument_list|(
literal|"application/x-staroffice-template"
argument_list|,
literal|"testVORDrawTemplate.vor"
argument_list|)
expr_stmt|;
name|assertTypeByNameAndData
argument_list|(
literal|"application/x-staroffice-template"
argument_list|,
literal|"testVORImpressTemplate.vor"
argument_list|)
expr_stmt|;
name|assertTypeByNameAndData
argument_list|(
literal|"application/x-staroffice-template"
argument_list|,
literal|"testVORWriterTemplate.vor"
argument_list|)
expr_stmt|;
block|}
comment|/**      * Note - detecting container formats by mime magic is very very      *  iffy, as we can't be sure where things will end up.      * People really ought to use the container aware detection...      */
specifier|public
name|void
name|testOLE2Detection
parameter_list|()
throws|throws
name|Exception
block|{
comment|// These have the properties block near the start, so our mime
comment|//  magic will spot them
name|assertTypeByData
argument_list|(
literal|"application/vnd.ms-excel"
argument_list|,
literal|"testEXCEL.xls"
argument_list|)
expr_stmt|;
comment|// This one quite legitimately doesn't have its properties block
comment|//  as one of the first couple of entries
comment|// As such, our mime magic can't figure it out...
name|assertTypeByData
argument_list|(
literal|"application/x-tika-msoffice"
argument_list|,
literal|"testWORD.doc"
argument_list|)
expr_stmt|;
name|assertTypeByData
argument_list|(
literal|"application/x-tika-msoffice"
argument_list|,
literal|"testPPT.ppt"
argument_list|)
expr_stmt|;
comment|// By name + data:
comment|// Those we got right to start with are fine
name|assertTypeByNameAndData
argument_list|(
literal|"application/vnd.ms-excel"
argument_list|,
literal|"testEXCEL.xls"
argument_list|)
expr_stmt|;
comment|// And the name lets us specialise the generic OOXML
comment|//  ones to their actual type
name|assertTypeByNameAndData
argument_list|(
literal|"application/vnd.ms-powerpoint"
argument_list|,
literal|"testPPT.ppt"
argument_list|)
expr_stmt|;
name|assertTypeByNameAndData
argument_list|(
literal|"application/msword"
argument_list|,
literal|"testWORD.doc"
argument_list|)
expr_stmt|;
block|}
comment|/**      * Files generated by Works 7.0 Spreadsheet application use the OLE2      * structure and resemble Excel files (they contain a "Workbook"). They are      * not Excel though. The {@link POIFSContainerDetector} can detect them      * properly. With plain {@link MimeTypes} they are detected as Excel,      * because of the "Workbook" string. It's a problem we discussed in TIKA-806      * and agreed that we live with that. The policy is that container-based      * detection should trump magic-based detection. It's implemented in      * {@link DefaultDetector} (TIKA-786) and users who don't want to use to      * {@link DefaultDetector} should be aware of it.      *       * @throws Exception      */
specifier|public
name|void
name|testWorks70Detection
parameter_list|()
throws|throws
name|Exception
block|{
comment|// this is possible due to MimeTypes guessing the type
comment|// based on the WksSSWorkBook near the beginning of the
comment|// file
name|assertTypeByData
argument_list|(
literal|"application/x-tika-msworks-spreadsheet"
argument_list|,
literal|"testWORKSSpreadsheet7.0.xlr"
argument_list|)
expr_stmt|;
comment|// this is right, we made x-xlr a subtype of vnd.ms-excel
name|assertTypeByNameAndData
argument_list|(
literal|"application/x-tika-msworks-spreadsheet"
argument_list|,
literal|"testWORKSSpreadsheet7.0.xlr"
argument_list|)
expr_stmt|;
comment|// with name-only, everything should be all right
name|assertTypeByName
argument_list|(
literal|"application/x-tika-msworks-spreadsheet"
argument_list|,
literal|"testWORKSSpreadsheet7.0.xlr"
argument_list|)
expr_stmt|;
block|}
comment|/**      * Note - detecting container formats by mime magic is very very      *  iffy, as we can't be sure where things will end up.      * People really ought to use the container aware detection...      */
specifier|public
name|void
name|testOoxmlDetection
parameter_list|()
throws|throws
name|Exception
block|{
comment|// These two do luckily have [Content_Types].xml near the start,
comment|//  so our mime magic will spot them
name|assertTypeByData
argument_list|(
literal|"application/x-tika-ooxml"
argument_list|,
literal|"testEXCEL.xlsx"
argument_list|)
expr_stmt|;
name|assertTypeByData
argument_list|(
literal|"application/x-tika-ooxml"
argument_list|,
literal|"testPPT.pptx"
argument_list|)
expr_stmt|;
comment|// This one quite legitimately doesn't have its [Content_Types].xml
comment|//  file as one of the first couple of entries
comment|// As such, our mime magic can't figure it out...
name|assertTypeByData
argument_list|(
literal|"application/zip"
argument_list|,
literal|"testWORD.docx"
argument_list|)
expr_stmt|;
comment|// If we give the filename as well as the data, we can
comment|//  specialise the ooxml generic one to the correct type
name|assertTypeByNameAndData
argument_list|(
literal|"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
argument_list|,
literal|"testEXCEL.xlsx"
argument_list|)
expr_stmt|;
name|assertTypeByNameAndData
argument_list|(
literal|"application/vnd.openxmlformats-officedocument.presentationml.presentation"
argument_list|,
literal|"testPPT.pptx"
argument_list|)
expr_stmt|;
name|assertTypeByNameAndData
argument_list|(
literal|"application/vnd.openxmlformats-officedocument.wordprocessingml.document"
argument_list|,
literal|"testWORD.docx"
argument_list|)
expr_stmt|;
comment|// Test a few of the less usual ones
name|assertTypeByNameAndData
argument_list|(
literal|"application/vnd.ms-excel.sheet.binary.macroenabled.12"
argument_list|,
literal|"testEXCEL.xlsb"
argument_list|)
expr_stmt|;
name|assertTypeByNameAndData
argument_list|(
literal|"application/vnd.ms-powerpoint.presentation.macroenabled.12"
argument_list|,
literal|"testPPT.pptm"
argument_list|)
expr_stmt|;
name|assertTypeByNameAndData
argument_list|(
literal|"application/vnd.ms-powerpoint.template.macroenabled.12"
argument_list|,
literal|"testPPT.potm"
argument_list|)
expr_stmt|;
name|assertTypeByNameAndData
argument_list|(
literal|"application/vnd.ms-powerpoint.slideshow.macroenabled.12"
argument_list|,
literal|"testPPT.ppsm"
argument_list|)
expr_stmt|;
block|}
comment|/**      * Note - detecting container formats by mime magic is very very      *  iffy, as we can't be sure where things will end up.      * People really ought to use the container aware detection...      */
specifier|public
name|void
name|testIWorkDetection
parameter_list|()
throws|throws
name|Exception
block|{
comment|// By name is easy
name|assertTypeByName
argument_list|(
literal|"application/vnd.apple.keynote"
argument_list|,
literal|"testKeynote.key"
argument_list|)
expr_stmt|;
name|assertTypeByName
argument_list|(
literal|"application/vnd.apple.numbers"
argument_list|,
literal|"testNumbers.numbers"
argument_list|)
expr_stmt|;
name|assertTypeByName
argument_list|(
literal|"application/vnd.apple.pages"
argument_list|,
literal|"testPages.pages"
argument_list|)
expr_stmt|;
comment|// We can't do it by data, as we'd need to unpack
comment|//  the zip file to check the XML
name|assertTypeByData
argument_list|(
literal|"application/zip"
argument_list|,
literal|"testKeynote.key"
argument_list|)
expr_stmt|;
name|assertTypeByNameAndData
argument_list|(
literal|"application/vnd.apple.keynote"
argument_list|,
literal|"testKeynote.key"
argument_list|)
expr_stmt|;
name|assertTypeByNameAndData
argument_list|(
literal|"application/vnd.apple.numbers"
argument_list|,
literal|"testNumbers.numbers"
argument_list|)
expr_stmt|;
name|assertTypeByNameAndData
argument_list|(
literal|"application/vnd.apple.pages"
argument_list|,
literal|"testPages.pages"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testArchiveDetection
parameter_list|()
throws|throws
name|Exception
block|{
name|assertTypeByName
argument_list|(
literal|"application/x-archive"
argument_list|,
literal|"test.ar"
argument_list|)
expr_stmt|;
name|assertTypeByName
argument_list|(
literal|"application/zip"
argument_list|,
literal|"test.zip"
argument_list|)
expr_stmt|;
name|assertTypeByName
argument_list|(
literal|"application/x-tar"
argument_list|,
literal|"test.tar"
argument_list|)
expr_stmt|;
name|assertTypeByName
argument_list|(
literal|"application/x-gzip"
argument_list|,
literal|"test.tgz"
argument_list|)
expr_stmt|;
comment|// See GZIP, not tar contents of it
name|assertTypeByName
argument_list|(
literal|"application/x-cpio"
argument_list|,
literal|"test.cpio"
argument_list|)
expr_stmt|;
comment|// TODO Add an example .deb and .udeb, then check these
comment|// Check the mime magic patterns for them work too
name|assertTypeByData
argument_list|(
literal|"application/x-archive"
argument_list|,
literal|"testARofText.ar"
argument_list|)
expr_stmt|;
name|assertTypeByData
argument_list|(
literal|"application/x-archive"
argument_list|,
literal|"testARofSND.ar"
argument_list|)
expr_stmt|;
name|assertTypeByData
argument_list|(
literal|"application/zip"
argument_list|,
literal|"test-documents.zip"
argument_list|)
expr_stmt|;
name|assertTypeByData
argument_list|(
literal|"application/x-gtar"
argument_list|,
literal|"test-documents.tar"
argument_list|)
expr_stmt|;
comment|// GNU TAR
name|assertTypeByData
argument_list|(
literal|"application/x-gzip"
argument_list|,
literal|"test-documents.tgz"
argument_list|)
expr_stmt|;
comment|// See GZIP, not tar contents of it
name|assertTypeByData
argument_list|(
literal|"application/x-cpio"
argument_list|,
literal|"test-documents.cpio"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testJpegDetection
parameter_list|()
throws|throws
name|Exception
block|{
name|assertType
argument_list|(
literal|"image/jpeg"
argument_list|,
literal|"testJPEG.jpg"
argument_list|)
expr_stmt|;
name|assertTypeByData
argument_list|(
literal|"image/jpeg"
argument_list|,
literal|"testJPEG.jpg"
argument_list|)
expr_stmt|;
name|assertTypeByName
argument_list|(
literal|"image/jpeg"
argument_list|,
literal|"x.jpg"
argument_list|)
expr_stmt|;
name|assertTypeByName
argument_list|(
literal|"image/jpeg"
argument_list|,
literal|"x.JPG"
argument_list|)
expr_stmt|;
name|assertTypeByName
argument_list|(
literal|"image/jpeg"
argument_list|,
literal|"x.jpeg"
argument_list|)
expr_stmt|;
name|assertTypeByName
argument_list|(
literal|"image/jpeg"
argument_list|,
literal|"x.JPEG"
argument_list|)
expr_stmt|;
name|assertTypeByName
argument_list|(
literal|"image/jpeg"
argument_list|,
literal|"x.jpe"
argument_list|)
expr_stmt|;
name|assertTypeByName
argument_list|(
literal|"image/jpeg"
argument_list|,
literal|"x.jif"
argument_list|)
expr_stmt|;
name|assertTypeByName
argument_list|(
literal|"image/jpeg"
argument_list|,
literal|"x.jfif"
argument_list|)
expr_stmt|;
name|assertTypeByName
argument_list|(
literal|"image/jpeg"
argument_list|,
literal|"x.jfi"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testTiffDetection
parameter_list|()
throws|throws
name|Exception
block|{
name|assertType
argument_list|(
literal|"image/tiff"
argument_list|,
literal|"testTIFF.tif"
argument_list|)
expr_stmt|;
name|assertTypeByData
argument_list|(
literal|"image/tiff"
argument_list|,
literal|"testTIFF.tif"
argument_list|)
expr_stmt|;
name|assertTypeByName
argument_list|(
literal|"image/tiff"
argument_list|,
literal|"x.tiff"
argument_list|)
expr_stmt|;
name|assertTypeByName
argument_list|(
literal|"image/tiff"
argument_list|,
literal|"x.tif"
argument_list|)
expr_stmt|;
name|assertTypeByName
argument_list|(
literal|"image/tiff"
argument_list|,
literal|"x.TIF"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testGifDetection
parameter_list|()
throws|throws
name|Exception
block|{
name|assertType
argument_list|(
literal|"image/gif"
argument_list|,
literal|"testGIF.gif"
argument_list|)
expr_stmt|;
name|assertTypeByData
argument_list|(
literal|"image/gif"
argument_list|,
literal|"testGIF.gif"
argument_list|)
expr_stmt|;
name|assertTypeByName
argument_list|(
literal|"image/gif"
argument_list|,
literal|"x.gif"
argument_list|)
expr_stmt|;
name|assertTypeByName
argument_list|(
literal|"image/gif"
argument_list|,
literal|"x.GIF"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testPngDetection
parameter_list|()
throws|throws
name|Exception
block|{
name|assertType
argument_list|(
literal|"image/png"
argument_list|,
literal|"testPNG.png"
argument_list|)
expr_stmt|;
name|assertTypeByData
argument_list|(
literal|"image/png"
argument_list|,
literal|"testPNG.png"
argument_list|)
expr_stmt|;
name|assertTypeByName
argument_list|(
literal|"image/png"
argument_list|,
literal|"x.png"
argument_list|)
expr_stmt|;
name|assertTypeByName
argument_list|(
literal|"image/png"
argument_list|,
literal|"x.PNG"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testBmpDetection
parameter_list|()
throws|throws
name|Exception
block|{
name|assertType
argument_list|(
literal|"image/x-ms-bmp"
argument_list|,
literal|"testBMP.bmp"
argument_list|)
expr_stmt|;
name|assertTypeByData
argument_list|(
literal|"image/x-ms-bmp"
argument_list|,
literal|"testBMP.bmp"
argument_list|)
expr_stmt|;
name|assertTypeByName
argument_list|(
literal|"image/x-ms-bmp"
argument_list|,
literal|"x.bmp"
argument_list|)
expr_stmt|;
name|assertTypeByName
argument_list|(
literal|"image/x-ms-bmp"
argument_list|,
literal|"x.BMP"
argument_list|)
expr_stmt|;
name|assertTypeByName
argument_list|(
literal|"image/x-ms-bmp"
argument_list|,
literal|"x.dib"
argument_list|)
expr_stmt|;
name|assertTypeByName
argument_list|(
literal|"image/x-ms-bmp"
argument_list|,
literal|"x.DIB"
argument_list|)
expr_stmt|;
comment|//false positive check -- contains part of BMP signature
name|assertType
argument_list|(
literal|"text/plain"
argument_list|,
literal|"testBMPfp.txt"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testPnmDetection
parameter_list|()
throws|throws
name|Exception
block|{
name|assertType
argument_list|(
literal|"image/x-portable-bitmap"
argument_list|,
literal|"testPBM.pbm"
argument_list|)
expr_stmt|;
name|assertType
argument_list|(
literal|"image/x-portable-graymap"
argument_list|,
literal|"testPGM.pgm"
argument_list|)
expr_stmt|;
name|assertType
argument_list|(
literal|"image/x-portable-pixmap"
argument_list|,
literal|"testPPM.ppm"
argument_list|)
expr_stmt|;
name|assertTypeByData
argument_list|(
literal|"image/x-portable-bitmap"
argument_list|,
literal|"testPBM.pbm"
argument_list|)
expr_stmt|;
name|assertTypeByData
argument_list|(
literal|"image/x-portable-graymap"
argument_list|,
literal|"testPGM.pgm"
argument_list|)
expr_stmt|;
name|assertTypeByData
argument_list|(
literal|"image/x-portable-pixmap"
argument_list|,
literal|"testPPM.ppm"
argument_list|)
expr_stmt|;
name|assertTypeByName
argument_list|(
literal|"image/x-portable-anymap"
argument_list|,
literal|"x.pnm"
argument_list|)
expr_stmt|;
name|assertTypeByName
argument_list|(
literal|"image/x-portable-anymap"
argument_list|,
literal|"x.PNM"
argument_list|)
expr_stmt|;
name|assertTypeByName
argument_list|(
literal|"image/x-portable-bitmap"
argument_list|,
literal|"x.pbm"
argument_list|)
expr_stmt|;
name|assertTypeByName
argument_list|(
literal|"image/x-portable-bitmap"
argument_list|,
literal|"x.PBM"
argument_list|)
expr_stmt|;
name|assertTypeByName
argument_list|(
literal|"image/x-portable-graymap"
argument_list|,
literal|"x.pgm"
argument_list|)
expr_stmt|;
name|assertTypeByName
argument_list|(
literal|"image/x-portable-graymap"
argument_list|,
literal|"x.PGM"
argument_list|)
expr_stmt|;
name|assertTypeByName
argument_list|(
literal|"image/x-portable-pixmap"
argument_list|,
literal|"x.ppm"
argument_list|)
expr_stmt|;
name|assertTypeByName
argument_list|(
literal|"image/x-portable-pixmap"
argument_list|,
literal|"x.PPM"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testCgmDetection
parameter_list|()
throws|throws
name|Exception
block|{
comment|// TODO: Need a test image file
name|assertTypeByName
argument_list|(
literal|"image/cgm"
argument_list|,
literal|"x.cgm"
argument_list|)
expr_stmt|;
name|assertTypeByName
argument_list|(
literal|"image/cgm"
argument_list|,
literal|"x.CGM"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testRdfXmlDetection
parameter_list|()
throws|throws
name|Exception
block|{
name|assertTypeByName
argument_list|(
literal|"application/rdf+xml"
argument_list|,
literal|"x.rdf"
argument_list|)
expr_stmt|;
name|assertTypeByName
argument_list|(
literal|"application/rdf+xml"
argument_list|,
literal|"x.owl"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testSvgDetection
parameter_list|()
throws|throws
name|Exception
block|{
name|assertType
argument_list|(
literal|"image/svg+xml"
argument_list|,
literal|"testSVG.svg"
argument_list|)
expr_stmt|;
name|assertTypeByData
argument_list|(
literal|"image/svg+xml"
argument_list|,
literal|"testSVG.svg"
argument_list|)
expr_stmt|;
name|assertTypeByName
argument_list|(
literal|"image/svg+xml"
argument_list|,
literal|"x.svg"
argument_list|)
expr_stmt|;
name|assertTypeByName
argument_list|(
literal|"image/svg+xml"
argument_list|,
literal|"x.SVG"
argument_list|)
expr_stmt|;
comment|// Should *.svgz be svg or gzip
name|assertType
argument_list|(
literal|"application/x-gzip"
argument_list|,
literal|"testSVG.svgz"
argument_list|)
expr_stmt|;
name|assertTypeByData
argument_list|(
literal|"application/x-gzip"
argument_list|,
literal|"testSVG.svgz"
argument_list|)
expr_stmt|;
name|assertTypeByName
argument_list|(
literal|"image/svg+xml"
argument_list|,
literal|"x.svgz"
argument_list|)
expr_stmt|;
name|assertTypeByName
argument_list|(
literal|"image/svg+xml"
argument_list|,
literal|"x.SVGZ"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testPdfDetection
parameter_list|()
throws|throws
name|Exception
block|{
name|assertType
argument_list|(
literal|"application/pdf"
argument_list|,
literal|"testPDF.pdf"
argument_list|)
expr_stmt|;
name|assertTypeByData
argument_list|(
literal|"application/pdf"
argument_list|,
literal|"testPDF.pdf"
argument_list|)
expr_stmt|;
name|assertTypeByName
argument_list|(
literal|"application/pdf"
argument_list|,
literal|"x.pdf"
argument_list|)
expr_stmt|;
name|assertTypeByName
argument_list|(
literal|"application/pdf"
argument_list|,
literal|"x.PDF"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testSwfDetection
parameter_list|()
throws|throws
name|Exception
block|{
comment|// TODO: Need a test flash file
name|assertTypeByName
argument_list|(
literal|"application/x-shockwave-flash"
argument_list|,
literal|"x.swf"
argument_list|)
expr_stmt|;
name|assertTypeByName
argument_list|(
literal|"application/x-shockwave-flash"
argument_list|,
literal|"x.SWF"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testDwgDetection
parameter_list|()
throws|throws
name|Exception
block|{
name|assertTypeByName
argument_list|(
literal|"image/vnd.dwg"
argument_list|,
literal|"x.dwg"
argument_list|)
expr_stmt|;
name|assertTypeByData
argument_list|(
literal|"image/vnd.dwg"
argument_list|,
literal|"testDWG2004.dwg"
argument_list|)
expr_stmt|;
name|assertTypeByData
argument_list|(
literal|"image/vnd.dwg"
argument_list|,
literal|"testDWG2007.dwg"
argument_list|)
expr_stmt|;
name|assertTypeByData
argument_list|(
literal|"image/vnd.dwg"
argument_list|,
literal|"testDWG2010.dwg"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testprtDetection
parameter_list|()
throws|throws
name|Exception
block|{
name|assertTypeByName
argument_list|(
literal|"application/x-prt"
argument_list|,
literal|"x.prt"
argument_list|)
expr_stmt|;
name|assertTypeByData
argument_list|(
literal|"application/x-prt"
argument_list|,
literal|"testCADKEY.prt"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testWmfDetection
parameter_list|()
throws|throws
name|Exception
block|{
name|assertTypeByName
argument_list|(
literal|"application/x-msmetafile"
argument_list|,
literal|"x.wmf"
argument_list|)
expr_stmt|;
name|assertTypeByData
argument_list|(
literal|"application/x-msmetafile"
argument_list|,
literal|"testWMF.wmf"
argument_list|)
expr_stmt|;
name|assertTypeByName
argument_list|(
literal|"application/x-msmetafile"
argument_list|,
literal|"x.WMF"
argument_list|)
expr_stmt|;
name|assertTypeByName
argument_list|(
literal|"application/x-emf"
argument_list|,
literal|"x.emf"
argument_list|)
expr_stmt|;
name|assertTypeByData
argument_list|(
literal|"application/x-emf"
argument_list|,
literal|"testEMF.emf"
argument_list|)
expr_stmt|;
name|assertTypeByName
argument_list|(
literal|"application/x-emf"
argument_list|,
literal|"x.EMF"
argument_list|)
expr_stmt|;
comment|// TODO: Need a test wmz file
name|assertTypeByName
argument_list|(
literal|"application/x-ms-wmz"
argument_list|,
literal|"x.wmz"
argument_list|)
expr_stmt|;
name|assertTypeByName
argument_list|(
literal|"application/x-ms-wmz"
argument_list|,
literal|"x.WMZ"
argument_list|)
expr_stmt|;
comment|// TODO: Need a test emz file
name|assertTypeByName
argument_list|(
literal|"application/x-gzip"
argument_list|,
literal|"x.emz"
argument_list|)
expr_stmt|;
name|assertTypeByName
argument_list|(
literal|"application/x-gzip"
argument_list|,
literal|"x.EMZ"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testPsDetection
parameter_list|()
throws|throws
name|Exception
block|{
comment|// TODO: Need a test postscript file
name|assertTypeByName
argument_list|(
literal|"application/postscript"
argument_list|,
literal|"x.ps"
argument_list|)
expr_stmt|;
name|assertTypeByName
argument_list|(
literal|"application/postscript"
argument_list|,
literal|"x.PS"
argument_list|)
expr_stmt|;
name|assertTypeByName
argument_list|(
literal|"application/postscript"
argument_list|,
literal|"x.eps"
argument_list|)
expr_stmt|;
name|assertTypeByName
argument_list|(
literal|"application/postscript"
argument_list|,
literal|"x.epsf"
argument_list|)
expr_stmt|;
name|assertTypeByName
argument_list|(
literal|"application/postscript"
argument_list|,
literal|"x.epsi"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testMicrosoftMultiMediaDetection
parameter_list|()
throws|throws
name|Exception
block|{
name|assertTypeByName
argument_list|(
literal|"video/x-ms-asf"
argument_list|,
literal|"x.asf"
argument_list|)
expr_stmt|;
name|assertTypeByName
argument_list|(
literal|"video/x-ms-wmv"
argument_list|,
literal|"x.wmv"
argument_list|)
expr_stmt|;
name|assertTypeByName
argument_list|(
literal|"audio/x-ms-wma"
argument_list|,
literal|"x.wma"
argument_list|)
expr_stmt|;
name|assertTypeByData
argument_list|(
literal|"video/x-ms-asf"
argument_list|,
literal|"testASF.asf"
argument_list|)
expr_stmt|;
name|assertTypeByData
argument_list|(
literal|"video/x-ms-wmv"
argument_list|,
literal|"testWMV.wmv"
argument_list|)
expr_stmt|;
name|assertTypeByData
argument_list|(
literal|"audio/x-ms-wma"
argument_list|,
literal|"testWMA.wma"
argument_list|)
expr_stmt|;
block|}
comment|/**      * All 3 DITA types are in theory handled by the same mimetype,      *  but we specialise them       */
specifier|public
name|void
name|testDITADetection
parameter_list|()
throws|throws
name|Exception
block|{
name|assertTypeByName
argument_list|(
literal|"application/dita+xml; format=topic"
argument_list|,
literal|"test.dita"
argument_list|)
expr_stmt|;
name|assertTypeByName
argument_list|(
literal|"application/dita+xml; format=map"
argument_list|,
literal|"test.ditamap"
argument_list|)
expr_stmt|;
name|assertTypeByName
argument_list|(
literal|"application/dita+xml; format=val"
argument_list|,
literal|"test.ditaval"
argument_list|)
expr_stmt|;
name|assertTypeByData
argument_list|(
literal|"application/dita+xml; format=task"
argument_list|,
literal|"testDITA.dita"
argument_list|)
expr_stmt|;
name|assertTypeByData
argument_list|(
literal|"application/dita+xml; format=concept"
argument_list|,
literal|"testDITA2.dita"
argument_list|)
expr_stmt|;
name|assertTypeByData
argument_list|(
literal|"application/dita+xml; format=map"
argument_list|,
literal|"testDITA.ditamap"
argument_list|)
expr_stmt|;
name|assertTypeByNameAndData
argument_list|(
literal|"application/dita+xml; format=task"
argument_list|,
literal|"testDITA.dita"
argument_list|)
expr_stmt|;
name|assertTypeByNameAndData
argument_list|(
literal|"application/dita+xml; format=concept"
argument_list|,
literal|"testDITA2.dita"
argument_list|)
expr_stmt|;
name|assertTypeByNameAndData
argument_list|(
literal|"application/dita+xml; format=map"
argument_list|,
literal|"testDITA.ditamap"
argument_list|)
expr_stmt|;
comment|// These are all children of the official type
name|assertEquals
argument_list|(
literal|"application/dita+xml"
argument_list|,
name|repo
operator|.
name|getMediaTypeRegistry
argument_list|()
operator|.
name|getSupertype
argument_list|(
name|getTypeByNameAndData
argument_list|(
literal|"testDITA.ditamap"
argument_list|)
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"application/dita+xml"
argument_list|,
name|repo
operator|.
name|getMediaTypeRegistry
argument_list|()
operator|.
name|getSupertype
argument_list|(
name|getTypeByNameAndData
argument_list|(
literal|"testDITA.dita"
argument_list|)
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"application/dita+xml"
argument_list|,
name|repo
operator|.
name|getMediaTypeRegistry
argument_list|()
operator|.
name|getSupertype
argument_list|(
name|getTypeByNameAndData
argument_list|(
literal|"testDITA2.dita"
argument_list|)
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * @since TIKA-194      */
specifier|public
name|void
name|testJavaRegex
parameter_list|()
throws|throws
name|Exception
block|{
name|MimeType
name|testType
init|=
operator|new
name|MimeType
argument_list|(
name|MediaType
operator|.
name|parse
argument_list|(
literal|"foo/bar"
argument_list|)
argument_list|)
decl_stmt|;
name|this
operator|.
name|repo
operator|.
name|add
argument_list|(
name|testType
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|repo
operator|.
name|forName
argument_list|(
literal|"foo/bar"
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|pattern
init|=
literal|"rtg_sst_grb_0\\.5\\.\\d{8}"
decl_stmt|;
name|this
operator|.
name|repo
operator|.
name|addPattern
argument_list|(
name|testType
argument_list|,
name|pattern
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|String
name|testFileName
init|=
literal|"rtg_sst_grb_0.5.12345678"
decl_stmt|;
name|assertEquals
argument_list|(
literal|"foo/bar"
argument_list|,
name|tika
operator|.
name|detect
argument_list|(
name|testFileName
argument_list|)
argument_list|)
expr_stmt|;
name|MimeType
name|testType2
init|=
operator|new
name|MimeType
argument_list|(
name|MediaType
operator|.
name|parse
argument_list|(
literal|"foo/bar2"
argument_list|)
argument_list|)
decl_stmt|;
name|this
operator|.
name|repo
operator|.
name|add
argument_list|(
name|testType2
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|repo
operator|.
name|forName
argument_list|(
literal|"foo/bar2"
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|repo
operator|.
name|addPattern
argument_list|(
name|testType2
argument_list|,
name|pattern
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertNotSame
argument_list|(
literal|"foo/bar2"
argument_list|,
name|tika
operator|.
name|detect
argument_list|(
name|testFileName
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testRawDetection
parameter_list|()
throws|throws
name|Exception
block|{
name|assertTypeByName
argument_list|(
literal|"image/x-raw-adobe"
argument_list|,
literal|"x.dng"
argument_list|)
expr_stmt|;
name|assertTypeByName
argument_list|(
literal|"image/x-raw-adobe"
argument_list|,
literal|"x.DNG"
argument_list|)
expr_stmt|;
name|assertTypeByName
argument_list|(
literal|"image/x-raw-hasselblad"
argument_list|,
literal|"x.3fr"
argument_list|)
expr_stmt|;
name|assertTypeByName
argument_list|(
literal|"image/x-raw-fuji"
argument_list|,
literal|"x.raf"
argument_list|)
expr_stmt|;
name|assertTypeByName
argument_list|(
literal|"image/x-raw-canon"
argument_list|,
literal|"x.crw"
argument_list|)
expr_stmt|;
name|assertTypeByName
argument_list|(
literal|"image/x-raw-canon"
argument_list|,
literal|"x.cr2"
argument_list|)
expr_stmt|;
name|assertTypeByName
argument_list|(
literal|"image/x-raw-kodak"
argument_list|,
literal|"x.k25"
argument_list|)
expr_stmt|;
name|assertTypeByName
argument_list|(
literal|"image/x-raw-kodak"
argument_list|,
literal|"x.kdc"
argument_list|)
expr_stmt|;
name|assertTypeByName
argument_list|(
literal|"image/x-raw-kodak"
argument_list|,
literal|"x.dcs"
argument_list|)
expr_stmt|;
name|assertTypeByName
argument_list|(
literal|"image/x-raw-kodak"
argument_list|,
literal|"x.drf"
argument_list|)
expr_stmt|;
name|assertTypeByName
argument_list|(
literal|"image/x-raw-minolta"
argument_list|,
literal|"x.mrw"
argument_list|)
expr_stmt|;
name|assertTypeByName
argument_list|(
literal|"image/x-raw-nikon"
argument_list|,
literal|"x.nef"
argument_list|)
expr_stmt|;
name|assertTypeByName
argument_list|(
literal|"image/x-raw-nikon"
argument_list|,
literal|"x.nrw"
argument_list|)
expr_stmt|;
name|assertTypeByName
argument_list|(
literal|"image/x-raw-olympus"
argument_list|,
literal|"x.orf"
argument_list|)
expr_stmt|;
name|assertTypeByName
argument_list|(
literal|"image/x-raw-pentax"
argument_list|,
literal|"x.ptx"
argument_list|)
expr_stmt|;
name|assertTypeByName
argument_list|(
literal|"image/x-raw-pentax"
argument_list|,
literal|"x.pef"
argument_list|)
expr_stmt|;
name|assertTypeByName
argument_list|(
literal|"image/x-raw-sony"
argument_list|,
literal|"x.arw"
argument_list|)
expr_stmt|;
name|assertTypeByName
argument_list|(
literal|"image/x-raw-sony"
argument_list|,
literal|"x.srf"
argument_list|)
expr_stmt|;
name|assertTypeByName
argument_list|(
literal|"image/x-raw-sony"
argument_list|,
literal|"x.sr2"
argument_list|)
expr_stmt|;
name|assertTypeByName
argument_list|(
literal|"image/x-raw-sigma"
argument_list|,
literal|"x.x3f"
argument_list|)
expr_stmt|;
name|assertTypeByName
argument_list|(
literal|"image/x-raw-epson"
argument_list|,
literal|"x.erf"
argument_list|)
expr_stmt|;
name|assertTypeByName
argument_list|(
literal|"image/x-raw-mamiya"
argument_list|,
literal|"x.mef"
argument_list|)
expr_stmt|;
name|assertTypeByName
argument_list|(
literal|"image/x-raw-leaf"
argument_list|,
literal|"x.mos"
argument_list|)
expr_stmt|;
name|assertTypeByName
argument_list|(
literal|"image/x-raw-panasonic"
argument_list|,
literal|"x.raw"
argument_list|)
expr_stmt|;
name|assertTypeByName
argument_list|(
literal|"image/x-raw-panasonic"
argument_list|,
literal|"x.rw2"
argument_list|)
expr_stmt|;
name|assertTypeByName
argument_list|(
literal|"image/x-raw-phaseone"
argument_list|,
literal|"x.iiq"
argument_list|)
expr_stmt|;
name|assertTypeByName
argument_list|(
literal|"image/x-raw-red"
argument_list|,
literal|"x.r3d"
argument_list|)
expr_stmt|;
name|assertTypeByName
argument_list|(
literal|"image/x-raw-imacon"
argument_list|,
literal|"x.fff"
argument_list|)
expr_stmt|;
name|assertTypeByName
argument_list|(
literal|"image/x-raw-logitech"
argument_list|,
literal|"x.pxn"
argument_list|)
expr_stmt|;
name|assertTypeByName
argument_list|(
literal|"image/x-raw-casio"
argument_list|,
literal|"x.bay"
argument_list|)
expr_stmt|;
name|assertTypeByName
argument_list|(
literal|"image/x-raw-rawzor"
argument_list|,
literal|"x.rwz"
argument_list|)
expr_stmt|;
block|}
comment|/**      * Tests that we correctly detect the font types      */
specifier|public
name|void
name|testFontDetection
parameter_list|()
throws|throws
name|Exception
block|{
name|assertTypeByName
argument_list|(
literal|"application/x-font-adobe-metric"
argument_list|,
literal|"x.afm"
argument_list|)
expr_stmt|;
name|assertTypeByData
argument_list|(
literal|"application/x-font-adobe-metric"
argument_list|,
literal|"testAFM.afm"
argument_list|)
expr_stmt|;
name|assertTypeByName
argument_list|(
literal|"application/x-font-printer-metric"
argument_list|,
literal|"x.pfm"
argument_list|)
expr_stmt|;
comment|// TODO Get a sample .pfm file
name|assertTypeByData
argument_list|(
literal|"application/x-font-printer-metric"
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|0x00
block|,
literal|0x01
block|,
literal|256
operator|-
literal|0xb1
block|,
literal|0x0a
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x43
block|,
literal|0x6f
block|,
literal|0x70
block|,
literal|0x79
block|,
literal|0x72
block|,
literal|0x69
block|,
literal|0x67
block|,
literal|0x68
block|,
literal|0x74
block|,
literal|0x20
block|}
argument_list|)
expr_stmt|;
name|assertTypeByName
argument_list|(
literal|"application/x-font-type1"
argument_list|,
literal|"x.pfa"
argument_list|)
expr_stmt|;
comment|// TODO Get a sample .pfa file
name|assertTypeByData
argument_list|(
literal|"application/x-font-type1"
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|0x25
block|,
literal|0x21
block|,
literal|0x50
block|,
literal|0x53
block|,
literal|0x2d
block|,
literal|0x41
block|,
literal|0x64
block|,
literal|0x6f
block|,
literal|0x62
block|,
literal|0x65
block|,
literal|0x46
block|,
literal|0x6f
block|,
literal|0x6e
block|,
literal|0x74
block|,
literal|0x2d
block|,
literal|0x31
block|,
literal|0x2e
block|,
literal|0x30
block|,
literal|0x20
block|,
literal|0x20
block|,
literal|0x2d
block|,
literal|0x2a
block|,
literal|0x2d
block|,
literal|0x20
block|}
argument_list|)
expr_stmt|;
name|assertTypeByName
argument_list|(
literal|"application/x-font-type1"
argument_list|,
literal|"x.pfb"
argument_list|)
expr_stmt|;
comment|// TODO Get a sample .pfm file
name|assertTypeByData
argument_list|(
literal|"application/x-font-type1"
argument_list|,
operator|new
name|byte
index|[]
block|{
operator|-
literal|0x80
block|,
literal|0x01
block|,
literal|0x09
block|,
literal|0x05
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x25
block|,
literal|0x21
block|,
literal|0x50
block|,
literal|0x53
block|,
literal|0x2d
block|,
literal|0x41
block|,
literal|0x64
block|,
literal|0x6f
block|,
literal|0x62
block|,
literal|0x65
block|,
literal|0x46
block|,
literal|0x6f
block|,
literal|0x6e
block|,
literal|0x74
block|,
literal|0x2d
block|,
literal|0x31
block|,
literal|0x2e
block|,
literal|0x30
block|}
argument_list|)
expr_stmt|;
block|}
comment|/**      * Tests MimeTypes.getMimeType(URL), which examines both the byte header      * and, if necessary, the URL's extension.      */
specifier|public
name|void
name|testMimeDeterminationForTestDocuments
parameter_list|()
throws|throws
name|Exception
block|{
name|assertType
argument_list|(
literal|"text/html"
argument_list|,
literal|"testHTML.html"
argument_list|)
expr_stmt|;
name|assertType
argument_list|(
literal|"application/zip"
argument_list|,
literal|"test-documents.zip"
argument_list|)
expr_stmt|;
name|assertType
argument_list|(
literal|"text/html"
argument_list|,
literal|"testHTML_utf8.html"
argument_list|)
expr_stmt|;
name|assertType
argument_list|(
literal|"application/vnd.oasis.opendocument.text"
argument_list|,
literal|"testOpenOffice2.odt"
argument_list|)
expr_stmt|;
name|assertType
argument_list|(
literal|"application/pdf"
argument_list|,
literal|"testPDF.pdf"
argument_list|)
expr_stmt|;
name|assertType
argument_list|(
literal|"application/rtf"
argument_list|,
literal|"testRTF.rtf"
argument_list|)
expr_stmt|;
name|assertType
argument_list|(
literal|"text/plain"
argument_list|,
literal|"testTXT.txt"
argument_list|)
expr_stmt|;
name|assertType
argument_list|(
literal|"application/xml"
argument_list|,
literal|"testXML.xml"
argument_list|)
expr_stmt|;
name|assertType
argument_list|(
literal|"audio/basic"
argument_list|,
literal|"testAU.au"
argument_list|)
expr_stmt|;
name|assertType
argument_list|(
literal|"audio/x-aiff"
argument_list|,
literal|"testAIFF.aif"
argument_list|)
expr_stmt|;
name|assertType
argument_list|(
literal|"audio/x-wav"
argument_list|,
literal|"testWAV.wav"
argument_list|)
expr_stmt|;
name|assertType
argument_list|(
literal|"audio/midi"
argument_list|,
literal|"testMID.mid"
argument_list|)
expr_stmt|;
name|assertType
argument_list|(
literal|"application/x-msaccess"
argument_list|,
literal|"testACCESS.mdb"
argument_list|)
expr_stmt|;
name|assertType
argument_list|(
literal|"application/x-font-ttf"
argument_list|,
literal|"testTrueType.ttf"
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|assertType
parameter_list|(
name|String
name|expected
parameter_list|,
name|String
name|filename
parameter_list|)
throws|throws
name|Exception
block|{
name|InputStream
name|stream
init|=
name|TestMimeTypes
operator|.
name|class
operator|.
name|getResourceAsStream
argument_list|(
literal|"/test-documents/"
operator|+
name|filename
argument_list|)
decl_stmt|;
try|try
block|{
name|Metadata
name|metadata
init|=
operator|new
name|Metadata
argument_list|()
decl_stmt|;
name|metadata
operator|.
name|set
argument_list|(
name|Metadata
operator|.
name|RESOURCE_NAME_KEY
argument_list|,
name|filename
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|repo
operator|.
name|detect
argument_list|(
name|stream
argument_list|,
name|metadata
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|stream
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|assertTypeByName
parameter_list|(
name|String
name|expected
parameter_list|,
name|String
name|filename
parameter_list|)
throws|throws
name|IOException
block|{
name|Metadata
name|metadata
init|=
operator|new
name|Metadata
argument_list|()
decl_stmt|;
name|metadata
operator|.
name|set
argument_list|(
name|Metadata
operator|.
name|RESOURCE_NAME_KEY
argument_list|,
name|filename
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|repo
operator|.
name|detect
argument_list|(
literal|null
argument_list|,
name|metadata
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|assertTypeByData
parameter_list|(
name|String
name|expected
parameter_list|,
name|String
name|filename
parameter_list|)
throws|throws
name|IOException
block|{
name|InputStream
name|stream
init|=
name|TestMimeTypes
operator|.
name|class
operator|.
name|getResourceAsStream
argument_list|(
literal|"/test-documents/"
operator|+
name|filename
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Test file not found: "
operator|+
name|filename
argument_list|,
name|stream
argument_list|)
expr_stmt|;
try|try
block|{
name|Metadata
name|metadata
init|=
operator|new
name|Metadata
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|repo
operator|.
name|detect
argument_list|(
name|stream
argument_list|,
name|metadata
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|stream
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|assertTypeByData
parameter_list|(
name|String
name|expected
parameter_list|,
name|byte
index|[]
name|data
parameter_list|)
throws|throws
name|IOException
block|{
name|InputStream
name|stream
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|data
argument_list|)
decl_stmt|;
try|try
block|{
name|Metadata
name|metadata
init|=
operator|new
name|Metadata
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|repo
operator|.
name|detect
argument_list|(
name|stream
argument_list|,
name|metadata
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|stream
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|assertTypeByNameAndData
parameter_list|(
name|String
name|expected
parameter_list|,
name|String
name|filename
parameter_list|)
throws|throws
name|IOException
block|{
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|getTypeByNameAndData
argument_list|(
name|filename
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|MediaType
name|getTypeByNameAndData
parameter_list|(
name|String
name|filename
parameter_list|)
throws|throws
name|IOException
block|{
name|InputStream
name|stream
init|=
name|TestMimeTypes
operator|.
name|class
operator|.
name|getResourceAsStream
argument_list|(
literal|"/test-documents/"
operator|+
name|filename
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Test document not found: "
operator|+
name|filename
argument_list|,
name|stream
argument_list|)
expr_stmt|;
try|try
block|{
name|Metadata
name|metadata
init|=
operator|new
name|Metadata
argument_list|()
decl_stmt|;
name|metadata
operator|.
name|set
argument_list|(
name|Metadata
operator|.
name|RESOURCE_NAME_KEY
argument_list|,
name|filename
argument_list|)
expr_stmt|;
return|return
name|repo
operator|.
name|detect
argument_list|(
name|stream
argument_list|,
name|metadata
argument_list|)
return|;
block|}
finally|finally
block|{
name|stream
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

