begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/* * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|mime
package|;
end_package

begin_comment
comment|// Junit imports
end_comment

begin_import
import|import static
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
operator|.
name|UTF_16BE
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
operator|.
name|UTF_16LE
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
operator|.
name|UTF_8
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotSame
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|Tika
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|config
operator|.
name|TikaConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|metadata
operator|.
name|Metadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  *   * Test Suite for the {@link MimeTypes} repository.  *   */
end_comment

begin_class
specifier|public
class|class
name|TestMimeTypes
block|{
specifier|private
name|Tika
name|tika
decl_stmt|;
specifier|private
name|MimeTypes
name|repo
decl_stmt|;
specifier|private
name|URL
name|u
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|File
name|f
init|=
operator|new
name|File
argument_list|(
literal|"/a/b/c/x.pdf"
argument_list|)
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|TikaConfig
name|config
init|=
name|TikaConfig
operator|.
name|getDefaultConfig
argument_list|()
decl_stmt|;
name|repo
operator|=
name|config
operator|.
name|getMimeRepository
argument_list|()
expr_stmt|;
name|tika
operator|=
operator|new
name|Tika
argument_list|(
name|config
argument_list|)
expr_stmt|;
name|u
operator|=
operator|new
name|URL
argument_list|(
literal|"http://mydomain.com/x.pdf?x=y"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCaseSensitivity
parameter_list|()
block|{
name|String
name|type
init|=
name|tika
operator|.
name|detect
argument_list|(
literal|"test.PDF"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|type
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|type
argument_list|,
name|tika
operator|.
name|detect
argument_list|(
literal|"test.pdf"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|type
argument_list|,
name|tika
operator|.
name|detect
argument_list|(
literal|"test.PdF"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|type
argument_list|,
name|tika
operator|.
name|detect
argument_list|(
literal|"test.pdF"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNetCDF
parameter_list|()
throws|throws
name|Exception
block|{
name|assertTypeByData
argument_list|(
literal|"application/x-netcdf"
argument_list|,
literal|"sresa1b_ncar_ccsm3_0_run1_200001.nc"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLoadMimeTypes
parameter_list|()
throws|throws
name|MimeTypeException
block|{
name|assertNotNull
argument_list|(
name|repo
operator|.
name|forName
argument_list|(
literal|"application/octet-stream"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|repo
operator|.
name|forName
argument_list|(
literal|"text/x-tex"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Tests MIME type determination based solely on the URL's extension.      */
annotation|@
name|Test
specifier|public
name|void
name|testGuessMimeTypes
parameter_list|()
throws|throws
name|Exception
block|{
name|assertTypeByName
argument_list|(
literal|"application/pdf"
argument_list|,
literal|"x.pdf"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"application/pdf"
argument_list|,
name|tika
operator|.
name|detect
argument_list|(
name|u
operator|.
name|toExternalForm
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"application/pdf"
argument_list|,
name|tika
operator|.
name|detect
argument_list|(
name|f
operator|.
name|getPath
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTypeByName
argument_list|(
literal|"text/plain"
argument_list|,
literal|"x.txt"
argument_list|)
expr_stmt|;
name|assertTypeByName
argument_list|(
literal|"text/html"
argument_list|,
literal|"x.htm"
argument_list|)
expr_stmt|;
name|assertTypeByName
argument_list|(
literal|"text/html"
argument_list|,
literal|"x.html"
argument_list|)
expr_stmt|;
name|assertTypeByName
argument_list|(
literal|"application/xhtml+xml"
argument_list|,
literal|"x.xhtml"
argument_list|)
expr_stmt|;
name|assertTypeByName
argument_list|(
literal|"application/xml"
argument_list|,
literal|"x.xml"
argument_list|)
expr_stmt|;
name|assertTypeByName
argument_list|(
literal|"application/zip"
argument_list|,
literal|"x.zip"
argument_list|)
expr_stmt|;
name|assertTypeByName
argument_list|(
literal|"application/vnd.oasis.opendocument.text"
argument_list|,
literal|"x.odt"
argument_list|)
expr_stmt|;
name|assertTypeByName
argument_list|(
literal|"application/octet-stream"
argument_list|,
literal|"x.unknown"
argument_list|)
expr_stmt|;
comment|// Test for the MS Office media types and file extensions listed in
comment|// http://blogs.msdn.com/vsofficedeveloper/pages/Office-2007-Open-XML-MIME-Types.aspx
name|assertTypeByName
argument_list|(
literal|"application/msword"
argument_list|,
literal|"x.doc"
argument_list|)
expr_stmt|;
name|assertTypeByName
argument_list|(
literal|"application/msword"
argument_list|,
literal|"x.dot"
argument_list|)
expr_stmt|;
name|assertTypeByName
argument_list|(
literal|"application/vnd.openxmlformats-officedocument.wordprocessingml.document"
argument_list|,
literal|"x.docx"
argument_list|)
expr_stmt|;
name|assertTypeByName
argument_list|(
literal|"application/vnd.openxmlformats-officedocument.wordprocessingml.template"
argument_list|,
literal|"x.dotx"
argument_list|)
expr_stmt|;
name|assertTypeByName
argument_list|(
literal|"application/vnd.ms-word.document.macroenabled.12"
argument_list|,
literal|"x.docm"
argument_list|)
expr_stmt|;
name|assertTypeByName
argument_list|(
literal|"application/vnd.ms-word.template.macroenabled.12"
argument_list|,
literal|"x.dotm"
argument_list|)
expr_stmt|;
name|assertTypeByName
argument_list|(
literal|"application/vnd.ms-excel"
argument_list|,
literal|"x.xls"
argument_list|)
expr_stmt|;
name|assertTypeByName
argument_list|(
literal|"application/vnd.ms-excel"
argument_list|,
literal|"x.xlt"
argument_list|)
expr_stmt|;
name|assertTypeByName
argument_list|(
literal|"application/vnd.ms-excel"
argument_list|,
literal|"x.xla"
argument_list|)
expr_stmt|;
name|assertTypeByName
argument_list|(
literal|"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
argument_list|,
literal|"x.xlsx"
argument_list|)
expr_stmt|;
name|assertTypeByName
argument_list|(
literal|"application/vnd.openxmlformats-officedocument.spreadsheetml.template"
argument_list|,
literal|"x.xltx"
argument_list|)
expr_stmt|;
name|assertTypeByName
argument_list|(
literal|"application/vnd.ms-excel.sheet.macroenabled.12"
argument_list|,
literal|"x.xlsm"
argument_list|)
expr_stmt|;
name|assertTypeByName
argument_list|(
literal|"application/vnd.ms-excel.template.macroenabled.12"
argument_list|,
literal|"x.xltm"
argument_list|)
expr_stmt|;
name|assertTypeByName
argument_list|(
literal|"application/vnd.ms-excel.addin.macroenabled.12"
argument_list|,
literal|"x.xlam"
argument_list|)
expr_stmt|;
name|assertTypeByName
argument_list|(
literal|"application/vnd.ms-excel.sheet.binary.macroenabled.12"
argument_list|,
literal|"x.xlsb"
argument_list|)
expr_stmt|;
name|assertTypeByName
argument_list|(
literal|"application/vnd.ms-powerpoint"
argument_list|,
literal|"x.ppt"
argument_list|)
expr_stmt|;
name|assertTypeByName
argument_list|(
literal|"application/vnd.ms-powerpoint"
argument_list|,
literal|"x.pot"
argument_list|)
expr_stmt|;
name|assertTypeByName
argument_list|(
literal|"application/vnd.ms-powerpoint"
argument_list|,
literal|"x.pps"
argument_list|)
expr_stmt|;
name|assertTypeByName
argument_list|(
literal|"application/vnd.ms-powerpoint"
argument_list|,
literal|"x.ppa"
argument_list|)
expr_stmt|;
name|assertTypeByName
argument_list|(
literal|"application/vnd.openxmlformats-officedocument.presentationml.presentation"
argument_list|,
literal|"x.pptx"
argument_list|)
expr_stmt|;
name|assertTypeByName
argument_list|(
literal|"application/vnd.openxmlformats-officedocument.presentationml.template"
argument_list|,
literal|"x.potx"
argument_list|)
expr_stmt|;
name|assertTypeByName
argument_list|(
literal|"application/vnd.openxmlformats-officedocument.presentationml.slideshow"
argument_list|,
literal|"x.ppsx"
argument_list|)
expr_stmt|;
name|assertTypeByName
argument_list|(
literal|"application/vnd.ms-powerpoint.addin.macroenabled.12"
argument_list|,
literal|"x.ppam"
argument_list|)
expr_stmt|;
name|assertTypeByName
argument_list|(
literal|"application/vnd.ms-powerpoint.presentation.macroenabled.12"
argument_list|,
literal|"x.pptm"
argument_list|)
expr_stmt|;
name|assertTypeByName
argument_list|(
literal|"application/vnd.ms-powerpoint.template.macroenabled.12"
argument_list|,
literal|"x.potm"
argument_list|)
expr_stmt|;
name|assertTypeByName
argument_list|(
literal|"application/vnd.ms-powerpoint.slideshow.macroenabled.12"
argument_list|,
literal|"x.ppsm"
argument_list|)
expr_stmt|;
block|}
comment|/**      * Note - detecting container formats by mime magic is very very      *  iffy, as we can't be sure where things will end up.      * People really ought to use the container aware detection...      */
annotation|@
name|Test
specifier|public
name|void
name|testOLE2Detection
parameter_list|()
throws|throws
name|Exception
block|{
comment|// These have the properties block near the start, so our mime
comment|//  magic will spot them
name|assertTypeByData
argument_list|(
literal|"application/vnd.ms-excel"
argument_list|,
literal|"testEXCEL.xls"
argument_list|)
expr_stmt|;
comment|// This one quite legitimately doesn't have its properties block
comment|//  as one of the first couple of entries
comment|// As such, our mime magic can't figure it out...
name|assertTypeByData
argument_list|(
literal|"application/x-tika-msoffice"
argument_list|,
literal|"testWORD.doc"
argument_list|)
expr_stmt|;
name|assertTypeByData
argument_list|(
literal|"application/x-tika-msoffice"
argument_list|,
literal|"testPPT.ppt"
argument_list|)
expr_stmt|;
comment|// By name + data:
comment|// Those we got right to start with are fine
name|assertTypeByNameAndData
argument_list|(
literal|"application/vnd.ms-excel"
argument_list|,
literal|"testEXCEL.xls"
argument_list|)
expr_stmt|;
comment|// And the name lets us specialise the generic OOXML
comment|//  ones to their actual type
name|assertTypeByNameAndData
argument_list|(
literal|"application/vnd.ms-powerpoint"
argument_list|,
literal|"testPPT.ppt"
argument_list|)
expr_stmt|;
name|assertTypeByNameAndData
argument_list|(
literal|"application/msword"
argument_list|,
literal|"testWORD.doc"
argument_list|)
expr_stmt|;
block|}
comment|/**      * Files generated by Works 7.0 Spreadsheet application use the OLE2      * structure and resemble Excel files (they contain a "Workbook"). They are      * not Excel though. They are distinguished from Excel files with an      * additional top-level entry in below the root of the POI filesystem.      *       * @throws Exception      */
annotation|@
name|Test
specifier|public
name|void
name|testWorksSpreadsheetDetection
parameter_list|()
throws|throws
name|Exception
block|{
name|assertTypeDetection
argument_list|(
literal|"testWORKSSpreadsheet7.0.xlr"
argument_list|,
comment|// with name-only, everything should be all right
literal|"application/x-tika-msworks-spreadsheet"
argument_list|,
comment|// this is possible due to MimeTypes guessing the type
comment|// based on the WksSSWorkBook near the beginning of the
comment|// file
literal|"application/x-tika-msworks-spreadsheet"
argument_list|,
comment|// this is right, the magic-based detection works, there is
comment|// no need for the name-based detection to refine it
literal|"application/x-tika-msworks-spreadsheet"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testHFATypes
parameter_list|()
throws|throws
name|Exception
block|{
name|assertTypeByData
argument_list|(
literal|"application/x-erdas-hfa"
argument_list|,
literal|"testHFA.hfa"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testStarOfficeDetection
parameter_list|()
throws|throws
name|Exception
block|{
name|assertTypeDetection
argument_list|(
literal|"testVORCalcTemplate.vor"
argument_list|,
literal|"application/x-staroffice-template"
argument_list|,
literal|"application/vnd.stardivision.calc"
argument_list|,
literal|"application/vnd.stardivision.calc"
argument_list|)
expr_stmt|;
name|assertTypeDetection
argument_list|(
literal|"testVORDrawTemplate.vor"
argument_list|,
literal|"application/x-staroffice-template"
argument_list|,
literal|"application/vnd.stardivision.draw"
argument_list|,
literal|"application/vnd.stardivision.draw"
argument_list|)
expr_stmt|;
name|assertTypeDetection
argument_list|(
literal|"testVORImpressTemplate.vor"
argument_list|,
literal|"application/x-staroffice-template"
argument_list|,
literal|"application/vnd.stardivision.impress"
argument_list|,
literal|"application/vnd.stardivision.impress"
argument_list|)
expr_stmt|;
name|assertTypeDetection
argument_list|(
literal|"testVORWriterTemplate.vor"
argument_list|,
literal|"application/x-staroffice-template"
argument_list|,
literal|"application/vnd.stardivision.writer"
argument_list|,
literal|"application/vnd.stardivision.writer"
argument_list|)
expr_stmt|;
name|assertTypeDetection
argument_list|(
literal|"testStarOffice-5.2-calc.sdc"
argument_list|,
literal|"application/vnd.stardivision.calc"
argument_list|,
literal|"application/vnd.stardivision.calc"
argument_list|,
literal|"application/vnd.stardivision.calc"
argument_list|)
expr_stmt|;
name|assertTypeDetection
argument_list|(
literal|"testStarOffice-5.2-draw.sda"
argument_list|,
literal|"application/vnd.stardivision.draw"
argument_list|,
literal|"application/vnd.stardivision.draw"
argument_list|,
literal|"application/vnd.stardivision.draw"
argument_list|)
expr_stmt|;
name|assertTypeDetection
argument_list|(
literal|"testStarOffice-5.2-impress.sdd"
argument_list|,
literal|"application/vnd.stardivision.impress"
argument_list|,
literal|"application/vnd.stardivision.impress"
argument_list|,
literal|"application/vnd.stardivision.impress"
argument_list|)
expr_stmt|;
name|assertTypeDetection
argument_list|(
literal|"testStarOffice-5.2-writer.sdw"
argument_list|,
literal|"application/vnd.stardivision.writer"
argument_list|,
literal|"application/vnd.stardivision.writer"
argument_list|,
literal|"application/vnd.stardivision.writer"
argument_list|)
expr_stmt|;
block|}
comment|/**      * Files generated by Works Word Processor versions 3.0 and 4.0 use the      * OLE2 structure. They don't resemble Word though.      *       * @throws Exception      */
annotation|@
name|Test
specifier|public
name|void
name|testOldWorksWordProcessorDetection
parameter_list|()
throws|throws
name|Exception
block|{
name|assertTypeDetection
argument_list|(
literal|"testWORKSWordProcessor3.0.wps"
argument_list|,
comment|// .wps is just like any other works extension
literal|"application/vnd.ms-works"
argument_list|,
comment|// this is due to MatOST substring
literal|"application/vnd.ms-works"
argument_list|,
comment|// magic-based detection works, no need to refine it
literal|"application/vnd.ms-works"
argument_list|)
expr_stmt|;
comment|// files in version 4.0 are no different from those in version 3.0
name|assertTypeDetection
argument_list|(
literal|"testWORKSWordProcessor4.0.wps"
argument_list|,
literal|"application/vnd.ms-works"
argument_list|,
literal|"application/vnd.ms-works"
argument_list|,
literal|"application/vnd.ms-works"
argument_list|)
expr_stmt|;
block|}
comment|/**      * Files from Excel 2 through 4 are based on the BIFF record      *  structure, but without a wrapping OLE2 structure.      * Excel 5 and Excel 95+ work on OLE2      */
annotation|@
name|Test
specifier|public
name|void
name|testOldExcel
parameter_list|()
throws|throws
name|Exception
block|{
comment|// With just a name, we'll think everything's a new Excel file
name|assertTypeByName
argument_list|(
literal|"application/vnd.ms-excel"
argument_list|,
literal|"testEXCEL_4.xls"
argument_list|)
expr_stmt|;
name|assertTypeByName
argument_list|(
literal|"application/vnd.ms-excel"
argument_list|,
literal|"testEXCEL_5.xls"
argument_list|)
expr_stmt|;
name|assertTypeByName
argument_list|(
literal|"application/vnd.ms-excel"
argument_list|,
literal|"testEXCEL_95.xls"
argument_list|)
expr_stmt|;
comment|// With data, we can work out if it's old or new style
name|assertTypeByData
argument_list|(
literal|"application/vnd.ms-excel.sheet.4"
argument_list|,
literal|"testEXCEL_4.xls"
argument_list|)
expr_stmt|;
name|assertTypeByData
argument_list|(
literal|"application/x-tika-msoffice"
argument_list|,
literal|"testEXCEL_5.xls"
argument_list|)
expr_stmt|;
name|assertTypeByData
argument_list|(
literal|"application/x-tika-msoffice"
argument_list|,
literal|"testEXCEL_95.xls"
argument_list|)
expr_stmt|;
name|assertTypeByNameAndData
argument_list|(
literal|"application/vnd.ms-excel.sheet.4"
argument_list|,
literal|"testEXCEL_4.xls"
argument_list|)
expr_stmt|;
name|assertTypeByNameAndData
argument_list|(
literal|"application/vnd.ms-excel"
argument_list|,
literal|"testEXCEL_5.xls"
argument_list|)
expr_stmt|;
name|assertTypeByNameAndData
argument_list|(
literal|"application/vnd.ms-excel"
argument_list|,
literal|"testEXCEL_95.xls"
argument_list|)
expr_stmt|;
block|}
comment|/**      * Note - detecting container formats by mime magic is very very      *  iffy, as we can't be sure where things will end up.      * People really ought to use the container aware detection...      */
annotation|@
name|Test
specifier|public
name|void
name|testOoxmlDetection
parameter_list|()
throws|throws
name|Exception
block|{
comment|// These two do luckily have [Content_Types].xml near the start,
comment|//  so our mime magic will spot them
name|assertTypeByData
argument_list|(
literal|"application/x-tika-ooxml"
argument_list|,
literal|"testEXCEL.xlsx"
argument_list|)
expr_stmt|;
name|assertTypeByData
argument_list|(
literal|"application/x-tika-ooxml"
argument_list|,
literal|"testPPT.pptx"
argument_list|)
expr_stmt|;
comment|// This one quite legitimately doesn't have its [Content_Types].xml
comment|//  file as one of the first couple of entries
comment|// As such, our mime magic can't figure it out...
name|assertTypeByData
argument_list|(
literal|"application/zip"
argument_list|,
literal|"testWORD.docx"
argument_list|)
expr_stmt|;
comment|// POI-generated files have the rels first not Content Types
name|assertTypeByData
argument_list|(
literal|"application/x-tika-ooxml"
argument_list|,
literal|"testEXCEL_poi.xlsx"
argument_list|)
expr_stmt|;
comment|// If we give the filename as well as the data, we can
comment|//  specialise the ooxml generic one to the correct type
name|assertTypeByNameAndData
argument_list|(
literal|"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
argument_list|,
literal|"testEXCEL.xlsx"
argument_list|)
expr_stmt|;
name|assertTypeByNameAndData
argument_list|(
literal|"application/vnd.openxmlformats-officedocument.presentationml.presentation"
argument_list|,
literal|"testPPT.pptx"
argument_list|)
expr_stmt|;
name|assertTypeByNameAndData
argument_list|(
literal|"application/vnd.openxmlformats-officedocument.wordprocessingml.document"
argument_list|,
literal|"testWORD.docx"
argument_list|)
expr_stmt|;
name|assertTypeByNameAndData
argument_list|(
literal|"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
argument_list|,
literal|"testEXCEL_poi.xlsx"
argument_list|)
expr_stmt|;
comment|// Test a few of the less usual ones
name|assertTypeByNameAndData
argument_list|(
literal|"application/vnd.ms-excel.sheet.binary.macroenabled.12"
argument_list|,
literal|"testEXCEL.xlsb"
argument_list|)
expr_stmt|;
name|assertTypeByNameAndData
argument_list|(
literal|"application/vnd.ms-powerpoint.presentation.macroenabled.12"
argument_list|,
literal|"testPPT.pptm"
argument_list|)
expr_stmt|;
name|assertTypeByNameAndData
argument_list|(
literal|"application/vnd.ms-powerpoint.template.macroenabled.12"
argument_list|,
literal|"testPPT.potm"
argument_list|)
expr_stmt|;
name|assertTypeByNameAndData
argument_list|(
literal|"application/vnd.ms-powerpoint.slideshow.macroenabled.12"
argument_list|,
literal|"testPPT.ppsm"
argument_list|)
expr_stmt|;
block|}
comment|/**      * Note - container based formats, needs container detection      *  to be properly correct      */
annotation|@
name|Test
specifier|public
name|void
name|testVisioDetection
parameter_list|()
throws|throws
name|Exception
block|{
comment|// By Name, should get it right
name|assertTypeByName
argument_list|(
literal|"application/vnd.visio"
argument_list|,
literal|"testVISIO.vsd"
argument_list|)
expr_stmt|;
name|assertTypeByName
argument_list|(
literal|"application/vnd.ms-visio.drawing.macroenabled.12"
argument_list|,
literal|"testVISIO.vsdm"
argument_list|)
expr_stmt|;
name|assertTypeByName
argument_list|(
literal|"application/vnd.ms-visio.drawing"
argument_list|,
literal|"testVISIO.vsdx"
argument_list|)
expr_stmt|;
name|assertTypeByName
argument_list|(
literal|"application/vnd.ms-visio.stencil.macroenabled.12"
argument_list|,
literal|"testVISIO.vssm"
argument_list|)
expr_stmt|;
name|assertTypeByName
argument_list|(
literal|"application/vnd.ms-visio.stencil"
argument_list|,
literal|"testVISIO.vssx"
argument_list|)
expr_stmt|;
name|assertTypeByName
argument_list|(
literal|"application/vnd.ms-visio.template.macroenabled.12"
argument_list|,
literal|"testVISIO.vstm"
argument_list|)
expr_stmt|;
name|assertTypeByName
argument_list|(
literal|"application/vnd.ms-visio.template"
argument_list|,
literal|"testVISIO.vstx"
argument_list|)
expr_stmt|;
comment|// By Name and Data, should get it right
name|assertTypeByNameAndData
argument_list|(
literal|"application/vnd.visio"
argument_list|,
literal|"testVISIO.vsd"
argument_list|)
expr_stmt|;
name|assertTypeByNameAndData
argument_list|(
literal|"application/vnd.ms-visio.drawing.macroenabled.12"
argument_list|,
literal|"testVISIO.vsdm"
argument_list|)
expr_stmt|;
name|assertTypeByNameAndData
argument_list|(
literal|"application/vnd.ms-visio.drawing"
argument_list|,
literal|"testVISIO.vsdx"
argument_list|)
expr_stmt|;
name|assertTypeByNameAndData
argument_list|(
literal|"application/vnd.ms-visio.stencil.macroenabled.12"
argument_list|,
literal|"testVISIO.vssm"
argument_list|)
expr_stmt|;
name|assertTypeByNameAndData
argument_list|(
literal|"application/vnd.ms-visio.stencil"
argument_list|,
literal|"testVISIO.vssx"
argument_list|)
expr_stmt|;
name|assertTypeByNameAndData
argument_list|(
literal|"application/vnd.ms-visio.template.macroenabled.12"
argument_list|,
literal|"testVISIO.vstm"
argument_list|)
expr_stmt|;
name|assertTypeByNameAndData
argument_list|(
literal|"application/vnd.ms-visio.template"
argument_list|,
literal|"testVISIO.vstx"
argument_list|)
expr_stmt|;
comment|// By Data only, will get the container parent
name|assertTypeByData
argument_list|(
literal|"application/x-tika-msoffice"
argument_list|,
literal|"testVISIO.vsd"
argument_list|)
expr_stmt|;
name|assertTypeByData
argument_list|(
literal|"application/x-tika-ooxml"
argument_list|,
literal|"testVISIO.vsdm"
argument_list|)
expr_stmt|;
name|assertTypeByData
argument_list|(
literal|"application/x-tika-ooxml"
argument_list|,
literal|"testVISIO.vsdx"
argument_list|)
expr_stmt|;
name|assertTypeByData
argument_list|(
literal|"application/x-tika-ooxml"
argument_list|,
literal|"testVISIO.vssm"
argument_list|)
expr_stmt|;
name|assertTypeByData
argument_list|(
literal|"application/x-tika-ooxml"
argument_list|,
literal|"testVISIO.vssx"
argument_list|)
expr_stmt|;
name|assertTypeByData
argument_list|(
literal|"application/x-tika-ooxml"
argument_list|,
literal|"testVISIO.vstm"
argument_list|)
expr_stmt|;
name|assertTypeByData
argument_list|(
literal|"application/x-tika-ooxml"
argument_list|,
literal|"testVISIO.vstx"
argument_list|)
expr_stmt|;
block|}
comment|/**      * Note - detecting container formats by mime magic is very very      *  iffy, as we can't be sure where things will end up.      * People really ought to use the container aware detection...      */
annotation|@
name|Test
specifier|public
name|void
name|testIWorkDetection
parameter_list|()
throws|throws
name|Exception
block|{
comment|// By name is easy
name|assertTypeByName
argument_list|(
literal|"application/vnd.apple.keynote"
argument_list|,
literal|"testKeynote.key"
argument_list|)
expr_stmt|;
name|assertTypeByName
argument_list|(
literal|"application/vnd.apple.numbers"
argument_list|,
literal|"testNumbers.numbers"
argument_list|)
expr_stmt|;
name|assertTypeByName
argument_list|(
literal|"application/vnd.apple.pages"
argument_list|,
literal|"testPages.pages"
argument_list|)
expr_stmt|;
comment|// We can't do it by data, as we'd need to unpack
comment|//  the zip file to check the XML
name|assertTypeByData
argument_list|(
literal|"application/zip"
argument_list|,
literal|"testKeynote.key"
argument_list|)
expr_stmt|;
name|assertTypeByNameAndData
argument_list|(
literal|"application/vnd.apple.keynote"
argument_list|,
literal|"testKeynote.key"
argument_list|)
expr_stmt|;
name|assertTypeByNameAndData
argument_list|(
literal|"application/vnd.apple.numbers"
argument_list|,
literal|"testNumbers.numbers"
argument_list|)
expr_stmt|;
name|assertTypeByNameAndData
argument_list|(
literal|"application/vnd.apple.pages"
argument_list|,
literal|"testPages.pages"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testArchiveDetection
parameter_list|()
throws|throws
name|Exception
block|{
name|assertTypeByName
argument_list|(
literal|"application/x-archive"
argument_list|,
literal|"test.ar"
argument_list|)
expr_stmt|;
name|assertTypeByName
argument_list|(
literal|"application/zip"
argument_list|,
literal|"test.zip"
argument_list|)
expr_stmt|;
name|assertTypeByName
argument_list|(
literal|"application/x-tar"
argument_list|,
literal|"test.tar"
argument_list|)
expr_stmt|;
name|assertTypeByName
argument_list|(
literal|"application/gzip"
argument_list|,
literal|"test.tgz"
argument_list|)
expr_stmt|;
comment|// See GZIP, not tar contents of it
name|assertTypeByName
argument_list|(
literal|"application/x-cpio"
argument_list|,
literal|"test.cpio"
argument_list|)
expr_stmt|;
name|assertTypeByName
argument_list|(
literal|"application/vnd.ms-cab-compressed"
argument_list|,
literal|"test.cab"
argument_list|)
expr_stmt|;
comment|// TODO Add an example .deb and .udeb, then check these
comment|// Check the mime magic patterns for them work too
name|assertTypeByData
argument_list|(
literal|"application/x-archive"
argument_list|,
literal|"testARofText.ar"
argument_list|)
expr_stmt|;
name|assertTypeByData
argument_list|(
literal|"application/x-archive"
argument_list|,
literal|"testARofSND.ar"
argument_list|)
expr_stmt|;
name|assertTypeByData
argument_list|(
literal|"application/zip"
argument_list|,
literal|"test-documents.zip"
argument_list|)
expr_stmt|;
name|assertTypeByData
argument_list|(
literal|"application/x-gtar"
argument_list|,
literal|"test-documents.tar"
argument_list|)
expr_stmt|;
comment|// GNU TAR
name|assertTypeByData
argument_list|(
literal|"application/gzip"
argument_list|,
literal|"test-documents.tgz"
argument_list|)
expr_stmt|;
comment|// See GZIP, not tar contents of it
name|assertTypeByData
argument_list|(
literal|"application/x-cpio"
argument_list|,
literal|"test-documents.cpio"
argument_list|)
expr_stmt|;
name|assertTypeByData
argument_list|(
literal|"application/vnd.ms-cab-compressed"
argument_list|,
literal|"test-documents.cab"
argument_list|)
expr_stmt|;
comment|// For spanned zip files, the .zip file doesn't have the header, it's the other parts
name|assertTypeByData
argument_list|(
literal|"application/octet-stream"
argument_list|,
literal|"test-documents-spanned.zip"
argument_list|)
expr_stmt|;
name|assertTypeByData
argument_list|(
literal|"application/zip"
argument_list|,
literal|"test-documents-spanned.z01"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFeedsDetection
parameter_list|()
throws|throws
name|Exception
block|{
name|assertType
argument_list|(
literal|"application/rss+xml"
argument_list|,
literal|"rsstest.rss"
argument_list|)
expr_stmt|;
name|assertType
argument_list|(
literal|"application/atom+xml"
argument_list|,
literal|"testATOM.atom"
argument_list|)
expr_stmt|;
name|assertTypeByData
argument_list|(
literal|"application/rss+xml"
argument_list|,
literal|"rsstest.rss"
argument_list|)
expr_stmt|;
name|assertTypeByName
argument_list|(
literal|"application/rss+xml"
argument_list|,
literal|"rsstest.rss"
argument_list|)
expr_stmt|;
name|assertTypeByData
argument_list|(
literal|"application/atom+xml"
argument_list|,
literal|"testATOM.atom"
argument_list|)
expr_stmt|;
name|assertTypeByName
argument_list|(
literal|"application/atom+xml"
argument_list|,
literal|"testATOM.atom"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFitsDetection
parameter_list|()
throws|throws
name|Exception
block|{
comment|// FITS image created using imagemagick convert of testJPEG.jpg
name|assertType
argument_list|(
literal|"application/fits"
argument_list|,
literal|"testFITS.fits"
argument_list|)
expr_stmt|;
name|assertTypeByData
argument_list|(
literal|"application/fits"
argument_list|,
literal|"testFITS.fits"
argument_list|)
expr_stmt|;
name|assertTypeByName
argument_list|(
literal|"application/fits"
argument_list|,
literal|"testFITS.fits"
argument_list|)
expr_stmt|;
comment|// Shorter Header pattern (16 rather than 20 spaces)
name|assertTypeByData
argument_list|(
literal|"application/fits"
argument_list|,
literal|"testFITS_ShorterHeader.fits"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testJpegDetection
parameter_list|()
throws|throws
name|Exception
block|{
name|assertType
argument_list|(
literal|"image/jpeg"
argument_list|,
literal|"testJPEG.jpg"
argument_list|)
expr_stmt|;
name|assertTypeByData
argument_list|(
literal|"image/jpeg"
argument_list|,
literal|"testJPEG.jpg"
argument_list|)
expr_stmt|;
name|assertTypeByName
argument_list|(
literal|"image/jpeg"
argument_list|,
literal|"x.jpg"
argument_list|)
expr_stmt|;
name|assertTypeByName
argument_list|(
literal|"image/jpeg"
argument_list|,
literal|"x.JPG"
argument_list|)
expr_stmt|;
name|assertTypeByName
argument_list|(
literal|"image/jpeg"
argument_list|,
literal|"x.jpeg"
argument_list|)
expr_stmt|;
name|assertTypeByName
argument_list|(
literal|"image/jpeg"
argument_list|,
literal|"x.JPEG"
argument_list|)
expr_stmt|;
name|assertTypeByName
argument_list|(
literal|"image/jpeg"
argument_list|,
literal|"x.jpe"
argument_list|)
expr_stmt|;
name|assertTypeByName
argument_list|(
literal|"image/jpeg"
argument_list|,
literal|"x.jif"
argument_list|)
expr_stmt|;
name|assertTypeByName
argument_list|(
literal|"image/jpeg"
argument_list|,
literal|"x.jfif"
argument_list|)
expr_stmt|;
name|assertTypeByName
argument_list|(
literal|"image/jpeg"
argument_list|,
literal|"x.jfi"
argument_list|)
expr_stmt|;
name|assertType
argument_list|(
literal|"image/jp2"
argument_list|,
literal|"testJPEG.jp2"
argument_list|)
expr_stmt|;
name|assertTypeByData
argument_list|(
literal|"image/jp2"
argument_list|,
literal|"testJPEG.jp2"
argument_list|)
expr_stmt|;
name|assertTypeByName
argument_list|(
literal|"image/jp2"
argument_list|,
literal|"x.jp2"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBpgDetection
parameter_list|()
throws|throws
name|Exception
block|{
name|assertType
argument_list|(
literal|"image/x-bpg"
argument_list|,
literal|"testBPG.bpg"
argument_list|)
expr_stmt|;
name|assertTypeByData
argument_list|(
literal|"image/x-bpg"
argument_list|,
literal|"testBPG.bpg"
argument_list|)
expr_stmt|;
name|assertTypeByData
argument_list|(
literal|"image/x-bpg"
argument_list|,
literal|"testBPG_commented.bpg"
argument_list|)
expr_stmt|;
name|assertTypeByName
argument_list|(
literal|"image/x-bpg"
argument_list|,
literal|"x.bpg"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIcnsDetection
parameter_list|()
throws|throws
name|Exception
block|{
name|assertType
argument_list|(
literal|"image/icns"
argument_list|,
literal|"testICNS.icns"
argument_list|)
expr_stmt|;
name|assertTypeByData
argument_list|(
literal|"image/icns"
argument_list|,
literal|"testICNS_basic.icns"
argument_list|)
expr_stmt|;
name|assertTypeByData
argument_list|(
literal|"image/icns"
argument_list|,
literal|"testICNS.icns"
argument_list|)
expr_stmt|;
name|assertTypeByName
argument_list|(
literal|"image/icns"
argument_list|,
literal|"testICNS.icns"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTiffDetection
parameter_list|()
throws|throws
name|Exception
block|{
name|assertType
argument_list|(
literal|"image/tiff"
argument_list|,
literal|"testTIFF.tif"
argument_list|)
expr_stmt|;
name|assertTypeByData
argument_list|(
literal|"image/tiff"
argument_list|,
literal|"testTIFF.tif"
argument_list|)
expr_stmt|;
name|assertTypeByName
argument_list|(
literal|"image/tiff"
argument_list|,
literal|"x.tiff"
argument_list|)
expr_stmt|;
name|assertTypeByName
argument_list|(
literal|"image/tiff"
argument_list|,
literal|"x.tif"
argument_list|)
expr_stmt|;
name|assertTypeByName
argument_list|(
literal|"image/tiff"
argument_list|,
literal|"x.TIF"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGifDetection
parameter_list|()
throws|throws
name|Exception
block|{
name|assertType
argument_list|(
literal|"image/gif"
argument_list|,
literal|"testGIF.gif"
argument_list|)
expr_stmt|;
name|assertTypeByData
argument_list|(
literal|"image/gif"
argument_list|,
literal|"testGIF.gif"
argument_list|)
expr_stmt|;
name|assertTypeByName
argument_list|(
literal|"image/gif"
argument_list|,
literal|"x.gif"
argument_list|)
expr_stmt|;
name|assertTypeByName
argument_list|(
literal|"image/gif"
argument_list|,
literal|"x.GIF"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPngDetection
parameter_list|()
throws|throws
name|Exception
block|{
name|assertType
argument_list|(
literal|"image/png"
argument_list|,
literal|"testPNG.png"
argument_list|)
expr_stmt|;
name|assertTypeByData
argument_list|(
literal|"image/png"
argument_list|,
literal|"testPNG.png"
argument_list|)
expr_stmt|;
name|assertTypeByName
argument_list|(
literal|"image/png"
argument_list|,
literal|"x.png"
argument_list|)
expr_stmt|;
name|assertTypeByName
argument_list|(
literal|"image/png"
argument_list|,
literal|"x.PNG"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testWEBPDetection
parameter_list|()
throws|throws
name|Exception
block|{
name|assertType
argument_list|(
literal|"image/webp"
argument_list|,
literal|"testWEBP.webp"
argument_list|)
expr_stmt|;
name|assertTypeByData
argument_list|(
literal|"image/webp"
argument_list|,
literal|"testWEBP.webp"
argument_list|)
expr_stmt|;
name|assertTypeByName
argument_list|(
literal|"image/webp"
argument_list|,
literal|"x.webp"
argument_list|)
expr_stmt|;
name|assertTypeByName
argument_list|(
literal|"image/webp"
argument_list|,
literal|"x.WEBP"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBmpDetection
parameter_list|()
throws|throws
name|Exception
block|{
name|assertType
argument_list|(
literal|"image/bmp"
argument_list|,
literal|"testBMP.bmp"
argument_list|)
expr_stmt|;
name|assertTypeByData
argument_list|(
literal|"image/bmp"
argument_list|,
literal|"testBMP.bmp"
argument_list|)
expr_stmt|;
name|assertTypeByName
argument_list|(
literal|"image/bmp"
argument_list|,
literal|"x.bmp"
argument_list|)
expr_stmt|;
name|assertTypeByName
argument_list|(
literal|"image/bmp"
argument_list|,
literal|"x.BMP"
argument_list|)
expr_stmt|;
name|assertTypeByName
argument_list|(
literal|"image/bmp"
argument_list|,
literal|"x.dib"
argument_list|)
expr_stmt|;
name|assertTypeByName
argument_list|(
literal|"image/bmp"
argument_list|,
literal|"x.DIB"
argument_list|)
expr_stmt|;
comment|//false positive check -- contains part of BMP signature
name|assertType
argument_list|(
literal|"text/plain"
argument_list|,
literal|"testBMPfp.txt"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPnmDetection
parameter_list|()
throws|throws
name|Exception
block|{
name|assertType
argument_list|(
literal|"image/x-portable-bitmap"
argument_list|,
literal|"testPBM.pbm"
argument_list|)
expr_stmt|;
name|assertType
argument_list|(
literal|"image/x-portable-graymap"
argument_list|,
literal|"testPGM.pgm"
argument_list|)
expr_stmt|;
name|assertType
argument_list|(
literal|"image/x-portable-pixmap"
argument_list|,
literal|"testPPM.ppm"
argument_list|)
expr_stmt|;
name|assertTypeByData
argument_list|(
literal|"image/x-portable-bitmap"
argument_list|,
literal|"testPBM.pbm"
argument_list|)
expr_stmt|;
name|assertTypeByData
argument_list|(
literal|"image/x-portable-graymap"
argument_list|,
literal|"testPGM.pgm"
argument_list|)
expr_stmt|;
name|assertTypeByData
argument_list|(
literal|"image/x-portable-pixmap"
argument_list|,
literal|"testPPM.ppm"
argument_list|)
expr_stmt|;
name|assertTypeByName
argument_list|(
literal|"image/x-portable-anymap"
argument_list|,
literal|"x.pnm"
argument_list|)
expr_stmt|;
name|assertTypeByName
argument_list|(
literal|"image/x-portable-anymap"
argument_list|,
literal|"x.PNM"
argument_list|)
expr_stmt|;
name|assertTypeByName
argument_list|(
literal|"image/x-portable-bitmap"
argument_list|,
literal|"x.pbm"
argument_list|)
expr_stmt|;
name|assertTypeByName
argument_list|(
literal|"image/x-portable-bitmap"
argument_list|,
literal|"x.PBM"
argument_list|)
expr_stmt|;
name|assertTypeByName
argument_list|(
literal|"image/x-portable-graymap"
argument_list|,
literal|"x.pgm"
argument_list|)
expr_stmt|;
name|assertTypeByName
argument_list|(
literal|"image/x-portable-graymap"
argument_list|,
literal|"x.PGM"
argument_list|)
expr_stmt|;
name|assertTypeByName
argument_list|(
literal|"image/x-portable-pixmap"
argument_list|,
literal|"x.ppm"
argument_list|)
expr_stmt|;
name|assertTypeByName
argument_list|(
literal|"image/x-portable-pixmap"
argument_list|,
literal|"x.PPM"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPictDetection
parameter_list|()
throws|throws
name|Exception
block|{
name|assertType
argument_list|(
literal|"image/x-pict"
argument_list|,
literal|"testPICT.pct"
argument_list|)
expr_stmt|;
name|assertTypeByData
argument_list|(
literal|"image/x-pict"
argument_list|,
literal|"testPICT.pct"
argument_list|)
expr_stmt|;
name|assertTypeByName
argument_list|(
literal|"image/x-pict"
argument_list|,
literal|"x.pic"
argument_list|)
expr_stmt|;
name|assertTypeByName
argument_list|(
literal|"image/x-pict"
argument_list|,
literal|"x.PCT"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCgmDetection
parameter_list|()
throws|throws
name|Exception
block|{
comment|// TODO: Need a test image file
name|assertTypeByName
argument_list|(
literal|"image/cgm"
argument_list|,
literal|"x.cgm"
argument_list|)
expr_stmt|;
name|assertTypeByName
argument_list|(
literal|"image/cgm"
argument_list|,
literal|"x.CGM"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRdfXmlDetection
parameter_list|()
throws|throws
name|Exception
block|{
name|assertTypeByName
argument_list|(
literal|"application/rdf+xml"
argument_list|,
literal|"x.rdf"
argument_list|)
expr_stmt|;
name|assertTypeByName
argument_list|(
literal|"application/rdf+xml"
argument_list|,
literal|"x.owl"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSvgDetection
parameter_list|()
throws|throws
name|Exception
block|{
name|assertType
argument_list|(
literal|"image/svg+xml"
argument_list|,
literal|"testSVG.svg"
argument_list|)
expr_stmt|;
name|assertTypeByData
argument_list|(
literal|"image/svg+xml"
argument_list|,
literal|"testSVG.svg"
argument_list|)
expr_stmt|;
name|assertTypeByName
argument_list|(
literal|"image/svg+xml"
argument_list|,
literal|"x.svg"
argument_list|)
expr_stmt|;
name|assertTypeByName
argument_list|(
literal|"image/svg+xml"
argument_list|,
literal|"x.SVG"
argument_list|)
expr_stmt|;
comment|// Should *.svgz be svg or gzip
name|assertType
argument_list|(
literal|"application/gzip"
argument_list|,
literal|"testSVG.svgz"
argument_list|)
expr_stmt|;
name|assertTypeByData
argument_list|(
literal|"application/gzip"
argument_list|,
literal|"testSVG.svgz"
argument_list|)
expr_stmt|;
name|assertTypeByName
argument_list|(
literal|"image/svg+xml"
argument_list|,
literal|"x.svgz"
argument_list|)
expr_stmt|;
name|assertTypeByName
argument_list|(
literal|"image/svg+xml"
argument_list|,
literal|"x.SVGZ"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPdfDetection
parameter_list|()
throws|throws
name|Exception
block|{
comment|// PDF extension by name is enough
name|assertTypeByName
argument_list|(
literal|"application/pdf"
argument_list|,
literal|"x.pdf"
argument_list|)
expr_stmt|;
name|assertTypeByName
argument_list|(
literal|"application/pdf"
argument_list|,
literal|"x.PDF"
argument_list|)
expr_stmt|;
comment|// For normal PDFs, can get by name or data or both
name|assertType
argument_list|(
literal|"application/pdf"
argument_list|,
literal|"testPDF.pdf"
argument_list|)
expr_stmt|;
name|assertTypeByData
argument_list|(
literal|"application/pdf"
argument_list|,
literal|"testPDF.pdf"
argument_list|)
expr_stmt|;
comment|// PDF with a BoM works both ways too
name|assertType
argument_list|(
literal|"application/pdf"
argument_list|,
literal|"testPDF_bom.pdf"
argument_list|)
expr_stmt|;
name|assertTypeByData
argument_list|(
literal|"application/pdf"
argument_list|,
literal|"testPDF_bom.pdf"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSwfDetection
parameter_list|()
throws|throws
name|Exception
block|{
name|assertTypeByName
argument_list|(
literal|"application/x-shockwave-flash"
argument_list|,
literal|"x.swf"
argument_list|)
expr_stmt|;
name|assertTypeByName
argument_list|(
literal|"application/x-shockwave-flash"
argument_list|,
literal|"x.SWF"
argument_list|)
expr_stmt|;
name|assertTypeByName
argument_list|(
literal|"application/x-shockwave-flash"
argument_list|,
literal|"test1.swf"
argument_list|)
expr_stmt|;
name|assertTypeByName
argument_list|(
literal|"application/x-shockwave-flash"
argument_list|,
literal|"test2.swf"
argument_list|)
expr_stmt|;
name|assertTypeByName
argument_list|(
literal|"application/x-shockwave-flash"
argument_list|,
literal|"test3.swf"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAutoCADDetection
parameter_list|()
throws|throws
name|Exception
block|{
name|assertTypeByName
argument_list|(
literal|"image/vnd.dwg"
argument_list|,
literal|"x.dwg"
argument_list|)
expr_stmt|;
name|assertTypeByData
argument_list|(
literal|"image/vnd.dwg"
argument_list|,
literal|"testDWG2004.dwg"
argument_list|)
expr_stmt|;
name|assertTypeByData
argument_list|(
literal|"image/vnd.dwg"
argument_list|,
literal|"testDWG2007.dwg"
argument_list|)
expr_stmt|;
name|assertTypeByData
argument_list|(
literal|"image/vnd.dwg"
argument_list|,
literal|"testDWG2010.dwg"
argument_list|)
expr_stmt|;
comment|// From name, gets the common parent type
name|assertTypeByName
argument_list|(
literal|"model/vnd.dwf"
argument_list|,
literal|"x.dwf"
argument_list|)
expr_stmt|;
comment|// With the data, can work out it's the v6 zip-based flavour
name|assertTypeByData
argument_list|(
literal|"model/vnd.dwf; version=6"
argument_list|,
literal|"testDWF2010.dwf"
argument_list|)
expr_stmt|;
comment|// From name, gets the common parent type
name|assertTypeByName
argument_list|(
literal|"image/vnd.dxf"
argument_list|,
literal|"x.dxf"
argument_list|)
expr_stmt|;
comment|// With the data, can work out it's the ASCII flavour
name|assertTypeByData
argument_list|(
literal|"image/vnd.dxf; format=ascii"
argument_list|,
literal|"testDXF_ascii.dxf"
argument_list|)
expr_stmt|;
comment|// TODO Get a sample Binary DXF file and test
block|}
annotation|@
name|Test
specifier|public
name|void
name|testprtDetection
parameter_list|()
throws|throws
name|Exception
block|{
name|assertTypeByName
argument_list|(
literal|"application/x-prt"
argument_list|,
literal|"x.prt"
argument_list|)
expr_stmt|;
name|assertTypeByData
argument_list|(
literal|"application/x-prt"
argument_list|,
literal|"testCADKEY.prt"
argument_list|)
expr_stmt|;
block|}
comment|/**      * Formats which are based on plain text      */
annotation|@
name|Test
specifier|public
name|void
name|testTextBasedFormatsDetection
parameter_list|()
throws|throws
name|Exception
block|{
name|assertTypeByName
argument_list|(
literal|"text/plain"
argument_list|,
literal|"testTXT.txt"
argument_list|)
expr_stmt|;
name|assertType
argument_list|(
literal|"text/plain"
argument_list|,
literal|"testTXT.txt"
argument_list|)
expr_stmt|;
name|assertTypeByName
argument_list|(
literal|"text/css"
argument_list|,
literal|"testCSS.css"
argument_list|)
expr_stmt|;
name|assertType
argument_list|(
literal|"text/css"
argument_list|,
literal|"testCSS.css"
argument_list|)
expr_stmt|;
name|assertTypeByName
argument_list|(
literal|"text/csv"
argument_list|,
literal|"testCSV.csv"
argument_list|)
expr_stmt|;
name|assertType
argument_list|(
literal|"text/csv"
argument_list|,
literal|"testCSV.csv"
argument_list|)
expr_stmt|;
name|assertTypeByName
argument_list|(
literal|"text/html"
argument_list|,
literal|"testHTML.html"
argument_list|)
expr_stmt|;
name|assertType
argument_list|(
literal|"text/html"
argument_list|,
literal|"testHTML.html"
argument_list|)
expr_stmt|;
name|assertTypeByName
argument_list|(
literal|"application/javascript"
argument_list|,
literal|"testJS.js"
argument_list|)
expr_stmt|;
name|assertType
argument_list|(
literal|"application/javascript"
argument_list|,
literal|"testJS.js"
argument_list|)
expr_stmt|;
name|assertType
argument_list|(
literal|"text/vnd.graphviz"
argument_list|,
literal|"testGRAPHVIZd.dot"
argument_list|)
expr_stmt|;
name|assertType
argument_list|(
literal|"text/vnd.graphviz"
argument_list|,
literal|"testGRAPHVIZg.dot"
argument_list|)
expr_stmt|;
name|assertType
argument_list|(
literal|"text/vnd.graphviz"
argument_list|,
literal|"testGRAPHVIZdc.dot"
argument_list|)
expr_stmt|;
name|assertTypeByName
argument_list|(
literal|"application/x-bat"
argument_list|,
literal|"testBAT.bat"
argument_list|)
expr_stmt|;
name|assertTypeByName
argument_list|(
literal|"application/x-bat"
argument_list|,
literal|"testCMD.cmd"
argument_list|)
expr_stmt|;
name|assertType
argument_list|(
literal|"application/x-bat"
argument_list|,
literal|"testBAT.bat"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testJavaDetection
parameter_list|()
throws|throws
name|Exception
block|{
comment|// TODO Classloader doesn't seem to find the .class file in test-documents
comment|//assertTypeDetection("AutoDetectParser.class", "application/java-vm");
comment|// OSX Native Extension
name|assertTypeDetection
argument_list|(
literal|"testJNILIB.jnilib"
argument_list|,
literal|"application/x-java-jnilib"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testXmlAndHtmlDetection
parameter_list|()
throws|throws
name|Exception
block|{
name|assertTypeByData
argument_list|(
literal|"application/xml"
argument_list|,
literal|"<?xml version=\"1.0\" encoding=\"UTF-8\"?><records><record/></records>"
operator|.
name|getBytes
argument_list|(
name|UTF_8
argument_list|)
argument_list|)
expr_stmt|;
name|assertTypeByData
argument_list|(
literal|"application/xml"
argument_list|,
literal|"\uFEFF<?xml version=\"1.0\" encoding=\"UTF-16\"?><records><record/></records>"
operator|.
name|getBytes
argument_list|(
name|UTF_16LE
argument_list|)
argument_list|)
expr_stmt|;
name|assertTypeByData
argument_list|(
literal|"application/xml"
argument_list|,
literal|"\uFEFF<?xml version=\"1.0\" encoding=\"UTF-16\"?><records><record/></records>"
operator|.
name|getBytes
argument_list|(
name|UTF_16BE
argument_list|)
argument_list|)
expr_stmt|;
name|assertTypeByData
argument_list|(
literal|"application/xml"
argument_list|,
literal|"<!-- XML without processing instructions --><records><record/></records>"
operator|.
name|getBytes
argument_list|(
name|UTF_8
argument_list|)
argument_list|)
expr_stmt|;
name|assertTypeByData
argument_list|(
literal|"text/html"
argument_list|,
literal|"<html><body>HTML</body></html>"
operator|.
name|getBytes
argument_list|(
name|UTF_8
argument_list|)
argument_list|)
expr_stmt|;
name|assertTypeByData
argument_list|(
literal|"text/html"
argument_list|,
literal|"<!-- HTML comment --><html><body>HTML</body></html>"
operator|.
name|getBytes
argument_list|(
name|UTF_8
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testWmfDetection
parameter_list|()
throws|throws
name|Exception
block|{
name|assertTypeByName
argument_list|(
literal|"image/wmf"
argument_list|,
literal|"x.wmf"
argument_list|)
expr_stmt|;
name|assertTypeByData
argument_list|(
literal|"image/wmf"
argument_list|,
literal|"testWMF.wmf"
argument_list|)
expr_stmt|;
name|assertTypeByName
argument_list|(
literal|"image/wmf"
argument_list|,
literal|"x.WMF"
argument_list|)
expr_stmt|;
name|assertTypeByName
argument_list|(
literal|"image/emf"
argument_list|,
literal|"x.emf"
argument_list|)
expr_stmt|;
name|assertTypeByData
argument_list|(
literal|"image/emf"
argument_list|,
literal|"testEMF.emf"
argument_list|)
expr_stmt|;
name|assertTypeByName
argument_list|(
literal|"image/emf"
argument_list|,
literal|"x.EMF"
argument_list|)
expr_stmt|;
comment|// GZip Compressed WMF, get subtype by name only
comment|// TODO: Need a test wmz file
name|assertTypeByName
argument_list|(
literal|"application/x-ms-wmz"
argument_list|,
literal|"x.wmz"
argument_list|)
expr_stmt|;
name|assertTypeByName
argument_list|(
literal|"application/x-ms-wmz"
argument_list|,
literal|"x.WMZ"
argument_list|)
expr_stmt|;
comment|// GZip Compressed EMF, get subtype by name only
comment|// TODO: Need a test emz file
name|assertTypeByName
argument_list|(
literal|"image/x-emf-compressed"
argument_list|,
literal|"x.emz"
argument_list|)
expr_stmt|;
name|assertTypeByName
argument_list|(
literal|"image/x-emf-compressed"
argument_list|,
literal|"x.EMZ"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPsDetection
parameter_list|()
throws|throws
name|Exception
block|{
comment|// TODO: Need a test postscript file
name|assertTypeByName
argument_list|(
literal|"application/postscript"
argument_list|,
literal|"x.ps"
argument_list|)
expr_stmt|;
name|assertTypeByName
argument_list|(
literal|"application/postscript"
argument_list|,
literal|"x.PS"
argument_list|)
expr_stmt|;
name|assertTypeByName
argument_list|(
literal|"application/postscript"
argument_list|,
literal|"x.eps"
argument_list|)
expr_stmt|;
name|assertTypeByName
argument_list|(
literal|"application/postscript"
argument_list|,
literal|"x.epsf"
argument_list|)
expr_stmt|;
name|assertTypeByName
argument_list|(
literal|"application/postscript"
argument_list|,
literal|"x.epsi"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMicrosoftMultiMediaDetection
parameter_list|()
throws|throws
name|Exception
block|{
name|assertTypeByName
argument_list|(
literal|"video/x-ms-asf"
argument_list|,
literal|"x.asf"
argument_list|)
expr_stmt|;
name|assertTypeByName
argument_list|(
literal|"video/x-ms-wmv"
argument_list|,
literal|"x.wmv"
argument_list|)
expr_stmt|;
name|assertTypeByName
argument_list|(
literal|"audio/x-ms-wma"
argument_list|,
literal|"x.wma"
argument_list|)
expr_stmt|;
name|assertTypeByData
argument_list|(
literal|"video/x-ms-asf"
argument_list|,
literal|"testASF.asf"
argument_list|)
expr_stmt|;
name|assertTypeByData
argument_list|(
literal|"video/x-ms-wmv"
argument_list|,
literal|"testWMV.wmv"
argument_list|)
expr_stmt|;
name|assertTypeByData
argument_list|(
literal|"audio/x-ms-wma"
argument_list|,
literal|"testWMA.wma"
argument_list|)
expr_stmt|;
block|}
comment|/**      * All 3 DITA types are in theory handled by the same mimetype,      *  but we specialise them       */
annotation|@
name|Test
specifier|public
name|void
name|testDITADetection
parameter_list|()
throws|throws
name|Exception
block|{
name|assertTypeByName
argument_list|(
literal|"application/dita+xml; format=topic"
argument_list|,
literal|"test.dita"
argument_list|)
expr_stmt|;
name|assertTypeByName
argument_list|(
literal|"application/dita+xml; format=map"
argument_list|,
literal|"test.ditamap"
argument_list|)
expr_stmt|;
name|assertTypeByName
argument_list|(
literal|"application/dita+xml; format=val"
argument_list|,
literal|"test.ditaval"
argument_list|)
expr_stmt|;
name|assertTypeByData
argument_list|(
literal|"application/dita+xml; format=task"
argument_list|,
literal|"testDITA.dita"
argument_list|)
expr_stmt|;
name|assertTypeByData
argument_list|(
literal|"application/dita+xml; format=concept"
argument_list|,
literal|"testDITA2.dita"
argument_list|)
expr_stmt|;
name|assertTypeByData
argument_list|(
literal|"application/dita+xml; format=map"
argument_list|,
literal|"testDITA.ditamap"
argument_list|)
expr_stmt|;
name|assertTypeByNameAndData
argument_list|(
literal|"application/dita+xml; format=task"
argument_list|,
literal|"testDITA.dita"
argument_list|)
expr_stmt|;
name|assertTypeByNameAndData
argument_list|(
literal|"application/dita+xml; format=concept"
argument_list|,
literal|"testDITA2.dita"
argument_list|)
expr_stmt|;
name|assertTypeByNameAndData
argument_list|(
literal|"application/dita+xml; format=map"
argument_list|,
literal|"testDITA.ditamap"
argument_list|)
expr_stmt|;
comment|// These are all children of the official type
name|assertEquals
argument_list|(
literal|"application/dita+xml"
argument_list|,
name|repo
operator|.
name|getMediaTypeRegistry
argument_list|()
operator|.
name|getSupertype
argument_list|(
name|getTypeByNameAndData
argument_list|(
literal|"testDITA.ditamap"
argument_list|)
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"application/dita+xml"
argument_list|,
name|repo
operator|.
name|getMediaTypeRegistry
argument_list|()
operator|.
name|getSupertype
argument_list|(
name|getTypeByNameAndData
argument_list|(
literal|"testDITA.dita"
argument_list|)
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// Concept inherits from topic
name|assertEquals
argument_list|(
literal|"application/dita+xml; format=topic"
argument_list|,
name|repo
operator|.
name|getMediaTypeRegistry
argument_list|()
operator|.
name|getSupertype
argument_list|(
name|getTypeByNameAndData
argument_list|(
literal|"testDITA2.dita"
argument_list|)
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * @since TIKA-194      */
annotation|@
name|Test
specifier|public
name|void
name|testJavaRegex
parameter_list|()
throws|throws
name|Exception
block|{
name|MimeType
name|testType
init|=
operator|new
name|MimeType
argument_list|(
name|MediaType
operator|.
name|parse
argument_list|(
literal|"foo/bar"
argument_list|)
argument_list|)
decl_stmt|;
name|this
operator|.
name|repo
operator|.
name|add
argument_list|(
name|testType
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|repo
operator|.
name|forName
argument_list|(
literal|"foo/bar"
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|pattern
init|=
literal|"rtg_sst_grb_0\\.5\\.\\d{8}"
decl_stmt|;
name|this
operator|.
name|repo
operator|.
name|addPattern
argument_list|(
name|testType
argument_list|,
name|pattern
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|String
name|testFileName
init|=
literal|"rtg_sst_grb_0.5.12345678"
decl_stmt|;
name|assertEquals
argument_list|(
literal|"foo/bar"
argument_list|,
name|tika
operator|.
name|detect
argument_list|(
name|testFileName
argument_list|)
argument_list|)
expr_stmt|;
name|MimeType
name|testType2
init|=
operator|new
name|MimeType
argument_list|(
name|MediaType
operator|.
name|parse
argument_list|(
literal|"foo/bar2"
argument_list|)
argument_list|)
decl_stmt|;
name|this
operator|.
name|repo
operator|.
name|add
argument_list|(
name|testType2
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|repo
operator|.
name|forName
argument_list|(
literal|"foo/bar2"
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|repo
operator|.
name|addPattern
argument_list|(
name|testType2
argument_list|,
name|pattern
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertNotSame
argument_list|(
literal|"foo/bar2"
argument_list|,
name|tika
operator|.
name|detect
argument_list|(
name|testFileName
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRawDetection
parameter_list|()
throws|throws
name|Exception
block|{
name|assertTypeByName
argument_list|(
literal|"image/x-raw-adobe"
argument_list|,
literal|"x.dng"
argument_list|)
expr_stmt|;
name|assertTypeByName
argument_list|(
literal|"image/x-raw-adobe"
argument_list|,
literal|"x.DNG"
argument_list|)
expr_stmt|;
name|assertTypeByName
argument_list|(
literal|"image/x-raw-hasselblad"
argument_list|,
literal|"x.3fr"
argument_list|)
expr_stmt|;
name|assertTypeByName
argument_list|(
literal|"image/x-raw-fuji"
argument_list|,
literal|"x.raf"
argument_list|)
expr_stmt|;
name|assertTypeByName
argument_list|(
literal|"image/x-raw-canon"
argument_list|,
literal|"x.crw"
argument_list|)
expr_stmt|;
name|assertTypeByName
argument_list|(
literal|"image/x-raw-canon"
argument_list|,
literal|"x.cr2"
argument_list|)
expr_stmt|;
name|assertTypeByName
argument_list|(
literal|"image/x-raw-kodak"
argument_list|,
literal|"x.k25"
argument_list|)
expr_stmt|;
name|assertTypeByName
argument_list|(
literal|"image/x-raw-kodak"
argument_list|,
literal|"x.kdc"
argument_list|)
expr_stmt|;
name|assertTypeByName
argument_list|(
literal|"image/x-raw-kodak"
argument_list|,
literal|"x.dcs"
argument_list|)
expr_stmt|;
name|assertTypeByName
argument_list|(
literal|"image/x-raw-kodak"
argument_list|,
literal|"x.drf"
argument_list|)
expr_stmt|;
name|assertTypeByName
argument_list|(
literal|"image/x-raw-minolta"
argument_list|,
literal|"x.mrw"
argument_list|)
expr_stmt|;
name|assertTypeByName
argument_list|(
literal|"image/x-raw-nikon"
argument_list|,
literal|"x.nef"
argument_list|)
expr_stmt|;
name|assertTypeByName
argument_list|(
literal|"image/x-raw-nikon"
argument_list|,
literal|"x.nrw"
argument_list|)
expr_stmt|;
name|assertTypeByName
argument_list|(
literal|"image/x-raw-olympus"
argument_list|,
literal|"x.orf"
argument_list|)
expr_stmt|;
name|assertTypeByName
argument_list|(
literal|"image/x-raw-pentax"
argument_list|,
literal|"x.ptx"
argument_list|)
expr_stmt|;
name|assertTypeByName
argument_list|(
literal|"image/x-raw-pentax"
argument_list|,
literal|"x.pef"
argument_list|)
expr_stmt|;
name|assertTypeByName
argument_list|(
literal|"image/x-raw-sony"
argument_list|,
literal|"x.arw"
argument_list|)
expr_stmt|;
name|assertTypeByName
argument_list|(
literal|"image/x-raw-sony"
argument_list|,
literal|"x.srf"
argument_list|)
expr_stmt|;
name|assertTypeByName
argument_list|(
literal|"image/x-raw-sony"
argument_list|,
literal|"x.sr2"
argument_list|)
expr_stmt|;
name|assertTypeByName
argument_list|(
literal|"image/x-raw-sigma"
argument_list|,
literal|"x.x3f"
argument_list|)
expr_stmt|;
name|assertTypeByName
argument_list|(
literal|"image/x-raw-epson"
argument_list|,
literal|"x.erf"
argument_list|)
expr_stmt|;
name|assertTypeByName
argument_list|(
literal|"image/x-raw-mamiya"
argument_list|,
literal|"x.mef"
argument_list|)
expr_stmt|;
name|assertTypeByName
argument_list|(
literal|"image/x-raw-leaf"
argument_list|,
literal|"x.mos"
argument_list|)
expr_stmt|;
name|assertTypeByName
argument_list|(
literal|"image/x-raw-panasonic"
argument_list|,
literal|"x.raw"
argument_list|)
expr_stmt|;
name|assertTypeByName
argument_list|(
literal|"image/x-raw-panasonic"
argument_list|,
literal|"x.rw2"
argument_list|)
expr_stmt|;
name|assertTypeByName
argument_list|(
literal|"image/x-raw-phaseone"
argument_list|,
literal|"x.iiq"
argument_list|)
expr_stmt|;
name|assertTypeByName
argument_list|(
literal|"image/x-raw-red"
argument_list|,
literal|"x.r3d"
argument_list|)
expr_stmt|;
name|assertTypeByName
argument_list|(
literal|"image/x-raw-imacon"
argument_list|,
literal|"x.fff"
argument_list|)
expr_stmt|;
name|assertTypeByName
argument_list|(
literal|"image/x-raw-logitech"
argument_list|,
literal|"x.pxn"
argument_list|)
expr_stmt|;
name|assertTypeByName
argument_list|(
literal|"image/x-raw-casio"
argument_list|,
literal|"x.bay"
argument_list|)
expr_stmt|;
name|assertTypeByName
argument_list|(
literal|"image/x-raw-rawzor"
argument_list|,
literal|"x.rwz"
argument_list|)
expr_stmt|;
block|}
comment|/**      * Tests that we correctly detect the font types      */
annotation|@
name|Test
specifier|public
name|void
name|testFontDetection
parameter_list|()
throws|throws
name|Exception
block|{
name|assertTypeByName
argument_list|(
literal|"application/x-font-adobe-metric"
argument_list|,
literal|"x.afm"
argument_list|)
expr_stmt|;
name|assertTypeByData
argument_list|(
literal|"application/x-font-adobe-metric"
argument_list|,
literal|"testAFM.afm"
argument_list|)
expr_stmt|;
name|assertTypeByName
argument_list|(
literal|"application/x-font-printer-metric"
argument_list|,
literal|"x.pfm"
argument_list|)
expr_stmt|;
comment|// TODO Get a sample .pfm file
name|assertTypeByData
argument_list|(
literal|"application/x-font-printer-metric"
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|0x00
block|,
literal|0x01
block|,
literal|256
operator|-
literal|0xb1
block|,
literal|0x0a
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x43
block|,
literal|0x6f
block|,
literal|0x70
block|,
literal|0x79
block|,
literal|0x72
block|,
literal|0x69
block|,
literal|0x67
block|,
literal|0x68
block|,
literal|0x74
block|,
literal|0x20
block|}
argument_list|)
expr_stmt|;
name|assertTypeByName
argument_list|(
literal|"application/x-font-type1"
argument_list|,
literal|"x.pfa"
argument_list|)
expr_stmt|;
comment|// TODO Get a sample .pfa file
name|assertTypeByData
argument_list|(
literal|"application/x-font-type1"
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|0x25
block|,
literal|0x21
block|,
literal|0x50
block|,
literal|0x53
block|,
literal|0x2d
block|,
literal|0x41
block|,
literal|0x64
block|,
literal|0x6f
block|,
literal|0x62
block|,
literal|0x65
block|,
literal|0x46
block|,
literal|0x6f
block|,
literal|0x6e
block|,
literal|0x74
block|,
literal|0x2d
block|,
literal|0x31
block|,
literal|0x2e
block|,
literal|0x30
block|,
literal|0x20
block|,
literal|0x20
block|,
literal|0x2d
block|,
literal|0x2a
block|,
literal|0x2d
block|,
literal|0x20
block|}
argument_list|)
expr_stmt|;
name|assertTypeByName
argument_list|(
literal|"application/x-font-type1"
argument_list|,
literal|"x.pfb"
argument_list|)
expr_stmt|;
comment|// TODO Get a sample .pfm file
name|assertTypeByData
argument_list|(
literal|"application/x-font-type1"
argument_list|,
operator|new
name|byte
index|[]
block|{
operator|-
literal|0x80
block|,
literal|0x01
block|,
literal|0x09
block|,
literal|0x05
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x25
block|,
literal|0x21
block|,
literal|0x50
block|,
literal|0x53
block|,
literal|0x2d
block|,
literal|0x41
block|,
literal|0x64
block|,
literal|0x6f
block|,
literal|0x62
block|,
literal|0x65
block|,
literal|0x46
block|,
literal|0x6f
block|,
literal|0x6e
block|,
literal|0x74
block|,
literal|0x2d
block|,
literal|0x31
block|,
literal|0x2e
block|,
literal|0x30
block|}
argument_list|)
expr_stmt|;
block|}
comment|/**      * Tests MimeTypes.getMimeType(URL), which examines both the byte header      * and, if necessary, the URL's extension.      */
annotation|@
name|Test
specifier|public
name|void
name|testMimeDeterminationForTestDocuments
parameter_list|()
throws|throws
name|Exception
block|{
name|assertType
argument_list|(
literal|"text/html"
argument_list|,
literal|"testHTML.html"
argument_list|)
expr_stmt|;
name|assertType
argument_list|(
literal|"application/zip"
argument_list|,
literal|"test-documents.zip"
argument_list|)
expr_stmt|;
name|assertType
argument_list|(
literal|"text/html"
argument_list|,
literal|"testHTML_utf8.html"
argument_list|)
expr_stmt|;
name|assertType
argument_list|(
literal|"application/vnd.oasis.opendocument.text"
argument_list|,
literal|"testOpenOffice2.odt"
argument_list|)
expr_stmt|;
name|assertType
argument_list|(
literal|"application/pdf"
argument_list|,
literal|"testPDF.pdf"
argument_list|)
expr_stmt|;
name|assertType
argument_list|(
literal|"application/rtf"
argument_list|,
literal|"testRTF.rtf"
argument_list|)
expr_stmt|;
name|assertType
argument_list|(
literal|"text/plain"
argument_list|,
literal|"testTXT.txt"
argument_list|)
expr_stmt|;
name|assertType
argument_list|(
literal|"application/xml"
argument_list|,
literal|"testXML.xml"
argument_list|)
expr_stmt|;
name|assertType
argument_list|(
literal|"audio/basic"
argument_list|,
literal|"testAU.au"
argument_list|)
expr_stmt|;
name|assertType
argument_list|(
literal|"audio/x-aiff"
argument_list|,
literal|"testAIFF.aif"
argument_list|)
expr_stmt|;
name|assertType
argument_list|(
literal|"audio/vnd.wave"
argument_list|,
literal|"testWAV.wav"
argument_list|)
expr_stmt|;
name|assertType
argument_list|(
literal|"audio/midi"
argument_list|,
literal|"testMID.mid"
argument_list|)
expr_stmt|;
name|assertType
argument_list|(
literal|"application/x-msaccess"
argument_list|,
literal|"testACCESS.mdb"
argument_list|)
expr_stmt|;
name|assertType
argument_list|(
literal|"application/x-font-ttf"
argument_list|,
literal|"testTrueType3.ttf"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|test7ZipDetection
parameter_list|()
throws|throws
name|Exception
block|{
name|assertTypeByName
argument_list|(
literal|"application/x-7z-compressed"
argument_list|,
literal|"test-documents.7z"
argument_list|)
expr_stmt|;
name|assertTypeByData
argument_list|(
literal|"application/x-7z-compressed"
argument_list|,
literal|"test-documents.7z"
argument_list|)
expr_stmt|;
name|assertTypeByNameAndData
argument_list|(
literal|"application/x-7z-compressed"
argument_list|,
literal|"test-documents.7z"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testWebArchiveDetection
parameter_list|()
throws|throws
name|Exception
block|{
name|assertTypeByName
argument_list|(
literal|"application/x-webarchive"
argument_list|,
literal|"x.webarchive"
argument_list|)
expr_stmt|;
name|assertTypeByData
argument_list|(
literal|"application/x-bplist"
argument_list|,
literal|"testWEBARCHIVE.webarchive"
argument_list|)
expr_stmt|;
name|assertTypeByNameAndData
argument_list|(
literal|"application/x-webarchive"
argument_list|,
literal|"testWEBARCHIVE.webarchive"
argument_list|)
expr_stmt|;
block|}
comment|/**      * KML, and KMZ (zipped KML)      */
annotation|@
name|Test
specifier|public
name|void
name|testKMLZDetection
parameter_list|()
throws|throws
name|Exception
block|{
name|assertTypeByName
argument_list|(
literal|"application/vnd.google-earth.kml+xml"
argument_list|,
literal|"testKML.kml"
argument_list|)
expr_stmt|;
name|assertTypeByData
argument_list|(
literal|"application/vnd.google-earth.kml+xml"
argument_list|,
literal|"testKML.kml"
argument_list|)
expr_stmt|;
name|assertTypeByNameAndData
argument_list|(
literal|"application/vnd.google-earth.kml+xml"
argument_list|,
literal|"testKML.kml"
argument_list|)
expr_stmt|;
name|assertTypeByName
argument_list|(
literal|"application/vnd.google-earth.kmz"
argument_list|,
literal|"testKMZ.kmz"
argument_list|)
expr_stmt|;
name|assertTypeByNameAndData
argument_list|(
literal|"application/vnd.google-earth.kmz"
argument_list|,
literal|"testKMZ.kmz"
argument_list|)
expr_stmt|;
comment|// By data only, mimetype magic only gets us to a .zip
comment|// We need to use the Zip Aware detector to get the full type
name|assertTypeByData
argument_list|(
literal|"application/zip"
argument_list|,
literal|"testKMZ.kmz"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCreativeSuite
parameter_list|()
throws|throws
name|IOException
block|{
name|assertTypeDetection
argument_list|(
literal|"testINDD.indd"
argument_list|,
literal|"application/x-adobe-indesign"
argument_list|)
expr_stmt|;
name|assertTypeDetection
argument_list|(
literal|"testPSD.psd"
argument_list|,
literal|"image/vnd.adobe.photoshop"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAMR
parameter_list|()
throws|throws
name|IOException
block|{
comment|// AMR matches on name, data or both
name|assertTypeDetection
argument_list|(
literal|"testAMR.amr"
argument_list|,
literal|"audio/amr"
argument_list|)
expr_stmt|;
comment|// AMR-WB subtype shares extension, so needs data to identify
name|assertTypeDetection
argument_list|(
literal|"testAMR-WB.amr"
argument_list|,
literal|"audio/amr"
argument_list|,
literal|"audio/amr-wb"
argument_list|,
literal|"audio/amr-wb"
argument_list|)
expr_stmt|;
comment|// Ditto for the AMR-WB+ subtype, which we don't have a sample file of yet
comment|//assertTypeDetection("testAMR-WB+.amr", "audio/amr", "audio/amr-wb+", "audio/amr-wb+");
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEmail
parameter_list|()
throws|throws
name|IOException
block|{
comment|// EMLX
name|assertTypeDetection
argument_list|(
literal|"testEMLX.emlx"
argument_list|,
literal|"message/x-emlx"
argument_list|)
expr_stmt|;
comment|// Groupwise
name|assertTypeDetection
argument_list|(
literal|"testGroupWiseEml.eml"
argument_list|,
literal|"message/rfc822"
argument_list|)
expr_stmt|;
comment|// Lotus
name|assertTypeDetection
argument_list|(
literal|"testLotusEml.eml"
argument_list|,
literal|"message/rfc822"
argument_list|)
expr_stmt|;
comment|// MBOX
name|assertTypeDetection
argument_list|(
literal|"headers.mbox"
argument_list|,
literal|"application/mbox"
argument_list|)
expr_stmt|;
comment|// Thunderbird - doesn't currently work by name
name|assertTypeByNameAndData
argument_list|(
literal|"message/rfc822"
argument_list|,
literal|"testThunderbirdEml.eml"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAxCrypt
parameter_list|()
throws|throws
name|Exception
block|{
comment|// test-TXT.txt encrypted with a key of "tika"
name|assertTypeDetection
argument_list|(
literal|"testTXT-tika.axx"
argument_list|,
literal|"application/x-axcrypt"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testWindowsEXE
parameter_list|()
throws|throws
name|Exception
block|{
name|assertTypeByName
argument_list|(
literal|"application/x-msdownload"
argument_list|,
literal|"x.dll"
argument_list|)
expr_stmt|;
name|assertTypeByName
argument_list|(
literal|"application/x-ms-installer"
argument_list|,
literal|"x.msi"
argument_list|)
expr_stmt|;
name|assertTypeByName
argument_list|(
literal|"application/x-dosexec"
argument_list|,
literal|"x.exe"
argument_list|)
expr_stmt|;
name|assertTypeByData
argument_list|(
literal|"application/x-msdownload; format=pe"
argument_list|,
literal|"testTinyPE.exe"
argument_list|)
expr_stmt|;
name|assertTypeByNameAndData
argument_list|(
literal|"application/x-msdownload; format=pe"
argument_list|,
literal|"testTinyPE.exe"
argument_list|)
expr_stmt|;
comment|// A jar file with part of a PE header, but not a full one
comment|//  should still be detected as a zip or jar (without/with name)
name|assertTypeByData
argument_list|(
literal|"application/zip"
argument_list|,
literal|"testJAR_with_PEHDR.jar"
argument_list|)
expr_stmt|;
name|assertTypeByNameAndData
argument_list|(
literal|"application/java-archive"
argument_list|,
literal|"testJAR_with_PEHDR.jar"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMatroskaDetection
parameter_list|()
throws|throws
name|Exception
block|{
name|assertType
argument_list|(
literal|"video/x-matroska"
argument_list|,
literal|"testMKV.mkv"
argument_list|)
expr_stmt|;
comment|// TODO: Need custom detector data detection, see TIKA-1180
name|assertTypeByData
argument_list|(
literal|"application/x-matroska"
argument_list|,
literal|"testMKV.mkv"
argument_list|)
expr_stmt|;
name|assertTypeByNameAndData
argument_list|(
literal|"video/x-matroska"
argument_list|,
literal|"testMKV.mkv"
argument_list|)
expr_stmt|;
name|assertTypeByName
argument_list|(
literal|"video/x-matroska"
argument_list|,
literal|"x.mkv"
argument_list|)
expr_stmt|;
name|assertTypeByName
argument_list|(
literal|"video/x-matroska"
argument_list|,
literal|"x.MKV"
argument_list|)
expr_stmt|;
name|assertTypeByName
argument_list|(
literal|"audio/x-matroska"
argument_list|,
literal|"x.mka"
argument_list|)
expr_stmt|;
name|assertTypeByName
argument_list|(
literal|"audio/x-matroska"
argument_list|,
literal|"x.MKA"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testWebMDetection
parameter_list|()
throws|throws
name|Exception
block|{
name|assertType
argument_list|(
literal|"video/webm"
argument_list|,
literal|"testWEBM.webm"
argument_list|)
expr_stmt|;
comment|// TODO: Need custom detector data detection, see TIKA-1180
name|assertTypeByData
argument_list|(
literal|"application/x-matroska"
argument_list|,
literal|"testWEBM.webm"
argument_list|)
expr_stmt|;
name|assertTypeByNameAndData
argument_list|(
literal|"video/webm"
argument_list|,
literal|"testWEBM.webm"
argument_list|)
expr_stmt|;
name|assertTypeByName
argument_list|(
literal|"video/webm"
argument_list|,
literal|"x.webm"
argument_list|)
expr_stmt|;
name|assertTypeByName
argument_list|(
literal|"video/webm"
argument_list|,
literal|"x.WEBM"
argument_list|)
expr_stmt|;
block|}
comment|/** Test getMimeType(byte[]) */
annotation|@
name|Test
specifier|public
name|void
name|testGetMimeType_byteArray
parameter_list|()
throws|throws
name|IOException
block|{
comment|// Plain text detection
name|assertText
argument_list|(
operator|new
name|byte
index|[]
block|{
operator|(
name|byte
operator|)
literal|0xFF
block|,
operator|(
name|byte
operator|)
literal|0xFE
block|}
argument_list|)
expr_stmt|;
name|assertText
argument_list|(
operator|new
name|byte
index|[]
block|{
operator|(
name|byte
operator|)
literal|0xFF
block|,
operator|(
name|byte
operator|)
literal|0xFE
block|}
argument_list|)
expr_stmt|;
name|assertText
argument_list|(
operator|new
name|byte
index|[]
block|{
operator|(
name|byte
operator|)
literal|0xEF
block|,
operator|(
name|byte
operator|)
literal|0xBB
block|,
operator|(
name|byte
operator|)
literal|0xBF
block|}
argument_list|)
expr_stmt|;
name|assertText
argument_list|(
operator|new
name|byte
index|[]
block|{
literal|'a'
block|,
literal|'b'
block|,
literal|'c'
block|}
argument_list|)
expr_stmt|;
name|assertText
argument_list|(
operator|new
name|byte
index|[]
block|{
literal|'\t'
block|,
literal|'\r'
block|,
literal|'\n'
block|,
literal|0x0C
block|,
literal|0x1B
block|}
argument_list|)
expr_stmt|;
name|assertNotText
argument_list|(
operator|new
name|byte
index|[]
block|{
literal|'\t'
block|,
literal|'\r'
block|,
literal|'\n'
block|,
literal|0x0E
block|,
literal|0x1C
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBerkeleyDB
parameter_list|()
throws|throws
name|IOException
block|{
name|assertTypeByData
argument_list|(
literal|"application/x-berkeley-db; format=btree; version=2"
argument_list|,
literal|"testBDB_btree_2.db"
argument_list|)
expr_stmt|;
name|assertTypeByData
argument_list|(
literal|"application/x-berkeley-db; format=btree; version=3"
argument_list|,
literal|"testBDB_btree_3.db"
argument_list|)
expr_stmt|;
name|assertTypeByData
argument_list|(
literal|"application/x-berkeley-db; format=btree; version=4"
argument_list|,
literal|"testBDB_btree_4.db"
argument_list|)
expr_stmt|;
comment|// V4 and V5 share the same btree format
name|assertTypeByData
argument_list|(
literal|"application/x-berkeley-db; format=btree; version=4"
argument_list|,
literal|"testBDB_btree_5.db"
argument_list|)
expr_stmt|;
name|assertTypeByData
argument_list|(
literal|"application/x-berkeley-db; format=hash; version=2"
argument_list|,
literal|"testBDB_hash_2.db"
argument_list|)
expr_stmt|;
name|assertTypeByData
argument_list|(
literal|"application/x-berkeley-db; format=hash; version=3"
argument_list|,
literal|"testBDB_hash_3.db"
argument_list|)
expr_stmt|;
name|assertTypeByData
argument_list|(
literal|"application/x-berkeley-db; format=hash; version=4"
argument_list|,
literal|"testBDB_hash_4.db"
argument_list|)
expr_stmt|;
name|assertTypeByData
argument_list|(
literal|"application/x-berkeley-db; format=hash; version=5"
argument_list|,
literal|"testBDB_hash_5.db"
argument_list|)
expr_stmt|;
block|}
comment|/**      * CBOR typically contains HTML      */
annotation|@
name|Test
specifier|public
name|void
name|testCBOR
parameter_list|()
throws|throws
name|IOException
block|{
name|assertTypeByNameAndData
argument_list|(
literal|"application/cbor"
argument_list|,
literal|"NUTCH-1997.cbor"
argument_list|)
expr_stmt|;
name|assertTypeByData
argument_list|(
literal|"application/cbor"
argument_list|,
literal|"NUTCH-1997.cbor"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testZLIB
parameter_list|()
throws|throws
name|IOException
block|{
comment|// ZLIB encoded versions of testTXT.txt
name|assertTypeByData
argument_list|(
literal|"application/zlib"
argument_list|,
literal|"testTXT.zlib"
argument_list|)
expr_stmt|;
name|assertTypeByData
argument_list|(
literal|"application/zlib"
argument_list|,
literal|"testTXT.zlib0"
argument_list|)
expr_stmt|;
name|assertTypeByData
argument_list|(
literal|"application/zlib"
argument_list|,
literal|"testTXT.zlib5"
argument_list|)
expr_stmt|;
name|assertTypeByData
argument_list|(
literal|"application/zlib"
argument_list|,
literal|"testTXT.zlib9"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTextFormats
parameter_list|()
throws|throws
name|Exception
block|{
name|assertType
argument_list|(
literal|"application/x-bibtex-text-file"
argument_list|,
literal|"testBIBTEX.bib"
argument_list|)
expr_stmt|;
name|assertTypeByData
argument_list|(
literal|"application/x-bibtex-text-file"
argument_list|,
literal|"testBIBTEX.bib"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCodeFormats
parameter_list|()
throws|throws
name|Exception
block|{
name|assertType
argument_list|(
literal|"text/x-csrc"
argument_list|,
literal|"testC.c"
argument_list|)
expr_stmt|;
name|assertType
argument_list|(
literal|"text/x-chdr"
argument_list|,
literal|"testH.h"
argument_list|)
expr_stmt|;
name|assertTypeByData
argument_list|(
literal|"text/x-csrc"
argument_list|,
literal|"testC.c"
argument_list|)
expr_stmt|;
name|assertTypeByData
argument_list|(
literal|"text/x-chdr"
argument_list|,
literal|"testH.h"
argument_list|)
expr_stmt|;
name|assertTypeByName
argument_list|(
literal|"text/x-java-source"
argument_list|,
literal|"testJAVA.java"
argument_list|)
expr_stmt|;
name|assertType
argument_list|(
literal|"text/x-java-properties"
argument_list|,
literal|"testJAVAPROPS.properties"
argument_list|)
expr_stmt|;
name|assertType
argument_list|(
literal|"text/x-matlab"
argument_list|,
literal|"testMATLAB.m"
argument_list|)
expr_stmt|;
name|assertType
argument_list|(
literal|"text/x-matlab"
argument_list|,
literal|"testMATLAB_wtsgaus.m"
argument_list|)
expr_stmt|;
name|assertType
argument_list|(
literal|"text/x-matlab"
argument_list|,
literal|"testMATLAB_barcast.m"
argument_list|)
expr_stmt|;
name|assertTypeByData
argument_list|(
literal|"text/x-matlab"
argument_list|,
literal|"testMATLAB.m"
argument_list|)
expr_stmt|;
name|assertTypeByData
argument_list|(
literal|"text/x-matlab"
argument_list|,
literal|"testMATLAB_wtsgaus.m"
argument_list|)
expr_stmt|;
name|assertTypeByData
argument_list|(
literal|"text/x-matlab"
argument_list|,
literal|"testMATLAB_barcast.m"
argument_list|)
expr_stmt|;
comment|// By name, or by name+data, gets it as JS
name|assertTypeByName
argument_list|(
literal|"application/javascript"
argument_list|,
literal|"testJS.js"
argument_list|)
expr_stmt|;
name|assertTypeByName
argument_list|(
literal|"application/javascript"
argument_list|,
literal|"testJS_HTML.js"
argument_list|)
expr_stmt|;
name|assertType
argument_list|(
literal|"application/javascript"
argument_list|,
literal|"testJS.js"
argument_list|)
expr_stmt|;
name|assertType
argument_list|(
literal|"application/javascript"
argument_list|,
literal|"testJS_HTML.js"
argument_list|)
expr_stmt|;
comment|// With data only, because we have no JS file magic, can't be
comment|//  detected. One will come through as plain text, the other
comment|//  as HTML due to<html> in it. TODO Add JS magic. See TIKA-1141
comment|//assertTypeByData("application/javascript", "testJS.js");
comment|//assertTypeByData("application/javascript", "testJS_HTML.js");
block|}
annotation|@
name|Test
specifier|public
name|void
name|testWebVTT
parameter_list|()
throws|throws
name|Exception
block|{
comment|// With the most common text header
name|assertType
argument_list|(
literal|"text/vtt"
argument_list|,
literal|"testWebVTT.vtt"
argument_list|)
expr_stmt|;
name|assertTypeByData
argument_list|(
literal|"text/vtt"
argument_list|,
literal|"testWebVTT.vtt"
argument_list|)
expr_stmt|;
comment|// With no text header, just plain WebVTT one
name|assertType
argument_list|(
literal|"text/vtt"
argument_list|,
literal|"testWebVTT_simple.vtt"
argument_list|)
expr_stmt|;
name|assertTypeByData
argument_list|(
literal|"text/vtt"
argument_list|,
literal|"testWebVTT_simple.vtt"
argument_list|)
expr_stmt|;
comment|// With a custom text header
name|assertType
argument_list|(
literal|"text/vtt"
argument_list|,
literal|"testWebVTT_header.vtt"
argument_list|)
expr_stmt|;
name|assertTypeByData
argument_list|(
literal|"text/vtt"
argument_list|,
literal|"testWebVTT_header.vtt"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMIF
parameter_list|()
throws|throws
name|Exception
block|{
name|assertType
argument_list|(
literal|"application/vnd.mif"
argument_list|,
literal|"testMIF.mif"
argument_list|)
expr_stmt|;
name|assertTypeByData
argument_list|(
literal|"application/vnd.mif"
argument_list|,
literal|"testMIF.mif"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPKCSSignatures
parameter_list|()
throws|throws
name|Exception
block|{
comment|// PKCS7 Signed XML files
name|assertType
argument_list|(
literal|"application/pkcs7-signature"
argument_list|,
literal|"testPKCS17Sig.xml.p7m"
argument_list|)
expr_stmt|;
name|assertType
argument_list|(
literal|"application/pkcs7-signature"
argument_list|,
literal|"testPKCS17Sig-v2.xml.p7m"
argument_list|)
expr_stmt|;
name|assertType
argument_list|(
literal|"application/pkcs7-signature"
argument_list|,
literal|"testPKCS17Sig-v3.xml.p7m"
argument_list|)
expr_stmt|;
name|assertType
argument_list|(
literal|"application/pkcs7-signature"
argument_list|,
literal|"testPKCS17Sig-v4.xml.p7m"
argument_list|)
expr_stmt|;
name|assertTypeByData
argument_list|(
literal|"application/pkcs7-signature"
argument_list|,
literal|"testPKCS17Sig.xml.p7m"
argument_list|)
expr_stmt|;
name|assertTypeByData
argument_list|(
literal|"application/pkcs7-signature"
argument_list|,
literal|"testPKCS17Sig-v2.xml.p7m"
argument_list|)
expr_stmt|;
name|assertTypeByData
argument_list|(
literal|"application/pkcs7-signature"
argument_list|,
literal|"testPKCS17Sig-v3.xml.p7m"
argument_list|)
expr_stmt|;
name|assertTypeByData
argument_list|(
literal|"application/pkcs7-signature"
argument_list|,
literal|"testPKCS17Sig-v4.xml.p7m"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testVandICalendars
parameter_list|()
throws|throws
name|Exception
block|{
name|assertType
argument_list|(
literal|"text/calendar"
argument_list|,
literal|"testICalendar.ics"
argument_list|)
expr_stmt|;
name|assertType
argument_list|(
literal|"text/x-vcalendar"
argument_list|,
literal|"testVCalendar.vcs"
argument_list|)
expr_stmt|;
name|assertTypeByData
argument_list|(
literal|"text/calendar"
argument_list|,
literal|"testICalendar.ics"
argument_list|)
expr_stmt|;
name|assertTypeByData
argument_list|(
literal|"text/x-vcalendar"
argument_list|,
literal|"testVCalendar.vcs"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testASX
parameter_list|()
throws|throws
name|Exception
block|{
name|assertType
argument_list|(
literal|"application/x-ms-asx"
argument_list|,
literal|"testWindowsMediaMeta.asx"
argument_list|)
expr_stmt|;
name|assertTypeByData
argument_list|(
literal|"application/x-ms-asx"
argument_list|,
literal|"testWindowsMediaMeta.asx"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMSOwner
parameter_list|()
throws|throws
name|Exception
block|{
name|assertType
argument_list|(
literal|"application/x-ms-owner"
argument_list|,
literal|"testMSOwnerFile"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDJVU
parameter_list|()
throws|throws
name|Exception
block|{
name|assertType
argument_list|(
literal|"image/vnd.djvu"
argument_list|,
literal|"testDJVU.djvu"
argument_list|)
expr_stmt|;
name|assertTypeByData
argument_list|(
literal|"image/vnd.djvu"
argument_list|,
literal|"testDJVU.djvu"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEndNoteImport
parameter_list|()
throws|throws
name|Exception
block|{
name|assertType
argument_list|(
literal|"application/x-endnote-refer"
argument_list|,
literal|"testEndNoteImportFile.enw"
argument_list|)
expr_stmt|;
name|assertTypeByData
argument_list|(
literal|"application/x-endnote-refer"
argument_list|,
literal|"testEndNoteImportFile.enw"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testStataDTA
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Filename only gives base type
name|assertTypeByName
argument_list|(
literal|"application/x-stata-dta"
argument_list|,
literal|"testStataDTA.dta"
argument_list|)
expr_stmt|;
comment|// With data too, can get specific version
name|assertTypeByData
argument_list|(
literal|"application/x-stata-dta; version=13"
argument_list|,
literal|"testStataDTA.dta"
argument_list|)
expr_stmt|;
comment|// Name + data gets specific version as well
name|assertType
argument_list|(
literal|"application/x-stata-dta; version=13"
argument_list|,
literal|"testStataDTA.dta"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testOneNote
parameter_list|()
throws|throws
name|Exception
block|{
comment|// With name or data we can get the full details
name|assertTypeByName
argument_list|(
literal|"application/onenote; format=one"
argument_list|,
literal|"testOneNote.one"
argument_list|)
expr_stmt|;
name|assertTypeByData
argument_list|(
literal|"application/onenote; format=one"
argument_list|,
literal|"testOneNote.one"
argument_list|)
expr_stmt|;
comment|// TODO Get sample .onetoc2 and .onepkg files
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMSWriteFile
parameter_list|()
throws|throws
name|Exception
block|{
comment|//This file is govdocs1's 746255.doc
name|assertTypeByName
argument_list|(
literal|"application/x-mswrite"
argument_list|,
literal|"testMSWriteFile.wri"
argument_list|)
expr_stmt|;
name|assertTypeByData
argument_list|(
literal|"application/x-mswrite"
argument_list|,
literal|"testMSWriteFile.wri"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSASProgramming
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Data files we have magic for
name|assertTypeByName
argument_list|(
literal|"application/x-sas-data-v6"
argument_list|,
literal|"testSAS.sd2"
argument_list|)
expr_stmt|;
name|assertTypeByData
argument_list|(
literal|"application/x-sas-data-v6"
argument_list|,
literal|"testSAS.sd2"
argument_list|)
expr_stmt|;
name|assertTypeByName
argument_list|(
literal|"application/x-sas-data"
argument_list|,
literal|"testSAS.sas7bdat"
argument_list|)
expr_stmt|;
name|assertTypeByData
argument_list|(
literal|"application/x-sas-data"
argument_list|,
literal|"testSAS.sas7bdat"
argument_list|)
expr_stmt|;
name|assertTypeByName
argument_list|(
literal|"application/x-sas-xport"
argument_list|,
literal|"testSAS.xpt"
argument_list|)
expr_stmt|;
name|assertTypeByData
argument_list|(
literal|"application/x-sas-xport"
argument_list|,
literal|"testSAS.xpt"
argument_list|)
expr_stmt|;
comment|// Programs we don't, so must have mime type to detect
name|assertTypeByName
argument_list|(
literal|"application/x-sas"
argument_list|,
literal|"testSAS.sas"
argument_list|)
expr_stmt|;
name|assertTypeByData
argument_list|(
literal|"text/plain"
argument_list|,
literal|"testSAS.sas"
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|assertText
parameter_list|(
name|byte
index|[]
name|prefix
parameter_list|)
throws|throws
name|IOException
block|{
name|assertMagic
argument_list|(
literal|"text/plain"
argument_list|,
name|prefix
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|assertNotText
parameter_list|(
name|byte
index|[]
name|prefix
parameter_list|)
throws|throws
name|IOException
block|{
name|assertMagic
argument_list|(
literal|"application/octet-stream"
argument_list|,
name|prefix
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|assertMagic
parameter_list|(
name|String
name|expected
parameter_list|,
name|byte
index|[]
name|prefix
parameter_list|)
throws|throws
name|IOException
block|{
name|MediaType
name|type
init|=
name|repo
operator|.
name|detect
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|prefix
argument_list|)
argument_list|,
operator|new
name|Metadata
argument_list|()
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|type
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|type
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|assertType
parameter_list|(
name|String
name|expected
parameter_list|,
name|String
name|filename
parameter_list|)
throws|throws
name|Exception
block|{
try|try
init|(
name|InputStream
name|stream
init|=
name|TestMimeTypes
operator|.
name|class
operator|.
name|getResourceAsStream
argument_list|(
literal|"/test-documents/"
operator|+
name|filename
argument_list|)
init|)
block|{
name|assertNotNull
argument_list|(
literal|"Test file not found: "
operator|+
name|filename
argument_list|,
name|stream
argument_list|)
expr_stmt|;
name|Metadata
name|metadata
init|=
operator|new
name|Metadata
argument_list|()
decl_stmt|;
name|metadata
operator|.
name|set
argument_list|(
name|Metadata
operator|.
name|RESOURCE_NAME_KEY
argument_list|,
name|filename
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|repo
operator|.
name|detect
argument_list|(
name|stream
argument_list|,
name|metadata
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|assertTypeByName
parameter_list|(
name|String
name|expected
parameter_list|,
name|String
name|filename
parameter_list|)
throws|throws
name|IOException
block|{
name|Metadata
name|metadata
init|=
operator|new
name|Metadata
argument_list|()
decl_stmt|;
name|metadata
operator|.
name|set
argument_list|(
name|Metadata
operator|.
name|RESOURCE_NAME_KEY
argument_list|,
name|filename
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|repo
operator|.
name|detect
argument_list|(
literal|null
argument_list|,
name|metadata
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|assertTypeByData
parameter_list|(
name|String
name|expected
parameter_list|,
name|String
name|filename
parameter_list|)
throws|throws
name|IOException
block|{
try|try
init|(
name|InputStream
name|stream
init|=
name|TestMimeTypes
operator|.
name|class
operator|.
name|getResourceAsStream
argument_list|(
literal|"/test-documents/"
operator|+
name|filename
argument_list|)
init|)
block|{
name|assertNotNull
argument_list|(
literal|"Test file not found: "
operator|+
name|filename
argument_list|,
name|stream
argument_list|)
expr_stmt|;
name|Metadata
name|metadata
init|=
operator|new
name|Metadata
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|repo
operator|.
name|detect
argument_list|(
name|stream
argument_list|,
name|metadata
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|assertTypeByData
parameter_list|(
name|String
name|expected
parameter_list|,
name|byte
index|[]
name|data
parameter_list|)
throws|throws
name|IOException
block|{
try|try
init|(
name|InputStream
name|stream
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|data
argument_list|)
init|)
block|{
name|Metadata
name|metadata
init|=
operator|new
name|Metadata
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|repo
operator|.
name|detect
argument_list|(
name|stream
argument_list|,
name|metadata
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|assertTypeDetection
parameter_list|(
name|String
name|filename
parameter_list|,
name|String
name|type
parameter_list|)
throws|throws
name|IOException
block|{
name|assertTypeDetection
argument_list|(
name|filename
argument_list|,
name|type
argument_list|,
name|type
argument_list|,
name|type
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|assertTypeDetection
parameter_list|(
name|String
name|filename
parameter_list|,
name|String
name|byName
parameter_list|,
name|String
name|byData
parameter_list|,
name|String
name|byNameAndData
parameter_list|)
throws|throws
name|IOException
block|{
name|assertTypeByName
argument_list|(
name|byName
argument_list|,
name|filename
argument_list|)
expr_stmt|;
name|assertTypeByData
argument_list|(
name|byData
argument_list|,
name|filename
argument_list|)
expr_stmt|;
name|assertTypeByNameAndData
argument_list|(
name|byNameAndData
argument_list|,
name|filename
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|assertTypeByNameAndData
parameter_list|(
name|String
name|expected
parameter_list|,
name|String
name|filename
parameter_list|)
throws|throws
name|IOException
block|{
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|getTypeByNameAndData
argument_list|(
name|filename
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|MediaType
name|getTypeByNameAndData
parameter_list|(
name|String
name|filename
parameter_list|)
throws|throws
name|IOException
block|{
try|try
init|(
name|InputStream
name|stream
init|=
name|TestMimeTypes
operator|.
name|class
operator|.
name|getResourceAsStream
argument_list|(
literal|"/test-documents/"
operator|+
name|filename
argument_list|)
init|)
block|{
name|assertNotNull
argument_list|(
literal|"Test document not found: "
operator|+
name|filename
argument_list|,
name|stream
argument_list|)
expr_stmt|;
name|Metadata
name|metadata
init|=
operator|new
name|Metadata
argument_list|()
decl_stmt|;
name|metadata
operator|.
name|set
argument_list|(
name|Metadata
operator|.
name|RESOURCE_NAME_KEY
argument_list|,
name|filename
argument_list|)
expr_stmt|;
return|return
name|repo
operator|.
name|detect
argument_list|(
name|stream
argument_list|,
name|metadata
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

