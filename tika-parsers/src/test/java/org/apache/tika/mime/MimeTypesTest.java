begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|mime
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|mime
operator|.
name|MediaType
operator|.
name|OCTET_STREAM
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|mime
operator|.
name|MediaType
operator|.
name|TEXT_PLAIN
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|MimeTypesTest
block|{
specifier|private
name|MimeTypes
name|types
decl_stmt|;
specifier|private
name|MediaTypeRegistry
name|registry
decl_stmt|;
specifier|private
name|MimeType
name|binary
decl_stmt|;
specifier|private
name|MimeType
name|text
decl_stmt|;
specifier|private
name|MimeType
name|html
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|MimeTypeException
block|{
name|types
operator|=
operator|new
name|MimeTypes
argument_list|()
expr_stmt|;
name|registry
operator|=
name|types
operator|.
name|getMediaTypeRegistry
argument_list|()
expr_stmt|;
name|binary
operator|=
name|types
operator|.
name|forName
argument_list|(
literal|"application/octet-stream"
argument_list|)
expr_stmt|;
name|text
operator|=
name|types
operator|.
name|forName
argument_list|(
literal|"text/plain"
argument_list|)
expr_stmt|;
name|types
operator|.
name|addAlias
argument_list|(
name|text
argument_list|,
name|MediaType
operator|.
name|parse
argument_list|(
literal|"text/x-plain"
argument_list|)
argument_list|)
expr_stmt|;
name|html
operator|=
name|types
operator|.
name|forName
argument_list|(
literal|"text/html"
argument_list|)
expr_stmt|;
name|types
operator|.
name|setSuperType
argument_list|(
name|html
argument_list|,
name|TEXT_PLAIN
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testForName
parameter_list|()
throws|throws
name|MimeTypeException
block|{
name|assertEquals
argument_list|(
name|text
argument_list|,
name|types
operator|.
name|forName
argument_list|(
literal|"text/plain"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|text
argument_list|,
name|types
operator|.
name|forName
argument_list|(
literal|"TEXT/PLAIN"
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|types
operator|.
name|forName
argument_list|(
literal|"invalid"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"MimeTypeException not thrown on invalid type name"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MimeTypeException
name|e
parameter_list|)
block|{
comment|// expected
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRegisteredMimes
parameter_list|()
throws|throws
name|MimeTypeException
block|{
name|String
name|dummy
init|=
literal|"text/xxxxx"
decl_stmt|;
name|assertEquals
argument_list|(
name|text
argument_list|,
name|types
operator|.
name|getRegisteredMimeType
argument_list|(
literal|"text/plain"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|types
operator|.
name|getRegisteredMimeType
argument_list|(
name|dummy
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|types
operator|.
name|forName
argument_list|(
name|dummy
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|dummy
argument_list|,
name|types
operator|.
name|forName
argument_list|(
literal|"text/xxxxx"
argument_list|)
operator|.
name|getType
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|dummy
argument_list|,
name|types
operator|.
name|getRegisteredMimeType
argument_list|(
literal|"text/xxxxx"
argument_list|)
operator|.
name|getType
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|types
operator|.
name|forName
argument_list|(
literal|"invalid"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"MimeTypeException not thrown on invalid type name"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MimeTypeException
name|e
parameter_list|)
block|{
comment|// expected
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSuperType
parameter_list|()
throws|throws
name|MimeTypeException
block|{
name|assertNull
argument_list|(
name|registry
operator|.
name|getSupertype
argument_list|(
name|OCTET_STREAM
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|OCTET_STREAM
argument_list|,
name|registry
operator|.
name|getSupertype
argument_list|(
name|TEXT_PLAIN
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|TEXT_PLAIN
argument_list|,
name|registry
operator|.
name|getSupertype
argument_list|(
name|html
operator|.
name|getType
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIsDescendantOf
parameter_list|()
block|{
name|assertFalse
argument_list|(
name|registry
operator|.
name|isSpecializationOf
argument_list|(
name|OCTET_STREAM
argument_list|,
name|OCTET_STREAM
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|registry
operator|.
name|isSpecializationOf
argument_list|(
name|TEXT_PLAIN
argument_list|,
name|TEXT_PLAIN
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|registry
operator|.
name|isSpecializationOf
argument_list|(
name|html
operator|.
name|getType
argument_list|()
argument_list|,
name|html
operator|.
name|getType
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|registry
operator|.
name|isSpecializationOf
argument_list|(
name|html
operator|.
name|getType
argument_list|()
argument_list|,
name|OCTET_STREAM
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|registry
operator|.
name|isSpecializationOf
argument_list|(
name|OCTET_STREAM
argument_list|,
name|html
operator|.
name|getType
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|registry
operator|.
name|isSpecializationOf
argument_list|(
name|html
operator|.
name|getType
argument_list|()
argument_list|,
name|TEXT_PLAIN
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|registry
operator|.
name|isSpecializationOf
argument_list|(
name|TEXT_PLAIN
argument_list|,
name|html
operator|.
name|getType
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|registry
operator|.
name|isSpecializationOf
argument_list|(
name|TEXT_PLAIN
argument_list|,
name|OCTET_STREAM
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|registry
operator|.
name|isSpecializationOf
argument_list|(
name|OCTET_STREAM
argument_list|,
name|TEXT_PLAIN
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCompareTo
parameter_list|()
block|{
name|assertTrue
argument_list|(
name|binary
operator|.
name|compareTo
argument_list|(
name|binary
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|binary
operator|.
name|compareTo
argument_list|(
name|text
argument_list|)
operator|!=
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|binary
operator|.
name|compareTo
argument_list|(
name|html
argument_list|)
operator|!=
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|text
operator|.
name|compareTo
argument_list|(
name|binary
argument_list|)
operator|!=
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|text
operator|.
name|compareTo
argument_list|(
name|text
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|text
operator|.
name|compareTo
argument_list|(
name|html
argument_list|)
operator|!=
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|html
operator|.
name|compareTo
argument_list|(
name|binary
argument_list|)
operator|!=
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|html
operator|.
name|compareTo
argument_list|(
name|text
argument_list|)
operator|!=
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|html
operator|.
name|compareTo
argument_list|(
name|html
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

