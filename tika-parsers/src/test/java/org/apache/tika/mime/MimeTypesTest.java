begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|mime
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_class
specifier|public
class|class
name|MimeTypesTest
extends|extends
name|TestCase
block|{
specifier|private
name|MimeTypes
name|types
decl_stmt|;
specifier|private
name|MimeType
name|binary
decl_stmt|;
specifier|private
name|MimeType
name|text
decl_stmt|;
specifier|private
name|MimeType
name|html
decl_stmt|;
specifier|protected
name|void
name|setUp
parameter_list|()
throws|throws
name|MimeTypeException
block|{
name|types
operator|=
operator|new
name|MimeTypes
argument_list|()
expr_stmt|;
name|binary
operator|=
name|types
operator|.
name|forName
argument_list|(
literal|"application/octet-stream"
argument_list|)
expr_stmt|;
name|text
operator|=
name|types
operator|.
name|forName
argument_list|(
literal|"text/plain"
argument_list|)
expr_stmt|;
name|text
operator|.
name|addAlias
argument_list|(
literal|"text/x-plain"
argument_list|)
expr_stmt|;
name|html
operator|=
name|types
operator|.
name|forName
argument_list|(
literal|"text/html"
argument_list|)
expr_stmt|;
name|html
operator|.
name|setSuperType
argument_list|(
name|text
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testForName
parameter_list|()
throws|throws
name|MimeTypeException
block|{
name|assertEquals
argument_list|(
name|text
argument_list|,
name|types
operator|.
name|forName
argument_list|(
literal|"text/plain"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|text
argument_list|,
name|types
operator|.
name|forName
argument_list|(
literal|"TEXT/PLAIN"
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|types
operator|.
name|forName
argument_list|(
literal|"invalid"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"MimeTypeException not thrown on invalid type name"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MimeTypeException
name|e
parameter_list|)
block|{
comment|// expected
block|}
block|}
specifier|public
name|void
name|testAddAlias
parameter_list|()
throws|throws
name|MimeTypeException
block|{
name|assertEquals
argument_list|(
name|text
argument_list|,
name|types
operator|.
name|forName
argument_list|(
literal|"text/x-plain"
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|text
operator|.
name|addAlias
argument_list|(
literal|"invalid"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"MimeTypeException not thrown on invalid alias name"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MimeTypeException
name|e
parameter_list|)
block|{
comment|// expected
block|}
block|}
specifier|public
name|void
name|testSuperType
parameter_list|()
throws|throws
name|MimeTypeException
block|{
name|assertNull
argument_list|(
name|binary
operator|.
name|getSuperType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|binary
argument_list|,
name|text
operator|.
name|getSuperType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|text
argument_list|,
name|html
operator|.
name|getSuperType
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testIsDescendantOf
parameter_list|()
block|{
name|assertFalse
argument_list|(
name|binary
operator|.
name|isDescendantOf
argument_list|(
name|binary
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|text
operator|.
name|isDescendantOf
argument_list|(
name|text
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|html
operator|.
name|isDescendantOf
argument_list|(
name|html
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|text
operator|.
name|isDescendantOf
argument_list|(
name|binary
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|binary
operator|.
name|isDescendantOf
argument_list|(
name|text
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|html
operator|.
name|isDescendantOf
argument_list|(
name|binary
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|binary
operator|.
name|isDescendantOf
argument_list|(
name|html
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|html
operator|.
name|isDescendantOf
argument_list|(
name|text
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|text
operator|.
name|isDescendantOf
argument_list|(
name|html
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|binary
operator|.
name|isDescendantOf
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected IllegalArgumentException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
comment|// expected result
block|}
block|}
specifier|public
name|void
name|testCompareTo
parameter_list|()
block|{
name|assertTrue
argument_list|(
name|binary
operator|.
name|compareTo
argument_list|(
name|binary
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|binary
operator|.
name|compareTo
argument_list|(
name|text
argument_list|)
operator|<
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|binary
operator|.
name|compareTo
argument_list|(
name|html
argument_list|)
operator|<
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|text
operator|.
name|compareTo
argument_list|(
name|binary
argument_list|)
operator|>
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|text
operator|.
name|compareTo
argument_list|(
name|text
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|text
operator|.
name|compareTo
argument_list|(
name|html
argument_list|)
operator|<
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|html
operator|.
name|compareTo
argument_list|(
name|binary
argument_list|)
operator|>
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|html
operator|.
name|compareTo
argument_list|(
name|text
argument_list|)
operator|>
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|html
operator|.
name|compareTo
argument_list|(
name|html
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
try|try
block|{
name|binary
operator|.
name|compareTo
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected IllegalArgumentException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
comment|// expected result
block|}
block|}
comment|/** Test getMimeType(byte[]) */
specifier|public
name|void
name|testGetMimeType_byteArray
parameter_list|()
block|{
try|try
block|{
name|types
operator|.
name|getMimeType
argument_list|(
operator|(
name|byte
index|[]
operator|)
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected IllegalArgumentException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
comment|// expected result
block|}
comment|// Plain text detection
name|assertText
argument_list|(
operator|new
name|byte
index|[]
block|{
operator|(
name|byte
operator|)
literal|0xFF
block|,
operator|(
name|byte
operator|)
literal|0xFE
block|}
argument_list|)
expr_stmt|;
name|assertText
argument_list|(
operator|new
name|byte
index|[]
block|{
operator|(
name|byte
operator|)
literal|0xFF
block|,
operator|(
name|byte
operator|)
literal|0xFE
block|}
argument_list|)
expr_stmt|;
name|assertText
argument_list|(
operator|new
name|byte
index|[]
block|{
operator|(
name|byte
operator|)
literal|0xEF
block|,
operator|(
name|byte
operator|)
literal|0xFB
block|,
operator|(
name|byte
operator|)
literal|0xBF
block|}
argument_list|)
expr_stmt|;
name|assertText
argument_list|(
operator|new
name|byte
index|[]
block|{
literal|'a'
block|,
literal|'b'
block|,
literal|'c'
block|}
argument_list|)
expr_stmt|;
name|assertText
argument_list|(
operator|new
name|byte
index|[]
block|{
literal|'\t'
block|,
literal|'\r'
block|,
literal|'\n'
block|,
literal|0x0C
block|,
literal|0x1B
block|}
argument_list|)
expr_stmt|;
name|assertNotText
argument_list|(
operator|new
name|byte
index|[]
block|{
literal|'\t'
block|,
literal|'\r'
block|,
literal|'\n'
block|,
literal|0x0E
block|,
literal|0x1C
block|}
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|assertText
parameter_list|(
name|byte
index|[]
name|prefix
parameter_list|)
block|{
name|assertMagic
argument_list|(
literal|"text/plain"
argument_list|,
name|prefix
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|assertNotText
parameter_list|(
name|byte
index|[]
name|prefix
parameter_list|)
block|{
name|assertMagic
argument_list|(
literal|"application/octet-stream"
argument_list|,
name|prefix
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|assertMagic
parameter_list|(
name|String
name|expected
parameter_list|,
name|byte
index|[]
name|prefix
parameter_list|)
block|{
name|MimeType
name|type
init|=
name|types
operator|.
name|getMimeType
argument_list|(
name|prefix
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|type
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|type
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/** Test getMimeType(InputStream) */
specifier|public
name|void
name|testGetMimeType_InputStream
parameter_list|()
throws|throws
name|IOException
block|{
try|try
block|{
name|types
operator|.
name|getMimeType
argument_list|(
operator|(
name|InputStream
operator|)
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected IllegalArgumentException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
comment|// expected result
block|}
block|}
block|}
end_class

end_unit

