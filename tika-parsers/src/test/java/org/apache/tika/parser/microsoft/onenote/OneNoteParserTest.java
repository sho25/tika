begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|microsoft
operator|.
name|onenote
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|TikaTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|metadata
operator|.
name|Metadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|time
operator|.
name|Instant
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_class
specifier|public
class|class
name|OneNoteParserTest
extends|extends
name|TikaTest
block|{
comment|//test recursive parser wrapper for image files
comment|/**      * This is the sample document that is automatically created from onenote 2013.      */
annotation|@
name|Test
specifier|public
name|void
name|testOneNote2013Doc1
parameter_list|()
throws|throws
name|Exception
block|{
comment|//        List<Metadata> metadataList = getRecursiveMetadata("testOneNote1.one");
comment|//      debug(metadataList);
name|Metadata
name|metadata
init|=
operator|new
name|Metadata
argument_list|()
decl_stmt|;
name|String
name|txt
init|=
name|getText
argument_list|(
literal|"testOneNote1.one"
argument_list|,
name|metadata
argument_list|)
decl_stmt|;
name|assertNoJunk
argument_list|(
name|txt
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|authors
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|metadata
operator|.
name|getValues
argument_list|(
literal|"authors"
argument_list|)
argument_list|)
decl_stmt|;
name|assertContains
argument_list|(
literal|"Olya Veselova\u0000"
argument_list|,
name|authors
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"Microsoft\u0000"
argument_list|,
name|authors
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"Scott\u0000"
argument_list|,
name|authors
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"Scott H. W. Snyder\u0000"
argument_list|,
name|authors
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|mostRecentAuthors
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|metadata
operator|.
name|getValues
argument_list|(
literal|"mostRecentAuthors"
argument_list|)
argument_list|)
decl_stmt|;
name|assertContains
argument_list|(
literal|"Microsoft\u0000"
argument_list|,
name|mostRecentAuthors
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|originalAuthors
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|metadata
operator|.
name|getValues
argument_list|(
literal|"originalAuthors"
argument_list|)
argument_list|)
decl_stmt|;
name|assertContains
argument_list|(
literal|"Microsoft\u0000"
argument_list|,
name|originalAuthors
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Instant
operator|.
name|ofEpochSecond
argument_list|(
literal|1336059427
argument_list|)
argument_list|,
name|Instant
operator|.
name|ofEpochSecond
argument_list|(
name|Long
operator|.
name|parseLong
argument_list|(
name|metadata
operator|.
name|get
argument_list|(
literal|"creationTimestamp"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Instant
operator|.
name|ofEpochMilli
argument_list|(
literal|1383613114000L
argument_list|)
argument_list|,
name|Instant
operator|.
name|ofEpochMilli
argument_list|(
name|Long
operator|.
name|parseLong
argument_list|(
name|metadata
operator|.
name|get
argument_list|(
literal|"lastModifiedTimestamp"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Instant
operator|.
name|ofEpochSecond
argument_list|(
literal|1446572147
argument_list|)
argument_list|,
name|Instant
operator|.
name|ofEpochSecond
argument_list|(
name|Long
operator|.
name|parseLong
argument_list|(
name|metadata
operator|.
name|get
argument_list|(
literal|"lastModified"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testOneNote2013Doc2
parameter_list|()
throws|throws
name|Exception
block|{
name|Metadata
name|metadata
init|=
operator|new
name|Metadata
argument_list|()
decl_stmt|;
name|String
name|txt
init|=
name|getText
argument_list|(
literal|"testOneNote2.one"
argument_list|,
name|metadata
argument_list|)
decl_stmt|;
name|assertContains
argument_list|(
literal|"wow this is neat"
argument_list|,
name|txt
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"neat info about totally killin it bro"
argument_list|,
name|txt
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"Section1TextArea1"
argument_list|,
name|txt
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"Section1HeaderTitle"
argument_list|,
name|txt
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"Section1TextArea2"
argument_list|,
name|txt
argument_list|)
expr_stmt|;
name|assertNoJunk
argument_list|(
name|txt
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|authors
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|metadata
operator|.
name|getValues
argument_list|(
literal|"authors"
argument_list|)
argument_list|)
decl_stmt|;
name|assertContains
argument_list|(
literal|"Olya Veselova\u0000"
argument_list|,
name|authors
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"Microsoft\u0000"
argument_list|,
name|authors
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"Scott\u0000"
argument_list|,
name|authors
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"Scott H. W. Snyder\u0000"
argument_list|,
name|authors
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"ndipiazza\u0000"
argument_list|,
name|authors
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|mostRecentAuthors
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|metadata
operator|.
name|getValues
argument_list|(
literal|"mostRecentAuthors"
argument_list|)
argument_list|)
decl_stmt|;
name|assertContains
argument_list|(
literal|"ndipiazza\u0000"
argument_list|,
name|mostRecentAuthors
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"Microsoft\u0000"
argument_list|,
name|mostRecentAuthors
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|originalAuthors
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|metadata
operator|.
name|getValues
argument_list|(
literal|"originalAuthors"
argument_list|)
argument_list|)
decl_stmt|;
name|assertContains
argument_list|(
literal|"Microsoft\u0000"
argument_list|,
name|originalAuthors
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"ndipiazza\u0000"
argument_list|,
name|mostRecentAuthors
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Instant
operator|.
name|ofEpochSecond
argument_list|(
literal|1336059427
argument_list|)
argument_list|,
name|Instant
operator|.
name|ofEpochSecond
argument_list|(
name|Long
operator|.
name|parseLong
argument_list|(
name|metadata
operator|.
name|get
argument_list|(
literal|"creationTimestamp"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Instant
operator|.
name|ofEpochMilli
argument_list|(
literal|1574426629000L
argument_list|)
argument_list|,
name|Instant
operator|.
name|ofEpochMilli
argument_list|(
name|Long
operator|.
name|parseLong
argument_list|(
name|metadata
operator|.
name|get
argument_list|(
literal|"lastModifiedTimestamp"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Instant
operator|.
name|ofEpochSecond
argument_list|(
literal|1574426628
argument_list|)
argument_list|,
name|Instant
operator|.
name|ofEpochSecond
argument_list|(
name|Long
operator|.
name|parseLong
argument_list|(
name|metadata
operator|.
name|get
argument_list|(
literal|"lastModified"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testOneNote2013Doc3
parameter_list|()
throws|throws
name|Exception
block|{
name|Metadata
name|metadata
init|=
operator|new
name|Metadata
argument_list|()
decl_stmt|;
name|String
name|txt
init|=
name|getText
argument_list|(
literal|"testOneNote3.one"
argument_list|,
name|metadata
argument_list|)
decl_stmt|;
name|assertContains
argument_list|(
literal|"awesome information about sports or some crap like that."
argument_list|,
name|txt
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"Quit doing horrible things to me. Dang you. "
argument_list|,
name|txt
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"Section2TextArea1"
argument_list|,
name|txt
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"Section2HeaderTitle"
argument_list|,
name|txt
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"Section2TextArea2"
argument_list|,
name|txt
argument_list|)
expr_stmt|;
name|assertNoJunk
argument_list|(
name|txt
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|authors
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|metadata
operator|.
name|getValues
argument_list|(
literal|"authors"
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotContained
argument_list|(
literal|"Olya Veselova\u0000"
argument_list|,
name|authors
argument_list|)
expr_stmt|;
name|assertNotContained
argument_list|(
literal|"Microsoft\u0000"
argument_list|,
name|authors
argument_list|)
expr_stmt|;
name|assertNotContained
argument_list|(
literal|"Scott\u0000"
argument_list|,
name|authors
argument_list|)
expr_stmt|;
name|assertNotContained
argument_list|(
literal|"Scott H. W. Snyder\u0000"
argument_list|,
name|authors
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"ndipiazza\u0000"
argument_list|,
name|authors
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|mostRecentAuthors
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|metadata
operator|.
name|getValues
argument_list|(
literal|"mostRecentAuthors"
argument_list|)
argument_list|)
decl_stmt|;
name|assertContains
argument_list|(
literal|"ndipiazza\u0000"
argument_list|,
name|mostRecentAuthors
argument_list|)
expr_stmt|;
name|assertNotContained
argument_list|(
literal|"Microsoft\u0000"
argument_list|,
name|mostRecentAuthors
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|originalAuthors
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|metadata
operator|.
name|getValues
argument_list|(
literal|"originalAuthors"
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotContained
argument_list|(
literal|"Microsoft\u0000"
argument_list|,
name|originalAuthors
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"ndipiazza\u0000"
argument_list|,
name|mostRecentAuthors
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Instant
operator|.
name|ofEpochSecond
argument_list|(
literal|1574426349
argument_list|)
argument_list|,
name|Instant
operator|.
name|ofEpochSecond
argument_list|(
name|Long
operator|.
name|parseLong
argument_list|(
name|metadata
operator|.
name|get
argument_list|(
literal|"creationTimestamp"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Instant
operator|.
name|ofEpochMilli
argument_list|(
literal|1574426623000L
argument_list|)
argument_list|,
name|Instant
operator|.
name|ofEpochMilli
argument_list|(
name|Long
operator|.
name|parseLong
argument_list|(
name|metadata
operator|.
name|get
argument_list|(
literal|"lastModifiedTimestamp"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Instant
operator|.
name|ofEpochSecond
argument_list|(
literal|1574426624
argument_list|)
argument_list|,
name|Instant
operator|.
name|ofEpochSecond
argument_list|(
name|Long
operator|.
name|parseLong
argument_list|(
name|metadata
operator|.
name|get
argument_list|(
literal|"lastModified"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testOneNote2013Doc4
parameter_list|()
throws|throws
name|Exception
block|{
name|Metadata
name|metadata
init|=
operator|new
name|Metadata
argument_list|()
decl_stmt|;
name|String
name|txt
init|=
name|getText
argument_list|(
literal|"testOneNote4.one"
argument_list|,
name|metadata
argument_list|)
decl_stmt|;
name|assertContains
argument_list|(
literal|"way too much information about poptarts to handle."
argument_list|,
name|txt
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"Section3TextArea1"
argument_list|,
name|txt
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"Section3HeaderTitle"
argument_list|,
name|txt
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"Section3TextArea2"
argument_list|,
name|txt
argument_list|)
expr_stmt|;
name|assertNoJunk
argument_list|(
name|txt
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|authors
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|metadata
operator|.
name|getValues
argument_list|(
literal|"authors"
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotContained
argument_list|(
literal|"Olya Veselova\u0000"
argument_list|,
name|authors
argument_list|)
expr_stmt|;
name|assertNotContained
argument_list|(
literal|"Microsoft\u0000"
argument_list|,
name|authors
argument_list|)
expr_stmt|;
name|assertNotContained
argument_list|(
literal|"Scott\u0000"
argument_list|,
name|authors
argument_list|)
expr_stmt|;
name|assertNotContained
argument_list|(
literal|"Scott H. W. Snyder\u0000"
argument_list|,
name|authors
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"ndipiazza\u0000"
argument_list|,
name|authors
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|mostRecentAuthors
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|metadata
operator|.
name|getValues
argument_list|(
literal|"mostRecentAuthors"
argument_list|)
argument_list|)
decl_stmt|;
name|assertContains
argument_list|(
literal|"ndipiazza\u0000"
argument_list|,
name|mostRecentAuthors
argument_list|)
expr_stmt|;
name|assertNotContained
argument_list|(
literal|"Microsoft\u0000"
argument_list|,
name|mostRecentAuthors
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|originalAuthors
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|metadata
operator|.
name|getValues
argument_list|(
literal|"originalAuthors"
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotContained
argument_list|(
literal|"Microsoft\u0000"
argument_list|,
name|originalAuthors
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"ndipiazza\u0000"
argument_list|,
name|mostRecentAuthors
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Instant
operator|.
name|ofEpochSecond
argument_list|(
literal|1574426385
argument_list|)
argument_list|,
name|Instant
operator|.
name|ofEpochSecond
argument_list|(
name|Long
operator|.
name|parseLong
argument_list|(
name|metadata
operator|.
name|get
argument_list|(
literal|"creationTimestamp"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Instant
operator|.
name|ofEpochMilli
argument_list|(
literal|1574426548000L
argument_list|)
argument_list|,
name|Instant
operator|.
name|ofEpochMilli
argument_list|(
name|Long
operator|.
name|parseLong
argument_list|(
name|metadata
operator|.
name|get
argument_list|(
literal|"lastModifiedTimestamp"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Instant
operator|.
name|ofEpochSecond
argument_list|(
literal|1574426547
argument_list|)
argument_list|,
name|Instant
operator|.
name|ofEpochSecond
argument_list|(
name|Long
operator|.
name|parseLong
argument_list|(
name|metadata
operator|.
name|get
argument_list|(
literal|"lastModified"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testOneNote2016
parameter_list|()
throws|throws
name|Exception
block|{
name|Metadata
name|metadata
init|=
operator|new
name|Metadata
argument_list|()
decl_stmt|;
name|String
name|txt
init|=
name|getText
argument_list|(
literal|"testOneNote2016.one"
argument_list|,
name|metadata
argument_list|)
decl_stmt|;
name|assertContains
argument_list|(
literal|"So good"
argument_list|,
name|txt
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"This is one note 2016"
argument_list|,
name|txt
argument_list|)
expr_stmt|;
name|assertNoJunk
argument_list|(
name|txt
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|authors
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|metadata
operator|.
name|getValues
argument_list|(
literal|"authors"
argument_list|)
argument_list|)
decl_stmt|;
name|assertContains
argument_list|(
literal|"nicholas dipiazza\u0000"
argument_list|,
name|authors
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|mostRecentAuthors
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|metadata
operator|.
name|getValues
argument_list|(
literal|"mostRecentAuthors"
argument_list|)
argument_list|)
decl_stmt|;
name|assertContains
argument_list|(
literal|"nicholas dipiazza\u0000"
argument_list|,
name|mostRecentAuthors
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|originalAuthors
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|metadata
operator|.
name|getValues
argument_list|(
literal|"originalAuthors"
argument_list|)
argument_list|)
decl_stmt|;
name|assertContains
argument_list|(
literal|"nicholas dipiazza\u0000"
argument_list|,
name|originalAuthors
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Instant
operator|.
name|ofEpochSecond
argument_list|(
literal|1576107472
argument_list|)
argument_list|,
name|Instant
operator|.
name|ofEpochSecond
argument_list|(
name|Long
operator|.
name|parseLong
argument_list|(
name|metadata
operator|.
name|get
argument_list|(
literal|"creationTimestamp"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Instant
operator|.
name|ofEpochMilli
argument_list|(
literal|1576107481000L
argument_list|)
argument_list|,
name|Instant
operator|.
name|ofEpochMilli
argument_list|(
name|Long
operator|.
name|parseLong
argument_list|(
name|metadata
operator|.
name|get
argument_list|(
literal|"lastModifiedTimestamp"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Instant
operator|.
name|ofEpochSecond
argument_list|(
literal|1576107480
argument_list|)
argument_list|,
name|Instant
operator|.
name|ofEpochSecond
argument_list|(
name|Long
operator|.
name|parseLong
argument_list|(
name|metadata
operator|.
name|get
argument_list|(
literal|"lastModified"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testOneNote2007OrEarlier1
parameter_list|()
throws|throws
name|Exception
block|{
name|Metadata
name|metadata
init|=
operator|new
name|Metadata
argument_list|()
decl_stmt|;
name|String
name|txt
init|=
name|getText
argument_list|(
literal|"testOneNote2007OrEarlier1.one"
argument_list|,
name|metadata
argument_list|)
decl_stmt|;
comment|// utf-16 LE text
name|assertContains
argument_list|(
literal|"One note is the application.  The notebooks are the files within the application.  "
operator|+
literal|"Each notebook can have an unlimited amount of sections and pages.  To create a new notebook, go to file, new, computer, "
operator|+
literal|"and name it.  It will go to my documents, oneNote Notebooks folder.  The notebook doesn't close and you don't have to save.  "
operator|+
literal|"If it closes, you can go back to it and it will open at the same place you left off.  If you are offline and the notebook is "
operator|+
literal|"being stored on a sharepoint site, you can work on it and it will sync when you go back online."
argument_list|,
name|txt
argument_list|)
expr_stmt|;
comment|// ascii text
name|assertContains
argument_list|(
literal|"Correlation between Outlook and OneNote"
argument_list|,
name|txt
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testOneNote2007OrEarlier2
parameter_list|()
throws|throws
name|Exception
block|{
name|Metadata
name|metadata
init|=
operator|new
name|Metadata
argument_list|()
decl_stmt|;
name|String
name|txt
init|=
name|getText
argument_list|(
literal|"testOneNote2007OrEarlier2.one"
argument_list|,
name|metadata
argument_list|)
decl_stmt|;
comment|// ascii text
name|assertContains
argument_list|(
literal|"In Outlook meeting notice, select One Note Meeting Notes and then select the \"page\" you want to link/share"
argument_list|,
name|txt
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testOneNoteEmbeddedWordDoc
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|Metadata
argument_list|>
name|metadataList
init|=
name|getRecursiveMetadata
argument_list|(
literal|"testOneNoteEmbeddedWordDoc.one"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|metadataList
operator|.
name|stream
argument_list|()
operator|.
name|anyMatch
argument_list|(
name|ml
lambda|->
literal|"application/vnd.openxmlformats-officedocument.wordprocessingml.document"
operator|.
name|equals
argument_list|(
name|ml
operator|.
name|get
argument_list|(
literal|"Content-Type"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|assertNoJunk
parameter_list|(
name|String
name|txt
parameter_list|)
block|{
comment|//Should not include font names in the text
name|assertNotContained
argument_list|(
literal|"Calibri"
argument_list|,
name|txt
argument_list|)
expr_stmt|;
comment|//Should not include UTF-16 property values that are garbage
name|assertNotContained
argument_list|(
literal|"\u5902"
argument_list|,
name|txt
argument_list|)
expr_stmt|;
name|assertNotContained
argument_list|(
literal|"\u83F2"
argument_list|,
name|txt
argument_list|)
expr_stmt|;
name|assertNotContained
argument_list|(
literal|"\u432F"
argument_list|,
name|txt
argument_list|)
expr_stmt|;
name|assertNotContained
argument_list|(
literal|"\u01E1"
argument_list|,
name|txt
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

