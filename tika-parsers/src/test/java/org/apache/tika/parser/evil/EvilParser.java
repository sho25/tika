begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|evil
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Constructor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|exception
operator|.
name|TikaException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|metadata
operator|.
name|Metadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|mime
operator|.
name|MediaType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|AbstractParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|ParseContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|Attributes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|ContentHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|helpers
operator|.
name|AttributesImpl
import|;
end_import

begin_comment
comment|/**  * Parser to be used only for testing wrappers and drivers of Parsers.  *<p>  * This class enables tests for handling parsers that run into problems.  */
end_comment

begin_class
specifier|public
class|class
name|EvilParser
extends|extends
name|AbstractParser
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
comment|//NOTE: these are just regexes, attributes must be in proper order!
comment|//<throwable message="some message">java.lang.SomeException</throwable>
comment|//<throwable>java.lang.SomeException</throwable>
specifier|private
specifier|static
specifier|final
name|Pattern
name|THROWABLE
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"<throwable(?:\\s*message=\"([^\"]+)\")?\\s*>([^<>]+)</throwable>"
argument_list|)
decl_stmt|;
comment|//<hang type="heavy" max_millis="1000" pulse_check_millis="100000000"/>
comment|//<hang type="sleep" max_millis="1000"/>
specifier|private
specifier|static
specifier|final
name|Pattern
name|HANG
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"<hang type=\"(heavy|sleep)\"\\s+max_millis=\"(\\d+)\"(?:\\s+pulse_check_millis=\"(\\d+)\")?\\s*/>"
argument_list|)
decl_stmt|;
comment|//<real_oom/>
specifier|private
specifier|final
specifier|static
name|Pattern
name|REAL_OOM
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"<real_oom/>"
argument_list|)
decl_stmt|;
annotation|@
name|Override
specifier|public
name|Set
argument_list|<
name|MediaType
argument_list|>
name|getSupportedTypes
parameter_list|(
name|ParseContext
name|context
parameter_list|)
block|{
name|Set
argument_list|<
name|MediaType
argument_list|>
name|types
init|=
operator|new
name|HashSet
argument_list|<
name|MediaType
argument_list|>
argument_list|()
decl_stmt|;
name|MediaType
name|type
init|=
name|MediaType
operator|.
name|application
argument_list|(
literal|"evil"
argument_list|)
decl_stmt|;
name|types
operator|.
name|add
argument_list|(
name|type
argument_list|)
expr_stmt|;
return|return
name|types
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|parse
parameter_list|(
name|InputStream
name|stream
parameter_list|,
name|ContentHandler
name|handler
parameter_list|,
name|Metadata
name|metadata
parameter_list|,
name|ParseContext
name|context
parameter_list|)
throws|throws
name|IOException
throws|,
name|SAXException
throws|,
name|TikaException
block|{
name|String
name|content
init|=
name|IOUtils
operator|.
name|toString
argument_list|(
name|stream
argument_list|,
name|IOUtils
operator|.
name|UTF_8
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|Matcher
name|hangMatcher
init|=
name|HANG
operator|.
name|matcher
argument_list|(
name|content
argument_list|)
decl_stmt|;
if|if
condition|(
name|hangMatcher
operator|.
name|find
argument_list|()
condition|)
block|{
name|handleHang
argument_list|(
name|hangMatcher
argument_list|)
expr_stmt|;
name|handle
argument_list|(
name|content
argument_list|,
name|handler
argument_list|)
expr_stmt|;
return|return;
block|}
name|Matcher
name|throwableMatcher
init|=
name|THROWABLE
operator|.
name|matcher
argument_list|(
name|content
argument_list|)
decl_stmt|;
if|if
condition|(
name|throwableMatcher
operator|.
name|find
argument_list|()
condition|)
block|{
name|String
name|msg
init|=
name|throwableMatcher
operator|.
name|group
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|String
name|throwableClass
init|=
name|throwableMatcher
operator|.
name|group
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|throwIt
argument_list|(
name|throwableClass
argument_list|,
name|msg
argument_list|)
expr_stmt|;
comment|//exception should have been thrown by now
assert|assert
operator|(
literal|false
operator|)
assert|;
block|}
name|Matcher
name|realOOM
init|=
name|REAL_OOM
operator|.
name|matcher
argument_list|(
name|content
argument_list|)
decl_stmt|;
if|if
condition|(
name|realOOM
operator|.
name|find
argument_list|()
condition|)
block|{
name|kabOOM
argument_list|()
expr_stmt|;
block|}
comment|//if there has been no trigger, treat as
comment|//regular utf-8 text file
name|handle
argument_list|(
name|content
argument_list|,
name|handler
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|handleHang
parameter_list|(
name|Matcher
name|hangMatcher
parameter_list|)
block|{
name|String
name|hangType
init|=
name|hangMatcher
operator|.
name|group
argument_list|(
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|hangMatcher
operator|.
name|group
argument_list|(
literal|2
argument_list|)
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"must specify max_millis attribute in<hang>"
argument_list|)
throw|;
block|}
name|long
name|maxMillis
init|=
name|parseLong
argument_list|(
name|hangMatcher
operator|.
name|group
argument_list|(
literal|2
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
literal|"heavy"
operator|.
name|equals
argument_list|(
name|hangType
argument_list|)
condition|)
block|{
if|if
condition|(
name|hangMatcher
operator|.
name|group
argument_list|(
literal|3
argument_list|)
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"must specify pulse_check_millis attribute in<hang> when type is heavy"
argument_list|)
throw|;
block|}
name|long
name|heavyHangPulseMillis
init|=
name|parseLong
argument_list|(
name|hangMatcher
operator|.
name|group
argument_list|(
literal|3
argument_list|)
argument_list|)
decl_stmt|;
name|hangHeavy
argument_list|(
name|maxMillis
argument_list|,
name|heavyHangPulseMillis
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"sleep"
operator|.
name|equals
argument_list|(
name|hangType
argument_list|)
condition|)
block|{
name|sleep
argument_list|(
name|maxMillis
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"need to specify heavy|sleep as value to type attribute for<hang>"
argument_list|)
throw|;
block|}
block|}
specifier|private
name|long
name|parseLong
parameter_list|(
name|String
name|s
parameter_list|)
block|{
name|long
name|millis
init|=
operator|-
literal|1
decl_stmt|;
try|try
block|{
name|millis
operator|=
name|Long
operator|.
name|parseLong
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
comment|//shouldn't happen unless something goes wrong w regex
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Problem in regex parsing sleep duration"
argument_list|)
throw|;
block|}
return|return
name|millis
return|;
block|}
specifier|private
name|void
name|throwIt
parameter_list|(
name|String
name|className
parameter_list|,
name|String
name|msg
parameter_list|)
throws|throws
name|IOException
throws|,
name|SAXException
throws|,
name|TikaException
block|{
name|Throwable
name|t
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|msg
operator|==
literal|null
condition|)
block|{
try|try
block|{
name|t
operator|=
operator|(
name|Throwable
operator|)
name|Class
operator|.
name|forName
argument_list|(
name|className
argument_list|)
operator|.
name|newInstance
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"couldn't create throwable class:"
operator|+
name|className
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
else|else
block|{
try|try
block|{
name|Class
name|clazz
init|=
name|Class
operator|.
name|forName
argument_list|(
name|className
argument_list|)
decl_stmt|;
name|Constructor
name|con
init|=
name|clazz
operator|.
name|getConstructor
argument_list|(
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|t
operator|=
operator|(
name|Throwable
operator|)
name|con
operator|.
name|newInstance
argument_list|(
name|msg
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"couldn't create throwable class:"
operator|+
name|className
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|t
operator|instanceof
name|SAXException
condition|)
block|{
throw|throw
operator|(
name|SAXException
operator|)
name|t
throw|;
block|}
elseif|else
if|if
condition|(
name|t
operator|instanceof
name|IOException
condition|)
block|{
throw|throw
operator|(
name|IOException
operator|)
name|t
throw|;
block|}
elseif|else
if|if
condition|(
name|t
operator|instanceof
name|TikaException
condition|)
block|{
throw|throw
operator|(
name|TikaException
operator|)
name|t
throw|;
block|}
elseif|else
if|if
condition|(
name|t
operator|instanceof
name|Error
condition|)
block|{
throw|throw
operator|(
name|Error
operator|)
name|t
throw|;
block|}
elseif|else
if|if
condition|(
name|t
operator|instanceof
name|RuntimeException
condition|)
block|{
throw|throw
operator|(
name|RuntimeException
operator|)
name|t
throw|;
block|}
else|else
block|{
comment|//wrap the throwable in a RuntimeException
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|t
argument_list|)
throw|;
block|}
block|}
specifier|private
name|void
name|handle
parameter_list|(
name|String
name|content
parameter_list|,
name|ContentHandler
name|handler
parameter_list|)
throws|throws
name|SAXException
block|{
name|handler
operator|.
name|startDocument
argument_list|()
expr_stmt|;
name|Attributes
name|attrs
init|=
operator|new
name|AttributesImpl
argument_list|()
decl_stmt|;
name|handler
operator|.
name|startElement
argument_list|(
literal|""
argument_list|,
literal|"body"
argument_list|,
literal|"body"
argument_list|,
name|attrs
argument_list|)
expr_stmt|;
name|handler
operator|.
name|startElement
argument_list|(
literal|""
argument_list|,
literal|"p"
argument_list|,
literal|"p"
argument_list|,
name|attrs
argument_list|)
expr_stmt|;
name|char
index|[]
name|charArr
init|=
name|content
operator|.
name|toCharArray
argument_list|()
decl_stmt|;
name|handler
operator|.
name|characters
argument_list|(
name|charArr
argument_list|,
literal|0
argument_list|,
name|charArr
operator|.
name|length
argument_list|)
expr_stmt|;
name|handler
operator|.
name|endElement
argument_list|(
literal|""
argument_list|,
literal|"p"
argument_list|,
literal|"p"
argument_list|)
expr_stmt|;
name|handler
operator|.
name|endElement
argument_list|(
literal|""
argument_list|,
literal|"body"
argument_list|,
literal|"body"
argument_list|)
expr_stmt|;
name|handler
operator|.
name|endDocument
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|kabOOM
parameter_list|()
block|{
name|List
argument_list|<
name|int
index|[]
argument_list|>
name|ints
init|=
operator|new
name|ArrayList
argument_list|<
name|int
index|[]
argument_list|>
argument_list|()
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|int
index|[]
name|intArr
init|=
operator|new
name|int
index|[
literal|32000
index|]
decl_stmt|;
name|ints
operator|.
name|add
argument_list|(
name|intArr
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|hangHeavy
parameter_list|(
name|long
name|maxMillis
parameter_list|,
name|long
name|pulseCheckMillis
parameter_list|)
block|{
comment|//do some heavy computation and occasionally check for
comment|//whether time has exceeded maxMillis. see TIKA-1132 for inspiration
name|long
name|start
init|=
operator|new
name|Date
argument_list|()
operator|.
name|getTime
argument_list|()
decl_stmt|;
name|int
name|lastChecked
init|=
literal|0
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|Integer
operator|.
name|MAX_VALUE
condition|;
name|i
operator|++
control|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|1
init|;
name|j
operator|<
name|Integer
operator|.
name|MAX_VALUE
condition|;
name|j
operator|++
control|)
block|{
name|double
name|div
init|=
operator|(
name|double
operator|)
name|i
operator|/
operator|(
name|double
operator|)
name|j
decl_stmt|;
name|lastChecked
operator|++
expr_stmt|;
if|if
condition|(
name|lastChecked
operator|>
name|pulseCheckMillis
condition|)
block|{
name|lastChecked
operator|=
literal|0
expr_stmt|;
name|long
name|elapsed
init|=
operator|new
name|Date
argument_list|()
operator|.
name|getTime
argument_list|()
operator|-
name|start
decl_stmt|;
if|if
condition|(
name|elapsed
operator|>
name|maxMillis
condition|)
block|{
return|return;
block|}
block|}
block|}
block|}
block|}
block|}
specifier|private
name|void
name|sleep
parameter_list|(
name|long
name|maxMillis
parameter_list|)
block|{
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|maxMillis
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{          }
block|}
block|}
end_class

end_unit

