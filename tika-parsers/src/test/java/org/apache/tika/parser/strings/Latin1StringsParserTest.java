begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *   *     http://www.apache.org/licenses/LICENSE-2.0  *   * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|strings
package|;
end_package

begin_import
import|import static
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
operator|.
name|ISO_8859_1
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
operator|.
name|UTF_8
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
operator|.
name|UTF_16
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|metadata
operator|.
name|Metadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|ParseContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|Parser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|sax
operator|.
name|BodyContentHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|ContentHandler
import|;
end_import

begin_class
specifier|public
class|class
name|Latin1StringsParserTest
block|{
annotation|@
name|Test
specifier|public
name|void
name|testParse
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|testStr
init|=
literal|"These are Latin1 accented scripts: \u00C2 \u00C3 \u00C9 \u00DC \u00E2 \u00E3 \u00E9 \u00FC"
decl_stmt|;
name|String
name|smallStr
init|=
literal|"ab"
decl_stmt|;
name|byte
index|[]
name|iso8859Bytes
init|=
name|testStr
operator|.
name|getBytes
argument_list|(
name|ISO_8859_1
argument_list|)
decl_stmt|;
name|byte
index|[]
name|utf8Bytes
init|=
name|testStr
operator|.
name|getBytes
argument_list|(
name|UTF_8
argument_list|)
decl_stmt|;
name|byte
index|[]
name|utf16Bytes
init|=
name|testStr
operator|.
name|getBytes
argument_list|(
name|UTF_16
argument_list|)
decl_stmt|;
name|byte
index|[]
name|zeros
init|=
operator|new
name|byte
index|[
literal|10
index|]
decl_stmt|;
name|byte
index|[]
name|smallString
init|=
name|smallStr
operator|.
name|getBytes
argument_list|(
name|ISO_8859_1
argument_list|)
decl_stmt|;
name|byte
index|[]
name|trashBytes
init|=
block|{
literal|0x00
block|,
literal|0x01
block|,
literal|0x02
block|,
literal|0x03
block|,
literal|0x1E
block|,
literal|0x1F
block|,
operator|(
name|byte
operator|)
literal|0xFF
block|}
decl_stmt|;
name|ByteArrayOutputStream
name|baos
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|baos
operator|.
name|write
argument_list|(
name|iso8859Bytes
argument_list|)
expr_stmt|;
name|baos
operator|.
name|write
argument_list|(
name|zeros
argument_list|)
expr_stmt|;
name|baos
operator|.
name|write
argument_list|(
name|utf8Bytes
argument_list|)
expr_stmt|;
name|baos
operator|.
name|write
argument_list|(
name|trashBytes
argument_list|)
expr_stmt|;
name|baos
operator|.
name|write
argument_list|(
name|utf16Bytes
argument_list|)
expr_stmt|;
name|baos
operator|.
name|write
argument_list|(
name|zeros
argument_list|)
expr_stmt|;
name|baos
operator|.
name|write
argument_list|(
name|smallString
argument_list|)
expr_stmt|;
name|Parser
name|parser
init|=
operator|new
name|Latin1StringsParser
argument_list|()
decl_stmt|;
name|ContentHandler
name|handler
init|=
operator|new
name|BodyContentHandler
argument_list|()
decl_stmt|;
name|InputStream
name|stream
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|baos
operator|.
name|toByteArray
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|parser
operator|.
name|parse
argument_list|(
name|stream
argument_list|,
name|handler
argument_list|,
operator|new
name|Metadata
argument_list|()
argument_list|,
operator|new
name|ParseContext
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|stream
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|String
name|result
init|=
name|handler
operator|.
name|toString
argument_list|()
decl_stmt|;
name|String
name|expected
init|=
name|testStr
operator|+
literal|"\n"
operator|+
name|testStr
operator|+
literal|"\n"
operator|+
name|testStr
operator|+
literal|"\n"
decl_stmt|;
comment|// Test if result contains only the test string appended 3 times
name|assertTrue
argument_list|(
name|result
operator|.
name|equals
argument_list|(
name|expected
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

