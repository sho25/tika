begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|microsoft
operator|.
name|ooxml
package|;
end_package

begin_import
import|import static
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
operator|.
name|UTF_8
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|TikaTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|config
operator|.
name|TikaConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|exception
operator|.
name|EncryptedDocumentException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|metadata
operator|.
name|Metadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|metadata
operator|.
name|Office
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|metadata
operator|.
name|OfficeOpenXMLCore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|metadata
operator|.
name|OfficeOpenXMLExtended
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|metadata
operator|.
name|TikaCoreProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|AutoDetectParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|ParseContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|Parser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|PasswordProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|RecursiveParserWrapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|microsoft
operator|.
name|OfficeParserConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|sax
operator|.
name|BodyContentHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|ContentHandler
import|;
end_import

begin_class
specifier|public
class|class
name|SXWPFExtractorTest
extends|extends
name|TikaTest
block|{
specifier|private
name|ParseContext
name|parseContext
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
block|{
name|parseContext
operator|=
operator|new
name|ParseContext
argument_list|()
expr_stmt|;
name|OfficeParserConfig
name|officeParserConfig
init|=
operator|new
name|OfficeParserConfig
argument_list|()
decl_stmt|;
name|officeParserConfig
operator|.
name|setUseSAXDocxExtractor
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|officeParserConfig
operator|.
name|setUseSAXPptxExtractor
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|parseContext
operator|.
name|set
argument_list|(
name|OfficeParserConfig
operator|.
name|class
argument_list|,
name|officeParserConfig
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|basicTest
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|Metadata
argument_list|>
name|metadataList
init|=
name|getRecursiveMetadata
argument_list|(
literal|"testWORD_2006ml.docx"
argument_list|,
name|parseContext
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|8
argument_list|,
name|metadataList
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Metadata
name|m
init|=
name|metadataList
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"2016-11-29T00:58:00Z"
argument_list|,
name|m
operator|.
name|get
argument_list|(
name|TikaCoreProperties
operator|.
name|CREATED
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"2016-11-29T17:54:00Z"
argument_list|,
name|m
operator|.
name|get
argument_list|(
name|TikaCoreProperties
operator|.
name|MODIFIED
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"My Document Title"
argument_list|,
name|m
operator|.
name|get
argument_list|(
name|TikaCoreProperties
operator|.
name|TITLE
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"This is the Author"
argument_list|,
name|m
operator|.
name|get
argument_list|(
name|TikaCoreProperties
operator|.
name|CREATOR
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"3"
argument_list|,
name|m
operator|.
name|get
argument_list|(
name|OfficeOpenXMLCore
operator|.
name|REVISION
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Allison, Timothy B."
argument_list|,
name|m
operator|.
name|get
argument_list|(
name|TikaCoreProperties
operator|.
name|MODIFIER
argument_list|)
argument_list|)
expr_stmt|;
comment|//assertEquals("0", m.get(OfficeOpenXMLExtended.DOC_SECURITY));
name|assertEquals
argument_list|(
literal|"260"
argument_list|,
name|m
operator|.
name|get
argument_list|(
name|Office
operator|.
name|WORD_COUNT
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"3"
argument_list|,
name|m
operator|.
name|get
argument_list|(
name|Office
operator|.
name|PARAGRAPH_COUNT
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"1742"
argument_list|,
name|m
operator|.
name|get
argument_list|(
name|Office
operator|.
name|CHARACTER_COUNT_WITH_SPACES
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"12"
argument_list|,
name|m
operator|.
name|get
argument_list|(
name|Office
operator|.
name|LINE_COUNT
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"16.0000"
argument_list|,
name|m
operator|.
name|get
argument_list|(
name|OfficeOpenXMLExtended
operator|.
name|APP_VERSION
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|content
init|=
name|m
operator|.
name|get
argument_list|(
name|RecursiveParserWrapper
operator|.
name|TIKA_CONTENT
argument_list|)
decl_stmt|;
name|assertContainsCount
argument_list|(
literal|"engaging title page"
argument_list|,
name|content
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|//need \n to differentiate from metadata values
name|assertContainsCount
argument_list|(
literal|"This is the Author\n"
argument_list|,
name|content
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertContainsCount
argument_list|(
literal|"This is an engaging title page"
argument_list|,
name|content
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"My Document Title"
argument_list|,
name|content
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"My Document Subtitle"
argument_list|,
name|content
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"<p class=\"toc_1\">\t<a href=\"#_Toc467647605\">Heading1\t3</a></p>"
argument_list|,
name|content
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"2. Really basic 2."
argument_list|,
name|content
argument_list|)
expr_stmt|;
name|assertContainsCount
argument_list|(
literal|"This is a text box"
argument_list|,
name|content
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"<p>This is a hyperlink:<a href=\"http://tika.apache.org\">tika</a></p>"
argument_list|,
name|content
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"<p>This is a link to a local file:<a href=\"file:///C:/data/test.png\">test.png</a></p>"
argument_list|,
name|content
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"<p>This is          10 spaces</p>"
argument_list|,
name|content
argument_list|)
expr_stmt|;
comment|//caption
name|assertContains
argument_list|(
literal|"<p class=\"table_of_figures\">\t<a href=\"#_Toc467647797\">Table 1: Table1 Caption\t2</a></p>"
argument_list|,
name|content
argument_list|)
expr_stmt|;
comment|//embedded table
comment|//TODO: figure out how to handle embedded tables in html
name|assertContains
argument_list|(
literal|"<td>Embedded table r1c1"
argument_list|,
name|content
argument_list|)
expr_stmt|;
comment|//shape
name|assertContainsCount
argument_list|(
literal|"<p>This is text within a shape"
argument_list|,
name|content
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|//sdt rich text
name|assertContains
argument_list|(
literal|"<p>Rich text content control"
argument_list|,
name|content
argument_list|)
expr_stmt|;
comment|//sdt simple text
name|assertContains
argument_list|(
literal|"<p>Simple text content control"
argument_list|,
name|content
argument_list|)
expr_stmt|;
comment|//sdt repeating
name|assertContains
argument_list|(
literal|"Repeating content"
argument_list|,
name|content
argument_list|)
expr_stmt|;
comment|//sdt dropdown
comment|//TODO: get options for dropdown
name|assertContains
argument_list|(
literal|"Drop down1"
argument_list|,
name|content
argument_list|)
expr_stmt|;
comment|//sdt date
name|assertContains
argument_list|(
literal|"<p>11/16/2016</p>"
argument_list|,
name|content
argument_list|)
expr_stmt|;
comment|//test that<tab/> works
name|assertContains
argument_list|(
literal|"tab\ttab"
argument_list|,
name|content
argument_list|)
expr_stmt|;
name|assertContainsCount
argument_list|(
literal|"serious word art"
argument_list|,
name|content
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertContainsCount
argument_list|(
literal|"Wordartr1c1"
argument_list|,
name|content
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|//glossary document contents
name|assertContains
argument_list|(
literal|"Click or tap to enter a date"
argument_list|,
name|content
argument_list|)
expr_stmt|;
comment|//basic b/i tags...make sure not to overlap!
name|assertContains
argument_list|(
literal|"<p>The<i>quick</i> brown<b>fox</b>j<i>um</i><b><i>ped</i></b> over"
argument_list|,
name|content
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"This is a comment"
argument_list|,
name|content
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"This is an endnote"
argument_list|,
name|content
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"this is the footnote"
argument_list|,
name|content
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"First page header"
argument_list|,
name|content
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"Even page header"
argument_list|,
name|content
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"Odd page header"
argument_list|,
name|content
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"First page footer"
argument_list|,
name|content
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"Even page footer"
argument_list|,
name|content
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"Odd page footer"
argument_list|,
name|content
argument_list|)
expr_stmt|;
comment|//test default does not include deleted
name|assertNotContained
argument_list|(
literal|"frog"
argument_list|,
name|content
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"Mattmann"
argument_list|,
name|content
argument_list|)
expr_stmt|;
comment|//TODO: extract chart text
comment|//        assertContains("This is the chart title", content);
comment|//TODO: add chart parsing
comment|//        assertContains("This is the chart", content);
block|}
comment|/**      * Test the plain text output of the Word converter      *      * @throws Exception      */
annotation|@
name|Test
specifier|public
name|void
name|testWord
parameter_list|()
throws|throws
name|Exception
block|{
name|XMLResult
name|xmlResult
init|=
name|getXML
argument_list|(
literal|"testWORD.docx"
argument_list|,
name|parseContext
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"application/vnd.openxmlformats-officedocument.wordprocessingml.document"
argument_list|,
name|xmlResult
operator|.
name|metadata
operator|.
name|get
argument_list|(
name|Metadata
operator|.
name|CONTENT_TYPE
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Sample Word Document"
argument_list|,
name|xmlResult
operator|.
name|metadata
operator|.
name|get
argument_list|(
name|TikaCoreProperties
operator|.
name|TITLE
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Keith Bennett"
argument_list|,
name|xmlResult
operator|.
name|metadata
operator|.
name|get
argument_list|(
name|TikaCoreProperties
operator|.
name|CREATOR
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Keith Bennett"
argument_list|,
name|xmlResult
operator|.
name|metadata
operator|.
name|get
argument_list|(
name|Metadata
operator|.
name|AUTHOR
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|xmlResult
operator|.
name|xml
operator|.
name|contains
argument_list|(
literal|"Sample Word Document"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Test the plain text output of the Word converter      *      * @throws Exception      */
annotation|@
name|Test
specifier|public
name|void
name|testWordFootnote
parameter_list|()
throws|throws
name|Exception
block|{
name|XMLResult
name|xmlResult
init|=
name|getXML
argument_list|(
literal|"footnotes.docx"
argument_list|,
name|parseContext
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"application/vnd.openxmlformats-officedocument.wordprocessingml.document"
argument_list|,
name|xmlResult
operator|.
name|metadata
operator|.
name|get
argument_list|(
name|Metadata
operator|.
name|CONTENT_TYPE
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|xmlResult
operator|.
name|xml
operator|.
name|contains
argument_list|(
literal|"snoska"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Test that the word converter is able to generate the      * correct HTML for the document      */
annotation|@
name|Test
specifier|public
name|void
name|testWordHTML
parameter_list|()
throws|throws
name|Exception
block|{
name|XMLResult
name|result
init|=
name|getXML
argument_list|(
literal|"testWORD.docx"
argument_list|,
name|parseContext
argument_list|)
decl_stmt|;
name|String
name|xml
init|=
name|result
operator|.
name|xml
decl_stmt|;
name|Metadata
name|metadata
init|=
name|result
operator|.
name|metadata
decl_stmt|;
name|assertEquals
argument_list|(
literal|"application/vnd.openxmlformats-officedocument.wordprocessingml.document"
argument_list|,
name|metadata
operator|.
name|get
argument_list|(
name|Metadata
operator|.
name|CONTENT_TYPE
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Sample Word Document"
argument_list|,
name|metadata
operator|.
name|get
argument_list|(
name|TikaCoreProperties
operator|.
name|TITLE
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Keith Bennett"
argument_list|,
name|metadata
operator|.
name|get
argument_list|(
name|TikaCoreProperties
operator|.
name|CREATOR
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Keith Bennett"
argument_list|,
name|metadata
operator|.
name|get
argument_list|(
name|Metadata
operator|.
name|AUTHOR
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|xml
operator|.
name|contains
argument_list|(
literal|"Sample Word Document"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Check that custom headings came through
name|assertTrue
argument_list|(
name|xml
operator|.
name|contains
argument_list|(
literal|"<h1 class=\"title\">"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Regular headings
name|assertContains
argument_list|(
literal|"<h1>Heading Level 1</h1>"
argument_list|,
name|xml
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|xml
operator|.
name|contains
argument_list|(
literal|"<h2>Heading Level 2</h2>"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Headings with anchor tags in them
comment|//TODO: still not getting bookmarks
name|assertTrue
argument_list|(
name|xml
operator|.
name|contains
argument_list|(
literal|"<h3>Heading Level 3<a name=\"OnLevel3\" /></h3>"
argument_list|)
argument_list|)
expr_stmt|;
comment|//        assertTrue(xml.contains("<h3>Heading Level 3</h3>"));
comment|// Bold and italic
name|assertTrue
argument_list|(
name|xml
operator|.
name|contains
argument_list|(
literal|"<b>BOLD</b>"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|xml
operator|.
name|contains
argument_list|(
literal|"<i>ITALIC</i>"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Table
name|assertTrue
argument_list|(
name|xml
operator|.
name|contains
argument_list|(
literal|"<table>"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|xml
operator|.
name|contains
argument_list|(
literal|"<td>"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Links
name|assertTrue
argument_list|(
name|xml
operator|.
name|contains
argument_list|(
literal|"<a href=\"http://tika.apache.org/\">Tika</a>"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Anchor links
name|assertContains
argument_list|(
literal|"<a href=\"#OnMainHeading\">The Main Heading Bookmark</a>"
argument_list|,
name|xml
argument_list|)
expr_stmt|;
comment|// Paragraphs with other styles
name|assertTrue
argument_list|(
name|xml
operator|.
name|contains
argument_list|(
literal|"<p class=\"signature\">This one"
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|=
name|getXML
argument_list|(
literal|"testWORD_3imgs.docx"
argument_list|,
name|parseContext
argument_list|)
expr_stmt|;
name|xml
operator|=
name|result
operator|.
name|xml
expr_stmt|;
comment|// Images 2-4 (there is no 1!)
name|assertTrue
argument_list|(
literal|"Image not found in:\n"
operator|+
name|xml
argument_list|,
name|xml
operator|.
name|contains
argument_list|(
literal|"<img src=\"embedded:image2.png\" alt=\"A description...\" />"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Image not found in:\n"
operator|+
name|xml
argument_list|,
name|xml
operator|.
name|contains
argument_list|(
literal|"<img src=\"embedded:image3.jpeg\" alt=\"A description...\" />"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Image not found in:\n"
operator|+
name|xml
argument_list|,
name|xml
operator|.
name|contains
argument_list|(
literal|"<img src=\"embedded:image4.png\" alt=\"A description...\" />"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Text too
name|assertTrue
argument_list|(
name|xml
operator|.
name|contains
argument_list|(
literal|"<p>The end!</p>"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testContiguousHTMLFormatting
parameter_list|()
throws|throws
name|Exception
block|{
comment|// TIKA-692: test document containing multiple
comment|// character runs within a bold tag:
name|String
name|xml
init|=
name|getXML
argument_list|(
literal|"testWORD_bold_character_runs.docx"
argument_list|,
name|parseContext
argument_list|)
operator|.
name|xml
decl_stmt|;
comment|// Make sure bold text arrived as single
comment|// contiguous string even though Word parser
comment|// handled this as 3 character runs
name|assertTrue
argument_list|(
literal|"Bold text wasn't contiguous: "
operator|+
name|xml
argument_list|,
name|xml
operator|.
name|contains
argument_list|(
literal|"F<b>oob</b>a<b>r</b>"
argument_list|)
argument_list|)
expr_stmt|;
comment|// TIKA-692: test document containing multiple
comment|// character runs within a bold tag:
name|xml
operator|=
name|getXML
argument_list|(
literal|"testWORD_bold_character_runs2.docx"
argument_list|,
name|parseContext
argument_list|)
operator|.
name|xml
expr_stmt|;
comment|// Make sure bold text arrived as single
comment|// contiguous string even though Word parser
comment|// handled this as 3 character runs
name|assertTrue
argument_list|(
literal|"Bold text wasn't contiguous: "
operator|+
name|xml
argument_list|,
name|xml
operator|.
name|contains
argument_list|(
literal|"F<b>oob</b>a<b>r</b>"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Test that we can extract image from docx header      */
annotation|@
name|Test
specifier|public
name|void
name|testWordPicturesInHeader
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|Metadata
argument_list|>
name|metadataList
init|=
name|getRecursiveMetadata
argument_list|(
literal|"headerPic.docx"
argument_list|,
name|parseContext
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|metadataList
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Metadata
name|m
init|=
name|metadataList
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|String
name|mainContent
init|=
name|m
operator|.
name|get
argument_list|(
name|RecursiveParserWrapper
operator|.
name|TIKA_CONTENT
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"application/vnd.openxmlformats-officedocument.wordprocessingml.document"
argument_list|,
name|m
operator|.
name|get
argument_list|(
name|Metadata
operator|.
name|CONTENT_TYPE
argument_list|)
argument_list|)
expr_stmt|;
comment|// Check that custom headings came through
name|assertTrue
argument_list|(
name|mainContent
operator|.
name|contains
argument_list|(
literal|"<img"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPicturesInVariousPlaces
parameter_list|()
throws|throws
name|Exception
block|{
comment|//test that images are actually extracted from
comment|//headers, footers, comments, endnotes, footnotes
name|List
argument_list|<
name|Metadata
argument_list|>
name|metadataList
init|=
name|getRecursiveMetadata
argument_list|(
literal|"testWORD_embedded_pics.docx"
argument_list|,
name|parseContext
argument_list|)
decl_stmt|;
comment|//only process embedded resources once
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|metadataList
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|content
init|=
name|metadataList
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|get
argument_list|(
name|RecursiveParserWrapper
operator|.
name|TIKA_CONTENT
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
literal|4
condition|;
name|i
operator|++
control|)
block|{
name|assertContains
argument_list|(
literal|"header"
operator|+
name|i
operator|+
literal|"_pic"
argument_list|,
name|content
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"footer"
operator|+
name|i
operator|+
literal|"_pic"
argument_list|,
name|content
argument_list|)
expr_stmt|;
block|}
name|assertContains
argument_list|(
literal|"body_pic.jpg"
argument_list|,
name|content
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"sdt_pic.jpg"
argument_list|,
name|content
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"deeply_embedded_pic"
argument_list|,
name|content
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"deleted_pic"
argument_list|,
name|content
argument_list|)
expr_stmt|;
comment|//TODO: don't extract this
name|assertContains
argument_list|(
literal|"footnotes_pic"
argument_list|,
name|content
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"comments_pic"
argument_list|,
name|content
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"endnotes_pic"
argument_list|,
name|content
argument_list|)
expr_stmt|;
comment|//        assertContains("sdt2_pic.jpg", content);//name of file is not stored in image-sdt
name|assertContainsCount
argument_list|(
literal|"<img src="
argument_list|,
name|content
argument_list|,
literal|14
argument_list|)
expr_stmt|;
block|}
comment|/**      * Test docx without headers      * TIKA-633      */
annotation|@
name|Test
specifier|public
name|void
name|testNullHeaders
parameter_list|()
throws|throws
name|Exception
block|{
name|XMLResult
name|xmlResult
init|=
name|getXML
argument_list|(
literal|"NullHeader.docx"
argument_list|,
name|parseContext
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Should have found some text"
argument_list|,
literal|false
argument_list|,
name|xmlResult
operator|.
name|xml
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testVarious
parameter_list|()
throws|throws
name|Exception
block|{
name|Metadata
name|metadata
init|=
operator|new
name|Metadata
argument_list|()
decl_stmt|;
name|String
name|content
init|=
name|getText
argument_list|(
name|getResourceAsStream
argument_list|(
literal|"/test-documents/testWORD_various.docx"
argument_list|)
argument_list|,
operator|new
name|AutoDetectParser
argument_list|()
argument_list|,
name|parseContext
argument_list|,
name|metadata
argument_list|)
decl_stmt|;
comment|//content = content.replaceAll("\\s+"," ");
name|assertContains
argument_list|(
literal|"Footnote appears here"
argument_list|,
name|content
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"This is a footnote."
argument_list|,
name|content
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"This is the header text."
argument_list|,
name|content
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"This is the footer text."
argument_list|,
name|content
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"Here is a text box"
argument_list|,
name|content
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"Bold"
argument_list|,
name|content
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"italic"
argument_list|,
name|content
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"underline"
argument_list|,
name|content
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"superscript"
argument_list|,
name|content
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"subscript"
argument_list|,
name|content
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"Here is a citation:"
argument_list|,
name|content
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"Figure 1 This is a caption for Figure 1"
argument_list|,
name|content
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"(Kramer)"
argument_list|,
name|content
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"Row 1 Col 1 Row 1 Col 2 Row 1 Col 3 Row 2 Col 1 Row 2 Col 2 Row 2 Col 3"
argument_list|,
name|content
operator|.
name|replaceAll
argument_list|(
literal|"\\s+"
argument_list|,
literal|" "
argument_list|)
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"Row 1 column 1 Row 2 column 1 Row 1 column 2 Row 2 column 2"
argument_list|,
name|content
operator|.
name|replaceAll
argument_list|(
literal|"\\s+"
argument_list|,
literal|" "
argument_list|)
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"This is a hyperlink"
argument_list|,
name|content
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"Here is a list:"
argument_list|,
name|content
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|row
init|=
literal|1
init|;
name|row
operator|<=
literal|3
condition|;
name|row
operator|++
control|)
block|{
comment|//assertContains("·\tBullet " + row, content);
comment|//assertContains("\u00b7\tBullet " + row, content);
name|assertContains
argument_list|(
literal|"Bullet "
operator|+
name|row
argument_list|,
name|content
argument_list|)
expr_stmt|;
block|}
name|assertContains
argument_list|(
literal|"Here is a numbered list:"
argument_list|,
name|content
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|row
init|=
literal|1
init|;
name|row
operator|<=
literal|3
condition|;
name|row
operator|++
control|)
block|{
comment|//assertContains(row + ")\tNumber bullet " + row, content);
comment|//assertContains(row + ") Number bullet " + row, content);
comment|// TODO: OOXMLExtractor fails to number the bullets:
name|assertContains
argument_list|(
literal|"Number bullet "
operator|+
name|row
argument_list|,
name|content
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|row
init|=
literal|1
init|;
name|row
operator|<=
literal|2
condition|;
name|row
operator|++
control|)
block|{
for|for
control|(
name|int
name|col
init|=
literal|1
init|;
name|col
operator|<=
literal|3
condition|;
name|col
operator|++
control|)
block|{
name|assertContains
argument_list|(
literal|"Row "
operator|+
name|row
operator|+
literal|" Col "
operator|+
name|col
argument_list|,
name|content
argument_list|)
expr_stmt|;
block|}
block|}
name|assertContains
argument_list|(
literal|"Keyword1 Keyword2"
argument_list|,
name|content
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Keyword1 Keyword2"
argument_list|,
name|metadata
operator|.
name|get
argument_list|(
name|Metadata
operator|.
name|KEYWORDS
argument_list|)
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"Subject is here"
argument_list|,
name|content
argument_list|)
expr_stmt|;
comment|// TODO: Remove subject in Tika 2.0
name|assertEquals
argument_list|(
literal|"Subject is here"
argument_list|,
name|metadata
operator|.
name|get
argument_list|(
name|Metadata
operator|.
name|SUBJECT
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Subject is here"
argument_list|,
name|metadata
operator|.
name|get
argument_list|(
name|OfficeOpenXMLCore
operator|.
name|SUBJECT
argument_list|)
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"Suddenly some Japanese text:"
argument_list|,
name|content
argument_list|)
expr_stmt|;
comment|// Special version of (GHQ)
name|assertContains
argument_list|(
literal|"\uff08\uff27\uff28\uff31\uff09"
argument_list|,
name|content
argument_list|)
expr_stmt|;
comment|// 6 other characters
name|assertContains
argument_list|(
literal|"\u30be\u30eb\u30b2\u3068\u5c3e\u5d0e\u3001\u6de1\u3005\u3068\u6700\u671f"
argument_list|,
name|content
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"And then some Gothic text:"
argument_list|,
name|content
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"\uD800\uDF32\uD800\uDF3f\uD800\uDF44\uD800\uDF39\uD800\uDF43\uD800\uDF3A"
argument_list|,
name|content
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testWordCustomProperties
parameter_list|()
throws|throws
name|Exception
block|{
name|Metadata
name|metadata
init|=
operator|new
name|Metadata
argument_list|()
decl_stmt|;
try|try
init|(
name|InputStream
name|input
init|=
name|OOXMLParserTest
operator|.
name|class
operator|.
name|getResourceAsStream
argument_list|(
literal|"/test-documents/testWORD_custom_props.docx"
argument_list|)
init|)
block|{
name|ContentHandler
name|handler
init|=
operator|new
name|BodyContentHandler
argument_list|(
operator|-
literal|1
argument_list|)
decl_stmt|;
name|ParseContext
name|context
init|=
operator|new
name|ParseContext
argument_list|()
decl_stmt|;
name|context
operator|.
name|set
argument_list|(
name|Locale
operator|.
name|class
argument_list|,
name|Locale
operator|.
name|US
argument_list|)
expr_stmt|;
operator|new
name|OOXMLParser
argument_list|()
operator|.
name|parse
argument_list|(
name|input
argument_list|,
name|handler
argument_list|,
name|metadata
argument_list|,
name|context
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"application/vnd.openxmlformats-officedocument.wordprocessingml.document"
argument_list|,
name|metadata
operator|.
name|get
argument_list|(
name|Metadata
operator|.
name|CONTENT_TYPE
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"EJ04325S"
argument_list|,
name|metadata
operator|.
name|get
argument_list|(
name|TikaCoreProperties
operator|.
name|CREATOR
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Etienne Jouvin"
argument_list|,
name|metadata
operator|.
name|get
argument_list|(
name|TikaCoreProperties
operator|.
name|MODIFIER
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Etienne Jouvin"
argument_list|,
name|metadata
operator|.
name|get
argument_list|(
name|Metadata
operator|.
name|LAST_AUTHOR
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"2011-07-29T16:52:00Z"
argument_list|,
name|metadata
operator|.
name|get
argument_list|(
name|TikaCoreProperties
operator|.
name|CREATED
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"2011-07-29T16:52:00Z"
argument_list|,
name|metadata
operator|.
name|get
argument_list|(
name|Metadata
operator|.
name|CREATION_DATE
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"2012-01-03T22:14:00Z"
argument_list|,
name|metadata
operator|.
name|get
argument_list|(
name|TikaCoreProperties
operator|.
name|MODIFIED
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"2012-01-03T22:14:00Z"
argument_list|,
name|metadata
operator|.
name|get
argument_list|(
name|Metadata
operator|.
name|DATE
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Microsoft Office Word"
argument_list|,
name|metadata
operator|.
name|get
argument_list|(
name|Metadata
operator|.
name|APPLICATION_NAME
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Microsoft Office Word"
argument_list|,
name|metadata
operator|.
name|get
argument_list|(
name|OfficeOpenXMLExtended
operator|.
name|APPLICATION
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"1"
argument_list|,
name|metadata
operator|.
name|get
argument_list|(
name|Office
operator|.
name|PAGE_COUNT
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"2"
argument_list|,
name|metadata
operator|.
name|get
argument_list|(
name|Office
operator|.
name|WORD_COUNT
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"My Title"
argument_list|,
name|metadata
operator|.
name|get
argument_list|(
name|TikaCoreProperties
operator|.
name|TITLE
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"My Keyword"
argument_list|,
name|metadata
operator|.
name|get
argument_list|(
name|TikaCoreProperties
operator|.
name|KEYWORDS
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Normal.dotm"
argument_list|,
name|metadata
operator|.
name|get
argument_list|(
name|Metadata
operator|.
name|TEMPLATE
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Normal.dotm"
argument_list|,
name|metadata
operator|.
name|get
argument_list|(
name|OfficeOpenXMLExtended
operator|.
name|TEMPLATE
argument_list|)
argument_list|)
expr_stmt|;
comment|// TODO: Remove subject in Tika 2.0
name|assertEquals
argument_list|(
literal|"My subject"
argument_list|,
name|metadata
operator|.
name|get
argument_list|(
name|Metadata
operator|.
name|SUBJECT
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"My subject"
argument_list|,
name|metadata
operator|.
name|get
argument_list|(
name|OfficeOpenXMLCore
operator|.
name|SUBJECT
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"EDF-DIT"
argument_list|,
name|metadata
operator|.
name|get
argument_list|(
name|TikaCoreProperties
operator|.
name|PUBLISHER
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"true"
argument_list|,
name|metadata
operator|.
name|get
argument_list|(
literal|"custom:myCustomBoolean"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"3"
argument_list|,
name|metadata
operator|.
name|get
argument_list|(
literal|"custom:myCustomNumber"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"MyStringValue"
argument_list|,
name|metadata
operator|.
name|get
argument_list|(
literal|"custom:MyCustomString"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"2010-12-30T23:00:00Z"
argument_list|,
name|metadata
operator|.
name|get
argument_list|(
literal|"custom:MyCustomDate"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"2010-12-29T22:00:00Z"
argument_list|,
name|metadata
operator|.
name|get
argument_list|(
literal|"custom:myCustomSecondDate"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// TIKA-989:
annotation|@
name|Test
specifier|public
name|void
name|testEmbeddedPDF
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|xml
init|=
name|getXML
argument_list|(
literal|"testWORD_embedded_pdf.docx"
argument_list|,
name|parseContext
argument_list|)
operator|.
name|xml
decl_stmt|;
name|int
name|i
init|=
name|xml
operator|.
name|indexOf
argument_list|(
literal|"Here is the pdf file:"
argument_list|)
decl_stmt|;
name|int
name|j
init|=
name|xml
operator|.
name|indexOf
argument_list|(
literal|"<div class=\"embedded\" id=\"rId5\" />"
argument_list|)
decl_stmt|;
name|int
name|k
init|=
name|xml
operator|.
name|indexOf
argument_list|(
literal|"Bye Bye"
argument_list|)
decl_stmt|;
name|int
name|l
init|=
name|xml
operator|.
name|indexOf
argument_list|(
literal|"<div class=\"embedded\" id=\"rId6\" />"
argument_list|)
decl_stmt|;
name|int
name|m
init|=
name|xml
operator|.
name|indexOf
argument_list|(
literal|"Bye for real."
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|i
operator|!=
operator|-
literal|1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|j
operator|!=
operator|-
literal|1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|k
operator|!=
operator|-
literal|1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|l
operator|!=
operator|-
literal|1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|m
operator|!=
operator|-
literal|1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|i
operator|<
name|j
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|j
operator|<
name|k
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|k
operator|<
name|l
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|l
operator|<
name|m
argument_list|)
expr_stmt|;
block|}
comment|// TIKA-1006
annotation|@
name|Test
specifier|public
name|void
name|testWordNullStyle
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|xml
init|=
name|getXML
argument_list|(
literal|"testWORD_null_style.docx"
argument_list|)
operator|.
name|xml
decl_stmt|;
name|assertContains
argument_list|(
literal|"Test av styrt dokument"
argument_list|,
name|xml
argument_list|)
expr_stmt|;
block|}
comment|/**      * TIKA-1044 - Handle word documents where parts of the      * text have no formatting or styles applied to them      */
annotation|@
name|Test
specifier|public
name|void
name|testNoFormat
parameter_list|()
throws|throws
name|Exception
block|{
name|assertContains
argument_list|(
literal|"This is a piece of text that causes an exception"
argument_list|,
name|getXML
argument_list|(
literal|"testWORD_no_format.docx"
argument_list|,
name|parseContext
argument_list|)
operator|.
name|xml
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSkipDeleted
parameter_list|()
throws|throws
name|Exception
block|{
name|ParseContext
name|pc
init|=
operator|new
name|ParseContext
argument_list|()
decl_stmt|;
name|OfficeParserConfig
name|officeParserConfig
init|=
operator|new
name|OfficeParserConfig
argument_list|()
decl_stmt|;
name|officeParserConfig
operator|.
name|setIncludeDeletedContent
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|officeParserConfig
operator|.
name|setUseSAXDocxExtractor
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|officeParserConfig
operator|.
name|setIncludeMoveFromContent
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|pc
operator|.
name|set
argument_list|(
name|OfficeParserConfig
operator|.
name|class
argument_list|,
name|officeParserConfig
argument_list|)
expr_stmt|;
name|XMLResult
name|r
init|=
name|getXML
argument_list|(
literal|"testWORD_2006ml.docx"
argument_list|,
name|pc
argument_list|)
decl_stmt|;
name|assertContains
argument_list|(
literal|"frog"
argument_list|,
name|r
operator|.
name|xml
argument_list|)
expr_stmt|;
name|assertContainsCount
argument_list|(
literal|"Second paragraph"
argument_list|,
name|r
operator|.
name|xml
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
comment|// TIKA-1005:
annotation|@
name|Test
specifier|public
name|void
name|testTextInsideTextBox
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|xml
init|=
name|getXML
argument_list|(
literal|"testWORD_text_box.docx"
argument_list|,
name|parseContext
argument_list|)
operator|.
name|xml
decl_stmt|;
name|assertContains
argument_list|(
literal|"This text is directly in the body of the document."
argument_list|,
name|xml
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"This text is inside of a text box in the body of the document."
argument_list|,
name|xml
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"This text is inside of a text box in the header of the document."
argument_list|,
name|xml
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"This text is inside of a text box in the footer of the document."
argument_list|,
name|xml
argument_list|)
expr_stmt|;
block|}
comment|//TIKA-2346
annotation|@
name|Test
specifier|public
name|void
name|testTurningOffTextBoxExtraction
parameter_list|()
throws|throws
name|Exception
block|{
name|ParseContext
name|pc
init|=
operator|new
name|ParseContext
argument_list|()
decl_stmt|;
name|OfficeParserConfig
name|officeParserConfig
init|=
operator|new
name|OfficeParserConfig
argument_list|()
decl_stmt|;
name|officeParserConfig
operator|.
name|setIncludeShapeBasedContent
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|officeParserConfig
operator|.
name|setUseSAXDocxExtractor
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|pc
operator|.
name|set
argument_list|(
name|OfficeParserConfig
operator|.
name|class
argument_list|,
name|officeParserConfig
argument_list|)
expr_stmt|;
name|String
name|xml
init|=
name|getXML
argument_list|(
literal|"testWORD_text_box.docx"
argument_list|,
name|pc
argument_list|)
operator|.
name|xml
decl_stmt|;
name|assertContains
argument_list|(
literal|"This text is directly in the body of the document."
argument_list|,
name|xml
argument_list|)
expr_stmt|;
name|assertNotContained
argument_list|(
literal|"This text is inside of a text box in the body of the document."
argument_list|,
name|xml
argument_list|)
expr_stmt|;
name|assertNotContained
argument_list|(
literal|"This text is inside of a text box in the header of the document."
argument_list|,
name|xml
argument_list|)
expr_stmt|;
name|assertNotContained
argument_list|(
literal|"This text is inside of a text box in the footer of the document."
argument_list|,
name|xml
argument_list|)
expr_stmt|;
block|}
comment|/**      * Test for missing text described in      *<a href="https://issues.apache.org/jira/browse/TIKA-1130">TIKA-1130</a>.      * and TIKA-1317      */
annotation|@
name|Test
specifier|public
name|void
name|testMissingText
parameter_list|()
throws|throws
name|Exception
block|{
name|XMLResult
name|xmlResult
init|=
name|getXML
argument_list|(
literal|"testWORD_missing_text.docx"
argument_list|,
name|parseContext
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"application/vnd.openxmlformats-officedocument.wordprocessingml.document"
argument_list|,
name|xmlResult
operator|.
name|metadata
operator|.
name|get
argument_list|(
name|Metadata
operator|.
name|CONTENT_TYPE
argument_list|)
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"BigCompany"
argument_list|,
name|xmlResult
operator|.
name|xml
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"Seasoned"
argument_list|,
name|xmlResult
operator|.
name|xml
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"Rich_text_in_cell"
argument_list|,
name|xmlResult
operator|.
name|xml
argument_list|)
expr_stmt|;
block|}
comment|//TIKA-792; with room for future missing bean tests
annotation|@
name|Test
specifier|public
name|void
name|testWordMissingOOXMLBeans
parameter_list|()
throws|throws
name|Exception
block|{
comment|//If a bean is missing, POI prints stack trace to stderr
name|String
index|[]
name|fileNames
init|=
operator|new
name|String
index|[]
block|{
literal|"testWORD_missing_ooxml_bean1.docx"
block|,
comment|//TIKA-792
block|}
decl_stmt|;
name|PrintStream
name|origErr
init|=
name|System
operator|.
name|err
decl_stmt|;
for|for
control|(
name|String
name|fileName
range|:
name|fileNames
control|)
block|{
comment|//grab stderr
name|ByteArrayOutputStream
name|errContent
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|System
operator|.
name|setErr
argument_list|(
operator|new
name|PrintStream
argument_list|(
name|errContent
argument_list|,
literal|true
argument_list|,
name|UTF_8
operator|.
name|name
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|getXML
argument_list|(
name|fileName
argument_list|,
name|parseContext
argument_list|)
expr_stmt|;
comment|//return stderr
name|System
operator|.
name|setErr
argument_list|(
name|origErr
argument_list|)
expr_stmt|;
name|String
name|err
init|=
name|errContent
operator|.
name|toString
argument_list|(
name|UTF_8
operator|.
name|name
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|err
operator|.
name|length
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDOCXThumbnail
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|xml
init|=
name|getXML
argument_list|(
literal|"testDOCX_Thumbnail.docx"
argument_list|,
name|parseContext
argument_list|)
operator|.
name|xml
decl_stmt|;
name|int
name|a
init|=
name|xml
operator|.
name|indexOf
argument_list|(
literal|"This file contains a thumbnail"
argument_list|)
decl_stmt|;
name|int
name|b
init|=
name|xml
operator|.
name|indexOf
argument_list|(
literal|"<div class=\"embedded\" id=\"/docProps/thumbnail.emf\" />"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|a
operator|!=
operator|-
literal|1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|b
operator|!=
operator|-
literal|1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|a
operator|<
name|b
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEncrypted
parameter_list|()
throws|throws
name|Exception
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|tests
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|tests
operator|.
name|put
argument_list|(
literal|"testWORD_protected_passtika.docx"
argument_list|,
literal|"This is an encrypted Word 2007 File"
argument_list|)
expr_stmt|;
name|Parser
name|parser
init|=
operator|new
name|AutoDetectParser
argument_list|()
decl_stmt|;
name|Metadata
name|m
init|=
operator|new
name|Metadata
argument_list|()
decl_stmt|;
name|PasswordProvider
name|passwordProvider
init|=
operator|new
name|PasswordProvider
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|getPassword
parameter_list|(
name|Metadata
name|metadata
parameter_list|)
block|{
return|return
literal|"tika"
return|;
block|}
block|}
decl_stmt|;
name|OfficeParserConfig
name|opc
init|=
operator|new
name|OfficeParserConfig
argument_list|()
decl_stmt|;
name|opc
operator|.
name|setUseSAXDocxExtractor
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|ParseContext
name|passwordContext
init|=
operator|new
name|ParseContext
argument_list|()
decl_stmt|;
name|passwordContext
operator|.
name|set
argument_list|(
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|PasswordProvider
operator|.
name|class
argument_list|,
name|passwordProvider
argument_list|)
expr_stmt|;
name|passwordContext
operator|.
name|set
argument_list|(
name|OfficeParserConfig
operator|.
name|class
argument_list|,
name|opc
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|e
range|:
name|tests
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|assertContains
argument_list|(
name|e
operator|.
name|getValue
argument_list|()
argument_list|,
name|getXML
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|,
name|passwordContext
argument_list|)
operator|.
name|xml
argument_list|)
expr_stmt|;
block|}
comment|//now try with no password
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|e
range|:
name|tests
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|boolean
name|exc
init|=
literal|false
decl_stmt|;
try|try
block|{
name|getXML
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|,
name|parseContext
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|EncryptedDocumentException
name|ex
parameter_list|)
block|{
name|exc
operator|=
literal|true
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|exc
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDOCXParagraphNumbering
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|xml
init|=
name|getXML
argument_list|(
literal|"testWORD_numbered_list.docx"
argument_list|,
name|parseContext
argument_list|)
operator|.
name|xml
decl_stmt|;
comment|//SAX parser is getting this.  DOM parser is not!
name|assertContains
argument_list|(
literal|"add a list here"
argument_list|,
name|xml
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"1) This"
argument_list|,
name|xml
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"a) Is"
argument_list|,
name|xml
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"i) A multi"
argument_list|,
name|xml
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"ii) Level"
argument_list|,
name|xml
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"1. Within cell 1"
argument_list|,
name|xml
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"b. Cell b"
argument_list|,
name|xml
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"iii) List"
argument_list|,
name|xml
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"2) foo"
argument_list|,
name|xml
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"ii) baz"
argument_list|,
name|xml
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"ii) foo"
argument_list|,
name|xml
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"II. bar"
argument_list|,
name|xml
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"6. six"
argument_list|,
name|xml
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"7. seven"
argument_list|,
name|xml
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"a. seven a"
argument_list|,
name|xml
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"e. seven e"
argument_list|,
name|xml
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"2. A ii 2"
argument_list|,
name|xml
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"3. page break list 3"
argument_list|,
name|xml
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"Some-1-CrazyFormat Greek numbering with crazy format - alpha"
argument_list|,
name|xml
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"1.1.1. 1.1.1"
argument_list|,
name|xml
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"1.1. 1.2-&gt;1.1  //set the value"
argument_list|,
name|xml
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDOCXOverrideParagraphNumbering
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|xml
init|=
name|getXML
argument_list|(
literal|"testWORD_override_list_numbering.docx"
argument_list|)
operator|.
name|xml
decl_stmt|;
comment|//Test 1
name|assertContains
argument_list|(
literal|"<p>1.1.1.1...1 1.1.1.1...1</p>"
argument_list|,
name|xml
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"1st.2.3someText 1st.2.3someText"
argument_list|,
name|xml
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"1st.2.2someOtherText.1 1st.2.2someOtherText.1"
argument_list|,
name|xml
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"5th 5th"
argument_list|,
name|xml
argument_list|)
expr_stmt|;
comment|//Test 2
name|assertContains
argument_list|(
literal|"1.a.I 1.a.I"
argument_list|,
name|xml
argument_list|)
expr_stmt|;
comment|//test no reset because level 2 is not sufficient to reset
name|assertContains
argument_list|(
literal|"<p>1.b.III 1.b.III</p>"
argument_list|,
name|xml
argument_list|)
expr_stmt|;
comment|//test restarted because of level 0's increment to 2
name|assertContains
argument_list|(
literal|"2.a.I 2.a.I"
argument_list|,
name|xml
argument_list|)
expr_stmt|;
comment|//test handling of skipped level
name|assertContains
argument_list|(
literal|"<p>2.b 2.b</p>"
argument_list|,
name|xml
argument_list|)
expr_stmt|;
comment|//Test 3
name|assertContains
argument_list|(
literal|"(1)) (1))"
argument_list|,
name|xml
argument_list|)
expr_stmt|;
comment|//tests start level 1 at 17 and
name|assertContains
argument_list|(
literal|"2.17 2.17"
argument_list|,
name|xml
argument_list|)
expr_stmt|;
comment|//tests that isLegal turns everything into decimal
name|assertContains
argument_list|(
literal|"2.18.2.1 2.18.2.1"
argument_list|,
name|xml
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"<p>2 2</p>"
argument_list|,
name|xml
argument_list|)
expr_stmt|;
comment|//Test4
name|assertContains
argument_list|(
literal|"<p>1 1</p>"
argument_list|,
name|xml
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"<p>A A</p>"
argument_list|,
name|xml
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"<p>B B</p>"
argument_list|,
name|xml
argument_list|)
expr_stmt|;
comment|//this tests overrides
name|assertContains
argument_list|(
literal|"<p>C C</p>"
argument_list|,
name|xml
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"<p>4 4</p>"
argument_list|,
name|xml
argument_list|)
expr_stmt|;
comment|//Test5
name|assertContains
argument_list|(
literal|">00 00"
argument_list|,
name|xml
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|">01 01"
argument_list|,
name|xml
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|">01. 01."
argument_list|,
name|xml
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|">01..1 01..1"
argument_list|,
name|xml
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|">02 02"
argument_list|,
name|xml
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMultiAuthorsManagers
parameter_list|()
throws|throws
name|Exception
block|{
name|XMLResult
name|r
init|=
name|getXML
argument_list|(
literal|"testWORD_multi_authors.docx"
argument_list|,
name|parseContext
argument_list|)
decl_stmt|;
name|String
index|[]
name|authors
init|=
name|r
operator|.
name|metadata
operator|.
name|getValues
argument_list|(
name|TikaCoreProperties
operator|.
name|CREATOR
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|authors
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"author2"
argument_list|,
name|authors
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|String
index|[]
name|managers
init|=
name|r
operator|.
name|metadata
operator|.
name|getValues
argument_list|(
name|OfficeOpenXMLExtended
operator|.
name|MANAGER
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|managers
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"manager1"
argument_list|,
name|managers
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"manager2"
argument_list|,
name|managers
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testOrigSourcePath
parameter_list|()
throws|throws
name|Exception
block|{
name|Metadata
name|embed1_zip_metadata
init|=
name|getRecursiveMetadata
argument_list|(
literal|"test_recursive_embedded.docx"
argument_list|,
name|parseContext
argument_list|)
operator|.
name|get
argument_list|(
literal|11
argument_list|)
decl_stmt|;
name|assertContains
argument_list|(
literal|"C:\\Users\\tallison\\AppData\\Local\\Temp\\embed1.zip"
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|embed1_zip_metadata
operator|.
name|getValues
argument_list|(
name|TikaCoreProperties
operator|.
name|ORIGINAL_RESOURCE_NAME
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"C:\\Users\\tallison\\Desktop\\tmp\\New folder (2)\\embed1.zip"
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|embed1_zip_metadata
operator|.
name|getValues
argument_list|(
name|TikaCoreProperties
operator|.
name|ORIGINAL_RESOURCE_NAME
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBoldHyperlink
parameter_list|()
throws|throws
name|Exception
block|{
comment|//TIKA-1255
name|String
name|xml
init|=
name|getXML
argument_list|(
literal|"testWORD_boldHyperlink.docx"
argument_list|,
name|parseContext
argument_list|)
operator|.
name|xml
decl_stmt|;
name|xml
operator|=
name|xml
operator|.
name|replaceAll
argument_list|(
literal|"\\s+"
argument_list|,
literal|" "
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"<a href=\"http://tika.apache.org/\">hyper<b>link</b></a>"
argument_list|,
name|xml
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"<a href=\"http://tika.apache.org/\"><b>hyper</b> link</a>; bold"
argument_list|,
name|xml
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLongForIntExceptionInSummaryDetails
parameter_list|()
throws|throws
name|Exception
block|{
comment|//TIKA-2055
name|assertContains
argument_list|(
literal|"bold"
argument_list|,
name|getXML
argument_list|(
literal|"testWORD_totalTimeOutOfRange.docx"
argument_list|,
name|parseContext
argument_list|)
operator|.
name|xml
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMacrosInDocm
parameter_list|()
throws|throws
name|Exception
block|{
name|Metadata
name|parsedBy
init|=
operator|new
name|Metadata
argument_list|()
decl_stmt|;
name|parsedBy
operator|.
name|add
argument_list|(
literal|"X-Parsed-By"
argument_list|,
literal|"org.apache.tika.parser.microsoft.ooxml.xwpf.XWPFEventBasedWordExtractor"
argument_list|)
expr_stmt|;
comment|//test default is "don't extract macros"
name|List
argument_list|<
name|Metadata
argument_list|>
name|metadataList
init|=
name|getRecursiveMetadata
argument_list|(
literal|"testWORD_macros.docm"
argument_list|,
name|parseContext
argument_list|)
decl_stmt|;
for|for
control|(
name|Metadata
name|metadata
range|:
name|metadataList
control|)
block|{
if|if
condition|(
name|metadata
operator|.
name|get
argument_list|(
name|Metadata
operator|.
name|CONTENT_TYPE
argument_list|)
operator|.
name|equals
argument_list|(
literal|"text/x-vbasic"
argument_list|)
condition|)
block|{
name|fail
argument_list|(
literal|"Shouldn't have extracted macros as default"
argument_list|)
expr_stmt|;
block|}
block|}
name|assertContainsAtLeast
argument_list|(
name|parsedBy
argument_list|,
name|metadataList
argument_list|)
expr_stmt|;
comment|//now test that they were extracted
name|ParseContext
name|context
init|=
operator|new
name|ParseContext
argument_list|()
decl_stmt|;
name|OfficeParserConfig
name|officeParserConfig
init|=
operator|new
name|OfficeParserConfig
argument_list|()
decl_stmt|;
name|officeParserConfig
operator|.
name|setExtractMacros
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|officeParserConfig
operator|.
name|setUseSAXDocxExtractor
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|context
operator|.
name|set
argument_list|(
name|OfficeParserConfig
operator|.
name|class
argument_list|,
name|officeParserConfig
argument_list|)
expr_stmt|;
name|metadataList
operator|=
name|getRecursiveMetadata
argument_list|(
literal|"testWORD_macros.docm"
argument_list|,
name|context
argument_list|)
expr_stmt|;
comment|//check that content came out of the .docm file
name|assertContains
argument_list|(
literal|"quick"
argument_list|,
name|metadataList
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|get
argument_list|(
name|RecursiveParserWrapper
operator|.
name|TIKA_CONTENT
argument_list|)
argument_list|)
expr_stmt|;
name|assertContainsAtLeast
argument_list|(
name|parsedBy
argument_list|,
name|metadataList
argument_list|)
expr_stmt|;
name|Metadata
name|minExpected
init|=
operator|new
name|Metadata
argument_list|()
decl_stmt|;
name|minExpected
operator|.
name|add
argument_list|(
name|RecursiveParserWrapper
operator|.
name|TIKA_CONTENT
operator|.
name|getName
argument_list|()
argument_list|,
literal|"Sub Embolden()"
argument_list|)
expr_stmt|;
name|minExpected
operator|.
name|add
argument_list|(
name|RecursiveParserWrapper
operator|.
name|TIKA_CONTENT
operator|.
name|getName
argument_list|()
argument_list|,
literal|"Sub Italicize()"
argument_list|)
expr_stmt|;
name|minExpected
operator|.
name|add
argument_list|(
name|Metadata
operator|.
name|CONTENT_TYPE
argument_list|,
literal|"text/x-vbasic"
argument_list|)
expr_stmt|;
name|minExpected
operator|.
name|add
argument_list|(
name|TikaCoreProperties
operator|.
name|EMBEDDED_RESOURCE_TYPE
argument_list|,
name|TikaCoreProperties
operator|.
name|EmbeddedResourceType
operator|.
name|MACRO
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertContainsAtLeast
argument_list|(
name|minExpected
argument_list|,
name|metadataList
argument_list|)
expr_stmt|;
name|assertContainsAtLeast
argument_list|(
name|parsedBy
argument_list|,
name|metadataList
argument_list|)
expr_stmt|;
comment|//test configuring via config file
name|TikaConfig
name|tikaConfig
init|=
operator|new
name|TikaConfig
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getResourceAsStream
argument_list|(
literal|"tika-config-sax-macros.xml"
argument_list|)
argument_list|)
decl_stmt|;
name|AutoDetectParser
name|parser
init|=
operator|new
name|AutoDetectParser
argument_list|(
name|tikaConfig
argument_list|)
decl_stmt|;
name|metadataList
operator|=
name|getRecursiveMetadata
argument_list|(
literal|"testWORD_macros.docm"
argument_list|,
name|parser
argument_list|)
expr_stmt|;
name|assertContainsAtLeast
argument_list|(
name|minExpected
argument_list|,
name|metadataList
argument_list|)
expr_stmt|;
name|assertContainsAtLeast
argument_list|(
name|parsedBy
argument_list|,
name|metadataList
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEmbedded
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|Metadata
argument_list|>
name|metadataList
init|=
name|getRecursiveMetadata
argument_list|(
literal|"testWORD_embeded.docx"
argument_list|,
name|parseContext
argument_list|)
decl_stmt|;
name|Metadata
name|main
init|=
name|metadataList
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|String
name|content
init|=
name|main
operator|.
name|get
argument_list|(
name|RecursiveParserWrapper
operator|.
name|TIKA_CONTENT
argument_list|)
decl_stmt|;
comment|//make sure mark up is there
name|assertContains
argument_list|(
literal|"<img src=\"embedded:image2.jpeg\" alt=\"A description...\" />"
argument_list|,
name|content
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"<div class=\"embedded\" id=\"rId8\" />"
argument_list|,
name|content
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|16
argument_list|,
name|metadataList
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDotx
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|Metadata
argument_list|>
name|metadataList
init|=
name|getRecursiveMetadata
argument_list|(
literal|"testWORD_template.docx"
argument_list|,
name|parseContext
argument_list|)
decl_stmt|;
name|String
name|content
init|=
name|metadataList
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|get
argument_list|(
name|RecursiveParserWrapper
operator|.
name|TIKA_CONTENT
argument_list|)
decl_stmt|;
name|assertContains
argument_list|(
literal|"Metallica"
argument_list|,
name|content
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"Hetfield"
argument_list|,
name|content
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"one eye open"
argument_list|,
name|content
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"Getting the perfect"
argument_list|,
name|content
argument_list|)
expr_stmt|;
comment|//from glossary document
name|assertContains
argument_list|(
literal|"table rows"
argument_list|,
name|content
argument_list|)
expr_stmt|;
name|metadataList
operator|=
name|getRecursiveMetadata
argument_list|(
literal|"testWORD_template.dotx"
argument_list|,
name|parseContext
argument_list|)
expr_stmt|;
name|content
operator|=
name|metadataList
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|get
argument_list|(
name|RecursiveParserWrapper
operator|.
name|TIKA_CONTENT
argument_list|)
expr_stmt|;
comment|//from glossary document
name|assertContainsCount
argument_list|(
literal|"ready to write"
argument_list|,
name|content
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDiagramData
parameter_list|()
throws|throws
name|Exception
block|{
name|assertContains
argument_list|(
literal|"From here"
argument_list|,
name|getXML
argument_list|(
literal|"testWORD_diagramData.docx"
argument_list|,
name|parseContext
argument_list|)
operator|.
name|xml
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

