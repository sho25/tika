begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|gdal
package|;
end_package

begin_comment
comment|//JDK imports
end_comment

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_comment
comment|//Tika imports
end_comment

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|TikaTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|metadata
operator|.
name|Metadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|ParseContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|external
operator|.
name|ExternalParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|sax
operator|.
name|BodyContentHandler
import|;
end_import

begin_comment
comment|//Junit imports
end_comment

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assume
operator|.
name|assumeTrue
import|;
end_import

begin_comment
comment|/**  *   * Test harness for the GDAL parser.  *   */
end_comment

begin_class
specifier|public
class|class
name|TestGDALParser
extends|extends
name|TikaTest
block|{
specifier|private
name|boolean
name|canRun
parameter_list|()
block|{
name|String
index|[]
name|checkCmd
init|=
block|{
literal|"gdalinfo"
block|}
decl_stmt|;
comment|// If GDAL is not on the path, do not run the test.
return|return
name|ExternalParser
operator|.
name|check
argument_list|(
name|checkCmd
argument_list|)
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testParseBasicInfo
parameter_list|()
block|{
name|assumeTrue
argument_list|(
name|canRun
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|String
name|expectedDriver
init|=
literal|"netCDF/Network Common Data Format"
decl_stmt|;
specifier|final
name|String
name|expectedUpperRight
init|=
literal|"512.0,    0.0"
decl_stmt|;
specifier|final
name|String
name|expectedUpperLeft
init|=
literal|"0.0,    0.0"
decl_stmt|;
specifier|final
name|String
name|expectedLowerLeft
init|=
literal|"0.0,  512.0"
decl_stmt|;
specifier|final
name|String
name|expectedLowerRight
init|=
literal|"512.0,  512.0"
decl_stmt|;
specifier|final
name|String
name|expectedCoordinateSystem
init|=
literal|"`'"
decl_stmt|;
specifier|final
name|String
name|expectedSize
init|=
literal|"512, 512"
decl_stmt|;
name|GDALParser
name|parser
init|=
operator|new
name|GDALParser
argument_list|()
decl_stmt|;
name|InputStream
name|stream
init|=
name|TestGDALParser
operator|.
name|class
operator|.
name|getResourceAsStream
argument_list|(
literal|"/test-documents/sresa1b_ncar_ccsm3_0_run1_200001.nc"
argument_list|)
decl_stmt|;
name|Metadata
name|met
init|=
operator|new
name|Metadata
argument_list|()
decl_stmt|;
name|BodyContentHandler
name|handler
init|=
operator|new
name|BodyContentHandler
argument_list|()
decl_stmt|;
try|try
block|{
name|parser
operator|.
name|parse
argument_list|(
name|stream
argument_list|,
name|handler
argument_list|,
name|met
argument_list|,
operator|new
name|ParseContext
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|met
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|met
operator|.
name|get
argument_list|(
literal|"Driver"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedDriver
argument_list|,
name|met
operator|.
name|get
argument_list|(
literal|"Driver"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|met
operator|.
name|get
argument_list|(
literal|"Files"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|met
operator|.
name|get
argument_list|(
literal|"Coordinate System"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedCoordinateSystem
argument_list|,
name|met
operator|.
name|get
argument_list|(
literal|"Coordinate System"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|met
operator|.
name|get
argument_list|(
literal|"Size"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedSize
argument_list|,
name|met
operator|.
name|get
argument_list|(
literal|"Size"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|met
operator|.
name|get
argument_list|(
literal|"Upper Right"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedUpperRight
argument_list|,
name|met
operator|.
name|get
argument_list|(
literal|"Upper Right"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|met
operator|.
name|get
argument_list|(
literal|"Upper Left"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedUpperLeft
argument_list|,
name|met
operator|.
name|get
argument_list|(
literal|"Upper Left"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|met
operator|.
name|get
argument_list|(
literal|"Upper Right"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedLowerRight
argument_list|,
name|met
operator|.
name|get
argument_list|(
literal|"Lower Right"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|met
operator|.
name|get
argument_list|(
literal|"Upper Right"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedLowerLeft
argument_list|,
name|met
operator|.
name|get
argument_list|(
literal|"Lower Left"
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|fail
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testParseMetadata
parameter_list|()
block|{
name|assumeTrue
argument_list|(
name|canRun
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|expectedNcInst
init|=
literal|"NCAR (National Center for Atmospheric Research, Boulder, CO, USA)"
decl_stmt|;
name|String
name|expectedModelNameEnglish
init|=
literal|"NCAR CCSM"
decl_stmt|;
name|String
name|expectedProgramId
init|=
literal|"Source file unknown Version unknown Date unknown"
decl_stmt|;
name|String
name|expectedProjectId
init|=
literal|"IPCC Fourth Assessment"
decl_stmt|;
name|String
name|expectedRealization
init|=
literal|"1"
decl_stmt|;
name|GDALParser
name|parser
init|=
operator|new
name|GDALParser
argument_list|()
decl_stmt|;
name|InputStream
name|stream
init|=
name|TestGDALParser
operator|.
name|class
operator|.
name|getResourceAsStream
argument_list|(
literal|"/test-documents/sresa1b_ncar_ccsm3_0_run1_200001.nc"
argument_list|)
decl_stmt|;
name|Metadata
name|met
init|=
operator|new
name|Metadata
argument_list|()
decl_stmt|;
name|BodyContentHandler
name|handler
init|=
operator|new
name|BodyContentHandler
argument_list|()
decl_stmt|;
try|try
block|{
name|parser
operator|.
name|parse
argument_list|(
name|stream
argument_list|,
name|handler
argument_list|,
name|met
argument_list|,
operator|new
name|ParseContext
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|met
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|met
operator|.
name|get
argument_list|(
literal|"NC_GLOBAL#institution"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedNcInst
argument_list|,
name|met
operator|.
name|get
argument_list|(
literal|"NC_GLOBAL#institution"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|met
operator|.
name|get
argument_list|(
literal|"NC_GLOBAL#model_name_english"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedModelNameEnglish
argument_list|,
name|met
operator|.
name|get
argument_list|(
literal|"NC_GLOBAL#model_name_english"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|met
operator|.
name|get
argument_list|(
literal|"NC_GLOBAL#prg_ID"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedProgramId
argument_list|,
name|met
operator|.
name|get
argument_list|(
literal|"NC_GLOBAL#prg_ID"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|met
operator|.
name|get
argument_list|(
literal|"NC_GLOBAL#prg_ID"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedProgramId
argument_list|,
name|met
operator|.
name|get
argument_list|(
literal|"NC_GLOBAL#prg_ID"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|met
operator|.
name|get
argument_list|(
literal|"NC_GLOBAL#project_id"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedProjectId
argument_list|,
name|met
operator|.
name|get
argument_list|(
literal|"NC_GLOBAL#project_id"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|met
operator|.
name|get
argument_list|(
literal|"NC_GLOBAL#realization"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedRealization
argument_list|,
name|met
operator|.
name|get
argument_list|(
literal|"NC_GLOBAL#realization"
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|fail
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testParseFITS
parameter_list|()
block|{
name|assumeTrue
argument_list|(
name|canRun
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|expectedAllgMin
init|=
literal|"-7.319537E1"
decl_stmt|;
name|String
name|expectedAtodcorr
init|=
literal|"COMPLETE"
decl_stmt|;
name|String
name|expectedAtodfile
init|=
literal|"uref$dbu1405iu.r1h"
decl_stmt|;
name|String
name|expectedCalVersion
init|=
literal|"                        "
decl_stmt|;
name|String
name|expectedCalibDef
init|=
literal|"1466"
decl_stmt|;
name|GDALParser
name|parser
init|=
operator|new
name|GDALParser
argument_list|()
decl_stmt|;
name|InputStream
name|stream
init|=
name|TestGDALParser
operator|.
name|class
operator|.
name|getResourceAsStream
argument_list|(
literal|"/test-documents/WFPC2u5780205r_c0fx.fits"
argument_list|)
decl_stmt|;
name|Metadata
name|met
init|=
operator|new
name|Metadata
argument_list|()
decl_stmt|;
name|BodyContentHandler
name|handler
init|=
operator|new
name|BodyContentHandler
argument_list|()
decl_stmt|;
try|try
block|{
name|parser
operator|.
name|parse
argument_list|(
name|stream
argument_list|,
name|handler
argument_list|,
name|met
argument_list|,
operator|new
name|ParseContext
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|met
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|met
operator|.
name|get
argument_list|(
literal|"ALLG-MIN"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedAllgMin
argument_list|,
name|met
operator|.
name|get
argument_list|(
literal|"ALLG-MIN"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|met
operator|.
name|get
argument_list|(
literal|"ATODCORR"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedAtodcorr
argument_list|,
name|met
operator|.
name|get
argument_list|(
literal|"ATODCORR"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|met
operator|.
name|get
argument_list|(
literal|"ATODFILE"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedAtodfile
argument_list|,
name|met
operator|.
name|get
argument_list|(
literal|"ATODFILE"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|met
operator|.
name|get
argument_list|(
literal|"CAL_VER"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedCalVersion
argument_list|,
name|met
operator|.
name|get
argument_list|(
literal|"CAL_VER"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|met
operator|.
name|get
argument_list|(
literal|"CALIBDEF"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedCalibDef
argument_list|,
name|met
operator|.
name|get
argument_list|(
literal|"CALIBDEF"
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|fail
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

