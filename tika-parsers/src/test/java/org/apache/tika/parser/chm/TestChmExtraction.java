begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|chm
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|exception
operator|.
name|TikaException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|metadata
operator|.
name|Metadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|ParseContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|Parser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|chm
operator|.
name|accessor
operator|.
name|ChmDirectoryListingSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|chm
operator|.
name|accessor
operator|.
name|DirectoryListingEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|chm
operator|.
name|core
operator|.
name|ChmExtractor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|sax
operator|.
name|BodyContentHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_class
specifier|public
class|class
name|TestChmExtraction
block|{
specifier|private
specifier|final
name|Parser
name|parser
init|=
operator|new
name|ChmParser
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|files
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|"/test-documents/testChm.chm"
argument_list|,
literal|"/test-documents/testChm2.chm"
argument_list|,
literal|"/test-documents/testChm3.chm"
argument_list|)
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|testGetText
parameter_list|()
throws|throws
name|Exception
block|{
name|BodyContentHandler
name|handler
init|=
operator|new
name|BodyContentHandler
argument_list|()
decl_stmt|;
operator|new
name|ChmParser
argument_list|()
operator|.
name|parse
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|TestParameters
operator|.
name|chmData
argument_list|)
argument_list|,
name|handler
argument_list|,
operator|new
name|Metadata
argument_list|()
argument_list|,
operator|new
name|ParseContext
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|handler
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"The TCard method accepts only numeric arguments"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testChmParser
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|String
name|fileName
range|:
name|files
control|)
block|{
name|InputStream
name|stream
init|=
name|TestChmExtraction
operator|.
name|class
operator|.
name|getResourceAsStream
argument_list|(
name|fileName
argument_list|)
decl_stmt|;
name|testingChm
argument_list|(
name|stream
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|testingChm
parameter_list|(
name|InputStream
name|stream
parameter_list|)
throws|throws
name|IOException
throws|,
name|SAXException
throws|,
name|TikaException
block|{
try|try
block|{
name|BodyContentHandler
name|handler
init|=
operator|new
name|BodyContentHandler
argument_list|(
operator|-
literal|1
argument_list|)
decl_stmt|;
name|parser
operator|.
name|parse
argument_list|(
name|stream
argument_list|,
name|handler
argument_list|,
operator|new
name|Metadata
argument_list|()
argument_list|,
operator|new
name|ParseContext
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|!
name|handler
operator|.
name|toString
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|stream
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testExtractChmEntries
parameter_list|()
throws|throws
name|TikaException
throws|,
name|IOException
block|{
for|for
control|(
name|String
name|fileName
range|:
name|files
control|)
block|{
name|InputStream
name|stream
init|=
name|TestChmExtraction
operator|.
name|class
operator|.
name|getResourceAsStream
argument_list|(
name|fileName
argument_list|)
decl_stmt|;
try|try
block|{
name|testExtractChmEntry
argument_list|(
name|stream
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|stream
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|protected
name|boolean
name|findZero
parameter_list|(
name|byte
index|[]
name|textData
parameter_list|)
block|{
for|for
control|(
name|byte
name|b
range|:
name|textData
control|)
block|{
if|if
condition|(
name|b
operator|==
literal|0
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
specifier|protected
name|boolean
name|niceAscFileName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
for|for
control|(
name|char
name|c
range|:
name|name
operator|.
name|toCharArray
argument_list|()
control|)
block|{
if|if
condition|(
name|c
operator|>=
literal|127
operator|||
name|c
operator|<
literal|32
condition|)
block|{
comment|//non-ascii char or control char
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
specifier|protected
name|void
name|testExtractChmEntry
parameter_list|(
name|InputStream
name|stream
parameter_list|)
throws|throws
name|TikaException
throws|,
name|IOException
block|{
name|ChmExtractor
name|chmExtractor
init|=
operator|new
name|ChmExtractor
argument_list|(
name|stream
argument_list|)
decl_stmt|;
name|ChmDirectoryListingSet
name|entries
init|=
name|chmExtractor
operator|.
name|getChmDirList
argument_list|()
decl_stmt|;
specifier|final
name|Pattern
name|htmlPairP
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"\\Q<html\\E.+\\Q</html>\\E"
argument_list|,
name|Pattern
operator|.
name|CASE_INSENSITIVE
operator||
name|Pattern
operator|.
name|MULTILINE
operator||
name|Pattern
operator|.
name|DOTALL
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|names
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|DirectoryListingEntry
name|directoryListingEntry
range|:
name|entries
operator|.
name|getDirectoryListingEntryList
argument_list|()
control|)
block|{
name|byte
index|[]
name|data
init|=
name|chmExtractor
operator|.
name|extractChmEntry
argument_list|(
name|directoryListingEntry
argument_list|)
decl_stmt|;
comment|//Entry names should be nice. Disable this if the test chm do have bad looking but valid entry names.
if|if
condition|(
operator|!
name|niceAscFileName
argument_list|(
name|directoryListingEntry
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|TikaException
argument_list|(
literal|"Warning: File name contains a non ascii char : "
operator|+
name|directoryListingEntry
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
specifier|final
name|String
name|lowName
init|=
name|directoryListingEntry
operator|.
name|getName
argument_list|()
operator|.
name|toLowerCase
argument_list|()
decl_stmt|;
comment|//check duplicate entry name which is seen before.
if|if
condition|(
name|names
operator|.
name|contains
argument_list|(
name|lowName
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|TikaException
argument_list|(
literal|"Duplicate File name detected : "
operator|+
name|directoryListingEntry
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
name|names
operator|.
name|add
argument_list|(
name|lowName
argument_list|)
expr_stmt|;
if|if
condition|(
name|lowName
operator|.
name|endsWith
argument_list|(
literal|".html"
argument_list|)
operator|||
name|lowName
operator|.
name|endsWith
argument_list|(
literal|".htm"
argument_list|)
operator|||
name|lowName
operator|.
name|endsWith
argument_list|(
literal|".hhk"
argument_list|)
operator|||
name|lowName
operator|.
name|endsWith
argument_list|(
literal|".hhc"
argument_list|)
comment|//|| name.endsWith(".bmp")
condition|)
block|{
if|if
condition|(
name|findZero
argument_list|(
name|data
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|TikaException
argument_list|(
literal|"Xhtml/text file contains '\\0' : "
operator|+
name|directoryListingEntry
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
comment|//validate html
name|String
name|html
init|=
operator|new
name|String
argument_list|(
name|data
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|htmlPairP
operator|.
name|matcher
argument_list|(
name|html
argument_list|)
operator|.
name|find
argument_list|()
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|lowName
operator|+
literal|" is invalid."
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|html
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|TikaException
argument_list|(
literal|"Invalid xhtml file : "
operator|+
name|directoryListingEntry
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
comment|//                else {
comment|//                    System.err.println(directoryListingEntry.getName() + " is valid.");
comment|//                }
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMultiThreadedChmExtraction
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|ExecutorService
name|executor
init|=
name|Executors
operator|.
name|newFixedThreadPool
argument_list|(
name|TestParameters
operator|.
name|NTHREADS
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|TestParameters
operator|.
name|NTHREADS
condition|;
name|i
operator|++
control|)
block|{
name|executor
operator|.
name|execute
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
for|for
control|(
name|String
name|fileName
range|:
name|files
control|)
block|{
name|InputStream
name|stream
init|=
literal|null
decl_stmt|;
try|try
block|{
name|stream
operator|=
name|TestChmExtraction
operator|.
name|class
operator|.
name|getResourceAsStream
argument_list|(
name|fileName
argument_list|)
expr_stmt|;
name|BodyContentHandler
name|handler
init|=
operator|new
name|BodyContentHandler
argument_list|(
operator|-
literal|1
argument_list|)
decl_stmt|;
name|parser
operator|.
name|parse
argument_list|(
name|stream
argument_list|,
name|handler
argument_list|,
operator|new
name|Metadata
argument_list|()
argument_list|,
operator|new
name|ParseContext
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|!
name|handler
operator|.
name|toString
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
try|try
block|{
name|stream
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
name|executor
operator|.
name|shutdown
argument_list|()
expr_stmt|;
comment|// Waits until all threads will have finished
while|while
condition|(
operator|!
name|executor
operator|.
name|isTerminated
argument_list|()
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|500
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|test_TIKA_1446
parameter_list|()
throws|throws
name|Exception
block|{
name|URL
name|chmDir
init|=
name|TestChmExtraction
operator|.
name|class
operator|.
name|getResource
argument_list|(
literal|"/test-documents/chm/"
argument_list|)
decl_stmt|;
name|File
name|chmFolder
init|=
operator|new
name|File
argument_list|(
name|chmDir
operator|.
name|toURI
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|fileName
range|:
name|chmFolder
operator|.
name|list
argument_list|()
control|)
block|{
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|chmFolder
argument_list|,
name|fileName
argument_list|)
decl_stmt|;
name|InputStream
name|stream
init|=
operator|new
name|FileInputStream
argument_list|(
name|file
argument_list|)
decl_stmt|;
name|testingChm
argument_list|(
name|stream
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

