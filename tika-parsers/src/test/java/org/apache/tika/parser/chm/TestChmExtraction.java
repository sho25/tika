begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|chm
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|Lock
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantLock
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|detect
operator|.
name|TestContainerAwareDetector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|exception
operator|.
name|TikaException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|io
operator|.
name|TikaInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|metadata
operator|.
name|Metadata
import|;
end_import

begin_class
specifier|public
class|class
name|TestChmExtraction
extends|extends
name|TestCase
block|{
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|files
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
specifier|public
name|void
name|setUp
parameter_list|()
block|{
name|files
operator|.
name|add
argument_list|(
literal|"/test-documents/testChm.chm"
argument_list|)
expr_stmt|;
name|files
operator|.
name|add
argument_list|(
literal|"/test-documents/testChm2.chm"
argument_list|)
expr_stmt|;
name|files
operator|.
name|add
argument_list|(
literal|"/test-documents/testChm3.chm"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testMultiThreadedChmExtraction
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|ExecutorService
name|executor
init|=
name|Executors
operator|.
name|newFixedThreadPool
argument_list|(
name|TestParameters
operator|.
name|NTHREADS
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|TestParameters
operator|.
name|NTHREADS
condition|;
name|i
operator|++
control|)
block|{
name|executor
operator|.
name|execute
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
name|Lock
name|mutex
init|=
operator|new
name|ReentrantLock
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|fileName
range|:
name|files
control|)
block|{
name|TikaInputStream
name|stream
decl_stmt|;
try|try
block|{
name|stream
operator|=
name|TikaInputStream
operator|.
name|get
argument_list|(
name|TestContainerAwareDetector
operator|.
name|class
operator|.
name|getResource
argument_list|(
name|fileName
argument_list|)
argument_list|)
expr_stmt|;
name|mutex
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|CHMDocumentInformation
name|chmDocInfo
init|=
name|CHMDocumentInformation
operator|.
name|load
argument_list|(
name|stream
argument_list|)
decl_stmt|;
name|Metadata
name|md
init|=
operator|new
name|Metadata
argument_list|()
decl_stmt|;
name|String
name|text
init|=
name|chmDocInfo
operator|.
name|getText
argument_list|()
decl_stmt|;
name|chmDocInfo
operator|.
name|getCHMDocInformation
argument_list|(
name|md
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|TestParameters
operator|.
name|VP_CHM_MIME_TYPE
argument_list|,
name|md
operator|.
name|toString
argument_list|()
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|text
operator|.
name|length
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TikaException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|mutex
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
name|executor
operator|.
name|shutdown
argument_list|()
expr_stmt|;
comment|// Waits until all threads will have finished
while|while
condition|(
operator|!
name|executor
operator|.
name|isTerminated
argument_list|()
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|500
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

