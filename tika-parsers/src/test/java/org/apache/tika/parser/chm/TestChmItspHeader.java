begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|chm
package|;
end_package

begin_import
import|import static
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
operator|.
name|UTF_8
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|chm
operator|.
name|accessor
operator|.
name|ChmItsfHeader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|chm
operator|.
name|accessor
operator|.
name|ChmItspHeader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|chm
operator|.
name|core
operator|.
name|ChmCommons
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|chm
operator|.
name|core
operator|.
name|ChmConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * Tests all public methods of the ChmItspHeader  *   */
end_comment

begin_class
specifier|public
class|class
name|TestChmItspHeader
block|{
specifier|private
name|ChmItspHeader
name|chmItspHeader
init|=
literal|null
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|byte
index|[]
name|data
init|=
name|TestParameters
operator|.
name|chmData
decl_stmt|;
name|ChmItsfHeader
name|chmItsfHeader
init|=
operator|new
name|ChmItsfHeader
argument_list|()
decl_stmt|;
comment|// chmItsfHeader.parse(Arrays.copyOfRange(data, 0,
comment|// ChmConstants.CHM_ITSF_V3_LEN - 1), chmItsfHeader);
name|chmItsfHeader
operator|.
name|parse
argument_list|(
name|ChmCommons
operator|.
name|copyOfRange
argument_list|(
name|data
argument_list|,
literal|0
argument_list|,
name|ChmConstants
operator|.
name|CHM_ITSF_V3_LEN
operator|-
literal|1
argument_list|)
argument_list|,
name|chmItsfHeader
argument_list|)
expr_stmt|;
name|chmItspHeader
operator|=
operator|new
name|ChmItspHeader
argument_list|()
expr_stmt|;
comment|// chmItspHeader.parse(Arrays.copyOfRange( data, (int)
comment|// chmItsfHeader.getDirOffset(),
comment|// (int) chmItsfHeader.getDirOffset()
comment|// + ChmConstants.CHM_ITSP_V1_LEN), chmItspHeader);
name|chmItspHeader
operator|.
name|parse
argument_list|(
name|ChmCommons
operator|.
name|copyOfRange
argument_list|(
name|data
argument_list|,
operator|(
name|int
operator|)
name|chmItsfHeader
operator|.
name|getDirOffset
argument_list|()
argument_list|,
operator|(
name|int
operator|)
name|chmItsfHeader
operator|.
name|getDirOffset
argument_list|()
operator|+
name|ChmConstants
operator|.
name|CHM_ITSP_V1_LEN
argument_list|)
argument_list|,
name|chmItspHeader
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetBlock_len
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|TestParameters
operator|.
name|VP_BLOCK_LENGTH
argument_list|,
name|chmItspHeader
operator|.
name|getBlock_len
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetBlockidx_intvl
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|TestParameters
operator|.
name|VP_BLOCK_INDEX_INTERVAL
argument_list|,
name|chmItspHeader
operator|.
name|getBlockidx_intvl
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetHeader_len
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|TestParameters
operator|.
name|VP_ITSP_HEADER_LENGTH
argument_list|,
name|chmItspHeader
operator|.
name|getHeader_len
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetIndex_depth
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|TestParameters
operator|.
name|VP_INDEX_DEPTH
argument_list|,
name|chmItspHeader
operator|.
name|getIndex_depth
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetIndex_head
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|TestParameters
operator|.
name|VP_INDEX_HEAD
argument_list|,
name|chmItspHeader
operator|.
name|getIndex_head
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetIndex_root
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|TestParameters
operator|.
name|VP_INDEX_ROOT
argument_list|,
name|chmItspHeader
operator|.
name|getIndex_root
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetLang_id
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|TestParameters
operator|.
name|VP_LANGUAGE_ID
argument_list|,
name|chmItspHeader
operator|.
name|getLang_id
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetNum_blocks
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|TestParameters
operator|.
name|VP_UNKNOWN_NUM_BLOCKS
argument_list|,
name|chmItspHeader
operator|.
name|getNum_blocks
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetUnknown_000c
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|TestParameters
operator|.
name|VP_ITSP_UNKNOWN_000C
argument_list|,
name|chmItspHeader
operator|.
name|getUnknown_000c
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetUnknown_0024
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|TestParameters
operator|.
name|VP_ITSP_UNKNOWN_0024
argument_list|,
name|chmItspHeader
operator|.
name|getUnknown_0024
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetUnknown_002
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|TestParameters
operator|.
name|VP_ITSP_UNKNOWN_002C
argument_list|,
name|chmItspHeader
operator|.
name|getUnknown_002c
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetUnknown_0044
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|TestParameters
operator|.
name|VP_ITSP_BYTEARR_LEN
argument_list|,
name|chmItspHeader
operator|.
name|getUnknown_0044
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetVersion
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|TestParameters
operator|.
name|VP_ITSP_VERSION
argument_list|,
name|chmItspHeader
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetSignature
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|TestParameters
operator|.
name|VP_ISTP_SIGNATURE
argument_list|,
operator|new
name|String
argument_list|(
name|chmItspHeader
operator|.
name|getSignature
argument_list|()
argument_list|,
name|UTF_8
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetSystem_uuid
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|TestParameters
operator|.
name|VP_ITSP_BYTEARR_LEN
argument_list|,
name|chmItspHeader
operator|.
name|getSystem_uuid
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testToString
parameter_list|()
block|{
name|assertTrue
argument_list|(
name|chmItspHeader
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
name|TestParameters
operator|.
name|VP_ISTP_SIGNATURE
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|chmItspHeader
operator|=
literal|null
expr_stmt|;
block|}
block|}
end_class

end_unit

