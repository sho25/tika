begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|mp3
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * Test class for {@code MpegStream}.  */
end_comment

begin_class
specifier|public
class|class
name|MpegStreamTest
block|{
comment|/** The stream to be tested. */
specifier|private
name|MpegStream
name|stream
decl_stmt|;
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|stream
operator|!=
literal|null
condition|)
block|{
name|stream
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * Tests whether the default test header can be found in a stream.      *       * @param bos the stream      * @throws IOException if an error occurs      */
specifier|private
name|void
name|checkDefaultHeader
parameter_list|(
name|ByteArrayOutputStream
name|bos
parameter_list|)
throws|throws
name|IOException
block|{
name|ByteArrayInputStream
name|in
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|bos
operator|.
name|toByteArray
argument_list|()
argument_list|)
decl_stmt|;
name|stream
operator|=
operator|new
name|MpegStream
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|AudioFrame
name|header
init|=
name|stream
operator|.
name|nextFrame
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"No header found"
argument_list|,
name|header
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Wrong MPEG version"
argument_list|,
name|AudioFrame
operator|.
name|MPEG_V2
argument_list|,
name|header
operator|.
name|getVersionCode
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Wrong layer"
argument_list|,
name|AudioFrame
operator|.
name|LAYER_3
argument_list|,
name|header
operator|.
name|getLayer
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Wrong bit rate"
argument_list|,
literal|80000
argument_list|,
name|header
operator|.
name|getBitRate
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Wrong sample rate"
argument_list|,
literal|24000
argument_list|,
name|header
operator|.
name|getSampleRate
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Writes the given byte the given number of times into an output stream.      *       * @param out the output stream      * @param value the value to write      * @param count the number of bytes to write      * @throws IOException if an error occurs      */
specifier|private
specifier|static
name|void
name|writeBytes
parameter_list|(
name|OutputStream
name|out
parameter_list|,
name|int
name|value
parameter_list|,
name|int
name|count
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
block|{
name|out
operator|.
name|write
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Writes a frame header in the given output stream.      *       * @param out the output stream      * @param b2 byte 2 of the header      * @param b3 byte 3 of the header      * @param b4 byte 4 of the header      * @throws IOException if an error occurs      */
specifier|private
specifier|static
name|void
name|writeFrame
parameter_list|(
name|OutputStream
name|out
parameter_list|,
name|int
name|b2
parameter_list|,
name|int
name|b3
parameter_list|,
name|int
name|b4
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|write
argument_list|(
literal|0xFF
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
name|b2
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
name|b3
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
name|b4
argument_list|)
expr_stmt|;
block|}
comment|/**      * Tests whether an audio frame header can be found somewhere in a stream.      */
annotation|@
name|Test
specifier|public
name|void
name|testSearchNextFrame
parameter_list|()
throws|throws
name|IOException
block|{
name|ByteArrayOutputStream
name|bos
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|writeBytes
argument_list|(
name|bos
argument_list|,
literal|0xFF
argument_list|,
literal|32
argument_list|)
expr_stmt|;
name|writeBytes
argument_list|(
name|bos
argument_list|,
literal|0
argument_list|,
literal|16
argument_list|)
expr_stmt|;
name|writeBytes
argument_list|(
name|bos
argument_list|,
literal|0xFF
argument_list|,
literal|8
argument_list|)
expr_stmt|;
name|bos
operator|.
name|write
argument_list|(
literal|0xF3
argument_list|)
expr_stmt|;
name|bos
operator|.
name|write
argument_list|(
literal|0x96
argument_list|)
expr_stmt|;
name|bos
operator|.
name|write
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|checkDefaultHeader
argument_list|(
name|bos
argument_list|)
expr_stmt|;
block|}
comment|/**      * Tests whether invalid frame headers are detected and skipped.      */
annotation|@
name|Test
specifier|public
name|void
name|testSearchNextFrameInvalid
parameter_list|()
throws|throws
name|IOException
block|{
name|ByteArrayOutputStream
name|bos
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|writeFrame
argument_list|(
name|bos
argument_list|,
literal|0xEB
argument_list|,
literal|0x96
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|writeFrame
argument_list|(
name|bos
argument_list|,
literal|0xF9
argument_list|,
literal|0x96
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|writeFrame
argument_list|(
name|bos
argument_list|,
literal|0xF3
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|writeFrame
argument_list|(
name|bos
argument_list|,
literal|0xF3
argument_list|,
literal|0xF0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|writeFrame
argument_list|(
name|bos
argument_list|,
literal|0xF3
argument_list|,
literal|0x7C
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|writeFrame
argument_list|(
name|bos
argument_list|,
literal|0xF3
argument_list|,
literal|0x96
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|checkDefaultHeader
argument_list|(
name|bos
argument_list|)
expr_stmt|;
block|}
comment|/**      * Tests a search for another frame which is interrupted because the stream      * ends.      */
annotation|@
name|Test
specifier|public
name|void
name|testSeachNextFrameEOS
parameter_list|()
throws|throws
name|IOException
block|{
name|ByteArrayOutputStream
name|bos
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|bos
operator|.
name|write
argument_list|(
literal|0xFF
argument_list|)
expr_stmt|;
name|bos
operator|.
name|write
argument_list|(
literal|0xFF
argument_list|)
expr_stmt|;
name|bos
operator|.
name|write
argument_list|(
literal|0xF3
argument_list|)
expr_stmt|;
name|bos
operator|.
name|write
argument_list|(
literal|0x96
argument_list|)
expr_stmt|;
name|ByteArrayInputStream
name|in
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|bos
operator|.
name|toByteArray
argument_list|()
argument_list|)
decl_stmt|;
name|stream
operator|=
operator|new
name|MpegStream
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"Got a frame"
argument_list|,
name|stream
operator|.
name|nextFrame
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Tries to skip a frame if no current header is available.      */
annotation|@
name|Test
specifier|public
name|void
name|testSkipNoCurrentHeader
parameter_list|()
throws|throws
name|IOException
block|{
name|ByteArrayOutputStream
name|bos
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|bos
operator|.
name|write
argument_list|(
literal|"This is a test"
operator|.
name|getBytes
argument_list|(
name|IOUtils
operator|.
name|UTF_8
argument_list|)
argument_list|)
expr_stmt|;
name|ByteArrayInputStream
name|in
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|bos
operator|.
name|toByteArray
argument_list|()
argument_list|)
decl_stmt|;
name|stream
operator|=
operator|new
name|MpegStream
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Wrong result"
argument_list|,
name|stream
operator|.
name|skipFrame
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

