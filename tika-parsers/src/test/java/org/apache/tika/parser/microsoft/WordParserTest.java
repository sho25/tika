begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *<p/>  * http://www.apache.org/licenses/LICENSE-2.0  *<p/>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|microsoft
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|TikaTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|metadata
operator|.
name|Metadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|metadata
operator|.
name|Office
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|metadata
operator|.
name|OfficeOpenXMLCore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|metadata
operator|.
name|OfficeOpenXMLExtended
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|metadata
operator|.
name|TikaCoreProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|ParseContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|sax
operator|.
name|BodyContentHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Ignore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|ContentHandler
import|;
end_import

begin_class
specifier|public
class|class
name|WordParserTest
extends|extends
name|TikaTest
block|{
annotation|@
name|Test
specifier|public
name|void
name|testWordParser
parameter_list|()
throws|throws
name|Exception
block|{
try|try
init|(
name|InputStream
name|input
init|=
name|WordParserTest
operator|.
name|class
operator|.
name|getResourceAsStream
argument_list|(
literal|"/test-documents/testWORD.doc"
argument_list|)
init|)
block|{
name|ContentHandler
name|handler
init|=
operator|new
name|BodyContentHandler
argument_list|()
decl_stmt|;
name|Metadata
name|metadata
init|=
operator|new
name|Metadata
argument_list|()
decl_stmt|;
operator|new
name|OfficeParser
argument_list|()
operator|.
name|parse
argument_list|(
name|input
argument_list|,
name|handler
argument_list|,
name|metadata
argument_list|,
operator|new
name|ParseContext
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"application/msword"
argument_list|,
name|metadata
operator|.
name|get
argument_list|(
name|Metadata
operator|.
name|CONTENT_TYPE
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Sample Word Document"
argument_list|,
name|metadata
operator|.
name|get
argument_list|(
name|TikaCoreProperties
operator|.
name|TITLE
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Keith Bennett"
argument_list|,
name|metadata
operator|.
name|get
argument_list|(
name|TikaCoreProperties
operator|.
name|CREATOR
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Keith Bennett"
argument_list|,
name|metadata
operator|.
name|get
argument_list|(
name|Metadata
operator|.
name|AUTHOR
argument_list|)
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"Sample Word Document"
argument_list|,
name|handler
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testWordWithWAV
parameter_list|()
throws|throws
name|Exception
block|{
try|try
init|(
name|InputStream
name|input
init|=
name|WordParserTest
operator|.
name|class
operator|.
name|getResourceAsStream
argument_list|(
literal|"/test-documents/Doc1_ole.doc"
argument_list|)
init|)
block|{
name|ContentHandler
name|handler
init|=
operator|new
name|BodyContentHandler
argument_list|()
decl_stmt|;
name|Metadata
name|metadata
init|=
operator|new
name|Metadata
argument_list|()
decl_stmt|;
operator|new
name|OfficeParser
argument_list|()
operator|.
name|parse
argument_list|(
name|input
argument_list|,
name|handler
argument_list|,
name|metadata
argument_list|,
operator|new
name|ParseContext
argument_list|()
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"MSj00974840000[1].wav"
argument_list|,
name|handler
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Test that the word converter is able to generate the      *  correct HTML for the document      */
annotation|@
name|Test
specifier|public
name|void
name|testWordHTML
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Try with a document containing various tables and
comment|// formattings
name|XMLResult
name|result
init|=
name|getXML
argument_list|(
literal|"testWORD.doc"
argument_list|)
decl_stmt|;
name|String
name|xml
init|=
name|result
operator|.
name|xml
decl_stmt|;
name|Metadata
name|metadata
init|=
name|result
operator|.
name|metadata
decl_stmt|;
name|assertEquals
argument_list|(
literal|"application/msword"
argument_list|,
name|metadata
operator|.
name|get
argument_list|(
name|Metadata
operator|.
name|CONTENT_TYPE
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Sample Word Document"
argument_list|,
name|metadata
operator|.
name|get
argument_list|(
name|TikaCoreProperties
operator|.
name|TITLE
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Keith Bennett"
argument_list|,
name|metadata
operator|.
name|get
argument_list|(
name|TikaCoreProperties
operator|.
name|CREATOR
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Keith Bennett"
argument_list|,
name|metadata
operator|.
name|get
argument_list|(
name|Metadata
operator|.
name|AUTHOR
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|xml
operator|.
name|contains
argument_list|(
literal|"Sample Word Document"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Check that custom headings came through
name|assertTrue
argument_list|(
name|xml
operator|.
name|contains
argument_list|(
literal|"<h1 class=\"title\">"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Regular headings
name|assertTrue
argument_list|(
name|xml
operator|.
name|contains
argument_list|(
literal|"<h1>Heading Level 1</h1>"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|xml
operator|.
name|contains
argument_list|(
literal|"<h3>Heading Level 3</h3>"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Bold and italic
name|assertTrue
argument_list|(
name|xml
operator|.
name|contains
argument_list|(
literal|"<b>BOLD</b>"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|xml
operator|.
name|contains
argument_list|(
literal|"<i>ITALIC</i>"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Table
name|assertTrue
argument_list|(
name|xml
operator|.
name|contains
argument_list|(
literal|"<table>"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|xml
operator|.
name|contains
argument_list|(
literal|"<td>"
argument_list|)
argument_list|)
expr_stmt|;
comment|// TODO - Check for the nested table
comment|// Links
name|assertTrue
argument_list|(
name|xml
operator|.
name|contains
argument_list|(
literal|"<a href=\"http://tika.apache.org/\">Tika</a>"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Paragraphs with other styles
name|assertTrue
argument_list|(
name|xml
operator|.
name|contains
argument_list|(
literal|"<p class=\"signature\">This one"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Try with a document that contains images
name|xml
operator|=
name|getXML
argument_list|(
literal|"testWORD_3imgs.doc"
argument_list|)
operator|.
name|xml
expr_stmt|;
comment|// Images 1-3
name|assertTrue
argument_list|(
literal|"Image not found in:\n"
operator|+
name|xml
argument_list|,
name|xml
operator|.
name|contains
argument_list|(
literal|"src=\"embedded:image1.png\""
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Image not found in:\n"
operator|+
name|xml
argument_list|,
name|xml
operator|.
name|contains
argument_list|(
literal|"src=\"embedded:image2.jpg\""
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Image not found in:\n"
operator|+
name|xml
argument_list|,
name|xml
operator|.
name|contains
argument_list|(
literal|"src=\"embedded:image3.png\""
argument_list|)
argument_list|)
expr_stmt|;
comment|// Text too
name|assertTrue
argument_list|(
name|xml
operator|.
name|contains
argument_list|(
literal|"<p>The end!"
argument_list|)
argument_list|)
expr_stmt|;
comment|// TIKA-692: test document containing multiple
comment|// character runs within a bold tag:
name|xml
operator|=
name|getXML
argument_list|(
literal|"testWORD_bold_character_runs.doc"
argument_list|)
operator|.
name|xml
expr_stmt|;
comment|// Make sure bold text arrived as single
comment|// contiguous string even though Word parser
comment|// handled this as 3 character runs
name|assertTrue
argument_list|(
literal|"Bold text wasn't contiguous: "
operator|+
name|xml
argument_list|,
name|xml
operator|.
name|contains
argument_list|(
literal|"F<b>oob</b>a<b>r</b>"
argument_list|)
argument_list|)
expr_stmt|;
comment|// TIKA-692: test document containing multiple
comment|// character runs within a bold tag:
name|xml
operator|=
name|getXML
argument_list|(
literal|"testWORD_bold_character_runs2.doc"
argument_list|)
operator|.
name|xml
expr_stmt|;
comment|// Make sure bold text arrived as single
comment|// contiguous string even though Word parser
comment|// handled this as 3 character runs
name|assertTrue
argument_list|(
literal|"Bold text wasn't contiguous: "
operator|+
name|xml
argument_list|,
name|xml
operator|.
name|contains
argument_list|(
literal|"F<b>oob</b>a<b>r</b>"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEmbeddedNames
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|result
init|=
name|getXML
argument_list|(
literal|"testWORD_embedded_pdf.doc"
argument_list|)
operator|.
name|xml
decl_stmt|;
comment|// Make sure the embedded div comes out after "Here
comment|// is the pdf file" and before "Bye Bye":
name|int
name|i
init|=
name|result
operator|.
name|indexOf
argument_list|(
literal|"Here is the pdf file:"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|i
operator|!=
operator|-
literal|1
argument_list|)
expr_stmt|;
name|int
name|j
init|=
name|result
operator|.
name|indexOf
argument_list|(
literal|"<div class=\"embedded\" id=\"_1402837031\" />"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|j
operator|!=
operator|-
literal|1
argument_list|)
expr_stmt|;
name|int
name|k
init|=
name|result
operator|.
name|indexOf
argument_list|(
literal|"Bye Bye"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|k
operator|!=
operator|-
literal|1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|i
operator|<
name|j
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|j
operator|<
name|k
argument_list|)
expr_stmt|;
block|}
comment|// TIKA-982
annotation|@
name|Test
specifier|public
name|void
name|testEmbeddedRTF
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|result
init|=
name|getXML
argument_list|(
literal|"testWORD_embedded_rtf.doc"
argument_list|)
operator|.
name|xml
decl_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|contains
argument_list|(
literal|"<div class=\"embedded\" id=\"_1404039792\" />"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|contains
argument_list|(
literal|"_1404039792.rtf"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// TIKA-1019
annotation|@
name|Test
specifier|public
name|void
name|testDocumentLink
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|result
init|=
name|getXML
argument_list|(
literal|"testDocumentLink.doc"
argument_list|)
operator|.
name|xml
decl_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|contains
argument_list|(
literal|"<div class=\"embedded\" id=\"_1327495610\" />"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|contains
argument_list|(
literal|"_1327495610.unknown"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testWord6Parser
parameter_list|()
throws|throws
name|Exception
block|{
try|try
init|(
name|InputStream
name|input
init|=
name|WordParserTest
operator|.
name|class
operator|.
name|getResourceAsStream
argument_list|(
literal|"/test-documents/testWORD6.doc"
argument_list|)
init|)
block|{
name|ContentHandler
name|handler
init|=
operator|new
name|BodyContentHandler
argument_list|()
decl_stmt|;
name|Metadata
name|metadata
init|=
operator|new
name|Metadata
argument_list|()
decl_stmt|;
operator|new
name|OfficeParser
argument_list|()
operator|.
name|parse
argument_list|(
name|input
argument_list|,
name|handler
argument_list|,
name|metadata
argument_list|,
operator|new
name|ParseContext
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"application/msword"
argument_list|,
name|metadata
operator|.
name|get
argument_list|(
name|Metadata
operator|.
name|CONTENT_TYPE
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"The quick brown fox jumps over the lazy dog"
argument_list|,
name|metadata
operator|.
name|get
argument_list|(
name|TikaCoreProperties
operator|.
name|TITLE
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Gym class featuring a brown fox and lazy dog"
argument_list|,
name|metadata
operator|.
name|get
argument_list|(
name|OfficeOpenXMLCore
operator|.
name|SUBJECT
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Gym class featuring a brown fox and lazy dog"
argument_list|,
name|metadata
operator|.
name|get
argument_list|(
name|Metadata
operator|.
name|SUBJECT
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Nevin Nollop"
argument_list|,
name|metadata
operator|.
name|get
argument_list|(
name|TikaCoreProperties
operator|.
name|CREATOR
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Nevin Nollop"
argument_list|,
name|metadata
operator|.
name|get
argument_list|(
name|Metadata
operator|.
name|AUTHOR
argument_list|)
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"The quick brown fox jumps over the lazy dog"
argument_list|,
name|handler
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testVarious
parameter_list|()
throws|throws
name|Exception
block|{
name|ContentHandler
name|handler
init|=
operator|new
name|BodyContentHandler
argument_list|()
decl_stmt|;
name|Metadata
name|metadata
init|=
operator|new
name|Metadata
argument_list|()
decl_stmt|;
try|try
init|(
name|InputStream
name|stream
init|=
name|WordParserTest
operator|.
name|class
operator|.
name|getResourceAsStream
argument_list|(
literal|"/test-documents/testWORD_various.doc"
argument_list|)
init|)
block|{
operator|new
name|OfficeParser
argument_list|()
operator|.
name|parse
argument_list|(
name|stream
argument_list|,
name|handler
argument_list|,
name|metadata
argument_list|,
operator|new
name|ParseContext
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|String
name|content
init|=
name|handler
operator|.
name|toString
argument_list|()
decl_stmt|;
comment|//content = content.replaceAll("\\s+"," ");
name|assertContains
argument_list|(
literal|"Footnote appears here"
argument_list|,
name|content
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"This is a footnote."
argument_list|,
name|content
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"This is the header text."
argument_list|,
name|content
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"This is the footer text."
argument_list|,
name|content
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"Here is a text box"
argument_list|,
name|content
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"Bold"
argument_list|,
name|content
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"italic"
argument_list|,
name|content
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"underline"
argument_list|,
name|content
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"superscript"
argument_list|,
name|content
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"subscript"
argument_list|,
name|content
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"Here is a citation:"
argument_list|,
name|content
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"Figure 1 This is a caption for Figure 1"
argument_list|,
name|content
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"(Kramer)"
argument_list|,
name|content
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"Row 1 Col 1 Row 1 Col 2 Row 1 Col 3 Row 2 Col 1 Row 2 Col 2 Row 2 Col 3"
argument_list|,
name|content
operator|.
name|replaceAll
argument_list|(
literal|"\\s+"
argument_list|,
literal|" "
argument_list|)
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"Row 1 column 1 Row 2 column 1 Row 1 column 2 Row 2 column 2"
argument_list|,
name|content
operator|.
name|replaceAll
argument_list|(
literal|"\\s+"
argument_list|,
literal|" "
argument_list|)
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"This is a hyperlink"
argument_list|,
name|content
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"Here is a list:"
argument_list|,
name|content
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|row
init|=
literal|1
init|;
name|row
operator|<=
literal|3
condition|;
name|row
operator|++
control|)
block|{
comment|//assertContains("·\tBullet " + row, content);
comment|//assertContains("\u00b7\tBullet " + row, content);
name|assertContains
argument_list|(
literal|"Bullet "
operator|+
name|row
argument_list|,
name|content
argument_list|)
expr_stmt|;
block|}
name|assertContains
argument_list|(
literal|"Here is a numbered list:"
argument_list|,
name|content
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|row
init|=
literal|1
init|;
name|row
operator|<=
literal|3
condition|;
name|row
operator|++
control|)
block|{
comment|//assertContains(row + ")\tNumber bullet " + row, content);
comment|//assertContains(row + ") Number bullet " + row, content);
comment|// TODO: WordExtractor fails to number the bullets:
name|assertContains
argument_list|(
literal|"Number bullet "
operator|+
name|row
argument_list|,
name|content
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|row
init|=
literal|1
init|;
name|row
operator|<=
literal|2
condition|;
name|row
operator|++
control|)
block|{
for|for
control|(
name|int
name|col
init|=
literal|1
init|;
name|col
operator|<=
literal|3
condition|;
name|col
operator|++
control|)
block|{
name|assertContains
argument_list|(
literal|"Row "
operator|+
name|row
operator|+
literal|" Col "
operator|+
name|col
argument_list|,
name|content
argument_list|)
expr_stmt|;
block|}
block|}
name|assertContains
argument_list|(
literal|"Keyword1 Keyword2"
argument_list|,
name|content
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Keyword1 Keyword2"
argument_list|,
name|metadata
operator|.
name|get
argument_list|(
name|TikaCoreProperties
operator|.
name|KEYWORDS
argument_list|)
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"Subject is here"
argument_list|,
name|content
argument_list|)
expr_stmt|;
comment|// TODO: Move to OO subject in Tika 2.0
name|assertEquals
argument_list|(
literal|"Subject is here"
argument_list|,
name|metadata
operator|.
name|get
argument_list|(
name|Metadata
operator|.
name|SUBJECT
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Subject is here"
argument_list|,
name|metadata
operator|.
name|get
argument_list|(
name|OfficeOpenXMLCore
operator|.
name|SUBJECT
argument_list|)
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"Suddenly some Japanese text:"
argument_list|,
name|content
argument_list|)
expr_stmt|;
comment|// Special version of (GHQ)
name|assertContains
argument_list|(
literal|"\uff08\uff27\uff28\uff31\uff09"
argument_list|,
name|content
argument_list|)
expr_stmt|;
comment|// 6 other characters
name|assertContains
argument_list|(
literal|"\u30be\u30eb\u30b2\u3068\u5c3e\u5d0e\u3001\u6de1\u3005\u3068\u6700\u671f"
argument_list|,
name|content
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"And then some Gothic text:"
argument_list|,
name|content
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"\uD800\uDF32\uD800\uDF3f\uD800\uDF44\uD800\uDF39\uD800\uDF43\uD800\uDF3A"
argument_list|,
name|content
argument_list|)
expr_stmt|;
block|}
comment|/**      * TIKA-1044 - Handle documents where parts of the      *  text have no formatting or styles applied to them      */
annotation|@
name|Test
specifier|public
name|void
name|testNoFormat
parameter_list|()
throws|throws
name|Exception
block|{
name|ContentHandler
name|handler
init|=
operator|new
name|BodyContentHandler
argument_list|()
decl_stmt|;
name|Metadata
name|metadata
init|=
operator|new
name|Metadata
argument_list|()
decl_stmt|;
try|try
init|(
name|InputStream
name|stream
init|=
name|WordParserTest
operator|.
name|class
operator|.
name|getResourceAsStream
argument_list|(
literal|"/test-documents/testWORD_no_format.doc"
argument_list|)
init|)
block|{
operator|new
name|OfficeParser
argument_list|()
operator|.
name|parse
argument_list|(
name|stream
argument_list|,
name|handler
argument_list|,
name|metadata
argument_list|,
operator|new
name|ParseContext
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|String
name|content
init|=
name|handler
operator|.
name|toString
argument_list|()
decl_stmt|;
name|assertContains
argument_list|(
literal|"Will generate an exception"
argument_list|,
name|content
argument_list|)
expr_stmt|;
block|}
comment|/**      * Ensures that custom OLE2 (HPSF) properties are extracted      */
annotation|@
name|Test
specifier|public
name|void
name|testCustomProperties
parameter_list|()
throws|throws
name|Exception
block|{
name|Metadata
name|metadata
init|=
operator|new
name|Metadata
argument_list|()
decl_stmt|;
try|try
init|(
name|InputStream
name|input
init|=
name|WordParserTest
operator|.
name|class
operator|.
name|getResourceAsStream
argument_list|(
literal|"/test-documents/testWORD_custom_props.doc"
argument_list|)
init|)
block|{
name|ContentHandler
name|handler
init|=
operator|new
name|BodyContentHandler
argument_list|(
operator|-
literal|1
argument_list|)
decl_stmt|;
name|ParseContext
name|context
init|=
operator|new
name|ParseContext
argument_list|()
decl_stmt|;
name|context
operator|.
name|set
argument_list|(
name|Locale
operator|.
name|class
argument_list|,
name|Locale
operator|.
name|US
argument_list|)
expr_stmt|;
operator|new
name|OfficeParser
argument_list|()
operator|.
name|parse
argument_list|(
name|input
argument_list|,
name|handler
argument_list|,
name|metadata
argument_list|,
name|context
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"application/msword"
argument_list|,
name|metadata
operator|.
name|get
argument_list|(
name|Metadata
operator|.
name|CONTENT_TYPE
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"EJ04325S"
argument_list|,
name|metadata
operator|.
name|get
argument_list|(
name|TikaCoreProperties
operator|.
name|CREATOR
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Etienne Jouvin"
argument_list|,
name|metadata
operator|.
name|get
argument_list|(
name|TikaCoreProperties
operator|.
name|MODIFIER
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Etienne Jouvin"
argument_list|,
name|metadata
operator|.
name|get
argument_list|(
name|Metadata
operator|.
name|LAST_AUTHOR
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"2012-01-03T22:14:00Z"
argument_list|,
name|metadata
operator|.
name|get
argument_list|(
name|TikaCoreProperties
operator|.
name|MODIFIED
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"2012-01-03T22:14:00Z"
argument_list|,
name|metadata
operator|.
name|get
argument_list|(
name|Metadata
operator|.
name|DATE
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"2010-10-05T09:03:00Z"
argument_list|,
name|metadata
operator|.
name|get
argument_list|(
name|TikaCoreProperties
operator|.
name|CREATED
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"2010-10-05T09:03:00Z"
argument_list|,
name|metadata
operator|.
name|get
argument_list|(
name|Metadata
operator|.
name|CREATION_DATE
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Microsoft Office Word"
argument_list|,
name|metadata
operator|.
name|get
argument_list|(
name|OfficeOpenXMLExtended
operator|.
name|APPLICATION
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"1"
argument_list|,
name|metadata
operator|.
name|get
argument_list|(
name|Office
operator|.
name|PAGE_COUNT
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"2"
argument_list|,
name|metadata
operator|.
name|get
argument_list|(
name|Office
operator|.
name|WORD_COUNT
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"My Title"
argument_list|,
name|metadata
operator|.
name|get
argument_list|(
name|TikaCoreProperties
operator|.
name|TITLE
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"My Keyword"
argument_list|,
name|metadata
operator|.
name|get
argument_list|(
name|TikaCoreProperties
operator|.
name|KEYWORDS
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Normal.dotm"
argument_list|,
name|metadata
operator|.
name|get
argument_list|(
name|OfficeOpenXMLExtended
operator|.
name|TEMPLATE
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"My Comments"
argument_list|,
name|metadata
operator|.
name|get
argument_list|(
name|TikaCoreProperties
operator|.
name|COMMENTS
argument_list|)
argument_list|)
expr_stmt|;
comment|// TODO: Move to OO subject in Tika 2.0
name|assertEquals
argument_list|(
literal|"My subject"
argument_list|,
name|metadata
operator|.
name|get
argument_list|(
name|Metadata
operator|.
name|SUBJECT
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"My subject"
argument_list|,
name|metadata
operator|.
name|get
argument_list|(
name|OfficeOpenXMLCore
operator|.
name|SUBJECT
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"EDF-DIT"
argument_list|,
name|metadata
operator|.
name|get
argument_list|(
name|OfficeOpenXMLExtended
operator|.
name|COMPANY
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"MyStringValue"
argument_list|,
name|metadata
operator|.
name|get
argument_list|(
literal|"custom:MyCustomString"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"2010-12-30T23:00:00Z"
argument_list|,
name|metadata
operator|.
name|get
argument_list|(
literal|"custom:MyCustomDate"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testExceptions1
parameter_list|()
throws|throws
name|Exception
block|{
name|XMLResult
name|xml
decl_stmt|;
name|Level
name|logLevelStart
init|=
name|Logger
operator|.
name|getRootLogger
argument_list|()
operator|.
name|getLevel
argument_list|()
decl_stmt|;
name|Logger
operator|.
name|getRootLogger
argument_list|()
operator|.
name|setLevel
argument_list|(
name|Level
operator|.
name|ERROR
argument_list|)
expr_stmt|;
try|try
block|{
name|xml
operator|=
name|getXML
argument_list|(
literal|"testException1.doc"
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"total population"
argument_list|,
name|xml
operator|.
name|xml
argument_list|)
expr_stmt|;
name|xml
operator|=
name|getXML
argument_list|(
literal|"testException2.doc"
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"electric charge"
argument_list|,
name|xml
operator|.
name|xml
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|Logger
operator|.
name|getRootLogger
argument_list|()
operator|.
name|setLevel
argument_list|(
name|logLevelStart
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTabularSymbol
parameter_list|()
throws|throws
name|Exception
block|{
name|assertContains
argument_list|(
literal|"one two"
argument_list|,
name|getXML
argument_list|(
literal|"testWORD_tabular_symbol.doc"
argument_list|)
operator|.
name|xml
operator|.
name|replaceAll
argument_list|(
literal|"\\s+"
argument_list|,
literal|" "
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * TIKA-1229 Hyperlinks in Headers should be output as such,      *  not plain text with control characters      */
annotation|@
name|Test
specifier|public
name|void
name|testHeaderHyperlinks
parameter_list|()
throws|throws
name|Exception
block|{
name|XMLResult
name|result
init|=
name|getXML
argument_list|(
literal|"testWORD_header_hyperlink.doc"
argument_list|)
decl_stmt|;
name|String
name|xml
init|=
name|result
operator|.
name|xml
decl_stmt|;
name|Metadata
name|metadata
init|=
name|result
operator|.
name|metadata
decl_stmt|;
name|assertEquals
argument_list|(
literal|"application/msword"
argument_list|,
name|metadata
operator|.
name|get
argument_list|(
name|Metadata
operator|.
name|CONTENT_TYPE
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Lutz Theurer"
argument_list|,
name|metadata
operator|.
name|get
argument_list|(
name|TikaCoreProperties
operator|.
name|CREATOR
argument_list|)
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"example.com"
argument_list|,
name|xml
argument_list|)
expr_stmt|;
comment|// Check we don't have the special text HYPERLINK
name|assertFalse
argument_list|(
name|xml
operator|.
name|contains
argument_list|(
literal|"HYPERLINK"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Check we do have the link
name|assertContains
argument_list|(
literal|"<a href=\"http://tw-systemhaus.de\">http:"
argument_list|,
name|xml
argument_list|)
expr_stmt|;
comment|// Check we do have the email
name|assertContains
argument_list|(
literal|"<a href=\"mailto:ab@example.com\">ab@"
argument_list|,
name|xml
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testControlCharacter
parameter_list|()
throws|throws
name|Exception
block|{
name|assertContains
argument_list|(
literal|"1. Introduzione<b></a></b></p>"
argument_list|,
name|getXML
argument_list|(
literal|"testControlCharacters.doc"
argument_list|)
operator|.
name|xml
operator|.
name|replaceAll
argument_list|(
literal|"\\s+"
argument_list|,
literal|" "
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testParagraphsAfterTables
parameter_list|()
throws|throws
name|Exception
block|{
name|XMLResult
name|result
init|=
name|getXML
argument_list|(
literal|"test_TIKA-1251.doc"
argument_list|)
decl_stmt|;
name|String
name|xml
init|=
name|result
operator|.
name|xml
decl_stmt|;
name|Metadata
name|metadata
init|=
name|result
operator|.
name|metadata
decl_stmt|;
name|assertEquals
argument_list|(
literal|"application/msword"
argument_list|,
name|metadata
operator|.
name|get
argument_list|(
name|Metadata
operator|.
name|CONTENT_TYPE
argument_list|)
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"<p>1. Organisering av vakten:</p>"
argument_list|,
name|xml
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testHyperlinkStringIOOBESmartQuote
parameter_list|()
throws|throws
name|Exception
block|{
comment|//TIKA-1512, one cause: closing double quote is a smart quote
comment|//test file contributed by user
name|XMLResult
name|result
init|=
name|getXML
argument_list|(
literal|"testWORD_closingSmartQInHyperLink.doc"
argument_list|)
decl_stmt|;
name|assertContains
argument_list|(
literal|"href=\"https://issues.apache.org/jira/browse/TIKA-1512"
argument_list|,
name|result
operator|.
name|xml
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|Ignore
comment|//until we determine whether we can include test docs or not
specifier|public
name|void
name|testHyperlinkStringLongNoCloseQuote
parameter_list|()
throws|throws
name|Exception
block|{
comment|//TIKA-1512, one cause: no closing quote on really long string
comment|//test file derived from govdocs1 012152.doc
name|XMLResult
name|result
init|=
name|getXML
argument_list|(
literal|"testWORD_longHyperLinkNoCloseQuote.doc"
argument_list|)
decl_stmt|;
name|assertContains
argument_list|(
literal|"href=\"http://www.lexis.com"
argument_list|,
name|result
operator|.
name|xml
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|Ignore
comment|//until we determine whether we can include test docs or not
specifier|public
name|void
name|testHyperlinkStringLongCarriageReturn
parameter_list|()
throws|throws
name|Exception
block|{
comment|//TIKA-1512, one cause: no closing quote, but carriage return
comment|//test file derived from govdocs1 040044.doc
name|XMLResult
name|result
init|=
name|getXML
argument_list|(
literal|"testWORD_hyperLinkCarriageReturn.doc"
argument_list|)
decl_stmt|;
name|assertContains
argument_list|(
literal|"href=\"http://www.nib.org"
argument_list|,
name|result
operator|.
name|xml
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDOCParagraphNumbering
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|xml
init|=
name|getXML
argument_list|(
literal|"testWORD_numbered_list.doc"
argument_list|)
operator|.
name|xml
decl_stmt|;
name|assertContains
argument_list|(
literal|"1) This"
argument_list|,
name|xml
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"a) Is"
argument_list|,
name|xml
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"i) A multi"
argument_list|,
name|xml
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"ii) Level"
argument_list|,
name|xml
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"1. Within cell 1"
argument_list|,
name|xml
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"b. Cell b"
argument_list|,
name|xml
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"iii) List"
argument_list|,
name|xml
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"2) foo"
argument_list|,
name|xml
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"ii) baz"
argument_list|,
name|xml
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"ii) foo"
argument_list|,
name|xml
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"II. bar"
argument_list|,
name|xml
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"6. six"
argument_list|,
name|xml
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"7. seven"
argument_list|,
name|xml
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"a. seven a"
argument_list|,
name|xml
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"e. seven e"
argument_list|,
name|xml
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"2. A ii 2"
argument_list|,
name|xml
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"3. page break list 3"
argument_list|,
name|xml
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"Some-1-CrazyFormat Greek numbering with crazy format - alpha"
argument_list|,
name|xml
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"1.1.1. 1.1.1"
argument_list|,
name|xml
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"1.1. 1.2-&gt;1.1  //set the value"
argument_list|,
name|xml
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"add a list here"
argument_list|,
name|xml
argument_list|)
expr_stmt|;
comment|//TODO: not currently pulling numbers out of comments
name|assertContains
argument_list|(
literal|">comment list 1"
argument_list|,
name|xml
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDOCOverrideParagraphNumbering
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|xml
init|=
name|getXML
argument_list|(
literal|"testWORD_override_list_numbering.doc"
argument_list|)
operator|.
name|xml
decl_stmt|;
comment|//Test 1
name|assertContains
argument_list|(
literal|"1.1.1.1...1 1.1.1.1...1"
argument_list|,
name|xml
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"1st.2.3someText 1st.2.3someText"
argument_list|,
name|xml
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"1st.2.2someOtherText.1 1st.2.2someOtherText.1"
argument_list|,
name|xml
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"5th 5th"
argument_list|,
name|xml
argument_list|)
expr_stmt|;
comment|//Test 2
name|assertContains
argument_list|(
literal|"1.a.I 1.a.I"
argument_list|,
name|xml
argument_list|)
expr_stmt|;
comment|//test no reset because level 2 is not sufficient to reset
name|assertContains
argument_list|(
literal|"1.b.III 1.b.III"
argument_list|,
name|xml
argument_list|)
expr_stmt|;
comment|//test restarted because of level 0's increment to 2
name|assertContains
argument_list|(
literal|"2.a.I 2.a.I"
argument_list|,
name|xml
argument_list|)
expr_stmt|;
comment|//test handling of skipped level
name|assertContains
argument_list|(
literal|"2.b 2.b"
argument_list|,
name|xml
argument_list|)
expr_stmt|;
comment|//Test 3
name|assertContains
argument_list|(
literal|"(1)) (1))"
argument_list|,
name|xml
argument_list|)
expr_stmt|;
comment|//tests start level 1 at 17 and
name|assertContains
argument_list|(
literal|"2.17 2.17"
argument_list|,
name|xml
argument_list|)
expr_stmt|;
comment|//tests that isLegal turns everything into decimal
name|assertContains
argument_list|(
literal|"2.18.2.1 2.18.2.1"
argument_list|,
name|xml
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|">2 2"
argument_list|,
name|xml
argument_list|)
expr_stmt|;
comment|//Test4
name|assertContains
argument_list|(
literal|">1 1"
argument_list|,
name|xml
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|">A A"
argument_list|,
name|xml
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|">B B"
argument_list|,
name|xml
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|">C C"
argument_list|,
name|xml
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|">4 4"
argument_list|,
name|xml
argument_list|)
expr_stmt|;
comment|//Test5
name|assertContains
argument_list|(
literal|">00 00"
argument_list|,
name|xml
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|">01 01"
argument_list|,
name|xml
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|">01. 01."
argument_list|,
name|xml
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|">01..1 01..1"
argument_list|,
name|xml
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|">02 02"
argument_list|,
name|xml
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMultiAuthorsManagers
parameter_list|()
throws|throws
name|Exception
block|{
name|XMLResult
name|r
init|=
name|getXML
argument_list|(
literal|"testWORD_multi_authors.doc"
argument_list|)
decl_stmt|;
name|String
index|[]
name|authors
init|=
name|r
operator|.
name|metadata
operator|.
name|getValues
argument_list|(
name|TikaCoreProperties
operator|.
name|CREATOR
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|authors
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"author2"
argument_list|,
name|authors
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|String
index|[]
name|managers
init|=
name|r
operator|.
name|metadata
operator|.
name|getValues
argument_list|(
name|OfficeOpenXMLExtended
operator|.
name|MANAGER
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|managers
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"manager1"
argument_list|,
name|managers
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"manager2"
argument_list|,
name|managers
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testOrigLocation
parameter_list|()
throws|throws
name|Exception
block|{
name|Metadata
name|metadata
init|=
name|getXML
argument_list|(
literal|"testException2.doc"
argument_list|)
operator|.
name|metadata
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|values
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|metadata
operator|.
name|getValues
argument_list|(
name|TikaCoreProperties
operator|.
name|ORIGINAL_RESOURCE_NAME
argument_list|)
argument_list|)
decl_stmt|;
name|assertContains
argument_list|(
literal|"C:\\Lab Documents\\Lab Manuals\\Physics 275-6\\276-s00\\07-Force-on-a-current-S00.doc"
argument_list|,
name|values
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"Hard Drive:Course Folders:276:276-s00:07-Force-on-a-current-S00"
argument_list|,
name|values
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testOrigSourcePath
parameter_list|()
throws|throws
name|Exception
block|{
name|Metadata
name|embed1_zip_metadata
init|=
name|getRecursiveMetadata
argument_list|(
literal|"test_recursive_embedded.doc"
argument_list|)
operator|.
name|get
argument_list|(
literal|11
argument_list|)
decl_stmt|;
name|assertContains
argument_list|(
literal|"C:\\Users\\tallison\\AppData\\Local\\Temp\\embed1.zip"
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|embed1_zip_metadata
operator|.
name|getValues
argument_list|(
name|TikaCoreProperties
operator|.
name|ORIGINAL_RESOURCE_NAME
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"C:\\Users\\tallison\\Desktop\\tmp\\New folder (2)\\embed1.zip"
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|embed1_zip_metadata
operator|.
name|getValues
argument_list|(
name|TikaCoreProperties
operator|.
name|ORIGINAL_RESOURCE_NAME
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

