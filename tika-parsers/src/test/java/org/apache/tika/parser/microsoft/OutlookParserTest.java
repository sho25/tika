begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|microsoft
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|OutputKeys
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|sax
operator|.
name|SAXTransformerFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|sax
operator|.
name|TransformerHandler
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|stream
operator|.
name|StreamResult
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|TikaTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|config
operator|.
name|TikaConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|metadata
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|metadata
operator|.
name|Metadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|metadata
operator|.
name|Office
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|metadata
operator|.
name|TikaCoreProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|mime
operator|.
name|MediaType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|AutoDetectParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|ParseContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|Parser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|RecursiveParserWrapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|sax
operator|.
name|BodyContentHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|ContentHandler
import|;
end_import

begin_comment
comment|/**  * Test case for parsing Outlook files.  */
end_comment

begin_class
specifier|public
class|class
name|OutlookParserTest
extends|extends
name|TikaTest
block|{
annotation|@
name|Test
specifier|public
name|void
name|testOutlookParsing
parameter_list|()
throws|throws
name|Exception
block|{
name|Parser
name|parser
init|=
operator|new
name|AutoDetectParser
argument_list|()
decl_stmt|;
comment|// Should auto-detect!
name|ContentHandler
name|handler
init|=
operator|new
name|BodyContentHandler
argument_list|()
decl_stmt|;
name|Metadata
name|metadata
init|=
operator|new
name|Metadata
argument_list|()
decl_stmt|;
try|try
init|(
name|InputStream
name|stream
init|=
name|OutlookParserTest
operator|.
name|class
operator|.
name|getResourceAsStream
argument_list|(
literal|"/test-documents/test-outlook.msg"
argument_list|)
init|)
block|{
name|parser
operator|.
name|parse
argument_list|(
name|stream
argument_list|,
name|handler
argument_list|,
name|metadata
argument_list|,
operator|new
name|ParseContext
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"application/vnd.ms-outlook"
argument_list|,
name|metadata
operator|.
name|get
argument_list|(
name|Metadata
operator|.
name|CONTENT_TYPE
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Microsoft Outlook Express 6"
argument_list|,
name|metadata
operator|.
name|get
argument_list|(
name|TikaCoreProperties
operator|.
name|TITLE
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Nouvel utilisateur de Outlook Express"
argument_list|,
name|metadata
operator|.
name|get
argument_list|(
name|Metadata
operator|.
name|MESSAGE_RECIPIENT_ADDRESS
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"L'\u00C9quipe Microsoft Outlook Express"
argument_list|,
name|metadata
operator|.
name|get
argument_list|(
name|TikaCoreProperties
operator|.
name|CREATOR
argument_list|)
argument_list|)
expr_stmt|;
comment|//ensure that "raw" header is correctly decoded
name|assertEquals
argument_list|(
literal|"L'\u00C9quipe Microsoft Outlook Express<msoe@microsoft.com>"
argument_list|,
name|metadata
operator|.
name|get
argument_list|(
name|Metadata
operator|.
name|MESSAGE_RAW_HEADER_PREFIX
operator|+
literal|"From"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Nouvel utilisateur de Outlook Express"
argument_list|,
name|metadata
operator|.
name|get
argument_list|(
name|Message
operator|.
name|MESSAGE_TO_EMAIL
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|metadata
operator|.
name|get
argument_list|(
name|Message
operator|.
name|MESSAGE_TO_NAME
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Nouvel utilisateur de Outlook Express"
argument_list|,
name|metadata
operator|.
name|get
argument_list|(
name|Message
operator|.
name|MESSAGE_TO_DISPLAY_NAME
argument_list|)
argument_list|)
expr_stmt|;
comment|// Stored as Thu, 5 Apr 2007 09:26:06 -0700
name|assertEquals
argument_list|(
literal|"2007-04-05T16:26:06Z"
argument_list|,
name|metadata
operator|.
name|get
argument_list|(
name|TikaCoreProperties
operator|.
name|CREATED
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|content
init|=
name|handler
operator|.
name|toString
argument_list|()
decl_stmt|;
name|assertContains
argument_list|(
literal|"Microsoft Outlook Express 6"
argument_list|,
name|content
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"L'\u00C9quipe Microsoft Outlook Express"
argument_list|,
name|content
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"Nouvel utilisateur de Outlook Express"
argument_list|,
name|content
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"Messagerie et groupes de discussion"
argument_list|,
name|content
argument_list|)
expr_stmt|;
block|}
comment|/**      * Test case for TIKA-197      *      * @see<a href="https://issues.apache.org/jira/browse/TIKA-197">TIKA-197</a>      */
annotation|@
name|Test
specifier|public
name|void
name|testMultipleCopies
parameter_list|()
throws|throws
name|Exception
block|{
name|Parser
name|parser
init|=
operator|new
name|AutoDetectParser
argument_list|()
decl_stmt|;
name|ContentHandler
name|handler
init|=
operator|new
name|BodyContentHandler
argument_list|()
decl_stmt|;
name|Metadata
name|metadata
init|=
operator|new
name|Metadata
argument_list|()
decl_stmt|;
try|try
init|(
name|InputStream
name|stream
init|=
name|OutlookParserTest
operator|.
name|class
operator|.
name|getResourceAsStream
argument_list|(
literal|"/test-documents/testMSG.msg"
argument_list|)
init|)
block|{
name|parser
operator|.
name|parse
argument_list|(
name|stream
argument_list|,
name|handler
argument_list|,
name|metadata
argument_list|,
operator|new
name|ParseContext
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"application/vnd.ms-outlook"
argument_list|,
name|metadata
operator|.
name|get
argument_list|(
name|Metadata
operator|.
name|CONTENT_TYPE
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|content
init|=
name|handler
operator|.
name|toString
argument_list|()
decl_stmt|;
name|Pattern
name|pattern
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"From"
argument_list|)
decl_stmt|;
name|Matcher
name|matcher
init|=
name|pattern
operator|.
name|matcher
argument_list|(
name|content
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|matcher
operator|.
name|find
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|matcher
operator|.
name|find
argument_list|()
argument_list|)
expr_stmt|;
comment|//test that last header is added
name|assertContains
argument_list|(
literal|"29 Jan 2009 19:17:10.0163 (UTC) FILETIME=[2ED25E30:01C98246]"
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|metadata
operator|.
name|getValues
argument_list|(
literal|"Message:Raw-Header:X-OriginalArrivalTime"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|//confirm next line is added correctly
name|assertContains
argument_list|(
literal|"from athena.apache.org (HELO athena.apache.org) (140.211.11.136)\n"
operator|+
literal|"    by apache.org (qpsmtpd/0.29) with ESMTP; Thu, 29 Jan 2009 11:17:08 -0800"
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|metadata
operator|.
name|getValues
argument_list|(
literal|"Message:Raw-Header:Received"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"EX"
argument_list|,
name|metadata
operator|.
name|get
argument_list|(
name|Office
operator|.
name|MAPI_SENT_BY_SERVER_TYPE
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"NOTE"
argument_list|,
name|metadata
operator|.
name|get
argument_list|(
name|Office
operator|.
name|MAPI_MESSAGE_CLASS
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Jukka Zitting"
argument_list|,
name|metadata
operator|.
name|get
argument_list|(
name|Message
operator|.
name|MESSAGE_FROM_NAME
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"jukka.zitting@gmail.com"
argument_list|,
name|metadata
operator|.
name|get
argument_list|(
name|Message
operator|.
name|MESSAGE_FROM_EMAIL
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Jukka Zitting"
argument_list|,
name|metadata
operator|.
name|get
argument_list|(
name|Office
operator|.
name|MAPI_FROM_REPRESENTING_NAME
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"jukka.zitting@gmail.com"
argument_list|,
name|metadata
operator|.
name|get
argument_list|(
name|Office
operator|.
name|MAPI_FROM_REPRESENTING_EMAIL
argument_list|)
argument_list|)
expr_stmt|;
comment|//to-name is empty, make sure that we get an empty string.
name|assertEquals
argument_list|(
literal|"tika-dev@lucene.apache.org"
argument_list|,
name|metadata
operator|.
name|get
argument_list|(
name|Message
operator|.
name|MESSAGE_TO_EMAIL
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"tika-dev@lucene.apache.org"
argument_list|,
name|metadata
operator|.
name|get
argument_list|(
name|Message
operator|.
name|MESSAGE_TO_DISPLAY_NAME
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|metadata
operator|.
name|get
argument_list|(
name|Message
operator|.
name|MESSAGE_TO_NAME
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Test case for TIKA-395, to ensure parser works for new Outlook formats.      *      * @see<a href="https://issues.apache.org/jira/browse/TIKA-395">TIKA-395</a>      */
annotation|@
name|Test
specifier|public
name|void
name|testOutlookNew
parameter_list|()
throws|throws
name|Exception
block|{
name|Parser
name|parser
init|=
operator|new
name|AutoDetectParser
argument_list|()
decl_stmt|;
name|ContentHandler
name|handler
init|=
operator|new
name|BodyContentHandler
argument_list|()
decl_stmt|;
name|Metadata
name|metadata
init|=
operator|new
name|Metadata
argument_list|()
decl_stmt|;
try|try
init|(
name|InputStream
name|stream
init|=
name|OutlookParserTest
operator|.
name|class
operator|.
name|getResourceAsStream
argument_list|(
literal|"/test-documents/test-outlook2003.msg"
argument_list|)
init|)
block|{
name|parser
operator|.
name|parse
argument_list|(
name|stream
argument_list|,
name|handler
argument_list|,
name|metadata
argument_list|,
operator|new
name|ParseContext
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"application/vnd.ms-outlook"
argument_list|,
name|metadata
operator|.
name|get
argument_list|(
name|Metadata
operator|.
name|CONTENT_TYPE
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Welcome to Microsoft Office Outlook 2003"
argument_list|,
name|metadata
operator|.
name|get
argument_list|(
name|TikaCoreProperties
operator|.
name|TITLE
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|content
init|=
name|handler
operator|.
name|toString
argument_list|()
decl_stmt|;
name|assertContains
argument_list|(
literal|"Outlook 2003"
argument_list|,
name|content
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"Streamlined Mail Experience"
argument_list|,
name|content
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"Navigation Pane"
argument_list|,
name|content
argument_list|)
expr_stmt|;
comment|//make sure these are parallel
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|metadata
operator|.
name|get
argument_list|(
name|Message
operator|.
name|MESSAGE_TO_EMAIL
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"New Outlook User"
argument_list|,
name|metadata
operator|.
name|get
argument_list|(
name|Message
operator|.
name|MESSAGE_TO_NAME
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"New Outlook User"
argument_list|,
name|metadata
operator|.
name|get
argument_list|(
name|Message
operator|.
name|MESSAGE_TO_DISPLAY_NAME
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testOutlookHTMLVersion
parameter_list|()
throws|throws
name|Exception
block|{
name|Parser
name|parser
init|=
operator|new
name|AutoDetectParser
argument_list|()
decl_stmt|;
name|Metadata
name|metadata
init|=
operator|new
name|Metadata
argument_list|()
decl_stmt|;
comment|// Check the HTML version
name|StringWriter
name|sw
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|SAXTransformerFactory
name|factory
init|=
operator|(
name|SAXTransformerFactory
operator|)
name|SAXTransformerFactory
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|TransformerHandler
name|handler
init|=
name|factory
operator|.
name|newTransformerHandler
argument_list|()
decl_stmt|;
name|handler
operator|.
name|getTransformer
argument_list|()
operator|.
name|setOutputProperty
argument_list|(
name|OutputKeys
operator|.
name|METHOD
argument_list|,
literal|"xml"
argument_list|)
expr_stmt|;
name|handler
operator|.
name|getTransformer
argument_list|()
operator|.
name|setOutputProperty
argument_list|(
name|OutputKeys
operator|.
name|INDENT
argument_list|,
literal|"yes"
argument_list|)
expr_stmt|;
name|handler
operator|.
name|setResult
argument_list|(
operator|new
name|StreamResult
argument_list|(
name|sw
argument_list|)
argument_list|)
expr_stmt|;
try|try
init|(
name|InputStream
name|stream
init|=
name|OutlookParserTest
operator|.
name|class
operator|.
name|getResourceAsStream
argument_list|(
literal|"/test-documents/testMSG_chinese.msg"
argument_list|)
init|)
block|{
name|parser
operator|.
name|parse
argument_list|(
name|stream
argument_list|,
name|handler
argument_list|,
name|metadata
argument_list|,
operator|new
name|ParseContext
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// As the HTML version should have been processed, ensure
comment|//  we got some of the links
name|String
name|content
init|=
name|sw
operator|.
name|toString
argument_list|()
decl_stmt|;
name|assertContains
argument_list|(
literal|"<dd>tests.chang@fengttt.com</dd>"
argument_list|,
name|content
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"<p>Alfresco MSG format testing"
argument_list|,
name|content
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"<li>1"
argument_list|,
name|content
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"<li>2"
argument_list|,
name|content
argument_list|)
expr_stmt|;
comment|// Make sure we don't have nested html docs
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|content
operator|.
name|split
argument_list|(
literal|"<body>"
argument_list|)
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|content
operator|.
name|split
argument_list|(
literal|"<\\/body>"
argument_list|)
operator|.
name|length
argument_list|)
expr_stmt|;
comment|// Make sure that the Chinese actually came through
name|assertContains
argument_list|(
literal|"\u5F35\u6BD3\u502B"
argument_list|,
name|metadata
operator|.
name|get
argument_list|(
name|TikaCoreProperties
operator|.
name|CREATOR
argument_list|)
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"\u9673\u60E0\u73CD"
argument_list|,
name|content
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"tests.chang@fengttt.com"
argument_list|,
name|metadata
operator|.
name|get
argument_list|(
name|Message
operator|.
name|MESSAGE_TO_EMAIL
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Tests Chang@FT (張毓倫)"
argument_list|,
name|metadata
operator|.
name|get
argument_list|(
name|Office
operator|.
name|MAPI_FROM_REPRESENTING_NAME
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/O=FT GROUP/OU=FT/CN=RECIPIENTS/CN=LYDIACHANG"
argument_list|,
name|metadata
operator|.
name|get
argument_list|(
name|Office
operator|.
name|MAPI_FROM_REPRESENTING_EMAIL
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testOutlookForwarded
parameter_list|()
throws|throws
name|Exception
block|{
name|Parser
name|parser
init|=
operator|new
name|AutoDetectParser
argument_list|()
decl_stmt|;
name|Metadata
name|metadata
init|=
operator|new
name|Metadata
argument_list|()
decl_stmt|;
comment|// Check the HTML version
name|StringWriter
name|sw
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|SAXTransformerFactory
name|factory
init|=
operator|(
name|SAXTransformerFactory
operator|)
name|SAXTransformerFactory
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|TransformerHandler
name|handler
init|=
name|factory
operator|.
name|newTransformerHandler
argument_list|()
decl_stmt|;
name|handler
operator|.
name|getTransformer
argument_list|()
operator|.
name|setOutputProperty
argument_list|(
name|OutputKeys
operator|.
name|METHOD
argument_list|,
literal|"xml"
argument_list|)
expr_stmt|;
name|handler
operator|.
name|getTransformer
argument_list|()
operator|.
name|setOutputProperty
argument_list|(
name|OutputKeys
operator|.
name|INDENT
argument_list|,
literal|"yes"
argument_list|)
expr_stmt|;
name|handler
operator|.
name|setResult
argument_list|(
operator|new
name|StreamResult
argument_list|(
name|sw
argument_list|)
argument_list|)
expr_stmt|;
try|try
init|(
name|InputStream
name|stream
init|=
name|OutlookParserTest
operator|.
name|class
operator|.
name|getResourceAsStream
argument_list|(
literal|"/test-documents/testMSG_forwarded.msg"
argument_list|)
init|)
block|{
name|parser
operator|.
name|parse
argument_list|(
name|stream
argument_list|,
name|handler
argument_list|,
name|metadata
argument_list|,
operator|new
name|ParseContext
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Make sure we don't have nested docs
name|String
name|content
init|=
name|sw
operator|.
name|toString
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|content
operator|.
name|split
argument_list|(
literal|"<body>"
argument_list|)
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|content
operator|.
name|split
argument_list|(
literal|"<\\/body>"
argument_list|)
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testOutlookHTMLfromRTF
parameter_list|()
throws|throws
name|Exception
block|{
name|Parser
name|parser
init|=
operator|new
name|AutoDetectParser
argument_list|()
decl_stmt|;
name|Metadata
name|metadata
init|=
operator|new
name|Metadata
argument_list|()
decl_stmt|;
comment|// Check the HTML version
name|StringWriter
name|sw
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|SAXTransformerFactory
name|factory
init|=
operator|(
name|SAXTransformerFactory
operator|)
name|SAXTransformerFactory
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|TransformerHandler
name|handler
init|=
name|factory
operator|.
name|newTransformerHandler
argument_list|()
decl_stmt|;
name|handler
operator|.
name|getTransformer
argument_list|()
operator|.
name|setOutputProperty
argument_list|(
name|OutputKeys
operator|.
name|METHOD
argument_list|,
literal|"xml"
argument_list|)
expr_stmt|;
name|handler
operator|.
name|getTransformer
argument_list|()
operator|.
name|setOutputProperty
argument_list|(
name|OutputKeys
operator|.
name|INDENT
argument_list|,
literal|"yes"
argument_list|)
expr_stmt|;
name|handler
operator|.
name|setResult
argument_list|(
operator|new
name|StreamResult
argument_list|(
name|sw
argument_list|)
argument_list|)
expr_stmt|;
try|try
init|(
name|InputStream
name|stream
init|=
name|OutlookParserTest
operator|.
name|class
operator|.
name|getResourceAsStream
argument_list|(
literal|"/test-documents/test-outlook2003.msg"
argument_list|)
init|)
block|{
name|parser
operator|.
name|parse
argument_list|(
name|stream
argument_list|,
name|handler
argument_list|,
name|metadata
argument_list|,
operator|new
name|ParseContext
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// As the HTML version should have been processed, ensure
comment|//  we got some of the links
name|String
name|content
init|=
name|sw
operator|.
name|toString
argument_list|()
operator|.
name|replaceAll
argument_list|(
literal|"[\\r\\n\\t]+"
argument_list|,
literal|" "
argument_list|)
operator|.
name|replaceAll
argument_list|(
literal|" +"
argument_list|,
literal|" "
argument_list|)
decl_stmt|;
name|assertContains
argument_list|(
literal|"<dd>New Outlook User</dd>"
argument_list|,
name|content
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"designed<i>to help you"
argument_list|,
name|content
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"<p><a href=\"http://r.office.microsoft.com/r/rlidOutlookWelcomeMail10?clid=1033\">Cached Exchange Mode</a>"
argument_list|,
name|content
argument_list|)
expr_stmt|;
comment|// Link - check text around it, and the link itself
name|assertContains
argument_list|(
literal|"sign up for a free subscription"
argument_list|,
name|content
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"Office Newsletter"
argument_list|,
name|content
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"newsletter will be sent to you"
argument_list|,
name|content
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"http://r.office.microsoft.com/r/rlidNewsletterSignUp?clid=1033"
argument_list|,
name|content
argument_list|)
expr_stmt|;
comment|// Make sure we don't have nested html docs
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|content
operator|.
name|split
argument_list|(
literal|"<body>"
argument_list|)
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|content
operator|.
name|split
argument_list|(
literal|"<\\/body>"
argument_list|)
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMAPIMessageClasses
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|String
name|messageClass
range|:
operator|new
name|String
index|[]
block|{
literal|"Appointment"
block|,
literal|"Contact"
block|,
literal|"Post"
block|,
literal|"StickyNote"
block|,
literal|"Task"
block|}
control|)
block|{
name|testMsgClass
argument_list|(
name|messageClass
argument_list|,
name|getXML
argument_list|(
literal|"testMSG_"
operator|+
name|messageClass
operator|+
literal|".msg"
argument_list|)
operator|.
name|metadata
argument_list|)
expr_stmt|;
block|}
name|testMsgClass
argument_list|(
literal|"NOTE"
argument_list|,
name|getXML
argument_list|(
literal|"test-outlook2003.msg"
argument_list|)
operator|.
name|metadata
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|testMsgClass
parameter_list|(
name|String
name|expected
parameter_list|,
name|Metadata
name|metadata
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|expected
operator|+
literal|", but got: "
operator|+
name|metadata
operator|.
name|get
argument_list|(
name|Office
operator|.
name|MAPI_MESSAGE_CLASS
argument_list|)
argument_list|,
name|expected
operator|.
name|equalsIgnoreCase
argument_list|(
name|metadata
operator|.
name|get
argument_list|(
name|Office
operator|.
name|MAPI_MESSAGE_CLASS
argument_list|)
operator|.
name|replaceAll
argument_list|(
literal|"_"
argument_list|,
literal|""
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testHandlingAllAlternativesBodies
parameter_list|()
throws|throws
name|Exception
block|{
comment|//test that default only has one body
name|List
argument_list|<
name|Metadata
argument_list|>
name|metadataList
init|=
name|getRecursiveMetadata
argument_list|(
literal|"testMSG.msg"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|metadataList
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"breaking your application"
argument_list|,
name|metadataList
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|get
argument_list|(
name|RecursiveParserWrapper
operator|.
name|TIKA_CONTENT
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"application/vnd.ms-outlook"
argument_list|,
name|metadataList
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|get
argument_list|(
name|Metadata
operator|.
name|CONTENT_TYPE
argument_list|)
argument_list|)
expr_stmt|;
comment|//now try extracting all bodies
comment|//they should each appear as standalone attachments
comment|//with no content in the body of the msg level
name|TikaConfig
name|tikaConfig
init|=
operator|new
name|TikaConfig
argument_list|(
name|getResourceAsStream
argument_list|(
literal|"tika-config-extract-all-alternatives-msg.xml"
argument_list|)
argument_list|)
decl_stmt|;
name|Parser
name|p
init|=
operator|new
name|AutoDetectParser
argument_list|(
name|tikaConfig
argument_list|)
decl_stmt|;
name|metadataList
operator|=
name|getRecursiveMetadata
argument_list|(
literal|"testMSG.msg"
argument_list|,
name|p
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|metadataList
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotContained
argument_list|(
literal|"breaking your application"
argument_list|,
name|metadataList
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|get
argument_list|(
name|RecursiveParserWrapper
operator|.
name|TIKA_CONTENT
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"application/vnd.ms-outlook"
argument_list|,
name|metadataList
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|get
argument_list|(
name|Metadata
operator|.
name|CONTENT_TYPE
argument_list|)
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"breaking your application"
argument_list|,
name|metadataList
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|get
argument_list|(
name|RecursiveParserWrapper
operator|.
name|TIKA_CONTENT
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"application/rtf"
argument_list|,
name|metadataList
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|get
argument_list|(
name|Metadata
operator|.
name|CONTENT_TYPE
argument_list|)
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"breaking your application"
argument_list|,
name|metadataList
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|get
argument_list|(
name|RecursiveParserWrapper
operator|.
name|TIKA_CONTENT
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|metadataList
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|get
argument_list|(
name|Metadata
operator|.
name|CONTENT_TYPE
argument_list|)
operator|.
name|startsWith
argument_list|(
literal|"text/plain"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

