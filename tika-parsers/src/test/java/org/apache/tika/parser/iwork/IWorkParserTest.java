begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|iwork
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|metadata
operator|.
name|Metadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|metadata
operator|.
name|TikaCoreProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|AutoDetectParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|ParseContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|Parser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|sax
operator|.
name|BodyContentHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|ContentHandler
import|;
end_import

begin_comment
comment|/**  * Tests if the IWork parser parses the content and metadata properly of the supported formats.  */
end_comment

begin_class
specifier|public
class|class
name|IWorkParserTest
extends|extends
name|TestCase
block|{
specifier|private
name|IWorkPackageParser
name|iWorkParser
decl_stmt|;
specifier|private
name|ParseContext
name|parseContext
decl_stmt|;
annotation|@
name|Override
specifier|protected
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|iWorkParser
operator|=
operator|new
name|IWorkPackageParser
argument_list|()
expr_stmt|;
name|parseContext
operator|=
operator|new
name|ParseContext
argument_list|()
expr_stmt|;
name|parseContext
operator|.
name|set
argument_list|(
name|Parser
operator|.
name|class
argument_list|,
operator|new
name|AutoDetectParser
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testParseKeynote
parameter_list|()
throws|throws
name|Exception
block|{
name|InputStream
name|input
init|=
name|IWorkParserTest
operator|.
name|class
operator|.
name|getResourceAsStream
argument_list|(
literal|"/test-documents/testKeynote.key"
argument_list|)
decl_stmt|;
name|Metadata
name|metadata
init|=
operator|new
name|Metadata
argument_list|()
decl_stmt|;
name|ContentHandler
name|handler
init|=
operator|new
name|BodyContentHandler
argument_list|()
decl_stmt|;
name|iWorkParser
operator|.
name|parse
argument_list|(
name|input
argument_list|,
name|handler
argument_list|,
name|metadata
argument_list|,
name|parseContext
argument_list|)
expr_stmt|;
comment|// Make sure enough keys came through
comment|// (Exact numbers will vary based on composites)
name|assertTrue
argument_list|(
literal|"Insufficient metadata found "
operator|+
name|metadata
operator|.
name|size
argument_list|()
argument_list|,
name|metadata
operator|.
name|size
argument_list|()
operator|>=
literal|6
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|metadataKeys
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|metadata
operator|.
name|names
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Metadata not found in "
operator|+
name|metadataKeys
argument_list|,
name|metadataKeys
operator|.
name|contains
argument_list|(
name|Metadata
operator|.
name|CONTENT_TYPE
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Metadata not found in "
operator|+
name|metadataKeys
argument_list|,
name|metadataKeys
operator|.
name|contains
argument_list|(
name|Metadata
operator|.
name|SLIDE_COUNT
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|//        assertTrue("Metadata not found in " + metadataKeys, metadataKeys.contains(Office.SLIDE_COUNT.getName()));
name|assertTrue
argument_list|(
literal|"Metadata not found in "
operator|+
name|metadataKeys
argument_list|,
name|metadataKeys
operator|.
name|contains
argument_list|(
name|TikaCoreProperties
operator|.
name|CREATOR
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Metadata not found in "
operator|+
name|metadataKeys
argument_list|,
name|metadataKeys
operator|.
name|contains
argument_list|(
name|TikaCoreProperties
operator|.
name|TITLE
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// Check the metadata values
name|assertEquals
argument_list|(
literal|"application/vnd.apple.keynote"
argument_list|,
name|metadata
operator|.
name|get
argument_list|(
name|Metadata
operator|.
name|CONTENT_TYPE
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"3"
argument_list|,
name|metadata
operator|.
name|get
argument_list|(
name|Metadata
operator|.
name|SLIDE_COUNT
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"1024"
argument_list|,
name|metadata
operator|.
name|get
argument_list|(
name|KeynoteContentHandler
operator|.
name|PRESENTATION_WIDTH
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"768"
argument_list|,
name|metadata
operator|.
name|get
argument_list|(
name|KeynoteContentHandler
operator|.
name|PRESENTATION_HEIGHT
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Tika user"
argument_list|,
name|metadata
operator|.
name|get
argument_list|(
name|TikaCoreProperties
operator|.
name|CREATOR
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Apache tika"
argument_list|,
name|metadata
operator|.
name|get
argument_list|(
name|TikaCoreProperties
operator|.
name|TITLE
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|content
init|=
name|handler
operator|.
name|toString
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|content
operator|.
name|contains
argument_list|(
literal|"A sample presentation"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|content
operator|.
name|contains
argument_list|(
literal|"For the Apache Tika project"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|content
operator|.
name|contains
argument_list|(
literal|"Slide 1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|content
operator|.
name|contains
argument_list|(
literal|"Some random text for the sake of testability."
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|content
operator|.
name|contains
argument_list|(
literal|"A nice comment"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|content
operator|.
name|contains
argument_list|(
literal|"A nice note"
argument_list|)
argument_list|)
expr_stmt|;
comment|// test table data
name|assertTrue
argument_list|(
name|content
operator|.
name|contains
argument_list|(
literal|"Cell one"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|content
operator|.
name|contains
argument_list|(
literal|"Cell two"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|content
operator|.
name|contains
argument_list|(
literal|"Cell three"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|content
operator|.
name|contains
argument_list|(
literal|"Cell four"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|content
operator|.
name|contains
argument_list|(
literal|"Cell 5"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|content
operator|.
name|contains
argument_list|(
literal|"Cell six"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|content
operator|.
name|contains
argument_list|(
literal|"7"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|content
operator|.
name|contains
argument_list|(
literal|"Cell eight"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|content
operator|.
name|contains
argument_list|(
literal|"5/5/1985"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// TIKA-910
specifier|public
name|void
name|testKeynoteTextBoxes
parameter_list|()
throws|throws
name|Exception
block|{
name|InputStream
name|input
init|=
name|IWorkParserTest
operator|.
name|class
operator|.
name|getResourceAsStream
argument_list|(
literal|"/test-documents/testTextBoxes.key"
argument_list|)
decl_stmt|;
name|Metadata
name|metadata
init|=
operator|new
name|Metadata
argument_list|()
decl_stmt|;
name|ContentHandler
name|handler
init|=
operator|new
name|BodyContentHandler
argument_list|()
decl_stmt|;
name|iWorkParser
operator|.
name|parse
argument_list|(
name|input
argument_list|,
name|handler
argument_list|,
name|metadata
argument_list|,
name|parseContext
argument_list|)
expr_stmt|;
name|String
name|content
init|=
name|handler
operator|.
name|toString
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|content
operator|.
name|replaceAll
argument_list|(
literal|"\\s+"
argument_list|,
literal|" "
argument_list|)
operator|.
name|contains
argument_list|(
literal|"text1 text2 text3"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// TIKA-910
specifier|public
name|void
name|testKeynoteBulletPoints
parameter_list|()
throws|throws
name|Exception
block|{
name|InputStream
name|input
init|=
name|IWorkParserTest
operator|.
name|class
operator|.
name|getResourceAsStream
argument_list|(
literal|"/test-documents/testBulletPoints.key"
argument_list|)
decl_stmt|;
name|Metadata
name|metadata
init|=
operator|new
name|Metadata
argument_list|()
decl_stmt|;
name|ContentHandler
name|handler
init|=
operator|new
name|BodyContentHandler
argument_list|()
decl_stmt|;
name|iWorkParser
operator|.
name|parse
argument_list|(
name|input
argument_list|,
name|handler
argument_list|,
name|metadata
argument_list|,
name|parseContext
argument_list|)
expr_stmt|;
name|String
name|content
init|=
name|handler
operator|.
name|toString
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|content
operator|.
name|replaceAll
argument_list|(
literal|"\\s+"
argument_list|,
literal|" "
argument_list|)
operator|.
name|contains
argument_list|(
literal|"bullet point 1 bullet point 2 bullet point 3"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// TIKA-923
specifier|public
name|void
name|testKeynoteTables
parameter_list|()
throws|throws
name|Exception
block|{
name|InputStream
name|input
init|=
name|IWorkParserTest
operator|.
name|class
operator|.
name|getResourceAsStream
argument_list|(
literal|"/test-documents/testTables.key"
argument_list|)
decl_stmt|;
name|Metadata
name|metadata
init|=
operator|new
name|Metadata
argument_list|()
decl_stmt|;
name|ContentHandler
name|handler
init|=
operator|new
name|BodyContentHandler
argument_list|()
decl_stmt|;
name|iWorkParser
operator|.
name|parse
argument_list|(
name|input
argument_list|,
name|handler
argument_list|,
name|metadata
argument_list|,
name|parseContext
argument_list|)
expr_stmt|;
name|String
name|content
init|=
name|handler
operator|.
name|toString
argument_list|()
decl_stmt|;
name|content
operator|=
name|content
operator|.
name|replaceAll
argument_list|(
literal|"\\s+"
argument_list|,
literal|" "
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|content
operator|.
name|contains
argument_list|(
literal|"row 1 row 2 row 3"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// TIKA-923
specifier|public
name|void
name|testKeynoteMasterSlideTable
parameter_list|()
throws|throws
name|Exception
block|{
name|InputStream
name|input
init|=
name|IWorkParserTest
operator|.
name|class
operator|.
name|getResourceAsStream
argument_list|(
literal|"/test-documents/testMasterSlideTable.key"
argument_list|)
decl_stmt|;
name|Metadata
name|metadata
init|=
operator|new
name|Metadata
argument_list|()
decl_stmt|;
name|ContentHandler
name|handler
init|=
operator|new
name|BodyContentHandler
argument_list|()
decl_stmt|;
name|iWorkParser
operator|.
name|parse
argument_list|(
name|input
argument_list|,
name|handler
argument_list|,
name|metadata
argument_list|,
name|parseContext
argument_list|)
expr_stmt|;
name|String
name|content
init|=
name|handler
operator|.
name|toString
argument_list|()
decl_stmt|;
name|content
operator|=
name|content
operator|.
name|replaceAll
argument_list|(
literal|"\\s+"
argument_list|,
literal|" "
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|content
operator|.
name|contains
argument_list|(
literal|"master row 1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|content
operator|.
name|contains
argument_list|(
literal|"master row 2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|content
operator|.
name|contains
argument_list|(
literal|"master row 3"
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testParsePages
parameter_list|()
throws|throws
name|Exception
block|{
name|InputStream
name|input
init|=
name|IWorkParserTest
operator|.
name|class
operator|.
name|getResourceAsStream
argument_list|(
literal|"/test-documents/testPages.pages"
argument_list|)
decl_stmt|;
name|Metadata
name|metadata
init|=
operator|new
name|Metadata
argument_list|()
decl_stmt|;
name|ContentHandler
name|handler
init|=
operator|new
name|BodyContentHandler
argument_list|()
decl_stmt|;
name|iWorkParser
operator|.
name|parse
argument_list|(
name|input
argument_list|,
name|handler
argument_list|,
name|metadata
argument_list|,
name|parseContext
argument_list|)
expr_stmt|;
comment|// Make sure enough keys came through
comment|// (Exact numbers will vary based on composites)
name|assertTrue
argument_list|(
literal|"Insufficient metadata found "
operator|+
name|metadata
operator|.
name|size
argument_list|()
argument_list|,
name|metadata
operator|.
name|size
argument_list|()
operator|>=
literal|50
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|metadataKeys
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|metadata
operator|.
name|names
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Metadata not found in "
operator|+
name|metadataKeys
argument_list|,
name|metadataKeys
operator|.
name|contains
argument_list|(
name|Metadata
operator|.
name|CONTENT_TYPE
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Metadata not found in "
operator|+
name|metadataKeys
argument_list|,
name|metadataKeys
operator|.
name|contains
argument_list|(
name|Metadata
operator|.
name|PAGE_COUNT
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Metadata not found in "
operator|+
name|metadataKeys
argument_list|,
name|metadataKeys
operator|.
name|contains
argument_list|(
name|TikaCoreProperties
operator|.
name|CREATOR
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Metadata not found in "
operator|+
name|metadataKeys
argument_list|,
name|metadataKeys
operator|.
name|contains
argument_list|(
name|TikaCoreProperties
operator|.
name|TITLE
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Metadata not found in "
operator|+
name|metadataKeys
argument_list|,
name|metadataKeys
operator|.
name|contains
argument_list|(
name|Metadata
operator|.
name|LAST_MODIFIED
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Metadata not found in "
operator|+
name|metadataKeys
argument_list|,
name|metadataKeys
operator|.
name|contains
argument_list|(
name|Metadata
operator|.
name|LANGUAGE
argument_list|)
argument_list|)
expr_stmt|;
comment|// Check the metadata values
name|assertEquals
argument_list|(
literal|"application/vnd.apple.pages"
argument_list|,
name|metadata
operator|.
name|get
argument_list|(
name|Metadata
operator|.
name|CONTENT_TYPE
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Tika user"
argument_list|,
name|metadata
operator|.
name|get
argument_list|(
name|TikaCoreProperties
operator|.
name|CREATOR
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Apache tika"
argument_list|,
name|metadata
operator|.
name|get
argument_list|(
name|TikaCoreProperties
operator|.
name|TITLE
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"2010-05-09T21:34:38+0200"
argument_list|,
name|metadata
operator|.
name|get
argument_list|(
name|Metadata
operator|.
name|CREATION_DATE
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"2010-05-09T23:50:36+0200"
argument_list|,
name|metadata
operator|.
name|get
argument_list|(
name|Metadata
operator|.
name|LAST_MODIFIED
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"en"
argument_list|,
name|metadata
operator|.
name|get
argument_list|(
name|TikaCoreProperties
operator|.
name|LANGUAGE
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"2"
argument_list|,
name|metadata
operator|.
name|get
argument_list|(
name|Metadata
operator|.
name|PAGE_COUNT
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|content
init|=
name|handler
operator|.
name|toString
argument_list|()
decl_stmt|;
comment|// text on page 1
name|assertTrue
argument_list|(
name|content
operator|.
name|contains
argument_list|(
literal|"Sample pages document"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|content
operator|.
name|contains
argument_list|(
literal|"Some plain text to parse."
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|content
operator|.
name|contains
argument_list|(
literal|"Cell one"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|content
operator|.
name|contains
argument_list|(
literal|"Cell two"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|content
operator|.
name|contains
argument_list|(
literal|"Cell three"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|content
operator|.
name|contains
argument_list|(
literal|"Cell four"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|content
operator|.
name|contains
argument_list|(
literal|"Cell five"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|content
operator|.
name|contains
argument_list|(
literal|"Cell six"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|content
operator|.
name|contains
argument_list|(
literal|"Cell seven"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|content
operator|.
name|contains
argument_list|(
literal|"Cell eight"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|content
operator|.
name|contains
argument_list|(
literal|"Cell nine"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|content
operator|.
name|contains
argument_list|(
literal|"Both Pages 1.x and Keynote 2.x"
argument_list|)
argument_list|)
expr_stmt|;
comment|// ...
comment|// text on page 2
name|assertTrue
argument_list|(
name|content
operator|.
name|contains
argument_list|(
literal|"A second page...."
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|content
operator|.
name|contains
argument_list|(
literal|"Extensible Markup Language"
argument_list|)
argument_list|)
expr_stmt|;
comment|// ...
block|}
comment|// TIKA-904
specifier|public
name|void
name|testPagesLayoutMode
parameter_list|()
throws|throws
name|Exception
block|{
name|InputStream
name|input
init|=
name|IWorkParserTest
operator|.
name|class
operator|.
name|getResourceAsStream
argument_list|(
literal|"/test-documents/testPagesLayout.pages"
argument_list|)
decl_stmt|;
name|Metadata
name|metadata
init|=
operator|new
name|Metadata
argument_list|()
decl_stmt|;
name|ContentHandler
name|handler
init|=
operator|new
name|BodyContentHandler
argument_list|()
decl_stmt|;
name|iWorkParser
operator|.
name|parse
argument_list|(
name|input
argument_list|,
name|handler
argument_list|,
name|metadata
argument_list|,
name|parseContext
argument_list|)
expr_stmt|;
name|String
name|content
init|=
name|handler
operator|.
name|toString
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|content
operator|.
name|contains
argument_list|(
literal|"text box 1 - here is some text"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|content
operator|.
name|contains
argument_list|(
literal|"created in a text box in layout mode"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|content
operator|.
name|contains
argument_list|(
literal|"text box 2 - more text!@!$@#"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|content
operator|.
name|contains
argument_list|(
literal|"this is text inside of a green box"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|content
operator|.
name|contains
argument_list|(
literal|"text inside of a green circle"
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testParseNumbers
parameter_list|()
throws|throws
name|Exception
block|{
name|InputStream
name|input
init|=
name|IWorkParserTest
operator|.
name|class
operator|.
name|getResourceAsStream
argument_list|(
literal|"/test-documents/testNumbers.numbers"
argument_list|)
decl_stmt|;
name|Metadata
name|metadata
init|=
operator|new
name|Metadata
argument_list|()
decl_stmt|;
name|ContentHandler
name|handler
init|=
operator|new
name|BodyContentHandler
argument_list|()
decl_stmt|;
name|iWorkParser
operator|.
name|parse
argument_list|(
name|input
argument_list|,
name|handler
argument_list|,
name|metadata
argument_list|,
name|parseContext
argument_list|)
expr_stmt|;
comment|// Make sure enough keys came through
comment|// (Exact numbers will vary based on composites)
name|assertTrue
argument_list|(
literal|"Insufficient metadata found "
operator|+
name|metadata
operator|.
name|size
argument_list|()
argument_list|,
name|metadata
operator|.
name|size
argument_list|()
operator|>=
literal|8
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|metadataKeys
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|metadata
operator|.
name|names
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Metadata not found in "
operator|+
name|metadataKeys
argument_list|,
name|metadataKeys
operator|.
name|contains
argument_list|(
name|Metadata
operator|.
name|CONTENT_TYPE
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Metadata not found in "
operator|+
name|metadataKeys
argument_list|,
name|metadataKeys
operator|.
name|contains
argument_list|(
name|Metadata
operator|.
name|PAGE_COUNT
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Metadata not found in "
operator|+
name|metadataKeys
argument_list|,
name|metadataKeys
operator|.
name|contains
argument_list|(
name|TikaCoreProperties
operator|.
name|CREATOR
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Metadata not found in "
operator|+
name|metadataKeys
argument_list|,
name|metadataKeys
operator|.
name|contains
argument_list|(
name|TikaCoreProperties
operator|.
name|COMMENTS
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Metadata not found in "
operator|+
name|metadataKeys
argument_list|,
name|metadataKeys
operator|.
name|contains
argument_list|(
name|Metadata
operator|.
name|TITLE
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Metadata not found in "
operator|+
name|metadataKeys
argument_list|,
name|metadataKeys
operator|.
name|contains
argument_list|(
name|TikaCoreProperties
operator|.
name|TITLE
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// Check the metadata values
name|assertEquals
argument_list|(
literal|"2"
argument_list|,
name|metadata
operator|.
name|get
argument_list|(
name|Metadata
operator|.
name|PAGE_COUNT
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Tika User"
argument_list|,
name|metadata
operator|.
name|get
argument_list|(
name|TikaCoreProperties
operator|.
name|CREATOR
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Account checking"
argument_list|,
name|metadata
operator|.
name|get
argument_list|(
name|TikaCoreProperties
operator|.
name|TITLE
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"a comment"
argument_list|,
name|metadata
operator|.
name|get
argument_list|(
name|TikaCoreProperties
operator|.
name|COMMENTS
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|content
init|=
name|handler
operator|.
name|toString
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|content
operator|.
name|contains
argument_list|(
literal|"Category"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|content
operator|.
name|contains
argument_list|(
literal|"Home"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|content
operator|.
name|contains
argument_list|(
literal|"-226"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|content
operator|.
name|contains
argument_list|(
literal|"-137.5"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|content
operator|.
name|contains
argument_list|(
literal|"Checking Account: 300545668"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|content
operator|.
name|contains
argument_list|(
literal|"4650"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|content
operator|.
name|contains
argument_list|(
literal|"Credit Card"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|content
operator|.
name|contains
argument_list|(
literal|"Groceries"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|content
operator|.
name|contains
argument_list|(
literal|"-210"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|content
operator|.
name|contains
argument_list|(
literal|"Food"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|content
operator|.
name|contains
argument_list|(
literal|"Try adding your own account transactions to this table."
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// TIKA- 924
specifier|public
name|void
name|testParseNumbersTableNames
parameter_list|()
throws|throws
name|Exception
block|{
name|InputStream
name|input
init|=
name|IWorkParserTest
operator|.
name|class
operator|.
name|getResourceAsStream
argument_list|(
literal|"/test-documents/tableNames.numbers"
argument_list|)
decl_stmt|;
name|Metadata
name|metadata
init|=
operator|new
name|Metadata
argument_list|()
decl_stmt|;
name|ContentHandler
name|handler
init|=
operator|new
name|BodyContentHandler
argument_list|()
decl_stmt|;
name|iWorkParser
operator|.
name|parse
argument_list|(
name|input
argument_list|,
name|handler
argument_list|,
name|metadata
argument_list|,
name|parseContext
argument_list|)
expr_stmt|;
name|String
name|content
init|=
name|handler
operator|.
name|toString
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|content
operator|.
name|contains
argument_list|(
literal|"This is the main table"
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testParseNumbersTableHeaders
parameter_list|()
throws|throws
name|Exception
block|{
name|InputStream
name|input
init|=
name|IWorkParserTest
operator|.
name|class
operator|.
name|getResourceAsStream
argument_list|(
literal|"/test-documents/tableHeaders.numbers"
argument_list|)
decl_stmt|;
name|Metadata
name|metadata
init|=
operator|new
name|Metadata
argument_list|()
decl_stmt|;
name|ContentHandler
name|handler
init|=
operator|new
name|BodyContentHandler
argument_list|()
decl_stmt|;
name|iWorkParser
operator|.
name|parse
argument_list|(
name|input
argument_list|,
name|handler
argument_list|,
name|metadata
argument_list|,
name|parseContext
argument_list|)
expr_stmt|;
name|String
name|content
init|=
name|handler
operator|.
name|toString
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|header
init|=
literal|1
init|;
name|header
operator|<=
literal|5
condition|;
name|header
operator|++
control|)
block|{
name|assertTrue
argument_list|(
name|content
operator|.
name|contains
argument_list|(
literal|"header"
operator|+
name|header
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|row
init|=
literal|1
init|;
name|row
operator|<=
literal|3
condition|;
name|row
operator|++
control|)
block|{
name|assertTrue
argument_list|(
name|content
operator|.
name|contains
argument_list|(
literal|"row"
operator|+
name|row
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * We don't currently support password protected Pages files, as      *  we don't know how the encryption works (it's not regular Zip      *  Encryption). See TIKA-903 for details      */
specifier|public
name|void
name|testParsePagesPasswordProtected
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Document password is "tika", but we can't use that yet...
name|InputStream
name|input
init|=
name|IWorkParserTest
operator|.
name|class
operator|.
name|getResourceAsStream
argument_list|(
literal|"/test-documents/testPagesPwdProtected.pages"
argument_list|)
decl_stmt|;
name|Metadata
name|metadata
init|=
operator|new
name|Metadata
argument_list|()
decl_stmt|;
name|ContentHandler
name|handler
init|=
operator|new
name|BodyContentHandler
argument_list|()
decl_stmt|;
name|iWorkParser
operator|.
name|parse
argument_list|(
name|input
argument_list|,
name|handler
argument_list|,
name|metadata
argument_list|,
name|parseContext
argument_list|)
expr_stmt|;
comment|// Content will be empty
name|String
name|content
init|=
name|handler
operator|.
name|toString
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|content
argument_list|)
expr_stmt|;
comment|// Will have been identified as encrypted
name|assertEquals
argument_list|(
literal|"application/x-tika-iworks-protected"
argument_list|,
name|metadata
operator|.
name|get
argument_list|(
name|Metadata
operator|.
name|CONTENT_TYPE
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Check we get headers, footers and footnotes from Pages      */
specifier|public
name|void
name|testParsePagesHeadersFootersFootnotes
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|footnote
init|=
literal|"Footnote: Do a lot of people really use iWork?!?!"
decl_stmt|;
name|String
name|header
init|=
literal|"THIS IS SOME HEADER TEXT"
decl_stmt|;
name|String
name|footer
init|=
literal|"THIS IS SOME FOOTER TEXT\t1"
decl_stmt|;
name|String
name|footer2
init|=
literal|"THIS IS SOME FOOTER TEXT\t2"
decl_stmt|;
name|InputStream
name|input
init|=
name|IWorkParserTest
operator|.
name|class
operator|.
name|getResourceAsStream
argument_list|(
literal|"/test-documents/testPagesHeadersFootersFootnotes.pages"
argument_list|)
decl_stmt|;
name|Metadata
name|metadata
init|=
operator|new
name|Metadata
argument_list|()
decl_stmt|;
name|ContentHandler
name|handler
init|=
operator|new
name|BodyContentHandler
argument_list|()
decl_stmt|;
name|iWorkParser
operator|.
name|parse
argument_list|(
name|input
argument_list|,
name|handler
argument_list|,
name|metadata
argument_list|,
name|parseContext
argument_list|)
expr_stmt|;
name|String
name|contents
init|=
name|handler
operator|.
name|toString
argument_list|()
decl_stmt|;
comment|// Check regular text
name|assertContains
argument_list|(
name|contents
argument_list|,
literal|"Both Pages 1.x"
argument_list|)
expr_stmt|;
comment|// P1
name|assertContains
argument_list|(
name|contents
argument_list|,
literal|"understanding the Pages document"
argument_list|)
expr_stmt|;
comment|// P1
name|assertContains
argument_list|(
name|contents
argument_list|,
literal|"should be page 2"
argument_list|)
expr_stmt|;
comment|// P2
comment|// Check for headers, footers and footnotes
name|assertContains
argument_list|(
name|contents
argument_list|,
name|header
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
name|contents
argument_list|,
name|footer
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
name|contents
argument_list|,
name|footer2
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
name|contents
argument_list|,
name|footnote
argument_list|)
expr_stmt|;
block|}
comment|/**      * Check we get upper-case Roman numerals within the footer for AutoPageNumber.      */
specifier|public
name|void
name|testParsePagesHeadersFootersRomanUpper
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|header
init|=
literal|"THIS IS SOME HEADER TEXT"
decl_stmt|;
name|String
name|footer
init|=
literal|"THIS IS SOME FOOTER TEXT\tI"
decl_stmt|;
name|String
name|footer2
init|=
literal|"THIS IS SOME FOOTER TEXT\tII"
decl_stmt|;
name|InputStream
name|input
init|=
name|IWorkParserTest
operator|.
name|class
operator|.
name|getResourceAsStream
argument_list|(
literal|"/test-documents/testPagesHeadersFootersRomanUpper.pages"
argument_list|)
decl_stmt|;
name|ContentHandler
name|handler
init|=
operator|new
name|BodyContentHandler
argument_list|()
decl_stmt|;
name|iWorkParser
operator|.
name|parse
argument_list|(
name|input
argument_list|,
name|handler
argument_list|,
operator|new
name|Metadata
argument_list|()
argument_list|,
name|parseContext
argument_list|)
expr_stmt|;
name|String
name|contents
init|=
name|handler
operator|.
name|toString
argument_list|()
decl_stmt|;
comment|// Check for headers, footers and footnotes
name|assertContains
argument_list|(
name|contents
argument_list|,
name|header
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
name|contents
argument_list|,
name|footer
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
name|contents
argument_list|,
name|footer2
argument_list|)
expr_stmt|;
block|}
comment|/**      * Check we get lower-case Roman numerals within the footer for AutoPageNumber.      */
specifier|public
name|void
name|testParsePagesHeadersFootersRomanLower
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|header
init|=
literal|"THIS IS SOME HEADER TEXT"
decl_stmt|;
name|String
name|footer
init|=
literal|"THIS IS SOME FOOTER TEXT\ti"
decl_stmt|;
name|String
name|footer2
init|=
literal|"THIS IS SOME FOOTER TEXT\tii"
decl_stmt|;
name|InputStream
name|input
init|=
name|IWorkParserTest
operator|.
name|class
operator|.
name|getResourceAsStream
argument_list|(
literal|"/test-documents/testPagesHeadersFootersRomanLower.pages"
argument_list|)
decl_stmt|;
name|ContentHandler
name|handler
init|=
operator|new
name|BodyContentHandler
argument_list|()
decl_stmt|;
name|iWorkParser
operator|.
name|parse
argument_list|(
name|input
argument_list|,
name|handler
argument_list|,
operator|new
name|Metadata
argument_list|()
argument_list|,
name|parseContext
argument_list|)
expr_stmt|;
name|String
name|contents
init|=
name|handler
operator|.
name|toString
argument_list|()
decl_stmt|;
comment|// Check for headers, footers and footnotes
name|assertContains
argument_list|(
name|contents
argument_list|,
name|header
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
name|contents
argument_list|,
name|footer
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
name|contents
argument_list|,
name|footer2
argument_list|)
expr_stmt|;
block|}
comment|/**      * Check we get upper-case alpha-numeric letters within the footer for AutoPageNumber.      */
specifier|public
name|void
name|testParsePagesHeadersAlphaUpper
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|header
init|=
literal|"THIS IS SOME HEADER TEXT\tA"
decl_stmt|;
name|String
name|footer
init|=
literal|"THIS IS SOME FOOTER TEXT\tA"
decl_stmt|;
name|String
name|footer2
init|=
literal|"THIS IS SOME FOOTER TEXT\tB"
decl_stmt|;
name|InputStream
name|input
init|=
name|IWorkParserTest
operator|.
name|class
operator|.
name|getResourceAsStream
argument_list|(
literal|"/test-documents/testPagesHeadersFootersAlphaUpper.pages"
argument_list|)
decl_stmt|;
name|ContentHandler
name|handler
init|=
operator|new
name|BodyContentHandler
argument_list|()
decl_stmt|;
name|iWorkParser
operator|.
name|parse
argument_list|(
name|input
argument_list|,
name|handler
argument_list|,
operator|new
name|Metadata
argument_list|()
argument_list|,
name|parseContext
argument_list|)
expr_stmt|;
name|String
name|contents
init|=
name|handler
operator|.
name|toString
argument_list|()
decl_stmt|;
comment|// Check for headers, footers and footnotes
name|assertContains
argument_list|(
name|contents
argument_list|,
name|header
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
name|contents
argument_list|,
name|footer
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
name|contents
argument_list|,
name|footer2
argument_list|)
expr_stmt|;
block|}
comment|/**      * Check we get lower-case alpha-numeric letters within the footer for AutoPageNumber.      */
specifier|public
name|void
name|testParsePagesHeadersAlphaLower
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|header
init|=
literal|"THIS IS SOME HEADER TEXT"
decl_stmt|;
name|String
name|footer
init|=
literal|"THIS IS SOME FOOTER TEXT\ta"
decl_stmt|;
name|String
name|footer2
init|=
literal|"THIS IS SOME FOOTER TEXT\tb"
decl_stmt|;
name|InputStream
name|input
init|=
name|IWorkParserTest
operator|.
name|class
operator|.
name|getResourceAsStream
argument_list|(
literal|"/test-documents/testPagesHeadersFootersAlphaLower.pages"
argument_list|)
decl_stmt|;
name|ContentHandler
name|handler
init|=
operator|new
name|BodyContentHandler
argument_list|()
decl_stmt|;
name|iWorkParser
operator|.
name|parse
argument_list|(
name|input
argument_list|,
name|handler
argument_list|,
operator|new
name|Metadata
argument_list|()
argument_list|,
name|parseContext
argument_list|)
expr_stmt|;
name|String
name|contents
init|=
name|handler
operator|.
name|toString
argument_list|()
decl_stmt|;
comment|// Check for headers, footers and footnotes
name|assertContains
argument_list|(
name|contents
argument_list|,
name|header
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
name|contents
argument_list|,
name|footer
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
name|contents
argument_list|,
name|footer2
argument_list|)
expr_stmt|;
block|}
comment|/**      * Check we get annotations (eg comments) from Pages      */
specifier|public
name|void
name|testParsePagesAnnotations
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|commentA
init|=
literal|"comment about the APXL file"
decl_stmt|;
name|String
name|commentB
init|=
literal|"comment about UIMA"
decl_stmt|;
name|InputStream
name|input
init|=
name|IWorkParserTest
operator|.
name|class
operator|.
name|getResourceAsStream
argument_list|(
literal|"/test-documents/testPagesComments.pages"
argument_list|)
decl_stmt|;
name|Metadata
name|metadata
init|=
operator|new
name|Metadata
argument_list|()
decl_stmt|;
name|ContentHandler
name|handler
init|=
operator|new
name|BodyContentHandler
argument_list|()
decl_stmt|;
name|iWorkParser
operator|.
name|parse
argument_list|(
name|input
argument_list|,
name|handler
argument_list|,
name|metadata
argument_list|,
name|parseContext
argument_list|)
expr_stmt|;
name|String
name|contents
init|=
name|handler
operator|.
name|toString
argument_list|()
decl_stmt|;
comment|// Check regular text
name|assertContains
argument_list|(
name|contents
argument_list|,
literal|"Both Pages 1.x"
argument_list|)
expr_stmt|;
comment|// P1
name|assertContains
argument_list|(
name|contents
argument_list|,
literal|"understanding the Pages document"
argument_list|)
expr_stmt|;
comment|// P1
name|assertContains
argument_list|(
name|contents
argument_list|,
literal|"should be page 2"
argument_list|)
expr_stmt|;
comment|// P2
comment|// Check for comments
name|assertContains
argument_list|(
name|contents
argument_list|,
name|commentA
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
name|contents
argument_list|,
name|commentB
argument_list|)
expr_stmt|;
block|}
comment|// TIKA-918
specifier|public
name|void
name|testNumbersExtractChartNames
parameter_list|()
throws|throws
name|Exception
block|{
name|InputStream
name|input
init|=
name|IWorkParserTest
operator|.
name|class
operator|.
name|getResourceAsStream
argument_list|(
literal|"/test-documents/testNumbersCharts.numbers"
argument_list|)
decl_stmt|;
name|Metadata
name|metadata
init|=
operator|new
name|Metadata
argument_list|()
decl_stmt|;
name|ContentHandler
name|handler
init|=
operator|new
name|BodyContentHandler
argument_list|()
decl_stmt|;
name|iWorkParser
operator|.
name|parse
argument_list|(
name|input
argument_list|,
name|handler
argument_list|,
name|metadata
argument_list|,
name|parseContext
argument_list|)
expr_stmt|;
name|String
name|contents
init|=
name|handler
operator|.
name|toString
argument_list|()
decl_stmt|;
name|assertContains
argument_list|(
name|contents
argument_list|,
literal|"Expenditure by Category"
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
name|contents
argument_list|,
literal|"Currency Chart name"
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
name|contents
argument_list|,
literal|"Chart 2"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|assertContains
parameter_list|(
name|String
name|haystack
parameter_list|,
name|String
name|needle
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|needle
operator|+
literal|" not found in:\n"
operator|+
name|haystack
argument_list|,
name|haystack
operator|.
name|contains
argument_list|(
name|needle
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

