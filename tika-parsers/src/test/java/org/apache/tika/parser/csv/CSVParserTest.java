begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|csv
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|ByteOrderMark
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|TikaTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|metadata
operator|.
name|Metadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|metadata
operator|.
name|TikaCoreProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|AutoDetectParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|Parser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|CSVParserTest
extends|extends
name|TikaTest
block|{
specifier|private
specifier|static
name|byte
index|[]
name|CSV_UTF8
init|=
operator|(
literal|"the,quick,brown\tfox\n"
operator|+
literal|"jumped \tover,the\tlazy,\tdog\n"
operator|+
literal|"and then,ran,down\tthe\tstreet"
operator|)
operator|.
name|getBytes
argument_list|(
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|byte
index|[]
name|CSV_UTF_16LE
init|=
operator|(
literal|"the,quick,brown\tfox\n"
operator|+
literal|"jumped \tover,the\tlazy,\tdog\n"
operator|+
literal|"and then,ran,down\tthe\tstreet"
operator|)
operator|.
name|getBytes
argument_list|(
name|StandardCharsets
operator|.
name|UTF_16LE
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|byte
index|[]
name|TSV_UTF8
init|=
operator|(
literal|"the\tquick\tbrown,fox\n"
operator|+
literal|"jumped ,over\tthe,lazy\t,dog\n"
operator|+
literal|"and then\tran\tdown,the,street"
operator|)
operator|.
name|getBytes
argument_list|(
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|byte
index|[]
name|TSV_UTF_16LE
init|=
operator|(
literal|"the\tquick\tbrown,fox\n"
operator|+
literal|"jumped ,over\tthe,lazy\t,dog\n"
operator|+
literal|"and then\tran\tdown,the,street"
operator|)
operator|.
name|getBytes
argument_list|(
name|StandardCharsets
operator|.
name|UTF_16LE
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|String
name|EXPECTED_TSV
init|=
operator|(
literal|"<table><tr><td>the</td><td>quick</td><td>brown,fox</td></tr>\n"
operator|+
literal|"<tr><td>jumped ,over</td><td>the,lazy</td><td>,dog</td></tr>\n"
operator|+
literal|"<tr><td>and then</td><td>ran</td><td>down,the,street</td></tr>\n"
operator|+
literal|"</table>"
operator|)
operator|.
name|replaceAll
argument_list|(
literal|"[\r\n\t ]+"
argument_list|,
literal|" "
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|String
name|EXPECTED_CSV
init|=
name|EXPECTED_TSV
operator|.
name|replaceAll
argument_list|(
literal|",+"
argument_list|,
literal|" "
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|Parser
name|PARSER
init|=
operator|new
name|AutoDetectParser
argument_list|()
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|testCSV_UTF8
parameter_list|()
throws|throws
name|Exception
block|{
name|Metadata
name|metadata
init|=
operator|new
name|Metadata
argument_list|()
decl_stmt|;
name|metadata
operator|.
name|set
argument_list|(
name|TikaCoreProperties
operator|.
name|RESOURCE_NAME_KEY
argument_list|,
literal|"test.csv"
argument_list|)
expr_stmt|;
name|XMLResult
name|xmlResult
init|=
name|getXML
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|CSV_UTF8
argument_list|)
argument_list|,
name|PARSER
argument_list|,
name|metadata
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"comma"
argument_list|,
name|xmlResult
operator|.
name|metadata
operator|.
name|get
argument_list|(
name|CSVParser
operator|.
name|DELIMITER
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"text/csv; charset=ISO-8859-1"
argument_list|,
name|xmlResult
operator|.
name|metadata
operator|.
name|get
argument_list|(
name|Metadata
operator|.
name|CONTENT_TYPE
argument_list|)
argument_list|)
expr_stmt|;
name|assertContainsIgnoreWhiteSpaceDiffs
argument_list|(
name|EXPECTED_CSV
argument_list|,
name|xmlResult
operator|.
name|xml
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCSV_UTF8_TypeOverride
parameter_list|()
throws|throws
name|Exception
block|{
name|Metadata
name|metadata
init|=
operator|new
name|Metadata
argument_list|()
decl_stmt|;
name|metadata
operator|.
name|set
argument_list|(
name|TikaCoreProperties
operator|.
name|CONTENT_TYPE_OVERRIDE
argument_list|,
literal|"text/csv; charset=UTF-8"
argument_list|)
expr_stmt|;
name|XMLResult
name|xmlResult
init|=
name|getXML
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|CSV_UTF8
argument_list|)
argument_list|,
name|PARSER
argument_list|,
name|metadata
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"comma"
argument_list|,
name|xmlResult
operator|.
name|metadata
operator|.
name|get
argument_list|(
name|CSVParser
operator|.
name|DELIMITER
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"text/csv; charset=UTF-8"
argument_list|,
name|xmlResult
operator|.
name|metadata
operator|.
name|get
argument_list|(
name|Metadata
operator|.
name|CONTENT_TYPE
argument_list|)
argument_list|)
expr_stmt|;
name|assertContainsIgnoreWhiteSpaceDiffs
argument_list|(
name|EXPECTED_CSV
argument_list|,
name|xmlResult
operator|.
name|xml
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCSV_UTF8_Type
parameter_list|()
throws|throws
name|Exception
block|{
name|Metadata
name|metadata
init|=
operator|new
name|Metadata
argument_list|()
decl_stmt|;
name|metadata
operator|.
name|set
argument_list|(
name|Metadata
operator|.
name|CONTENT_TYPE
argument_list|,
literal|"text/csv"
argument_list|)
expr_stmt|;
name|XMLResult
name|xmlResult
init|=
name|getXML
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|CSV_UTF8
argument_list|)
argument_list|,
name|PARSER
argument_list|,
name|metadata
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"comma"
argument_list|,
name|xmlResult
operator|.
name|metadata
operator|.
name|get
argument_list|(
name|CSVParser
operator|.
name|DELIMITER
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"text/csv; charset=ISO-8859-1"
argument_list|,
name|xmlResult
operator|.
name|metadata
operator|.
name|get
argument_list|(
name|Metadata
operator|.
name|CONTENT_TYPE
argument_list|)
argument_list|)
expr_stmt|;
name|assertContainsIgnoreWhiteSpaceDiffs
argument_list|(
name|EXPECTED_CSV
argument_list|,
name|xmlResult
operator|.
name|xml
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCSV_UTF16LE
parameter_list|()
throws|throws
name|Exception
block|{
name|Metadata
name|metadata
init|=
operator|new
name|Metadata
argument_list|()
decl_stmt|;
name|metadata
operator|.
name|set
argument_list|(
name|TikaCoreProperties
operator|.
name|RESOURCE_NAME_KEY
argument_list|,
literal|"test.csv"
argument_list|)
expr_stmt|;
name|XMLResult
name|xmlResult
init|=
name|getXML
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|CSV_UTF_16LE
argument_list|)
argument_list|,
name|PARSER
argument_list|,
name|metadata
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"comma"
argument_list|,
name|xmlResult
operator|.
name|metadata
operator|.
name|get
argument_list|(
name|CSVParser
operator|.
name|DELIMITER
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"text/csv; charset=UTF-16LE"
argument_list|,
name|xmlResult
operator|.
name|metadata
operator|.
name|get
argument_list|(
name|Metadata
operator|.
name|CONTENT_TYPE
argument_list|)
argument_list|)
expr_stmt|;
name|assertContainsIgnoreWhiteSpaceDiffs
argument_list|(
name|EXPECTED_CSV
argument_list|,
name|xmlResult
operator|.
name|xml
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCSV_UTF16LE_BOM
parameter_list|()
throws|throws
name|Exception
block|{
name|Metadata
name|metadata
init|=
operator|new
name|Metadata
argument_list|()
decl_stmt|;
name|metadata
operator|.
name|set
argument_list|(
name|TikaCoreProperties
operator|.
name|RESOURCE_NAME_KEY
argument_list|,
literal|"test.csv"
argument_list|)
expr_stmt|;
name|XMLResult
name|xmlResult
init|=
name|getXML
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|concat
argument_list|(
name|ByteOrderMark
operator|.
name|UTF_16LE
operator|.
name|getBytes
argument_list|()
argument_list|,
name|CSV_UTF_16LE
argument_list|)
argument_list|)
argument_list|,
name|PARSER
argument_list|,
name|metadata
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"comma"
argument_list|,
name|xmlResult
operator|.
name|metadata
operator|.
name|get
argument_list|(
name|CSVParser
operator|.
name|DELIMITER
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"text/csv; charset=UTF-16LE"
argument_list|,
name|xmlResult
operator|.
name|metadata
operator|.
name|get
argument_list|(
name|Metadata
operator|.
name|CONTENT_TYPE
argument_list|)
argument_list|)
expr_stmt|;
name|assertContainsIgnoreWhiteSpaceDiffs
argument_list|(
name|EXPECTED_CSV
argument_list|,
name|xmlResult
operator|.
name|xml
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|byte
index|[]
name|concat
parameter_list|(
name|byte
index|[]
name|bytesA
parameter_list|,
name|byte
index|[]
name|bytesB
parameter_list|)
block|{
name|byte
index|[]
name|ret
init|=
operator|new
name|byte
index|[
name|bytesA
operator|.
name|length
operator|+
name|bytesB
operator|.
name|length
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|bytesA
argument_list|,
literal|0
argument_list|,
name|ret
argument_list|,
literal|0
argument_list|,
name|bytesA
operator|.
name|length
argument_list|)
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|bytesB
argument_list|,
literal|0
argument_list|,
name|ret
argument_list|,
name|bytesA
operator|.
name|length
argument_list|,
name|bytesB
operator|.
name|length
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTSV_UTF8
parameter_list|()
throws|throws
name|Exception
block|{
name|Metadata
name|metadata
init|=
operator|new
name|Metadata
argument_list|()
decl_stmt|;
name|metadata
operator|.
name|set
argument_list|(
name|TikaCoreProperties
operator|.
name|RESOURCE_NAME_KEY
argument_list|,
literal|"test.csv"
argument_list|)
expr_stmt|;
name|XMLResult
name|xmlResult
init|=
name|getXML
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|TSV_UTF8
argument_list|)
argument_list|,
name|PARSER
argument_list|,
name|metadata
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"tab"
argument_list|,
name|xmlResult
operator|.
name|metadata
operator|.
name|get
argument_list|(
name|CSVParser
operator|.
name|DELIMITER
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"text/tsv; charset=ISO-8859-1"
argument_list|,
name|xmlResult
operator|.
name|metadata
operator|.
name|get
argument_list|(
name|Metadata
operator|.
name|CONTENT_TYPE
argument_list|)
argument_list|)
expr_stmt|;
name|assertContainsIgnoreWhiteSpaceDiffs
argument_list|(
name|EXPECTED_TSV
argument_list|,
name|xmlResult
operator|.
name|xml
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTSV_UTF16LE
parameter_list|()
throws|throws
name|Exception
block|{
name|Metadata
name|metadata
init|=
operator|new
name|Metadata
argument_list|()
decl_stmt|;
name|metadata
operator|.
name|set
argument_list|(
name|TikaCoreProperties
operator|.
name|RESOURCE_NAME_KEY
argument_list|,
literal|"test.csv"
argument_list|)
expr_stmt|;
name|XMLResult
name|xmlResult
init|=
name|getXML
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|TSV_UTF_16LE
argument_list|)
argument_list|,
name|PARSER
argument_list|,
name|metadata
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"tab"
argument_list|,
name|xmlResult
operator|.
name|metadata
operator|.
name|get
argument_list|(
name|CSVParser
operator|.
name|DELIMITER
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"text/tsv; charset=UTF-16LE"
argument_list|,
name|xmlResult
operator|.
name|metadata
operator|.
name|get
argument_list|(
name|Metadata
operator|.
name|CONTENT_TYPE
argument_list|)
argument_list|)
expr_stmt|;
name|assertContainsIgnoreWhiteSpaceDiffs
argument_list|(
name|EXPECTED_TSV
argument_list|,
name|xmlResult
operator|.
name|xml
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBadCsv
parameter_list|()
throws|throws
name|Exception
block|{
comment|//this causes an IllegalStateException during delimiter detection
comment|//when trying to parse with ','; therefore, the parser backs off to '\t'.
comment|//this isn't necessarily the best outcome, but we want to make sure
comment|//that an IllegalStateException during delimiter guessing doesn't
comment|//make the parse fail.
name|byte
index|[]
name|csv
init|=
operator|(
literal|"the,quick\n"
operator|+
literal|"brown,\"la\"zy\"\n"
operator|+
literal|"brown,\"dog\n"
operator|)
operator|.
name|getBytes
argument_list|(
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
decl_stmt|;
name|Metadata
name|metadata
init|=
operator|new
name|Metadata
argument_list|()
decl_stmt|;
name|metadata
operator|.
name|set
argument_list|(
name|TikaCoreProperties
operator|.
name|RESOURCE_NAME_KEY
argument_list|,
literal|"test.csv"
argument_list|)
expr_stmt|;
name|XMLResult
name|xmlResult
init|=
name|getXML
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|csv
argument_list|)
argument_list|,
name|PARSER
argument_list|,
name|metadata
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"tab"
argument_list|,
name|xmlResult
operator|.
name|metadata
operator|.
name|get
argument_list|(
name|CSVParser
operator|.
name|DELIMITER
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"text/tsv; charset=ISO-8859-1"
argument_list|,
name|xmlResult
operator|.
name|metadata
operator|.
name|get
argument_list|(
name|Metadata
operator|.
name|CONTENT_TYPE
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|assertContainsIgnoreWhiteSpaceDiffs
parameter_list|(
name|String
name|expected
parameter_list|,
name|String
name|xml
parameter_list|)
block|{
name|assertContains
argument_list|(
name|expected
argument_list|,
name|xml
operator|.
name|replaceAll
argument_list|(
literal|"[\r\n\t ]"
argument_list|,
literal|" "
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

