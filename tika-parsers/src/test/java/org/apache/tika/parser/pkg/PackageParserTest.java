begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|pkg
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|compress
operator|.
name|archivers
operator|.
name|ArchiveStreamFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|mime
operator|.
name|MediaType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|ParseContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|PackageParserTest
block|{
annotation|@
name|Test
specifier|public
name|void
name|testCoverage
parameter_list|()
throws|throws
name|Exception
block|{
comment|//test that the package parser covers all inputstreams handled
comment|//by ArchiveStreamFactory.  When we update commons-compress, and they add
comment|//a new stream type, we want to make sure that we're handling it.
name|ArchiveStreamFactory
name|archiveStreamFactory
init|=
operator|new
name|ArchiveStreamFactory
argument_list|(
name|StandardCharsets
operator|.
name|UTF_8
operator|.
name|name
argument_list|()
argument_list|)
decl_stmt|;
name|PackageParser
name|packageParser
init|=
operator|new
name|PackageParser
argument_list|()
decl_stmt|;
name|ParseContext
name|parseContext
init|=
operator|new
name|ParseContext
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|name
range|:
name|archiveStreamFactory
operator|.
name|getInputStreamArchiveNames
argument_list|()
control|)
block|{
name|MediaType
name|mt
init|=
name|PackageParser
operator|.
name|getMediaType
argument_list|(
name|name
argument_list|)
decl_stmt|;
comment|//use this instead of assertNotEquals so that we report the
comment|//name of the missing stream
if|if
condition|(
name|mt
operator|.
name|equals
argument_list|(
name|MediaType
operator|.
name|OCTET_STREAM
argument_list|)
condition|)
block|{
name|fail
argument_list|(
literal|"getting octet-stream for: "
operator|+
name|name
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|packageParser
operator|.
name|getSupportedTypes
argument_list|(
name|parseContext
argument_list|)
operator|.
name|contains
argument_list|(
name|mt
argument_list|)
condition|)
block|{
name|fail
argument_list|(
literal|"PackageParser should support: "
operator|+
name|mt
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

