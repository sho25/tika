begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|csv
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|Charset
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|ByteOrderMark
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|TikaTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|metadata
operator|.
name|Metadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|metadata
operator|.
name|TikaCoreProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|mime
operator|.
name|MediaType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|AutoDetectParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|Parser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|CSVSnifferTest
extends|extends
name|TikaTest
block|{
specifier|private
specifier|static
name|char
index|[]
name|DELIMITERS
init|=
operator|new
name|char
index|[]
block|{
literal|','
block|,
literal|'\t'
block|}
decl_stmt|;
specifier|private
specifier|static
name|byte
index|[]
name|CSV_BASIC
init|=
operator|(
literal|"the,quick,brown\tfox\n"
operator|+
literal|"jumped \tover,the\tlazy,\tdog\n"
operator|+
literal|"and then,ran,down\tthe\tstreet"
operator|)
operator|.
name|getBytes
argument_list|(
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|byte
index|[]
name|TSV_BASIC
init|=
operator|(
literal|"the\tquick\tbrown,fox\n"
operator|+
literal|"jumped ,over\tthe,lazy\t,dog\n"
operator|+
literal|"and then\tran\tdown,the,street"
operator|)
operator|.
name|getBytes
argument_list|(
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|byte
index|[]
name|CSV_MID_CELL_QUOTE_EXCEPTION
init|=
operator|(
literal|"the,quick,brown\"fox\n"
operator|+
literal|"jumped over,the lazy,dog\n"
operator|+
literal|"and then,ran,down the street"
operator|)
operator|.
name|getBytes
argument_list|(
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|byte
index|[]
name|ALLOW_SPACES_BEFORE_QUOTE
init|=
operator|(
literal|"the,quick,         \"brown\"\"fox\"\n"
operator|+
literal|"jumped over,the lazy,dog\n"
operator|+
literal|"and then,ran,down the street"
operator|)
operator|.
name|getBytes
argument_list|(
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|byte
index|[]
name|ALLOW_SPACES_AFTER_QUOTE
init|=
operator|(
literal|"the,\"quick\"     ,brown  fox\n"
operator|+
literal|"jumped over,the lazy,dog\n"
operator|+
literal|"and then,ran,down the street"
operator|)
operator|.
name|getBytes
argument_list|(
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|testCSVBasic
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|CSVResult
argument_list|>
name|results
init|=
name|sniff
argument_list|(
name|DELIMITERS
argument_list|,
name|CSV_BASIC
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|results
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|Character
argument_list|(
literal|','
argument_list|)
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getDelimiter
argument_list|()
argument_list|)
expr_stmt|;
name|results
operator|=
name|sniff
argument_list|(
name|DELIMITERS
argument_list|,
name|TSV_BASIC
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|results
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|Character
argument_list|(
literal|'\t'
argument_list|)
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getDelimiter
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|List
argument_list|<
name|CSVResult
argument_list|>
name|sniff
parameter_list|(
name|char
index|[]
name|delimiters
parameter_list|,
name|byte
index|[]
name|bytes
parameter_list|,
name|Charset
name|charset
parameter_list|)
throws|throws
name|IOException
block|{
name|CSVSniffer
name|sniffer
init|=
operator|new
name|CSVSniffer
argument_list|(
name|delimiters
argument_list|)
decl_stmt|;
try|try
init|(
name|BufferedReader
name|reader
init|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|bytes
argument_list|)
argument_list|,
name|charset
argument_list|)
argument_list|)
init|)
block|{
return|return
name|sniffer
operator|.
name|sniff
argument_list|(
name|reader
argument_list|)
return|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCSVMidCellQuoteException
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|CSVResult
argument_list|>
name|results
init|=
name|sniff
argument_list|(
name|DELIMITERS
argument_list|,
name|CSV_MID_CELL_QUOTE_EXCEPTION
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|results
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAllowWhiteSpacesAroundAQuote
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|CSVResult
argument_list|>
name|results
init|=
name|sniff
argument_list|(
name|DELIMITERS
argument_list|,
name|ALLOW_SPACES_BEFORE_QUOTE
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|results
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|Character
argument_list|(
literal|','
argument_list|)
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getDelimiter
argument_list|()
argument_list|)
expr_stmt|;
name|results
operator|=
name|sniff
argument_list|(
name|DELIMITERS
argument_list|,
name|ALLOW_SPACES_AFTER_QUOTE
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|results
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|Character
argument_list|(
literal|','
argument_list|)
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getDelimiter
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSort
parameter_list|()
block|{
name|List
argument_list|<
name|CSVResult
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
operator|new
name|CSVResult
argument_list|(
literal|0.1
argument_list|,
name|MediaType
operator|.
name|TEXT_HTML
argument_list|,
literal|'-'
argument_list|)
argument_list|)
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
operator|new
name|CSVResult
argument_list|(
literal|0.2
argument_list|,
name|MediaType
operator|.
name|TEXT_PLAIN
argument_list|,
literal|','
argument_list|)
argument_list|)
expr_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|list
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0.2
argument_list|,
name|list
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getConfidence
argument_list|()
argument_list|,
literal|0.00001
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

