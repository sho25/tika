begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|pdf
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|TikaTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|config
operator|.
name|TikaConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|metadata
operator|.
name|Metadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|metadata
operator|.
name|PDF
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|AutoDetectParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|Parser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import static
name|junit
operator|.
name|framework
operator|.
name|TestCase
operator|.
name|assertEquals
import|;
end_import

begin_class
specifier|public
class|class
name|PDFPreflightParserTest
extends|extends
name|TikaTest
block|{
specifier|private
specifier|static
name|Parser
name|PREFLIGHT_AUTO_DETECT_PARSER
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
try|try
init|(
name|InputStream
name|is
init|=
name|PDFPreflightParser
operator|.
name|class
operator|.
name|getResourceAsStream
argument_list|(
literal|"tika-preflight-config.xml"
argument_list|)
init|)
block|{
name|PREFLIGHT_AUTO_DETECT_PARSER
operator|=
operator|new
name|AutoDetectParser
argument_list|(
operator|new
name|TikaConfig
argument_list|(
name|is
argument_list|)
operator|.
name|getParser
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBasic
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|Metadata
argument_list|>
name|metadataList
init|=
name|getRecursiveMetadata
argument_list|(
literal|"testPDFFileEmbInAnnotation.pdf"
argument_list|,
name|PREFLIGHT_AUTO_DETECT_PARSER
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|metadataList
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Metadata
name|m
init|=
name|metadataList
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"true"
argument_list|,
name|m
operator|.
name|get
argument_list|(
name|PDF
operator|.
name|PREFLIGHT_IS_LINEARIZED
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"true"
argument_list|,
name|m
operator|.
name|get
argument_list|(
name|PDF
operator|.
name|PREFLIGHT_IS_VALID
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"PDF_A1B"
argument_list|,
name|m
operator|.
name|get
argument_list|(
name|PDF
operator|.
name|PREFLIGHT_SPECIFICATION
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"2"
argument_list|,
name|m
operator|.
name|get
argument_list|(
name|PDF
operator|.
name|PREFLIGHT_TRAILER_COUNT
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"STREAM"
argument_list|,
name|m
operator|.
name|get
argument_list|(
name|PDF
operator|.
name|PREFLIGHT_XREF_TYPE
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"false"
argument_list|,
name|m
operator|.
name|get
argument_list|(
name|PDF
operator|.
name|PREFLIGHT_INCREMENTAL_UPDATES
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

