begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|html
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Writer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|OutputKeys
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|sax
operator|.
name|SAXTransformerFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|sax
operator|.
name|TransformerHandler
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|stream
operator|.
name|StreamResult
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|Tika
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|exception
operator|.
name|TikaException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|metadata
operator|.
name|Geographic
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|metadata
operator|.
name|Metadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|metadata
operator|.
name|TikaCoreProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|ParseContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|sax
operator|.
name|BodyContentHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|sax
operator|.
name|TeeContentHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|Attributes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|ContentHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|helpers
operator|.
name|DefaultHandler
import|;
end_import

begin_class
specifier|public
class|class
name|HtmlParserTest
extends|extends
name|TestCase
block|{
specifier|public
name|void
name|testParseAscii
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|path
init|=
literal|"/test-documents/testHTML.html"
decl_stmt|;
specifier|final
name|StringWriter
name|href
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
specifier|final
name|StringWriter
name|name
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|ContentHandler
name|body
init|=
operator|new
name|BodyContentHandler
argument_list|()
decl_stmt|;
name|Metadata
name|metadata
init|=
operator|new
name|Metadata
argument_list|()
decl_stmt|;
name|InputStream
name|stream
init|=
name|HtmlParserTest
operator|.
name|class
operator|.
name|getResourceAsStream
argument_list|(
name|path
argument_list|)
decl_stmt|;
try|try
block|{
name|ContentHandler
name|link
init|=
operator|new
name|DefaultHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|startElement
parameter_list|(
name|String
name|u
parameter_list|,
name|String
name|l
parameter_list|,
name|String
name|n
parameter_list|,
name|Attributes
name|a
parameter_list|)
throws|throws
name|SAXException
block|{
if|if
condition|(
literal|"a"
operator|.
name|equals
argument_list|(
name|l
argument_list|)
condition|)
block|{
if|if
condition|(
name|a
operator|.
name|getValue
argument_list|(
literal|"href"
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|href
operator|.
name|append
argument_list|(
name|a
operator|.
name|getValue
argument_list|(
literal|"href"
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|a
operator|.
name|getValue
argument_list|(
literal|"name"
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|name
operator|.
name|append
argument_list|(
name|a
operator|.
name|getValue
argument_list|(
literal|"name"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
decl_stmt|;
operator|new
name|HtmlParser
argument_list|()
operator|.
name|parse
argument_list|(
name|stream
argument_list|,
operator|new
name|TeeContentHandler
argument_list|(
name|body
argument_list|,
name|link
argument_list|)
argument_list|,
name|metadata
argument_list|,
operator|new
name|ParseContext
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|stream
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"Title : Test Indexation Html"
argument_list|,
name|metadata
operator|.
name|get
argument_list|(
name|TikaCoreProperties
operator|.
name|TITLE
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Tika Developers"
argument_list|,
name|metadata
operator|.
name|get
argument_list|(
literal|"Author"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"5"
argument_list|,
name|metadata
operator|.
name|get
argument_list|(
literal|"refresh"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"51.2312"
argument_list|,
name|metadata
operator|.
name|get
argument_list|(
name|Geographic
operator|.
name|LATITUDE
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"-5.1987"
argument_list|,
name|metadata
operator|.
name|get
argument_list|(
name|Geographic
operator|.
name|LONGITUDE
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"http://www.apache.org/"
argument_list|,
name|href
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"test-anchor"
argument_list|,
name|name
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|content
init|=
name|body
operator|.
name|toString
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Did not contain expected text:"
operator|+
literal|"Test Indexation Html"
argument_list|,
name|content
operator|.
name|contains
argument_list|(
literal|"Test Indexation Html"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Did not contain expected text:"
operator|+
literal|"Indexation du fichier"
argument_list|,
name|content
operator|.
name|contains
argument_list|(
literal|"Indexation du fichier"
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|XtestParseUTF8
parameter_list|()
throws|throws
name|IOException
throws|,
name|SAXException
throws|,
name|TikaException
block|{
name|String
name|path
init|=
literal|"/test-documents/testXHTML_utf8.html"
decl_stmt|;
name|Metadata
name|metadata
init|=
operator|new
name|Metadata
argument_list|()
decl_stmt|;
name|String
name|content
init|=
operator|new
name|Tika
argument_list|()
operator|.
name|parseToString
argument_list|(
name|HtmlParserTest
operator|.
name|class
operator|.
name|getResourceAsStream
argument_list|(
name|path
argument_list|)
argument_list|,
name|metadata
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Did not contain expected text:"
operator|+
literal|"Title : Tilte with UTF-8 chars öäå"
argument_list|,
name|content
operator|.
name|contains
argument_list|(
literal|"Title : Tilte with UTF-8 chars öäå"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Did not contain expected text:"
operator|+
literal|"Content with UTF-8 chars"
argument_list|,
name|content
operator|.
name|contains
argument_list|(
literal|"Content with UTF-8 chars"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Did not contain expected text:"
operator|+
literal|"åäö"
argument_list|,
name|content
operator|.
name|contains
argument_list|(
literal|"åäö"
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testXhtmlParsing
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|path
init|=
literal|"/test-documents/testXHTML.html"
decl_stmt|;
name|Metadata
name|metadata
init|=
operator|new
name|Metadata
argument_list|()
decl_stmt|;
name|String
name|content
init|=
operator|new
name|Tika
argument_list|()
operator|.
name|parseToString
argument_list|(
name|HtmlParserTest
operator|.
name|class
operator|.
name|getResourceAsStream
argument_list|(
name|path
argument_list|)
argument_list|,
name|metadata
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"application/xhtml+xml"
argument_list|,
name|metadata
operator|.
name|get
argument_list|(
name|Metadata
operator|.
name|CONTENT_TYPE
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"XHTML test document"
argument_list|,
name|metadata
operator|.
name|get
argument_list|(
name|TikaCoreProperties
operator|.
name|TITLE
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Tika Developers"
argument_list|,
name|metadata
operator|.
name|get
argument_list|(
literal|"Author"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"5"
argument_list|,
name|metadata
operator|.
name|get
argument_list|(
literal|"refresh"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|content
operator|.
name|contains
argument_list|(
literal|"ability of Apache Tika"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|content
operator|.
name|contains
argument_list|(
literal|"extract content"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|content
operator|.
name|contains
argument_list|(
literal|"an XHTML document"
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testParseEmpty
parameter_list|()
throws|throws
name|Exception
block|{
name|ContentHandler
name|handler
init|=
operator|new
name|BodyContentHandler
argument_list|()
decl_stmt|;
operator|new
name|HtmlParser
argument_list|()
operator|.
name|parse
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
operator|new
name|byte
index|[
literal|0
index|]
argument_list|)
argument_list|,
name|handler
argument_list|,
operator|new
name|Metadata
argument_list|()
argument_list|,
operator|new
name|ParseContext
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|handler
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Test case for TIKA-210      * @see<a href="https://issues.apache.org/jira/browse/TIKA-210">TIKA-210</a>      */
specifier|public
name|void
name|testCharactersDirectlyUnderBodyElement
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|test
init|=
literal|"<html><body>test</body></html>"
decl_stmt|;
name|String
name|content
init|=
operator|new
name|Tika
argument_list|()
operator|.
name|parseToString
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|test
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"test"
argument_list|,
name|content
argument_list|)
expr_stmt|;
block|}
comment|/**      * Test case for TIKA-287      * @see<a href="https://issues.apache.org/jira/browse/TIKA-287">TIKA-287</a>      */
specifier|public
name|void
name|testBaseHref
parameter_list|()
throws|throws
name|Exception
block|{
name|assertRelativeLink
argument_list|(
literal|"http://lucene.apache.org/tika/"
argument_list|,
literal|"http://lucene.apache.org/"
argument_list|,
literal|"tika/"
argument_list|)
expr_stmt|;
name|assertRelativeLink
argument_list|(
literal|"http://domain.com/?pid=1"
argument_list|,
literal|"http://domain.com"
argument_list|,
literal|"?pid=1"
argument_list|)
expr_stmt|;
name|assertRelativeLink
argument_list|(
literal|"http://domain.com/?pid=2"
argument_list|,
literal|"http://domain.com?pid=1"
argument_list|,
literal|"?pid=2"
argument_list|)
expr_stmt|;
name|assertRelativeLink
argument_list|(
literal|"http://domain.com/file.html"
argument_list|,
literal|"http://domain.com/path/"
argument_list|,
literal|"/file.html"
argument_list|)
expr_stmt|;
name|assertRelativeLink
argument_list|(
literal|"http://domain.com/path/file.html"
argument_list|,
literal|"http://domain.com/path/"
argument_list|,
literal|"./file.html"
argument_list|)
expr_stmt|;
name|assertRelativeLink
argument_list|(
literal|"http://domain.com/path/file.html"
argument_list|,
literal|"http://domain.com/path/"
argument_list|,
literal|"file.html"
argument_list|)
expr_stmt|;
name|assertRelativeLink
argument_list|(
literal|"http://domain2.com/newpath"
argument_list|,
literal|"http://domain.com/path/to/file"
argument_list|,
literal|"http://domain2.com/newpath"
argument_list|)
expr_stmt|;
comment|// See http://www.communities.hp.com/securitysoftware/blogs/jeff/archive/2007/12/19/RFC-1808-vs-2396-vs-3986_3A00_-Browsers-vs.-programing-languages.aspx
comment|// Also http://www.ietf.org/rfc/rfc3986.txt
comment|// Also http://issues.apache.org/jira/browse/NUTCH-566
comment|// Also http://issues.apache.org/jira/browse/NUTCH-436
name|assertRelativeLink
argument_list|(
literal|"http://domain.com/path/?pid=1"
argument_list|,
literal|"http://domain.com/path/"
argument_list|,
literal|"?pid=1"
argument_list|)
expr_stmt|;
name|assertRelativeLink
argument_list|(
literal|"http://domain.com/file?pid=1"
argument_list|,
literal|"http://domain.com/file"
argument_list|,
literal|"?pid=1"
argument_list|)
expr_stmt|;
name|assertRelativeLink
argument_list|(
literal|"http://domain.com/path/d;p?pid=1"
argument_list|,
literal|"http://domain.com/path/d;p?q#f"
argument_list|,
literal|"?pid=1"
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|assertRelativeLink
parameter_list|(
name|String
name|url
parameter_list|,
name|String
name|base
parameter_list|,
name|String
name|relative
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|test
init|=
literal|"<html><head><base href=\""
operator|+
name|base
operator|+
literal|"\"></head>"
operator|+
literal|"<body><a href=\""
operator|+
name|relative
operator|+
literal|"\">test</a></body></html>"
decl_stmt|;
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|links
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
operator|new
name|HtmlParser
argument_list|()
operator|.
name|parse
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|test
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
argument_list|,
operator|new
name|DefaultHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|startElement
parameter_list|(
name|String
name|u
parameter_list|,
name|String
name|l
parameter_list|,
name|String
name|name
parameter_list|,
name|Attributes
name|atts
parameter_list|)
block|{
if|if
condition|(
name|name
operator|.
name|equals
argument_list|(
literal|"a"
argument_list|)
operator|&&
name|atts
operator|.
name|getValue
argument_list|(
literal|""
argument_list|,
literal|"href"
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|links
operator|.
name|add
argument_list|(
name|atts
operator|.
name|getValue
argument_list|(
literal|""
argument_list|,
literal|"href"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|,
operator|new
name|Metadata
argument_list|()
argument_list|,
operator|new
name|ParseContext
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|links
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|url
argument_list|,
name|links
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Test case for TIKA-268      * @see<a href="https://issues.apache.org/jira/browse/TIKA-268">TIKA-268</a>      */
specifier|public
name|void
name|testWhitespaceBetweenTableCells
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|test
init|=
literal|"<html><body><table><tr><td>a</td><td>b</td></table></body></html>"
decl_stmt|;
name|String
name|content
init|=
operator|new
name|Tika
argument_list|()
operator|.
name|parseToString
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|test
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|content
operator|.
name|contains
argument_list|(
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|content
operator|.
name|contains
argument_list|(
literal|"b"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|content
operator|.
name|contains
argument_list|(
literal|"ab"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Test case for TIKA-332      * @see<a href="https://issues.apache.org/jira/browse/TIKA-332">TIKA-332</a>      */
specifier|public
name|void
name|testHttpEquivCharset
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|test
init|=
literal|"<html><head><meta http-equiv=\"content-type\""
operator|+
literal|" content=\"text/html; charset=ISO-8859-1\" />"
operator|+
literal|"<title>the name is \u00e1ndre</title>"
operator|+
literal|"</head><body></body></html>"
decl_stmt|;
name|Metadata
name|metadata
init|=
operator|new
name|Metadata
argument_list|()
decl_stmt|;
operator|new
name|HtmlParser
argument_list|()
operator|.
name|parse
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|test
operator|.
name|getBytes
argument_list|(
literal|"ISO-8859-1"
argument_list|)
argument_list|)
argument_list|,
operator|new
name|BodyContentHandler
argument_list|()
argument_list|,
name|metadata
argument_list|,
operator|new
name|ParseContext
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"ISO-8859-1"
argument_list|,
name|metadata
operator|.
name|get
argument_list|(
name|Metadata
operator|.
name|CONTENT_ENCODING
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Test case for TIKA-892      * @see<a href="https://issues.apache.org/jira/browse/TIKA-892">TIKA-892</a>      */
specifier|public
name|void
name|testHtml5Charset
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|test
init|=
literal|"<html><head><meta charset=\"ISO-8859-15\" />"
operator|+
literal|"<title>the name is \u00e1ndre</title>"
operator|+
literal|"</head><body></body></html>"
decl_stmt|;
name|Metadata
name|metadata
init|=
operator|new
name|Metadata
argument_list|()
decl_stmt|;
operator|new
name|HtmlParser
argument_list|()
operator|.
name|parse
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|test
operator|.
name|getBytes
argument_list|(
literal|"ISO-8859-1"
argument_list|)
argument_list|)
argument_list|,
operator|new
name|BodyContentHandler
argument_list|()
argument_list|,
name|metadata
argument_list|,
operator|new
name|ParseContext
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"ISO-8859-15"
argument_list|,
name|metadata
operator|.
name|get
argument_list|(
name|Metadata
operator|.
name|CONTENT_ENCODING
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Test case for TIKA-334      * @see<a href="https://issues.apache.org/jira/browse/TIKA-334">TIKA-334</a>      */
specifier|public
name|void
name|testDetectOfCharset
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|test
init|=
literal|"<html><head><title>\u017d</title></head><body></body></html>"
decl_stmt|;
name|Metadata
name|metadata
init|=
operator|new
name|Metadata
argument_list|()
decl_stmt|;
operator|new
name|HtmlParser
argument_list|()
operator|.
name|parse
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|test
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
argument_list|,
operator|new
name|BodyContentHandler
argument_list|()
argument_list|,
name|metadata
argument_list|,
operator|new
name|ParseContext
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"\u017d"
argument_list|,
name|metadata
operator|.
name|get
argument_list|(
name|TikaCoreProperties
operator|.
name|TITLE
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Test case for TIKA-341      * @see<a href="https://issues.apache.org/jira/browse/TIKA-341">TIKA-341</a>      */
specifier|public
name|void
name|testUsingCharsetInContentTypeHeader
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|test
init|=
literal|"<html><head><title>the name is \u00e1ndre</title></head>"
operator|+
literal|"<body></body></html>"
decl_stmt|;
name|Metadata
name|metadata
init|=
operator|new
name|Metadata
argument_list|()
decl_stmt|;
operator|new
name|HtmlParser
argument_list|()
operator|.
name|parse
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|test
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
argument_list|,
operator|new
name|BodyContentHandler
argument_list|()
argument_list|,
name|metadata
argument_list|,
operator|new
name|ParseContext
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"UTF-8"
argument_list|,
name|metadata
operator|.
name|get
argument_list|(
name|Metadata
operator|.
name|CONTENT_ENCODING
argument_list|)
argument_list|)
expr_stmt|;
name|metadata
operator|=
operator|new
name|Metadata
argument_list|()
expr_stmt|;
name|metadata
operator|.
name|set
argument_list|(
name|Metadata
operator|.
name|CONTENT_TYPE
argument_list|,
literal|"text/html; charset=ISO-8859-1"
argument_list|)
expr_stmt|;
operator|new
name|HtmlParser
argument_list|()
operator|.
name|parse
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|test
operator|.
name|getBytes
argument_list|(
literal|"ISO-8859-1"
argument_list|)
argument_list|)
argument_list|,
operator|new
name|BodyContentHandler
argument_list|()
argument_list|,
name|metadata
argument_list|,
operator|new
name|ParseContext
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"ISO-8859-1"
argument_list|,
name|metadata
operator|.
name|get
argument_list|(
name|Metadata
operator|.
name|CONTENT_ENCODING
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Test case for HTML content like      * "&gt;div&lt;foo&gt;br&lt;bar&gt;/div&gt;" that should result      * in three whitespace-separated tokens "foo", "bar" and "baz" instead      * of a single token "foobarbaz".      *      * @see<a href="https://issues.apache.org/jira/browse/TIKA-343">TIKA-343</a>      */
specifier|public
name|void
name|testLineBreak
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|test
init|=
literal|"<html><body><div>foo<br>bar</div>baz</body></html>"
decl_stmt|;
name|String
name|text
init|=
operator|new
name|Tika
argument_list|()
operator|.
name|parseToString
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|test
operator|.
name|getBytes
argument_list|(
literal|"US-ASCII"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|String
index|[]
name|parts
init|=
name|text
operator|.
name|trim
argument_list|()
operator|.
name|split
argument_list|(
literal|"\\s+"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|parts
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"foo"
argument_list|,
name|parts
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"bar"
argument_list|,
name|parts
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"baz"
argument_list|,
name|parts
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
block|}
comment|/**      * Test case for TIKA-339: Don't use language returned by CharsetDetector      * @see<a href="https://issues.apache.org/jira/browse/TIKA-339">TIKA-339</a>      */
specifier|public
name|void
name|testIgnoreCharsetDetectorLanguage
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|test
init|=
literal|"<html><title>Simple Content</title><body></body></html>"
decl_stmt|;
name|Metadata
name|metadata
init|=
operator|new
name|Metadata
argument_list|()
decl_stmt|;
name|metadata
operator|.
name|add
argument_list|(
name|Metadata
operator|.
name|CONTENT_LANGUAGE
argument_list|,
literal|"en"
argument_list|)
expr_stmt|;
operator|new
name|HtmlParser
argument_list|()
operator|.
name|parse
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|test
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
argument_list|,
operator|new
name|BodyContentHandler
argument_list|()
argument_list|,
name|metadata
argument_list|,
operator|new
name|ParseContext
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"en"
argument_list|,
name|metadata
operator|.
name|get
argument_list|(
name|Metadata
operator|.
name|CONTENT_LANGUAGE
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Test case for TIKA-349      * @see<a href="https://issues.apache.org/jira/browse/TIKA-349">TIKA-349</a>      */
specifier|public
name|void
name|testHttpEquivCharsetFunkyAttributes
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|test1
init|=
literal|"<html><head><meta http-equiv=\"content-type\""
operator|+
literal|" content=\"text/html; charset=ISO-8859-15; charset=iso-8859-15\" />"
operator|+
literal|"<title>the name is \u00e1ndre</title>"
operator|+
literal|"</head><body></body></html>"
decl_stmt|;
name|Metadata
name|metadata
init|=
operator|new
name|Metadata
argument_list|()
decl_stmt|;
operator|new
name|HtmlParser
argument_list|()
operator|.
name|parse
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|test1
operator|.
name|getBytes
argument_list|(
literal|"ISO-8859-1"
argument_list|)
argument_list|)
argument_list|,
operator|new
name|BodyContentHandler
argument_list|()
argument_list|,
name|metadata
argument_list|,
operator|new
name|ParseContext
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"ISO-8859-15"
argument_list|,
name|metadata
operator|.
name|get
argument_list|(
name|Metadata
operator|.
name|CONTENT_ENCODING
argument_list|)
argument_list|)
expr_stmt|;
comment|// Some HTML pages have errors like ';;' versus '; ' as separator
name|String
name|test2
init|=
literal|"<html><head><meta http-equiv=\"content-type\""
operator|+
literal|" content=\"text/html;;charset=ISO-8859-15\" />"
operator|+
literal|"<title>the name is \u00e1ndre</title>"
operator|+
literal|"</head><body></body></html>"
decl_stmt|;
name|metadata
operator|=
operator|new
name|Metadata
argument_list|()
expr_stmt|;
operator|new
name|HtmlParser
argument_list|()
operator|.
name|parse
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|test2
operator|.
name|getBytes
argument_list|(
literal|"ISO-8859-1"
argument_list|)
argument_list|)
argument_list|,
operator|new
name|BodyContentHandler
argument_list|()
argument_list|,
name|metadata
argument_list|,
operator|new
name|ParseContext
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"ISO-8859-15"
argument_list|,
name|metadata
operator|.
name|get
argument_list|(
name|Metadata
operator|.
name|CONTENT_ENCODING
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Test case for TIKA-350      * @see<a href="https://issues.apache.org/jira/browse/TIKA-350">TIKA-350</a>      */
specifier|public
name|void
name|testUsingFunkyCharsetInContentTypeHeader
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|test
init|=
literal|"<html><head><title>the name is \u00e1ndre</title></head>"
operator|+
literal|"<body></body></html>"
decl_stmt|;
name|Metadata
name|metadata
init|=
operator|new
name|Metadata
argument_list|()
decl_stmt|;
operator|new
name|HtmlParser
argument_list|()
operator|.
name|parse
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|test
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
argument_list|,
operator|new
name|BodyContentHandler
argument_list|()
argument_list|,
name|metadata
argument_list|,
operator|new
name|ParseContext
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"UTF-8"
argument_list|,
name|metadata
operator|.
name|get
argument_list|(
name|Metadata
operator|.
name|CONTENT_ENCODING
argument_list|)
argument_list|)
expr_stmt|;
name|metadata
operator|=
operator|new
name|Metadata
argument_list|()
expr_stmt|;
name|metadata
operator|.
name|set
argument_list|(
name|Metadata
operator|.
name|CONTENT_TYPE
argument_list|,
literal|"charset=ISO-8859-1;text/html"
argument_list|)
expr_stmt|;
operator|new
name|HtmlParser
argument_list|()
operator|.
name|parse
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|test
operator|.
name|getBytes
argument_list|(
literal|"ISO-8859-1"
argument_list|)
argument_list|)
argument_list|,
operator|new
name|BodyContentHandler
argument_list|()
argument_list|,
name|metadata
argument_list|,
operator|new
name|ParseContext
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"ISO-8859-1"
argument_list|,
name|metadata
operator|.
name|get
argument_list|(
name|Metadata
operator|.
name|CONTENT_ENCODING
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Test case for TIKA-357      * @see<a href="https://issues.apache.org/jira/browse/TIKA-357">TIKA-357</a>      */
specifier|public
name|void
name|testMetaHttpEquivWithLotsOfPreambleText
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|path
init|=
literal|"/test-documents/big-preamble.html"
decl_stmt|;
name|Metadata
name|metadata
init|=
operator|new
name|Metadata
argument_list|()
decl_stmt|;
operator|new
name|HtmlParser
argument_list|()
operator|.
name|parse
argument_list|(
name|HtmlParserTest
operator|.
name|class
operator|.
name|getResourceAsStream
argument_list|(
name|path
argument_list|)
argument_list|,
operator|new
name|BodyContentHandler
argument_list|()
argument_list|,
name|metadata
argument_list|,
operator|new
name|ParseContext
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"windows-1251"
argument_list|,
name|metadata
operator|.
name|get
argument_list|(
name|Metadata
operator|.
name|CONTENT_ENCODING
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Test case for TIKA-420      * @see<a href="https://issues.apache.org/jira/browse/TIKA-420">TIKA-420</a>      */
specifier|public
name|void
name|testBoilerplateRemoval
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|path
init|=
literal|"/test-documents/boilerplate.html"
decl_stmt|;
name|Metadata
name|metadata
init|=
operator|new
name|Metadata
argument_list|()
decl_stmt|;
name|BodyContentHandler
name|handler
init|=
operator|new
name|BodyContentHandler
argument_list|()
decl_stmt|;
operator|new
name|HtmlParser
argument_list|()
operator|.
name|parse
argument_list|(
name|HtmlParserTest
operator|.
name|class
operator|.
name|getResourceAsStream
argument_list|(
name|path
argument_list|)
argument_list|,
operator|new
name|BoilerpipeContentHandler
argument_list|(
name|handler
argument_list|)
argument_list|,
name|metadata
argument_list|,
operator|new
name|ParseContext
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|content
init|=
name|handler
operator|.
name|toString
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|content
operator|.
name|startsWith
argument_list|(
literal|"This is the real meat"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|content
operator|.
name|endsWith
argument_list|(
literal|"This is the end of the text.\n"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|content
operator|.
name|contains
argument_list|(
literal|"boilerplate"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|content
operator|.
name|contains
argument_list|(
literal|"footer"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Test case for TIKA-478. Don't emit<head> sub-elements inside of<body>.      * @see<a href="https://issues.apache.org/jira/browse/TIKA-478">TIKA-478</a>      */
specifier|public
name|void
name|testElementOrdering
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|test
init|=
literal|"<html><head><title>Title</title>"
operator|+
literal|"<meta http-equiv=\"content-type\" content=\"text/html\">"
operator|+
literal|"<link rel=\"next\" href=\"next.html\" />"
operator|+
literal|"</head><body><p>Simple Content</p></body></html>"
decl_stmt|;
name|StringWriter
name|sw
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
operator|new
name|HtmlParser
argument_list|()
operator|.
name|parse
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|test
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
argument_list|,
name|makeHtmlTransformer
argument_list|(
name|sw
argument_list|)
argument_list|,
operator|new
name|Metadata
argument_list|()
argument_list|,
operator|new
name|ParseContext
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|result
init|=
name|sw
operator|.
name|toString
argument_list|()
decl_stmt|;
comment|// Title element in<head> section
name|assertTrue
argument_list|(
name|Pattern
operator|.
name|matches
argument_list|(
literal|"(?s)<html.*<head>.*<title>Title</title>.*</head>.*$"
argument_list|,
name|result
argument_list|)
argument_list|)
expr_stmt|;
comment|// No meta elements in body
name|assertFalse
argument_list|(
name|Pattern
operator|.
name|matches
argument_list|(
literal|"(?s).*<body>.*<meta. *</body>.*$"
argument_list|,
name|result
argument_list|)
argument_list|)
expr_stmt|;
comment|// meta elements should show up in<head> section
name|assertTrue
argument_list|(
name|Pattern
operator|.
name|matches
argument_list|(
literal|"(?s)<html.*<head>.*<meta .*</head>.*$"
argument_list|,
name|result
argument_list|)
argument_list|)
expr_stmt|;
comment|// No link elements in body
name|assertFalse
argument_list|(
name|Pattern
operator|.
name|matches
argument_list|(
literal|"(?s).*<body>.*<link .*</body>.*$"
argument_list|,
name|result
argument_list|)
argument_list|)
expr_stmt|;
comment|// link element should be in<head> section
name|assertTrue
argument_list|(
name|Pattern
operator|.
name|matches
argument_list|(
literal|"(?s)<html.*<head>.*<link .*</head>.*$"
argument_list|,
name|result
argument_list|)
argument_list|)
expr_stmt|;
comment|// There should be ending elements.
name|assertTrue
argument_list|(
name|Pattern
operator|.
name|matches
argument_list|(
literal|"(?s).*</body>.*</html>$"
argument_list|,
name|result
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Test case for TIKA-463. Don't skip elements that have URLs.      * @see<a href="https://issues.apache.org/jira/browse/TIKA-463">TIKA-463</a>      */
specifier|public
name|void
name|testImgUrlExtraction
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|test
init|=
literal|"<html><head><title>Title</title>"
operator|+
literal|"<base href=\"http://domain.com\" />"
operator|+
literal|"</head><body><img src=\"image.jpg\" /></body></html>"
decl_stmt|;
name|StringWriter
name|sw
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
operator|new
name|HtmlParser
argument_list|()
operator|.
name|parse
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|test
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
argument_list|,
name|makeHtmlTransformer
argument_list|(
name|sw
argument_list|)
argument_list|,
operator|new
name|Metadata
argument_list|()
argument_list|,
operator|new
name|ParseContext
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|result
init|=
name|sw
operator|.
name|toString
argument_list|()
decl_stmt|;
comment|//<img> tag should exist, with fully resolved URL
name|assertTrue
argument_list|(
name|Pattern
operator|.
name|matches
argument_list|(
literal|"(?s).*src=\"http://domain.com/image.jpg\".*$"
argument_list|,
name|result
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Test case for TIKA-463. Don't skip elements that have URLs.      * @see<a href="https://issues.apache.org/jira/browse/TIKA-463">TIKA-463</a>      */
specifier|public
name|void
name|testFrameSrcExtraction
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|test
init|=
literal|"<html><head><title>Title</title>"
operator|+
literal|"<base href=\"http://domain.com\" />"
operator|+
literal|"</head><frameset><frame src=\"frame.html\" /></frameset></html>"
decl_stmt|;
name|StringWriter
name|sw
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
operator|new
name|HtmlParser
argument_list|()
operator|.
name|parse
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|test
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
argument_list|,
name|makeHtmlTransformer
argument_list|(
name|sw
argument_list|)
argument_list|,
operator|new
name|Metadata
argument_list|()
argument_list|,
operator|new
name|ParseContext
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|result
init|=
name|sw
operator|.
name|toString
argument_list|()
decl_stmt|;
comment|//<frame> tag should exist, with fully resolved URL
name|assertTrue
argument_list|(
name|Pattern
operator|.
name|matches
argument_list|(
literal|"(?s).*<frame .* src=\"http://domain.com/frame.html\"/>.*$"
argument_list|,
name|result
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Test case for TIKA-463. Don't skip elements that have URLs.      * @see<a href="https://issues.apache.org/jira/browse/TIKA-463">TIKA-463</a>      */
specifier|public
name|void
name|testIFrameSrcExtraction
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|test
init|=
literal|"<html><head><title>Title</title>"
operator|+
literal|"<base href=\"http://domain.com\" />"
operator|+
literal|"</head><body><iframe src =\"framed.html\" width=\"100%\" height=\"300\">"
operator|+
literal|"<p>Your browser doesn't support iframes!</p></body></html>"
decl_stmt|;
name|StringWriter
name|sw
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
operator|new
name|HtmlParser
argument_list|()
operator|.
name|parse
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|test
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
argument_list|,
name|makeHtmlTransformer
argument_list|(
name|sw
argument_list|)
argument_list|,
operator|new
name|Metadata
argument_list|()
argument_list|,
operator|new
name|ParseContext
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|result
init|=
name|sw
operator|.
name|toString
argument_list|()
decl_stmt|;
comment|//<iframe> tag should exist, with fully resolved URL
name|assertTrue
argument_list|(
name|Pattern
operator|.
name|matches
argument_list|(
literal|"(?s).*<iframe .* src=\"http://domain.com/framed.html\".*$"
argument_list|,
name|result
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Test case for TIKA-463. Don't skip elements that have URLs.      * @see<a href="https://issues.apache.org/jira/browse/TIKA-463">TIKA-463</a>      */
specifier|public
name|void
name|testAreaExtraction
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|test
init|=
literal|"<html><head><title>Title</title>"
operator|+
literal|"<base href=\"http://domain.com\" />"
operator|+
literal|"</head><body><p><map name=\"map\" id=\"map\">"
operator|+
literal|"<area shape=\"rect\" href=\"map.html\" alt=\"\" />"
operator|+
literal|"</map></p></body></html>"
decl_stmt|;
name|StringWriter
name|sw
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
operator|new
name|HtmlParser
argument_list|()
operator|.
name|parse
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|test
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
argument_list|,
name|makeHtmlTransformer
argument_list|(
name|sw
argument_list|)
argument_list|,
operator|new
name|Metadata
argument_list|()
argument_list|,
operator|new
name|ParseContext
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|result
init|=
name|sw
operator|.
name|toString
argument_list|()
decl_stmt|;
comment|//<map> tag should exist, with<area> tag with fully resolved URL
name|assertTrue
argument_list|(
name|Pattern
operator|.
name|matches
argument_list|(
literal|"(?s).*<map .*<area .* href=\"http://domain.com/map.html\".*</map>.*$"
argument_list|,
name|result
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Test case for TIKA-463. Don't skip elements that have URLs.      * @see<a href="https://issues.apache.org/jira/browse/TIKA-463">TIKA-463</a>      */
specifier|public
name|void
name|testObjectExtraction
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|test
init|=
literal|"<html><head><title>Title</title>"
operator|+
literal|"<base href=\"http://domain.com\" />"
operator|+
literal|"</head><body><p><object data=\"object.data\" type=\"text/html\">"
operator|+
literal|"<param name=\"name\" value=\"value\" />"
operator|+
literal|"</object></p></body></html>"
decl_stmt|;
name|StringWriter
name|sw
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
operator|new
name|HtmlParser
argument_list|()
operator|.
name|parse
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|test
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
argument_list|,
name|makeHtmlTransformer
argument_list|(
name|sw
argument_list|)
argument_list|,
operator|new
name|Metadata
argument_list|()
argument_list|,
operator|new
name|ParseContext
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|result
init|=
name|sw
operator|.
name|toString
argument_list|()
decl_stmt|;
comment|//<object> tag should exist with fully resolved URLs
name|assertTrue
argument_list|(
literal|"<object> tag not correctly found in:\n"
operator|+
name|result
argument_list|,
name|Pattern
operator|.
name|matches
argument_list|(
literal|"(?s).*<object data=\"http://domain.com/object.data\".*<param .* name=\"name\" value=\"value\"/>.*</object>.*$"
argument_list|,
name|result
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Test case for change related to TIKA-463. Verify proper handling of<meta> tags.      * @see<a href="https://issues.apache.org/jira/browse/TIKA-463">TIKA-463</a>      */
specifier|public
name|void
name|testMetaTagHandling
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|test
init|=
literal|"<html><body><h1>header</h1><p>some text</p></body></html>"
decl_stmt|;
name|Metadata
name|metadata
init|=
operator|new
name|Metadata
argument_list|()
decl_stmt|;
name|metadata
operator|.
name|add
argument_list|(
literal|"Content-Type"
argument_list|,
literal|"text/html; charset=utf-8"
argument_list|)
expr_stmt|;
name|metadata
operator|.
name|add
argument_list|(
literal|"Language"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|StringWriter
name|sw
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
operator|new
name|HtmlParser
argument_list|()
operator|.
name|parse
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|test
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
argument_list|,
name|makeHtmlTransformer
argument_list|(
name|sw
argument_list|)
argument_list|,
name|metadata
argument_list|,
operator|new
name|ParseContext
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|result
init|=
name|sw
operator|.
name|toString
argument_list|()
decl_stmt|;
comment|//<meta> tag for Content-Type should exist, but nothing for Language
name|assertTrue
argument_list|(
name|Pattern
operator|.
name|matches
argument_list|(
literal|"(?s).*<meta name=\"Content-Type\" content=\"text/html; charset=UTF-8\"/>.*$"
argument_list|,
name|result
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|Pattern
operator|.
name|matches
argument_list|(
literal|"(?s).*<meta name=\"Language\".*$"
argument_list|,
name|result
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Test case for TIKA-457. Better handling for broken HTML that has<frameset> inside of<body>.      * @see<a href="https://issues.apache.org/jira/browse/TIKA-457">TIKA-457</a>      */
specifier|public
name|void
name|testBrokenFrameset
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|test1
init|=
literal|"<html><head><title>Title</title>"
operator|+
literal|"<base href=\"http://domain.com\" />"
operator|+
literal|"</head><body><frameset><frame src=\"frame.html\" /></frameset></body></html>"
decl_stmt|;
name|StringWriter
name|sw1
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
operator|new
name|HtmlParser
argument_list|()
operator|.
name|parse
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|test1
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
argument_list|,
name|makeHtmlTransformer
argument_list|(
name|sw1
argument_list|)
argument_list|,
operator|new
name|Metadata
argument_list|()
argument_list|,
operator|new
name|ParseContext
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|result
init|=
name|sw1
operator|.
name|toString
argument_list|()
decl_stmt|;
comment|//<frame> tag should exist, with fully resolved URL
name|assertTrue
argument_list|(
name|Pattern
operator|.
name|matches
argument_list|(
literal|"(?s).*<frame .* src=\"http://domain.com/frame.html\"/>.*$"
argument_list|,
name|result
argument_list|)
argument_list|)
expr_stmt|;
comment|//<body> tag should not exist.
name|assertFalse
argument_list|(
name|Pattern
operator|.
name|matches
argument_list|(
literal|"(?s).*<body>.*$"
argument_list|,
name|result
argument_list|)
argument_list|)
expr_stmt|;
comment|// Test the example from the Nutch project.
specifier|final
name|String
name|test2
init|=
literal|"<html><head><title> my title</title></head><body>"
operator|+
literal|"<frameset rows=\"20,*\"><frame src=\"top.html\"></frame>"
operator|+
literal|"<frameset cols=\"20,*\"><frame src=\"left.html\"></frame>"
operator|+
literal|"<frame src=\"invalid.html\"/></frame>"
operator|+
literal|"<frame src=\"right.html\"></frame>"
operator|+
literal|"</frameset></frameset></body></html>"
decl_stmt|;
name|StringWriter
name|sw2
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
operator|new
name|HtmlParser
argument_list|()
operator|.
name|parse
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|test2
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
argument_list|,
name|makeHtmlTransformer
argument_list|(
name|sw2
argument_list|)
argument_list|,
operator|new
name|Metadata
argument_list|()
argument_list|,
operator|new
name|ParseContext
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|sw2
operator|.
name|toString
argument_list|()
expr_stmt|;
comment|//<frame> tags should exist, with relative URL (no base element specified)
name|assertTrue
argument_list|(
name|Pattern
operator|.
name|matches
argument_list|(
literal|"(?s).*<frame .* src=\"top.html\"/>.*$"
argument_list|,
name|result
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Pattern
operator|.
name|matches
argument_list|(
literal|"(?s).*<frame .* src=\"left.html\"/>.*$"
argument_list|,
name|result
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Pattern
operator|.
name|matches
argument_list|(
literal|"(?s).*<frame .* src=\"invalid.html\"/>.*$"
argument_list|,
name|result
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Pattern
operator|.
name|matches
argument_list|(
literal|"(?s).*<frame .* src=\"right.html\"/>.*$"
argument_list|,
name|result
argument_list|)
argument_list|)
expr_stmt|;
comment|//<body> tag should not exist.
name|assertFalse
argument_list|(
name|Pattern
operator|.
name|matches
argument_list|(
literal|"(?s).*<body>.*$"
argument_list|,
name|result
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Test case for TIKA-480: fix NPE when using BodyContentHandler or HtmlTransformer      * as delegate for BoilerpipeContentHandler      * @see<a href="https://issues.apache.org/jira/browse/TIKA-480">TIKA-480</a>      */
specifier|public
name|void
name|testBoilerplateDelegation
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|path
init|=
literal|"/test-documents/boilerplate.html"
decl_stmt|;
name|Metadata
name|metadata
init|=
operator|new
name|Metadata
argument_list|()
decl_stmt|;
name|StringWriter
name|sw
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
operator|new
name|HtmlParser
argument_list|()
operator|.
name|parse
argument_list|(
name|HtmlParserTest
operator|.
name|class
operator|.
name|getResourceAsStream
argument_list|(
name|path
argument_list|)
argument_list|,
name|makeHtmlTransformer
argument_list|(
name|sw
argument_list|)
argument_list|,
name|metadata
argument_list|,
operator|new
name|ParseContext
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|content
init|=
name|sw
operator|.
name|toString
argument_list|()
decl_stmt|;
comment|// Should have<html>,<head>,<title>,<body> elements
name|assertTrue
argument_list|(
name|Pattern
operator|.
name|matches
argument_list|(
literal|"(?s).*<html xmlns=\"http://www.w3.org/1999/xhtml\">.*</html>.*$"
argument_list|,
name|content
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Pattern
operator|.
name|matches
argument_list|(
literal|"(?s).*<head>.*</head>.*$"
argument_list|,
name|content
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Pattern
operator|.
name|matches
argument_list|(
literal|"(?s).*<title>Title</title>.*$"
argument_list|,
name|content
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Pattern
operator|.
name|matches
argument_list|(
literal|"(?s).*<body>.*</body>.*$"
argument_list|,
name|content
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Test case for TIKA-481. Verify href in<link> is resolved.      * @see<a href="https://issues.apache.org/jira/browse/TIKA-481">TIKA-481</a>      */
specifier|public
name|void
name|testLinkHrefResolution
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|test
init|=
literal|"<html><head><title>Title</title>"
operator|+
literal|"<base href=\"http://domain.com\" />"
operator|+
literal|"<link rel=\"next\" href=\"next.html\" />"
operator|+
literal|"</head><body></body></html>"
decl_stmt|;
name|StringWriter
name|sw
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
operator|new
name|HtmlParser
argument_list|()
operator|.
name|parse
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|test
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
argument_list|,
name|makeHtmlTransformer
argument_list|(
name|sw
argument_list|)
argument_list|,
operator|new
name|Metadata
argument_list|()
argument_list|,
operator|new
name|ParseContext
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|result
init|=
name|sw
operator|.
name|toString
argument_list|()
decl_stmt|;
comment|//<link> tag should exist in<head>, with fully resolved URL
name|assertTrue
argument_list|(
name|Pattern
operator|.
name|matches
argument_list|(
literal|"(?s).*<head>.*<link rel=\"next\" href=\"http://domain.com/next.html\"/>.*</head>.*$"
argument_list|,
name|result
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Create ContentHandler that transforms SAX events into textual HTML output,      * and writes it out to<writer> - typically this is a StringWriter.      *      * @param writer Where to write resulting HTML text.      * @return ContentHandler suitable for passing to parse() methods.      * @throws Exception      */
specifier|private
name|ContentHandler
name|makeHtmlTransformer
parameter_list|(
name|Writer
name|writer
parameter_list|)
throws|throws
name|Exception
block|{
name|SAXTransformerFactory
name|factory
init|=
operator|(
name|SAXTransformerFactory
operator|)
name|SAXTransformerFactory
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|TransformerHandler
name|handler
init|=
name|factory
operator|.
name|newTransformerHandler
argument_list|()
decl_stmt|;
name|handler
operator|.
name|getTransformer
argument_list|()
operator|.
name|setOutputProperty
argument_list|(
name|OutputKeys
operator|.
name|METHOD
argument_list|,
literal|"html"
argument_list|)
expr_stmt|;
name|handler
operator|.
name|getTransformer
argument_list|()
operator|.
name|setOutputProperty
argument_list|(
name|OutputKeys
operator|.
name|INDENT
argument_list|,
literal|"no"
argument_list|)
expr_stmt|;
name|handler
operator|.
name|getTransformer
argument_list|()
operator|.
name|setOutputProperty
argument_list|(
name|OutputKeys
operator|.
name|ENCODING
argument_list|,
literal|"utf-8"
argument_list|)
expr_stmt|;
name|handler
operator|.
name|setResult
argument_list|(
operator|new
name|StreamResult
argument_list|(
name|writer
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|handler
return|;
block|}
comment|/**      * Test case for TIKA-564. Support returning markup from BoilerpipeContentHandler.      * @see<a href="https://issues.apache.org/jira/browse/TIKA-564">TIKA-564</a>      */
specifier|public
name|void
name|testBoilerplateWithMarkup
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|path
init|=
literal|"/test-documents/boilerplate.html"
decl_stmt|;
name|Metadata
name|metadata
init|=
operator|new
name|Metadata
argument_list|()
decl_stmt|;
name|StringWriter
name|sw
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|ContentHandler
name|ch
init|=
name|makeHtmlTransformer
argument_list|(
name|sw
argument_list|)
decl_stmt|;
name|BoilerpipeContentHandler
name|bpch
init|=
operator|new
name|BoilerpipeContentHandler
argument_list|(
name|ch
argument_list|)
decl_stmt|;
name|bpch
operator|.
name|setIncludeMarkup
argument_list|(
literal|true
argument_list|)
expr_stmt|;
operator|new
name|HtmlParser
argument_list|()
operator|.
name|parse
argument_list|(
name|HtmlParserTest
operator|.
name|class
operator|.
name|getResourceAsStream
argument_list|(
name|path
argument_list|)
argument_list|,
name|bpch
argument_list|,
name|metadata
argument_list|,
operator|new
name|ParseContext
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|content
init|=
name|sw
operator|.
name|toString
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Has empty table elements"
argument_list|,
name|content
operator|.
name|contains
argument_list|(
literal|"<body><table><tr><td><table><tr><td>"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Has empty a element"
argument_list|,
name|content
operator|.
name|contains
argument_list|(
literal|"<a shape=\"rect\" href=\"Main.php\"/>"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Has real content"
argument_list|,
name|content
operator|.
name|contains
argument_list|(
literal|"<p>This is the real meat"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Ends with appropriate HTML"
argument_list|,
name|content
operator|.
name|endsWith
argument_list|(
literal|"</p></body></html>"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|content
operator|.
name|contains
argument_list|(
literal|"boilerplate"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|content
operator|.
name|contains
argument_list|(
literal|"footer"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Test case for TIKA-434 - Pushback buffer overflow in TagSoup      */
specifier|public
name|void
name|testPushback
parameter_list|()
throws|throws
name|IOException
throws|,
name|TikaException
block|{
name|String
name|content
init|=
operator|new
name|Tika
argument_list|()
operator|.
name|parseToString
argument_list|(
name|HtmlParserTest
operator|.
name|class
operator|.
name|getResourceAsStream
argument_list|(
literal|"/test-documents/tika434.html"
argument_list|)
argument_list|,
operator|new
name|Metadata
argument_list|()
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|content
argument_list|)
expr_stmt|;
block|}
comment|/**      * Test case for TIKA-869      * IdentityHtmlMapper needs to lower-case tag names.      *      * @see<a href="https://issues.apache.org/jira/browse/TIKA-869">TIKA-869</a>      */
specifier|public
name|void
name|testIdentityMapper
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|html
init|=
literal|"<html><head><title>Title</title></head>"
operator|+
literal|"<body></body></html>"
decl_stmt|;
name|Metadata
name|metadata
init|=
operator|new
name|Metadata
argument_list|()
decl_stmt|;
name|ParseContext
name|parseContext
init|=
operator|new
name|ParseContext
argument_list|()
decl_stmt|;
name|parseContext
operator|.
name|set
argument_list|(
name|HtmlMapper
operator|.
name|class
argument_list|,
name|IdentityHtmlMapper
operator|.
name|INSTANCE
argument_list|)
expr_stmt|;
name|StringWriter
name|sw
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
operator|new
name|HtmlParser
argument_list|()
operator|.
name|parse
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|html
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
argument_list|,
name|makeHtmlTransformer
argument_list|(
name|sw
argument_list|)
argument_list|,
name|metadata
argument_list|,
name|parseContext
argument_list|)
expr_stmt|;
name|String
name|result
init|=
name|sw
operator|.
name|toString
argument_list|()
decl_stmt|;
comment|// Make sure we don't get<body><BODY/></body>
name|assertTrue
argument_list|(
name|Pattern
operator|.
name|matches
argument_list|(
literal|"(?s).*<body/>.*$"
argument_list|,
name|result
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Test case for TIKA-889      * XHTMLContentHandler wont emit newline when html element matches ENDLINE set.      *      * @see<a href="https://issues.apache.org/jira/browse/TIKA-889">TIKA-889</a>      */
specifier|public
name|void
name|testNewlineAndIndent
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|html
init|=
literal|"<html><head><title>Title</title></head>"
operator|+
literal|"<body><ul><li>one</li></ul></body></html>"
decl_stmt|;
name|BodyContentHandler
name|handler
init|=
operator|new
name|BodyContentHandler
argument_list|()
decl_stmt|;
operator|new
name|HtmlParser
argument_list|()
operator|.
name|parse
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|html
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
argument_list|,
name|handler
argument_list|,
operator|new
name|Metadata
argument_list|()
argument_list|,
operator|new
name|ParseContext
argument_list|()
argument_list|)
expr_stmt|;
comment|// Make sure we get<tab>, "one", newline, newline
name|String
name|result
init|=
name|handler
operator|.
name|toString
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|Pattern
operator|.
name|matches
argument_list|(
literal|"\tone\n\n"
argument_list|,
name|result
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Test case for TIKA-983:  HTML parser should add Open Graph meta tag data to Metadata returned by parser      *      * @see<a href="https://issues.apache.org/jira/browse/TIKA-983">TIKA-983</a>      */
specifier|public
name|void
name|testOpenGraphMetadata
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|test1
init|=
literal|"<html><head><meta property=\"og:description\""
operator|+
literal|" content=\"some description\" />"
operator|+
literal|"<meta property=\"og:image\" content=\"http://example.com/image1.jpg\" />"
operator|+
literal|"<meta property=\"og:image\" content=\"http://example.com/image2.jpg\" />"
operator|+
literal|"<title>hello</title>"
operator|+
literal|"</head><body></body></html>"
decl_stmt|;
name|Metadata
name|metadata
init|=
operator|new
name|Metadata
argument_list|()
decl_stmt|;
operator|new
name|HtmlParser
argument_list|()
operator|.
name|parse
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|test1
operator|.
name|getBytes
argument_list|(
literal|"ISO-8859-1"
argument_list|)
argument_list|)
argument_list|,
operator|new
name|BodyContentHandler
argument_list|()
argument_list|,
name|metadata
argument_list|,
operator|new
name|ParseContext
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"some description"
argument_list|,
name|metadata
operator|.
name|get
argument_list|(
literal|"og:description"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|metadata
operator|.
name|isMultiValued
argument_list|(
literal|"og:image"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// TIKA-1011
specifier|public
name|void
name|testUserDefinedCharset
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|content
init|=
operator|new
name|Tika
argument_list|()
operator|.
name|parseToString
argument_list|(
name|HtmlParserTest
operator|.
name|class
operator|.
name|getResourceAsStream
argument_list|(
literal|"/test-documents/testUserDefinedCharset.mhtml"
argument_list|)
argument_list|,
operator|new
name|Metadata
argument_list|()
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|content
argument_list|)
expr_stmt|;
block|}
comment|//TIKA-1001
specifier|public
name|void
name|testNoisyMetaCharsetHeaders
parameter_list|()
throws|throws
name|Exception
block|{
name|Tika
name|tika
init|=
operator|new
name|Tika
argument_list|()
decl_stmt|;
name|String
name|hit
init|=
literal|"\u0623\u0639\u0631\u0628"
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
literal|4
condition|;
name|i
operator|++
control|)
block|{
name|String
name|fileName
init|=
literal|"/test-documents/testHTMLNoisyMetaEncoding_"
operator|+
name|i
operator|+
literal|".html"
decl_stmt|;
name|String
name|content
init|=
name|tika
operator|.
name|parseToString
argument_list|(
name|HtmlParserTest
operator|.
name|class
operator|.
name|getResourceAsStream
argument_list|(
name|fileName
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"testing: "
operator|+
name|fileName
argument_list|,
name|content
operator|.
name|contains
argument_list|(
name|hit
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

