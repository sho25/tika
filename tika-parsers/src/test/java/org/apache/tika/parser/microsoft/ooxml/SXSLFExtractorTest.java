begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|microsoft
operator|.
name|ooxml
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|TikaTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|exception
operator|.
name|EncryptedDocumentException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|metadata
operator|.
name|Metadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|metadata
operator|.
name|Office
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|metadata
operator|.
name|OfficeOpenXMLCore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|metadata
operator|.
name|TikaCoreProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|AutoDetectParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|ParseContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|Parser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|PasswordProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|RecursiveParserWrapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|microsoft
operator|.
name|OfficeParserConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|sax
operator|.
name|BodyContentHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Ignore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|ContentHandler
import|;
end_import

begin_class
specifier|public
class|class
name|SXSLFExtractorTest
extends|extends
name|TikaTest
block|{
specifier|private
name|ParseContext
name|parseContext
decl_stmt|;
name|OfficeParserConfig
name|officeParserConfig
init|=
operator|new
name|OfficeParserConfig
argument_list|()
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
block|{
name|parseContext
operator|=
operator|new
name|ParseContext
argument_list|()
expr_stmt|;
name|officeParserConfig
operator|.
name|setUseSAXPptxExtractor
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|parseContext
operator|.
name|set
argument_list|(
name|OfficeParserConfig
operator|.
name|class
argument_list|,
name|officeParserConfig
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|basicTest
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|Metadata
argument_list|>
name|metadataList
init|=
name|getRecursiveMetadata
argument_list|(
literal|"testPPT_various2.pptx"
argument_list|,
name|parseContext
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"right number of attachments"
argument_list|,
literal|14
argument_list|,
name|metadataList
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|mainContent
init|=
name|metadataList
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|get
argument_list|(
name|RecursiveParserWrapper
operator|.
name|TIKA_CONTENT
argument_list|)
decl_stmt|;
name|assertContains
argument_list|(
literal|"This slide is hidden"
argument_list|,
name|mainContent
argument_list|)
expr_stmt|;
comment|//TODO: parameterize this
comment|//basic content
name|assertContains
argument_list|(
literal|"FirstBullet"
argument_list|,
name|mainContent
argument_list|)
expr_stmt|;
comment|//hyperlink
name|assertContains
argument_list|(
literal|"<a href=\"http://tika.apache.org/\">tika_hyperlink</a>"
argument_list|,
name|mainContent
argument_list|)
expr_stmt|;
comment|//hyperlink in cell
name|assertContains
argument_list|(
literal|"<a href=\"http://lucene.apache.org/\">lucene_hyperlink</a>"
argument_list|,
name|mainContent
argument_list|)
expr_stmt|;
comment|//text box
name|assertContains
argument_list|(
literal|"Slide2TextBox"
argument_list|,
name|mainContent
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"<td>R1c1</td>"
argument_list|,
name|mainContent
argument_list|)
expr_stmt|;
comment|//wordArt
name|assertContains
argument_list|(
literal|"This is some WordART"
argument_list|,
name|mainContent
argument_list|)
expr_stmt|;
comment|//notes
name|assertContains
argument_list|(
literal|"NotesForSlide2"
argument_list|,
name|mainContent
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"Notes for slide3"
argument_list|,
name|mainContent
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"NotesMasterHeader"
argument_list|,
name|mainContent
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"NotesMasterFooter"
argument_list|,
name|mainContent
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"NotesMasterPageNumber"
argument_list|,
name|mainContent
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"NotesWordArt"
argument_list|,
name|mainContent
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"NotesWordArtPage2"
argument_list|,
name|mainContent
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"NotesTableSlide2"
argument_list|,
name|mainContent
argument_list|)
expr_stmt|;
comment|//comments
name|assertContains
argument_list|(
literal|"<p class=\"slide-comment\"><b>Timothy Allison (TA)</b>This is a reply to the initial comment</p>"
argument_list|,
name|mainContent
argument_list|)
expr_stmt|;
comment|//HandoutMaster
name|assertContains
argument_list|(
literal|"HandoutHeader1"
argument_list|,
name|mainContent
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"HandoutFooter"
argument_list|,
name|mainContent
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"HandoutDate"
argument_list|,
name|mainContent
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"TextBoxInHandOut"
argument_list|,
name|mainContent
argument_list|)
expr_stmt|;
comment|//text box in master
name|assertContains
argument_list|(
literal|"MASTERTEXTBOX"
argument_list|,
name|mainContent
argument_list|)
expr_stmt|;
comment|//equation
name|assertContains
argument_list|(
literal|"3/4"
argument_list|,
name|mainContent
argument_list|)
expr_stmt|;
comment|//make sure footer elements are in their own<p/>
name|assertContains
argument_list|(
literal|"<p>12/16/2016</p>"
argument_list|,
name|mainContent
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"<p>8</p>"
argument_list|,
name|mainContent
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"<td>NotesTableSlide2"
argument_list|,
name|mainContent
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"MASTERFOOTERMSG"
argument_list|,
name|mainContent
argument_list|)
expr_stmt|;
comment|//should not include boilerplate from master
name|assertNotContained
argument_list|(
literal|"Click to edit Master"
argument_list|,
name|mainContent
argument_list|)
expr_stmt|;
name|assertNotContained
argument_list|(
literal|"Second level"
argument_list|,
name|mainContent
argument_list|)
expr_stmt|;
comment|//TODO: chart content
comment|//assertContains("SLIDE3ChartTitle", mainContent);
comment|//assertContains("Category 1", mainContent);
block|}
annotation|@
name|Test
specifier|public
name|void
name|poiBug54916Test
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|xml
init|=
name|getXML
argument_list|(
literal|"testPPTX_overlappingRelations.pptx"
argument_list|,
name|parseContext
argument_list|)
operator|.
name|xml
decl_stmt|;
name|assertContains
argument_list|(
literal|"POI cannot read this"
argument_list|,
name|xml
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"Has a relationship to another slide"
argument_list|,
name|xml
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"can read this too"
argument_list|,
name|xml
argument_list|)
expr_stmt|;
block|}
comment|/**      * We have a number of different powerpoint files,      * such as presentation, macro-enabled etc      */
annotation|@
name|Test
specifier|public
name|void
name|testPowerPoint
parameter_list|()
throws|throws
name|Exception
block|{
name|String
index|[]
name|extensions
init|=
operator|new
name|String
index|[]
block|{
literal|"pptx"
block|,
literal|"pptm"
block|,
literal|"ppsm"
block|,
literal|"ppsx"
block|,
literal|"potm"
block|,
comment|//"thmx", // TIKA-418: Will be supported in POI 3.7 beta 2
comment|//"xps" // TIKA-418: Not yet supported by POI
block|}
decl_stmt|;
name|String
index|[]
name|mimeTypes
init|=
operator|new
name|String
index|[]
block|{
literal|"application/vnd.openxmlformats-officedocument.presentationml.presentation"
block|,
literal|"application/vnd.ms-powerpoint.presentation.macroenabled.12"
block|,
literal|"application/vnd.ms-powerpoint.slideshow.macroenabled.12"
block|,
literal|"application/vnd.openxmlformats-officedocument.presentationml.slideshow"
block|,
literal|"application/vnd.ms-powerpoint.template.macroenabled.12"
block|,         }
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|extensions
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|String
name|extension
init|=
name|extensions
index|[
name|i
index|]
decl_stmt|;
name|String
name|filename
init|=
literal|"testPPT."
operator|+
name|extension
decl_stmt|;
name|Parser
name|parser
init|=
operator|new
name|AutoDetectParser
argument_list|()
decl_stmt|;
name|Metadata
name|metadata
init|=
operator|new
name|Metadata
argument_list|()
decl_stmt|;
name|ContentHandler
name|handler
init|=
operator|new
name|BodyContentHandler
argument_list|()
decl_stmt|;
try|try
init|(
name|InputStream
name|input
init|=
name|getResourceAsStream
argument_list|(
literal|"/test-documents/"
operator|+
name|filename
argument_list|)
init|)
block|{
name|parser
operator|.
name|parse
argument_list|(
name|input
argument_list|,
name|handler
argument_list|,
name|metadata
argument_list|,
name|parseContext
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Mime-type checking for "
operator|+
name|filename
argument_list|,
name|mimeTypes
index|[
name|i
index|]
argument_list|,
name|metadata
operator|.
name|get
argument_list|(
name|Metadata
operator|.
name|CONTENT_TYPE
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Attachment Test"
argument_list|,
name|metadata
operator|.
name|get
argument_list|(
name|TikaCoreProperties
operator|.
name|TITLE
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Rajiv"
argument_list|,
name|metadata
operator|.
name|get
argument_list|(
name|TikaCoreProperties
operator|.
name|CREATOR
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Rajiv"
argument_list|,
name|metadata
operator|.
name|get
argument_list|(
name|Metadata
operator|.
name|AUTHOR
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|content
init|=
name|handler
operator|.
name|toString
argument_list|()
decl_stmt|;
comment|// Theme files don't have the text in them
if|if
condition|(
name|extension
operator|.
name|equals
argument_list|(
literal|"thmx"
argument_list|)
condition|)
block|{
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|content
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertTrue
argument_list|(
literal|"Text missing for "
operator|+
name|filename
operator|+
literal|"\n"
operator|+
name|content
argument_list|,
name|content
operator|.
name|contains
argument_list|(
literal|"Attachment Test"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Text missing for "
operator|+
name|filename
operator|+
literal|"\n"
operator|+
name|content
argument_list|,
name|content
operator|.
name|contains
argument_list|(
literal|"This is a test file data with the same content"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Text missing for "
operator|+
name|filename
operator|+
literal|"\n"
operator|+
name|content
argument_list|,
name|content
operator|.
name|contains
argument_list|(
literal|"content parsing"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Text missing for "
operator|+
name|filename
operator|+
literal|"\n"
operator|+
name|content
argument_list|,
name|content
operator|.
name|contains
argument_list|(
literal|"Different words to test against"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Text missing for "
operator|+
name|filename
operator|+
literal|"\n"
operator|+
name|content
argument_list|,
name|content
operator|.
name|contains
argument_list|(
literal|"Mystery"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/**      * Test that the metadata is already extracted when the body is processed.      * See TIKA-1109      */
annotation|@
name|Test
specifier|public
name|void
name|testPowerPointMetadataEarly
parameter_list|()
throws|throws
name|Exception
block|{
name|String
index|[]
name|extensions
init|=
operator|new
name|String
index|[]
block|{
literal|"pptx"
block|,
literal|"pptm"
block|,
literal|"ppsm"
block|,
literal|"ppsx"
block|,
literal|"potm"
comment|//"thmx", // TIKA-418: Will be supported in POI 3.7 beta 2
comment|//"xps" // TIKA-418: Not yet supported by POI
block|}
decl_stmt|;
specifier|final
name|String
index|[]
name|mimeTypes
init|=
operator|new
name|String
index|[]
block|{
literal|"application/vnd.openxmlformats-officedocument.presentationml.presentation"
block|,
literal|"application/vnd.ms-powerpoint.presentation.macroenabled.12"
block|,
literal|"application/vnd.ms-powerpoint.slideshow.macroenabled.12"
block|,
literal|"application/vnd.openxmlformats-officedocument.presentationml.slideshow"
block|,
literal|"application/vnd.ms-powerpoint.template.macroenabled.12"
block|}
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|extensions
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|String
name|extension
init|=
name|extensions
index|[
name|i
index|]
decl_stmt|;
specifier|final
name|String
name|filename
init|=
literal|"testPPT."
operator|+
name|extension
decl_stmt|;
name|Parser
name|parser
init|=
operator|new
name|AutoDetectParser
argument_list|()
decl_stmt|;
specifier|final
name|Metadata
name|metadata
init|=
operator|new
name|Metadata
argument_list|()
decl_stmt|;
comment|// Allow the value to be access from the inner class
specifier|final
name|int
name|currentI
init|=
name|i
decl_stmt|;
name|ContentHandler
name|handler
init|=
operator|new
name|BodyContentHandler
argument_list|()
block|{
specifier|public
name|void
name|startDocument
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|"Mime-type checking for "
operator|+
name|filename
argument_list|,
name|mimeTypes
index|[
name|currentI
index|]
argument_list|,
name|metadata
operator|.
name|get
argument_list|(
name|Metadata
operator|.
name|CONTENT_TYPE
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Attachment Test"
argument_list|,
name|metadata
operator|.
name|get
argument_list|(
name|TikaCoreProperties
operator|.
name|TITLE
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Rajiv"
argument_list|,
name|metadata
operator|.
name|get
argument_list|(
name|TikaCoreProperties
operator|.
name|CREATOR
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Rajiv"
argument_list|,
name|metadata
operator|.
name|get
argument_list|(
name|Metadata
operator|.
name|AUTHOR
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
try|try
init|(
name|InputStream
name|input
init|=
name|getResourceAsStream
argument_list|(
literal|"/test-documents/"
operator|+
name|filename
argument_list|)
init|)
block|{
name|parser
operator|.
name|parse
argument_list|(
name|input
argument_list|,
name|handler
argument_list|,
name|metadata
argument_list|,
name|parseContext
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * For the PowerPoint formats we don't currently support, ensure that      * we don't break either      */
annotation|@
name|Test
specifier|public
name|void
name|testUnsupportedPowerPoint
parameter_list|()
throws|throws
name|Exception
block|{
name|String
index|[]
name|extensions
init|=
operator|new
name|String
index|[]
block|{
literal|"xps"
block|,
literal|"thmx"
block|}
decl_stmt|;
name|String
index|[]
name|mimeTypes
init|=
operator|new
name|String
index|[]
block|{
literal|"application/vnd.ms-xpsdocument"
block|,
literal|"application/vnd.openxmlformats-officedocument"
comment|// Is this right?
block|}
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|extensions
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|String
name|extension
init|=
name|extensions
index|[
name|i
index|]
decl_stmt|;
name|String
name|filename
init|=
literal|"testPPT."
operator|+
name|extension
decl_stmt|;
name|Parser
name|parser
init|=
operator|new
name|AutoDetectParser
argument_list|()
decl_stmt|;
name|Metadata
name|metadata
init|=
operator|new
name|Metadata
argument_list|()
decl_stmt|;
name|metadata
operator|.
name|set
argument_list|(
name|Metadata
operator|.
name|RESOURCE_NAME_KEY
argument_list|,
name|filename
argument_list|)
expr_stmt|;
name|ContentHandler
name|handler
init|=
operator|new
name|BodyContentHandler
argument_list|()
decl_stmt|;
try|try
init|(
name|InputStream
name|input
init|=
name|getResourceAsStream
argument_list|(
literal|"/test-documents/"
operator|+
name|filename
argument_list|)
init|)
block|{
name|parser
operator|.
name|parse
argument_list|(
name|input
argument_list|,
name|handler
argument_list|,
name|metadata
argument_list|,
name|parseContext
argument_list|)
expr_stmt|;
comment|// Should get the metadata
name|assertEquals
argument_list|(
literal|"Mime-type checking for "
operator|+
name|filename
argument_list|,
name|mimeTypes
index|[
name|i
index|]
argument_list|,
name|metadata
operator|.
name|get
argument_list|(
name|Metadata
operator|.
name|CONTENT_TYPE
argument_list|)
argument_list|)
expr_stmt|;
comment|// But that's about it
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testVariousPPTX
parameter_list|()
throws|throws
name|Exception
block|{
name|Metadata
name|metadata
init|=
operator|new
name|Metadata
argument_list|()
decl_stmt|;
name|String
name|xml
init|=
name|getXML
argument_list|(
literal|"testPPT_various.pptx"
argument_list|,
name|metadata
argument_list|,
name|parseContext
argument_list|)
operator|.
name|xml
decl_stmt|;
name|assertContains
argument_list|(
literal|"<p>Footnote appears here"
argument_list|,
name|xml
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"<p>[1] This is a footnote."
argument_list|,
name|xml
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"<p>This is the header text.</p>"
argument_list|,
name|xml
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"<p>This is the footer text.</p>"
argument_list|,
name|xml
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"<p>Here is a text box</p>"
argument_list|,
name|xml
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"<p>Bold"
argument_list|,
name|xml
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"italic underline superscript subscript"
argument_list|,
name|xml
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"<p>Here is a citation:"
argument_list|,
name|xml
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"Figure 1 This is a caption for Figure 1"
argument_list|,
name|xml
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"(Kramer)"
argument_list|,
name|xml
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"<table><tr>\t<td>Row 1 Col 1</td>"
argument_list|,
name|xml
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"<td>Row 2 Col 2</td>\t<td>Row 2 Col 3</td></tr>"
argument_list|,
name|xml
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"<p>Row 1 column 1</p>"
argument_list|,
name|xml
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"<p>Row 2 column 2</p>"
argument_list|,
name|xml
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"<p><a href=\"http://tika.apache.org/\">This is a hyperlink</a>"
argument_list|,
name|xml
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"<p>Here is a list:"
argument_list|,
name|xml
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|row
init|=
literal|1
init|;
name|row
operator|<=
literal|3
condition|;
name|row
operator|++
control|)
block|{
comment|//assertContains("·\tBullet " + row, content);
comment|//assertContains("\u00b7\tBullet " + row, content);
name|assertContains
argument_list|(
literal|"<p>Bullet "
operator|+
name|row
argument_list|,
name|xml
argument_list|)
expr_stmt|;
block|}
name|assertContains
argument_list|(
literal|"Here is a numbered list:"
argument_list|,
name|xml
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|row
init|=
literal|1
init|;
name|row
operator|<=
literal|3
condition|;
name|row
operator|++
control|)
block|{
comment|//assertContains(row + ")\tNumber bullet " + row, content);
comment|//assertContains(row + ") Number bullet " + row, content);
comment|// TODO: OOXMLExtractor fails to number the bullets:
name|assertContains
argument_list|(
literal|"<p>Number bullet "
operator|+
name|row
argument_list|,
name|xml
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|row
init|=
literal|1
init|;
name|row
operator|<=
literal|2
condition|;
name|row
operator|++
control|)
block|{
for|for
control|(
name|int
name|col
init|=
literal|1
init|;
name|col
operator|<=
literal|3
condition|;
name|col
operator|++
control|)
block|{
name|assertContains
argument_list|(
literal|"Row "
operator|+
name|row
operator|+
literal|" Col "
operator|+
name|col
argument_list|,
name|xml
argument_list|)
expr_stmt|;
block|}
block|}
name|assertContains
argument_list|(
literal|"Keyword1 Keyword2"
argument_list|,
name|xml
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Keyword1 Keyword2"
argument_list|,
name|metadata
operator|.
name|get
argument_list|(
name|Metadata
operator|.
name|KEYWORDS
argument_list|)
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"Subject is here"
argument_list|,
name|xml
argument_list|)
expr_stmt|;
comment|// TODO: Remove subject in Tika 2.0
name|assertEquals
argument_list|(
literal|"Subject is here"
argument_list|,
name|metadata
operator|.
name|get
argument_list|(
name|Metadata
operator|.
name|SUBJECT
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Subject is here"
argument_list|,
name|metadata
operator|.
name|get
argument_list|(
name|OfficeOpenXMLCore
operator|.
name|SUBJECT
argument_list|)
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"Suddenly some Japanese text:"
argument_list|,
name|xml
argument_list|)
expr_stmt|;
comment|// Special version of (GHQ)
name|assertContains
argument_list|(
literal|"\uff08\uff27\uff28\uff31\uff09"
argument_list|,
name|xml
argument_list|)
expr_stmt|;
comment|// 6 other characters
name|assertContains
argument_list|(
literal|"\u30be\u30eb\u30b2\u3068\u5c3e\u5d0e\u3001\u6de1\u3005\u3068\u6700\u671f"
argument_list|,
name|xml
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"And then some Gothic text:"
argument_list|,
name|xml
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"\uD800\uDF32\uD800\uDF3f\uD800\uDF44\uD800\uDF39\uD800\uDF43\uD800\uDF3A"
argument_list|,
name|xml
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCommentPPTX
parameter_list|()
throws|throws
name|Exception
block|{
name|XMLResult
name|r
init|=
name|getXML
argument_list|(
literal|"testPPT_comment.pptx"
argument_list|,
name|parseContext
argument_list|)
decl_stmt|;
name|assertContains
argument_list|(
literal|"<p class=\"slide-comment\"><b>Allison, Timothy B. (ATB)"
argument_list|,
name|r
operator|.
name|xml
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMasterFooter
parameter_list|()
throws|throws
name|Exception
block|{
name|assertContains
argument_list|(
literal|"Master footer is here"
argument_list|,
name|getXML
argument_list|(
literal|"testPPT_masterFooter.pptx"
argument_list|,
name|parseContext
argument_list|)
operator|.
name|xml
argument_list|)
expr_stmt|;
block|}
comment|/**      * TIKA-712 Master Slide Text from PPT and PPTX files      * should be extracted too      */
annotation|@
name|Test
specifier|public
name|void
name|testMasterText
parameter_list|()
throws|throws
name|Exception
block|{
name|assertContains
argument_list|(
literal|"Text that I added to the master slide"
argument_list|,
name|getXML
argument_list|(
literal|"testPPT_masterText.pptx"
argument_list|,
name|parseContext
argument_list|)
operator|.
name|xml
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMasterText2
parameter_list|()
throws|throws
name|Exception
block|{
name|assertContains
argument_list|(
literal|"Text that I added to the master slide"
argument_list|,
name|getXML
argument_list|(
literal|"testPPT_masterText2.pptx"
argument_list|,
name|parseContext
argument_list|)
operator|.
name|xml
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testWordArt
parameter_list|()
throws|throws
name|Exception
block|{
name|assertContains
argument_list|(
literal|"Here is some red word Art"
argument_list|,
name|getXML
argument_list|(
literal|"testWordArt.pptx"
argument_list|,
name|parseContext
argument_list|)
operator|.
name|xml
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPowerPointCustomProperties
parameter_list|()
throws|throws
name|Exception
block|{
name|Metadata
name|metadata
init|=
operator|new
name|Metadata
argument_list|()
decl_stmt|;
name|ParseContext
name|context
init|=
operator|new
name|ParseContext
argument_list|()
decl_stmt|;
name|context
operator|.
name|set
argument_list|(
name|Locale
operator|.
name|class
argument_list|,
name|Locale
operator|.
name|US
argument_list|)
expr_stmt|;
name|OfficeParserConfig
name|officeParserConfig
init|=
operator|new
name|OfficeParserConfig
argument_list|()
decl_stmt|;
name|officeParserConfig
operator|.
name|setUseSAXPptxExtractor
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|context
operator|.
name|set
argument_list|(
name|OfficeParserConfig
operator|.
name|class
argument_list|,
name|officeParserConfig
argument_list|)
expr_stmt|;
name|getXML
argument_list|(
literal|"testPPT_custom_props.pptx"
argument_list|,
name|metadata
argument_list|,
name|parseContext
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"application/vnd.openxmlformats-officedocument.presentationml.presentation"
argument_list|,
name|metadata
operator|.
name|get
argument_list|(
name|Metadata
operator|.
name|CONTENT_TYPE
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"JOUVIN ETIENNE"
argument_list|,
name|metadata
operator|.
name|get
argument_list|(
name|TikaCoreProperties
operator|.
name|CREATOR
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"EJ04325S"
argument_list|,
name|metadata
operator|.
name|get
argument_list|(
name|TikaCoreProperties
operator|.
name|MODIFIER
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"EJ04325S"
argument_list|,
name|metadata
operator|.
name|get
argument_list|(
name|Metadata
operator|.
name|LAST_AUTHOR
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"2011-08-22T13:30:53Z"
argument_list|,
name|metadata
operator|.
name|get
argument_list|(
name|TikaCoreProperties
operator|.
name|CREATED
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"2011-08-22T13:30:53Z"
argument_list|,
name|metadata
operator|.
name|get
argument_list|(
name|Metadata
operator|.
name|CREATION_DATE
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"2011-08-22T13:32:49Z"
argument_list|,
name|metadata
operator|.
name|get
argument_list|(
name|TikaCoreProperties
operator|.
name|MODIFIED
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"2011-08-22T13:32:49Z"
argument_list|,
name|metadata
operator|.
name|get
argument_list|(
name|Metadata
operator|.
name|DATE
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"1"
argument_list|,
name|metadata
operator|.
name|get
argument_list|(
name|Office
operator|.
name|SLIDE_COUNT
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"3"
argument_list|,
name|metadata
operator|.
name|get
argument_list|(
name|Office
operator|.
name|WORD_COUNT
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Test extraction properties pptx"
argument_list|,
name|metadata
operator|.
name|get
argument_list|(
name|TikaCoreProperties
operator|.
name|TITLE
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"true"
argument_list|,
name|metadata
operator|.
name|get
argument_list|(
literal|"custom:myCustomBoolean"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"3"
argument_list|,
name|metadata
operator|.
name|get
argument_list|(
literal|"custom:myCustomNumber"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"MyStringValue"
argument_list|,
name|metadata
operator|.
name|get
argument_list|(
literal|"custom:MyCustomString"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"2010-12-30T22:00:00Z"
argument_list|,
name|metadata
operator|.
name|get
argument_list|(
literal|"custom:MyCustomDate"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"2010-12-29T22:00:00Z"
argument_list|,
name|metadata
operator|.
name|get
argument_list|(
literal|"custom:myCustomSecondDate"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// TIKA-997:
annotation|@
name|Test
annotation|@
name|Ignore
argument_list|(
literal|"TODO: add in embedded file markup"
argument_list|)
specifier|public
name|void
name|testEmbeddedZipInPPTX
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|xml
init|=
name|getXML
argument_list|(
literal|"test_embedded_zip.pptx"
argument_list|,
name|parseContext
argument_list|)
operator|.
name|xml
decl_stmt|;
name|int
name|h
init|=
name|xml
operator|.
name|indexOf
argument_list|(
literal|"<div class=\"embedded\" id=\"slide1_rId3\" />"
argument_list|)
decl_stmt|;
name|int
name|i
init|=
name|xml
operator|.
name|indexOf
argument_list|(
literal|"Send me a note"
argument_list|)
decl_stmt|;
name|int
name|j
init|=
name|xml
operator|.
name|indexOf
argument_list|(
literal|"<div class=\"embedded\" id=\"slide2_rId4\" />"
argument_list|)
decl_stmt|;
name|int
name|k
init|=
name|xml
operator|.
name|indexOf
argument_list|(
literal|"<p>No title</p>"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|h
operator|!=
operator|-
literal|1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|i
operator|!=
operator|-
literal|1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|j
operator|!=
operator|-
literal|1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|k
operator|!=
operator|-
literal|1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|h
operator|<
name|i
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|i
operator|<
name|j
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|j
operator|<
name|k
argument_list|)
expr_stmt|;
block|}
comment|// TIKA-1032:
annotation|@
name|Test
annotation|@
name|Ignore
argument_list|(
literal|"TODO: add in embedded file markup"
argument_list|)
specifier|public
name|void
name|testEmbeddedPPTXTwoSlides
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|xml
init|=
name|getXML
argument_list|(
literal|"testPPT_embedded_two_slides.pptx"
argument_list|,
name|parseContext
argument_list|)
operator|.
name|xml
decl_stmt|;
name|assertContains
argument_list|(
literal|"<div class=\"embedded\" id=\"slide1_rId7\" />"
argument_list|,
name|xml
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"<div class=\"embedded\" id=\"slide2_rId7\" />"
argument_list|,
name|xml
argument_list|)
expr_stmt|;
block|}
comment|//TIKA-817
annotation|@
name|Test
specifier|public
name|void
name|testPPTXAutodate
parameter_list|()
throws|throws
name|Exception
block|{
comment|//Following POI-52368, the stored date is extracted,
comment|//not the auto-generated date.
name|XMLResult
name|result
init|=
name|getXML
argument_list|(
literal|"testPPT_autodate.pptx"
argument_list|,
name|parseContext
argument_list|)
decl_stmt|;
name|assertContains
argument_list|(
literal|"<p>Now</p>\n"
operator|+
literal|"<p>2011-12-19 10:20:04 AM</p>\n"
argument_list|,
name|result
operator|.
name|xml
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPPTXThumbnail
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|xml
init|=
name|getXML
argument_list|(
literal|"testPPTX_Thumbnail.pptx"
argument_list|,
name|parseContext
argument_list|)
operator|.
name|xml
decl_stmt|;
name|int
name|a
init|=
name|xml
operator|.
name|indexOf
argument_list|(
literal|"<body><div class=\"slide-content\"><p>This file contains an embedded thumbnail"
argument_list|)
decl_stmt|;
name|int
name|b
init|=
name|xml
operator|.
name|indexOf
argument_list|(
literal|"<div class=\"embedded\" id=\"/docProps/thumbnail.jpeg\" />"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|a
operator|!=
operator|-
literal|1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|b
operator|!=
operator|-
literal|1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|a
operator|<
name|b
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEncrypted
parameter_list|()
throws|throws
name|Exception
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|tests
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|tests
operator|.
name|put
argument_list|(
literal|"testPPT_protected_passtika.pptx"
argument_list|,
literal|"This is an encrypted PowerPoint 2007 slide."
argument_list|)
expr_stmt|;
name|Parser
name|parser
init|=
operator|new
name|AutoDetectParser
argument_list|()
decl_stmt|;
name|Metadata
name|m
init|=
operator|new
name|Metadata
argument_list|()
decl_stmt|;
name|PasswordProvider
name|passwordProvider
init|=
operator|new
name|PasswordProvider
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|getPassword
parameter_list|(
name|Metadata
name|metadata
parameter_list|)
block|{
return|return
literal|"tika"
return|;
block|}
block|}
decl_stmt|;
name|ParseContext
name|passwordContext
init|=
operator|new
name|ParseContext
argument_list|()
decl_stmt|;
name|passwordContext
operator|.
name|set
argument_list|(
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|PasswordProvider
operator|.
name|class
argument_list|,
name|passwordProvider
argument_list|)
expr_stmt|;
name|passwordContext
operator|.
name|set
argument_list|(
name|OfficeParserConfig
operator|.
name|class
argument_list|,
name|officeParserConfig
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|e
range|:
name|tests
operator|.
name|entrySet
argument_list|()
control|)
block|{
try|try
init|(
name|InputStream
name|is
init|=
name|getResourceAsStream
argument_list|(
literal|"/test-documents/"
operator|+
name|e
operator|.
name|getKey
argument_list|()
argument_list|)
init|)
block|{
name|ContentHandler
name|handler
init|=
operator|new
name|BodyContentHandler
argument_list|()
decl_stmt|;
name|parser
operator|.
name|parse
argument_list|(
name|is
argument_list|,
name|handler
argument_list|,
name|m
argument_list|,
name|passwordContext
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
name|e
operator|.
name|getValue
argument_list|()
argument_list|,
name|handler
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|ParseContext
name|context
init|=
operator|new
name|ParseContext
argument_list|()
decl_stmt|;
comment|//now try with no password
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|e
range|:
name|tests
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|boolean
name|exc
init|=
literal|false
decl_stmt|;
try|try
init|(
name|InputStream
name|is
init|=
name|getResourceAsStream
argument_list|(
literal|"/test-documents/"
operator|+
name|e
operator|.
name|getKey
argument_list|()
argument_list|)
init|)
block|{
name|ContentHandler
name|handler
init|=
operator|new
name|BodyContentHandler
argument_list|()
decl_stmt|;
name|parser
operator|.
name|parse
argument_list|(
name|is
argument_list|,
name|handler
argument_list|,
name|m
argument_list|,
name|context
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|EncryptedDocumentException
name|ex
parameter_list|)
block|{
name|exc
operator|=
literal|true
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|exc
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEmbeddedPDFInPPTX
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|Metadata
argument_list|>
name|metadataList
init|=
name|getRecursiveMetadata
argument_list|(
literal|"testPPT_EmbeddedPDF.pptx"
argument_list|,
name|parseContext
argument_list|)
decl_stmt|;
name|Metadata
name|pdfMetadata1
init|=
name|metadataList
operator|.
name|get
argument_list|(
literal|4
argument_list|)
decl_stmt|;
name|assertContains
argument_list|(
literal|"Apache Tika"
argument_list|,
name|pdfMetadata1
operator|.
name|get
argument_list|(
name|RecursiveParserWrapper
operator|.
name|TIKA_CONTENT
argument_list|)
argument_list|)
expr_stmt|;
name|Metadata
name|pdfMetadata2
init|=
name|metadataList
operator|.
name|get
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|assertContains
argument_list|(
literal|"Hello World"
argument_list|,
name|pdfMetadata2
operator|.
name|get
argument_list|(
name|RecursiveParserWrapper
operator|.
name|TIKA_CONTENT
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMacrosInPptm
parameter_list|()
throws|throws
name|Exception
block|{
name|Metadata
name|minExpected
init|=
operator|new
name|Metadata
argument_list|()
decl_stmt|;
name|minExpected
operator|.
name|add
argument_list|(
name|RecursiveParserWrapper
operator|.
name|TIKA_CONTENT
operator|.
name|getName
argument_list|()
argument_list|,
literal|"Sub Embolden()"
argument_list|)
expr_stmt|;
name|minExpected
operator|.
name|add
argument_list|(
name|RecursiveParserWrapper
operator|.
name|TIKA_CONTENT
operator|.
name|getName
argument_list|()
argument_list|,
literal|"Sub Italicize()"
argument_list|)
expr_stmt|;
name|minExpected
operator|.
name|add
argument_list|(
name|Metadata
operator|.
name|CONTENT_TYPE
argument_list|,
literal|"text/x-vbasic"
argument_list|)
expr_stmt|;
name|minExpected
operator|.
name|add
argument_list|(
name|TikaCoreProperties
operator|.
name|EMBEDDED_RESOURCE_TYPE
argument_list|,
name|TikaCoreProperties
operator|.
name|EmbeddedResourceType
operator|.
name|MACRO
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertContainsAtLeast
argument_list|(
name|minExpected
argument_list|,
name|getRecursiveMetadata
argument_list|(
literal|"testPPT_macros.pptm"
argument_list|,
name|parseContext
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

