begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|pdf
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|TikaTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|extractor
operator|.
name|ContainerExtractor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|extractor
operator|.
name|ParserContainerExtractor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|io
operator|.
name|TikaInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|metadata
operator|.
name|Metadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|metadata
operator|.
name|OfficeOpenXMLCore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|metadata
operator|.
name|TikaCoreProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|mime
operator|.
name|MediaType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|AutoDetectParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|ParseContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|Parser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|PasswordProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|microsoft
operator|.
name|AbstractPOIContainerExtractionTest
operator|.
name|TrackingHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|sax
operator|.
name|BodyContentHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|ContentHandler
import|;
end_import

begin_comment
comment|/**  * Test case for parsing pdf files.  */
end_comment

begin_class
specifier|public
class|class
name|PDFParserTest
extends|extends
name|TikaTest
block|{
specifier|public
specifier|static
specifier|final
name|MediaType
name|TYPE_TEXT
init|=
name|MediaType
operator|.
name|TEXT_PLAIN
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|MediaType
name|TYPE_EMF
init|=
name|MediaType
operator|.
name|application
argument_list|(
literal|"x-emf"
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|MediaType
name|TYPE_PDF
init|=
name|MediaType
operator|.
name|application
argument_list|(
literal|"pdf"
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|MediaType
name|TYPE_DOCX
init|=
name|MediaType
operator|.
name|application
argument_list|(
literal|"vnd.openxmlformats-officedocument.wordprocessingml.document"
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|MediaType
name|TYPE_DOC
init|=
name|MediaType
operator|.
name|application
argument_list|(
literal|"msword"
argument_list|)
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|testPdfParsing
parameter_list|()
throws|throws
name|Exception
block|{
name|Parser
name|parser
init|=
operator|new
name|AutoDetectParser
argument_list|()
decl_stmt|;
comment|// Should auto-detect!
name|Metadata
name|metadata
init|=
operator|new
name|Metadata
argument_list|()
decl_stmt|;
name|InputStream
name|stream
init|=
name|PDFParserTest
operator|.
name|class
operator|.
name|getResourceAsStream
argument_list|(
literal|"/test-documents/testPDF.pdf"
argument_list|)
decl_stmt|;
name|String
name|content
init|=
name|getText
argument_list|(
name|stream
argument_list|,
name|parser
argument_list|,
name|metadata
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"application/pdf"
argument_list|,
name|metadata
operator|.
name|get
argument_list|(
name|Metadata
operator|.
name|CONTENT_TYPE
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Bertrand Delacr\u00e9taz"
argument_list|,
name|metadata
operator|.
name|get
argument_list|(
name|TikaCoreProperties
operator|.
name|CREATOR
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Bertrand Delacr\u00e9taz"
argument_list|,
name|metadata
operator|.
name|get
argument_list|(
name|Metadata
operator|.
name|AUTHOR
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Firefox"
argument_list|,
name|metadata
operator|.
name|get
argument_list|(
name|TikaCoreProperties
operator|.
name|CREATOR_TOOL
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Apache Tika - Apache Tika"
argument_list|,
name|metadata
operator|.
name|get
argument_list|(
name|TikaCoreProperties
operator|.
name|TITLE
argument_list|)
argument_list|)
expr_stmt|;
comment|// Can't reliably test dates yet - see TIKA-451
comment|//        assertEquals("Sat Sep 15 10:02:31 BST 2007", metadata.get(Metadata.CREATION_DATE));
comment|//        assertEquals("Sat Sep 15 10:02:31 BST 2007", metadata.get(Metadata.LAST_MODIFIED));
name|assertTrue
argument_list|(
name|content
operator|.
name|contains
argument_list|(
literal|"Apache Tika"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|content
operator|.
name|contains
argument_list|(
literal|"Tika - Content Analysis Toolkit"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|content
operator|.
name|contains
argument_list|(
literal|"incubator"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|content
operator|.
name|contains
argument_list|(
literal|"Apache Software Foundation"
argument_list|)
argument_list|)
expr_stmt|;
comment|// testing how the end of one paragraph is separated from start of the next one
name|assertTrue
argument_list|(
literal|"should have word boundary after headline"
argument_list|,
operator|!
name|content
operator|.
name|contains
argument_list|(
literal|"ToolkitApache"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"should have word boundary between paragraphs"
argument_list|,
operator|!
name|content
operator|.
name|contains
argument_list|(
literal|"libraries.Apache"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCustomMetadata
parameter_list|()
throws|throws
name|Exception
block|{
name|Parser
name|parser
init|=
operator|new
name|AutoDetectParser
argument_list|()
decl_stmt|;
comment|// Should auto-detect!
name|Metadata
name|metadata
init|=
operator|new
name|Metadata
argument_list|()
decl_stmt|;
name|InputStream
name|stream
init|=
name|PDFParserTest
operator|.
name|class
operator|.
name|getResourceAsStream
argument_list|(
literal|"/test-documents/testPDF-custommetadata.pdf"
argument_list|)
decl_stmt|;
name|String
name|content
init|=
name|getText
argument_list|(
name|stream
argument_list|,
name|parser
argument_list|,
name|metadata
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"application/pdf"
argument_list|,
name|metadata
operator|.
name|get
argument_list|(
name|Metadata
operator|.
name|CONTENT_TYPE
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Document author"
argument_list|,
name|metadata
operator|.
name|get
argument_list|(
name|TikaCoreProperties
operator|.
name|CREATOR
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Document author"
argument_list|,
name|metadata
operator|.
name|get
argument_list|(
name|Metadata
operator|.
name|AUTHOR
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Document title"
argument_list|,
name|metadata
operator|.
name|get
argument_list|(
name|TikaCoreProperties
operator|.
name|TITLE
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Custom Value"
argument_list|,
name|metadata
operator|.
name|get
argument_list|(
literal|"Custom Property"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Array Entry 1"
argument_list|,
name|metadata
operator|.
name|get
argument_list|(
literal|"Custom Array"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|metadata
operator|.
name|getValues
argument_list|(
literal|"Custom Array"
argument_list|)
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Array Entry 1"
argument_list|,
name|metadata
operator|.
name|getValues
argument_list|(
literal|"Custom Array"
argument_list|)
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Array Entry 2"
argument_list|,
name|metadata
operator|.
name|getValues
argument_list|(
literal|"Custom Array"
argument_list|)
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|content
operator|.
name|contains
argument_list|(
literal|"Hello World!"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * PDFs can be "protected" with the default password. This means      *  they're encrypted (potentially both text and metadata),      *  but we can decrypt them easily.      */
annotation|@
name|Test
specifier|public
name|void
name|testProtectedPDF
parameter_list|()
throws|throws
name|Exception
block|{
name|Parser
name|parser
init|=
operator|new
name|AutoDetectParser
argument_list|()
decl_stmt|;
comment|// Should auto-detect!
name|ContentHandler
name|handler
init|=
operator|new
name|BodyContentHandler
argument_list|()
decl_stmt|;
name|Metadata
name|metadata
init|=
operator|new
name|Metadata
argument_list|()
decl_stmt|;
name|ParseContext
name|context
init|=
operator|new
name|ParseContext
argument_list|()
decl_stmt|;
name|InputStream
name|stream
init|=
name|PDFParserTest
operator|.
name|class
operator|.
name|getResourceAsStream
argument_list|(
literal|"/test-documents/testPDF_protected.pdf"
argument_list|)
decl_stmt|;
try|try
block|{
name|parser
operator|.
name|parse
argument_list|(
name|stream
argument_list|,
name|handler
argument_list|,
name|metadata
argument_list|,
name|context
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|stream
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"application/pdf"
argument_list|,
name|metadata
operator|.
name|get
argument_list|(
name|Metadata
operator|.
name|CONTENT_TYPE
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"The Bank of England"
argument_list|,
name|metadata
operator|.
name|get
argument_list|(
name|TikaCoreProperties
operator|.
name|CREATOR
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"The Bank of England"
argument_list|,
name|metadata
operator|.
name|get
argument_list|(
name|Metadata
operator|.
name|AUTHOR
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Speeches by Andrew G Haldane"
argument_list|,
name|metadata
operator|.
name|get
argument_list|(
name|OfficeOpenXMLCore
operator|.
name|SUBJECT
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Speeches by Andrew G Haldane"
argument_list|,
name|metadata
operator|.
name|get
argument_list|(
name|Metadata
operator|.
name|SUBJECT
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Rethinking the Financial Network, Speech by Andrew G Haldane, Executive Director, Financial Stability delivered at the Financial Student Association, Amsterdam on 28 April 2009"
argument_list|,
name|metadata
operator|.
name|get
argument_list|(
name|TikaCoreProperties
operator|.
name|TITLE
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|content
init|=
name|handler
operator|.
name|toString
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|content
operator|.
name|contains
argument_list|(
literal|"RETHINKING THE FINANCIAL NETWORK"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|content
operator|.
name|contains
argument_list|(
literal|"On 16 November 2002"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|content
operator|.
name|contains
argument_list|(
literal|"In many important respects"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Try again with an explicit empty password
name|handler
operator|=
operator|new
name|BodyContentHandler
argument_list|()
expr_stmt|;
name|metadata
operator|=
operator|new
name|Metadata
argument_list|()
expr_stmt|;
name|context
operator|=
operator|new
name|ParseContext
argument_list|()
expr_stmt|;
name|context
operator|.
name|set
argument_list|(
name|PasswordProvider
operator|.
name|class
argument_list|,
operator|new
name|PasswordProvider
argument_list|()
block|{
specifier|public
name|String
name|getPassword
parameter_list|(
name|Metadata
name|metadata
parameter_list|)
block|{
return|return
literal|""
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|stream
operator|=
name|PDFParserTest
operator|.
name|class
operator|.
name|getResourceAsStream
argument_list|(
literal|"/test-documents/testPDF_protected.pdf"
argument_list|)
expr_stmt|;
try|try
block|{
name|parser
operator|.
name|parse
argument_list|(
name|stream
argument_list|,
name|handler
argument_list|,
name|metadata
argument_list|,
name|context
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|stream
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"application/pdf"
argument_list|,
name|metadata
operator|.
name|get
argument_list|(
name|Metadata
operator|.
name|CONTENT_TYPE
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"The Bank of England"
argument_list|,
name|metadata
operator|.
name|get
argument_list|(
name|TikaCoreProperties
operator|.
name|CREATOR
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Speeches by Andrew G Haldane"
argument_list|,
name|metadata
operator|.
name|get
argument_list|(
name|OfficeOpenXMLCore
operator|.
name|SUBJECT
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Speeches by Andrew G Haldane"
argument_list|,
name|metadata
operator|.
name|get
argument_list|(
name|Metadata
operator|.
name|SUBJECT
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Rethinking the Financial Network, Speech by Andrew G Haldane, Executive Director, Financial Stability delivered at the Financial Student Association, Amsterdam on 28 April 2009"
argument_list|,
name|metadata
operator|.
name|get
argument_list|(
name|TikaCoreProperties
operator|.
name|TITLE
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|content
operator|.
name|contains
argument_list|(
literal|"RETHINKING THE FINANCIAL NETWORK"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|content
operator|.
name|contains
argument_list|(
literal|"On 16 November 2002"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|content
operator|.
name|contains
argument_list|(
literal|"In many important respects"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTwoTextBoxes
parameter_list|()
throws|throws
name|Exception
block|{
name|Parser
name|parser
init|=
operator|new
name|AutoDetectParser
argument_list|()
decl_stmt|;
comment|// Should auto-detect!
name|InputStream
name|stream
init|=
name|PDFParserTest
operator|.
name|class
operator|.
name|getResourceAsStream
argument_list|(
literal|"/test-documents/testPDFTwoTextBoxes.pdf"
argument_list|)
decl_stmt|;
name|String
name|content
init|=
name|getText
argument_list|(
name|stream
argument_list|,
name|parser
argument_list|)
decl_stmt|;
name|content
operator|=
name|content
operator|.
name|replaceAll
argument_list|(
literal|"\\s+"
argument_list|,
literal|" "
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|content
operator|.
name|contains
argument_list|(
literal|"Left column line 1 Left column line 2 Right column line 1 Right column line 2"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testVarious
parameter_list|()
throws|throws
name|Exception
block|{
name|Parser
name|parser
init|=
operator|new
name|AutoDetectParser
argument_list|()
decl_stmt|;
comment|// Should auto-detect!
name|Metadata
name|metadata
init|=
operator|new
name|Metadata
argument_list|()
decl_stmt|;
name|InputStream
name|stream
init|=
name|PDFParserTest
operator|.
name|class
operator|.
name|getResourceAsStream
argument_list|(
literal|"/test-documents/testPDFVarious.pdf"
argument_list|)
decl_stmt|;
name|String
name|content
init|=
name|getText
argument_list|(
name|stream
argument_list|,
name|parser
argument_list|,
name|metadata
argument_list|)
decl_stmt|;
comment|//content = content.replaceAll("\\s+"," ");
name|assertContains
argument_list|(
literal|"Footnote appears here"
argument_list|,
name|content
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"This is a footnote."
argument_list|,
name|content
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"This is the header text."
argument_list|,
name|content
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"This is the footer text."
argument_list|,
name|content
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"Here is a text box"
argument_list|,
name|content
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"Bold"
argument_list|,
name|content
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"italic"
argument_list|,
name|content
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"underline"
argument_list|,
name|content
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"superscript"
argument_list|,
name|content
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"subscript"
argument_list|,
name|content
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"Here is a citation:"
argument_list|,
name|content
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"Figure 1 This is a caption for Figure 1"
argument_list|,
name|content
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"(Kramer)"
argument_list|,
name|content
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"Row 1 Col 1 Row 1 Col 2 Row 1 Col 3 Row 2 Col 1 Row 2 Col 2 Row 2 Col 3"
argument_list|,
name|content
operator|.
name|replaceAll
argument_list|(
literal|"\\s+"
argument_list|,
literal|" "
argument_list|)
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"Row 1 column 1 Row 2 column 1 Row 1 column 2 Row 2 column 2"
argument_list|,
name|content
operator|.
name|replaceAll
argument_list|(
literal|"\\s+"
argument_list|,
literal|" "
argument_list|)
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"This is a hyperlink"
argument_list|,
name|content
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"Here is a list:"
argument_list|,
name|content
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|row
init|=
literal|1
init|;
name|row
operator|<=
literal|3
condition|;
name|row
operator|++
control|)
block|{
comment|//assertContains("·\tBullet " + row, content);
comment|//assertContains("\u00b7\tBullet " + row, content);
name|assertContains
argument_list|(
literal|"Bullet "
operator|+
name|row
argument_list|,
name|content
argument_list|)
expr_stmt|;
block|}
name|assertContains
argument_list|(
literal|"Here is a numbered list:"
argument_list|,
name|content
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|row
init|=
literal|1
init|;
name|row
operator|<=
literal|3
condition|;
name|row
operator|++
control|)
block|{
comment|//assertContains(row + ")\tNumber bullet " + row, content);
name|assertContains
argument_list|(
name|row
operator|+
literal|") Number bullet "
operator|+
name|row
argument_list|,
name|content
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|row
init|=
literal|1
init|;
name|row
operator|<=
literal|2
condition|;
name|row
operator|++
control|)
block|{
for|for
control|(
name|int
name|col
init|=
literal|1
init|;
name|col
operator|<=
literal|3
condition|;
name|col
operator|++
control|)
block|{
name|assertContains
argument_list|(
literal|"Row "
operator|+
name|row
operator|+
literal|" Col "
operator|+
name|col
argument_list|,
name|content
argument_list|)
expr_stmt|;
block|}
block|}
name|assertContains
argument_list|(
literal|"Keyword1 Keyword2"
argument_list|,
name|content
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Keyword1 Keyword2"
argument_list|,
name|metadata
operator|.
name|get
argument_list|(
name|Metadata
operator|.
name|KEYWORDS
argument_list|)
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"Subject is here"
argument_list|,
name|content
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Subject is here"
argument_list|,
name|metadata
operator|.
name|get
argument_list|(
name|OfficeOpenXMLCore
operator|.
name|SUBJECT
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Subject is here"
argument_list|,
name|metadata
operator|.
name|get
argument_list|(
name|Metadata
operator|.
name|SUBJECT
argument_list|)
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"Suddenly some Japanese text:"
argument_list|,
name|content
argument_list|)
expr_stmt|;
comment|// Special version of (GHQ)
name|assertContains
argument_list|(
literal|"\uff08\uff27\uff28\uff31\uff09"
argument_list|,
name|content
argument_list|)
expr_stmt|;
comment|// 6 other characters
name|assertContains
argument_list|(
literal|"\u30be\u30eb\u30b2\u3068\u5c3e\u5d0e\u3001\u6de1\u3005\u3068\u6700\u671f"
argument_list|,
name|content
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"And then some Gothic text:"
argument_list|,
name|content
argument_list|)
expr_stmt|;
comment|// TODO: I saved the word doc as a PDF, but that
comment|// process somehow, apparently lost the gothic
comment|// chars, so we cannot test this here:
comment|//assertContains("\uD800\uDF32\uD800\uDF3f\uD800\uDF44\uD800\uDF39\uD800\uDF43\uD800\uDF3A", content);
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAnnotations
parameter_list|()
throws|throws
name|Exception
block|{
name|Parser
name|parser
init|=
operator|new
name|AutoDetectParser
argument_list|()
decl_stmt|;
comment|// Should auto-detect!
name|InputStream
name|stream
init|=
name|getResourceAsStream
argument_list|(
literal|"/test-documents/testAnnotations.pdf"
argument_list|)
decl_stmt|;
name|String
name|content
init|=
name|getText
argument_list|(
name|stream
argument_list|,
name|parser
argument_list|)
decl_stmt|;
name|content
operator|=
name|content
operator|.
name|replaceAll
argument_list|(
literal|"[\\s\u00a0]+"
argument_list|,
literal|" "
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"Here is some text"
argument_list|,
name|content
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"Here is a comment"
argument_list|,
name|content
argument_list|)
expr_stmt|;
comment|// Test w/ annotation text disabled:
name|PDFParser
name|pdfParser
init|=
operator|new
name|PDFParser
argument_list|()
decl_stmt|;
name|pdfParser
operator|.
name|getPDFParserConfig
argument_list|()
operator|.
name|setExtractAnnotationText
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|stream
operator|=
name|getResourceAsStream
argument_list|(
literal|"/test-documents/testAnnotations.pdf"
argument_list|)
expr_stmt|;
name|content
operator|=
name|getText
argument_list|(
name|stream
argument_list|,
name|pdfParser
argument_list|)
expr_stmt|;
name|content
operator|=
name|content
operator|.
name|replaceAll
argument_list|(
literal|"[\\s\u00a0]+"
argument_list|,
literal|" "
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"Here is some text"
argument_list|,
name|content
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|content
operator|.
name|indexOf
argument_list|(
literal|"Here is a comment"
argument_list|)
argument_list|)
expr_stmt|;
comment|// annotation text disabled through parsecontext
name|ParseContext
name|context
init|=
operator|new
name|ParseContext
argument_list|()
decl_stmt|;
name|PDFParserConfig
name|config
init|=
operator|new
name|PDFParserConfig
argument_list|()
decl_stmt|;
name|config
operator|.
name|setExtractAnnotationText
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|context
operator|.
name|set
argument_list|(
name|PDFParserConfig
operator|.
name|class
argument_list|,
name|config
argument_list|)
expr_stmt|;
name|stream
operator|=
name|getResourceAsStream
argument_list|(
literal|"/test-documents/testAnnotations.pdf"
argument_list|)
expr_stmt|;
name|content
operator|=
name|getText
argument_list|(
name|stream
argument_list|,
name|parser
argument_list|,
name|context
argument_list|)
expr_stmt|;
name|content
operator|=
name|content
operator|.
name|replaceAll
argument_list|(
literal|"[\\s\u00a0]+"
argument_list|,
literal|" "
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"Here is some text"
argument_list|,
name|content
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|content
operator|.
name|indexOf
argument_list|(
literal|"Here is a comment"
argument_list|)
argument_list|)
expr_stmt|;
comment|// TIKA-738: make sure no extra</p> tags
name|String
name|xml
init|=
name|getXML
argument_list|(
literal|"testAnnotations.pdf"
argument_list|)
operator|.
name|xml
decl_stmt|;
name|assertEquals
argument_list|(
name|substringCount
argument_list|(
literal|"<p>"
argument_list|,
name|xml
argument_list|)
argument_list|,
name|substringCount
argument_list|(
literal|"</p>"
argument_list|,
name|xml
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// TIKA-981
annotation|@
name|Test
specifier|public
name|void
name|testPopupAnnotation
parameter_list|()
throws|throws
name|Exception
block|{
name|Parser
name|parser
init|=
operator|new
name|AutoDetectParser
argument_list|()
decl_stmt|;
comment|// Should auto-detect!
name|InputStream
name|stream
init|=
name|getResourceAsStream
argument_list|(
literal|"/test-documents/testPopupAnnotation.pdf"
argument_list|)
decl_stmt|;
name|String
name|content
init|=
name|getText
argument_list|(
name|stream
argument_list|,
name|parser
argument_list|)
decl_stmt|;
name|assertContains
argument_list|(
literal|"this is the note"
argument_list|,
name|content
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"igalsh"
argument_list|,
name|content
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEmbeddedPDFs
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|xml
init|=
name|getXML
argument_list|(
literal|"testPDFPackage.pdf"
argument_list|)
operator|.
name|xml
decl_stmt|;
name|assertContains
argument_list|(
literal|"PDF1"
argument_list|,
name|xml
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"PDF2"
argument_list|,
name|xml
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|int
name|substringCount
parameter_list|(
name|String
name|needle
parameter_list|,
name|String
name|haystack
parameter_list|)
block|{
name|int
name|upto
init|=
operator|-
literal|1
decl_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
specifier|final
name|int
name|next
init|=
name|haystack
operator|.
name|indexOf
argument_list|(
name|needle
argument_list|,
name|upto
argument_list|)
decl_stmt|;
if|if
condition|(
name|next
operator|==
operator|-
literal|1
condition|)
block|{
break|break;
block|}
name|count
operator|++
expr_stmt|;
name|upto
operator|=
name|next
operator|+
literal|1
expr_stmt|;
block|}
return|return
name|count
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPageNumber
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|XMLResult
name|result
init|=
name|getXML
argument_list|(
literal|"testPageNumber.pdf"
argument_list|)
decl_stmt|;
specifier|final
name|String
name|content
init|=
name|result
operator|.
name|xml
operator|.
name|replaceAll
argument_list|(
literal|"\\s+"
argument_list|,
literal|""
argument_list|)
decl_stmt|;
name|assertContains
argument_list|(
literal|"<p>1</p>"
argument_list|,
name|content
argument_list|)
expr_stmt|;
block|}
comment|/**      * Test to ensure that Links are extracted from the text      *       * Note - the PDF contains the text "This is a hyperlink" which      *  a hyperlink annotation, linking to the tika site, on it. This      *  test will need updating when we're able to apply the annotation      *  to the text itself, rather than following on afterwards as now       */
annotation|@
name|Test
specifier|public
name|void
name|testLinks
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|XMLResult
name|result
init|=
name|getXML
argument_list|(
literal|"testPDFVarious.pdf"
argument_list|)
decl_stmt|;
name|assertContains
argument_list|(
literal|"<div class=\"annotation\"><a href=\"http://tika.apache.org/\" /></div>"
argument_list|,
name|result
operator|.
name|xml
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDisableAutoSpace
parameter_list|()
throws|throws
name|Exception
block|{
name|PDFParser
name|parser
init|=
operator|new
name|PDFParser
argument_list|()
decl_stmt|;
name|parser
operator|.
name|getPDFParserConfig
argument_list|()
operator|.
name|setEnableAutoSpace
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|InputStream
name|stream
init|=
name|getResourceAsStream
argument_list|(
literal|"/test-documents/testExtraSpaces.pdf"
argument_list|)
decl_stmt|;
name|String
name|content
init|=
name|getText
argument_list|(
name|stream
argument_list|,
name|parser
argument_list|)
decl_stmt|;
name|content
operator|=
name|content
operator|.
name|replaceAll
argument_list|(
literal|"[\\s\u00a0]+"
argument_list|,
literal|" "
argument_list|)
expr_stmt|;
comment|// Text is correct when autoSpace is off:
name|assertContains
argument_list|(
literal|"Here is some formatted text"
argument_list|,
name|content
argument_list|)
expr_stmt|;
name|parser
operator|.
name|getPDFParserConfig
argument_list|()
operator|.
name|setEnableAutoSpace
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|stream
operator|=
name|getResourceAsStream
argument_list|(
literal|"/test-documents/testExtraSpaces.pdf"
argument_list|)
expr_stmt|;
name|content
operator|=
name|getText
argument_list|(
name|stream
argument_list|,
name|parser
argument_list|)
expr_stmt|;
name|content
operator|=
name|content
operator|.
name|replaceAll
argument_list|(
literal|"[\\s\u00a0]+"
argument_list|,
literal|" "
argument_list|)
expr_stmt|;
comment|// Text is correct when autoSpace is off:
comment|// Text has extra spaces when autoSpace is on
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|content
operator|.
name|indexOf
argument_list|(
literal|"Here is some formatted text"
argument_list|)
argument_list|)
expr_stmt|;
comment|//now try with autodetect
name|Parser
name|autoParser
init|=
operator|new
name|AutoDetectParser
argument_list|()
decl_stmt|;
name|ParseContext
name|context
init|=
operator|new
name|ParseContext
argument_list|()
decl_stmt|;
name|PDFParserConfig
name|config
init|=
operator|new
name|PDFParserConfig
argument_list|()
decl_stmt|;
name|context
operator|.
name|set
argument_list|(
name|PDFParserConfig
operator|.
name|class
argument_list|,
name|config
argument_list|)
expr_stmt|;
comment|//default is true
name|stream
operator|=
name|getResourceAsStream
argument_list|(
literal|"/test-documents/testExtraSpaces.pdf"
argument_list|)
expr_stmt|;
name|content
operator|=
name|getText
argument_list|(
name|stream
argument_list|,
name|autoParser
argument_list|,
name|context
argument_list|)
expr_stmt|;
name|content
operator|=
name|content
operator|.
name|replaceAll
argument_list|(
literal|"[\\s\u00a0]+"
argument_list|,
literal|" "
argument_list|)
expr_stmt|;
comment|// Text has extra spaces when autoSpace is on
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|content
operator|.
name|indexOf
argument_list|(
literal|"Here is some formatted text"
argument_list|)
argument_list|)
expr_stmt|;
name|config
operator|.
name|setEnableAutoSpace
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|stream
operator|=
name|getResourceAsStream
argument_list|(
literal|"/test-documents/testExtraSpaces.pdf"
argument_list|)
expr_stmt|;
name|content
operator|=
name|getText
argument_list|(
name|stream
argument_list|,
name|parser
argument_list|,
name|context
argument_list|)
expr_stmt|;
name|content
operator|=
name|content
operator|.
name|replaceAll
argument_list|(
literal|"[\\s\u00a0]+"
argument_list|,
literal|" "
argument_list|)
expr_stmt|;
comment|// Text is correct when autoSpace is off:
name|assertContains
argument_list|(
literal|"Here is some formatted text"
argument_list|,
name|content
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDuplicateOverlappingText
parameter_list|()
throws|throws
name|Exception
block|{
name|PDFParser
name|parser
init|=
operator|new
name|PDFParser
argument_list|()
decl_stmt|;
name|InputStream
name|stream
init|=
name|getResourceAsStream
argument_list|(
literal|"/test-documents/testOverlappingText.pdf"
argument_list|)
decl_stmt|;
comment|// Default is false (keep overlapping text):
name|String
name|content
init|=
name|getText
argument_list|(
name|stream
argument_list|,
name|parser
argument_list|)
decl_stmt|;
name|assertContains
argument_list|(
literal|"Text the first timeText the second time"
argument_list|,
name|content
argument_list|)
expr_stmt|;
name|parser
operator|.
name|getPDFParserConfig
argument_list|()
operator|.
name|setSuppressDuplicateOverlappingText
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|stream
operator|=
name|getResourceAsStream
argument_list|(
literal|"/test-documents/testOverlappingText.pdf"
argument_list|)
expr_stmt|;
name|content
operator|=
name|getText
argument_list|(
name|stream
argument_list|,
name|parser
argument_list|)
expr_stmt|;
comment|// "Text the first" was dedup'd:
name|assertContains
argument_list|(
literal|"Text the first timesecond time"
argument_list|,
name|content
argument_list|)
expr_stmt|;
comment|//now try with autodetect
name|Parser
name|autoParser
init|=
operator|new
name|AutoDetectParser
argument_list|()
decl_stmt|;
name|ParseContext
name|context
init|=
operator|new
name|ParseContext
argument_list|()
decl_stmt|;
name|PDFParserConfig
name|config
init|=
operator|new
name|PDFParserConfig
argument_list|()
decl_stmt|;
name|context
operator|.
name|set
argument_list|(
name|PDFParserConfig
operator|.
name|class
argument_list|,
name|config
argument_list|)
expr_stmt|;
name|stream
operator|=
name|getResourceAsStream
argument_list|(
literal|"/test-documents/testOverlappingText.pdf"
argument_list|)
expr_stmt|;
comment|// Default is false (keep overlapping text):
name|content
operator|=
name|getText
argument_list|(
name|stream
argument_list|,
name|autoParser
argument_list|,
name|context
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"Text the first timeText the second time"
argument_list|,
name|content
argument_list|)
expr_stmt|;
name|config
operator|.
name|setSuppressDuplicateOverlappingText
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|stream
operator|=
name|getResourceAsStream
argument_list|(
literal|"/test-documents/testOverlappingText.pdf"
argument_list|)
expr_stmt|;
name|content
operator|=
name|getText
argument_list|(
name|stream
argument_list|,
name|autoParser
argument_list|,
name|context
argument_list|)
expr_stmt|;
comment|// "Text the first" was dedup'd:
name|assertContains
argument_list|(
literal|"Text the first timesecond time"
argument_list|,
name|content
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSortByPosition
parameter_list|()
throws|throws
name|Exception
block|{
name|PDFParser
name|parser
init|=
operator|new
name|PDFParser
argument_list|()
decl_stmt|;
name|parser
operator|.
name|getPDFParserConfig
argument_list|()
operator|.
name|setEnableAutoSpace
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|InputStream
name|stream
init|=
name|getResourceAsStream
argument_list|(
literal|"/test-documents/testPDFTwoTextBoxes.pdf"
argument_list|)
decl_stmt|;
comment|// Default is false (do not sort):
name|String
name|content
init|=
name|getText
argument_list|(
name|stream
argument_list|,
name|parser
argument_list|)
decl_stmt|;
name|content
operator|=
name|content
operator|.
name|replaceAll
argument_list|(
literal|"\\s+"
argument_list|,
literal|" "
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"Left column line 1 Left column line 2 Right column line 1 Right column line 2"
argument_list|,
name|content
argument_list|)
expr_stmt|;
name|parser
operator|.
name|getPDFParserConfig
argument_list|()
operator|.
name|setSortByPosition
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|stream
operator|=
name|getResourceAsStream
argument_list|(
literal|"/test-documents/testPDFTwoTextBoxes.pdf"
argument_list|)
expr_stmt|;
name|content
operator|=
name|getText
argument_list|(
name|stream
argument_list|,
name|parser
argument_list|)
expr_stmt|;
name|content
operator|=
name|content
operator|.
name|replaceAll
argument_list|(
literal|"\\s+"
argument_list|,
literal|" "
argument_list|)
expr_stmt|;
comment|// Column text is now interleaved:
name|assertContains
argument_list|(
literal|"Left column line 1 Right column line 1 Left colu mn line 2 Right column line 2"
argument_list|,
name|content
argument_list|)
expr_stmt|;
comment|//now try setting autodetect via parsecontext
name|AutoDetectParser
name|autoParser
init|=
operator|new
name|AutoDetectParser
argument_list|()
decl_stmt|;
name|ParseContext
name|context
init|=
operator|new
name|ParseContext
argument_list|()
decl_stmt|;
name|PDFParserConfig
name|config
init|=
operator|new
name|PDFParserConfig
argument_list|()
decl_stmt|;
name|context
operator|.
name|set
argument_list|(
name|PDFParserConfig
operator|.
name|class
argument_list|,
name|config
argument_list|)
expr_stmt|;
name|stream
operator|=
name|getResourceAsStream
argument_list|(
literal|"/test-documents/testPDFTwoTextBoxes.pdf"
argument_list|)
expr_stmt|;
comment|// Default is false (do not sort):
name|content
operator|=
name|getText
argument_list|(
name|stream
argument_list|,
name|autoParser
argument_list|,
name|context
argument_list|)
expr_stmt|;
name|content
operator|=
name|content
operator|.
name|replaceAll
argument_list|(
literal|"\\s+"
argument_list|,
literal|" "
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"Left column line 1 Left column line 2 Right column line 1 Right column line 2"
argument_list|,
name|content
argument_list|)
expr_stmt|;
name|config
operator|.
name|setSortByPosition
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|context
operator|.
name|set
argument_list|(
name|PDFParserConfig
operator|.
name|class
argument_list|,
name|config
argument_list|)
expr_stmt|;
name|stream
operator|=
name|getResourceAsStream
argument_list|(
literal|"/test-documents/testPDFTwoTextBoxes.pdf"
argument_list|)
expr_stmt|;
name|content
operator|=
name|getText
argument_list|(
name|stream
argument_list|,
name|parser
argument_list|)
expr_stmt|;
name|content
operator|=
name|content
operator|.
name|replaceAll
argument_list|(
literal|"\\s+"
argument_list|,
literal|" "
argument_list|)
expr_stmt|;
comment|// Column text is now interleaved:
name|assertContains
argument_list|(
literal|"Left column line 1 Right column line 1 Left colu mn line 2 Right column line 2"
argument_list|,
name|content
argument_list|)
expr_stmt|;
block|}
comment|// TIKA-1035
annotation|@
name|Test
specifier|public
name|void
name|testBookmarks
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|xml
init|=
name|getXML
argument_list|(
literal|"testPDF_bookmarks.pdf"
argument_list|)
operator|.
name|xml
decl_stmt|;
name|int
name|i
init|=
name|xml
operator|.
name|indexOf
argument_list|(
literal|"Denmark bookmark is here"
argument_list|)
decl_stmt|;
name|int
name|j
init|=
name|xml
operator|.
name|indexOf
argument_list|(
literal|"</body>"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|i
operator|!=
operator|-
literal|1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|j
operator|!=
operator|-
literal|1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|i
operator|<
name|j
argument_list|)
expr_stmt|;
block|}
comment|//TIKA-1124
annotation|@
name|Test
specifier|public
name|void
name|testEmbeddedPDFEmbeddingAnotherDocument
parameter_list|()
throws|throws
name|Exception
block|{
comment|/* format of test doc:          docx/             pdf/                docx        */
name|Parser
name|parser
init|=
operator|new
name|AutoDetectParser
argument_list|()
decl_stmt|;
comment|// Should auto-detect!
name|ContentHandler
name|handler
init|=
operator|new
name|BodyContentHandler
argument_list|()
decl_stmt|;
name|Metadata
name|metadata
init|=
operator|new
name|Metadata
argument_list|()
decl_stmt|;
name|ParseContext
name|context
init|=
operator|new
name|ParseContext
argument_list|()
decl_stmt|;
name|String
name|content
init|=
literal|""
decl_stmt|;
name|InputStream
name|stream
init|=
literal|null
decl_stmt|;
try|try
block|{
name|context
operator|.
name|set
argument_list|(
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|Parser
operator|.
name|class
argument_list|,
name|parser
argument_list|)
expr_stmt|;
name|stream
operator|=
name|getResourceAsStream
argument_list|(
literal|"/test-documents/testPDFEmbeddingAndEmbedded.docx"
argument_list|)
expr_stmt|;
name|parser
operator|.
name|parse
argument_list|(
name|stream
argument_list|,
name|handler
argument_list|,
name|metadata
argument_list|,
name|context
argument_list|)
expr_stmt|;
name|content
operator|=
name|handler
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|stream
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|int
name|outerHaystack
init|=
name|content
operator|.
name|indexOf
argument_list|(
literal|"Outer_haystack"
argument_list|)
decl_stmt|;
name|int
name|pdfHaystack
init|=
name|content
operator|.
name|indexOf
argument_list|(
literal|"pdf_haystack"
argument_list|)
decl_stmt|;
name|int
name|needle
init|=
name|content
operator|.
name|indexOf
argument_list|(
literal|"Needle"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|outerHaystack
operator|>
operator|-
literal|1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|pdfHaystack
operator|>
operator|-
literal|1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|needle
operator|>
operator|-
literal|1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|needle
operator|>
name|pdfHaystack
operator|&&
name|pdfHaystack
operator|>
name|outerHaystack
argument_list|)
expr_stmt|;
comment|//plagiarized from POIContainerExtractionTest.  Thank you!
name|TrackingHandler
name|tracker
init|=
operator|new
name|TrackingHandler
argument_list|()
decl_stmt|;
name|TikaInputStream
name|tis
decl_stmt|;
name|ContainerExtractor
name|ex
init|=
operator|new
name|ParserContainerExtractor
argument_list|()
decl_stmt|;
try|try
block|{
name|tis
operator|=
name|TikaInputStream
operator|.
name|get
argument_list|(
name|getResourceAsStream
argument_list|(
literal|"/test-documents/testPDFEmbeddingAndEmbedded.docx"
argument_list|)
argument_list|)
expr_stmt|;
name|ex
operator|.
name|extract
argument_list|(
name|tis
argument_list|,
name|ex
argument_list|,
name|tracker
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|stream
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|ex
operator|.
name|isSupported
argument_list|(
name|tis
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|tracker
operator|.
name|filenames
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|tracker
operator|.
name|mediaTypes
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"image1.emf"
argument_list|,
name|tracker
operator|.
name|filenames
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|tracker
operator|.
name|filenames
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"My first attachment"
argument_list|,
name|tracker
operator|.
name|filenames
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|TYPE_EMF
argument_list|,
name|tracker
operator|.
name|mediaTypes
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|TYPE_PDF
argument_list|,
name|tracker
operator|.
name|mediaTypes
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|TYPE_DOCX
argument_list|,
name|tracker
operator|.
name|mediaTypes
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * tests for equality between traditional sequential parser      * and newer nonsequential parser.      *       * TODO: more testing      */
annotation|@
name|Test
specifier|public
name|void
name|testSequentialParser
parameter_list|()
throws|throws
name|Exception
block|{
name|Parser
name|defaultParser
init|=
operator|new
name|AutoDetectParser
argument_list|()
decl_stmt|;
name|Parser
name|sequentialParser
init|=
operator|new
name|AutoDetectParser
argument_list|()
decl_stmt|;
name|ParseContext
name|context
init|=
operator|new
name|ParseContext
argument_list|()
decl_stmt|;
name|PDFParserConfig
name|config
init|=
operator|new
name|PDFParserConfig
argument_list|()
decl_stmt|;
name|config
operator|.
name|setUseNonSequentialParser
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|context
operator|.
name|set
argument_list|(
name|PDFParserConfig
operator|.
name|class
argument_list|,
name|config
argument_list|)
expr_stmt|;
name|File
name|testDocs
init|=
operator|new
name|File
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getResource
argument_list|(
literal|"/test-documents"
argument_list|)
operator|.
name|toURI
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|pdfs
init|=
literal|0
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|knownMetadataDiffs
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
comment|//PDFBox-1792/Tika-1203
name|knownMetadataDiffs
operator|.
name|add
argument_list|(
literal|"testAnnotations.pdf"
argument_list|)
expr_stmt|;
comment|//PDFBox-1806
name|knownMetadataDiffs
operator|.
name|add
argument_list|(
literal|"test_acroForm2.pdf"
argument_list|)
expr_stmt|;
comment|//empty for now
name|Set
argument_list|<
name|String
argument_list|>
name|knownContentDiffs
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|File
name|f
range|:
name|testDocs
operator|.
name|listFiles
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|f
operator|.
name|getName
argument_list|()
operator|.
name|toLowerCase
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|".pdf"
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|pdfs
operator|++
expr_stmt|;
name|Metadata
name|defaultMetadata
init|=
operator|new
name|Metadata
argument_list|()
decl_stmt|;
name|String
name|defaultContent
init|=
name|getText
argument_list|(
operator|new
name|FileInputStream
argument_list|(
name|f
argument_list|)
argument_list|,
name|defaultParser
argument_list|,
name|defaultMetadata
argument_list|)
decl_stmt|;
name|Metadata
name|sequentialMetadata
init|=
operator|new
name|Metadata
argument_list|()
decl_stmt|;
name|String
name|sequentialContent
init|=
name|getText
argument_list|(
operator|new
name|FileInputStream
argument_list|(
name|f
argument_list|)
argument_list|,
name|sequentialParser
argument_list|,
name|context
argument_list|,
name|sequentialMetadata
argument_list|)
decl_stmt|;
if|if
condition|(
name|knownContentDiffs
operator|.
name|contains
argument_list|(
name|f
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|assertFalse
argument_list|(
name|f
operator|.
name|getName
argument_list|()
argument_list|,
name|defaultContent
operator|.
name|equals
argument_list|(
name|sequentialContent
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertEquals
argument_list|(
name|f
operator|.
name|getName
argument_list|()
argument_list|,
name|defaultContent
argument_list|,
name|sequentialContent
argument_list|)
expr_stmt|;
block|}
comment|//skip this one file.
if|if
condition|(
name|knownMetadataDiffs
operator|.
name|contains
argument_list|(
name|f
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|assertFalse
argument_list|(
name|f
operator|.
name|getName
argument_list|()
argument_list|,
name|defaultMetadata
operator|.
name|equals
argument_list|(
name|sequentialMetadata
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertEquals
argument_list|(
name|f
operator|.
name|getName
argument_list|()
argument_list|,
name|defaultMetadata
argument_list|,
name|sequentialMetadata
argument_list|)
expr_stmt|;
block|}
block|}
comment|//make sure nothing went wrong with getting the resource to test-documents
comment|//This will require modification with each new pdf test.
comment|//If this is too annoying, we can turn it off.
name|assertEquals
argument_list|(
literal|"Number of pdf files tested"
argument_list|,
literal|16
argument_list|,
name|pdfs
argument_list|)
expr_stmt|;
block|}
comment|// TIKA-973
comment|//commented out until test documents that are unambiguously
comment|//consistent with Apache License v2.0 are contributed.
comment|//TODO: add back test for AcroForm extraction; test document should include
comment|//recursive forms
comment|/*    public void testAcroForm() throws Exception{        Parser p = new AutoDetectParser();        ParseContext context = new ParseContext();        InputStream stream = getResourceAsStream("/test-documents/testPDF_acroForm1.pdf");        String txt = getText(stream, p, context);        stream.close();         //simple first level form contents        assertContains("to: John Doe", txt);        //checkbox        assertContains("xpackaging: Yes", txt);                //this guarantees that the form processor        //worked recursively at least once...i.e. it didn't just        //take the first form        stream = getResourceAsStream("/test-documents/testPDF_acroForm2.pdf");        txt = getText(stream, p, context);        stream.close();        assertContains("123 Main St.", txt);                        //now test with nonsequential parser        PDFParserConfig config = new PDFParserConfig();        config.setUseNonSequentialParser(true);        context.set(PDFParserConfig.class, config);        stream = getResourceAsStream("/test-documents/testPDF_acroForm1.pdf");        txt = getText(stream, p, context);        stream.close();                //simple first level form contents        assertContains("to: John Doe", txt);        //checkbox        assertContains("xpackaging: Yes", txt);                //this guarantees that the form processor        //worked recursively at least once...i.e. it didn't just        //take the first form        stream = getResourceAsStream("/test-documents/testPDF_acroForm2.pdf");        txt = getText(stream, p, context);        assertContains("123 Main St.", txt);        stream.close();          } */
comment|//TIKA-1226
specifier|public
name|void
name|testSignatureInAcroForm
parameter_list|()
throws|throws
name|Exception
block|{
comment|//The current test doc does not contain any content in the signature area.
comment|//This just tests that a RuntimeException is not thrown.
comment|//TODO: find a better test file for this issue.
name|String
name|xml
init|=
name|getXML
argument_list|(
literal|"/testPDF_acroform3.pdf"
argument_list|)
operator|.
name|xml
decl_stmt|;
name|assertTrue
argument_list|(
literal|"found"
argument_list|,
operator|(
name|xml
operator|.
name|indexOf
argument_list|(
literal|"<li>aTextField: TIKA-1226</li>"
argument_list|)
operator|>
operator|-
literal|1
operator|)
argument_list|)
expr_stmt|;
block|}
comment|//TIKA-1228
specifier|public
name|void
name|testEmbeddedFilesInChildren
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|xml
init|=
name|getXML
argument_list|(
literal|"/testPDF_childAttachments.pdf"
argument_list|)
operator|.
name|xml
decl_stmt|;
comment|//"regressiveness" exists only in Unit10.doc not in the container pdf document
name|assertTrue
argument_list|(
name|xml
operator|.
name|contains
argument_list|(
literal|"regressiveness"
argument_list|)
argument_list|)
expr_stmt|;
name|TrackingHandler
name|tracker
init|=
operator|new
name|TrackingHandler
argument_list|()
decl_stmt|;
name|TikaInputStream
name|tis
init|=
literal|null
decl_stmt|;
name|ContainerExtractor
name|ex
init|=
operator|new
name|ParserContainerExtractor
argument_list|()
decl_stmt|;
try|try
block|{
name|tis
operator|=
name|TikaInputStream
operator|.
name|get
argument_list|(
name|getResourceAsStream
argument_list|(
literal|"/test-documents/testPDF_childAttachments.pdf"
argument_list|)
argument_list|)
expr_stmt|;
name|ex
operator|.
name|extract
argument_list|(
name|tis
argument_list|,
name|ex
argument_list|,
name|tracker
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|tis
operator|!=
literal|null
condition|)
block|{
name|tis
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|tracker
operator|.
name|filenames
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|tracker
operator|.
name|mediaTypes
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Press Quality(1).joboptions"
argument_list|,
name|tracker
operator|.
name|filenames
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Unit10.doc"
argument_list|,
name|tracker
operator|.
name|filenames
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|TYPE_TEXT
argument_list|,
name|tracker
operator|.
name|mediaTypes
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|TYPE_DOC
argument_list|,
name|tracker
operator|.
name|mediaTypes
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

