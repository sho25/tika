begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|pdf
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertArrayEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|TikaTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|exception
operator|.
name|AccessPermissionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|exception
operator|.
name|EncryptedDocumentException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|extractor
operator|.
name|ContainerExtractor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|extractor
operator|.
name|DocumentSelector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|extractor
operator|.
name|ParserContainerExtractor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|io
operator|.
name|TikaInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|metadata
operator|.
name|Metadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|metadata
operator|.
name|OfficeOpenXMLCore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|metadata
operator|.
name|TikaCoreProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|metadata
operator|.
name|XMPMM
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|mime
operator|.
name|MediaType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|AutoDetectParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|ParseContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|Parser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|PasswordProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|RecursiveParserWrapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|sax
operator|.
name|BasicContentHandlerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|sax
operator|.
name|BodyContentHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|sax
operator|.
name|ContentHandlerDecorator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|ContentHandler
import|;
end_import

begin_comment
comment|/**  * Test case for parsing pdf files.  */
end_comment

begin_class
specifier|public
class|class
name|PDFParserTest
extends|extends
name|TikaTest
block|{
specifier|public
specifier|static
specifier|final
name|MediaType
name|TYPE_TEXT
init|=
name|MediaType
operator|.
name|TEXT_PLAIN
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|MediaType
name|TYPE_EMF
init|=
name|MediaType
operator|.
name|application
argument_list|(
literal|"x-emf"
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|MediaType
name|TYPE_PDF
init|=
name|MediaType
operator|.
name|application
argument_list|(
literal|"pdf"
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|MediaType
name|TYPE_DOCX
init|=
name|MediaType
operator|.
name|application
argument_list|(
literal|"vnd.openxmlformats-officedocument.wordprocessingml.document"
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|MediaType
name|TYPE_DOC
init|=
name|MediaType
operator|.
name|application
argument_list|(
literal|"msword"
argument_list|)
decl_stmt|;
specifier|public
specifier|static
name|Level
name|PDFBOX_LOG_LEVEL
init|=
name|Level
operator|.
name|INFO
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|setup
parameter_list|()
block|{
comment|//remember default logging level, but turn off for PDFParserTest
name|PDFBOX_LOG_LEVEL
operator|=
name|Logger
operator|.
name|getLogger
argument_list|(
literal|"org.apache.pdfbox"
argument_list|)
operator|.
name|getLevel
argument_list|()
expr_stmt|;
name|Logger
operator|.
name|getLogger
argument_list|(
literal|"org.apache.pdfbox"
argument_list|)
operator|.
name|setLevel
argument_list|(
name|Level
operator|.
name|OFF
argument_list|)
expr_stmt|;
block|}
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|tearDown
parameter_list|()
block|{
comment|//return to regular logging level
name|Logger
operator|.
name|getLogger
argument_list|(
literal|"org.apache.pdfbox"
argument_list|)
operator|.
name|setLevel
argument_list|(
name|PDFBOX_LOG_LEVEL
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|int
name|substringCount
parameter_list|(
name|String
name|needle
parameter_list|,
name|String
name|haystack
parameter_list|)
block|{
name|int
name|upto
init|=
operator|-
literal|1
decl_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
specifier|final
name|int
name|next
init|=
name|haystack
operator|.
name|indexOf
argument_list|(
name|needle
argument_list|,
name|upto
argument_list|)
decl_stmt|;
if|if
condition|(
name|next
operator|==
operator|-
literal|1
condition|)
block|{
break|break;
block|}
name|count
operator|++
expr_stmt|;
name|upto
operator|=
name|next
operator|+
literal|1
expr_stmt|;
block|}
return|return
name|count
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPdfParsing
parameter_list|()
throws|throws
name|Exception
block|{
name|XMLResult
name|r
init|=
name|getXML
argument_list|(
literal|"testPDF.pdf"
argument_list|)
decl_stmt|;
name|Metadata
name|metadata
init|=
name|r
operator|.
name|metadata
decl_stmt|;
name|String
name|xml
init|=
name|r
operator|.
name|xml
decl_stmt|;
name|assertEquals
argument_list|(
literal|"application/pdf"
argument_list|,
name|metadata
operator|.
name|get
argument_list|(
name|Metadata
operator|.
name|CONTENT_TYPE
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Bertrand Delacr\u00e9taz"
argument_list|,
name|metadata
operator|.
name|get
argument_list|(
name|TikaCoreProperties
operator|.
name|CREATOR
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Bertrand Delacr\u00e9taz"
argument_list|,
name|metadata
operator|.
name|get
argument_list|(
name|Metadata
operator|.
name|AUTHOR
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Firefox"
argument_list|,
name|metadata
operator|.
name|get
argument_list|(
name|TikaCoreProperties
operator|.
name|CREATOR_TOOL
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Apache Tika - Apache Tika"
argument_list|,
name|metadata
operator|.
name|get
argument_list|(
name|TikaCoreProperties
operator|.
name|TITLE
argument_list|)
argument_list|)
expr_stmt|;
comment|// Can't reliably test dates yet - see TIKA-451
comment|//        assertEquals("Sat Sep 15 10:02:31 BST 2007", metadata.get(Metadata.CREATION_DATE));
comment|//        assertEquals("Sat Sep 15 10:02:31 BST 2007", metadata.get(Metadata.LAST_MODIFIED));
name|assertContains
argument_list|(
literal|"Apache Tika"
argument_list|,
name|xml
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"Tika - Content Analysis Toolkit"
argument_list|,
name|xml
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"incubator"
argument_list|,
name|xml
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"Apache Software Foundation"
argument_list|,
name|xml
argument_list|)
expr_stmt|;
comment|// testing how the end of one paragraph is separated from start of the next one
name|assertTrue
argument_list|(
literal|"should have word boundary after headline"
argument_list|,
operator|!
name|xml
operator|.
name|contains
argument_list|(
literal|"ToolkitApache"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"should have word boundary between paragraphs"
argument_list|,
operator|!
name|xml
operator|.
name|contains
argument_list|(
literal|"libraries.Apache"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPdfParsingMetadataOnly
parameter_list|()
throws|throws
name|Exception
block|{
name|Metadata
name|metadata
init|=
name|getXML
argument_list|(
literal|"testPDF.pdf"
argument_list|)
operator|.
name|metadata
decl_stmt|;
name|assertEquals
argument_list|(
literal|"application/pdf"
argument_list|,
name|metadata
operator|.
name|get
argument_list|(
name|Metadata
operator|.
name|CONTENT_TYPE
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Bertrand Delacr\u00e9taz"
argument_list|,
name|metadata
operator|.
name|get
argument_list|(
name|TikaCoreProperties
operator|.
name|CREATOR
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Firefox"
argument_list|,
name|metadata
operator|.
name|get
argument_list|(
name|TikaCoreProperties
operator|.
name|CREATOR_TOOL
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Apache Tika - Apache Tika"
argument_list|,
name|metadata
operator|.
name|get
argument_list|(
name|TikaCoreProperties
operator|.
name|TITLE
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCustomMetadata
parameter_list|()
throws|throws
name|Exception
block|{
name|XMLResult
name|r
init|=
name|getXML
argument_list|(
literal|"testPDF-custommetadata.pdf"
argument_list|)
decl_stmt|;
name|Metadata
name|metadata
init|=
name|r
operator|.
name|metadata
decl_stmt|;
name|assertEquals
argument_list|(
literal|"application/pdf"
argument_list|,
name|metadata
operator|.
name|get
argument_list|(
name|Metadata
operator|.
name|CONTENT_TYPE
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Document author"
argument_list|,
name|metadata
operator|.
name|get
argument_list|(
name|TikaCoreProperties
operator|.
name|CREATOR
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Document author"
argument_list|,
name|metadata
operator|.
name|get
argument_list|(
name|Metadata
operator|.
name|AUTHOR
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Document title"
argument_list|,
name|metadata
operator|.
name|get
argument_list|(
name|TikaCoreProperties
operator|.
name|TITLE
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Custom Value"
argument_list|,
name|metadata
operator|.
name|get
argument_list|(
literal|"Custom Property"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Array Entry 1"
argument_list|,
name|metadata
operator|.
name|get
argument_list|(
literal|"Custom Array"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|metadata
operator|.
name|getValues
argument_list|(
literal|"Custom Array"
argument_list|)
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Array Entry 1"
argument_list|,
name|metadata
operator|.
name|getValues
argument_list|(
literal|"Custom Array"
argument_list|)
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Array Entry 2"
argument_list|,
name|metadata
operator|.
name|getValues
argument_list|(
literal|"Custom Array"
argument_list|)
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"Hello World!"
argument_list|,
name|r
operator|.
name|xml
argument_list|)
expr_stmt|;
block|}
comment|/**      * PDFs can be "protected" with the default password. This means      * they're encrypted (potentially both text and metadata),      * but we can decrypt them easily.      */
annotation|@
name|Test
specifier|public
name|void
name|testProtectedPDF
parameter_list|()
throws|throws
name|Exception
block|{
name|XMLResult
name|r
init|=
name|getXML
argument_list|(
literal|"testPDF_protected.pdf"
argument_list|)
decl_stmt|;
name|Metadata
name|metadata
init|=
name|r
operator|.
name|metadata
decl_stmt|;
name|assertEquals
argument_list|(
literal|"true"
argument_list|,
name|metadata
operator|.
name|get
argument_list|(
literal|"pdf:encrypted"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"application/pdf"
argument_list|,
name|metadata
operator|.
name|get
argument_list|(
name|Metadata
operator|.
name|CONTENT_TYPE
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"The Bank of England"
argument_list|,
name|metadata
operator|.
name|get
argument_list|(
name|TikaCoreProperties
operator|.
name|CREATOR
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"The Bank of England"
argument_list|,
name|metadata
operator|.
name|get
argument_list|(
name|Metadata
operator|.
name|AUTHOR
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Speeches by Andrew G Haldane"
argument_list|,
name|metadata
operator|.
name|get
argument_list|(
name|OfficeOpenXMLCore
operator|.
name|SUBJECT
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Speeches by Andrew G Haldane"
argument_list|,
name|metadata
operator|.
name|get
argument_list|(
name|Metadata
operator|.
name|SUBJECT
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Rethinking the Financial Network, Speech by Andrew G Haldane, Executive Director, Financial Stability delivered at the Financial Student Association, Amsterdam on 28 April 2009"
argument_list|,
name|metadata
operator|.
name|get
argument_list|(
name|TikaCoreProperties
operator|.
name|TITLE
argument_list|)
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"RETHINKING THE FINANCIAL NETWORK"
argument_list|,
name|r
operator|.
name|xml
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"On 16 November 2002"
argument_list|,
name|r
operator|.
name|xml
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"In many important respects"
argument_list|,
name|r
operator|.
name|xml
argument_list|)
expr_stmt|;
comment|// Try again with an explicit empty password
name|ParseContext
name|context
init|=
operator|new
name|ParseContext
argument_list|()
decl_stmt|;
name|context
operator|.
name|set
argument_list|(
name|PasswordProvider
operator|.
name|class
argument_list|,
operator|new
name|PasswordProvider
argument_list|()
block|{
specifier|public
name|String
name|getPassword
parameter_list|(
name|Metadata
name|metadata
parameter_list|)
block|{
return|return
literal|""
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|r
operator|=
name|getXML
argument_list|(
literal|"testPDF_protected.pdf"
argument_list|,
name|context
argument_list|)
expr_stmt|;
name|metadata
operator|=
name|r
operator|.
name|metadata
expr_stmt|;
name|assertEquals
argument_list|(
literal|"true"
argument_list|,
name|metadata
operator|.
name|get
argument_list|(
literal|"pdf:encrypted"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"application/pdf"
argument_list|,
name|metadata
operator|.
name|get
argument_list|(
name|Metadata
operator|.
name|CONTENT_TYPE
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"The Bank of England"
argument_list|,
name|metadata
operator|.
name|get
argument_list|(
name|TikaCoreProperties
operator|.
name|CREATOR
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Speeches by Andrew G Haldane"
argument_list|,
name|metadata
operator|.
name|get
argument_list|(
name|OfficeOpenXMLCore
operator|.
name|SUBJECT
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Speeches by Andrew G Haldane"
argument_list|,
name|metadata
operator|.
name|get
argument_list|(
name|Metadata
operator|.
name|SUBJECT
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Rethinking the Financial Network, Speech by Andrew G Haldane, Executive Director, Financial Stability delivered at the Financial Student Association, Amsterdam on 28 April 2009"
argument_list|,
name|metadata
operator|.
name|get
argument_list|(
name|TikaCoreProperties
operator|.
name|TITLE
argument_list|)
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"RETHINKING THE FINANCIAL NETWORK"
argument_list|,
name|r
operator|.
name|xml
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"On 16 November 2002"
argument_list|,
name|r
operator|.
name|xml
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"In many important respects"
argument_list|,
name|r
operator|.
name|xml
argument_list|)
expr_stmt|;
comment|//now test wrong password
name|context
operator|.
name|set
argument_list|(
name|PasswordProvider
operator|.
name|class
argument_list|,
operator|new
name|PasswordProvider
argument_list|()
block|{
specifier|public
name|String
name|getPassword
parameter_list|(
name|Metadata
name|metadata
parameter_list|)
block|{
return|return
literal|"WRONG!!!!"
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|boolean
name|ex
init|=
literal|false
decl_stmt|;
name|ContentHandler
name|handler
init|=
operator|new
name|BodyContentHandler
argument_list|()
decl_stmt|;
name|metadata
operator|=
operator|new
name|Metadata
argument_list|()
expr_stmt|;
try|try
init|(
name|InputStream
name|stream
init|=
name|PDFParserTest
operator|.
name|class
operator|.
name|getResourceAsStream
argument_list|(
literal|"/test-documents/testPDF_protected.pdf"
argument_list|)
init|)
block|{
name|Parser
name|parser
init|=
operator|new
name|AutoDetectParser
argument_list|()
decl_stmt|;
name|parser
operator|.
name|parse
argument_list|(
name|stream
argument_list|,
name|handler
argument_list|,
name|metadata
argument_list|,
name|context
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|EncryptedDocumentException
name|e
parameter_list|)
block|{
name|ex
operator|=
literal|true
expr_stmt|;
block|}
name|assertTrue
argument_list|(
literal|"encryption exception"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"application/pdf"
argument_list|,
name|metadata
operator|.
name|get
argument_list|(
name|Metadata
operator|.
name|CONTENT_TYPE
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"true"
argument_list|,
name|metadata
operator|.
name|get
argument_list|(
literal|"pdf:encrypted"
argument_list|)
argument_list|)
expr_stmt|;
comment|//pdf:encrypted, X-Parsed-By and Content-Type
name|assertEquals
argument_list|(
literal|"very little metadata should be parsed"
argument_list|,
literal|3
argument_list|,
name|metadata
operator|.
name|names
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|handler
operator|.
name|toString
argument_list|()
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTwoTextBoxes
parameter_list|()
throws|throws
name|Exception
block|{
name|Parser
name|parser
init|=
operator|new
name|AutoDetectParser
argument_list|()
decl_stmt|;
comment|// Should auto-detect!
name|String
name|content
decl_stmt|;
try|try
init|(
name|InputStream
name|stream
init|=
name|PDFParserTest
operator|.
name|class
operator|.
name|getResourceAsStream
argument_list|(
literal|"/test-documents/testPDFTwoTextBoxes.pdf"
argument_list|)
init|)
block|{
name|content
operator|=
name|getText
argument_list|(
name|stream
argument_list|,
name|parser
argument_list|)
expr_stmt|;
block|}
name|content
operator|=
name|content
operator|.
name|replaceAll
argument_list|(
literal|"\\s+"
argument_list|,
literal|" "
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"Left column line 1 Left column line 2 Right column line 1 Right column line 2"
argument_list|,
name|content
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testVarious
parameter_list|()
throws|throws
name|Exception
block|{
name|Parser
name|parser
init|=
operator|new
name|AutoDetectParser
argument_list|()
decl_stmt|;
comment|// Should auto-detect!
name|Metadata
name|metadata
init|=
operator|new
name|Metadata
argument_list|()
decl_stmt|;
name|String
name|content
decl_stmt|;
try|try
init|(
name|InputStream
name|stream
init|=
name|PDFParserTest
operator|.
name|class
operator|.
name|getResourceAsStream
argument_list|(
literal|"/test-documents/testPDFVarious.pdf"
argument_list|)
init|)
block|{
name|content
operator|=
name|getText
argument_list|(
name|stream
argument_list|,
name|parser
argument_list|,
name|metadata
argument_list|)
expr_stmt|;
block|}
comment|//content = content.replaceAll("\\s+"," ");
name|assertContains
argument_list|(
literal|"Footnote appears here"
argument_list|,
name|content
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"This is a footnote."
argument_list|,
name|content
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"This is the header text."
argument_list|,
name|content
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"This is the footer text."
argument_list|,
name|content
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"Here is a text box"
argument_list|,
name|content
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"Bold"
argument_list|,
name|content
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"italic"
argument_list|,
name|content
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"underline"
argument_list|,
name|content
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"superscript"
argument_list|,
name|content
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"subscript"
argument_list|,
name|content
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"Here is a citation:"
argument_list|,
name|content
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"Figure 1 This is a caption for Figure 1"
argument_list|,
name|content
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"(Kramer)"
argument_list|,
name|content
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"Row 1 Col 1 Row 1 Col 2 Row 1 Col 3 Row 2 Col 1 Row 2 Col 2 Row 2 Col 3"
argument_list|,
name|content
operator|.
name|replaceAll
argument_list|(
literal|"\\s+"
argument_list|,
literal|" "
argument_list|)
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"Row 1 column 1 Row 2 column 1 Row 1 column 2 Row 2 column 2"
argument_list|,
name|content
operator|.
name|replaceAll
argument_list|(
literal|"\\s+"
argument_list|,
literal|" "
argument_list|)
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"This is a hyperlink"
argument_list|,
name|content
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"Here is a list:"
argument_list|,
name|content
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|row
init|=
literal|1
init|;
name|row
operator|<=
literal|3
condition|;
name|row
operator|++
control|)
block|{
comment|//assertContains("·\tBullet " + row, content);
comment|//assertContains("\u00b7\tBullet " + row, content);
name|assertContains
argument_list|(
literal|"Bullet "
operator|+
name|row
argument_list|,
name|content
argument_list|)
expr_stmt|;
block|}
name|assertContains
argument_list|(
literal|"Here is a numbered list:"
argument_list|,
name|content
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|row
init|=
literal|1
init|;
name|row
operator|<=
literal|3
condition|;
name|row
operator|++
control|)
block|{
comment|//assertContains(row + ")\tNumber bullet " + row, content);
name|assertContains
argument_list|(
name|row
operator|+
literal|") Number bullet "
operator|+
name|row
argument_list|,
name|content
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|row
init|=
literal|1
init|;
name|row
operator|<=
literal|2
condition|;
name|row
operator|++
control|)
block|{
for|for
control|(
name|int
name|col
init|=
literal|1
init|;
name|col
operator|<=
literal|3
condition|;
name|col
operator|++
control|)
block|{
name|assertContains
argument_list|(
literal|"Row "
operator|+
name|row
operator|+
literal|" Col "
operator|+
name|col
argument_list|,
name|content
argument_list|)
expr_stmt|;
block|}
block|}
name|assertContains
argument_list|(
literal|"Keyword1 Keyword2"
argument_list|,
name|content
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Keyword1 Keyword2"
argument_list|,
name|metadata
operator|.
name|get
argument_list|(
name|Metadata
operator|.
name|KEYWORDS
argument_list|)
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"Subject is here"
argument_list|,
name|content
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Subject is here"
argument_list|,
name|metadata
operator|.
name|get
argument_list|(
name|OfficeOpenXMLCore
operator|.
name|SUBJECT
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Subject is here"
argument_list|,
name|metadata
operator|.
name|get
argument_list|(
name|Metadata
operator|.
name|SUBJECT
argument_list|)
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"Suddenly some Japanese text:"
argument_list|,
name|content
argument_list|)
expr_stmt|;
comment|// Special version of (GHQ)
name|assertContains
argument_list|(
literal|"\uff08\uff27\uff28\uff31\uff09"
argument_list|,
name|content
argument_list|)
expr_stmt|;
comment|// 6 other characters
name|assertContains
argument_list|(
literal|"\u30be\u30eb\u30b2\u3068\u5c3e\u5d0e\u3001\u6de1\u3005\u3068\u6700\u671f"
argument_list|,
name|content
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"And then some Gothic text:"
argument_list|,
name|content
argument_list|)
expr_stmt|;
comment|// TODO: I saved the word doc as a PDF, but that
comment|// process somehow, apparently lost the gothic
comment|// chars, so we cannot test this here:
comment|//assertContains("\uD800\uDF32\uD800\uDF3f\uD800\uDF44\uD800\uDF39\uD800\uDF43\uD800\uDF3A", content);
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAnnotations
parameter_list|()
throws|throws
name|Exception
block|{
name|Parser
name|parser
init|=
operator|new
name|AutoDetectParser
argument_list|()
decl_stmt|;
comment|// Should auto-detect!
name|String
name|content
decl_stmt|;
try|try
init|(
name|InputStream
name|stream
init|=
name|getResourceAsStream
argument_list|(
literal|"/test-documents/testAnnotations.pdf"
argument_list|)
init|)
block|{
name|content
operator|=
name|getText
argument_list|(
name|stream
argument_list|,
name|parser
argument_list|)
expr_stmt|;
block|}
name|content
operator|=
name|content
operator|.
name|replaceAll
argument_list|(
literal|"[\\s\u00a0]+"
argument_list|,
literal|" "
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"Here is some text"
argument_list|,
name|content
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"Here is a comment"
argument_list|,
name|content
argument_list|)
expr_stmt|;
comment|// Test w/ annotation text disabled:
name|PDFParser
name|pdfParser
init|=
operator|new
name|PDFParser
argument_list|()
decl_stmt|;
name|pdfParser
operator|.
name|getPDFParserConfig
argument_list|()
operator|.
name|setExtractAnnotationText
argument_list|(
literal|false
argument_list|)
expr_stmt|;
try|try
init|(
name|InputStream
name|stream
init|=
name|getResourceAsStream
argument_list|(
literal|"/test-documents/testAnnotations.pdf"
argument_list|)
init|)
block|{
name|content
operator|=
name|getText
argument_list|(
name|stream
argument_list|,
name|pdfParser
argument_list|)
expr_stmt|;
block|}
name|content
operator|=
name|content
operator|.
name|replaceAll
argument_list|(
literal|"[\\s\u00a0]+"
argument_list|,
literal|" "
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"Here is some text"
argument_list|,
name|content
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|content
operator|.
name|indexOf
argument_list|(
literal|"Here is a comment"
argument_list|)
argument_list|)
expr_stmt|;
comment|// annotation text disabled through parsecontext
name|ParseContext
name|context
init|=
operator|new
name|ParseContext
argument_list|()
decl_stmt|;
name|PDFParserConfig
name|config
init|=
operator|new
name|PDFParserConfig
argument_list|()
decl_stmt|;
name|config
operator|.
name|setExtractAnnotationText
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|context
operator|.
name|set
argument_list|(
name|PDFParserConfig
operator|.
name|class
argument_list|,
name|config
argument_list|)
expr_stmt|;
try|try
init|(
name|InputStream
name|stream
init|=
name|getResourceAsStream
argument_list|(
literal|"/test-documents/testAnnotations.pdf"
argument_list|)
init|)
block|{
name|content
operator|=
name|getText
argument_list|(
name|stream
argument_list|,
name|parser
argument_list|,
name|context
argument_list|)
expr_stmt|;
block|}
name|content
operator|=
name|content
operator|.
name|replaceAll
argument_list|(
literal|"[\\s\u00a0]+"
argument_list|,
literal|" "
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"Here is some text"
argument_list|,
name|content
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|content
operator|.
name|indexOf
argument_list|(
literal|"Here is a comment"
argument_list|)
argument_list|)
expr_stmt|;
comment|// TIKA-738: make sure no extra</p> tags
name|String
name|xml
init|=
name|getXML
argument_list|(
literal|"testAnnotations.pdf"
argument_list|)
operator|.
name|xml
decl_stmt|;
name|assertEquals
argument_list|(
name|substringCount
argument_list|(
literal|"<p>"
argument_list|,
name|xml
argument_list|)
argument_list|,
name|substringCount
argument_list|(
literal|"</p>"
argument_list|,
name|xml
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// TIKA-981
annotation|@
name|Test
specifier|public
name|void
name|testPopupAnnotation
parameter_list|()
throws|throws
name|Exception
block|{
name|XMLResult
name|r
init|=
name|getXML
argument_list|(
literal|"testPopupAnnotation.pdf"
argument_list|)
decl_stmt|;
name|assertContains
argument_list|(
literal|"this is the note"
argument_list|,
name|r
operator|.
name|xml
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"igalsh"
argument_list|,
name|r
operator|.
name|xml
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEmbeddedPDFs
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|xml
init|=
name|getXML
argument_list|(
literal|"testPDFPackage.pdf"
argument_list|)
operator|.
name|xml
decl_stmt|;
name|assertContains
argument_list|(
literal|"PDF1"
argument_list|,
name|xml
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"PDF2"
argument_list|,
name|xml
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPageNumber
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|XMLResult
name|result
init|=
name|getXML
argument_list|(
literal|"testPageNumber.pdf"
argument_list|)
decl_stmt|;
specifier|final
name|String
name|content
init|=
name|result
operator|.
name|xml
operator|.
name|replaceAll
argument_list|(
literal|"\\s+"
argument_list|,
literal|""
argument_list|)
decl_stmt|;
name|assertContains
argument_list|(
literal|"<p>1</p>"
argument_list|,
name|content
argument_list|)
expr_stmt|;
block|}
comment|/**      * Test to ensure that Links are extracted from the text      *<p/>      * Note - the PDF contains the text "This is a hyperlink" which      * a hyperlink annotation, linking to the tika site, on it. This      * test will need updating when we're able to apply the annotation      * to the text itself, rather than following on afterwards as now      */
annotation|@
name|Test
specifier|public
name|void
name|testLinks
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|XMLResult
name|result
init|=
name|getXML
argument_list|(
literal|"testPDFVarious.pdf"
argument_list|)
decl_stmt|;
name|assertContains
argument_list|(
literal|"<div class=\"annotation\"><a href=\"http://tika.apache.org/\" /></div>"
argument_list|,
name|result
operator|.
name|xml
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDisableAutoSpace
parameter_list|()
throws|throws
name|Exception
block|{
name|PDFParser
name|parser
init|=
operator|new
name|PDFParser
argument_list|()
decl_stmt|;
name|parser
operator|.
name|getPDFParserConfig
argument_list|()
operator|.
name|setEnableAutoSpace
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|XMLResult
name|r
init|=
name|getXML
argument_list|(
literal|"testExtraSpaces.pdf"
argument_list|,
name|parser
argument_list|)
decl_stmt|;
name|String
name|content
init|=
name|r
operator|.
name|xml
operator|.
name|replaceAll
argument_list|(
literal|"[\\s\u00a0]+"
argument_list|,
literal|" "
argument_list|)
decl_stmt|;
comment|// Text is correct when autoSpace is off:
name|assertContains
argument_list|(
literal|"Here is some formatted text"
argument_list|,
name|content
argument_list|)
expr_stmt|;
name|parser
operator|.
name|getPDFParserConfig
argument_list|()
operator|.
name|setEnableAutoSpace
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|r
operator|=
name|getXML
argument_list|(
literal|"testExtraSpaces.pdf"
argument_list|,
name|parser
argument_list|)
expr_stmt|;
name|content
operator|=
name|r
operator|.
name|xml
operator|.
name|replaceAll
argument_list|(
literal|"[\\s\u00a0]+"
argument_list|,
literal|" "
argument_list|)
expr_stmt|;
comment|// Text is correct when autoSpace is off:
comment|// Text has extra spaces when autoSpace is on
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|content
operator|.
name|indexOf
argument_list|(
literal|"Here is some formatted text"
argument_list|)
argument_list|)
expr_stmt|;
comment|//now try with autodetect
name|Parser
name|autoParser
init|=
operator|new
name|AutoDetectParser
argument_list|()
decl_stmt|;
name|ParseContext
name|context
init|=
operator|new
name|ParseContext
argument_list|()
decl_stmt|;
name|PDFParserConfig
name|config
init|=
operator|new
name|PDFParserConfig
argument_list|()
decl_stmt|;
name|context
operator|.
name|set
argument_list|(
name|PDFParserConfig
operator|.
name|class
argument_list|,
name|config
argument_list|)
expr_stmt|;
comment|//default is true
name|r
operator|=
name|getXML
argument_list|(
literal|"testExtraSpaces.pdf"
argument_list|,
name|autoParser
argument_list|,
name|context
argument_list|)
expr_stmt|;
name|content
operator|=
name|r
operator|.
name|xml
operator|.
name|replaceAll
argument_list|(
literal|"[\\s\u00a0]+"
argument_list|,
literal|" "
argument_list|)
expr_stmt|;
comment|// Text has extra spaces when autoSpace is on
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|content
operator|.
name|indexOf
argument_list|(
literal|"Here is some formatted text"
argument_list|)
argument_list|)
expr_stmt|;
name|config
operator|.
name|setEnableAutoSpace
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|r
operator|=
name|getXML
argument_list|(
literal|"testExtraSpaces.pdf"
argument_list|,
name|parser
argument_list|,
name|context
argument_list|)
expr_stmt|;
name|content
operator|=
name|r
operator|.
name|xml
operator|.
name|replaceAll
argument_list|(
literal|"[\\s\u00a0]+"
argument_list|,
literal|" "
argument_list|)
expr_stmt|;
comment|// Text is correct when autoSpace is off:
name|assertContains
argument_list|(
literal|"Here is some formatted text"
argument_list|,
name|content
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDuplicateOverlappingText
parameter_list|()
throws|throws
name|Exception
block|{
name|PDFParser
name|parser
init|=
operator|new
name|PDFParser
argument_list|()
decl_stmt|;
comment|// Default is false (keep overlapping text):
name|XMLResult
name|r
init|=
name|getXML
argument_list|(
literal|"testOverlappingText.pdf"
argument_list|,
name|parser
argument_list|)
decl_stmt|;
name|assertContains
argument_list|(
literal|"Text the first timeText the second time"
argument_list|,
name|r
operator|.
name|xml
argument_list|)
expr_stmt|;
name|parser
operator|.
name|getPDFParserConfig
argument_list|()
operator|.
name|setSuppressDuplicateOverlappingText
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|r
operator|=
name|getXML
argument_list|(
literal|"testOverlappingText.pdf"
argument_list|,
name|parser
argument_list|)
expr_stmt|;
comment|// "Text the first" was dedup'd:
name|assertContains
argument_list|(
literal|"Text the first timesecond time"
argument_list|,
name|r
operator|.
name|xml
argument_list|)
expr_stmt|;
comment|//now try with autodetect
name|Parser
name|autoParser
init|=
operator|new
name|AutoDetectParser
argument_list|()
decl_stmt|;
name|ParseContext
name|context
init|=
operator|new
name|ParseContext
argument_list|()
decl_stmt|;
name|PDFParserConfig
name|config
init|=
operator|new
name|PDFParserConfig
argument_list|()
decl_stmt|;
name|context
operator|.
name|set
argument_list|(
name|PDFParserConfig
operator|.
name|class
argument_list|,
name|config
argument_list|)
expr_stmt|;
name|r
operator|=
name|getXML
argument_list|(
literal|"testOverlappingText.pdf"
argument_list|,
name|autoParser
argument_list|,
name|context
argument_list|)
expr_stmt|;
comment|// Default is false (keep overlapping text):
name|assertContains
argument_list|(
literal|"Text the first timeText the second time"
argument_list|,
name|r
operator|.
name|xml
argument_list|)
expr_stmt|;
name|config
operator|.
name|setSuppressDuplicateOverlappingText
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|r
operator|=
name|getXML
argument_list|(
literal|"testOverlappingText.pdf"
argument_list|,
name|autoParser
argument_list|,
name|context
argument_list|)
expr_stmt|;
comment|// "Text the first" was dedup'd:
name|assertContains
argument_list|(
literal|"Text the first timesecond time"
argument_list|,
name|r
operator|.
name|xml
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSortByPosition
parameter_list|()
throws|throws
name|Exception
block|{
name|PDFParser
name|parser
init|=
operator|new
name|PDFParser
argument_list|()
decl_stmt|;
name|parser
operator|.
name|getPDFParserConfig
argument_list|()
operator|.
name|setEnableAutoSpace
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|InputStream
name|stream
init|=
name|getResourceAsStream
argument_list|(
literal|"/test-documents/testPDFTwoTextBoxes.pdf"
argument_list|)
decl_stmt|;
comment|// Default is false (do not sort):
name|String
name|content
init|=
name|getText
argument_list|(
name|stream
argument_list|,
name|parser
argument_list|)
decl_stmt|;
name|content
operator|=
name|content
operator|.
name|replaceAll
argument_list|(
literal|"\\s+"
argument_list|,
literal|" "
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"Left column line 1 Left column line 2 Right column line 1 Right column line 2"
argument_list|,
name|content
argument_list|)
expr_stmt|;
name|parser
operator|.
name|getPDFParserConfig
argument_list|()
operator|.
name|setSortByPosition
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|stream
operator|=
name|getResourceAsStream
argument_list|(
literal|"/test-documents/testPDFTwoTextBoxes.pdf"
argument_list|)
expr_stmt|;
name|content
operator|=
name|getText
argument_list|(
name|stream
argument_list|,
name|parser
argument_list|)
expr_stmt|;
name|content
operator|=
name|content
operator|.
name|replaceAll
argument_list|(
literal|"\\s+"
argument_list|,
literal|" "
argument_list|)
expr_stmt|;
comment|// Column text is now interleaved:
name|assertContains
argument_list|(
literal|"Left column line 1 Right column line 1 Left colu mn line 2 Right column line 2"
argument_list|,
name|content
argument_list|)
expr_stmt|;
comment|//now try setting autodetect via parsecontext
name|AutoDetectParser
name|autoParser
init|=
operator|new
name|AutoDetectParser
argument_list|()
decl_stmt|;
name|ParseContext
name|context
init|=
operator|new
name|ParseContext
argument_list|()
decl_stmt|;
name|PDFParserConfig
name|config
init|=
operator|new
name|PDFParserConfig
argument_list|()
decl_stmt|;
name|context
operator|.
name|set
argument_list|(
name|PDFParserConfig
operator|.
name|class
argument_list|,
name|config
argument_list|)
expr_stmt|;
name|stream
operator|=
name|getResourceAsStream
argument_list|(
literal|"/test-documents/testPDFTwoTextBoxes.pdf"
argument_list|)
expr_stmt|;
comment|// Default is false (do not sort):
name|content
operator|=
name|getText
argument_list|(
name|stream
argument_list|,
name|autoParser
argument_list|,
name|context
argument_list|)
expr_stmt|;
name|content
operator|=
name|content
operator|.
name|replaceAll
argument_list|(
literal|"\\s+"
argument_list|,
literal|" "
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"Left column line 1 Left column line 2 Right column line 1 Right column line 2"
argument_list|,
name|content
argument_list|)
expr_stmt|;
name|config
operator|.
name|setSortByPosition
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|context
operator|.
name|set
argument_list|(
name|PDFParserConfig
operator|.
name|class
argument_list|,
name|config
argument_list|)
expr_stmt|;
name|stream
operator|=
name|getResourceAsStream
argument_list|(
literal|"/test-documents/testPDFTwoTextBoxes.pdf"
argument_list|)
expr_stmt|;
name|content
operator|=
name|getText
argument_list|(
name|stream
argument_list|,
name|parser
argument_list|)
expr_stmt|;
name|content
operator|=
name|content
operator|.
name|replaceAll
argument_list|(
literal|"\\s+"
argument_list|,
literal|" "
argument_list|)
expr_stmt|;
comment|// Column text is now interleaved:
name|assertContains
argument_list|(
literal|"Left column line 1 Right column line 1 Left colu mn line 2 Right column line 2"
argument_list|,
name|content
argument_list|)
expr_stmt|;
block|}
comment|// TIKA-1035
annotation|@
name|Test
specifier|public
name|void
name|testBookmarks
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|xml
init|=
name|getXML
argument_list|(
literal|"testPDF_bookmarks.pdf"
argument_list|)
operator|.
name|xml
decl_stmt|;
name|int
name|i
init|=
name|xml
operator|.
name|indexOf
argument_list|(
literal|"Denmark bookmark is here"
argument_list|)
decl_stmt|;
name|int
name|j
init|=
name|xml
operator|.
name|indexOf
argument_list|(
literal|"</body>"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|i
operator|!=
operator|-
literal|1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|j
operator|!=
operator|-
literal|1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|i
operator|<
name|j
argument_list|)
expr_stmt|;
block|}
comment|//TIKA-1124
annotation|@
name|Test
specifier|public
name|void
name|testEmbeddedPDFEmbeddingAnotherDocument
parameter_list|()
throws|throws
name|Exception
block|{
comment|/* format of test doc:          docx/             pdf/                docx        */
name|String
name|content
init|=
name|getXML
argument_list|(
literal|"testPDFEmbeddingAndEmbedded.docx"
argument_list|)
operator|.
name|xml
decl_stmt|;
name|int
name|outerHaystack
init|=
name|content
operator|.
name|indexOf
argument_list|(
literal|"Outer_haystack"
argument_list|)
decl_stmt|;
name|int
name|pdfHaystack
init|=
name|content
operator|.
name|indexOf
argument_list|(
literal|"pdf_haystack"
argument_list|)
decl_stmt|;
name|int
name|needle
init|=
name|content
operator|.
name|indexOf
argument_list|(
literal|"Needle"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|outerHaystack
operator|>
operator|-
literal|1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|pdfHaystack
operator|>
operator|-
literal|1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|needle
operator|>
operator|-
literal|1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|needle
operator|>
name|pdfHaystack
operator|&&
name|pdfHaystack
operator|>
name|outerHaystack
argument_list|)
expr_stmt|;
name|TrackingHandler
name|tracker
init|=
operator|new
name|TrackingHandler
argument_list|()
decl_stmt|;
name|ContainerExtractor
name|ex
init|=
operator|new
name|ParserContainerExtractor
argument_list|()
decl_stmt|;
try|try
init|(
name|TikaInputStream
name|tis
init|=
name|TikaInputStream
operator|.
name|get
argument_list|(
name|getResourceAsStream
argument_list|(
literal|"/test-documents/testPDFEmbeddingAndEmbedded.docx"
argument_list|)
argument_list|)
init|)
block|{
name|ex
operator|.
name|extract
argument_list|(
name|tis
argument_list|,
name|ex
argument_list|,
name|tracker
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|tracker
operator|.
name|filenames
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|tracker
operator|.
name|mediaTypes
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"image1.emf"
argument_list|,
name|tracker
operator|.
name|filenames
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|tracker
operator|.
name|filenames
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Test.docx"
argument_list|,
name|tracker
operator|.
name|filenames
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|TYPE_EMF
argument_list|,
name|tracker
operator|.
name|mediaTypes
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|TYPE_PDF
argument_list|,
name|tracker
operator|.
name|mediaTypes
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|TYPE_DOCX
argument_list|,
name|tracker
operator|.
name|mediaTypes
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// TIKA-973
comment|//commented out until test documents that are unambiguously
comment|//consistent with Apache License v2.0 are contributed.
comment|//TODO: add back test for AcroForm extraction; test document should include
comment|//recursive forms
comment|/*    public void testAcroForm() throws Exception{        Parser p = new AutoDetectParser();        ParseContext context = new ParseContext();        InputStream stream = getResourceAsStream("/test-documents/testPDF_acroForm1.pdf");        String txt = getText(stream, p, context);        stream.close();         //simple first level form contents        assertContains("to: John Doe", txt);        //checkbox        assertContains("xpackaging: Yes", txt);                //this guarantees that the form processor        //worked recursively at least once...i.e. it didn't just        //take the first form        stream = getResourceAsStream("/test-documents/testPDF_acroForm2.pdf");        txt = getText(stream, p, context);        stream.close();        assertContains("123 Main St.", txt);                        //now test with nonsequential parser        PDFParserConfig config = new PDFParserConfig();        config.setUseNonSequentialParser(true);        context.set(PDFParserConfig.class, config);        stream = getResourceAsStream("/test-documents/testPDF_acroForm1.pdf");        txt = getText(stream, p, context);        stream.close();                //simple first level form contents        assertContains("to: John Doe", txt);        //checkbox        assertContains("xpackaging: Yes", txt);                //this guarantees that the form processor        //worked recursively at least once...i.e. it didn't just        //take the first form        stream = getResourceAsStream("/test-documents/testPDF_acroForm2.pdf");        txt = getText(stream, p, context);        assertContains("123 Main St.", txt);        stream.close();          } */
comment|//TIKA-1226
annotation|@
name|Test
specifier|public
name|void
name|testSignatureInAcroForm
parameter_list|()
throws|throws
name|Exception
block|{
comment|//The current test doc does not contain any content in the signature area.
comment|//This just tests that a RuntimeException is not thrown.
comment|//TODO: find a better test file for this issue.
name|String
name|xml
init|=
name|getXML
argument_list|(
literal|"/testPDF_acroform3.pdf"
argument_list|)
operator|.
name|xml
decl_stmt|;
name|assertTrue
argument_list|(
literal|"found"
argument_list|,
operator|(
name|xml
operator|.
name|contains
argument_list|(
literal|"<li>aTextField: TIKA-1226</li>"
argument_list|)
operator|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
comment|// TIKA-1228, TIKA-1268
specifier|public
name|void
name|testEmbeddedFilesInChildren
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|xml
init|=
name|getXML
argument_list|(
literal|"/testPDF_childAttachments.pdf"
argument_list|)
operator|.
name|xml
decl_stmt|;
comment|//"regressiveness" exists only in Unit10.doc not in the container pdf document
name|assertTrue
argument_list|(
name|xml
operator|.
name|contains
argument_list|(
literal|"regressiveness"
argument_list|)
argument_list|)
expr_stmt|;
name|RecursiveParserWrapper
name|p
init|=
operator|new
name|RecursiveParserWrapper
argument_list|(
operator|new
name|AutoDetectParser
argument_list|()
argument_list|,
operator|new
name|BasicContentHandlerFactory
argument_list|(
name|BasicContentHandlerFactory
operator|.
name|HANDLER_TYPE
operator|.
name|IGNORE
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|ParseContext
name|context
init|=
operator|new
name|ParseContext
argument_list|()
decl_stmt|;
name|PDFParserConfig
name|config
init|=
operator|new
name|PDFParserConfig
argument_list|()
decl_stmt|;
name|config
operator|.
name|setExtractInlineImages
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|config
operator|.
name|setExtractUniqueInlineImagesOnly
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|context
operator|.
name|set
argument_list|(
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|pdf
operator|.
name|PDFParserConfig
operator|.
name|class
argument_list|,
name|config
argument_list|)
expr_stmt|;
name|context
operator|.
name|set
argument_list|(
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|Parser
operator|.
name|class
argument_list|,
name|p
argument_list|)
expr_stmt|;
try|try
init|(
name|TikaInputStream
name|tis
init|=
name|TikaInputStream
operator|.
name|get
argument_list|(
name|getResourceAsStream
argument_list|(
literal|"/test-documents/testPDF_childAttachments.pdf"
argument_list|)
argument_list|)
init|)
block|{
name|p
operator|.
name|parse
argument_list|(
name|tis
argument_list|,
operator|new
name|BodyContentHandler
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|,
operator|new
name|Metadata
argument_list|()
argument_list|,
name|context
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|Metadata
argument_list|>
name|metadatas
init|=
name|p
operator|.
name|getMetadata
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|metadatas
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|metadatas
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|get
argument_list|(
name|Metadata
operator|.
name|RESOURCE_NAME_KEY
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"image0.jpg"
argument_list|,
name|metadatas
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|get
argument_list|(
name|Metadata
operator|.
name|RESOURCE_NAME_KEY
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Press Quality(1).joboptions"
argument_list|,
name|metadatas
operator|.
name|get
argument_list|(
literal|3
argument_list|)
operator|.
name|get
argument_list|(
name|Metadata
operator|.
name|RESOURCE_NAME_KEY
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Unit10.doc"
argument_list|,
name|metadatas
operator|.
name|get
argument_list|(
literal|4
argument_list|)
operator|.
name|get
argument_list|(
name|Metadata
operator|.
name|RESOURCE_NAME_KEY
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|MediaType
operator|.
name|image
argument_list|(
literal|"jpeg"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|metadatas
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|get
argument_list|(
name|Metadata
operator|.
name|CONTENT_TYPE
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|MediaType
operator|.
name|image
argument_list|(
literal|"tiff"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|metadatas
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|get
argument_list|(
name|Metadata
operator|.
name|CONTENT_TYPE
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"text/plain; charset=ISO-8859-1"
argument_list|,
name|metadatas
operator|.
name|get
argument_list|(
literal|3
argument_list|)
operator|.
name|get
argument_list|(
name|Metadata
operator|.
name|CONTENT_TYPE
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|TYPE_DOC
operator|.
name|toString
argument_list|()
argument_list|,
name|metadatas
operator|.
name|get
argument_list|(
literal|4
argument_list|)
operator|.
name|get
argument_list|(
name|Metadata
operator|.
name|CONTENT_TYPE
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEmbeddedFilesInAnnotations
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|xml
init|=
name|getXML
argument_list|(
literal|"/testPDFFileEmbInAnnotation.pdf"
argument_list|)
operator|.
name|xml
decl_stmt|;
name|assertTrue
argument_list|(
name|xml
operator|.
name|contains
argument_list|(
literal|"This is a Excel"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSingleCloseDoc
parameter_list|()
throws|throws
name|Exception
block|{
comment|//TIKA-1341
name|Parser
name|p
init|=
operator|new
name|AutoDetectParser
argument_list|()
decl_stmt|;
name|Metadata
name|m
init|=
operator|new
name|Metadata
argument_list|()
decl_stmt|;
name|ParseContext
name|c
init|=
operator|new
name|ParseContext
argument_list|()
decl_stmt|;
name|ContentHandler
name|h
init|=
operator|new
name|EventCountingHandler
argument_list|()
decl_stmt|;
try|try
init|(
name|InputStream
name|is
init|=
name|PDFParserTest
operator|.
name|class
operator|.
name|getResourceAsStream
argument_list|(
literal|"/test-documents/testPDFTripleLangTitle.pdf"
argument_list|)
init|)
block|{
name|p
operator|.
name|parse
argument_list|(
name|is
argument_list|,
name|h
argument_list|,
name|m
argument_list|,
name|c
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|1
argument_list|,
operator|(
operator|(
name|EventCountingHandler
operator|)
name|h
operator|)
operator|.
name|getEndDocument
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testVersions
parameter_list|()
throws|throws
name|Exception
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|dcFormat
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|dcFormat
operator|.
name|put
argument_list|(
literal|"4.x"
argument_list|,
literal|"application/pdf; version=1.3"
argument_list|)
expr_stmt|;
name|dcFormat
operator|.
name|put
argument_list|(
literal|"5.x"
argument_list|,
literal|"application/pdf; version=1.4"
argument_list|)
expr_stmt|;
name|dcFormat
operator|.
name|put
argument_list|(
literal|"6.x"
argument_list|,
literal|"application/pdf; version=1.5"
argument_list|)
expr_stmt|;
name|dcFormat
operator|.
name|put
argument_list|(
literal|"7.x"
argument_list|,
literal|"application/pdf; version=1.6"
argument_list|)
expr_stmt|;
name|dcFormat
operator|.
name|put
argument_list|(
literal|"8.x"
argument_list|,
literal|"application/pdf; version=1.7"
argument_list|)
expr_stmt|;
name|dcFormat
operator|.
name|put
argument_list|(
literal|"9.x"
argument_list|,
literal|"application/pdf; version=1.7"
argument_list|)
expr_stmt|;
name|dcFormat
operator|.
name|put
argument_list|(
literal|"10.x"
argument_list|,
literal|"application/pdf; version=1.7"
argument_list|)
expr_stmt|;
name|dcFormat
operator|.
name|put
argument_list|(
literal|"11.x.PDFA-1b"
argument_list|,
literal|"application/pdf; version=1.7"
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|pdfVersions
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|pdfVersions
operator|.
name|put
argument_list|(
literal|"4.x"
argument_list|,
literal|"1.3"
argument_list|)
expr_stmt|;
name|pdfVersions
operator|.
name|put
argument_list|(
literal|"5.x"
argument_list|,
literal|"1.4"
argument_list|)
expr_stmt|;
name|pdfVersions
operator|.
name|put
argument_list|(
literal|"6.x"
argument_list|,
literal|"1.5"
argument_list|)
expr_stmt|;
name|pdfVersions
operator|.
name|put
argument_list|(
literal|"7.x"
argument_list|,
literal|"1.6"
argument_list|)
expr_stmt|;
name|pdfVersions
operator|.
name|put
argument_list|(
literal|"8.x"
argument_list|,
literal|"1.7"
argument_list|)
expr_stmt|;
name|pdfVersions
operator|.
name|put
argument_list|(
literal|"9.x"
argument_list|,
literal|"1.7"
argument_list|)
expr_stmt|;
name|pdfVersions
operator|.
name|put
argument_list|(
literal|"10.x"
argument_list|,
literal|"1.7"
argument_list|)
expr_stmt|;
name|pdfVersions
operator|.
name|put
argument_list|(
literal|"11.x.PDFA-1b"
argument_list|,
literal|"1.7"
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|pdfExtensionVersions
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|pdfExtensionVersions
operator|.
name|put
argument_list|(
literal|"9.x"
argument_list|,
literal|"1.7 Adobe Extension Level 3"
argument_list|)
expr_stmt|;
name|pdfExtensionVersions
operator|.
name|put
argument_list|(
literal|"10.x"
argument_list|,
literal|"1.7 Adobe Extension Level 8"
argument_list|)
expr_stmt|;
name|pdfExtensionVersions
operator|.
name|put
argument_list|(
literal|"11.x.PDFA-1b"
argument_list|,
literal|"1.7 Adobe Extension Level 8"
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|e
range|:
name|dcFormat
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|fName
init|=
literal|"testPDF_Version."
operator|+
name|e
operator|.
name|getKey
argument_list|()
operator|+
literal|".pdf"
decl_stmt|;
name|XMLResult
name|r
init|=
name|getXML
argument_list|(
name|fName
argument_list|)
decl_stmt|;
name|boolean
name|foundDC
init|=
literal|false
decl_stmt|;
name|String
index|[]
name|vals
init|=
name|r
operator|.
name|metadata
operator|.
name|getValues
argument_list|(
literal|"dc:format"
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|v
range|:
name|vals
control|)
block|{
if|if
condition|(
name|v
operator|.
name|equals
argument_list|(
name|e
operator|.
name|getValue
argument_list|()
argument_list|)
condition|)
block|{
name|foundDC
operator|=
literal|true
expr_stmt|;
block|}
block|}
name|assertTrue
argument_list|(
literal|"dc:format ::"
operator|+
name|e
operator|.
name|getValue
argument_list|()
argument_list|,
name|foundDC
argument_list|)
expr_stmt|;
name|String
name|extensionVersionTruth
init|=
name|pdfExtensionVersions
operator|.
name|get
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|extensionVersionTruth
operator|!=
literal|null
condition|)
block|{
name|assertEquals
argument_list|(
literal|"pdf:PDFExtensionVersion :: "
operator|+
name|extensionVersionTruth
argument_list|,
name|extensionVersionTruth
argument_list|,
name|r
operator|.
name|metadata
operator|.
name|get
argument_list|(
literal|"pdf:PDFExtensionVersion"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"pdf:PDFVersion"
argument_list|,
name|pdfVersions
operator|.
name|get
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|,
name|r
operator|.
name|metadata
operator|.
name|get
argument_list|(
literal|"pdf:PDFVersion"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|//now test full 11.x
name|XMLResult
name|r
init|=
name|getXML
argument_list|(
literal|"testPDF_Version.11.x.PDFA-1b.pdf"
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|versions
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|fmt
range|:
name|r
operator|.
name|metadata
operator|.
name|getValues
argument_list|(
literal|"dc:format"
argument_list|)
control|)
block|{
name|versions
operator|.
name|add
argument_list|(
name|fmt
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|String
name|hit
range|:
operator|new
name|String
index|[]
block|{
literal|"application/pdf; version=1.7"
block|,
literal|"application/pdf; version=\"A-1b\""
block|,
literal|"application/pdf; version=\"1.7 Adobe Extension Level 8\""
block|}
control|)
block|{
name|assertTrue
argument_list|(
name|hit
argument_list|,
name|versions
operator|.
name|contains
argument_list|(
name|hit
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"pdfaid:conformance"
argument_list|,
name|r
operator|.
name|metadata
operator|.
name|get
argument_list|(
literal|"pdfaid:conformance"
argument_list|)
argument_list|,
literal|"B"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"pdfaid:part"
argument_list|,
name|r
operator|.
name|metadata
operator|.
name|get
argument_list|(
literal|"pdfaid:part"
argument_list|)
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMultipleAuthors
parameter_list|()
throws|throws
name|Exception
block|{
name|XMLResult
name|r
init|=
name|getXML
argument_list|(
literal|"testPDF_twoAuthors.pdf"
argument_list|)
decl_stmt|;
name|String
index|[]
name|keys
init|=
operator|new
name|String
index|[]
block|{
literal|"dc:creator"
block|,
literal|"meta:author"
block|,
literal|"creator"
block|,
literal|"Author"
block|}
decl_stmt|;
for|for
control|(
name|String
name|k
range|:
name|keys
control|)
block|{
name|String
index|[]
name|vals
init|=
name|r
operator|.
name|metadata
operator|.
name|getValues
argument_list|(
name|k
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"number of authors == 2 for key: "
operator|+
name|k
argument_list|,
literal|2
argument_list|,
name|vals
operator|.
name|length
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|set
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|set
operator|.
name|add
argument_list|(
name|vals
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|set
operator|.
name|add
argument_list|(
name|vals
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Sample Author 1"
argument_list|,
name|set
operator|.
name|contains
argument_list|(
literal|"Sample Author 1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Sample Author 2"
argument_list|,
name|set
operator|.
name|contains
argument_list|(
literal|"Sample Author 2"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|//STUB test for once TIKA-1295 is fixed
annotation|@
name|Test
specifier|public
name|void
name|testMultipleTitles
parameter_list|()
throws|throws
name|Exception
block|{
name|XMLResult
name|r
init|=
name|getXML
argument_list|(
literal|"testPDFTripleLangTitle.pdf"
argument_list|)
decl_stmt|;
comment|//TODO: add other tests as part of TIKA-1295
comment|//dc:title-fr-ca (or whatever we decide) should be "Bonjour World"
comment|//dc:title-zh-ch is currently hosed...bug in PDFBox while injecting xmp?
comment|//
name|assertEquals
argument_list|(
literal|"Hello World"
argument_list|,
name|r
operator|.
name|metadata
operator|.
name|get
argument_list|(
literal|"dc:title"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testInlineSelector
parameter_list|()
throws|throws
name|Exception
block|{
name|PDFParserConfig
name|config
init|=
operator|new
name|PDFParserConfig
argument_list|()
decl_stmt|;
name|config
operator|.
name|setExtractInlineImages
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|config
operator|.
name|setExtractUniqueInlineImagesOnly
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|ParseContext
name|context
init|=
operator|new
name|ParseContext
argument_list|()
decl_stmt|;
name|context
operator|.
name|set
argument_list|(
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|pdf
operator|.
name|PDFParserConfig
operator|.
name|class
argument_list|,
name|config
argument_list|)
expr_stmt|;
name|context
operator|.
name|set
argument_list|(
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|Parser
operator|.
name|class
argument_list|,
operator|new
name|AutoDetectParser
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Metadata
argument_list|>
name|metadatas
init|=
name|getRecursiveJson
argument_list|(
literal|"testPDF_childAttachments.pdf"
argument_list|,
name|context
argument_list|)
decl_stmt|;
name|int
name|inline
init|=
literal|0
decl_stmt|;
name|int
name|attach
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Metadata
name|m
range|:
name|metadatas
control|)
block|{
name|String
name|v
init|=
name|m
operator|.
name|get
argument_list|(
name|TikaCoreProperties
operator|.
name|EMBEDDED_RESOURCE_TYPE
argument_list|)
decl_stmt|;
if|if
condition|(
name|v
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|v
operator|.
name|equals
argument_list|(
name|TikaCoreProperties
operator|.
name|EmbeddedResourceType
operator|.
name|INLINE
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
block|{
name|inline
operator|++
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|v
operator|.
name|equals
argument_list|(
name|TikaCoreProperties
operator|.
name|EmbeddedResourceType
operator|.
name|ATTACHMENT
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
block|{
name|attach
operator|++
expr_stmt|;
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|inline
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|attach
argument_list|)
expr_stmt|;
comment|//now try turning off inline
name|context
operator|.
name|set
argument_list|(
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|extractor
operator|.
name|DocumentSelector
operator|.
name|class
argument_list|,
operator|new
name|AvoidInlineSelector
argument_list|()
argument_list|)
expr_stmt|;
name|inline
operator|=
literal|0
expr_stmt|;
name|attach
operator|=
literal|0
expr_stmt|;
name|metadatas
operator|=
name|getRecursiveJson
argument_list|(
literal|"testPDF_childAttachments.pdf"
argument_list|,
name|context
argument_list|)
expr_stmt|;
for|for
control|(
name|Metadata
name|m
range|:
name|metadatas
control|)
block|{
name|String
name|v
init|=
name|m
operator|.
name|get
argument_list|(
name|TikaCoreProperties
operator|.
name|EMBEDDED_RESOURCE_TYPE
argument_list|)
decl_stmt|;
if|if
condition|(
name|v
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|v
operator|.
name|equals
argument_list|(
name|TikaCoreProperties
operator|.
name|EmbeddedResourceType
operator|.
name|INLINE
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
block|{
name|inline
operator|++
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|v
operator|.
name|equals
argument_list|(
name|TikaCoreProperties
operator|.
name|EmbeddedResourceType
operator|.
name|ATTACHMENT
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
block|{
name|attach
operator|++
expr_stmt|;
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|inline
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|attach
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testInlineConfig
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|Metadata
argument_list|>
name|metadatas
init|=
name|getRecursiveJson
argument_list|(
literal|"testPDF_childAttachments.pdf"
argument_list|)
decl_stmt|;
name|int
name|inline
init|=
literal|0
decl_stmt|;
name|int
name|attach
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Metadata
name|m
range|:
name|metadatas
control|)
block|{
name|String
name|v
init|=
name|m
operator|.
name|get
argument_list|(
name|TikaCoreProperties
operator|.
name|EMBEDDED_RESOURCE_TYPE
argument_list|)
decl_stmt|;
if|if
condition|(
name|v
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|v
operator|.
name|equals
argument_list|(
name|TikaCoreProperties
operator|.
name|EmbeddedResourceType
operator|.
name|INLINE
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
block|{
name|inline
operator|++
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|v
operator|.
name|equals
argument_list|(
name|TikaCoreProperties
operator|.
name|EmbeddedResourceType
operator|.
name|ATTACHMENT
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
block|{
name|attach
operator|++
expr_stmt|;
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|inline
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|attach
argument_list|)
expr_stmt|;
comment|//now try turning off inline
name|PDFParserConfig
name|config
init|=
operator|new
name|PDFParserConfig
argument_list|()
decl_stmt|;
name|config
operator|.
name|setExtractInlineImages
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|config
operator|.
name|setExtractUniqueInlineImagesOnly
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|ParseContext
name|context
init|=
operator|new
name|ParseContext
argument_list|()
decl_stmt|;
name|context
operator|.
name|set
argument_list|(
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|pdf
operator|.
name|PDFParserConfig
operator|.
name|class
argument_list|,
name|config
argument_list|)
expr_stmt|;
name|context
operator|.
name|set
argument_list|(
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|Parser
operator|.
name|class
argument_list|,
operator|new
name|AutoDetectParser
argument_list|()
argument_list|)
expr_stmt|;
name|inline
operator|=
literal|0
expr_stmt|;
name|attach
operator|=
literal|0
expr_stmt|;
name|metadatas
operator|=
name|getRecursiveJson
argument_list|(
literal|"testPDF_childAttachments.pdf"
argument_list|,
name|context
argument_list|)
expr_stmt|;
for|for
control|(
name|Metadata
name|m
range|:
name|metadatas
control|)
block|{
name|String
name|v
init|=
name|m
operator|.
name|get
argument_list|(
name|TikaCoreProperties
operator|.
name|EMBEDDED_RESOURCE_TYPE
argument_list|)
decl_stmt|;
if|if
condition|(
name|v
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|v
operator|.
name|equals
argument_list|(
name|TikaCoreProperties
operator|.
name|EmbeddedResourceType
operator|.
name|INLINE
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
block|{
name|inline
operator|++
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|v
operator|.
name|equals
argument_list|(
name|TikaCoreProperties
operator|.
name|EmbeddedResourceType
operator|.
name|ATTACHMENT
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
block|{
name|attach
operator|++
expr_stmt|;
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|inline
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|attach
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
comment|//TIKA-1376
specifier|public
name|void
name|testEmbeddedFileNameExtraction
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|Metadata
argument_list|>
name|metadatas
init|=
name|getRecursiveJson
argument_list|(
literal|"testPDF_multiFormatEmbFiles.pdf"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"metadata size"
argument_list|,
literal|5
argument_list|,
name|metadatas
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Metadata
name|firstAttachment
init|=
name|metadatas
operator|.
name|get
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"attachment file name"
argument_list|,
literal|"Test.txt"
argument_list|,
name|firstAttachment
operator|.
name|get
argument_list|(
name|Metadata
operator|.
name|RESOURCE_NAME_KEY
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
comment|//TIKA-1374
specifier|public
name|void
name|testOSSpecificEmbeddedFileExtraction
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|Metadata
argument_list|>
name|metadatas
init|=
name|getRecursiveJson
argument_list|(
literal|"testPDF_multiFormatEmbFiles.pdf"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"metadata size"
argument_list|,
literal|5
argument_list|,
name|metadatas
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"file name"
argument_list|,
literal|"Test.txt"
argument_list|,
name|metadatas
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|get
argument_list|(
name|Metadata
operator|.
name|RESOURCE_NAME_KEY
argument_list|)
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"os specific"
argument_list|,
name|metadatas
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|get
argument_list|(
name|RecursiveParserWrapper
operator|.
name|TIKA_CONTENT
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"file name"
argument_list|,
literal|"TestMac.txt"
argument_list|,
name|metadatas
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|get
argument_list|(
name|Metadata
operator|.
name|RESOURCE_NAME_KEY
argument_list|)
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"mac embedded"
argument_list|,
name|metadatas
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|get
argument_list|(
name|RecursiveParserWrapper
operator|.
name|TIKA_CONTENT
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"file name"
argument_list|,
literal|"TestDos.txt"
argument_list|,
name|metadatas
operator|.
name|get
argument_list|(
literal|3
argument_list|)
operator|.
name|get
argument_list|(
name|Metadata
operator|.
name|RESOURCE_NAME_KEY
argument_list|)
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"dos embedded"
argument_list|,
name|metadatas
operator|.
name|get
argument_list|(
literal|3
argument_list|)
operator|.
name|get
argument_list|(
name|RecursiveParserWrapper
operator|.
name|TIKA_CONTENT
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"file name"
argument_list|,
literal|"TestUnix.txt"
argument_list|,
name|metadatas
operator|.
name|get
argument_list|(
literal|4
argument_list|)
operator|.
name|get
argument_list|(
name|Metadata
operator|.
name|RESOURCE_NAME_KEY
argument_list|)
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"unix embedded"
argument_list|,
name|metadatas
operator|.
name|get
argument_list|(
literal|4
argument_list|)
operator|.
name|get
argument_list|(
name|RecursiveParserWrapper
operator|.
name|TIKA_CONTENT
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
comment|//TIKA-1427
specifier|public
name|void
name|testEmbeddedFileMarkup
parameter_list|()
throws|throws
name|Exception
block|{
name|Parser
name|parser
init|=
operator|new
name|AutoDetectParser
argument_list|()
decl_stmt|;
name|ParseContext
name|context
init|=
operator|new
name|ParseContext
argument_list|()
decl_stmt|;
name|context
operator|.
name|set
argument_list|(
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|Parser
operator|.
name|class
argument_list|,
name|parser
argument_list|)
expr_stmt|;
name|PDFParserConfig
name|config
init|=
operator|new
name|PDFParserConfig
argument_list|()
decl_stmt|;
name|config
operator|.
name|setExtractInlineImages
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|config
operator|.
name|setExtractUniqueInlineImagesOnly
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|context
operator|.
name|set
argument_list|(
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|pdf
operator|.
name|PDFParserConfig
operator|.
name|class
argument_list|,
name|config
argument_list|)
expr_stmt|;
name|XMLResult
name|r
init|=
name|getXML
argument_list|(
literal|"testPDF_childAttachments.pdf"
argument_list|,
name|context
argument_list|)
decl_stmt|;
comment|//regular attachment
name|assertContains
argument_list|(
literal|"<div class=\"embedded\" id=\"Unit10.doc\" />"
argument_list|,
name|r
operator|.
name|xml
argument_list|)
expr_stmt|;
comment|//inline image
name|assertContains
argument_list|(
literal|"<img src=\"embedded:image1.tif\" alt=\"image1.tif\" />"
argument_list|,
name|r
operator|.
name|xml
argument_list|)
expr_stmt|;
comment|//doc embedded inside an annotation
name|r
operator|=
name|getXML
argument_list|(
literal|"testPDFFileEmbInAnnotation.pdf"
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"<div class=\"embedded\" id=\"Excel.xlsx\" />"
argument_list|,
name|r
operator|.
name|xml
argument_list|)
expr_stmt|;
block|}
comment|//Access checker tests
annotation|@
name|Test
specifier|public
name|void
name|testLegacyAccessChecking
parameter_list|()
throws|throws
name|Exception
block|{
comment|//test that default behavior doesn't throw AccessPermissionException
for|for
control|(
name|String
name|file
range|:
operator|new
name|String
index|[]
block|{
literal|"testPDF_no_extract_no_accessibility_owner_empty.pdf"
block|,
literal|"testPDF_no_extract_yes_accessibility_owner_empty.pdf"
block|,         }
control|)
block|{
name|String
name|xml
init|=
name|getXML
argument_list|(
name|file
argument_list|)
operator|.
name|xml
decl_stmt|;
name|assertContains
argument_list|(
literal|"Hello World"
argument_list|,
name|xml
argument_list|)
expr_stmt|;
block|}
comment|//now try with the user password
name|PasswordProvider
name|provider
init|=
operator|new
name|PasswordProvider
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|getPassword
parameter_list|(
name|Metadata
name|metadata
parameter_list|)
block|{
return|return
literal|"user"
return|;
block|}
block|}
decl_stmt|;
name|ParseContext
name|context
init|=
operator|new
name|ParseContext
argument_list|()
decl_stmt|;
name|context
operator|.
name|set
argument_list|(
name|PasswordProvider
operator|.
name|class
argument_list|,
name|provider
argument_list|)
expr_stmt|;
name|Parser
name|parser
init|=
operator|new
name|AutoDetectParser
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|path
range|:
operator|new
name|String
index|[]
block|{
literal|"testPDF_no_extract_no_accessibility_owner_user.pdf"
block|,
literal|"testPDF_no_extract_yes_accessibility_owner_user.pdf"
block|,         }
control|)
block|{
name|assertContains
argument_list|(
literal|"Hello World"
argument_list|,
name|getXML
argument_list|(
name|path
argument_list|,
name|context
argument_list|)
operator|.
name|xml
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAccessCheckingEmptyPassword
parameter_list|()
throws|throws
name|Exception
block|{
name|PDFParserConfig
name|config
init|=
operator|new
name|PDFParserConfig
argument_list|()
decl_stmt|;
comment|//don't allow extraction, not even for accessibility
name|config
operator|.
name|setAccessChecker
argument_list|(
operator|new
name|AccessChecker
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|Parser
name|parser
init|=
operator|new
name|AutoDetectParser
argument_list|()
decl_stmt|;
name|ParseContext
name|context
init|=
operator|new
name|ParseContext
argument_list|()
decl_stmt|;
name|context
operator|.
name|set
argument_list|(
name|PDFParserConfig
operator|.
name|class
argument_list|,
name|config
argument_list|)
expr_stmt|;
comment|//test exception for empty password
for|for
control|(
name|String
name|path
range|:
operator|new
name|String
index|[]
block|{
literal|"testPDF_no_extract_no_accessibility_owner_empty.pdf"
block|,
literal|"testPDF_no_extract_yes_accessibility_owner_empty.pdf"
block|,         }
control|)
block|{
name|assertException
argument_list|(
literal|"/test-documents/"
operator|+
name|path
argument_list|,
name|parser
argument_list|,
name|context
argument_list|,
name|AccessPermissionException
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
name|config
operator|.
name|setAccessChecker
argument_list|(
operator|new
name|AccessChecker
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertException
argument_list|(
literal|"/test-documents/"
operator|+
literal|"testPDF_no_extract_no_accessibility_owner_empty.pdf"
argument_list|,
name|parser
argument_list|,
name|context
argument_list|,
name|AccessPermissionException
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"Hello World"
argument_list|,
name|getXML
argument_list|(
literal|"testPDF_no_extract_yes_accessibility_owner_empty.pdf"
argument_list|,
name|context
argument_list|)
operator|.
name|xml
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAccessCheckingUserPassword
parameter_list|()
throws|throws
name|Exception
block|{
name|ParseContext
name|context
init|=
operator|new
name|ParseContext
argument_list|()
decl_stmt|;
name|PDFParserConfig
name|config
init|=
operator|new
name|PDFParserConfig
argument_list|()
decl_stmt|;
comment|//don't allow extraction, not even for accessibility
name|config
operator|.
name|setAccessChecker
argument_list|(
operator|new
name|AccessChecker
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|PasswordProvider
name|passwordProvider
init|=
operator|new
name|PasswordProvider
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|getPassword
parameter_list|(
name|Metadata
name|metadata
parameter_list|)
block|{
return|return
literal|"user"
return|;
block|}
block|}
decl_stmt|;
name|context
operator|.
name|set
argument_list|(
name|PasswordProvider
operator|.
name|class
argument_list|,
name|passwordProvider
argument_list|)
expr_stmt|;
name|context
operator|.
name|set
argument_list|(
name|PDFParserConfig
operator|.
name|class
argument_list|,
name|config
argument_list|)
expr_stmt|;
name|Parser
name|parser
init|=
operator|new
name|AutoDetectParser
argument_list|()
decl_stmt|;
comment|//test bad passwords
for|for
control|(
name|String
name|path
range|:
operator|new
name|String
index|[]
block|{
literal|"testPDF_no_extract_no_accessibility_owner_empty.pdf"
block|,
literal|"testPDF_no_extract_yes_accessibility_owner_empty.pdf"
block|,         }
control|)
block|{
name|assertException
argument_list|(
literal|"/test-documents/"
operator|+
name|path
argument_list|,
name|parser
argument_list|,
name|context
argument_list|,
name|EncryptedDocumentException
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
comment|//bad password is still a bad password
name|config
operator|.
name|setAccessChecker
argument_list|(
operator|new
name|AccessChecker
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|path
range|:
operator|new
name|String
index|[]
block|{
literal|"testPDF_no_extract_no_accessibility_owner_empty.pdf"
block|,
literal|"testPDF_no_extract_yes_accessibility_owner_empty.pdf"
block|,         }
control|)
block|{
name|assertException
argument_list|(
literal|"/test-documents/"
operator|+
name|path
argument_list|,
name|parser
argument_list|,
name|context
argument_list|,
name|EncryptedDocumentException
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
comment|//now test documents that require this "user" password
name|assertException
argument_list|(
literal|"/test-documents/"
operator|+
literal|"testPDF_no_extract_no_accessibility_owner_user.pdf"
argument_list|,
name|parser
argument_list|,
name|context
argument_list|,
name|AccessPermissionException
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"Hello World"
argument_list|,
name|getXML
argument_list|(
literal|"testPDF_no_extract_yes_accessibility_owner_user.pdf"
argument_list|,
name|context
argument_list|)
operator|.
name|xml
argument_list|)
expr_stmt|;
name|config
operator|.
name|setAccessChecker
argument_list|(
operator|new
name|AccessChecker
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|path
range|:
operator|new
name|String
index|[]
block|{
literal|"testPDF_no_extract_no_accessibility_owner_user.pdf"
block|,
literal|"testPDF_no_extract_yes_accessibility_owner_user.pdf"
block|,         }
control|)
block|{
name|assertException
argument_list|(
literal|"/test-documents/"
operator|+
name|path
argument_list|,
name|parser
argument_list|,
name|context
argument_list|,
name|AccessPermissionException
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAccessCheckingOwnerPassword
parameter_list|()
throws|throws
name|Exception
block|{
name|ParseContext
name|context
init|=
operator|new
name|ParseContext
argument_list|()
decl_stmt|;
name|PDFParserConfig
name|config
init|=
operator|new
name|PDFParserConfig
argument_list|()
decl_stmt|;
comment|//don't allow extraction, not even for accessibility
name|config
operator|.
name|setAccessChecker
argument_list|(
operator|new
name|AccessChecker
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|PasswordProvider
name|passwordProvider
init|=
operator|new
name|PasswordProvider
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|getPassword
parameter_list|(
name|Metadata
name|metadata
parameter_list|)
block|{
return|return
literal|"owner"
return|;
block|}
block|}
decl_stmt|;
name|context
operator|.
name|set
argument_list|(
name|PasswordProvider
operator|.
name|class
argument_list|,
name|passwordProvider
argument_list|)
expr_stmt|;
name|context
operator|.
name|set
argument_list|(
name|PDFParserConfig
operator|.
name|class
argument_list|,
name|config
argument_list|)
expr_stmt|;
comment|//with owner's password, text can be extracted, no matter the AccessibilityChecker's settings
for|for
control|(
name|String
name|path
range|:
operator|new
name|String
index|[]
block|{
literal|"testPDF_no_extract_no_accessibility_owner_user.pdf"
block|,
literal|"testPDF_no_extract_yes_accessibility_owner_user.pdf"
block|,
literal|"testPDF_no_extract_no_accessibility_owner_empty.pdf"
block|,
literal|"testPDF_no_extract_yes_accessibility_owner_empty.pdf"
block|,         }
control|)
block|{
name|assertContains
argument_list|(
literal|"Hello World"
argument_list|,
name|getXML
argument_list|(
name|path
argument_list|,
name|context
argument_list|)
operator|.
name|xml
argument_list|)
expr_stmt|;
block|}
comment|//really, with owner's password, all extraction is allowed
name|config
operator|.
name|setAccessChecker
argument_list|(
operator|new
name|AccessChecker
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|path
range|:
operator|new
name|String
index|[]
block|{
literal|"testPDF_no_extract_no_accessibility_owner_user.pdf"
block|,
literal|"testPDF_no_extract_yes_accessibility_owner_user.pdf"
block|,
literal|"testPDF_no_extract_no_accessibility_owner_empty.pdf"
block|,
literal|"testPDF_no_extract_yes_accessibility_owner_empty.pdf"
block|,         }
control|)
block|{
name|assertContains
argument_list|(
literal|"Hello World"
argument_list|,
name|getXML
argument_list|(
name|path
argument_list|,
name|context
argument_list|)
operator|.
name|xml
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPDFEncodedStringsInXMP
parameter_list|()
throws|throws
name|Exception
block|{
comment|//TIKA-1678
name|XMLResult
name|r
init|=
name|getXML
argument_list|(
literal|"testPDF_PDFEncodedStringInXMP.pdf"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Microsoft"
argument_list|,
name|r
operator|.
name|metadata
operator|.
name|get
argument_list|(
name|TikaCoreProperties
operator|.
name|TITLE
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testXFAExtractionBasic
parameter_list|()
throws|throws
name|Exception
block|{
name|XMLResult
name|r
init|=
name|getXML
argument_list|(
literal|"testPDF_XFA_govdocs1_258578.pdf"
argument_list|)
decl_stmt|;
comment|//contains content existing only in the "regular" pdf
name|assertContains
argument_list|(
literal|"Mount Rushmore National Memorial"
argument_list|,
name|r
operator|.
name|xml
argument_list|)
expr_stmt|;
comment|//contains xfa fields and data
name|assertContains
argument_list|(
literal|"<li fieldName=\"School_Name\">School Name: my_school</li>"
argument_list|,
name|r
operator|.
name|xml
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testXFAOnly
parameter_list|()
throws|throws
name|Exception
block|{
name|ParseContext
name|context
init|=
operator|new
name|ParseContext
argument_list|()
decl_stmt|;
name|PDFParserConfig
name|config
init|=
operator|new
name|PDFParserConfig
argument_list|()
decl_stmt|;
name|config
operator|.
name|setIfXFAExtractOnlyXFA
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|context
operator|.
name|set
argument_list|(
name|PDFParserConfig
operator|.
name|class
argument_list|,
name|config
argument_list|)
expr_stmt|;
name|String
name|xml
init|=
name|getXML
argument_list|(
literal|"testPDF_XFA_govdocs1_258578.pdf"
argument_list|,
name|context
argument_list|)
operator|.
name|xml
decl_stmt|;
name|assertContains
argument_list|(
literal|"<li fieldName=\"Room_1\">Room [1]: my_room1</li>"
argument_list|,
name|xml
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"</xfa_content></body></html>"
argument_list|,
name|xml
argument_list|)
expr_stmt|;
name|assertNotContained
argument_list|(
literal|"Mount Rushmore National Memorial"
argument_list|,
name|xml
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testXMPMM
parameter_list|()
throws|throws
name|Exception
block|{
name|Metadata
name|m
init|=
name|getXML
argument_list|(
literal|"testPDF_twoAuthors.pdf"
argument_list|)
operator|.
name|metadata
decl_stmt|;
name|assertEquals
argument_list|(
literal|"uuid:0e46913c-72b9-40c0-8232-69e362abcd1e"
argument_list|,
name|m
operator|.
name|get
argument_list|(
name|XMPMM
operator|.
name|DOCUMENTID
argument_list|)
argument_list|)
expr_stmt|;
name|m
operator|=
name|getXML
argument_list|(
literal|"testPDF_Version.11.x.PDFA-1b.pdf"
argument_list|)
operator|.
name|metadata
expr_stmt|;
name|assertEquals
argument_list|(
literal|"uuid:cccee1fc-51b3-4b52-ac86-672af3974d25"
argument_list|,
name|m
operator|.
name|get
argument_list|(
name|XMPMM
operator|.
name|DOCUMENTID
argument_list|)
argument_list|)
expr_stmt|;
comment|//now test for 7 elements in each parallel array
comment|//from the history section
name|assertArrayEquals
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"uuid:0313504b-a0b0-4dac-a9f0-357221f2eadf"
block|,
literal|"uuid:edc4279e-0d5f-465e-b13e-1298402fd11c"
block|,
literal|"uuid:f565b775-43f3-4a9a-8541-e98c4115db6d"
block|,
literal|"uuid:9fd5e0a8-14a5-4920-ad7f-870c0b8ee65f"
block|,
literal|"uuid:09b6cfba-efde-4e07-a77f-70de858cc0aa"
block|,
literal|"uuid:1e4ffbd7-dabc-4aae-801c-15b3404ade36"
block|,
literal|"uuid:c1669773-a6ca-4bdd-aade-519030d0af00"
block|}
argument_list|,
name|m
operator|.
name|getValues
argument_list|(
name|XMPMM
operator|.
name|HISTORY_EVENT_INSTANCEID
argument_list|)
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"converted"
block|,
literal|"converted"
block|,
literal|"converted"
block|,
literal|"converted"
block|,
literal|"converted"
block|,
literal|"converted"
block|,
literal|"converted"
block|}
argument_list|,
name|m
operator|.
name|getValues
argument_list|(
name|XMPMM
operator|.
name|HISTORY_ACTION
argument_list|)
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"Preflight"
block|,
literal|"Preflight"
block|,
literal|"Preflight"
block|,
literal|"Preflight"
block|,
literal|"Preflight"
block|,
literal|"Preflight"
block|,
literal|"Preflight"
block|}
argument_list|,
name|m
operator|.
name|getValues
argument_list|(
name|XMPMM
operator|.
name|HISTORY_SOFTWARE_AGENT
argument_list|)
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"2014-03-04T23:50:41Z"
block|,
literal|"2014-03-04T23:50:42Z"
block|,
literal|"2014-03-04T23:51:34Z"
block|,
literal|"2014-03-04T23:51:36Z"
block|,
literal|"2014-03-04T23:51:37Z"
block|,
literal|"2014-03-04T23:52:22Z"
block|,
literal|"2014-03-04T23:54:48Z"
block|}
argument_list|,
name|m
operator|.
name|getValues
argument_list|(
name|XMPMM
operator|.
name|HISTORY_WHEN
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|assertException
parameter_list|(
name|String
name|path
parameter_list|,
name|Parser
name|parser
parameter_list|,
name|ParseContext
name|context
parameter_list|,
name|Class
name|expected
parameter_list|)
block|{
name|boolean
name|noEx
init|=
literal|false
decl_stmt|;
name|InputStream
name|is
init|=
name|getResourceAsStream
argument_list|(
name|path
argument_list|)
decl_stmt|;
try|try
block|{
name|String
name|text
init|=
name|getText
argument_list|(
name|is
argument_list|,
name|parser
argument_list|,
name|context
argument_list|)
decl_stmt|;
name|noEx
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"Not the right exception: "
operator|+
name|path
argument_list|,
name|expected
argument_list|,
name|e
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|closeQuietly
argument_list|(
name|is
argument_list|)
expr_stmt|;
block|}
name|assertFalse
argument_list|(
name|path
operator|+
literal|" should have thrown exception"
argument_list|,
name|noEx
argument_list|)
expr_stmt|;
block|}
comment|/**      * Simple class to count end of document events.  If functionality is useful,      * move to org.apache.tika in src/test      */
specifier|private
class|class
name|EventCountingHandler
extends|extends
name|ContentHandlerDecorator
block|{
specifier|private
name|int
name|endDocument
init|=
literal|0
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|endDocument
parameter_list|()
block|{
name|endDocument
operator|++
expr_stmt|;
block|}
specifier|public
name|int
name|getEndDocument
parameter_list|()
block|{
return|return
name|endDocument
return|;
block|}
block|}
specifier|private
class|class
name|AvoidInlineSelector
implements|implements
name|DocumentSelector
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|select
parameter_list|(
name|Metadata
name|metadata
parameter_list|)
block|{
name|String
name|v
init|=
name|metadata
operator|.
name|get
argument_list|(
name|TikaCoreProperties
operator|.
name|EMBEDDED_RESOURCE_TYPE
argument_list|)
decl_stmt|;
if|if
condition|(
name|v
operator|!=
literal|null
operator|&&
name|v
operator|.
name|equals
argument_list|(
name|TikaCoreProperties
operator|.
name|EmbeddedResourceType
operator|.
name|INLINE
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
block|}
block|}
end_class

end_unit

