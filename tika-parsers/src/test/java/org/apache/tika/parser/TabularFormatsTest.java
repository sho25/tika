begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|TikaTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * Ensure that our various Table-based formats produce consistent,  *  broadly similar output.  * This is mostly focused on the XHTML output  */
end_comment

begin_class
specifier|public
class|class
name|TabularFormatsTest
extends|extends
name|TikaTest
block|{
specifier|protected
specifier|static
specifier|final
name|String
index|[]
name|columnNames
init|=
operator|new
name|String
index|[]
block|{
literal|"recnum"
block|,
literal|"square"
block|,
literal|"desc"
block|,
literal|"pctdone"
block|,
literal|"pctinc"
block|,
literal|"date"
block|,
literal|"datetime"
block|,
literal|"time"
block|}
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|String
index|[]
name|columnLabels
init|=
operator|new
name|String
index|[]
block|{
literal|"Record Number"
block|,
literal|"Square of the Record Number"
block|,
literal|"Description of the Row"
block|,
literal|"Percent Done"
block|,
literal|"Percent Increment"
block|,
literal|"date"
block|,
literal|"datetime"
block|,
literal|"time"
block|}
decl_stmt|;
comment|/**      * Expected values, by<em>column</em>      */
specifier|protected
specifier|static
specifier|final
name|String
index|[]
index|[]
name|table
init|=
operator|new
name|String
index|[]
index|[]
block|{
comment|// TODO All values
operator|new
name|String
index|[]
block|{
literal|"0"
block|,
literal|"1"
block|,
literal|"2"
block|,
literal|"3"
block|,
literal|"4"
block|,
literal|"5"
block|,
literal|"6"
block|,
literal|"7"
block|,
literal|"8"
block|,
literal|"9"
block|,
literal|"10"
block|}
block|,
operator|new
name|String
index|[]
block|{
literal|"0"
block|,
literal|"1"
block|,
literal|"4"
comment|// etc
block|}
block|,
operator|new
name|String
index|[]
block|{
comment|// etc
literal|"01-01-1960"
block|}
block|,
operator|new
name|String
index|[]
block|{
comment|// etc
block|}
block|,
operator|new
name|String
index|[]
block|{
literal|""
block|}
block|}
decl_stmt|;
specifier|protected
name|void
name|assertHeaders
parameter_list|(
name|String
name|xml
parameter_list|,
name|boolean
name|isTH
parameter_list|,
name|boolean
name|hasLabel
parameter_list|,
name|boolean
name|hasName
parameter_list|)
block|{
comment|// Find the first row
name|int
name|splitAt
init|=
name|xml
operator|.
name|indexOf
argument_list|(
literal|"</tr>"
argument_list|)
decl_stmt|;
name|String
name|hRow
init|=
name|xml
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|splitAt
argument_list|)
decl_stmt|;
name|splitAt
operator|=
name|xml
operator|.
name|indexOf
argument_list|(
literal|"<tr>"
argument_list|)
expr_stmt|;
name|hRow
operator|=
name|hRow
operator|.
name|substring
argument_list|(
name|splitAt
operator|+
literal|4
argument_list|)
expr_stmt|;
comment|// Split into cells, ignoring stuff before first cell
name|String
index|[]
name|cells
decl_stmt|;
if|if
condition|(
name|isTH
condition|)
block|{
name|cells
operator|=
name|hRow
operator|.
name|split
argument_list|(
literal|"<th"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|cells
operator|=
name|hRow
operator|.
name|split
argument_list|(
literal|"<td"
argument_list|)
expr_stmt|;
block|}
name|cells
operator|=
name|Arrays
operator|.
name|copyOfRange
argument_list|(
name|cells
argument_list|,
literal|1
argument_list|,
name|cells
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|cells
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|splitAt
operator|=
name|cells
index|[
name|i
index|]
operator|.
name|lastIndexOf
argument_list|(
literal|"</"
argument_list|)
expr_stmt|;
name|cells
index|[
name|i
index|]
operator|=
name|cells
index|[
name|i
index|]
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|splitAt
argument_list|)
operator|.
name|trim
argument_list|()
expr_stmt|;
block|}
comment|// Check we got the right number
name|assertEquals
argument_list|(
literal|"Wrong number of cells in header row "
operator|+
name|hRow
argument_list|,
name|columnLabels
operator|.
name|length
argument_list|,
name|cells
operator|.
name|length
argument_list|)
expr_stmt|;
comment|// Check we got the right stuff
comment|// TODO
block|}
specifier|protected
name|void
name|assertContents
parameter_list|(
name|String
name|xml
parameter_list|,
name|boolean
name|hasHeader
parameter_list|)
block|{
comment|// TODO Check the rows
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSAS7BDAT
parameter_list|()
throws|throws
name|Exception
block|{
name|XMLResult
name|result
init|=
name|getXML
argument_list|(
literal|"test-columnar.sas7bdat"
argument_list|)
decl_stmt|;
name|String
name|xml
init|=
name|result
operator|.
name|xml
decl_stmt|;
name|assertHeaders
argument_list|(
name|xml
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertContents
argument_list|(
name|xml
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testXLS
parameter_list|()
throws|throws
name|Exception
block|{
name|XMLResult
name|result
init|=
name|getXML
argument_list|(
literal|"test-columnar.xls"
argument_list|)
decl_stmt|;
name|String
name|xml
init|=
name|result
operator|.
name|xml
decl_stmt|;
name|assertHeaders
argument_list|(
name|xml
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertContents
argument_list|(
name|xml
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|// TODO Other formats
comment|/**      * Note - we don't have a dedicated CSV parser      *       * This means we don't get proper HTML out...      */
annotation|@
name|Test
specifier|public
name|void
name|testCSV
parameter_list|()
throws|throws
name|Exception
block|{
name|XMLResult
name|result
init|=
name|getXML
argument_list|(
literal|"test-columnar.csv"
argument_list|)
decl_stmt|;
name|String
name|xml
init|=
name|result
operator|.
name|xml
decl_stmt|;
for|for
control|(
name|String
name|label
range|:
name|columnLabels
control|)
block|{
name|assertContains
argument_list|(
name|label
argument_list|,
name|xml
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|String
index|[]
name|vals
range|:
name|table
control|)
block|{
for|for
control|(
name|String
name|val
range|:
name|vals
control|)
block|{
name|assertContains
argument_list|(
name|val
argument_list|,
name|xml
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

