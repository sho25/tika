begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|TikaTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * Ensure that our various Table-based formats produce consistent,  *  broadly similar output.  * This is mostly focused on the XHTML output  */
end_comment

begin_class
specifier|public
class|class
name|TabularFormatsTest
extends|extends
name|TikaTest
block|{
specifier|protected
specifier|static
specifier|final
name|String
index|[]
name|headers
init|=
operator|new
name|String
index|[]
block|{
literal|"String (Num=)"
block|,
literal|"Number"
block|,
literal|"Date"
block|,
literal|"Datetime"
block|,
literal|"Number"
block|}
decl_stmt|;
comment|/**      * Expected values, by<em>column</em>      */
specifier|protected
specifier|static
specifier|final
name|String
index|[]
index|[]
name|table
init|=
operator|new
name|String
index|[]
index|[]
block|{
comment|// TODO All values
operator|new
name|String
index|[]
block|{
literal|"Num=0"
block|}
block|,
operator|new
name|String
index|[]
block|{
literal|"0.0"
block|}
block|,
operator|new
name|String
index|[]
block|{
literal|"1899-12-30"
block|}
block|,
operator|new
name|String
index|[]
block|{
literal|"1900-01-01 11:00:00"
block|}
block|,
operator|new
name|String
index|[]
block|{
literal|""
block|}
block|}
decl_stmt|;
specifier|protected
name|void
name|assertHeaders
parameter_list|(
name|String
name|xml
parameter_list|,
name|boolean
name|isTH
parameter_list|)
block|{
comment|// TODO Check for the first row, then TR or TH
block|}
specifier|protected
name|void
name|assertContents
parameter_list|(
name|String
name|xml
parameter_list|,
name|boolean
name|hasHeader
parameter_list|)
block|{
comment|// TODO Check the rows
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCSV
parameter_list|()
throws|throws
name|Exception
block|{
name|XMLResult
name|result
init|=
name|getXML
argument_list|(
literal|"test-columnar.csv"
argument_list|)
decl_stmt|;
name|String
name|xml
init|=
name|result
operator|.
name|xml
decl_stmt|;
name|assertHeaders
argument_list|(
name|xml
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertContents
argument_list|(
name|xml
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|// TODO SAS7BDAT
comment|// TODO Other formats
block|}
end_class

end_unit

