begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|chm
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|chm
operator|.
name|accessor
operator|.
name|ChmDirectoryListingSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|chm
operator|.
name|accessor
operator|.
name|ChmItsfHeader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|chm
operator|.
name|accessor
operator|.
name|ChmItspHeader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|chm
operator|.
name|accessor
operator|.
name|ChmLzxcControlData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|chm
operator|.
name|core
operator|.
name|ChmCommons
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|chm
operator|.
name|core
operator|.
name|ChmConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|UnsupportedEncodingException
import|;
end_import

begin_comment
comment|/**  * Tests all public methods of ChmLzxcControlData block  */
end_comment

begin_class
specifier|public
class|class
name|TestChmLzxcControlData
block|{
specifier|private
name|ChmLzxcControlData
name|chmLzxcControlData
init|=
literal|null
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|byte
index|[]
name|data
init|=
name|TestParameters
operator|.
name|chmData
decl_stmt|;
comment|/* Creates and parses itsf header */
name|ChmItsfHeader
name|chmItsHeader
init|=
operator|new
name|ChmItsfHeader
argument_list|()
decl_stmt|;
comment|// chmItsHeader.parse(Arrays.copyOfRange(data, 0,
comment|// ChmConstants.CHM_ITSF_V3_LEN - 1), chmItsHeader);
name|chmItsHeader
operator|.
name|parse
argument_list|(
name|ChmCommons
operator|.
name|copyOfRange
argument_list|(
name|data
argument_list|,
literal|0
argument_list|,
name|ChmConstants
operator|.
name|CHM_ITSF_V3_LEN
operator|-
literal|1
argument_list|)
argument_list|,
name|chmItsHeader
argument_list|)
expr_stmt|;
comment|/* Creates and parses itsp block */
name|ChmItspHeader
name|chmItspHeader
init|=
operator|new
name|ChmItspHeader
argument_list|()
decl_stmt|;
comment|// chmItspHeader.parse(Arrays.copyOfRange( data, (int)
comment|// chmItsHeader.getDirOffset(),
comment|// (int) chmItsHeader.getDirOffset()
comment|// + ChmConstants.CHM_ITSP_V1_LEN), chmItspHeader);
name|chmItspHeader
operator|.
name|parse
argument_list|(
name|ChmCommons
operator|.
name|copyOfRange
argument_list|(
name|data
argument_list|,
operator|(
name|int
operator|)
name|chmItsHeader
operator|.
name|getDirOffset
argument_list|()
argument_list|,
operator|(
name|int
operator|)
name|chmItsHeader
operator|.
name|getDirOffset
argument_list|()
operator|+
name|ChmConstants
operator|.
name|CHM_ITSP_V1_LEN
argument_list|)
argument_list|,
name|chmItspHeader
argument_list|)
expr_stmt|;
comment|/* Creating instance of ChmDirListingContainer */
name|ChmDirectoryListingSet
name|chmDirListCont
init|=
operator|new
name|ChmDirectoryListingSet
argument_list|(
name|data
argument_list|,
name|chmItsHeader
argument_list|,
name|chmItspHeader
argument_list|)
decl_stmt|;
name|int
name|indexOfControlData
init|=
name|chmDirListCont
operator|.
name|getControlDataIndex
argument_list|()
decl_stmt|;
name|int
name|indexOfResetTable
init|=
name|ChmCommons
operator|.
name|indexOfResetTableBlock
argument_list|(
name|data
argument_list|,
name|ChmConstants
operator|.
name|LZXC
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
decl_stmt|;
name|byte
index|[]
name|dir_chunk
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|indexOfResetTable
operator|>
literal|0
condition|)
block|{
comment|// dir_chunk = Arrays.copyOfRange( data, indexOfResetTable,
comment|// indexOfResetTable
comment|// +
comment|// chmDirListCont.getDirectoryListingEntryList().get(indexOfControlData).getLength());
name|dir_chunk
operator|=
name|ChmCommons
operator|.
name|copyOfRange
argument_list|(
name|data
argument_list|,
name|indexOfResetTable
argument_list|,
name|indexOfResetTable
operator|+
name|chmDirListCont
operator|.
name|getDirectoryListingEntryList
argument_list|()
operator|.
name|get
argument_list|(
name|indexOfControlData
argument_list|)
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/* Creates and parses control block */
name|chmLzxcControlData
operator|=
operator|new
name|ChmLzxcControlData
argument_list|()
expr_stmt|;
name|chmLzxcControlData
operator|.
name|parse
argument_list|(
name|dir_chunk
argument_list|,
name|chmLzxcControlData
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testConstructorNotNull
parameter_list|()
block|{
name|assertNotNull
argument_list|(
name|chmLzxcControlData
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetResetInterval
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|TestParameters
operator|.
name|VP_RESET_INTERVAL
argument_list|,
name|chmLzxcControlData
operator|.
name|getResetInterval
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetSize
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|TestParameters
operator|.
name|VP_CONTROL_DATA_SIZE
argument_list|,
name|chmLzxcControlData
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetUnknown_18
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|TestParameters
operator|.
name|VP_UNKNOWN_18
argument_list|,
name|chmLzxcControlData
operator|.
name|getUnknown_18
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetVersion
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|TestParameters
operator|.
name|VP_CONTROL_DATA_VERSION
argument_list|,
name|chmLzxcControlData
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetWindowSize
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|TestParameters
operator|.
name|VP_WINDOW_SIZE
argument_list|,
name|chmLzxcControlData
operator|.
name|getWindowSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetWindowsPerReset
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|TestParameters
operator|.
name|VP_WINDOWS_PER_RESET
argument_list|,
name|chmLzxcControlData
operator|.
name|getWindowsPerReset
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetToString
parameter_list|()
block|{
name|assertTrue
argument_list|(
name|chmLzxcControlData
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
name|TestParameters
operator|.
name|VP_CONTROL_DATA_SIGNATURE
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetSignature
parameter_list|()
throws|throws
name|UnsupportedEncodingException
block|{
name|assertEquals
argument_list|(
name|TestParameters
operator|.
name|VP_CONTROL_DATA_SIGNATURE
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
operator|.
name|length
argument_list|,
name|chmLzxcControlData
operator|.
name|getSignature
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetSignaure
parameter_list|()
throws|throws
name|UnsupportedEncodingException
block|{
name|assertEquals
argument_list|(
name|TestParameters
operator|.
name|VP_CONTROL_DATA_SIGNATURE
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
operator|.
name|length
argument_list|,
name|chmLzxcControlData
operator|.
name|getSignature
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

