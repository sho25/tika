begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|pdf
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|exception
operator|.
name|AccessPermissionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|metadata
operator|.
name|AccessPermissions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|metadata
operator|.
name|Metadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|metadata
operator|.
name|PropertyTypeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|AccessCheckerTest
block|{
annotation|@
name|Test
specifier|public
name|void
name|testLegacy
parameter_list|()
throws|throws
name|AccessPermissionException
block|{
name|Metadata
name|m
init|=
name|getMetadata
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|)
decl_stmt|;
comment|//legacy behavior; don't bother checking
name|AccessChecker
name|checker
init|=
operator|new
name|AccessChecker
argument_list|()
decl_stmt|;
name|checker
operator|.
name|check
argument_list|(
name|m
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"no exception"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|m
operator|=
name|getMetadata
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"no exception"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|checker
operator|.
name|check
argument_list|(
name|m
argument_list|)
expr_stmt|;
name|m
operator|=
name|getMetadata
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"no exception"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|checker
operator|.
name|check
argument_list|(
name|m
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNoExtraction
parameter_list|()
block|{
name|Metadata
name|m
init|=
literal|null
decl_stmt|;
comment|//allow nothing
name|AccessChecker
name|checker
init|=
operator|new
name|AccessChecker
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|boolean
name|ex
init|=
literal|false
decl_stmt|;
try|try
block|{
name|m
operator|=
name|getMetadata
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|checker
operator|.
name|check
argument_list|(
name|m
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AccessPermissionException
name|e
parameter_list|)
block|{
name|ex
operator|=
literal|true
expr_stmt|;
block|}
name|assertTrue
argument_list|(
literal|"correct exception with no extraction, no extract for accessibility"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
name|ex
operator|=
literal|false
expr_stmt|;
try|try
block|{
comment|//document allows extraction for accessibility
name|m
operator|=
name|getMetadata
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|checker
operator|.
name|check
argument_list|(
name|m
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AccessPermissionException
name|e
parameter_list|)
block|{
comment|//but application is not an accessibility application
name|ex
operator|=
literal|true
expr_stmt|;
block|}
name|assertTrue
argument_list|(
literal|"correct exception with no extraction, no extract for accessibility"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testExtractOnlyForAccessibility
parameter_list|()
throws|throws
name|AccessPermissionException
block|{
name|Metadata
name|m
init|=
name|getMetadata
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
decl_stmt|;
comment|//allow accessibility
name|AccessChecker
name|checker
init|=
operator|new
name|AccessChecker
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|checker
operator|.
name|check
argument_list|(
name|m
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"no exception"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|boolean
name|ex
init|=
literal|false
decl_stmt|;
try|try
block|{
name|m
operator|=
name|getMetadata
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|checker
operator|.
name|check
argument_list|(
name|m
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AccessPermissionException
name|e
parameter_list|)
block|{
name|ex
operator|=
literal|true
expr_stmt|;
block|}
name|assertTrue
argument_list|(
literal|"correct exception"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCrazyExtractNotForAccessibility
parameter_list|()
throws|throws
name|AccessPermissionException
block|{
name|Metadata
name|m
init|=
name|getMetadata
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|)
decl_stmt|;
comment|//allow accessibility
name|AccessChecker
name|checker
init|=
operator|new
name|AccessChecker
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|checker
operator|.
name|check
argument_list|(
name|m
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"no exception"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|//don't extract for accessibility
name|checker
operator|=
operator|new
name|AccessChecker
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|//if extract content is allowed, the checker shouldn't
comment|//check the value of extract for accessibility
name|checker
operator|.
name|check
argument_list|(
name|m
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"no exception"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCantAddMultiplesToMetadata
parameter_list|()
block|{
name|Metadata
name|m
init|=
operator|new
name|Metadata
argument_list|()
decl_stmt|;
name|boolean
name|ex
init|=
literal|false
decl_stmt|;
name|m
operator|.
name|add
argument_list|(
name|AccessPermissions
operator|.
name|EXTRACT_CONTENT
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
try|try
block|{
name|m
operator|.
name|add
argument_list|(
name|AccessPermissions
operator|.
name|EXTRACT_CONTENT
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|PropertyTypeException
name|e
parameter_list|)
block|{
name|ex
operator|=
literal|true
expr_stmt|;
block|}
name|assertTrue
argument_list|(
literal|"can't add multiple values"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
name|m
operator|=
operator|new
name|Metadata
argument_list|()
expr_stmt|;
name|ex
operator|=
literal|false
expr_stmt|;
name|m
operator|.
name|add
argument_list|(
name|AccessPermissions
operator|.
name|EXTRACT_FOR_ACCESSIBILITY
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
try|try
block|{
name|m
operator|.
name|add
argument_list|(
name|AccessPermissions
operator|.
name|EXTRACT_FOR_ACCESSIBILITY
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|PropertyTypeException
name|e
parameter_list|)
block|{
name|ex
operator|=
literal|true
expr_stmt|;
block|}
name|assertTrue
argument_list|(
literal|"can't add multiple values"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
specifier|private
name|Metadata
name|getMetadata
parameter_list|(
name|boolean
name|allowExtraction
parameter_list|,
name|boolean
name|allowExtractionForAccessibility
parameter_list|)
block|{
name|Metadata
name|m
init|=
operator|new
name|Metadata
argument_list|()
decl_stmt|;
name|m
operator|.
name|set
argument_list|(
name|AccessPermissions
operator|.
name|EXTRACT_CONTENT
argument_list|,
name|Boolean
operator|.
name|toString
argument_list|(
name|allowExtraction
argument_list|)
argument_list|)
expr_stmt|;
name|m
operator|.
name|set
argument_list|(
name|AccessPermissions
operator|.
name|EXTRACT_FOR_ACCESSIBILITY
argument_list|,
name|Boolean
operator|.
name|toString
argument_list|(
name|allowExtractionForAccessibility
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|m
return|;
block|}
block|}
end_class

end_unit

