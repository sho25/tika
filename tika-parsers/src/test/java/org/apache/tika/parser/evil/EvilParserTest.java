begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|evil
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_import
import|import static
name|junit
operator|.
name|framework
operator|.
name|TestCase
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|junit
operator|.
name|framework
operator|.
name|TestCase
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|junit
operator|.
name|framework
operator|.
name|TestCase
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|TikaTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|exception
operator|.
name|TikaException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|metadata
operator|.
name|Metadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|EvilParserTest
extends|extends
name|TikaTest
block|{
annotation|@
name|Test
specifier|public
name|void
name|testNothingBad
parameter_list|()
throws|throws
name|Exception
block|{
comment|//For use cases that need to modify the mime types and potentially
comment|//pass a non-evil document through the EvilParser.
name|Metadata
name|m
init|=
operator|new
name|Metadata
argument_list|()
decl_stmt|;
comment|//need to set resource name so that detector can work
name|m
operator|.
name|set
argument_list|(
name|Metadata
operator|.
name|RESOURCE_NAME_KEY
argument_list|,
literal|"nothing_bad.evil"
argument_list|)
expr_stmt|;
name|String
name|content
init|=
name|getXML
argument_list|(
literal|"evil/nothing_bad.evil"
argument_list|,
name|m
argument_list|)
operator|.
name|xml
decl_stmt|;
name|assertContains
argument_list|(
literal|"Whan that Aprille"
argument_list|,
name|content
argument_list|)
expr_stmt|;
name|assertEvilParser
argument_list|(
name|m
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNullPointer
parameter_list|()
throws|throws
name|Exception
block|{
name|Metadata
name|m
init|=
operator|new
name|Metadata
argument_list|()
decl_stmt|;
comment|//need to set resource name so that detector can work
name|m
operator|.
name|set
argument_list|(
name|Metadata
operator|.
name|RESOURCE_NAME_KEY
argument_list|,
literal|"null_pointer.evil"
argument_list|)
expr_stmt|;
name|boolean
name|ex
init|=
literal|false
decl_stmt|;
try|try
block|{
name|String
name|content
init|=
name|getXML
argument_list|(
literal|"evil/null_pointer.evil"
argument_list|,
name|m
argument_list|)
operator|.
name|xml
decl_stmt|;
comment|//runtime exceptions are wrapped in a TikaException by CompositeParser
block|}
catch|catch
parameter_list|(
name|TikaException
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|.
name|getCause
argument_list|()
operator|!=
literal|null
operator|&&
name|e
operator|.
name|getCause
argument_list|()
operator|instanceof
name|java
operator|.
name|lang
operator|.
name|NullPointerException
condition|)
block|{
name|String
name|msg
init|=
name|e
operator|.
name|getCause
argument_list|()
operator|.
name|getMessage
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"null pointer message"
argument_list|,
name|msg
argument_list|)
expr_stmt|;
name|ex
operator|=
literal|true
expr_stmt|;
block|}
block|}
name|assertTrue
argument_list|(
literal|"NullPointerException"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNullPointerNoMsg
parameter_list|()
throws|throws
name|Exception
block|{
name|Metadata
name|m
init|=
operator|new
name|Metadata
argument_list|()
decl_stmt|;
comment|//need to set resource name so that detector can work
name|m
operator|.
name|set
argument_list|(
name|Metadata
operator|.
name|RESOURCE_NAME_KEY
argument_list|,
literal|"null_pointer_no_msg.evil"
argument_list|)
expr_stmt|;
name|boolean
name|ex
init|=
literal|false
decl_stmt|;
try|try
block|{
name|String
name|content
init|=
name|getXML
argument_list|(
literal|"evil/null_pointer_no_msg.evil"
argument_list|,
name|m
argument_list|)
operator|.
name|xml
decl_stmt|;
comment|//runtime exceptions are wrapped in a TikaException by CompositeParser
block|}
catch|catch
parameter_list|(
name|TikaException
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|.
name|getCause
argument_list|()
operator|!=
literal|null
operator|&&
name|e
operator|.
name|getCause
argument_list|()
operator|instanceof
name|java
operator|.
name|lang
operator|.
name|NullPointerException
condition|)
block|{
name|String
name|msg
init|=
name|e
operator|.
name|getCause
argument_list|()
operator|.
name|getMessage
argument_list|()
decl_stmt|;
name|assertNull
argument_list|(
name|msg
argument_list|)
expr_stmt|;
name|ex
operator|=
literal|true
expr_stmt|;
block|}
block|}
name|assertTrue
argument_list|(
literal|"NullPointerException with no msg"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSleep
parameter_list|()
throws|throws
name|Exception
block|{
name|long
name|start
init|=
operator|new
name|Date
argument_list|()
operator|.
name|getTime
argument_list|()
decl_stmt|;
name|Metadata
name|m
init|=
operator|new
name|Metadata
argument_list|()
decl_stmt|;
comment|//need to set resource name so that detector can work
name|m
operator|.
name|set
argument_list|(
name|Metadata
operator|.
name|RESOURCE_NAME_KEY
argument_list|,
literal|"sleep.evil"
argument_list|)
expr_stmt|;
name|String
name|content
init|=
name|getXML
argument_list|(
literal|"evil/sleep.evil"
argument_list|,
name|m
argument_list|)
operator|.
name|xml
decl_stmt|;
name|assertEvilParser
argument_list|(
name|m
argument_list|)
expr_stmt|;
name|long
name|elapsed
init|=
operator|new
name|Date
argument_list|()
operator|.
name|getTime
argument_list|()
operator|-
name|start
decl_stmt|;
comment|//should sleep for at least 3000
name|boolean
name|enoughTimeHasElapsed
init|=
name|elapsed
operator|>
literal|2000
decl_stmt|;
name|assertTrue
argument_list|(
literal|"enough time has not elapsed: "
operator|+
name|elapsed
argument_list|,
name|enoughTimeHasElapsed
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testHeavyHang
parameter_list|()
throws|throws
name|Exception
block|{
name|long
name|start
init|=
operator|new
name|Date
argument_list|()
operator|.
name|getTime
argument_list|()
decl_stmt|;
name|Metadata
name|m
init|=
operator|new
name|Metadata
argument_list|()
decl_stmt|;
comment|//need to set resource name so that detector can work
name|m
operator|.
name|set
argument_list|(
name|Metadata
operator|.
name|RESOURCE_NAME_KEY
argument_list|,
literal|"heavy_hang.evil"
argument_list|)
expr_stmt|;
name|String
name|content
init|=
name|getXML
argument_list|(
literal|"evil/heavy_hang.evil"
argument_list|,
name|m
argument_list|)
operator|.
name|xml
decl_stmt|;
name|assertEvilParser
argument_list|(
name|m
argument_list|)
expr_stmt|;
name|long
name|elapsed
init|=
operator|new
name|Date
argument_list|()
operator|.
name|getTime
argument_list|()
operator|-
name|start
decl_stmt|;
comment|//should sleep for at least 3000
name|boolean
name|enoughTimeHasElapsed
init|=
name|elapsed
operator|>
literal|2000
decl_stmt|;
name|assertTrue
argument_list|(
literal|"enough time has elapsed: "
operator|+
name|elapsed
argument_list|,
name|enoughTimeHasElapsed
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFakeOOM
parameter_list|()
throws|throws
name|Exception
block|{
name|Metadata
name|m
init|=
operator|new
name|Metadata
argument_list|()
decl_stmt|;
comment|//need to set resource name so that detector can work
name|m
operator|.
name|set
argument_list|(
name|Metadata
operator|.
name|RESOURCE_NAME_KEY
argument_list|,
literal|"fake_oom.evil"
argument_list|)
expr_stmt|;
name|boolean
name|ex
init|=
literal|false
decl_stmt|;
try|try
block|{
name|String
name|content
init|=
name|getXML
argument_list|(
literal|"evil/fake_oom.evil"
argument_list|,
name|m
argument_list|)
operator|.
name|xml
decl_stmt|;
block|}
catch|catch
parameter_list|(
name|OutOfMemoryError
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"fake oom"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|ex
operator|=
literal|true
expr_stmt|;
block|}
name|assertTrue
argument_list|(
literal|"Fake oom"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRealOOM
parameter_list|()
throws|throws
name|Exception
block|{
comment|//this doesn't actually test real oom, but
comment|//only relies on the message
name|Metadata
name|m
init|=
operator|new
name|Metadata
argument_list|()
decl_stmt|;
comment|//need to set resource name so that detector can work
name|m
operator|.
name|set
argument_list|(
name|Metadata
operator|.
name|RESOURCE_NAME_KEY
argument_list|,
literal|"real_oom.evil"
argument_list|)
expr_stmt|;
name|boolean
name|ex
init|=
literal|false
decl_stmt|;
try|try
block|{
name|String
name|content
init|=
name|getXML
argument_list|(
literal|"evil/real_oom.evil"
argument_list|,
name|m
argument_list|)
operator|.
name|xml
decl_stmt|;
block|}
catch|catch
parameter_list|(
name|OutOfMemoryError
name|e
parameter_list|)
block|{
name|assertContains
argument_list|(
literal|"Java heap space"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|ex
operator|=
literal|true
expr_stmt|;
block|}
name|assertTrue
argument_list|(
literal|"Real oom"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|assertEvilParser
parameter_list|(
name|Metadata
name|m
parameter_list|)
block|{
name|String
index|[]
name|parsers
init|=
name|m
operator|.
name|getValues
argument_list|(
literal|"X-Parsed-By"
argument_list|)
decl_stmt|;
comment|//make sure that it was actually parsed by evil.
name|boolean
name|parsedByEvil
init|=
literal|false
decl_stmt|;
for|for
control|(
name|String
name|parser
range|:
name|parsers
control|)
block|{
if|if
condition|(
name|parser
operator|.
name|equals
argument_list|(
literal|"org.apache.tika.parser.evil.EvilParser"
argument_list|)
condition|)
block|{
name|parsedByEvil
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
name|assertTrue
argument_list|(
literal|"evil parser should have been called"
argument_list|,
name|parsedByEvil
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

