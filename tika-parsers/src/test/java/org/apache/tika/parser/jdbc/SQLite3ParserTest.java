begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|jdbc
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_import
import|import static
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
operator|.
name|UTF_8
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|TikaTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|extractor
operator|.
name|EmbeddedResourceHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|extractor
operator|.
name|ParserContainerExtractor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|io
operator|.
name|TikaInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|metadata
operator|.
name|Database
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|metadata
operator|.
name|Metadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|mime
operator|.
name|MediaType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|AutoDetectParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|ParseContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|Parser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|RecursiveParserWrapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|sax
operator|.
name|BasicContentHandlerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|sax
operator|.
name|BodyContentHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|sax
operator|.
name|ToXMLContentHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|ContentHandler
import|;
end_import

begin_class
specifier|public
class|class
name|SQLite3ParserTest
extends|extends
name|TikaTest
block|{
specifier|private
specifier|final
specifier|static
name|String
name|TEST_FILE_NAME
init|=
literal|"testSqlite3b.db"
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|String
name|TEST_FILE1
init|=
literal|"/test-documents/"
operator|+
name|TEST_FILE_NAME
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|testBasic
parameter_list|()
throws|throws
name|Exception
block|{
name|Parser
name|p
init|=
operator|new
name|AutoDetectParser
argument_list|()
decl_stmt|;
comment|//test different types of input streams
comment|//actual inputstream, memory buffered bytearray and literal file
name|InputStream
index|[]
name|streams
init|=
operator|new
name|InputStream
index|[
literal|3
index|]
decl_stmt|;
name|streams
index|[
literal|0
index|]
operator|=
name|getResourceAsStream
argument_list|(
name|TEST_FILE1
argument_list|)
expr_stmt|;
name|ByteArrayOutputStream
name|bos
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|IOUtils
operator|.
name|copy
argument_list|(
name|getResourceAsStream
argument_list|(
name|TEST_FILE1
argument_list|)
argument_list|,
name|bos
argument_list|)
expr_stmt|;
name|streams
index|[
literal|1
index|]
operator|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|bos
operator|.
name|toByteArray
argument_list|()
argument_list|)
expr_stmt|;
name|streams
index|[
literal|2
index|]
operator|=
name|TikaInputStream
operator|.
name|get
argument_list|(
name|getResourceAsFile
argument_list|(
name|TEST_FILE1
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|tests
init|=
literal|0
decl_stmt|;
for|for
control|(
name|InputStream
name|stream
range|:
name|streams
control|)
block|{
name|Metadata
name|metadata
init|=
operator|new
name|Metadata
argument_list|()
decl_stmt|;
name|metadata
operator|.
name|set
argument_list|(
name|Metadata
operator|.
name|RESOURCE_NAME_KEY
argument_list|,
name|TEST_FILE_NAME
argument_list|)
expr_stmt|;
comment|//1) getXML closes the stream
comment|//2) getXML runs recursively on the contents, so the embedded docs should show up
name|XMLResult
name|result
init|=
name|getXML
argument_list|(
name|stream
argument_list|,
name|p
argument_list|,
name|metadata
argument_list|)
decl_stmt|;
name|stream
operator|.
name|close
argument_list|()
expr_stmt|;
name|String
name|x
init|=
name|result
operator|.
name|xml
decl_stmt|;
comment|//first table name
name|assertContains
argument_list|(
literal|"<table name=\"my_table1\"><thead><tr>\t<th>PK</th>"
argument_list|,
name|x
argument_list|)
expr_stmt|;
comment|//non-ascii
name|assertContains
argument_list|(
literal|"<td>普林斯顿大学</td>"
argument_list|,
name|x
argument_list|)
expr_stmt|;
comment|//boolean
name|assertContains
argument_list|(
literal|"<td>true</td>\t<td>2015-01-02</td>"
argument_list|,
name|x
argument_list|)
expr_stmt|;
comment|//date test
name|assertContains
argument_list|(
literal|"2015-01-04"
argument_list|,
name|x
argument_list|)
expr_stmt|;
comment|//timestamp test
name|assertContains
argument_list|(
literal|"2015-01-03 15:17:03"
argument_list|,
name|x
argument_list|)
expr_stmt|;
comment|//first embedded doc's image tag
name|assertContains
argument_list|(
literal|"alt=\"image1.png\""
argument_list|,
name|x
argument_list|)
expr_stmt|;
comment|//second embedded doc's image tag
name|assertContains
argument_list|(
literal|"alt=\"A description...\""
argument_list|,
name|x
argument_list|)
expr_stmt|;
comment|//second table name
name|assertContains
argument_list|(
literal|"<table name=\"my_table2\"><thead><tr>\t<th>INT_COL2</th>"
argument_list|,
name|x
argument_list|)
expr_stmt|;
name|Metadata
name|post
init|=
name|result
operator|.
name|metadata
decl_stmt|;
name|String
index|[]
name|tableNames
init|=
name|post
operator|.
name|getValues
argument_list|(
name|Database
operator|.
name|TABLE_NAME
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|tableNames
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"my_table1"
argument_list|,
name|tableNames
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"my_table2"
argument_list|,
name|tableNames
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|tests
operator|++
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|tests
argument_list|)
expr_stmt|;
block|}
comment|//make sure that table cells and rows are properly marked to
comment|//yield \t and \n at the appropriate places
annotation|@
name|Test
specifier|public
name|void
name|testSpacesInBodyContentHandler
parameter_list|()
throws|throws
name|Exception
block|{
name|Parser
name|p
init|=
operator|new
name|AutoDetectParser
argument_list|()
decl_stmt|;
name|Metadata
name|metadata
init|=
operator|new
name|Metadata
argument_list|()
decl_stmt|;
name|metadata
operator|.
name|set
argument_list|(
name|Metadata
operator|.
name|RESOURCE_NAME_KEY
argument_list|,
name|TEST_FILE_NAME
argument_list|)
expr_stmt|;
name|ContentHandler
name|handler
init|=
operator|new
name|BodyContentHandler
argument_list|(
operator|-
literal|1
argument_list|)
decl_stmt|;
name|ParseContext
name|ctx
init|=
operator|new
name|ParseContext
argument_list|()
decl_stmt|;
name|ctx
operator|.
name|set
argument_list|(
name|Parser
operator|.
name|class
argument_list|,
name|p
argument_list|)
expr_stmt|;
try|try
init|(
name|InputStream
name|stream
init|=
name|getResourceAsStream
argument_list|(
name|TEST_FILE1
argument_list|)
init|)
block|{
name|p
operator|.
name|parse
argument_list|(
name|stream
argument_list|,
name|handler
argument_list|,
name|metadata
argument_list|,
name|ctx
argument_list|)
expr_stmt|;
block|}
name|String
name|s
init|=
name|handler
operator|.
name|toString
argument_list|()
decl_stmt|;
name|assertContains
argument_list|(
literal|"0\t2.3\t2.4\tlorem"
argument_list|,
name|s
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"tempor\n"
argument_list|,
name|s
argument_list|)
expr_stmt|;
block|}
comment|//test what happens if the user forgets to pass in a parser via context
comment|//to handle embedded documents
annotation|@
name|Test
specifier|public
name|void
name|testNotAddingEmbeddedParserToParseContext
parameter_list|()
throws|throws
name|Exception
block|{
name|Parser
name|p
init|=
operator|new
name|AutoDetectParser
argument_list|()
decl_stmt|;
name|ContentHandler
name|handler
init|=
operator|new
name|ToXMLContentHandler
argument_list|()
decl_stmt|;
name|Metadata
name|metadata
init|=
operator|new
name|Metadata
argument_list|()
decl_stmt|;
try|try
init|(
name|InputStream
name|is
init|=
name|getResourceAsStream
argument_list|(
name|TEST_FILE1
argument_list|)
init|)
block|{
name|metadata
operator|.
name|set
argument_list|(
name|Metadata
operator|.
name|RESOURCE_NAME_KEY
argument_list|,
name|TEST_FILE_NAME
argument_list|)
expr_stmt|;
name|p
operator|.
name|parse
argument_list|(
name|is
argument_list|,
name|handler
argument_list|,
name|metadata
argument_list|,
operator|new
name|ParseContext
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|String
name|xml
init|=
name|handler
operator|.
name|toString
argument_list|()
decl_stmt|;
comment|//just includes headers for embedded documents
name|assertContains
argument_list|(
literal|"<table name=\"my_table1\"><thead><tr>"
argument_list|,
name|xml
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"<td><span type=\"blob\" column_name=\"BYTES_COL\" row_number=\"0\"><div class=\"package-entry\"><h1>BYTES_COL_0.doc</h1>"
argument_list|,
name|xml
argument_list|)
expr_stmt|;
comment|//but no other content
name|assertNotContained
argument_list|(
literal|"dog"
argument_list|,
name|xml
argument_list|)
expr_stmt|;
name|assertNotContained
argument_list|(
literal|"alt=\"image1.png\""
argument_list|,
name|xml
argument_list|)
expr_stmt|;
comment|//second embedded doc's image tag
name|assertNotContained
argument_list|(
literal|"alt=\"A description...\""
argument_list|,
name|xml
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRecursiveParserWrapper
parameter_list|()
throws|throws
name|Exception
block|{
name|Parser
name|p
init|=
operator|new
name|AutoDetectParser
argument_list|()
decl_stmt|;
name|RecursiveParserWrapper
name|wrapper
init|=
operator|new
name|RecursiveParserWrapper
argument_list|(
name|p
argument_list|,
operator|new
name|BasicContentHandlerFactory
argument_list|(
name|BasicContentHandlerFactory
operator|.
name|HANDLER_TYPE
operator|.
name|BODY
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|Metadata
name|metadata
init|=
operator|new
name|Metadata
argument_list|()
decl_stmt|;
try|try
init|(
name|InputStream
name|is
init|=
name|getResourceAsStream
argument_list|(
name|TEST_FILE1
argument_list|)
init|)
block|{
name|metadata
operator|.
name|set
argument_list|(
name|Metadata
operator|.
name|RESOURCE_NAME_KEY
argument_list|,
name|TEST_FILE_NAME
argument_list|)
expr_stmt|;
name|wrapper
operator|.
name|parse
argument_list|(
name|is
argument_list|,
operator|new
name|BodyContentHandler
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|,
name|metadata
argument_list|,
operator|new
name|ParseContext
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|Metadata
argument_list|>
name|metadataList
init|=
name|wrapper
operator|.
name|getMetadata
argument_list|()
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|metadataList
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|//make sure the \t are inserted in a body handler
name|String
name|table
init|=
name|metadataList
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|get
argument_list|(
name|RecursiveParserWrapper
operator|.
name|TIKA_CONTENT
argument_list|)
decl_stmt|;
name|assertContains
argument_list|(
literal|"0\t2.3\t2.4\tlorem"
argument_list|,
name|table
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"普林斯顿大学"
argument_list|,
name|table
argument_list|)
expr_stmt|;
comment|//make sure the \n is inserted
name|String
name|table2
init|=
name|metadataList
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|get
argument_list|(
name|RecursiveParserWrapper
operator|.
name|TIKA_CONTENT
argument_list|)
decl_stmt|;
name|assertContains
argument_list|(
literal|"do eiusmod tempor\n"
argument_list|,
name|table2
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"The quick brown fox"
argument_list|,
name|metadataList
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|get
argument_list|(
name|RecursiveParserWrapper
operator|.
name|TIKA_CONTENT
argument_list|)
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"The quick brown fox"
argument_list|,
name|metadataList
operator|.
name|get
argument_list|(
literal|4
argument_list|)
operator|.
name|get
argument_list|(
name|RecursiveParserWrapper
operator|.
name|TIKA_CONTENT
argument_list|)
argument_list|)
expr_stmt|;
comment|//confirm .doc was added to blob
name|assertEquals
argument_list|(
literal|"/BYTES_COL_0.doc/image1.png"
argument_list|,
name|metadataList
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|get
argument_list|(
name|RecursiveParserWrapper
operator|.
name|EMBEDDED_RESOURCE_PATH
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testParserContainerExtractor
parameter_list|()
throws|throws
name|Exception
block|{
comment|//There should be 6 embedded documents:
comment|//2x tables -- UTF-8 csv representations of the tables
comment|//2x word files, one doc and one docx
comment|//2x png files, the same image embedded in each of the doc and docx
name|ParserContainerExtractor
name|ex
init|=
operator|new
name|ParserContainerExtractor
argument_list|()
decl_stmt|;
name|ByteCopyingHandler
name|byteCopier
init|=
operator|new
name|ByteCopyingHandler
argument_list|()
decl_stmt|;
name|Metadata
name|metadata
init|=
operator|new
name|Metadata
argument_list|()
decl_stmt|;
try|try
init|(
name|TikaInputStream
name|is
init|=
name|TikaInputStream
operator|.
name|get
argument_list|(
name|getResourceAsStream
argument_list|(
name|TEST_FILE1
argument_list|)
argument_list|)
init|)
block|{
name|metadata
operator|.
name|set
argument_list|(
name|Metadata
operator|.
name|RESOURCE_NAME_KEY
argument_list|,
name|TEST_FILE_NAME
argument_list|)
expr_stmt|;
name|ex
operator|.
name|extract
argument_list|(
name|is
argument_list|,
name|ex
argument_list|,
name|byteCopier
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|byteCopier
operator|.
name|bytes
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|String
index|[]
name|strings
init|=
operator|new
name|String
index|[
literal|4
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|byteCopier
operator|.
name|bytes
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|byte
index|[]
name|byteArr
init|=
name|byteCopier
operator|.
name|bytes
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|String
name|s
init|=
operator|new
name|String
argument_list|(
name|byteArr
argument_list|,
literal|0
argument_list|,
name|Math
operator|.
name|min
argument_list|(
name|byteArr
operator|.
name|length
argument_list|,
literal|1000
argument_list|)
argument_list|,
name|UTF_8
argument_list|)
decl_stmt|;
name|strings
index|[
name|i
index|]
operator|=
name|s
expr_stmt|;
block|}
name|byte
index|[]
name|oleBytes
init|=
operator|new
name|byte
index|[]
block|{
operator|(
name|byte
operator|)
operator|-
literal|48
block|,
operator|(
name|byte
operator|)
operator|-
literal|49
block|,
operator|(
name|byte
operator|)
literal|17
block|,
operator|(
name|byte
operator|)
operator|-
literal|32
block|,
operator|(
name|byte
operator|)
operator|-
literal|95
block|,
operator|(
name|byte
operator|)
operator|-
literal|79
block|,
operator|(
name|byte
operator|)
literal|26
block|,
operator|(
name|byte
operator|)
operator|-
literal|31
block|,
operator|(
name|byte
operator|)
literal|0
block|,
operator|(
name|byte
operator|)
literal|0
block|,         }
decl_stmt|;
comment|//test OLE
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
name|oleBytes
index|[
name|i
index|]
argument_list|,
name|byteCopier
operator|.
name|bytes
operator|.
name|get
argument_list|(
literal|0
argument_list|)
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|assertContains
argument_list|(
literal|"PNG"
argument_list|,
name|strings
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"PK"
argument_list|,
name|strings
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"PNG"
argument_list|,
name|strings
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
block|}
comment|//This confirms that reading the stream twice is not
comment|//quadrupling the number of attachments.
annotation|@
name|Test
specifier|public
name|void
name|testInputStreamReset
parameter_list|()
throws|throws
name|Exception
block|{
comment|//There should be 8 embedded documents:
comment|//4x word files, two docs and two docxs
comment|//4x png files, the same image embedded in each of the doc and docx
name|ParserContainerExtractor
name|ex
init|=
operator|new
name|ParserContainerExtractor
argument_list|()
decl_stmt|;
name|InputStreamResettingHandler
name|byteCopier
init|=
operator|new
name|InputStreamResettingHandler
argument_list|()
decl_stmt|;
name|Metadata
name|metadata
init|=
operator|new
name|Metadata
argument_list|()
decl_stmt|;
name|metadata
operator|.
name|set
argument_list|(
name|Metadata
operator|.
name|RESOURCE_NAME_KEY
argument_list|,
name|TEST_FILE_NAME
argument_list|)
expr_stmt|;
try|try
init|(
name|InputStream
name|is
init|=
name|getResourceAsStream
argument_list|(
name|TEST_FILE1
argument_list|)
init|)
block|{
try|try
init|(
name|TikaInputStream
name|tis
init|=
name|TikaInputStream
operator|.
name|get
argument_list|(
name|is
argument_list|)
init|)
block|{
name|ex
operator|.
name|extract
argument_list|(
name|tis
argument_list|,
name|ex
argument_list|,
name|byteCopier
argument_list|)
expr_stmt|;
name|is
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
block|}
name|assertEquals
argument_list|(
literal|8
argument_list|,
name|byteCopier
operator|.
name|bytes
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNulls
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|xml
init|=
name|getXML
argument_list|(
name|TEST_FILE_NAME
argument_list|)
operator|.
name|xml
operator|.
name|replaceAll
argument_list|(
literal|"\\s+"
argument_list|,
literal|""
argument_list|)
decl_stmt|;
comment|//everything except for the first key column should be empty
name|assertContains
argument_list|(
literal|"<tr><td>2</td><td/><td/><td/><td/><td/><td/><td/><td/><td/></tr>"
argument_list|,
name|xml
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
class|class
name|InputStreamResettingHandler
implements|implements
name|EmbeddedResourceHandler
block|{
specifier|public
name|List
argument_list|<
name|byte
index|[]
argument_list|>
name|bytes
init|=
operator|new
name|ArrayList
argument_list|<
name|byte
index|[]
argument_list|>
argument_list|()
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|handle
parameter_list|(
name|String
name|filename
parameter_list|,
name|MediaType
name|mediaType
parameter_list|,
name|InputStream
name|stream
parameter_list|)
block|{
name|ByteArrayOutputStream
name|os
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|stream
operator|.
name|markSupported
argument_list|()
condition|)
block|{
name|stream
operator|=
name|TikaInputStream
operator|.
name|get
argument_list|(
name|stream
argument_list|)
expr_stmt|;
block|}
name|stream
operator|.
name|mark
argument_list|(
literal|1000000
argument_list|)
expr_stmt|;
try|try
block|{
name|IOUtils
operator|.
name|copy
argument_list|(
name|stream
argument_list|,
name|os
argument_list|)
expr_stmt|;
name|bytes
operator|.
name|add
argument_list|(
name|os
operator|.
name|toByteArray
argument_list|()
argument_list|)
expr_stmt|;
name|stream
operator|.
name|reset
argument_list|()
expr_stmt|;
comment|//now try again
name|os
operator|.
name|reset
argument_list|()
expr_stmt|;
name|IOUtils
operator|.
name|copy
argument_list|(
name|stream
argument_list|,
name|os
argument_list|)
expr_stmt|;
name|bytes
operator|.
name|add
argument_list|(
name|os
operator|.
name|toByteArray
argument_list|()
argument_list|)
expr_stmt|;
name|stream
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|//swallow
block|}
block|}
block|}
comment|//code used for creating the test file
comment|/*     private Connection getConnection(String dbFileName) throws Exception {         File testDirectory = new File(this.getClass().getResource("/test-documents").toURI());         System.out.println("Writing to: " + testDirectory.getAbsolutePath());         File testDB = new File(testDirectory, dbFileName);         Connection c = null;         try {             Class.forName("org.sqlite.JDBC");             c = DriverManager.getConnection("jdbc:sqlite:" + testDB.getAbsolutePath());         } catch ( Exception e ) {             System.err.println( e.getClass().getName() + ": " + e.getMessage() );             System.exit(0);         }         return c;     }      @Test     public void testCreateDB() throws Exception {         Connection c = getConnection("testSqlite3d.db");         Statement st = c.createStatement();         String sql = "DROP TABLE if exists my_table1";         st.execute(sql);         sql = "CREATE TABLE my_table1 (" +                 "PK INT PRIMARY KEY, "+                 "INT_COL INTEGER, "+                 "FLOAT_COL FLOAT, " +                 "DOUBLE_COL DOUBLE, " +                 "CHAR_COL CHAR(30), "+                 "VARCHAR_COL VARCHAR(30), "+                 "BOOLEAN_COL BOOLEAN,"+                 "DATE_COL DATE,"+                 "TIME_STAMP_COL TIMESTAMP,"+                 "CLOB_COL CLOB, "+                 "BYTES_COL BYTES" +         ")";         st.execute(sql);         sql = "insert into my_table1 (PK, INT_COL, FLOAT_COL, DOUBLE_COL, CHAR_COL, " +                 "VARCHAR_COL, BOOLEAN_COL, DATE_COL, TIME_STAMP_COL, CLOB_COL, BYTES_COL) " +                 "values (?,?,?,?,?,?,?,?,?,?,?)";         SimpleDateFormat f = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");         java.util.Date d = f.parse("2015-01-03 15:17:03");         System.out.println(d.getTime());         long d1Long = 1420229823000L;// 2015-01-02 15:17:03         long d2Long = 1420316223000L;// 2015-01-03 15:17:03         PreparedStatement ps = c.prepareStatement(sql);         ps.setInt(1, 0);         ps.setInt(2, 10);         ps.setFloat(3, 2.3f);         ps.setDouble(4, 2.4d);         ps.setString(5, "lorem");         ps.setString(6, "普林斯顿大学");         ps.setBoolean(7, true);         ps.setString(8, "2015-01-02");         ps.setString(9, "2015-01-03 15:17:03"); //        ps.setClob(10, new StringReader(sql));         ps.setBytes(10, getByteArray(this.getClass().getResourceAsStream("/test-documents/testWORD_1img.doc")));//contains "quick brown fox"         ps.executeUpdate();         ps.clearParameters();          ps.setInt(1, 1);         ps.setInt(2, 20);         ps.setFloat(3, 4.6f);         ps.setDouble(4, 4.8d);         ps.setString(5, "dolor");         ps.setString(6, "sit");         ps.setBoolean(7, false);         ps.setString(8, "2015-01-04");         ps.setString(9, "2015-01-03 15:17:03");         //ps.setClob(9, new StringReader("consectetur adipiscing elit"));         ps.setBytes(10, getByteArray(this.getClass().getResourceAsStream("/test-documents/testWORD_1img.docx")));//contains "The end!"          ps.executeUpdate();         //now add a fully null row         ps.clearParameters();         ps.setInt(1, 2);         ps.setNull(2, Types.INTEGER);         ps.setNull(3, Types.FLOAT);         ps.setNull(4, Types.DOUBLE);         ps.setNull(5, Types.CHAR);         ps.setNull(6, Types.VARCHAR);         ps.setNull(7, Types.BOOLEAN);         ps.setNull(8, Types.DATE);         ps.setNull(9, Types.TIMESTAMP);         ps.setNull(10, Types.BLOB);         ps.executeUpdate();          //build table2         sql = "DROP TABLE if exists my_table2";         st.execute(sql);          sql = "CREATE TABLE my_table2 (" +                 "INT_COL2 INT PRIMARY KEY, "+                 "VARCHAR_COL2 VARCHAR(64))";         st.execute(sql);         sql = "INSERT INTO my_table2 values(0,'sed, do eiusmod tempor')";         st.execute(sql);         sql = "INSERT INTO my_table2 values(1,'incididunt \nut labore')";         st.execute(sql);          c.close();     }      private byte[] getByteArray(InputStream is) throws IOException {         ByteArrayOutputStream bos = new ByteArrayOutputStream();         byte[] buff = new byte[1024];         for (int bytesRead; (bytesRead = is.read(buff)) != -1;) {             bos.write(buff, 0, bytesRead);         }         return bos.toByteArray();     }  */
block|}
end_class

end_unit

