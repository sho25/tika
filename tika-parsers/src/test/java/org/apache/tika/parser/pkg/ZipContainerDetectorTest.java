begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|pkg
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Paths
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|TikaTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|config
operator|.
name|TikaConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|detect
operator|.
name|Detector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|io
operator|.
name|TikaInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|metadata
operator|.
name|Metadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|mime
operator|.
name|MediaType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|mime
operator|.
name|MediaTypeRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|odf
operator|.
name|ODFParserTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Ignore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|ZipContainerDetectorTest
extends|extends
name|TikaTest
block|{
specifier|private
specifier|static
name|MediaType
name|ODT_TEXT
init|=
name|MediaType
operator|.
name|application
argument_list|(
literal|"vnd.oasis.opendocument.text"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|MediaType
name|TIFF
init|=
name|MediaType
operator|.
name|image
argument_list|(
literal|"tiff"
argument_list|)
decl_stmt|;
name|ZipContainerDetector
name|zipContainerDetector
init|=
operator|new
name|ZipContainerDetector
argument_list|()
decl_stmt|;
name|StreamingZipContainerDetector
name|streamingZipDetector
init|=
operator|new
name|StreamingZipContainerDetector
argument_list|()
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|testTiffWorkaround
parameter_list|()
throws|throws
name|Exception
block|{
comment|//TIKA-2591
name|Metadata
name|metadata
init|=
operator|new
name|Metadata
argument_list|()
decl_stmt|;
try|try
init|(
name|InputStream
name|is
init|=
name|TikaInputStream
operator|.
name|get
argument_list|(
name|getResourceAsStream
argument_list|(
literal|"/test-documents/testTIFF.tif"
argument_list|)
argument_list|)
init|)
block|{
name|MediaType
name|mt
init|=
name|zipContainerDetector
operator|.
name|detect
argument_list|(
name|is
argument_list|,
name|metadata
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|TIFF
argument_list|,
name|mt
argument_list|)
expr_stmt|;
block|}
name|metadata
operator|=
operator|new
name|Metadata
argument_list|()
expr_stmt|;
try|try
init|(
name|InputStream
name|is
init|=
name|TikaInputStream
operator|.
name|get
argument_list|(
name|getResourceAsStream
argument_list|(
literal|"/test-documents/testTIFF_multipage.tif"
argument_list|)
argument_list|)
init|)
block|{
name|MediaType
name|mt
init|=
name|zipContainerDetector
operator|.
name|detect
argument_list|(
name|is
argument_list|,
name|metadata
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|TIFF
argument_list|,
name|mt
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testODT
parameter_list|()
throws|throws
name|Exception
block|{
try|try
init|(
name|InputStream
name|input
init|=
name|ODFParserTest
operator|.
name|class
operator|.
name|getResourceAsStream
argument_list|(
literal|"/test-documents/testODFwithOOo3.odt"
argument_list|)
init|)
block|{
name|Metadata
name|metadata
init|=
operator|new
name|Metadata
argument_list|()
decl_stmt|;
name|MediaType
name|mt
init|=
name|zipContainerDetector
operator|.
name|detect
argument_list|(
name|input
argument_list|,
name|metadata
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|ODT_TEXT
argument_list|,
name|mt
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIWorks
parameter_list|()
throws|throws
name|Exception
block|{
comment|//have to have marklimit in ZipContainerDetector> 100000 for this to work
try|try
init|(
name|InputStream
name|input
init|=
name|ODFParserTest
operator|.
name|class
operator|.
name|getResourceAsStream
argument_list|(
literal|"/test-documents/testPages.pages"
argument_list|)
init|)
block|{
name|Metadata
name|metadata
init|=
operator|new
name|Metadata
argument_list|()
decl_stmt|;
name|MediaType
name|mt
init|=
name|zipContainerDetector
operator|.
name|detect
argument_list|(
name|input
argument_list|,
name|metadata
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"application/vnd.apple.pages"
argument_list|,
name|mt
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|InputStream
name|is
init|=
name|getClass
argument_list|()
operator|.
name|getResourceAsStream
argument_list|(
literal|"/org/apache/tika/parser/pkg/tika-config.xml"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|is
argument_list|)
expr_stmt|;
name|TikaConfig
name|tikaConfig
init|=
operator|new
name|TikaConfig
argument_list|(
name|is
argument_list|)
decl_stmt|;
try|try
init|(
name|InputStream
name|input
init|=
name|ODFParserTest
operator|.
name|class
operator|.
name|getResourceAsStream
argument_list|(
literal|"/test-documents/testPages.pages"
argument_list|)
init|)
block|{
name|Metadata
name|metadata
init|=
operator|new
name|Metadata
argument_list|()
decl_stmt|;
name|MediaType
name|mt
init|=
name|tikaConfig
operator|.
name|getDetector
argument_list|()
operator|.
name|detect
argument_list|(
name|input
argument_list|,
name|metadata
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"application/zip"
argument_list|,
name|mt
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testXPS
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|String
name|file
range|:
operator|new
name|String
index|[]
block|{
literal|"testXPS_various.xps"
block|,
literal|"testPPT.xps"
block|}
control|)
block|{
name|long
name|start
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
try|try
init|(
name|InputStream
name|input
init|=
name|ODFParserTest
operator|.
name|class
operator|.
name|getResourceAsStream
argument_list|(
literal|"/test-documents/"
operator|+
name|file
argument_list|)
init|)
block|{
name|MediaType
name|mediaType
init|=
name|streamingZipDetector
operator|.
name|detect
argument_list|(
name|input
argument_list|,
operator|new
name|Metadata
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|ZipContainerDetectorBase
operator|.
name|XPS
argument_list|,
name|mediaType
argument_list|)
expr_stmt|;
block|}
try|try
init|(
name|TikaInputStream
name|input
init|=
name|TikaInputStream
operator|.
name|get
argument_list|(
name|Paths
operator|.
name|get
argument_list|(
name|ODFParserTest
operator|.
name|class
operator|.
name|getResource
argument_list|(
literal|"/test-documents/"
operator|+
name|file
argument_list|)
operator|.
name|toURI
argument_list|()
argument_list|)
argument_list|)
init|)
block|{
name|MediaType
name|mediaType
init|=
name|zipContainerDetector
operator|.
name|detect
argument_list|(
name|input
argument_list|,
operator|new
name|Metadata
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|ZipContainerDetectorBase
operator|.
name|XPS
argument_list|,
name|mediaType
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Ignore
argument_list|(
literal|"for offline testing"
argument_list|)
annotation|@
name|Test
specifier|public
name|void
name|timeDetection
parameter_list|()
throws|throws
name|Exception
block|{
name|TikaConfig
name|config
init|=
name|TikaConfig
operator|.
name|getDefaultConfig
argument_list|()
decl_stmt|;
name|Detector
name|detector
init|=
name|config
operator|.
name|getDetector
argument_list|()
decl_stmt|;
name|MediaTypeRegistry
name|registry
init|=
name|config
operator|.
name|getMediaTypeRegistry
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|File
argument_list|>
name|zips
init|=
name|getTestZipBasedFiles
argument_list|(
name|detector
argument_list|,
name|registry
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|MediaType
argument_list|>
name|mediaTypeSet
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|long
name|nonTikaStream
init|=
literal|0
decl_stmt|;
name|long
name|tikaStream
init|=
literal|0
decl_stmt|;
name|long
name|tikaStreamWFile
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|20
condition|;
name|i
operator|++
control|)
block|{
for|for
control|(
name|File
name|z
range|:
name|zips
control|)
block|{
name|long
name|start
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
try|try
init|(
name|InputStream
name|is
init|=
operator|new
name|BufferedInputStream
argument_list|(
operator|new
name|FileInputStream
argument_list|(
name|z
argument_list|)
argument_list|)
init|)
block|{
name|MediaType
name|mt
init|=
name|detector
operator|.
name|detect
argument_list|(
name|is
argument_list|,
operator|new
name|Metadata
argument_list|()
argument_list|)
decl_stmt|;
name|mediaTypeSet
operator|.
name|add
argument_list|(
name|mt
argument_list|)
expr_stmt|;
block|}
name|nonTikaStream
operator|+=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|start
expr_stmt|;
name|start
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
try|try
init|(
name|InputStream
name|is
init|=
name|TikaInputStream
operator|.
name|get
argument_list|(
operator|new
name|BufferedInputStream
argument_list|(
operator|new
name|FileInputStream
argument_list|(
name|z
argument_list|)
argument_list|)
argument_list|)
init|)
block|{
name|MediaType
name|mt
init|=
name|detector
operator|.
name|detect
argument_list|(
name|is
argument_list|,
operator|new
name|Metadata
argument_list|()
argument_list|)
decl_stmt|;
name|mediaTypeSet
operator|.
name|add
argument_list|(
name|mt
argument_list|)
expr_stmt|;
block|}
name|tikaStream
operator|+=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|start
expr_stmt|;
name|start
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
try|try
init|(
name|InputStream
name|is
init|=
name|TikaInputStream
operator|.
name|get
argument_list|(
name|z
argument_list|)
init|)
block|{
name|MediaType
name|mt
init|=
name|detector
operator|.
name|detect
argument_list|(
name|is
argument_list|,
operator|new
name|Metadata
argument_list|()
argument_list|)
decl_stmt|;
name|mediaTypeSet
operator|.
name|add
argument_list|(
name|mt
argument_list|)
expr_stmt|;
block|}
name|tikaStreamWFile
operator|+=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|start
expr_stmt|;
block|}
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"tika stream: "
operator|+
name|tikaStream
operator|+
literal|"\ntika stream w file: "
operator|+
name|tikaStreamWFile
operator|+
literal|"\nnon tika stream:"
operator|+
name|nonTikaStream
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|Ignore
argument_list|(
literal|"to be used for offline timing tests"
argument_list|)
specifier|public
name|void
name|timeParsing
parameter_list|()
throws|throws
name|Exception
block|{
name|TikaConfig
name|config
init|=
name|TikaConfig
operator|.
name|getDefaultConfig
argument_list|()
decl_stmt|;
name|Detector
name|detector
init|=
name|config
operator|.
name|getDetector
argument_list|()
decl_stmt|;
name|MediaTypeRegistry
name|registry
init|=
name|config
operator|.
name|getMediaTypeRegistry
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|File
argument_list|>
name|zips
init|=
name|getTestZipBasedFiles
argument_list|(
name|detector
argument_list|,
name|registry
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"zips size: "
operator|+
name|zips
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|MediaType
argument_list|>
name|mediaTypeSet
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|long
name|nonTikaStream
init|=
literal|0
decl_stmt|;
name|long
name|tikaStream
init|=
literal|0
decl_stmt|;
name|long
name|tikaStreamWFile
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
for|for
control|(
name|File
name|z
range|:
name|zips
control|)
block|{
name|long
name|start
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
try|try
init|(
name|InputStream
name|is
init|=
operator|new
name|BufferedInputStream
argument_list|(
operator|new
name|FileInputStream
argument_list|(
name|z
argument_list|)
argument_list|)
init|)
block|{
name|getRecursiveMetadata
argument_list|(
name|is
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|nonTikaStream
operator|+=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|start
expr_stmt|;
name|start
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
try|try
init|(
name|InputStream
name|is
init|=
name|TikaInputStream
operator|.
name|get
argument_list|(
operator|new
name|BufferedInputStream
argument_list|(
operator|new
name|FileInputStream
argument_list|(
name|z
argument_list|)
argument_list|)
argument_list|)
init|)
block|{
name|getRecursiveMetadata
argument_list|(
name|is
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|tikaStream
operator|+=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|start
expr_stmt|;
name|start
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
try|try
init|(
name|InputStream
name|is
init|=
name|TikaInputStream
operator|.
name|get
argument_list|(
name|z
argument_list|)
init|)
block|{
name|getRecursiveMetadata
argument_list|(
name|is
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|tikaStreamWFile
operator|+=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|start
expr_stmt|;
block|}
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"tika stream: "
operator|+
name|tikaStream
operator|+
literal|"\ntika stream w file: "
operator|+
name|tikaStreamWFile
operator|+
literal|"\nnon tika stream:"
operator|+
name|nonTikaStream
argument_list|)
expr_stmt|;
block|}
comment|//TODO -- we need to find a dwg+xps file for testing
specifier|private
name|List
argument_list|<
name|File
argument_list|>
name|getTestZipBasedFiles
parameter_list|(
name|Detector
name|detector
parameter_list|,
name|MediaTypeRegistry
name|registry
parameter_list|)
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|File
argument_list|>
name|zips
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|File
name|f
range|:
name|Paths
operator|.
name|get
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getResource
argument_list|(
literal|"/test-documents"
argument_list|)
operator|.
name|toURI
argument_list|()
argument_list|)
operator|.
name|toFile
argument_list|()
operator|.
name|listFiles
argument_list|()
control|)
block|{
try|try
init|(
name|InputStream
name|is
init|=
name|TikaInputStream
operator|.
name|get
argument_list|(
name|f
argument_list|)
init|)
block|{
name|MediaType
name|mt
init|=
name|detector
operator|.
name|detect
argument_list|(
name|is
argument_list|,
operator|new
name|Metadata
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|registry
operator|.
name|isSpecializationOf
argument_list|(
name|mt
argument_list|,
name|MediaType
operator|.
name|APPLICATION_ZIP
argument_list|)
condition|)
block|{
name|zips
operator|.
name|add
argument_list|(
name|f
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{              }
block|}
return|return
name|zips
return|;
block|}
block|}
end_class

end_unit

