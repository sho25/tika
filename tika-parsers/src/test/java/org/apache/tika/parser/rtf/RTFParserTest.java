begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|rtf
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|TikaTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|config
operator|.
name|TikaConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|metadata
operator|.
name|Metadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|ParseContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|sax
operator|.
name|WriteOutContentHandler
import|;
end_import

begin_comment
comment|/**  * Junit test class for the Tika {@link RTFParser}  */
end_comment

begin_class
specifier|public
class|class
name|RTFParserTest
extends|extends
name|TikaTest
block|{
specifier|private
name|TikaConfig
name|tc
decl_stmt|;
specifier|private
name|RTFParser
name|parser
decl_stmt|;
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|tc
operator|=
name|TikaConfig
operator|.
name|getDefaultConfig
argument_list|()
expr_stmt|;
name|parser
operator|=
operator|new
name|RTFParser
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|testBasicExtraction
parameter_list|()
throws|throws
name|Exception
block|{
name|File
name|file
init|=
name|getResourceAsFile
argument_list|(
literal|"/test-documents/testRTF.rtf"
argument_list|)
decl_stmt|;
name|Metadata
name|metadata
init|=
operator|new
name|Metadata
argument_list|()
decl_stmt|;
name|StringWriter
name|writer
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|parser
operator|.
name|parse
argument_list|(
operator|new
name|FileInputStream
argument_list|(
name|file
argument_list|)
argument_list|,
operator|new
name|WriteOutContentHandler
argument_list|(
name|writer
argument_list|)
argument_list|,
name|metadata
argument_list|,
operator|new
name|ParseContext
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|content
init|=
name|writer
operator|.
name|toString
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"application/rtf"
argument_list|,
name|metadata
operator|.
name|get
argument_list|(
name|Metadata
operator|.
name|CONTENT_TYPE
argument_list|)
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"Test"
argument_list|,
name|content
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"indexation Word"
argument_list|,
name|content
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testRTFms932Extraction
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|content
init|=
name|getText
argument_list|(
literal|"testRTF-ms932.rtf"
argument_list|)
decl_stmt|;
comment|// Hello in Japanese
name|assertContains
argument_list|(
literal|"\u3053\u3093\u306b\u3061\u306f"
argument_list|,
name|content
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testRTFUmlautSpacesExtraction
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|content
init|=
name|getText
argument_list|(
literal|"testRTFUmlautSpaces.rtf"
argument_list|)
decl_stmt|;
name|assertContains
argument_list|(
literal|"\u00DCbersicht"
argument_list|,
name|content
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testRTFWordPadCzechCharactersExtraction
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|content
init|=
name|getText
argument_list|(
literal|"testRTFWordPadCzechCharacters.rtf"
argument_list|)
decl_stmt|;
name|assertContains
argument_list|(
literal|"\u010Cl\u00E1nek t\u00FDdne"
argument_list|,
name|content
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"starov\u011Bk\u00E9 \u017Eidovsk\u00E9 n\u00E1bo\u017Eensk\u00E9 texty"
argument_list|,
name|content
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testRTFWord2010CzechCharactersExtraction
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|content
init|=
name|getText
argument_list|(
literal|"testRTFWord2010CzechCharacters.rtf"
argument_list|)
decl_stmt|;
name|assertContains
argument_list|(
literal|"\u010Cl\u00E1nek t\u00FDdne"
argument_list|,
name|content
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"starov\u011Bk\u00E9 \u017Eidovsk\u00E9 n\u00E1bo\u017Eensk\u00E9 texty"
argument_list|,
name|content
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testRTFTableCellSeparation
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|content
init|=
name|getText
argument_list|(
literal|"testRTFTableCellSeparation.rtf"
argument_list|)
decl_stmt|;
name|content
operator|=
name|content
operator|.
name|replaceAll
argument_list|(
literal|"\\s+"
argument_list|,
literal|" "
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"a b c d \u00E4 \u00EB \u00F6 \u00FC"
argument_list|,
name|content
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testJapaneseText
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|content
init|=
name|getText
argument_list|(
literal|"testRTFJapanese.rtf"
argument_list|)
decl_stmt|;
name|assertContains
argument_list|(
literal|"1."
argument_list|,
name|content
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"4."
argument_list|,
name|content
argument_list|)
expr_stmt|;
comment|// Special version of (GHQ)
name|assertContains
argument_list|(
literal|"\uff08\uff27\uff28\uff31\uff09"
argument_list|,
name|content
argument_list|)
expr_stmt|;
comment|// 6 other characters
name|assertContains
argument_list|(
literal|"\u6771\u4eac\u90fd\u4e09\u9df9\u5e02"
argument_list|,
name|content
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testTextWithCurlyBraces
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|content
init|=
name|getText
argument_list|(
literal|"testRTFWithCurlyBraces.rtf"
argument_list|)
decl_stmt|;
comment|//assertContains("{ some text inside curly brackets }", content);
name|assertContains
argument_list|(
literal|"{  some text inside curly brackets  }"
argument_list|,
name|content
argument_list|)
expr_stmt|;
block|}
specifier|private
name|String
name|getText
parameter_list|(
name|String
name|filename
parameter_list|)
throws|throws
name|Exception
block|{
name|File
name|file
init|=
name|getResourceAsFile
argument_list|(
literal|"/test-documents/"
operator|+
name|filename
argument_list|)
decl_stmt|;
name|Metadata
name|metadata
init|=
operator|new
name|Metadata
argument_list|()
decl_stmt|;
name|StringWriter
name|writer
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|parser
operator|.
name|parse
argument_list|(
operator|new
name|FileInputStream
argument_list|(
name|file
argument_list|)
argument_list|,
operator|new
name|WriteOutContentHandler
argument_list|(
name|writer
argument_list|)
argument_list|,
name|metadata
argument_list|,
operator|new
name|ParseContext
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|content
init|=
name|writer
operator|.
name|toString
argument_list|()
decl_stmt|;
return|return
name|content
return|;
block|}
block|}
end_class

end_unit

