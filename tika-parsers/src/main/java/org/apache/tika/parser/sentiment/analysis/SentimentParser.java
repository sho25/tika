begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|sentiment
operator|.
name|analysis
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|exception
operator|.
name|TikaException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|metadata
operator|.
name|Metadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|mime
operator|.
name|MediaType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|AbstractParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|ParseContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|ContentHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_import
import|import
name|opennlp
operator|.
name|tools
operator|.
name|sentiment
operator|.
name|SentimentME
import|;
end_import

begin_import
import|import
name|opennlp
operator|.
name|tools
operator|.
name|sentiment
operator|.
name|SentimentModel
import|;
end_import

begin_comment
comment|/**  * The main class for creating a sentiment analysis parser.  */
end_comment

begin_class
specifier|public
class|class
name|SentimentParser
extends|extends
name|AbstractParser
block|{
specifier|private
specifier|static
specifier|final
name|String
name|MODEL
init|=
literal|"model"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Set
argument_list|<
name|MediaType
argument_list|>
name|SUPPORTED_TYPES
init|=
name|Collections
operator|.
name|singleton
argument_list|(
name|MediaType
operator|.
name|application
argument_list|(
literal|"sentiment"
argument_list|)
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|HELLO_MIME_TYPE
init|=
literal|"application/sentiment"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|Logger
operator|.
name|getLogger
argument_list|(
name|SentimentParser
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|transient
name|SentimentME
name|sentiment
decl_stmt|;
specifier|private
specifier|transient
name|URL
name|modelUrl
decl_stmt|;
specifier|private
name|boolean
name|initialised
decl_stmt|;
specifier|private
name|boolean
name|available
decl_stmt|;
comment|/**    * Constructor    */
specifier|public
name|SentimentParser
parameter_list|()
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Create sentiment parser"
argument_list|)
expr_stmt|;
block|}
comment|/**    * Initialises a sentiment parser    *    * @param url    *          the url to the model    */
specifier|public
name|void
name|initialise
parameter_list|(
name|URL
name|url
parameter_list|)
block|{
try|try
block|{
if|if
condition|(
name|this
operator|.
name|modelUrl
operator|!=
literal|null
operator|&&
name|this
operator|.
name|modelUrl
operator|.
name|toURI
argument_list|()
operator|.
name|equals
argument_list|(
name|modelUrl
operator|.
name|toURI
argument_list|()
argument_list|)
condition|)
block|{
return|return;
block|}
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|e1
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e1
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
name|this
operator|.
name|modelUrl
operator|=
name|url
expr_stmt|;
name|this
operator|.
name|available
operator|=
name|url
operator|!=
literal|null
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|available
condition|)
block|{
try|try
block|{
name|SentimentModel
name|model
init|=
operator|new
name|SentimentModel
argument_list|(
name|url
argument_list|)
decl_stmt|;
name|this
operator|.
name|sentiment
operator|=
operator|new
name|SentimentME
argument_list|(
name|model
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warning
argument_list|(
literal|"Sentiment Parser setup failed: "
operator|+
name|e
argument_list|)
expr_stmt|;
name|this
operator|.
name|available
operator|=
literal|false
expr_stmt|;
block|}
block|}
name|initialised
operator|=
literal|true
expr_stmt|;
block|}
comment|/**    * Initialises a sentiment parser    *    * @param file    *          the model file    */
specifier|public
name|void
name|initialise
parameter_list|(
name|File
name|file
parameter_list|)
block|{
try|try
block|{
name|SentimentModel
name|model
init|=
operator|new
name|SentimentModel
argument_list|(
name|file
argument_list|)
decl_stmt|;
name|this
operator|.
name|sentiment
operator|=
operator|new
name|SentimentME
argument_list|(
name|model
argument_list|)
expr_stmt|;
name|this
operator|.
name|available
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warning
argument_list|(
literal|"Sentiment Parser setup failed: "
operator|+
name|e
argument_list|)
expr_stmt|;
name|this
operator|.
name|available
operator|=
literal|false
expr_stmt|;
block|}
name|initialised
operator|=
literal|true
expr_stmt|;
block|}
comment|/**    * Returns the types supported    *    * @param context    *          the parse context    * @return the set of types supported    */
annotation|@
name|Override
specifier|public
name|Set
argument_list|<
name|MediaType
argument_list|>
name|getSupportedTypes
parameter_list|(
name|ParseContext
name|context
parameter_list|)
block|{
return|return
name|SUPPORTED_TYPES
return|;
block|}
comment|/**    * Performs the parse    *    * @param stream    *          the input    * @param handler    *          the content handler    * @param metadata    *          the metadata passed    * @param context    *          the context for the parser    */
annotation|@
name|Override
specifier|public
name|void
name|parse
parameter_list|(
name|InputStream
name|stream
parameter_list|,
name|ContentHandler
name|handler
parameter_list|,
name|Metadata
name|metadata
parameter_list|,
name|ParseContext
name|context
parameter_list|)
throws|throws
name|IOException
throws|,
name|SAXException
throws|,
name|TikaException
block|{
if|if
condition|(
operator|!
name|initialised
condition|)
block|{
name|String
name|model
init|=
name|metadata
operator|.
name|get
argument_list|(
name|MODEL
argument_list|)
decl_stmt|;
name|initialise
argument_list|(
operator|new
name|File
argument_list|(
name|model
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|available
condition|)
block|{
name|String
name|inputString
init|=
name|IOUtils
operator|.
name|toString
argument_list|(
name|stream
argument_list|,
literal|"UTF-8"
argument_list|)
decl_stmt|;
name|String
name|output
init|=
name|sentiment
operator|.
name|predict
argument_list|(
name|inputString
argument_list|)
decl_stmt|;
name|metadata
operator|.
name|add
argument_list|(
literal|"Sentiment"
argument_list|,
name|output
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|metadata
operator|.
name|add
argument_list|(
literal|"Error"
argument_list|,
literal|"Model is not available"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

