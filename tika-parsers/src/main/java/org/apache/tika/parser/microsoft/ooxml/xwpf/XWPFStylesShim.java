begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|microsoft
operator|.
name|ooxml
operator|.
name|xwpf
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|openxml4j
operator|.
name|opc
operator|.
name|PackagePart
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|exception
operator|.
name|TikaException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|ParseContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|microsoft
operator|.
name|ooxml
operator|.
name|AbstractDocumentXMLBodyHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|sax
operator|.
name|OfflineContentHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|Attributes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|helpers
operator|.
name|DefaultHandler
import|;
end_import

begin_comment
comment|/**  * For Tika, all we need (so far) is a mapping between styleId and a style's name.  *  * This class uses SAX to scrape that info out of the styles.xml file.  If  * either the styleId or the style's name is null, no information is recorded.  */
end_comment

begin_class
specifier|public
class|class
name|XWPFStylesShim
block|{
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|styles
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|public
name|XWPFStylesShim
parameter_list|(
name|PackagePart
name|part
parameter_list|,
name|ParseContext
name|parseContext
parameter_list|)
block|{
try|try
init|(
name|InputStream
name|is
init|=
name|part
operator|.
name|getInputStream
argument_list|()
init|)
block|{
name|onDocumentLoad
argument_list|(
name|parseContext
argument_list|,
name|is
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
decl||
name|TikaException
decl||
name|SAXException
name|e
parameter_list|)
block|{
comment|//swallow
block|}
block|}
specifier|private
name|void
name|onDocumentLoad
parameter_list|(
name|ParseContext
name|parseContext
parameter_list|,
name|InputStream
name|stream
parameter_list|)
throws|throws
name|TikaException
throws|,
name|IOException
throws|,
name|SAXException
block|{
name|parseContext
operator|.
name|getSAXParser
argument_list|()
operator|.
name|parse
argument_list|(
name|stream
argument_list|,
operator|new
name|OfflineContentHandler
argument_list|(
operator|new
name|StylesStripper
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      *      * @param styleId      * @return style's name or null if styleId is null or can't be found      */
specifier|public
name|String
name|getStyleName
parameter_list|(
name|String
name|styleId
parameter_list|)
block|{
if|if
condition|(
name|styleId
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|styles
operator|.
name|get
argument_list|(
name|styleId
argument_list|)
return|;
block|}
specifier|private
class|class
name|StylesStripper
extends|extends
name|DefaultHandler
block|{
name|String
name|currentStyleId
init|=
literal|null
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|startElement
parameter_list|(
name|String
name|uri
parameter_list|,
name|String
name|localName
parameter_list|,
name|String
name|qName
parameter_list|,
name|Attributes
name|atts
parameter_list|)
throws|throws
name|SAXException
block|{
if|if
condition|(
name|uri
operator|==
literal|null
operator|||
name|AbstractDocumentXMLBodyHandler
operator|.
name|W_NS
operator|.
name|equals
argument_list|(
name|uri
argument_list|)
condition|)
block|{
if|if
condition|(
literal|"style"
operator|.
name|equals
argument_list|(
name|localName
argument_list|)
condition|)
block|{
name|currentStyleId
operator|=
name|atts
operator|.
name|getValue
argument_list|(
name|AbstractDocumentXMLBodyHandler
operator|.
name|W_NS
argument_list|,
literal|"styleId"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"name"
operator|.
name|equals
argument_list|(
name|localName
argument_list|)
condition|)
block|{
name|String
name|name
init|=
name|atts
operator|.
name|getValue
argument_list|(
name|AbstractDocumentXMLBodyHandler
operator|.
name|W_NS
argument_list|,
literal|"val"
argument_list|)
decl_stmt|;
if|if
condition|(
name|currentStyleId
operator|!=
literal|null
operator|&&
name|name
operator|!=
literal|null
condition|)
block|{
name|styles
operator|.
name|put
argument_list|(
name|currentStyleId
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|endElement
parameter_list|(
name|String
name|uri
parameter_list|,
name|String
name|localName
parameter_list|,
name|String
name|qName
parameter_list|)
throws|throws
name|SAXException
block|{
if|if
condition|(
name|uri
operator|==
literal|null
operator|||
name|AbstractDocumentXMLBodyHandler
operator|.
name|W_NS
operator|.
name|equals
argument_list|(
name|uri
argument_list|)
condition|)
block|{
if|if
condition|(
literal|"style"
operator|.
name|equals
argument_list|(
name|localName
argument_list|)
condition|)
block|{
name|currentStyleId
operator|=
literal|null
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
end_class

end_unit

