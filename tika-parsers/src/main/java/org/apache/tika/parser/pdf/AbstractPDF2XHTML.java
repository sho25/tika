begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|pdf
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|pdf
operator|.
name|PDFParserConfig
operator|.
name|OCR_STRATEGY
operator|.
name|NO_OCR
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|XMLStreamException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|image
operator|.
name|BufferedImage
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|InvocationTargetException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|SimpleDateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Calendar
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ListIterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|IOExceptionWithCause
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|PDDocument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|PDDocumentCatalog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|PDDocumentNameDictionary
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|PDEmbeddedFilesNameTreeNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|PDPage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|PDPageTree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|common
operator|.
name|PDDestinationOrAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|common
operator|.
name|PDNameTreeNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|common
operator|.
name|filespecification
operator|.
name|PDComplexFileSpecification
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|common
operator|.
name|filespecification
operator|.
name|PDEmbeddedFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|common
operator|.
name|filespecification
operator|.
name|PDFileSpecification
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|common
operator|.
name|filespecification
operator|.
name|PDSimpleFileSpecification
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|font
operator|.
name|PDFont
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|interactive
operator|.
name|action
operator|.
name|PDAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|interactive
operator|.
name|action
operator|.
name|PDActionImportData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|interactive
operator|.
name|action
operator|.
name|PDActionJavaScript
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|interactive
operator|.
name|action
operator|.
name|PDActionLaunch
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|interactive
operator|.
name|action
operator|.
name|PDActionRemoteGoTo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|interactive
operator|.
name|action
operator|.
name|PDActionURI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|interactive
operator|.
name|action
operator|.
name|PDAnnotationAdditionalActions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|interactive
operator|.
name|action
operator|.
name|PDDocumentCatalogAdditionalActions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|interactive
operator|.
name|action
operator|.
name|PDFormFieldAdditionalActions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|interactive
operator|.
name|action
operator|.
name|PDPageAdditionalActions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|interactive
operator|.
name|annotation
operator|.
name|PDAnnotation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|interactive
operator|.
name|annotation
operator|.
name|PDAnnotationFileAttachment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|interactive
operator|.
name|annotation
operator|.
name|PDAnnotationMarkup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|interactive
operator|.
name|annotation
operator|.
name|PDAnnotationWidget
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|interactive
operator|.
name|digitalsignature
operator|.
name|PDSignature
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|interactive
operator|.
name|documentnavigation
operator|.
name|outline
operator|.
name|PDDocumentOutline
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|interactive
operator|.
name|documentnavigation
operator|.
name|outline
operator|.
name|PDOutlineItem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|interactive
operator|.
name|documentnavigation
operator|.
name|outline
operator|.
name|PDOutlineNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|interactive
operator|.
name|form
operator|.
name|PDAcroForm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|interactive
operator|.
name|form
operator|.
name|PDField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|interactive
operator|.
name|form
operator|.
name|PDNonTerminalField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|interactive
operator|.
name|form
operator|.
name|PDSignatureField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|interactive
operator|.
name|form
operator|.
name|PDXFAResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|rendering
operator|.
name|PDFRenderer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|text
operator|.
name|PDFTextStripper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|tools
operator|.
name|imageio
operator|.
name|ImageIOUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|util
operator|.
name|Matrix
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|util
operator|.
name|Vector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|exception
operator|.
name|TikaException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|extractor
operator|.
name|EmbeddedDocumentExtractor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|extractor
operator|.
name|EmbeddedDocumentUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|io
operator|.
name|TemporaryResources
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|io
operator|.
name|TikaInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|metadata
operator|.
name|Font
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|metadata
operator|.
name|Metadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|metadata
operator|.
name|PDF
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|metadata
operator|.
name|TikaCoreProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|mime
operator|.
name|MediaType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|ParseContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|Parser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|ocr
operator|.
name|TesseractOCRConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|ocr
operator|.
name|TesseractOCRParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|sas
operator|.
name|SAS7BDATParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|sax
operator|.
name|EmbeddedContentHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|sax
operator|.
name|XHTMLContentHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|ContentHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|helpers
operator|.
name|AttributesImpl
import|;
end_import

begin_class
class|class
name|AbstractPDF2XHTML
extends|extends
name|PDFTextStripper
block|{
enum|enum
name|ActionTrigger
block|{
name|AFTER_DOCUMENT_PRINT
block|,
name|AFTER_DOCUMENT_SAVE
block|,
name|ANNOTATION_CURSOR_ENTERS
block|,
name|ANNOTATION_CURSOR_EXIT
block|,
name|ANNOTATION_LOSE_INPUT_FOCUS
block|,
name|ANNOTATION_MOUSE_CLICK
block|,
name|ANNOTATION_MOUSE_RELEASED
block|,
name|ANNOTATION_PAGE_CLOSED
block|,
name|ANNOTATION_PAGE_NO_LONGER_VISIBLE
block|,
name|ANNOTATION_PAGE_OPENED
block|,
name|ANNOTATION_PAGE_VISIBLE
block|,
name|ANNOTATION_RECEIVES_FOCUS
block|,
name|ANNOTATION_WIDGET
block|,
name|BEFORE_DOCUMENT_CLOSE
block|,
name|BEFORE_DOCUMENT_PRINT
block|,
name|BEFORE_DOCUMENT_SAVE
block|,
name|DOCUMENT_OPEN
block|,
name|FORM_FIELD
block|,
name|FORM_FIELD_FORMATTED
block|,
name|FORM_FIELD_KEYSTROKE
block|,
name|FORM_FIELD_RECALCULATE
block|,
name|FORM_FIELD_VALUE_CHANGE
block|,
name|PAGE_CLOSE
block|,
name|PAGE_OPEN
block|,
name|BOOKMARK
block|,     }
empty_stmt|;
comment|/**      * Maximum recursive depth during AcroForm processing.      * Prevents theoretical AcroForm recursion bomb.      */
specifier|private
specifier|final
specifier|static
name|int
name|MAX_ACROFORM_RECURSIONS
init|=
literal|10
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|TesseractOCRConfig
name|DEFAULT_TESSERACT_CONFIG
init|=
operator|new
name|TesseractOCRConfig
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|MediaType
name|XFA_MEDIA_TYPE
init|=
name|MediaType
operator|.
name|application
argument_list|(
literal|"vnd.adobe.xdp+xml"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|MediaType
name|XMP_MEDIA_TYPE
init|=
name|MediaType
operator|.
name|application
argument_list|(
literal|"rdf+xml"
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|XMP_DOCUMENT_CATALOG_LOCATION
init|=
literal|"documentCatalog"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|XMP_PAGE_LOCATION_PREFIX
init|=
literal|"page "
decl_stmt|;
comment|/**      * Format used for signature dates      * TODO Make this thread-safe      */
specifier|private
specifier|final
name|SimpleDateFormat
name|dateFormat
init|=
operator|new
name|SimpleDateFormat
argument_list|(
literal|"yyyy-MM-dd'T'HH:mm:ssZ"
argument_list|,
name|Locale
operator|.
name|ROOT
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|IOException
argument_list|>
name|exceptions
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|PDDocument
name|pdDocument
decl_stmt|;
specifier|final
name|XHTMLContentHandler
name|xhtml
decl_stmt|;
specifier|final
name|ParseContext
name|context
decl_stmt|;
specifier|final
name|Metadata
name|metadata
decl_stmt|;
specifier|final
name|EmbeddedDocumentExtractor
name|embeddedDocumentExtractor
decl_stmt|;
specifier|final
name|PDFParserConfig
name|config
decl_stmt|;
specifier|final
name|TesseractOCRParser
name|tesseractOCRParser
decl_stmt|;
comment|//can be null!
comment|//zero-based pageIndex
name|int
name|pageIndex
init|=
literal|0
decl_stmt|;
name|int
name|startPage
init|=
operator|-
literal|1
decl_stmt|;
comment|//private in PDFTextStripper...must have own copy because we override processpages
name|int
name|unmappedUnicodeCharsPerPage
init|=
literal|0
decl_stmt|;
name|int
name|totalCharsPerPage
init|=
literal|0
decl_stmt|;
specifier|private
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|fontNames
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|AbstractPDF2XHTML
parameter_list|(
name|PDDocument
name|pdDocument
parameter_list|,
name|ContentHandler
name|handler
parameter_list|,
name|ParseContext
name|context
parameter_list|,
name|Metadata
name|metadata
parameter_list|,
name|PDFParserConfig
name|config
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|pdDocument
operator|=
name|pdDocument
expr_stmt|;
name|this
operator|.
name|xhtml
operator|=
operator|new
name|XHTMLContentHandler
argument_list|(
name|handler
argument_list|,
name|metadata
argument_list|)
expr_stmt|;
name|this
operator|.
name|context
operator|=
name|context
expr_stmt|;
name|this
operator|.
name|metadata
operator|=
name|metadata
expr_stmt|;
name|this
operator|.
name|config
operator|=
name|config
expr_stmt|;
name|embeddedDocumentExtractor
operator|=
name|EmbeddedDocumentUtil
operator|.
name|getEmbeddedDocumentExtractor
argument_list|(
name|context
argument_list|)
expr_stmt|;
if|if
condition|(
name|config
operator|.
name|getOcrStrategy
argument_list|()
operator|==
name|NO_OCR
condition|)
block|{
name|tesseractOCRParser
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
name|tesseractOCRParser
operator|=
operator|(
name|TesseractOCRParser
operator|)
name|EmbeddedDocumentUtil
operator|.
name|tryToFindExistingLeafParser
argument_list|(
name|TesseractOCRParser
operator|.
name|class
argument_list|,
name|context
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|protected
name|void
name|startPage
parameter_list|(
name|PDPage
name|page
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|xhtml
operator|.
name|startElement
argument_list|(
literal|"div"
argument_list|,
literal|"class"
argument_list|,
literal|"page"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SAXException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOExceptionWithCause
argument_list|(
literal|"Unable to start a page"
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|writeParagraphStart
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|extractXMPXFA
parameter_list|(
name|PDDocument
name|pdfDocument
parameter_list|,
name|Metadata
name|parentMetadata
parameter_list|,
name|ParseContext
name|context
parameter_list|)
throws|throws
name|IOException
throws|,
name|SAXException
block|{
name|Set
argument_list|<
name|MediaType
argument_list|>
name|supportedTypes
init|=
name|Collections
operator|.
name|EMPTY_SET
decl_stmt|;
name|Parser
name|embeddedParser
init|=
name|context
operator|.
name|get
argument_list|(
name|Parser
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|embeddedParser
operator|!=
literal|null
condition|)
block|{
name|supportedTypes
operator|=
name|embeddedParser
operator|.
name|getSupportedTypes
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|supportedTypes
operator|.
name|contains
argument_list|(
name|XMP_MEDIA_TYPE
argument_list|)
condition|)
block|{
comment|//try the main metadata
if|if
condition|(
name|pdfDocument
operator|.
name|getDocumentCatalog
argument_list|()
operator|.
name|getMetadata
argument_list|()
operator|!=
literal|null
condition|)
block|{
try|try
init|(
name|InputStream
name|is
init|=
name|pdfDocument
operator|.
name|getDocumentCatalog
argument_list|()
operator|.
name|getMetadata
argument_list|()
operator|.
name|exportXMPMetadata
argument_list|()
init|)
block|{
name|extractXMPAsEmbeddedFile
argument_list|(
name|is
argument_list|,
name|XMP_DOCUMENT_CATALOG_LOCATION
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|EmbeddedDocumentUtil
operator|.
name|recordEmbeddedStreamException
argument_list|(
name|e
argument_list|,
name|parentMetadata
argument_list|)
expr_stmt|;
block|}
block|}
comment|//now iterate through the pages
name|int
name|pageNumber
init|=
literal|1
decl_stmt|;
for|for
control|(
name|PDPage
name|page
range|:
name|pdfDocument
operator|.
name|getPages
argument_list|()
control|)
block|{
if|if
condition|(
name|page
operator|.
name|getMetadata
argument_list|()
operator|!=
literal|null
condition|)
block|{
try|try
init|(
name|InputStream
name|is
init|=
name|page
operator|.
name|getMetadata
argument_list|()
operator|.
name|exportXMPMetadata
argument_list|()
init|)
block|{
name|extractXMPAsEmbeddedFile
argument_list|(
name|is
argument_list|,
name|XMP_PAGE_LOCATION_PREFIX
operator|+
name|pageNumber
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|EmbeddedDocumentUtil
operator|.
name|recordEmbeddedStreamException
argument_list|(
name|e
argument_list|,
name|parentMetadata
argument_list|)
expr_stmt|;
block|}
block|}
name|pageNumber
operator|++
expr_stmt|;
block|}
block|}
comment|//now try the xfa
if|if
condition|(
name|pdfDocument
operator|.
name|getDocumentCatalog
argument_list|()
operator|.
name|getAcroForm
argument_list|()
operator|!=
literal|null
operator|&&
name|pdfDocument
operator|.
name|getDocumentCatalog
argument_list|()
operator|.
name|getAcroForm
argument_list|()
operator|.
name|getXFA
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|Metadata
name|xfaMetadata
init|=
operator|new
name|Metadata
argument_list|()
decl_stmt|;
name|xfaMetadata
operator|.
name|set
argument_list|(
name|Metadata
operator|.
name|CONTENT_TYPE
argument_list|,
name|XFA_MEDIA_TYPE
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|xfaMetadata
operator|.
name|set
argument_list|(
name|TikaCoreProperties
operator|.
name|EMBEDDED_RESOURCE_TYPE
argument_list|,
name|TikaCoreProperties
operator|.
name|EmbeddedResourceType
operator|.
name|METADATA
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|embeddedDocumentExtractor
operator|.
name|shouldParseEmbedded
argument_list|(
name|xfaMetadata
argument_list|)
operator|&&
name|supportedTypes
operator|.
name|contains
argument_list|(
name|XFA_MEDIA_TYPE
argument_list|)
condition|)
block|{
name|byte
index|[]
name|bytes
init|=
literal|null
decl_stmt|;
try|try
block|{
name|bytes
operator|=
name|pdfDocument
operator|.
name|getDocumentCatalog
argument_list|()
operator|.
name|getAcroForm
argument_list|()
operator|.
name|getXFA
argument_list|()
operator|.
name|getBytes
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|EmbeddedDocumentUtil
operator|.
name|recordEmbeddedStreamException
argument_list|(
name|e
argument_list|,
name|parentMetadata
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|bytes
operator|!=
literal|null
condition|)
block|{
try|try
init|(
name|InputStream
name|is
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|bytes
argument_list|)
init|)
block|{
name|parseMetadata
argument_list|(
name|is
argument_list|,
name|xfaMetadata
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
specifier|private
name|void
name|extractXMPAsEmbeddedFile
parameter_list|(
name|InputStream
name|is
parameter_list|,
name|String
name|location
parameter_list|)
throws|throws
name|IOException
throws|,
name|SAXException
block|{
if|if
condition|(
name|is
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|Metadata
name|xmpMetadata
init|=
operator|new
name|Metadata
argument_list|()
decl_stmt|;
name|xmpMetadata
operator|.
name|set
argument_list|(
name|Metadata
operator|.
name|CONTENT_TYPE
argument_list|,
name|XMP_MEDIA_TYPE
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|xmpMetadata
operator|.
name|set
argument_list|(
name|TikaCoreProperties
operator|.
name|EMBEDDED_RESOURCE_TYPE
argument_list|,
name|TikaCoreProperties
operator|.
name|EmbeddedResourceType
operator|.
name|METADATA
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|xmpMetadata
operator|.
name|set
argument_list|(
name|PDF
operator|.
name|XMP_LOCATION
argument_list|,
name|location
argument_list|)
expr_stmt|;
if|if
condition|(
name|embeddedDocumentExtractor
operator|.
name|shouldParseEmbedded
argument_list|(
name|xmpMetadata
argument_list|)
condition|)
block|{
try|try
block|{
name|parseMetadata
argument_list|(
name|is
argument_list|,
name|xmpMetadata
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|io
operator|.
name|IOUtils
operator|.
name|closeQuietly
argument_list|(
name|is
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|parseMetadata
parameter_list|(
name|InputStream
name|stream
parameter_list|,
name|Metadata
name|embeddedMetadata
parameter_list|)
throws|throws
name|IOException
throws|,
name|SAXException
block|{
try|try
block|{
name|embeddedDocumentExtractor
operator|.
name|parseEmbedded
argument_list|(
name|stream
argument_list|,
operator|new
name|EmbeddedContentHandler
argument_list|(
name|xhtml
argument_list|)
argument_list|,
name|embeddedMetadata
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|handleCatchableIOE
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|extractEmbeddedDocuments
parameter_list|(
name|PDDocument
name|document
parameter_list|)
throws|throws
name|IOException
throws|,
name|SAXException
throws|,
name|TikaException
block|{
name|PDDocumentNameDictionary
name|namesDictionary
init|=
operator|new
name|PDDocumentNameDictionary
argument_list|(
name|document
operator|.
name|getDocumentCatalog
argument_list|()
argument_list|)
decl_stmt|;
name|PDEmbeddedFilesNameTreeNode
name|efTree
init|=
name|namesDictionary
operator|.
name|getEmbeddedFiles
argument_list|()
decl_stmt|;
if|if
condition|(
name|efTree
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|PDComplexFileSpecification
argument_list|>
name|embeddedFileNames
init|=
name|efTree
operator|.
name|getNames
argument_list|()
decl_stmt|;
comment|//For now, try to get the embeddedFileNames out of embeddedFiles or its kids.
comment|//This code follows: pdfbox/examples/pdmodel/ExtractEmbeddedFiles.java
comment|//If there is a need we could add a fully recursive search to find a non-null
comment|//Map<String, COSObjectable> that contains the doc info.
if|if
condition|(
name|embeddedFileNames
operator|!=
literal|null
condition|)
block|{
name|processEmbeddedDocNames
argument_list|(
name|embeddedFileNames
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|List
argument_list|<
name|PDNameTreeNode
argument_list|<
name|PDComplexFileSpecification
argument_list|>
argument_list|>
name|kids
init|=
name|efTree
operator|.
name|getKids
argument_list|()
decl_stmt|;
if|if
condition|(
name|kids
operator|==
literal|null
condition|)
block|{
return|return;
block|}
for|for
control|(
name|PDNameTreeNode
argument_list|<
name|PDComplexFileSpecification
argument_list|>
name|node
range|:
name|kids
control|)
block|{
name|embeddedFileNames
operator|=
name|node
operator|.
name|getNames
argument_list|()
expr_stmt|;
if|if
condition|(
name|embeddedFileNames
operator|!=
literal|null
condition|)
block|{
name|processEmbeddedDocNames
argument_list|(
name|embeddedFileNames
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|private
name|void
name|processDoc
parameter_list|(
name|String
name|name
parameter_list|,
name|PDFileSpecification
name|spec
parameter_list|,
name|AttributesImpl
name|attributes
parameter_list|)
throws|throws
name|TikaException
throws|,
name|SAXException
throws|,
name|IOException
block|{
if|if
condition|(
name|spec
operator|instanceof
name|PDSimpleFileSpecification
condition|)
block|{
name|attributes
operator|.
name|addAttribute
argument_list|(
literal|""
argument_list|,
literal|"class"
argument_list|,
literal|"class"
argument_list|,
literal|"CDATA"
argument_list|,
literal|"linked"
argument_list|)
expr_stmt|;
name|attributes
operator|.
name|addAttribute
argument_list|(
literal|""
argument_list|,
literal|"id"
argument_list|,
literal|"id"
argument_list|,
literal|"CDATA"
argument_list|,
name|spec
operator|.
name|getFile
argument_list|()
argument_list|)
expr_stmt|;
name|xhtml
operator|.
name|startElement
argument_list|(
literal|"div"
argument_list|,
name|attributes
argument_list|)
expr_stmt|;
name|xhtml
operator|.
name|endElement
argument_list|(
literal|"div"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|spec
operator|instanceof
name|PDComplexFileSpecification
condition|)
block|{
if|if
condition|(
name|attributes
operator|.
name|getIndex
argument_list|(
literal|"source"
argument_list|)
operator|<
literal|0
condition|)
block|{
name|attributes
operator|.
name|addAttribute
argument_list|(
literal|""
argument_list|,
literal|"source"
argument_list|,
literal|"source"
argument_list|,
literal|"CDATA"
argument_list|,
literal|"attachment"
argument_list|)
expr_stmt|;
block|}
name|extractMultiOSPDEmbeddedFiles
argument_list|(
name|name
argument_list|,
operator|(
name|PDComplexFileSpecification
operator|)
name|spec
argument_list|,
name|attributes
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|processEmbeddedDocNames
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|PDComplexFileSpecification
argument_list|>
name|embeddedFileNames
parameter_list|)
throws|throws
name|IOException
throws|,
name|SAXException
throws|,
name|TikaException
block|{
if|if
condition|(
name|embeddedFileNames
operator|==
literal|null
operator|||
name|embeddedFileNames
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return;
block|}
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|PDComplexFileSpecification
argument_list|>
name|ent
range|:
name|embeddedFileNames
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|processDoc
argument_list|(
name|ent
operator|.
name|getKey
argument_list|()
argument_list|,
name|ent
operator|.
name|getValue
argument_list|()
argument_list|,
operator|new
name|AttributesImpl
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|extractMultiOSPDEmbeddedFiles
parameter_list|(
name|String
name|displayName
parameter_list|,
name|PDComplexFileSpecification
name|spec
parameter_list|,
name|AttributesImpl
name|attributes
parameter_list|)
throws|throws
name|IOException
throws|,
name|SAXException
throws|,
name|TikaException
block|{
if|if
condition|(
name|spec
operator|==
literal|null
condition|)
block|{
return|return;
block|}
comment|//current strategy is to pull all, not just first non-null
name|extractPDEmbeddedFile
argument_list|(
name|displayName
argument_list|,
name|spec
operator|.
name|getFileUnicode
argument_list|()
argument_list|,
name|spec
operator|.
name|getFile
argument_list|()
argument_list|,
name|spec
operator|.
name|getEmbeddedFile
argument_list|()
argument_list|,
name|attributes
argument_list|)
expr_stmt|;
name|extractPDEmbeddedFile
argument_list|(
name|displayName
argument_list|,
name|spec
operator|.
name|getFileUnicode
argument_list|()
argument_list|,
name|spec
operator|.
name|getFileMac
argument_list|()
argument_list|,
name|spec
operator|.
name|getEmbeddedFileMac
argument_list|()
argument_list|,
name|attributes
argument_list|)
expr_stmt|;
name|extractPDEmbeddedFile
argument_list|(
name|displayName
argument_list|,
name|spec
operator|.
name|getFileUnicode
argument_list|()
argument_list|,
name|spec
operator|.
name|getFileDos
argument_list|()
argument_list|,
name|spec
operator|.
name|getEmbeddedFileDos
argument_list|()
argument_list|,
name|attributes
argument_list|)
expr_stmt|;
name|extractPDEmbeddedFile
argument_list|(
name|displayName
argument_list|,
name|spec
operator|.
name|getFileUnicode
argument_list|()
argument_list|,
name|spec
operator|.
name|getFileUnix
argument_list|()
argument_list|,
name|spec
operator|.
name|getEmbeddedFileUnix
argument_list|()
argument_list|,
name|attributes
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|extractPDEmbeddedFile
parameter_list|(
name|String
name|displayName
parameter_list|,
name|String
name|unicodeFileName
parameter_list|,
name|String
name|fileName
parameter_list|,
name|PDEmbeddedFile
name|file
parameter_list|,
name|AttributesImpl
name|attributes
parameter_list|)
throws|throws
name|SAXException
throws|,
name|IOException
throws|,
name|TikaException
block|{
if|if
condition|(
name|file
operator|==
literal|null
condition|)
block|{
comment|//skip silently
return|return;
block|}
name|fileName
operator|=
operator|(
name|fileName
operator|==
literal|null
operator|||
literal|""
operator|.
name|equals
argument_list|(
name|fileName
operator|.
name|trim
argument_list|()
argument_list|)
operator|)
condition|?
name|unicodeFileName
else|:
name|fileName
expr_stmt|;
name|fileName
operator|=
operator|(
name|fileName
operator|==
literal|null
operator|||
literal|""
operator|.
name|equals
argument_list|(
name|fileName
operator|.
name|trim
argument_list|()
argument_list|)
operator|)
condition|?
name|displayName
else|:
name|fileName
expr_stmt|;
comment|// TODO: other metadata?
name|Metadata
name|embeddedMetadata
init|=
operator|new
name|Metadata
argument_list|()
decl_stmt|;
name|embeddedMetadata
operator|.
name|set
argument_list|(
name|TikaCoreProperties
operator|.
name|RESOURCE_NAME_KEY
argument_list|,
name|fileName
argument_list|)
expr_stmt|;
name|embeddedMetadata
operator|.
name|set
argument_list|(
name|Metadata
operator|.
name|CONTENT_TYPE
argument_list|,
name|file
operator|.
name|getSubtype
argument_list|()
argument_list|)
expr_stmt|;
name|embeddedMetadata
operator|.
name|set
argument_list|(
name|Metadata
operator|.
name|CONTENT_LENGTH
argument_list|,
name|Long
operator|.
name|toString
argument_list|(
name|file
operator|.
name|getSize
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|embeddedMetadata
operator|.
name|set
argument_list|(
name|TikaCoreProperties
operator|.
name|EMBEDDED_RESOURCE_TYPE
argument_list|,
name|TikaCoreProperties
operator|.
name|EmbeddedResourceType
operator|.
name|ATTACHMENT
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|embeddedMetadata
operator|.
name|set
argument_list|(
name|TikaCoreProperties
operator|.
name|ORIGINAL_RESOURCE_NAME
argument_list|,
name|fileName
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|embeddedDocumentExtractor
operator|.
name|shouldParseEmbedded
argument_list|(
name|embeddedMetadata
argument_list|)
condition|)
block|{
return|return;
block|}
name|TikaInputStream
name|stream
init|=
literal|null
decl_stmt|;
try|try
block|{
name|stream
operator|=
name|TikaInputStream
operator|.
name|get
argument_list|(
name|file
operator|.
name|createInputStream
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|//store this exception in the parent's metadata
name|EmbeddedDocumentUtil
operator|.
name|recordEmbeddedStreamException
argument_list|(
name|e
argument_list|,
name|metadata
argument_list|)
expr_stmt|;
return|return;
block|}
try|try
block|{
name|embeddedDocumentExtractor
operator|.
name|parseEmbedded
argument_list|(
name|stream
argument_list|,
operator|new
name|EmbeddedContentHandler
argument_list|(
name|xhtml
argument_list|)
argument_list|,
name|embeddedMetadata
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|attributes
operator|.
name|addAttribute
argument_list|(
literal|""
argument_list|,
literal|"class"
argument_list|,
literal|"class"
argument_list|,
literal|"CDATA"
argument_list|,
literal|"embedded"
argument_list|)
expr_stmt|;
name|attributes
operator|.
name|addAttribute
argument_list|(
literal|""
argument_list|,
literal|"id"
argument_list|,
literal|"id"
argument_list|,
literal|"CDATA"
argument_list|,
name|fileName
argument_list|)
expr_stmt|;
name|xhtml
operator|.
name|startElement
argument_list|(
literal|"div"
argument_list|,
name|attributes
argument_list|)
expr_stmt|;
name|xhtml
operator|.
name|endElement
argument_list|(
literal|"div"
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|closeQuietly
argument_list|(
name|stream
argument_list|)
expr_stmt|;
block|}
block|}
name|void
name|handleCatchableIOE
parameter_list|(
name|IOException
name|e
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|config
operator|.
name|getCatchIntermediateIOExceptions
argument_list|()
condition|)
block|{
if|if
condition|(
name|e
operator|.
name|getCause
argument_list|()
operator|instanceof
name|SAXException
operator|&&
name|e
operator|.
name|getCause
argument_list|()
operator|.
name|getMessage
argument_list|()
operator|!=
literal|null
operator|&&
name|e
operator|.
name|getCause
argument_list|()
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Your document contained more than"
argument_list|)
condition|)
block|{
comment|//TODO -- is there a cleaner way of checking for:
comment|// WriteOutContentHandler.WriteLimitReachedException?
throw|throw
name|e
throw|;
block|}
name|String
name|msg
init|=
name|e
operator|.
name|getMessage
argument_list|()
decl_stmt|;
if|if
condition|(
name|msg
operator|==
literal|null
condition|)
block|{
name|msg
operator|=
literal|"IOException, no message"
expr_stmt|;
block|}
name|metadata
operator|.
name|add
argument_list|(
name|TikaCoreProperties
operator|.
name|TIKA_META_EXCEPTION_WARNING
argument_list|,
name|msg
argument_list|)
expr_stmt|;
name|exceptions
operator|.
name|add
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
name|e
throw|;
block|}
block|}
name|void
name|doOCROnCurrentPage
parameter_list|()
throws|throws
name|IOException
throws|,
name|TikaException
throws|,
name|SAXException
block|{
if|if
condition|(
name|config
operator|.
name|getOcrStrategy
argument_list|()
operator|.
name|equals
argument_list|(
name|NO_OCR
argument_list|)
condition|)
block|{
return|return;
block|}
name|TesseractOCRConfig
name|tesseractConfig
init|=
name|context
operator|.
name|get
argument_list|(
name|TesseractOCRConfig
operator|.
name|class
argument_list|,
name|tesseractOCRParser
operator|.
name|getDefaultConfig
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|tesseractOCRParser
operator|.
name|hasTesseract
argument_list|(
name|tesseractConfig
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|TikaException
argument_list|(
literal|"Tesseract is not available. "
operator|+
literal|"Please set the OCR_STRATEGY to NO_OCR or configure Tesseract correctly"
argument_list|)
throw|;
block|}
name|PDFRenderer
name|renderer
init|=
operator|new
name|PDFRenderer
argument_list|(
name|pdDocument
argument_list|)
decl_stmt|;
name|TemporaryResources
name|tmp
init|=
operator|new
name|TemporaryResources
argument_list|()
decl_stmt|;
try|try
block|{
name|int
name|dpi
init|=
name|config
operator|.
name|getOcrDPI
argument_list|()
decl_stmt|;
name|BufferedImage
name|image
init|=
name|renderer
operator|.
name|renderImageWithDPI
argument_list|(
name|pageIndex
argument_list|,
name|dpi
argument_list|,
name|config
operator|.
name|getOcrImageType
argument_list|()
argument_list|)
decl_stmt|;
name|Path
name|tmpFile
init|=
name|tmp
operator|.
name|createTempFile
argument_list|()
decl_stmt|;
try|try
init|(
name|OutputStream
name|os
init|=
name|Files
operator|.
name|newOutputStream
argument_list|(
name|tmpFile
argument_list|)
init|)
block|{
comment|//TODO: get output format from TesseractConfig
name|ImageIOUtil
operator|.
name|writeImage
argument_list|(
name|image
argument_list|,
name|config
operator|.
name|getOcrImageFormatName
argument_list|()
argument_list|,
name|os
argument_list|,
name|dpi
argument_list|,
name|config
operator|.
name|getOcrImageQuality
argument_list|()
argument_list|)
expr_stmt|;
block|}
try|try
init|(
name|InputStream
name|is
init|=
name|TikaInputStream
operator|.
name|get
argument_list|(
name|tmpFile
argument_list|)
init|)
block|{
name|tesseractOCRParser
operator|.
name|parseInline
argument_list|(
name|is
argument_list|,
name|xhtml
argument_list|,
name|tesseractConfig
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|handleCatchableIOE
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SAXException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOExceptionWithCause
argument_list|(
literal|"error writing OCR content from PDF"
argument_list|,
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|tmp
operator|.
name|dispose
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|protected
name|void
name|endPage
parameter_list|(
name|PDPage
name|page
parameter_list|)
throws|throws
name|IOException
block|{
name|metadata
operator|.
name|add
argument_list|(
name|PDF
operator|.
name|CHARACTERS_PER_PAGE
argument_list|,
name|totalCharsPerPage
argument_list|)
expr_stmt|;
name|metadata
operator|.
name|add
argument_list|(
name|PDF
operator|.
name|UNMAPPED_UNICODE_CHARS_PER_PAGE
argument_list|,
name|unmappedUnicodeCharsPerPage
argument_list|)
expr_stmt|;
try|try
block|{
for|for
control|(
name|PDAnnotation
name|annotation
range|:
name|page
operator|.
name|getAnnotations
argument_list|()
control|)
block|{
if|if
condition|(
name|annotation
operator|instanceof
name|PDAnnotationFileAttachment
condition|)
block|{
name|PDAnnotationFileAttachment
name|fann
init|=
operator|(
name|PDAnnotationFileAttachment
operator|)
name|annotation
decl_stmt|;
name|PDComplexFileSpecification
name|fileSpec
init|=
operator|(
name|PDComplexFileSpecification
operator|)
name|fann
operator|.
name|getFile
argument_list|()
decl_stmt|;
try|try
block|{
name|AttributesImpl
name|attributes
init|=
operator|new
name|AttributesImpl
argument_list|()
decl_stmt|;
name|attributes
operator|.
name|addAttribute
argument_list|(
literal|""
argument_list|,
literal|"source"
argument_list|,
literal|"source"
argument_list|,
literal|"CDATA"
argument_list|,
literal|"annotation"
argument_list|)
expr_stmt|;
name|extractMultiOSPDEmbeddedFiles
argument_list|(
name|fann
operator|.
name|getAttachmentName
argument_list|()
argument_list|,
name|fileSpec
argument_list|,
name|attributes
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SAXException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOExceptionWithCause
argument_list|(
literal|"file embedded in annotation sax exception"
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|TikaException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOExceptionWithCause
argument_list|(
literal|"file embedded in annotation tika exception"
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|handleCatchableIOE
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|annotation
operator|instanceof
name|PDAnnotationWidget
condition|)
block|{
name|handleWidget
argument_list|(
operator|(
name|PDAnnotationWidget
operator|)
name|annotation
argument_list|)
expr_stmt|;
block|}
comment|// TODO: remove once PDFBOX-1143 is fixed:
if|if
condition|(
name|config
operator|.
name|getExtractAnnotationText
argument_list|()
condition|)
block|{
name|PDActionURI
name|uri
init|=
name|getActionURI
argument_list|(
name|annotation
argument_list|)
decl_stmt|;
if|if
condition|(
name|uri
operator|!=
literal|null
condition|)
block|{
name|String
name|link
init|=
name|uri
operator|.
name|getURI
argument_list|()
decl_stmt|;
if|if
condition|(
name|link
operator|!=
literal|null
operator|&&
name|link
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|xhtml
operator|.
name|startElement
argument_list|(
literal|"div"
argument_list|,
literal|"class"
argument_list|,
literal|"annotation"
argument_list|)
expr_stmt|;
name|xhtml
operator|.
name|startElement
argument_list|(
literal|"a"
argument_list|,
literal|"href"
argument_list|,
name|link
argument_list|)
expr_stmt|;
name|xhtml
operator|.
name|characters
argument_list|(
name|link
argument_list|)
expr_stmt|;
name|xhtml
operator|.
name|endElement
argument_list|(
literal|"a"
argument_list|)
expr_stmt|;
name|xhtml
operator|.
name|endElement
argument_list|(
literal|"div"
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|annotation
operator|instanceof
name|PDAnnotationMarkup
condition|)
block|{
name|PDAnnotationMarkup
name|annotationMarkup
init|=
operator|(
name|PDAnnotationMarkup
operator|)
name|annotation
decl_stmt|;
name|String
name|title
init|=
name|annotationMarkup
operator|.
name|getTitlePopup
argument_list|()
decl_stmt|;
name|String
name|subject
init|=
name|annotationMarkup
operator|.
name|getSubject
argument_list|()
decl_stmt|;
name|String
name|contents
init|=
name|annotationMarkup
operator|.
name|getContents
argument_list|()
decl_stmt|;
comment|// TODO: maybe also annotationMarkup.getRichContents()?
if|if
condition|(
name|title
operator|!=
literal|null
operator|||
name|subject
operator|!=
literal|null
operator|||
name|contents
operator|!=
literal|null
condition|)
block|{
name|xhtml
operator|.
name|startElement
argument_list|(
literal|"div"
argument_list|,
literal|"class"
argument_list|,
literal|"annotation"
argument_list|)
expr_stmt|;
if|if
condition|(
name|title
operator|!=
literal|null
condition|)
block|{
name|xhtml
operator|.
name|startElement
argument_list|(
literal|"div"
argument_list|,
literal|"class"
argument_list|,
literal|"annotationTitle"
argument_list|)
expr_stmt|;
name|xhtml
operator|.
name|characters
argument_list|(
name|title
argument_list|)
expr_stmt|;
name|xhtml
operator|.
name|endElement
argument_list|(
literal|"div"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|subject
operator|!=
literal|null
condition|)
block|{
name|xhtml
operator|.
name|startElement
argument_list|(
literal|"div"
argument_list|,
literal|"class"
argument_list|,
literal|"annotationSubject"
argument_list|)
expr_stmt|;
name|xhtml
operator|.
name|characters
argument_list|(
name|subject
argument_list|)
expr_stmt|;
name|xhtml
operator|.
name|endElement
argument_list|(
literal|"div"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|contents
operator|!=
literal|null
condition|)
block|{
name|xhtml
operator|.
name|startElement
argument_list|(
literal|"div"
argument_list|,
literal|"class"
argument_list|,
literal|"annotationContents"
argument_list|)
expr_stmt|;
name|xhtml
operator|.
name|characters
argument_list|(
name|contents
argument_list|)
expr_stmt|;
name|xhtml
operator|.
name|endElement
argument_list|(
literal|"div"
argument_list|)
expr_stmt|;
block|}
name|xhtml
operator|.
name|endElement
argument_list|(
literal|"div"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
if|if
condition|(
name|config
operator|.
name|getOcrStrategy
argument_list|()
operator|.
name|equals
argument_list|(
name|PDFParserConfig
operator|.
name|OCR_STRATEGY
operator|.
name|OCR_AND_TEXT_EXTRACTION
argument_list|)
condition|)
block|{
name|doOCROnCurrentPage
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|config
operator|.
name|getOcrStrategy
argument_list|()
operator|.
name|equals
argument_list|(
name|PDFParserConfig
operator|.
name|OCR_STRATEGY
operator|.
name|AUTO
argument_list|)
condition|)
block|{
comment|//TODO add more sophistication
if|if
condition|(
name|totalCharsPerPage
argument_list|<
literal|10
operator|||
name|unmappedUnicodeCharsPerPage
argument_list|>
literal|10
condition|)
block|{
name|doOCROnCurrentPage
argument_list|()
expr_stmt|;
block|}
block|}
name|PDPageAdditionalActions
name|pageActions
init|=
name|page
operator|.
name|getActions
argument_list|()
decl_stmt|;
if|if
condition|(
name|pageActions
operator|!=
literal|null
condition|)
block|{
name|handleDestinationOrAction
argument_list|(
name|pageActions
operator|.
name|getC
argument_list|()
argument_list|,
name|ActionTrigger
operator|.
name|PAGE_CLOSE
argument_list|)
expr_stmt|;
name|handleDestinationOrAction
argument_list|(
name|pageActions
operator|.
name|getO
argument_list|()
argument_list|,
name|ActionTrigger
operator|.
name|PAGE_OPEN
argument_list|)
expr_stmt|;
block|}
name|xhtml
operator|.
name|endElement
argument_list|(
literal|"div"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SAXException
decl||
name|TikaException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOExceptionWithCause
argument_list|(
literal|"Unable to end a page"
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|handleCatchableIOE
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|totalCharsPerPage
operator|=
literal|0
expr_stmt|;
name|unmappedUnicodeCharsPerPage
operator|=
literal|0
expr_stmt|;
block|}
if|if
condition|(
name|config
operator|.
name|getExtractFontNames
argument_list|()
condition|)
block|{
for|for
control|(
name|COSName
name|n
range|:
name|page
operator|.
name|getResources
argument_list|()
operator|.
name|getFontNames
argument_list|()
control|)
block|{
name|PDFont
name|font
init|=
name|page
operator|.
name|getResources
argument_list|()
operator|.
name|getFont
argument_list|(
name|n
argument_list|)
decl_stmt|;
if|if
condition|(
name|font
operator|!=
literal|null
operator|&&
name|font
operator|.
name|getFontDescriptor
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|String
name|fontName
init|=
name|font
operator|.
name|getFontDescriptor
argument_list|()
operator|.
name|getFontName
argument_list|()
decl_stmt|;
if|if
condition|(
name|fontName
operator|!=
literal|null
condition|)
block|{
name|fontNames
operator|.
name|add
argument_list|(
name|fontName
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
specifier|private
name|void
name|handleWidget
parameter_list|(
name|PDAnnotationWidget
name|widget
parameter_list|)
throws|throws
name|TikaException
throws|,
name|SAXException
throws|,
name|IOException
block|{
if|if
condition|(
name|widget
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|handleDestinationOrAction
argument_list|(
name|widget
operator|.
name|getAction
argument_list|()
argument_list|,
name|ActionTrigger
operator|.
name|ANNOTATION_WIDGET
argument_list|)
expr_stmt|;
name|PDAnnotationAdditionalActions
name|annotationActions
init|=
name|widget
operator|.
name|getActions
argument_list|()
decl_stmt|;
if|if
condition|(
name|annotationActions
operator|!=
literal|null
condition|)
block|{
name|handleDestinationOrAction
argument_list|(
name|annotationActions
operator|.
name|getBl
argument_list|()
argument_list|,
name|ActionTrigger
operator|.
name|ANNOTATION_LOSE_INPUT_FOCUS
argument_list|)
expr_stmt|;
name|handleDestinationOrAction
argument_list|(
name|annotationActions
operator|.
name|getD
argument_list|()
argument_list|,
name|ActionTrigger
operator|.
name|ANNOTATION_MOUSE_CLICK
argument_list|)
expr_stmt|;
name|handleDestinationOrAction
argument_list|(
name|annotationActions
operator|.
name|getE
argument_list|()
argument_list|,
name|ActionTrigger
operator|.
name|ANNOTATION_CURSOR_ENTERS
argument_list|)
expr_stmt|;
name|handleDestinationOrAction
argument_list|(
name|annotationActions
operator|.
name|getFo
argument_list|()
argument_list|,
name|ActionTrigger
operator|.
name|ANNOTATION_RECEIVES_FOCUS
argument_list|)
expr_stmt|;
name|handleDestinationOrAction
argument_list|(
name|annotationActions
operator|.
name|getPC
argument_list|()
argument_list|,
name|ActionTrigger
operator|.
name|ANNOTATION_PAGE_CLOSED
argument_list|)
expr_stmt|;
name|handleDestinationOrAction
argument_list|(
name|annotationActions
operator|.
name|getPI
argument_list|()
argument_list|,
name|ActionTrigger
operator|.
name|ANNOTATION_PAGE_NO_LONGER_VISIBLE
argument_list|)
expr_stmt|;
name|handleDestinationOrAction
argument_list|(
name|annotationActions
operator|.
name|getPO
argument_list|()
argument_list|,
name|ActionTrigger
operator|.
name|ANNOTATION_PAGE_OPENED
argument_list|)
expr_stmt|;
name|handleDestinationOrAction
argument_list|(
name|annotationActions
operator|.
name|getPV
argument_list|()
argument_list|,
name|ActionTrigger
operator|.
name|ANNOTATION_PAGE_VISIBLE
argument_list|)
expr_stmt|;
name|handleDestinationOrAction
argument_list|(
name|annotationActions
operator|.
name|getU
argument_list|()
argument_list|,
name|ActionTrigger
operator|.
name|ANNOTATION_MOUSE_RELEASED
argument_list|)
expr_stmt|;
name|handleDestinationOrAction
argument_list|(
name|annotationActions
operator|.
name|getX
argument_list|()
argument_list|,
name|ActionTrigger
operator|.
name|ANNOTATION_CURSOR_EXIT
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|protected
name|void
name|startDocument
parameter_list|(
name|PDDocument
name|pdf
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|xhtml
operator|.
name|startDocument
argument_list|()
expr_stmt|;
try|try
block|{
name|handleDestinationOrAction
argument_list|(
name|pdf
operator|.
name|getDocumentCatalog
argument_list|()
operator|.
name|getOpenAction
argument_list|()
argument_list|,
name|ActionTrigger
operator|.
name|DOCUMENT_OPEN
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|//See PDFBOX-3773
comment|//swallow -- no need to report this
block|}
block|}
catch|catch
parameter_list|(
name|TikaException
decl||
name|SAXException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOExceptionWithCause
argument_list|(
literal|"Unable to start a document"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
name|void
name|handleDestinationOrAction
parameter_list|(
name|PDDestinationOrAction
name|action
parameter_list|,
name|ActionTrigger
name|actionTrigger
parameter_list|)
throws|throws
name|IOException
throws|,
name|SAXException
throws|,
name|TikaException
block|{
if|if
condition|(
name|action
operator|==
literal|null
operator|||
operator|!
name|config
operator|.
name|getExtractActions
argument_list|()
condition|)
block|{
return|return;
block|}
name|AttributesImpl
name|attributes
init|=
operator|new
name|AttributesImpl
argument_list|()
decl_stmt|;
name|String
name|actionOrDestString
init|=
operator|(
name|action
operator|instanceof
name|PDAction
operator|)
condition|?
literal|"action"
else|:
literal|"destination"
decl_stmt|;
name|addNonNullAttribute
argument_list|(
literal|"class"
argument_list|,
name|actionOrDestString
argument_list|,
name|attributes
argument_list|)
expr_stmt|;
name|addNonNullAttribute
argument_list|(
literal|"type"
argument_list|,
name|action
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
argument_list|,
name|attributes
argument_list|)
expr_stmt|;
name|addNonNullAttribute
argument_list|(
literal|"trigger"
argument_list|,
name|actionTrigger
operator|.
name|name
argument_list|()
argument_list|,
name|attributes
argument_list|)
expr_stmt|;
if|if
condition|(
name|action
operator|instanceof
name|PDActionImportData
condition|)
block|{
name|processDoc
argument_list|(
literal|""
argument_list|,
operator|(
operator|(
name|PDActionImportData
operator|)
name|action
operator|)
operator|.
name|getFile
argument_list|()
argument_list|,
name|attributes
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|action
operator|instanceof
name|PDActionLaunch
condition|)
block|{
name|PDActionLaunch
name|pdActionLaunch
init|=
operator|(
name|PDActionLaunch
operator|)
name|action
decl_stmt|;
name|addNonNullAttribute
argument_list|(
literal|"id"
argument_list|,
name|pdActionLaunch
operator|.
name|getF
argument_list|()
argument_list|,
name|attributes
argument_list|)
expr_stmt|;
name|addNonNullAttribute
argument_list|(
literal|"defaultDirectory"
argument_list|,
name|pdActionLaunch
operator|.
name|getD
argument_list|()
argument_list|,
name|attributes
argument_list|)
expr_stmt|;
name|addNonNullAttribute
argument_list|(
literal|"operation"
argument_list|,
name|pdActionLaunch
operator|.
name|getO
argument_list|()
argument_list|,
name|attributes
argument_list|)
expr_stmt|;
name|addNonNullAttribute
argument_list|(
literal|"parameters"
argument_list|,
name|pdActionLaunch
operator|.
name|getP
argument_list|()
argument_list|,
name|attributes
argument_list|)
expr_stmt|;
name|processDoc
argument_list|(
name|pdActionLaunch
operator|.
name|getF
argument_list|()
argument_list|,
name|pdActionLaunch
operator|.
name|getFile
argument_list|()
argument_list|,
name|attributes
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|action
operator|instanceof
name|PDActionRemoteGoTo
condition|)
block|{
name|PDActionRemoteGoTo
name|remoteGoTo
init|=
operator|(
name|PDActionRemoteGoTo
operator|)
name|action
decl_stmt|;
name|processDoc
argument_list|(
literal|""
argument_list|,
name|remoteGoTo
operator|.
name|getFile
argument_list|()
argument_list|,
name|attributes
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|action
operator|instanceof
name|PDActionJavaScript
condition|)
block|{
name|PDActionJavaScript
name|jsAction
init|=
operator|(
name|PDActionJavaScript
operator|)
name|action
decl_stmt|;
name|Metadata
name|m
init|=
operator|new
name|Metadata
argument_list|()
decl_stmt|;
name|m
operator|.
name|set
argument_list|(
name|Metadata
operator|.
name|CONTENT_TYPE
argument_list|,
literal|"application/javascript"
argument_list|)
expr_stmt|;
name|m
operator|.
name|set
argument_list|(
name|Metadata
operator|.
name|CONTENT_ENCODING
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|m
operator|.
name|set
argument_list|(
name|PDF
operator|.
name|ACTION_TRIGGER
argument_list|,
name|actionTrigger
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|m
operator|.
name|set
argument_list|(
name|TikaCoreProperties
operator|.
name|EMBEDDED_RESOURCE_TYPE
argument_list|,
name|TikaCoreProperties
operator|.
name|EmbeddedResourceType
operator|.
name|MACRO
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|js
init|=
name|jsAction
operator|.
name|getAction
argument_list|()
decl_stmt|;
name|js
operator|=
operator|(
name|js
operator|==
literal|null
operator|)
condition|?
literal|""
else|:
name|js
expr_stmt|;
if|if
condition|(
name|embeddedDocumentExtractor
operator|.
name|shouldParseEmbedded
argument_list|(
name|m
argument_list|)
condition|)
block|{
try|try
init|(
name|InputStream
name|is
init|=
name|TikaInputStream
operator|.
name|get
argument_list|(
name|js
operator|.
name|getBytes
argument_list|(
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
argument_list|)
init|)
block|{
name|embeddedDocumentExtractor
operator|.
name|parseEmbedded
argument_list|(
name|is
argument_list|,
name|xhtml
argument_list|,
name|m
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
name|addNonNullAttribute
argument_list|(
literal|"class"
argument_list|,
literal|"javascript"
argument_list|,
name|attributes
argument_list|)
expr_stmt|;
name|addNonNullAttribute
argument_list|(
literal|"type"
argument_list|,
name|jsAction
operator|.
name|getType
argument_list|()
argument_list|,
name|attributes
argument_list|)
expr_stmt|;
name|addNonNullAttribute
argument_list|(
literal|"subtype"
argument_list|,
name|jsAction
operator|.
name|getSubType
argument_list|()
argument_list|,
name|attributes
argument_list|)
expr_stmt|;
name|xhtml
operator|.
name|startElement
argument_list|(
literal|"div"
argument_list|,
name|attributes
argument_list|)
expr_stmt|;
name|xhtml
operator|.
name|endElement
argument_list|(
literal|"div"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|xhtml
operator|.
name|startElement
argument_list|(
literal|"div"
argument_list|,
name|attributes
argument_list|)
expr_stmt|;
name|xhtml
operator|.
name|endElement
argument_list|(
literal|"div"
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|void
name|addNonNullAttribute
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|value
parameter_list|,
name|AttributesImpl
name|attributes
parameter_list|)
block|{
if|if
condition|(
name|name
operator|==
literal|null
operator|||
name|value
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|attributes
operator|.
name|addAttribute
argument_list|(
literal|""
argument_list|,
name|name
argument_list|,
name|name
argument_list|,
literal|"CDATA"
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|endDocument
parameter_list|(
name|PDDocument
name|pdf
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
comment|// Extract text for any bookmarks:
if|if
condition|(
name|config
operator|.
name|getExtractBookmarksText
argument_list|()
condition|)
block|{
name|extractBookmarkText
argument_list|()
expr_stmt|;
block|}
try|try
block|{
name|extractEmbeddedDocuments
argument_list|(
name|pdf
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|handleCatchableIOE
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
name|extractXMPXFA
argument_list|(
name|pdf
argument_list|,
name|metadata
argument_list|,
name|context
argument_list|)
expr_stmt|;
comment|//extract acroform data at end of doc
if|if
condition|(
name|config
operator|.
name|getExtractAcroFormContent
argument_list|()
operator|==
literal|true
condition|)
block|{
try|try
block|{
name|extractAcroForm
argument_list|(
name|pdf
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|handleCatchableIOE
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
name|PDDocumentCatalogAdditionalActions
name|additionalActions
init|=
name|pdf
operator|.
name|getDocumentCatalog
argument_list|()
operator|.
name|getActions
argument_list|()
decl_stmt|;
name|handleDestinationOrAction
argument_list|(
name|additionalActions
operator|.
name|getDP
argument_list|()
argument_list|,
name|ActionTrigger
operator|.
name|AFTER_DOCUMENT_PRINT
argument_list|)
expr_stmt|;
name|handleDestinationOrAction
argument_list|(
name|additionalActions
operator|.
name|getDS
argument_list|()
argument_list|,
name|ActionTrigger
operator|.
name|AFTER_DOCUMENT_SAVE
argument_list|)
expr_stmt|;
name|handleDestinationOrAction
argument_list|(
name|additionalActions
operator|.
name|getWC
argument_list|()
argument_list|,
name|ActionTrigger
operator|.
name|BEFORE_DOCUMENT_CLOSE
argument_list|)
expr_stmt|;
name|handleDestinationOrAction
argument_list|(
name|additionalActions
operator|.
name|getWP
argument_list|()
argument_list|,
name|ActionTrigger
operator|.
name|BEFORE_DOCUMENT_PRINT
argument_list|)
expr_stmt|;
name|handleDestinationOrAction
argument_list|(
name|additionalActions
operator|.
name|getWS
argument_list|()
argument_list|,
name|ActionTrigger
operator|.
name|BEFORE_DOCUMENT_SAVE
argument_list|)
expr_stmt|;
name|xhtml
operator|.
name|endDocument
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TikaException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOExceptionWithCause
argument_list|(
literal|"Unable to end a document"
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|SAXException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOExceptionWithCause
argument_list|(
literal|"Unable to end a document"
argument_list|,
name|e
argument_list|)
throw|;
block|}
if|if
condition|(
name|fontNames
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|String
name|fontName
range|:
name|fontNames
control|)
block|{
name|metadata
operator|.
name|add
argument_list|(
name|Font
operator|.
name|FONT_NAME
argument_list|,
name|fontName
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|void
name|extractBookmarkText
parameter_list|()
throws|throws
name|SAXException
throws|,
name|IOException
throws|,
name|TikaException
block|{
name|PDDocumentOutline
name|outline
init|=
name|document
operator|.
name|getDocumentCatalog
argument_list|()
operator|.
name|getDocumentOutline
argument_list|()
decl_stmt|;
if|if
condition|(
name|outline
operator|!=
literal|null
condition|)
block|{
name|extractBookmarkText
argument_list|(
name|outline
argument_list|)
expr_stmt|;
block|}
block|}
name|void
name|extractBookmarkText
parameter_list|(
name|PDOutlineNode
name|bookmark
parameter_list|)
throws|throws
name|SAXException
throws|,
name|IOException
throws|,
name|TikaException
block|{
name|PDOutlineItem
name|current
init|=
name|bookmark
operator|.
name|getFirstChild
argument_list|()
decl_stmt|;
if|if
condition|(
name|current
operator|!=
literal|null
condition|)
block|{
name|xhtml
operator|.
name|startElement
argument_list|(
literal|"ul"
argument_list|)
expr_stmt|;
while|while
condition|(
name|current
operator|!=
literal|null
condition|)
block|{
name|xhtml
operator|.
name|startElement
argument_list|(
literal|"li"
argument_list|)
expr_stmt|;
name|xhtml
operator|.
name|characters
argument_list|(
name|current
operator|.
name|getTitle
argument_list|()
argument_list|)
expr_stmt|;
name|xhtml
operator|.
name|endElement
argument_list|(
literal|"li"
argument_list|)
expr_stmt|;
name|handleDestinationOrAction
argument_list|(
name|current
operator|.
name|getAction
argument_list|()
argument_list|,
name|ActionTrigger
operator|.
name|BOOKMARK
argument_list|)
expr_stmt|;
comment|// Recurse:
name|extractBookmarkText
argument_list|(
name|current
argument_list|)
expr_stmt|;
name|current
operator|=
name|current
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
block|}
name|xhtml
operator|.
name|endElement
argument_list|(
literal|"ul"
argument_list|)
expr_stmt|;
block|}
block|}
name|void
name|extractAcroForm
parameter_list|(
name|PDDocument
name|pdf
parameter_list|)
throws|throws
name|IOException
throws|,
name|SAXException
throws|,
name|TikaException
block|{
comment|//Thank you, Ben Litchfield, for org.apache.pdfbox.examples.fdf.PrintFields
comment|//this code derives from Ben's code
name|PDDocumentCatalog
name|catalog
init|=
name|pdf
operator|.
name|getDocumentCatalog
argument_list|()
decl_stmt|;
if|if
condition|(
name|catalog
operator|==
literal|null
condition|)
return|return;
name|PDAcroForm
name|form
init|=
name|catalog
operator|.
name|getAcroForm
argument_list|()
decl_stmt|;
if|if
condition|(
name|form
operator|==
literal|null
condition|)
return|return;
comment|//if it has xfa, try that.
comment|//if it doesn't exist or there's an exception,
comment|//go with traditional AcroForm
name|PDXFAResource
name|pdxfa
init|=
name|form
operator|.
name|getXFA
argument_list|()
decl_stmt|;
if|if
condition|(
name|pdxfa
operator|!=
literal|null
condition|)
block|{
comment|//if successful, return
name|XFAExtractor
name|xfaExtractor
init|=
operator|new
name|XFAExtractor
argument_list|()
decl_stmt|;
name|InputStream
name|is
init|=
literal|null
decl_stmt|;
try|try
block|{
name|is
operator|=
operator|new
name|BufferedInputStream
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|pdxfa
operator|.
name|getBytes
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|EmbeddedDocumentUtil
operator|.
name|recordEmbeddedStreamException
argument_list|(
name|e
argument_list|,
name|metadata
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|is
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|xfaExtractor
operator|.
name|extract
argument_list|(
name|is
argument_list|,
name|xhtml
argument_list|,
name|metadata
argument_list|,
name|context
argument_list|)
expr_stmt|;
return|return;
block|}
catch|catch
parameter_list|(
name|XMLStreamException
name|e
parameter_list|)
block|{
comment|//if there was an xml parse exception in xfa, try the AcroForm
name|EmbeddedDocumentUtil
operator|.
name|recordException
argument_list|(
name|e
argument_list|,
name|metadata
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|closeQuietly
argument_list|(
name|is
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"rawtypes"
argument_list|)
name|List
name|fields
init|=
name|form
operator|.
name|getFields
argument_list|()
decl_stmt|;
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
return|return;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"rawtypes"
argument_list|)
name|ListIterator
name|itr
init|=
name|fields
operator|.
name|listIterator
argument_list|()
decl_stmt|;
if|if
condition|(
name|itr
operator|==
literal|null
condition|)
return|return;
name|xhtml
operator|.
name|startElement
argument_list|(
literal|"div"
argument_list|,
literal|"class"
argument_list|,
literal|"acroform"
argument_list|)
expr_stmt|;
name|xhtml
operator|.
name|startElement
argument_list|(
literal|"ol"
argument_list|)
expr_stmt|;
while|while
condition|(
name|itr
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Object
name|obj
init|=
name|itr
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|obj
operator|!=
literal|null
operator|&&
name|obj
operator|instanceof
name|PDField
condition|)
block|{
name|processAcroField
argument_list|(
operator|(
name|PDField
operator|)
name|obj
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
name|xhtml
operator|.
name|endElement
argument_list|(
literal|"ol"
argument_list|)
expr_stmt|;
name|xhtml
operator|.
name|endElement
argument_list|(
literal|"div"
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|processAcroField
parameter_list|(
name|PDField
name|field
parameter_list|,
specifier|final
name|int
name|currentRecursiveDepth
parameter_list|)
throws|throws
name|SAXException
throws|,
name|IOException
throws|,
name|TikaException
block|{
if|if
condition|(
name|currentRecursiveDepth
operator|>=
name|MAX_ACROFORM_RECURSIONS
condition|)
block|{
return|return;
block|}
name|PDFormFieldAdditionalActions
name|pdFormFieldAdditionalActions
init|=
name|field
operator|.
name|getActions
argument_list|()
decl_stmt|;
if|if
condition|(
name|pdFormFieldAdditionalActions
operator|!=
literal|null
condition|)
block|{
name|handleDestinationOrAction
argument_list|(
name|pdFormFieldAdditionalActions
operator|.
name|getC
argument_list|()
argument_list|,
name|ActionTrigger
operator|.
name|FORM_FIELD_RECALCULATE
argument_list|)
expr_stmt|;
name|handleDestinationOrAction
argument_list|(
name|pdFormFieldAdditionalActions
operator|.
name|getF
argument_list|()
argument_list|,
name|ActionTrigger
operator|.
name|FORM_FIELD_FORMATTED
argument_list|)
expr_stmt|;
name|handleDestinationOrAction
argument_list|(
name|pdFormFieldAdditionalActions
operator|.
name|getK
argument_list|()
argument_list|,
name|ActionTrigger
operator|.
name|FORM_FIELD_KEYSTROKE
argument_list|)
expr_stmt|;
name|handleDestinationOrAction
argument_list|(
name|pdFormFieldAdditionalActions
operator|.
name|getV
argument_list|()
argument_list|,
name|ActionTrigger
operator|.
name|FORM_FIELD_VALUE_CHANGE
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|field
operator|.
name|getWidgets
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|PDAnnotationWidget
name|widget
range|:
name|field
operator|.
name|getWidgets
argument_list|()
control|)
block|{
name|handleWidget
argument_list|(
name|widget
argument_list|)
expr_stmt|;
block|}
block|}
name|addFieldString
argument_list|(
name|field
argument_list|)
expr_stmt|;
if|if
condition|(
name|field
operator|instanceof
name|PDNonTerminalField
condition|)
block|{
name|int
name|r
init|=
name|currentRecursiveDepth
operator|+
literal|1
decl_stmt|;
name|xhtml
operator|.
name|startElement
argument_list|(
literal|"ol"
argument_list|)
expr_stmt|;
for|for
control|(
name|PDField
name|child
range|:
operator|(
operator|(
name|PDNonTerminalField
operator|)
name|field
operator|)
operator|.
name|getChildren
argument_list|()
control|)
block|{
name|processAcroField
argument_list|(
name|child
argument_list|,
name|r
argument_list|)
expr_stmt|;
block|}
name|xhtml
operator|.
name|endElement
argument_list|(
literal|"ol"
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|addFieldString
parameter_list|(
name|PDField
name|field
parameter_list|)
throws|throws
name|SAXException
block|{
comment|//Pick partial name to present in content and altName for attribute
comment|//Ignoring FullyQualifiedName for now
name|String
name|partName
init|=
name|field
operator|.
name|getPartialName
argument_list|()
decl_stmt|;
name|String
name|altName
init|=
name|field
operator|.
name|getAlternateFieldName
argument_list|()
decl_stmt|;
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|AttributesImpl
name|attrs
init|=
operator|new
name|AttributesImpl
argument_list|()
decl_stmt|;
if|if
condition|(
name|partName
operator|!=
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|partName
argument_list|)
operator|.
name|append
argument_list|(
literal|": "
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|altName
operator|!=
literal|null
condition|)
block|{
name|attrs
operator|.
name|addAttribute
argument_list|(
literal|""
argument_list|,
literal|"altName"
argument_list|,
literal|"altName"
argument_list|,
literal|"CDATA"
argument_list|,
name|altName
argument_list|)
expr_stmt|;
block|}
comment|//return early if PDSignature field
if|if
condition|(
name|field
operator|instanceof
name|PDSignatureField
condition|)
block|{
name|handleSignature
argument_list|(
name|attrs
argument_list|,
operator|(
name|PDSignatureField
operator|)
name|field
argument_list|)
expr_stmt|;
return|return;
block|}
name|String
name|value
init|=
name|field
operator|.
name|getValueAsString
argument_list|()
decl_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
operator|&&
operator|!
name|value
operator|.
name|equals
argument_list|(
literal|"null"
argument_list|)
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|attrs
operator|.
name|getLength
argument_list|()
operator|>
literal|0
operator|||
name|sb
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|xhtml
operator|.
name|startElement
argument_list|(
literal|"li"
argument_list|,
name|attrs
argument_list|)
expr_stmt|;
name|xhtml
operator|.
name|characters
argument_list|(
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|xhtml
operator|.
name|endElement
argument_list|(
literal|"li"
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|handleSignature
parameter_list|(
name|AttributesImpl
name|parentAttributes
parameter_list|,
name|PDSignatureField
name|sigField
parameter_list|)
throws|throws
name|SAXException
block|{
name|PDSignature
name|sig
init|=
name|sigField
operator|.
name|getSignature
argument_list|()
decl_stmt|;
if|if
condition|(
name|sig
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|vals
init|=
operator|new
name|TreeMap
argument_list|<>
argument_list|()
decl_stmt|;
name|vals
operator|.
name|put
argument_list|(
literal|"name"
argument_list|,
name|sig
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|vals
operator|.
name|put
argument_list|(
literal|"contactInfo"
argument_list|,
name|sig
operator|.
name|getContactInfo
argument_list|()
argument_list|)
expr_stmt|;
name|vals
operator|.
name|put
argument_list|(
literal|"location"
argument_list|,
name|sig
operator|.
name|getLocation
argument_list|()
argument_list|)
expr_stmt|;
name|vals
operator|.
name|put
argument_list|(
literal|"reason"
argument_list|,
name|sig
operator|.
name|getReason
argument_list|()
argument_list|)
expr_stmt|;
name|Calendar
name|cal
init|=
name|sig
operator|.
name|getSignDate
argument_list|()
decl_stmt|;
if|if
condition|(
name|cal
operator|!=
literal|null
condition|)
block|{
name|dateFormat
operator|.
name|setTimeZone
argument_list|(
name|cal
operator|.
name|getTimeZone
argument_list|()
argument_list|)
expr_stmt|;
name|vals
operator|.
name|put
argument_list|(
literal|"date"
argument_list|,
name|dateFormat
operator|.
name|format
argument_list|(
name|cal
operator|.
name|getTime
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|//see if there is any data
name|int
name|nonNull
init|=
literal|0
decl_stmt|;
for|for
control|(
name|String
name|val
range|:
name|vals
operator|.
name|keySet
argument_list|()
control|)
block|{
if|if
condition|(
name|val
operator|!=
literal|null
operator|&&
operator|!
name|val
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|)
block|{
name|nonNull
operator|++
expr_stmt|;
block|}
block|}
comment|//if there is, process it
if|if
condition|(
name|nonNull
operator|>
literal|0
condition|)
block|{
name|metadata
operator|.
name|set
argument_list|(
name|TikaCoreProperties
operator|.
name|HAS_SIGNATURE
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|xhtml
operator|.
name|startElement
argument_list|(
literal|"li"
argument_list|,
name|parentAttributes
argument_list|)
expr_stmt|;
name|AttributesImpl
name|attrs
init|=
operator|new
name|AttributesImpl
argument_list|()
decl_stmt|;
name|attrs
operator|.
name|addAttribute
argument_list|(
literal|""
argument_list|,
literal|"type"
argument_list|,
literal|"type"
argument_list|,
literal|"CDATA"
argument_list|,
literal|"signaturedata"
argument_list|)
expr_stmt|;
name|xhtml
operator|.
name|startElement
argument_list|(
literal|"ol"
argument_list|,
name|attrs
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|e
range|:
name|vals
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|e
operator|.
name|getValue
argument_list|()
operator|==
literal|null
operator|||
name|e
operator|.
name|getValue
argument_list|()
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|attrs
operator|=
operator|new
name|AttributesImpl
argument_list|()
expr_stmt|;
name|attrs
operator|.
name|addAttribute
argument_list|(
literal|""
argument_list|,
literal|"signdata"
argument_list|,
literal|"signdata"
argument_list|,
literal|"CDATA"
argument_list|,
name|e
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|xhtml
operator|.
name|startElement
argument_list|(
literal|"li"
argument_list|,
name|attrs
argument_list|)
expr_stmt|;
name|xhtml
operator|.
name|characters
argument_list|(
name|e
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|xhtml
operator|.
name|endElement
argument_list|(
literal|"li"
argument_list|)
expr_stmt|;
block|}
name|xhtml
operator|.
name|endElement
argument_list|(
literal|"ol"
argument_list|)
expr_stmt|;
name|xhtml
operator|.
name|endElement
argument_list|(
literal|"li"
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|PDActionURI
name|getActionURI
parameter_list|(
name|PDAnnotation
name|annot
parameter_list|)
block|{
comment|//copied and pasted from PDFBox's PrintURLs
comment|// use reflection to catch all annotation types that have getAction()
comment|// If you can't use reflection, then check for classes
comment|// PDAnnotationLink and PDAnnotationWidget, and call getAction() and check for a
comment|// PDActionURI result type
try|try
block|{
name|Method
name|actionMethod
init|=
name|annot
operator|.
name|getClass
argument_list|()
operator|.
name|getDeclaredMethod
argument_list|(
literal|"getAction"
argument_list|)
decl_stmt|;
if|if
condition|(
name|actionMethod
operator|.
name|getReturnType
argument_list|()
operator|.
name|equals
argument_list|(
name|PDAction
operator|.
name|class
argument_list|)
condition|)
block|{
name|PDAction
name|action
init|=
operator|(
name|PDAction
operator|)
name|actionMethod
operator|.
name|invoke
argument_list|(
name|annot
argument_list|)
decl_stmt|;
if|if
condition|(
name|action
operator|instanceof
name|PDActionURI
condition|)
block|{
return|return
operator|(
name|PDActionURI
operator|)
name|action
return|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|NoSuchMethodException
decl||
name|IllegalAccessException
decl||
name|InvocationTargetException
name|e
parameter_list|)
block|{         }
return|return
literal|null
return|;
block|}
comment|/**      * we need to override this because we are overriding {@link #processPages(PDPageTree)}      * @return      */
annotation|@
name|Override
specifier|public
name|int
name|getCurrentPageNo
parameter_list|()
block|{
return|return
name|pageIndex
operator|+
literal|1
return|;
block|}
comment|/**      * See TIKA-2845 for why we need to override this.      *      * @param pages      * @throws IOException      */
annotation|@
name|Override
specifier|protected
name|void
name|processPages
parameter_list|(
name|PDPageTree
name|pages
parameter_list|)
throws|throws
name|IOException
block|{
comment|//we currently need this hack because we aren't able to increment
comment|//the private currentPageNo in PDFTextStripper,
comment|//and PDFTextStripper's processPage relies on that variable
comment|//being>= startPage when deciding whether or not to process a page
comment|// See:
comment|// if (currentPageNo>= startPage&& currentPageNo<= endPage
comment|//&& (startBookmarkPageNumber == -1 || currentPageNo>= startBookmarkPageNumber)
comment|//&& (endBookmarkPageNumber == -1 || currentPageNo<= endBookmarkPageNumber))
comment|//        {
name|super
operator|.
name|setStartPage
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
for|for
control|(
name|PDPage
name|page
range|:
name|pages
control|)
block|{
if|if
condition|(
name|getCurrentPageNo
argument_list|()
operator|>=
name|getStartPage
argument_list|()
operator|&&
name|getCurrentPageNo
argument_list|()
operator|<=
name|getEndPage
argument_list|()
condition|)
block|{
name|processPage
argument_list|(
name|page
argument_list|)
expr_stmt|;
block|}
name|pageIndex
operator|++
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|setStartBookmark
parameter_list|(
name|PDOutlineItem
name|pdOutlineItem
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"We don't currently support this -- See PDFTextStripper's processPages() for how to implement this."
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setEndBookmark
parameter_list|(
name|PDOutlineItem
name|pdOutlineItem
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"We don't currently support this -- See PDFTextStripper's processPages() for how to implement this."
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setStartPage
parameter_list|(
name|int
name|startPage
parameter_list|)
block|{
name|this
operator|.
name|startPage
operator|=
name|startPage
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getStartPage
parameter_list|()
block|{
return|return
name|startPage
return|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|showGlyph
parameter_list|(
name|Matrix
name|textRenderingMatrix
parameter_list|,
name|PDFont
name|font
parameter_list|,
name|int
name|code
parameter_list|,
name|String
name|unicode
parameter_list|,
name|Vector
name|displacement
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|showGlyph
argument_list|(
name|textRenderingMatrix
argument_list|,
name|font
argument_list|,
name|code
argument_list|,
name|unicode
argument_list|,
name|displacement
argument_list|)
expr_stmt|;
if|if
condition|(
name|unicode
operator|==
literal|null
operator|||
name|unicode
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|unmappedUnicodeCharsPerPage
operator|++
expr_stmt|;
block|}
name|totalCharsPerPage
operator|++
expr_stmt|;
block|}
block|}
end_class

end_unit

