begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|jdbc
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|exception
operator|.
name|TikaException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|metadata
operator|.
name|Metadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|mime
operator|.
name|MediaType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|AbstractParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|ParseContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|ContentHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_comment
comment|/**  * This is the main class for parsing SQLite3 files.  When {@link #parse} is called,  * this creates a new {@link org.apache.tika.parser.jdbc.SQLite3DBParser}.  *<p/>  * Given potential conflicts of native libraries in web servers, users will  * need to add org.xerial's sqlite-jdbc jar to the class path for this parser  * to work.  For development and testing, this jar is specified in tika-parsers'  * pom.xml, but it is currently set to "provided."  *<p/>  * Note that this family of jdbc parsers is designed to treat each CLOB and each BLOB  * as an embedded document; i.e. it will recursively process documents that are stored  * in a sqlite db as "bytes".  *<p/>  * If using a TikaInputStream, make sure to close it to delete the temp file  * that has to be created.  */
end_comment

begin_class
specifier|public
class|class
name|SQLite3Parser
extends|extends
name|AbstractParser
block|{
comment|/**      * Serial version UID      */
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
operator|-
literal|752276948656079347L
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|MediaType
name|MEDIA_TYPE
init|=
name|MediaType
operator|.
name|application
argument_list|(
literal|"x-sqlite3"
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|Set
argument_list|<
name|MediaType
argument_list|>
name|SUPPORTED_TYPES
decl_stmt|;
comment|/**      * Checks to see if class is available for org.sqlite.JDBC.      *<p/>      * If not, this class will return an EMPTY_SET for  getSupportedTypes()      */
specifier|public
name|SQLite3Parser
parameter_list|()
block|{
name|Set
argument_list|<
name|MediaType
argument_list|>
name|tmp
decl_stmt|;
try|try
block|{
name|Class
operator|.
name|forName
argument_list|(
name|SQLite3DBParser
operator|.
name|SQLITE_CLASS_NAME
argument_list|)
expr_stmt|;
name|tmp
operator|=
name|Collections
operator|.
name|singleton
argument_list|(
name|MEDIA_TYPE
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
name|tmp
operator|=
name|Collections
operator|.
name|EMPTY_SET
expr_stmt|;
block|}
name|SUPPORTED_TYPES
operator|=
name|tmp
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Set
argument_list|<
name|MediaType
argument_list|>
name|getSupportedTypes
parameter_list|(
name|ParseContext
name|context
parameter_list|)
block|{
return|return
name|SUPPORTED_TYPES
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|parse
parameter_list|(
name|InputStream
name|stream
parameter_list|,
name|ContentHandler
name|handler
parameter_list|,
name|Metadata
name|metadata
parameter_list|,
name|ParseContext
name|context
parameter_list|)
throws|throws
name|IOException
throws|,
name|SAXException
throws|,
name|TikaException
block|{
name|SQLite3DBParser
name|p
init|=
operator|new
name|SQLite3DBParser
argument_list|()
decl_stmt|;
name|p
operator|.
name|parse
argument_list|(
name|stream
argument_list|,
name|handler
argument_list|,
name|metadata
argument_list|,
name|context
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

