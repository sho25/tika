begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|microsoft
operator|.
name|ooxml
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|openxml4j
operator|.
name|exceptions
operator|.
name|InvalidFormatException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|openxml4j
operator|.
name|opc
operator|.
name|PackagePart
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|openxml4j
operator|.
name|opc
operator|.
name|PackagePartName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|openxml4j
operator|.
name|opc
operator|.
name|PackageRelationship
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|openxml4j
operator|.
name|opc
operator|.
name|PackagingURIHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|openxml4j
operator|.
name|opc
operator|.
name|TargetMode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|xslf
operator|.
name|XSLFSlideShow
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|xslf
operator|.
name|extractor
operator|.
name|XSLFPowerPointExtractor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|xslf
operator|.
name|usermodel
operator|.
name|Placeholder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|xslf
operator|.
name|usermodel
operator|.
name|XMLSlideShow
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|xslf
operator|.
name|usermodel
operator|.
name|XSLFComments
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|xslf
operator|.
name|usermodel
operator|.
name|XSLFGraphicFrame
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|xslf
operator|.
name|usermodel
operator|.
name|XSLFGroupShape
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|xslf
operator|.
name|usermodel
operator|.
name|XSLFPictureShape
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|xslf
operator|.
name|usermodel
operator|.
name|XSLFRelation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|xslf
operator|.
name|usermodel
operator|.
name|XSLFShape
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|xslf
operator|.
name|usermodel
operator|.
name|XSLFSheet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|xslf
operator|.
name|usermodel
operator|.
name|XSLFSlide
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|xslf
operator|.
name|usermodel
operator|.
name|XSLFTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|xslf
operator|.
name|usermodel
operator|.
name|XSLFTableCell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|xslf
operator|.
name|usermodel
operator|.
name|XSLFTableRow
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|xslf
operator|.
name|usermodel
operator|.
name|XSLFTextShape
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|exception
operator|.
name|TikaException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|ParseContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|sax
operator|.
name|XHTMLContentHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xmlbeans
operator|.
name|XmlException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xmlbeans
operator|.
name|XmlObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|openxmlformats
operator|.
name|schemas
operator|.
name|presentationml
operator|.
name|x2006
operator|.
name|main
operator|.
name|CTComment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|openxmlformats
operator|.
name|schemas
operator|.
name|presentationml
operator|.
name|x2006
operator|.
name|main
operator|.
name|CTPicture
import|;
end_import

begin_import
import|import
name|org
operator|.
name|openxmlformats
operator|.
name|schemas
operator|.
name|presentationml
operator|.
name|x2006
operator|.
name|main
operator|.
name|CTSlideIdList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|openxmlformats
operator|.
name|schemas
operator|.
name|presentationml
operator|.
name|x2006
operator|.
name|main
operator|.
name|CTSlideIdListEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|helpers
operator|.
name|AttributesImpl
import|;
end_import

begin_class
specifier|public
class|class
name|XSLFPowerPointExtractorDecorator
extends|extends
name|AbstractOOXMLExtractor
block|{
specifier|public
name|XSLFPowerPointExtractorDecorator
parameter_list|(
name|ParseContext
name|context
parameter_list|,
name|XSLFPowerPointExtractor
name|extractor
parameter_list|)
block|{
name|super
argument_list|(
name|context
argument_list|,
name|extractor
argument_list|)
expr_stmt|;
block|}
comment|/**      * @see org.apache.poi.xslf.extractor.XSLFPowerPointExtractor#getText()      */
specifier|protected
name|void
name|buildXHTML
parameter_list|(
name|XHTMLContentHandler
name|xhtml
parameter_list|)
throws|throws
name|SAXException
throws|,
name|IOException
block|{
name|XMLSlideShow
name|slideShow
init|=
operator|(
name|XMLSlideShow
operator|)
name|extractor
operator|.
name|getDocument
argument_list|()
decl_stmt|;
name|XSLFSlide
index|[]
name|slides
init|=
name|slideShow
operator|.
name|getSlides
argument_list|()
decl_stmt|;
for|for
control|(
name|XSLFSlide
name|slide
range|:
name|slides
control|)
block|{
name|String
name|slideDesc
decl_stmt|;
if|if
condition|(
name|slide
operator|.
name|getPackagePart
argument_list|()
operator|!=
literal|null
operator|&&
name|slide
operator|.
name|getPackagePart
argument_list|()
operator|.
name|getPartName
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|slideDesc
operator|=
name|getJustFileName
argument_list|(
name|slide
operator|.
name|getPackagePart
argument_list|()
operator|.
name|getPartName
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|slideDesc
operator|+=
literal|"_"
expr_stmt|;
block|}
else|else
block|{
name|slideDesc
operator|=
literal|null
expr_stmt|;
block|}
comment|// slide
name|extractContent
argument_list|(
name|slide
operator|.
name|getShapes
argument_list|()
argument_list|,
literal|false
argument_list|,
name|xhtml
argument_list|,
name|slideDesc
argument_list|)
expr_stmt|;
comment|// slide layout which is the master sheet for this slide
name|XSLFSheet
name|slideLayout
init|=
name|slide
operator|.
name|getMasterSheet
argument_list|()
decl_stmt|;
name|extractContent
argument_list|(
name|slideLayout
operator|.
name|getShapes
argument_list|()
argument_list|,
literal|true
argument_list|,
name|xhtml
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// slide master which is the master sheet for all text layouts
name|XSLFSheet
name|slideMaster
init|=
name|slideLayout
operator|.
name|getMasterSheet
argument_list|()
decl_stmt|;
name|extractContent
argument_list|(
name|slideMaster
operator|.
name|getShapes
argument_list|()
argument_list|,
literal|true
argument_list|,
name|xhtml
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// notes (if present)
name|XSLFSheet
name|slideNotes
init|=
name|slide
operator|.
name|getNotes
argument_list|()
decl_stmt|;
if|if
condition|(
name|slideNotes
operator|!=
literal|null
condition|)
block|{
name|extractContent
argument_list|(
name|slideNotes
operator|.
name|getShapes
argument_list|()
argument_list|,
literal|false
argument_list|,
name|xhtml
argument_list|,
name|slideDesc
argument_list|)
expr_stmt|;
comment|// master sheet for this notes
name|XSLFSheet
name|notesMaster
init|=
name|slideNotes
operator|.
name|getMasterSheet
argument_list|()
decl_stmt|;
name|extractContent
argument_list|(
name|notesMaster
operator|.
name|getShapes
argument_list|()
argument_list|,
literal|true
argument_list|,
name|xhtml
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|// comments (if present)
name|XSLFComments
name|comments
init|=
name|slide
operator|.
name|getComments
argument_list|()
decl_stmt|;
if|if
condition|(
name|comments
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|comments
operator|.
name|getNumberOfComments
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|CTComment
name|comment
init|=
name|comments
operator|.
name|getCommentAt
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|xhtml
operator|.
name|element
argument_list|(
literal|"p"
argument_list|,
name|comment
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|private
name|void
name|extractContent
parameter_list|(
name|XSLFShape
index|[]
name|shapes
parameter_list|,
name|boolean
name|skipPlaceholders
parameter_list|,
name|XHTMLContentHandler
name|xhtml
parameter_list|,
name|String
name|slideDesc
parameter_list|)
throws|throws
name|SAXException
block|{
for|for
control|(
name|XSLFShape
name|sh
range|:
name|shapes
control|)
block|{
if|if
condition|(
name|sh
operator|instanceof
name|XSLFTextShape
condition|)
block|{
name|XSLFTextShape
name|txt
init|=
operator|(
name|XSLFTextShape
operator|)
name|sh
decl_stmt|;
name|Placeholder
name|ph
init|=
name|txt
operator|.
name|getTextType
argument_list|()
decl_stmt|;
if|if
condition|(
name|skipPlaceholders
operator|&&
name|ph
operator|!=
literal|null
condition|)
block|{
continue|continue;
block|}
name|xhtml
operator|.
name|element
argument_list|(
literal|"p"
argument_list|,
name|txt
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|sh
operator|instanceof
name|XSLFGroupShape
condition|)
block|{
comment|// recurse into groups of shapes
name|XSLFGroupShape
name|group
init|=
operator|(
name|XSLFGroupShape
operator|)
name|sh
decl_stmt|;
name|extractContent
argument_list|(
name|group
operator|.
name|getShapes
argument_list|()
argument_list|,
name|skipPlaceholders
argument_list|,
name|xhtml
argument_list|,
name|slideDesc
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|sh
operator|instanceof
name|XSLFTable
condition|)
block|{
name|XSLFTable
name|tbl
init|=
operator|(
name|XSLFTable
operator|)
name|sh
decl_stmt|;
for|for
control|(
name|XSLFTableRow
name|row
range|:
name|tbl
control|)
block|{
name|List
argument_list|<
name|XSLFTableCell
argument_list|>
name|cells
init|=
name|row
operator|.
name|getCells
argument_list|()
decl_stmt|;
name|extractContent
argument_list|(
name|cells
operator|.
name|toArray
argument_list|(
operator|new
name|XSLFTableCell
index|[
name|cells
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|,
name|skipPlaceholders
argument_list|,
name|xhtml
argument_list|,
name|slideDesc
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|sh
operator|instanceof
name|XSLFGraphicFrame
condition|)
block|{
name|XSLFGraphicFrame
name|frame
init|=
operator|(
name|XSLFGraphicFrame
operator|)
name|sh
decl_stmt|;
name|XmlObject
index|[]
name|sp
init|=
name|frame
operator|.
name|getXmlObject
argument_list|()
operator|.
name|selectPath
argument_list|(
literal|"declare namespace p='http://schemas.openxmlformats.org/presentationml/2006/main' .//*/p:oleObj"
argument_list|)
decl_stmt|;
if|if
condition|(
name|sp
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|XmlObject
name|emb
range|:
name|sp
control|)
block|{
name|XmlObject
name|relIDAtt
init|=
name|emb
operator|.
name|selectAttribute
argument_list|(
operator|new
name|QName
argument_list|(
literal|"http://schemas.openxmlformats.org/officeDocument/2006/relationships"
argument_list|,
literal|"id"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|relIDAtt
operator|!=
literal|null
condition|)
block|{
name|String
name|relID
init|=
name|relIDAtt
operator|.
name|getDomNode
argument_list|()
operator|.
name|getNodeValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|slideDesc
operator|!=
literal|null
condition|)
block|{
name|relID
operator|=
name|slideDesc
operator|+
name|relID
expr_stmt|;
block|}
name|AttributesImpl
name|attributes
init|=
operator|new
name|AttributesImpl
argument_list|()
decl_stmt|;
name|attributes
operator|.
name|addAttribute
argument_list|(
literal|""
argument_list|,
literal|"class"
argument_list|,
literal|"class"
argument_list|,
literal|"CDATA"
argument_list|,
literal|"embedded"
argument_list|)
expr_stmt|;
name|attributes
operator|.
name|addAttribute
argument_list|(
literal|""
argument_list|,
literal|"id"
argument_list|,
literal|"id"
argument_list|,
literal|"CDATA"
argument_list|,
name|relID
argument_list|)
expr_stmt|;
name|xhtml
operator|.
name|startElement
argument_list|(
literal|"div"
argument_list|,
name|attributes
argument_list|)
expr_stmt|;
name|xhtml
operator|.
name|endElement
argument_list|(
literal|"div"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|sh
operator|instanceof
name|XSLFPictureShape
condition|)
block|{
if|if
condition|(
operator|!
name|skipPlaceholders
operator|&&
operator|(
name|sh
operator|.
name|getXmlObject
argument_list|()
operator|instanceof
name|CTPicture
operator|)
condition|)
block|{
name|CTPicture
name|ctPic
init|=
operator|(
operator|(
name|CTPicture
operator|)
name|sh
operator|.
name|getXmlObject
argument_list|()
operator|)
decl_stmt|;
if|if
condition|(
name|ctPic
operator|.
name|getBlipFill
argument_list|()
operator|!=
literal|null
operator|&&
name|ctPic
operator|.
name|getBlipFill
argument_list|()
operator|.
name|getBlip
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|String
name|relID
init|=
name|ctPic
operator|.
name|getBlipFill
argument_list|()
operator|.
name|getBlip
argument_list|()
operator|.
name|getEmbed
argument_list|()
decl_stmt|;
if|if
condition|(
name|relID
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|slideDesc
operator|!=
literal|null
condition|)
block|{
name|relID
operator|=
name|slideDesc
operator|+
name|relID
expr_stmt|;
block|}
name|AttributesImpl
name|attributes
init|=
operator|new
name|AttributesImpl
argument_list|()
decl_stmt|;
name|attributes
operator|.
name|addAttribute
argument_list|(
literal|""
argument_list|,
literal|"class"
argument_list|,
literal|"class"
argument_list|,
literal|"CDATA"
argument_list|,
literal|"embedded"
argument_list|)
expr_stmt|;
name|attributes
operator|.
name|addAttribute
argument_list|(
literal|""
argument_list|,
literal|"id"
argument_list|,
literal|"id"
argument_list|,
literal|"CDATA"
argument_list|,
name|relID
argument_list|)
expr_stmt|;
name|xhtml
operator|.
name|startElement
argument_list|(
literal|"div"
argument_list|,
name|attributes
argument_list|)
expr_stmt|;
name|xhtml
operator|.
name|endElement
argument_list|(
literal|"div"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
block|}
comment|/**      * In PowerPoint files, slides have things embedded in them,      * and slide drawings which have the images      */
annotation|@
name|Override
specifier|protected
name|List
argument_list|<
name|PackagePart
argument_list|>
name|getMainDocumentParts
parameter_list|()
throws|throws
name|TikaException
block|{
name|List
argument_list|<
name|PackagePart
argument_list|>
name|parts
init|=
operator|new
name|ArrayList
argument_list|<
name|PackagePart
argument_list|>
argument_list|()
decl_stmt|;
name|XMLSlideShow
name|slideShow
init|=
operator|(
name|XMLSlideShow
operator|)
name|extractor
operator|.
name|getDocument
argument_list|()
decl_stmt|;
name|XSLFSlideShow
name|document
init|=
literal|null
decl_stmt|;
try|try
block|{
name|document
operator|=
name|slideShow
operator|.
name|_getXSLFSlideShow
argument_list|()
expr_stmt|;
comment|// TODO Avoid this in future
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|TikaException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
comment|// Shouldn't happen
block|}
name|CTSlideIdList
name|ctSlideIdList
init|=
name|document
operator|.
name|getSlideReferences
argument_list|()
decl_stmt|;
if|if
condition|(
name|ctSlideIdList
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|ctSlideIdList
operator|.
name|sizeOfSldIdArray
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|CTSlideIdListEntry
name|ctSlide
init|=
name|ctSlideIdList
operator|.
name|getSldIdArray
argument_list|(
name|i
argument_list|)
decl_stmt|;
comment|// Add the slide
name|PackagePart
name|slidePart
decl_stmt|;
try|try
block|{
name|slidePart
operator|=
name|document
operator|.
name|getSlidePart
argument_list|(
name|ctSlide
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|TikaException
argument_list|(
literal|"Broken OOXML file"
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|XmlException
name|xe
parameter_list|)
block|{
throw|throw
operator|new
name|TikaException
argument_list|(
literal|"Broken OOXML file"
argument_list|,
name|xe
argument_list|)
throw|;
block|}
name|parts
operator|.
name|add
argument_list|(
name|slidePart
argument_list|)
expr_stmt|;
comment|// If it has drawings, return those too
try|try
block|{
for|for
control|(
name|PackageRelationship
name|rel
range|:
name|slidePart
operator|.
name|getRelationshipsByType
argument_list|(
name|XSLFRelation
operator|.
name|VML_DRAWING
operator|.
name|getRelation
argument_list|()
argument_list|)
control|)
block|{
if|if
condition|(
name|rel
operator|.
name|getTargetMode
argument_list|()
operator|==
name|TargetMode
operator|.
name|INTERNAL
condition|)
block|{
name|PackagePartName
name|relName
init|=
name|PackagingURIHelper
operator|.
name|createPartName
argument_list|(
name|rel
operator|.
name|getTargetURI
argument_list|()
argument_list|)
decl_stmt|;
name|parts
operator|.
name|add
argument_list|(
name|rel
operator|.
name|getPackage
argument_list|()
operator|.
name|getPart
argument_list|(
name|relName
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|InvalidFormatException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|TikaException
argument_list|(
literal|"Broken OOXML file"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
return|return
name|parts
return|;
block|}
block|}
end_class

end_unit

