begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|pkg
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|mime
operator|.
name|MediaType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|ParseContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|sax
operator|.
name|OfflineContentHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|utils
operator|.
name|XMLReaderUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|Attributes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|helpers
operator|.
name|DefaultHandler
import|;
end_import

begin_class
specifier|abstract
class|class
name|ZipContainerDetectorBase
block|{
specifier|static
specifier|final
name|MediaType
name|TIKA_OOXML
init|=
name|MediaType
operator|.
name|application
argument_list|(
literal|"x-tika-ooxml"
argument_list|)
decl_stmt|;
specifier|static
specifier|final
name|MediaType
name|DOCX
init|=
name|MediaType
operator|.
name|application
argument_list|(
literal|"vnd.openxmlformats-officedocument.wordprocessingml.document"
argument_list|)
decl_stmt|;
specifier|static
specifier|final
name|MediaType
name|DOCM
init|=
name|MediaType
operator|.
name|application
argument_list|(
literal|"vnd.ms-word.document.macroEnabled.12"
argument_list|)
decl_stmt|;
specifier|static
specifier|final
name|MediaType
name|DOTM
init|=
name|MediaType
operator|.
name|application
argument_list|(
literal|"vnd.ms-word.template.macroenabled.12"
argument_list|)
decl_stmt|;
specifier|static
specifier|final
name|MediaType
name|DOTX
init|=
name|MediaType
operator|.
name|application
argument_list|(
literal|"vnd.openxmlformats-officedocument.wordprocessingml.template"
argument_list|)
decl_stmt|;
specifier|static
specifier|final
name|MediaType
name|PPTX
init|=
name|MediaType
operator|.
name|application
argument_list|(
literal|"vnd.openxmlformats-officedocument.presentationml.presentation"
argument_list|)
decl_stmt|;
specifier|static
specifier|final
name|MediaType
name|PPSM
init|=
name|MediaType
operator|.
name|application
argument_list|(
literal|"vnd.ms-powerpoint.slideshow.macroEnabled.12"
argument_list|)
decl_stmt|;
specifier|static
specifier|final
name|MediaType
name|PPSX
init|=
name|MediaType
operator|.
name|application
argument_list|(
literal|"vnd.openxmlformats-officedocument.presentationml.slideshow"
argument_list|)
decl_stmt|;
specifier|static
specifier|final
name|MediaType
name|PPTM
init|=
name|MediaType
operator|.
name|application
argument_list|(
literal|"vnd.ms-powerpoint.presentation.macroEnabled.12"
argument_list|)
decl_stmt|;
specifier|static
specifier|final
name|MediaType
name|POTM
init|=
name|MediaType
operator|.
name|application
argument_list|(
literal|"vnd.ms-powerpoint.template.macroenabled.12"
argument_list|)
decl_stmt|;
specifier|static
specifier|final
name|MediaType
name|POTX
init|=
name|MediaType
operator|.
name|application
argument_list|(
literal|"vnd.openxmlformats-officedocument.presentationml.template"
argument_list|)
decl_stmt|;
specifier|static
specifier|final
name|MediaType
name|THMX
init|=
name|MediaType
operator|.
name|application
argument_list|(
literal|"vnd.openxmlformats-officedocument"
argument_list|)
decl_stmt|;
specifier|static
specifier|final
name|MediaType
name|XLSB
init|=
name|MediaType
operator|.
name|application
argument_list|(
literal|"vnd.ms-excel.sheet.binary.macroenabled.12"
argument_list|)
decl_stmt|;
specifier|static
specifier|final
name|MediaType
name|XLSX
init|=
name|MediaType
operator|.
name|application
argument_list|(
literal|"vnd.openxmlformats-officedocument.spreadsheetml.sheet"
argument_list|)
decl_stmt|;
specifier|static
specifier|final
name|MediaType
name|XLSM
init|=
name|MediaType
operator|.
name|application
argument_list|(
literal|"vnd.ms-excel.sheet.macroEnabled.12"
argument_list|)
decl_stmt|;
specifier|static
specifier|final
name|MediaType
name|XLTM
init|=
name|MediaType
operator|.
name|application
argument_list|(
literal|"vnd.ms-excel.template.macroenabled.12"
argument_list|)
decl_stmt|;
specifier|static
specifier|final
name|MediaType
name|XLTX
init|=
name|MediaType
operator|.
name|application
argument_list|(
literal|"vnd.openxmlformats-officedocument.spreadsheetml.template"
argument_list|)
decl_stmt|;
specifier|static
specifier|final
name|MediaType
name|XLAM
init|=
name|MediaType
operator|.
name|application
argument_list|(
literal|"vnd.ms-excel.addin.macroEnabled.12"
argument_list|)
decl_stmt|;
specifier|static
specifier|final
name|MediaType
name|XPS
init|=
name|MediaType
operator|.
name|application
argument_list|(
literal|"vnd.ms-xpsdocument"
argument_list|)
decl_stmt|;
specifier|static
specifier|final
name|MediaType
name|BAU
init|=
name|MediaType
operator|.
name|application
argument_list|(
literal|"vnd.openofficeorg.autotext"
argument_list|)
decl_stmt|;
specifier|static
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|OOXML_HINTS
init|=
name|fillSet
argument_list|(
literal|"word/document.xml"
argument_list|,
literal|"_rels/.rels"
argument_list|,
literal|"[Content_Types].xml"
argument_list|,
literal|"ppt/presentation.xml"
argument_list|,
literal|"ppt/slides/slide1.xml"
argument_list|,
literal|"xl/workbook.xml"
argument_list|,
literal|"xl/sharedStrings.xml"
argument_list|,
literal|"xl/worksheets/sheet1.xml"
argument_list|)
decl_stmt|;
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|MediaType
argument_list|>
name|STAR_OFFICE_X
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
static|static
block|{
name|STAR_OFFICE_X
operator|.
name|put
argument_list|(
literal|"application/vnd.sun.xml.writer"
argument_list|,
name|MediaType
operator|.
name|application
argument_list|(
literal|"vnd.sun.xml.writer"
argument_list|)
argument_list|)
expr_stmt|;
name|STAR_OFFICE_X
operator|.
name|put
argument_list|(
literal|"application/vnd.sun.xml.calc"
argument_list|,
name|MediaType
operator|.
name|application
argument_list|(
literal|"vnd.sun.xml.calc"
argument_list|)
argument_list|)
expr_stmt|;
name|STAR_OFFICE_X
operator|.
name|put
argument_list|(
literal|"application/vnd.sun.xml.draw"
argument_list|,
name|MediaType
operator|.
name|application
argument_list|(
literal|"vnd.sun.xml.draw"
argument_list|)
argument_list|)
expr_stmt|;
name|STAR_OFFICE_X
operator|.
name|put
argument_list|(
literal|"application/vnd.sun.xml.impress"
argument_list|,
name|MediaType
operator|.
name|application
argument_list|(
literal|"vnd.sun.xml.impress"
argument_list|)
argument_list|)
expr_stmt|;
name|STAR_OFFICE_X
operator|.
name|put
argument_list|(
literal|"application/vnd.sun.star.configuration-data"
argument_list|,
name|MediaType
operator|.
name|application
argument_list|(
literal|"vnd.openofficeorg.extension"
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|Set
argument_list|<
name|String
argument_list|>
name|fillSet
parameter_list|(
name|String
modifier|...
name|args
parameter_list|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|tmp
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|arg
range|:
name|args
control|)
block|{
name|tmp
operator|.
name|add
argument_list|(
name|arg
argument_list|)
expr_stmt|;
block|}
return|return
name|Collections
operator|.
name|unmodifiableSet
argument_list|(
name|tmp
argument_list|)
return|;
block|}
specifier|static
name|MediaType
name|detectJar
parameter_list|(
name|Set
argument_list|<
name|String
argument_list|>
name|entryNames
parameter_list|)
block|{
if|if
condition|(
name|entryNames
operator|.
name|contains
argument_list|(
literal|"META-INF/MANIFEST.MF"
argument_list|)
condition|)
block|{
comment|// It's a Jar file, or something based on Jar
comment|// Is it an Android APK?
if|if
condition|(
name|entryNames
operator|.
name|contains
argument_list|(
literal|"AndroidManifest.xml"
argument_list|)
condition|)
block|{
return|return
name|MediaType
operator|.
name|application
argument_list|(
literal|"vnd.android.package-archive"
argument_list|)
return|;
block|}
comment|// Check for WAR and EAR
if|if
condition|(
name|entryNames
operator|.
name|contains
argument_list|(
literal|"WEB-INF/"
argument_list|)
condition|)
block|{
return|return
name|MediaType
operator|.
name|application
argument_list|(
literal|"x-tika-java-web-archive"
argument_list|)
return|;
block|}
if|if
condition|(
name|entryNames
operator|.
name|contains
argument_list|(
literal|"META-INF/application.xml"
argument_list|)
condition|)
block|{
return|return
name|MediaType
operator|.
name|application
argument_list|(
literal|"x-tika-java-enterprise-archive"
argument_list|)
return|;
block|}
comment|// Looks like a regular Jar Archive
return|return
name|MediaType
operator|.
name|application
argument_list|(
literal|"java-archive"
argument_list|)
return|;
block|}
else|else
block|{
comment|// Some Android APKs miss the default Manifest
if|if
condition|(
name|entryNames
operator|.
name|contains
argument_list|(
literal|"AndroidManifest.xml"
argument_list|)
condition|)
block|{
return|return
name|MediaType
operator|.
name|application
argument_list|(
literal|"vnd.android.package-archive"
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
block|}
specifier|static
name|MediaType
name|detectKmz
parameter_list|(
name|Set
argument_list|<
name|String
argument_list|>
name|entryFileNames
parameter_list|)
block|{
comment|//look for a single kml at the main level
name|boolean
name|kmlFound
init|=
literal|false
decl_stmt|;
for|for
control|(
name|String
name|entryFileName
range|:
name|entryFileNames
control|)
block|{
if|if
condition|(
name|entryFileName
operator|.
name|indexOf
argument_list|(
literal|'/'
argument_list|)
operator|!=
operator|-
literal|1
operator|||
name|entryFileName
operator|.
name|indexOf
argument_list|(
literal|'\\'
argument_list|)
operator|!=
operator|-
literal|1
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|entryFileName
operator|.
name|endsWith
argument_list|(
literal|".kml"
argument_list|)
operator|&&
operator|!
name|kmlFound
condition|)
block|{
name|kmlFound
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
if|if
condition|(
name|kmlFound
condition|)
block|{
return|return
name|MediaType
operator|.
name|application
argument_list|(
literal|"vnd.google-earth.kmz"
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
comment|/**      * To be considered as an IPA file, it needs to match all of these      */
specifier|private
specifier|static
name|HashSet
argument_list|<
name|Pattern
argument_list|>
name|ipaEntryPatterns
init|=
operator|new
name|HashSet
argument_list|<
name|Pattern
argument_list|>
argument_list|()
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|6545295886322115362L
decl_stmt|;
block|{
name|add
argument_list|(
name|Pattern
operator|.
name|compile
argument_list|(
literal|"^Payload/$"
argument_list|)
argument_list|)
expr_stmt|;
name|add
argument_list|(
name|Pattern
operator|.
name|compile
argument_list|(
literal|"^Payload/.*\\.app/$"
argument_list|)
argument_list|)
expr_stmt|;
name|add
argument_list|(
name|Pattern
operator|.
name|compile
argument_list|(
literal|"^Payload/.*\\.app/_CodeSignature/$"
argument_list|)
argument_list|)
expr_stmt|;
name|add
argument_list|(
name|Pattern
operator|.
name|compile
argument_list|(
literal|"^Payload/.*\\.app/_CodeSignature/CodeResources$"
argument_list|)
argument_list|)
expr_stmt|;
name|add
argument_list|(
name|Pattern
operator|.
name|compile
argument_list|(
literal|"^Payload/.*\\.app/Info\\.plist$"
argument_list|)
argument_list|)
expr_stmt|;
name|add
argument_list|(
name|Pattern
operator|.
name|compile
argument_list|(
literal|"^Payload/.*\\.app/PkgInfo$"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|static
name|MediaType
name|detectIpa
parameter_list|(
name|Set
argument_list|<
name|String
argument_list|>
name|entryNames
parameter_list|)
block|{
comment|// Note - consider generalising this logic, if another format needs many regexp matching
name|Set
argument_list|<
name|Pattern
argument_list|>
name|tmpPatterns
init|=
operator|(
name|Set
argument_list|<
name|Pattern
argument_list|>
operator|)
name|ipaEntryPatterns
operator|.
name|clone
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|entryName
range|:
name|entryNames
control|)
block|{
name|Iterator
argument_list|<
name|Pattern
argument_list|>
name|ip
init|=
name|tmpPatterns
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|ip
operator|.
name|hasNext
argument_list|()
condition|)
block|{
if|if
condition|(
name|ip
operator|.
name|next
argument_list|()
operator|.
name|matcher
argument_list|(
name|entryName
argument_list|)
operator|.
name|matches
argument_list|()
condition|)
block|{
name|ip
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|tmpPatterns
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// We've found everything we need to find
return|return
name|MediaType
operator|.
name|application
argument_list|(
literal|"x-itunes-ipa"
argument_list|)
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
comment|//parse the META-INF/content.xml file
specifier|static
name|MediaType
name|detectStarOfficeX
parameter_list|(
name|InputStream
name|is
parameter_list|)
block|{
name|StarOfficeXHandler
name|handler
init|=
operator|new
name|StarOfficeXHandler
argument_list|()
decl_stmt|;
try|try
block|{
name|XMLReaderUtils
operator|.
name|parseSAX
argument_list|(
name|is
argument_list|,
operator|new
name|OfflineContentHandler
argument_list|(
name|handler
argument_list|)
argument_list|,
operator|new
name|ParseContext
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SecurityException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{         }
return|return
name|handler
operator|.
name|mediaType
return|;
block|}
specifier|private
specifier|static
class|class
name|StarOfficeXHandler
extends|extends
name|DefaultHandler
block|{
specifier|private
name|MediaType
name|mediaType
init|=
literal|null
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|startElement
parameter_list|(
name|String
name|uri
parameter_list|,
name|String
name|localName
parameter_list|,
name|String
name|name
parameter_list|,
name|Attributes
name|attrs
parameter_list|)
throws|throws
name|SAXException
block|{
if|if
condition|(
operator|!
literal|"file-entry"
operator|.
name|equals
argument_list|(
name|localName
argument_list|)
condition|)
block|{
return|return;
block|}
name|String
name|mediaTypeString
init|=
literal|null
decl_stmt|;
name|String
name|fullPath
init|=
literal|null
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|attrs
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|String
name|attrName
init|=
name|attrs
operator|.
name|getLocalName
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|attrName
operator|.
name|equals
argument_list|(
literal|"media-type"
argument_list|)
condition|)
block|{
name|mediaTypeString
operator|=
name|attrs
operator|.
name|getValue
argument_list|(
name|i
argument_list|)
expr_stmt|;
if|if
condition|(
name|STAR_OFFICE_X
operator|.
name|containsKey
argument_list|(
name|mediaTypeString
argument_list|)
condition|)
block|{
name|mediaType
operator|=
name|STAR_OFFICE_X
operator|.
name|get
argument_list|(
name|mediaTypeString
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|StoppingEarlyException
argument_list|()
throw|;
block|}
block|}
elseif|else
if|if
condition|(
name|attrName
operator|.
name|equals
argument_list|(
literal|"full-path"
argument_list|)
condition|)
block|{
name|fullPath
operator|=
name|attrs
operator|.
name|getValue
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
literal|""
operator|.
name|equals
argument_list|(
name|mediaTypeString
argument_list|)
operator|&&
literal|"/"
operator|.
name|equals
argument_list|(
name|fullPath
argument_list|)
condition|)
block|{
name|mediaType
operator|=
name|BAU
expr_stmt|;
throw|throw
operator|new
name|StoppingEarlyException
argument_list|()
throw|;
block|}
block|}
block|}
comment|/**      * sentinel exception to stop parsing xml once target is found      */
specifier|static
class|class
name|StoppingEarlyException
extends|extends
name|SAXException
block|{      }
block|}
end_class

end_unit

