begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|ner
operator|.
name|opennlp
package|;
end_package

begin_import
import|import
name|opennlp
operator|.
name|tools
operator|.
name|namefind
operator|.
name|NameFinderME
import|;
end_import

begin_import
import|import
name|opennlp
operator|.
name|tools
operator|.
name|namefind
operator|.
name|TokenNameFinderModel
import|;
end_import

begin_import
import|import
name|opennlp
operator|.
name|tools
operator|.
name|util
operator|.
name|Span
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|ner
operator|.
name|NERecogniser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_comment
comment|/**  * An implementation of {@link NERecogniser} that finds names in text using Open NLP Model.  * This implementation works with only one entity type. For chain this name finder instances,  * see {@link OpenNLPNERecogniser}  */
end_comment

begin_class
specifier|public
class|class
name|OpenNLPNameFinder
implements|implements
name|NERecogniser
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|OpenNLPNameFinder
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|String
name|nameType
decl_stmt|;
specifier|private
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|nameTypes
decl_stmt|;
specifier|private
name|NameFinderME
name|nameFinder
decl_stmt|;
specifier|private
name|boolean
name|available
decl_stmt|;
comment|/**      * Creates OpenNLP name finder      * @param nameType the entity type recognised by the given NER model      * @param nerModelPath path to ner model      */
specifier|public
name|OpenNLPNameFinder
parameter_list|(
name|String
name|nameType
parameter_list|,
name|String
name|nerModelPath
parameter_list|)
block|{
name|this
operator|.
name|nameTypes
operator|=
name|Collections
operator|.
name|singleton
argument_list|(
name|nameType
argument_list|)
expr_stmt|;
name|this
operator|.
name|nameType
operator|=
name|nameType
expr_stmt|;
name|InputStream
name|nerModelStream
init|=
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
operator|.
name|getResourceAsStream
argument_list|(
name|nerModelPath
argument_list|)
decl_stmt|;
try|try
block|{
if|if
condition|(
name|nerModelStream
operator|!=
literal|null
condition|)
block|{
name|TokenNameFinderModel
name|model
init|=
operator|new
name|TokenNameFinderModel
argument_list|(
name|nerModelStream
argument_list|)
decl_stmt|;
name|this
operator|.
name|nameFinder
operator|=
operator|new
name|NameFinderME
argument_list|(
name|model
argument_list|)
expr_stmt|;
name|this
operator|.
name|available
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Couldn't find model from {} using class loader"
argument_list|,
name|nerModelPath
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|closeQuietly
argument_list|(
name|nerModelStream
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"{} NER : Available for service ? {}"
argument_list|,
name|nameType
argument_list|,
name|available
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isAvailable
parameter_list|()
block|{
return|return
name|available
return|;
block|}
annotation|@
name|Override
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|getEntityTypes
parameter_list|()
block|{
return|return
name|nameTypes
return|;
block|}
specifier|public
specifier|static
name|String
index|[]
name|tokenize
parameter_list|(
name|String
name|text
parameter_list|)
block|{
comment|//NOTE: replace this with a NLP tokenizer tool
comment|//clean + split
return|return
name|text
operator|.
name|trim
argument_list|()
operator|.
name|replaceAll
argument_list|(
literal|"(\\s\\s+)"
argument_list|,
literal|" "
argument_list|)
operator|.
name|split
argument_list|(
literal|"\\s"
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
specifier|synchronized
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|recognise
parameter_list|(
name|String
name|text
parameter_list|)
block|{
name|String
index|[]
name|tokens
init|=
name|tokenize
argument_list|(
name|text
argument_list|)
decl_stmt|;
return|return
name|findNames
argument_list|(
name|tokens
argument_list|)
return|;
block|}
comment|/**      * finds names from given array of tokens      * @param tokens the tokens array      * @return map of EntityType -> set of entity names      */
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|findNames
parameter_list|(
name|String
index|[]
name|tokens
parameter_list|)
block|{
name|Span
index|[]
name|nameSpans
init|=
name|nameFinder
operator|.
name|find
argument_list|(
name|tokens
argument_list|)
decl_stmt|;
name|String
index|[]
name|names
init|=
name|Span
operator|.
name|spansToStrings
argument_list|(
name|nameSpans
argument_list|,
name|tokens
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|result
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|names
operator|!=
literal|null
operator|&&
name|names
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|result
operator|.
name|put
argument_list|(
name|nameType
argument_list|,
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|names
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|nameFinder
operator|.
name|clearAdaptiveData
argument_list|()
expr_stmt|;
return|return
name|result
return|;
block|}
block|}
end_class

end_unit

