begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|html
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|MalformedURLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|extractor
operator|.
name|EmbeddedDocumentExtractor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|extractor
operator|.
name|EmbeddedDocumentUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|metadata
operator|.
name|HTML
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|metadata
operator|.
name|Metadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|metadata
operator|.
name|TikaCoreProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|mime
operator|.
name|MediaType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|ParseContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|utils
operator|.
name|DataURIScheme
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|utils
operator|.
name|DataURISchemeParseException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|utils
operator|.
name|DataURISchemeUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|sax
operator|.
name|TextContentHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|sax
operator|.
name|XHTMLContentHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|Attributes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|ContentHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|helpers
operator|.
name|AttributesImpl
import|;
end_import

begin_class
class|class
name|HtmlHandler
extends|extends
name|TextContentHandler
block|{
comment|// List of attributes that need to be resolved.
specifier|private
specifier|static
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|URI_ATTRIBUTES
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"src"
argument_list|,
literal|"href"
argument_list|,
literal|"longdesc"
argument_list|,
literal|"cite"
argument_list|)
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Pattern
name|ICBM
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"\\s*(-?\\d+\\.\\d+)[,\\s]+(-?\\d+\\.\\d+)\\s*"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Attributes
name|EMPTY_ATTS
init|=
operator|new
name|AttributesImpl
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|HtmlMapper
name|mapper
decl_stmt|;
specifier|private
specifier|final
name|XHTMLContentHandler
name|xhtml
decl_stmt|;
specifier|private
specifier|final
name|Metadata
name|metadata
decl_stmt|;
specifier|private
specifier|final
name|ParseContext
name|context
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|extractScripts
decl_stmt|;
specifier|private
specifier|final
name|StringBuilder
name|title
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|DataURISchemeUtil
name|dataURISchemeUtil
init|=
operator|new
name|DataURISchemeUtil
argument_list|()
decl_stmt|;
specifier|private
name|int
name|bodyLevel
init|=
literal|0
decl_stmt|;
specifier|private
name|int
name|discardLevel
init|=
literal|0
decl_stmt|;
specifier|private
name|int
name|titleLevel
init|=
literal|0
decl_stmt|;
specifier|private
name|int
name|scriptLevel
init|=
literal|0
decl_stmt|;
specifier|private
name|Attributes
name|scriptAtts
init|=
name|EMPTY_ATTS
decl_stmt|;
comment|//attributes from outermost script element
specifier|private
specifier|final
name|StringBuilder
name|script
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
specifier|private
name|boolean
name|isTitleSetToMetadata
init|=
literal|false
decl_stmt|;
specifier|private
name|HtmlHandler
parameter_list|(
name|HtmlMapper
name|mapper
parameter_list|,
name|XHTMLContentHandler
name|xhtml
parameter_list|,
name|Metadata
name|metadata
parameter_list|,
name|ParseContext
name|context
parameter_list|,
name|boolean
name|extractScripts
parameter_list|)
block|{
name|super
argument_list|(
name|xhtml
argument_list|)
expr_stmt|;
name|this
operator|.
name|mapper
operator|=
name|mapper
expr_stmt|;
name|this
operator|.
name|xhtml
operator|=
name|xhtml
expr_stmt|;
name|this
operator|.
name|metadata
operator|=
name|metadata
expr_stmt|;
name|this
operator|.
name|context
operator|=
name|context
expr_stmt|;
name|this
operator|.
name|extractScripts
operator|=
name|extractScripts
expr_stmt|;
comment|// Try to determine the default base URL, if one has not been given
if|if
condition|(
name|metadata
operator|.
name|get
argument_list|(
name|Metadata
operator|.
name|CONTENT_LOCATION
argument_list|)
operator|==
literal|null
condition|)
block|{
name|String
name|name
init|=
name|metadata
operator|.
name|get
argument_list|(
name|TikaCoreProperties
operator|.
name|RESOURCE_NAME_KEY
argument_list|)
decl_stmt|;
if|if
condition|(
name|name
operator|!=
literal|null
condition|)
block|{
name|name
operator|=
name|name
operator|.
name|trim
argument_list|()
expr_stmt|;
try|try
block|{
operator|new
name|URL
argument_list|(
name|name
argument_list|)
expr_stmt|;
comment|// test URL format
name|metadata
operator|.
name|set
argument_list|(
name|Metadata
operator|.
name|CONTENT_LOCATION
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MalformedURLException
name|e
parameter_list|)
block|{
comment|// The resource name is not a valid URL, ignore it
block|}
block|}
block|}
block|}
specifier|public
name|HtmlHandler
parameter_list|(
name|HtmlMapper
name|mapper
parameter_list|,
name|ContentHandler
name|handler
parameter_list|,
name|Metadata
name|metadata
parameter_list|,
name|ParseContext
name|context
parameter_list|,
name|boolean
name|extractScripts
parameter_list|)
block|{
name|this
argument_list|(
name|mapper
argument_list|,
operator|new
name|XHTMLContentHandler
argument_list|(
name|handler
argument_list|,
name|metadata
argument_list|)
argument_list|,
name|metadata
argument_list|,
name|context
argument_list|,
name|extractScripts
argument_list|)
expr_stmt|;
block|}
comment|/**      * @deprecated use {@link HtmlHandler#HtmlHandler(HtmlMapper, ContentHandler, Metadata, ParseContext, boolean)}      * @param mapper      * @param handler      * @param metadata      */
annotation|@
name|Deprecated
specifier|public
name|HtmlHandler
parameter_list|(
name|HtmlMapper
name|mapper
parameter_list|,
name|ContentHandler
name|handler
parameter_list|,
name|Metadata
name|metadata
parameter_list|)
block|{
name|this
argument_list|(
name|mapper
argument_list|,
operator|new
name|XHTMLContentHandler
argument_list|(
name|handler
argument_list|,
name|metadata
argument_list|)
argument_list|,
name|metadata
argument_list|,
operator|new
name|ParseContext
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|startElement
parameter_list|(
name|String
name|uri
parameter_list|,
name|String
name|local
parameter_list|,
name|String
name|name
parameter_list|,
name|Attributes
name|atts
parameter_list|)
throws|throws
name|SAXException
block|{
if|if
condition|(
literal|"HTML"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
operator|&&
name|atts
operator|.
name|getValue
argument_list|(
literal|"lang"
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|metadata
operator|.
name|set
argument_list|(
name|Metadata
operator|.
name|CONTENT_LANGUAGE
argument_list|,
name|atts
operator|.
name|getValue
argument_list|(
literal|"lang"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
literal|"SCRIPT"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|scriptLevel
operator|++
expr_stmt|;
block|}
if|if
condition|(
literal|"TITLE"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
operator|||
name|titleLevel
operator|>
literal|0
condition|)
block|{
name|titleLevel
operator|++
expr_stmt|;
block|}
if|if
condition|(
literal|"BODY"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
operator|||
operator|(
literal|"FRAMESET"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
operator|)
operator|||
name|bodyLevel
operator|>
literal|0
condition|)
block|{
name|bodyLevel
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|mapper
operator|.
name|isDiscardElement
argument_list|(
name|name
argument_list|)
operator|||
name|discardLevel
operator|>
literal|0
condition|)
block|{
name|discardLevel
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|bodyLevel
operator|==
literal|0
operator|&&
name|discardLevel
operator|==
literal|0
condition|)
block|{
if|if
condition|(
literal|"META"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
operator|&&
name|atts
operator|.
name|getValue
argument_list|(
literal|"content"
argument_list|)
operator|!=
literal|null
condition|)
block|{
comment|// TIKA-478: For cases where we have either a name or
comment|// "http-equiv", assume that XHTMLContentHandler will emit
comment|// these in the<head>, thus passing them through safely.
if|if
condition|(
name|atts
operator|.
name|getValue
argument_list|(
literal|"http-equiv"
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|addHtmlMetadata
argument_list|(
name|atts
operator|.
name|getValue
argument_list|(
literal|"http-equiv"
argument_list|)
argument_list|,
name|atts
operator|.
name|getValue
argument_list|(
literal|"content"
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|atts
operator|.
name|getValue
argument_list|(
literal|"name"
argument_list|)
operator|!=
literal|null
condition|)
block|{
comment|// Record the meta tag in the metadata
name|addHtmlMetadata
argument_list|(
name|atts
operator|.
name|getValue
argument_list|(
literal|"name"
argument_list|)
argument_list|,
name|atts
operator|.
name|getValue
argument_list|(
literal|"content"
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|atts
operator|.
name|getValue
argument_list|(
literal|"property"
argument_list|)
operator|!=
literal|null
condition|)
block|{
comment|// TIKA-983: Handle<meta property="og:xxx" content="yyy" /> tags
name|metadata
operator|.
name|add
argument_list|(
name|atts
operator|.
name|getValue
argument_list|(
literal|"property"
argument_list|)
argument_list|,
name|atts
operator|.
name|getValue
argument_list|(
literal|"content"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
literal|"BASE"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
operator|&&
name|atts
operator|.
name|getValue
argument_list|(
literal|"href"
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|startElementWithSafeAttributes
argument_list|(
literal|"base"
argument_list|,
name|atts
argument_list|)
expr_stmt|;
name|xhtml
operator|.
name|endElement
argument_list|(
literal|"base"
argument_list|)
expr_stmt|;
name|metadata
operator|.
name|set
argument_list|(
name|Metadata
operator|.
name|CONTENT_LOCATION
argument_list|,
name|resolve
argument_list|(
name|atts
operator|.
name|getValue
argument_list|(
literal|"href"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"LINK"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|startElementWithSafeAttributes
argument_list|(
literal|"link"
argument_list|,
name|atts
argument_list|)
expr_stmt|;
name|xhtml
operator|.
name|endElement
argument_list|(
literal|"link"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"SCRIPT"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|scriptAtts
operator|=
name|atts
expr_stmt|;
block|}
block|}
if|if
condition|(
name|bodyLevel
operator|>
literal|0
operator|&&
name|discardLevel
operator|==
literal|0
condition|)
block|{
name|String
name|safe
init|=
name|mapper
operator|.
name|mapSafeElement
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|safe
operator|!=
literal|null
condition|)
block|{
name|startElementWithSafeAttributes
argument_list|(
name|safe
argument_list|,
name|atts
argument_list|)
expr_stmt|;
block|}
block|}
name|title
operator|.
name|setLength
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|String
name|value
init|=
name|atts
operator|.
name|getValue
argument_list|(
literal|"src"
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
operator|&&
name|value
operator|.
name|startsWith
argument_list|(
literal|"data:"
argument_list|)
condition|)
block|{
name|handleDataURIScheme
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Adds a metadata setting from the HTML<head/> to the Tika metadata      * object. The name and value are normalized where possible.      */
specifier|private
name|void
name|addHtmlMetadata
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|value
parameter_list|)
block|{
if|if
condition|(
name|name
operator|==
literal|null
operator|||
name|value
operator|==
literal|null
condition|)
block|{
comment|// ignore
block|}
elseif|else
if|if
condition|(
name|name
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"ICBM"
argument_list|)
condition|)
block|{
name|Matcher
name|m
init|=
name|ICBM
operator|.
name|matcher
argument_list|(
name|value
argument_list|)
decl_stmt|;
if|if
condition|(
name|m
operator|.
name|matches
argument_list|()
condition|)
block|{
name|metadata
operator|.
name|set
argument_list|(
literal|"ICBM"
argument_list|,
name|m
operator|.
name|group
argument_list|(
literal|1
argument_list|)
operator|+
literal|", "
operator|+
name|m
operator|.
name|group
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|metadata
operator|.
name|set
argument_list|(
name|Metadata
operator|.
name|LATITUDE
argument_list|,
name|m
operator|.
name|group
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|metadata
operator|.
name|set
argument_list|(
name|Metadata
operator|.
name|LONGITUDE
argument_list|,
name|m
operator|.
name|group
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|metadata
operator|.
name|set
argument_list|(
literal|"ICBM"
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|name
operator|.
name|equalsIgnoreCase
argument_list|(
name|Metadata
operator|.
name|CONTENT_TYPE
argument_list|)
condition|)
block|{
comment|//don't overwrite Metadata.CONTENT_TYPE!
name|MediaType
name|type
init|=
name|MediaType
operator|.
name|parse
argument_list|(
name|value
argument_list|)
decl_stmt|;
if|if
condition|(
name|type
operator|!=
literal|null
condition|)
block|{
name|metadata
operator|.
name|set
argument_list|(
name|TikaCoreProperties
operator|.
name|CONTENT_TYPE_HINT
argument_list|,
name|type
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|metadata
operator|.
name|set
argument_list|(
name|TikaCoreProperties
operator|.
name|CONTENT_TYPE_HINT
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|metadata
operator|.
name|add
argument_list|(
name|name
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|startElementWithSafeAttributes
parameter_list|(
name|String
name|name
parameter_list|,
name|Attributes
name|atts
parameter_list|)
throws|throws
name|SAXException
block|{
if|if
condition|(
name|atts
operator|.
name|getLength
argument_list|()
operator|==
literal|0
condition|)
block|{
name|xhtml
operator|.
name|startElement
argument_list|(
name|name
argument_list|)
expr_stmt|;
return|return;
block|}
name|boolean
name|isObject
init|=
name|name
operator|.
name|equals
argument_list|(
literal|"object"
argument_list|)
decl_stmt|;
name|String
name|codebase
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|isObject
condition|)
block|{
name|codebase
operator|=
name|atts
operator|.
name|getValue
argument_list|(
literal|""
argument_list|,
literal|"codebase"
argument_list|)
expr_stmt|;
if|if
condition|(
name|codebase
operator|!=
literal|null
condition|)
block|{
name|codebase
operator|=
name|resolve
argument_list|(
name|codebase
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|codebase
operator|=
name|metadata
operator|.
name|get
argument_list|(
name|Metadata
operator|.
name|CONTENT_LOCATION
argument_list|)
expr_stmt|;
block|}
block|}
name|AttributesImpl
name|newAttributes
init|=
operator|new
name|AttributesImpl
argument_list|(
name|atts
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|att
init|=
literal|0
init|;
name|att
operator|<
name|newAttributes
operator|.
name|getLength
argument_list|()
condition|;
name|att
operator|++
control|)
block|{
name|String
name|attrName
init|=
name|newAttributes
operator|.
name|getLocalName
argument_list|(
name|att
argument_list|)
decl_stmt|;
name|String
name|normAttrName
init|=
name|mapper
operator|.
name|mapSafeAttribute
argument_list|(
name|name
argument_list|,
name|attrName
argument_list|)
decl_stmt|;
if|if
condition|(
name|normAttrName
operator|==
literal|null
condition|)
block|{
name|newAttributes
operator|.
name|removeAttribute
argument_list|(
name|att
argument_list|)
expr_stmt|;
name|att
operator|--
expr_stmt|;
block|}
else|else
block|{
comment|// We have a remapped attribute name, so set it as it might have changed.
name|newAttributes
operator|.
name|setLocalName
argument_list|(
name|att
argument_list|,
name|normAttrName
argument_list|)
expr_stmt|;
comment|// And resolve relative links. Eventually this should be pushed
comment|// into the HtmlMapper code.
if|if
condition|(
name|URI_ATTRIBUTES
operator|.
name|contains
argument_list|(
name|normAttrName
argument_list|)
condition|)
block|{
comment|//if this is a src="data: " element,
comment|//we've handled that as an embedded file, don't include the full thing
comment|//here
if|if
condition|(
name|normAttrName
operator|.
name|equals
argument_list|(
literal|"src"
argument_list|)
condition|)
block|{
name|String
name|v
init|=
name|newAttributes
operator|.
name|getValue
argument_list|(
name|att
argument_list|)
decl_stmt|;
if|if
condition|(
name|v
operator|.
name|startsWith
argument_list|(
literal|"data:"
argument_list|)
condition|)
block|{
name|newAttributes
operator|.
name|setValue
argument_list|(
name|att
argument_list|,
literal|"data:"
argument_list|)
expr_stmt|;
block|}
block|}
name|newAttributes
operator|.
name|setValue
argument_list|(
name|att
argument_list|,
name|resolve
argument_list|(
name|newAttributes
operator|.
name|getValue
argument_list|(
name|att
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|isObject
operator|&&
literal|"codebase"
operator|.
name|equals
argument_list|(
name|normAttrName
argument_list|)
condition|)
block|{
name|newAttributes
operator|.
name|setValue
argument_list|(
name|att
argument_list|,
name|codebase
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|isObject
operator|&&
operator|(
literal|"data"
operator|.
name|equals
argument_list|(
name|normAttrName
argument_list|)
operator|||
literal|"classid"
operator|.
name|equals
argument_list|(
name|normAttrName
argument_list|)
operator|)
condition|)
block|{
name|newAttributes
operator|.
name|setValue
argument_list|(
name|att
argument_list|,
name|resolve
argument_list|(
name|codebase
argument_list|,
name|newAttributes
operator|.
name|getValue
argument_list|(
name|att
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
literal|"img"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
operator|&&
name|newAttributes
operator|.
name|getValue
argument_list|(
literal|""
argument_list|,
literal|"alt"
argument_list|)
operator|==
literal|null
condition|)
block|{
name|newAttributes
operator|.
name|addAttribute
argument_list|(
literal|""
argument_list|,
literal|"alt"
argument_list|,
literal|"alt"
argument_list|,
literal|"CDATA"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
block|}
name|xhtml
operator|.
name|startElement
argument_list|(
name|name
argument_list|,
name|newAttributes
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|endElement
parameter_list|(
name|String
name|uri
parameter_list|,
name|String
name|local
parameter_list|,
name|String
name|name
parameter_list|)
throws|throws
name|SAXException
block|{
if|if
condition|(
literal|"SCRIPT"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|scriptLevel
operator|--
expr_stmt|;
if|if
condition|(
name|scriptLevel
operator|==
literal|0
condition|)
block|{
if|if
condition|(
name|scriptAtts
operator|.
name|getLength
argument_list|()
operator|>
literal|0
condition|)
block|{
name|startElementWithSafeAttributes
argument_list|(
literal|"script"
argument_list|,
name|scriptAtts
argument_list|)
expr_stmt|;
name|xhtml
operator|.
name|endElement
argument_list|(
literal|"script"
argument_list|)
expr_stmt|;
block|}
name|scriptAtts
operator|=
name|EMPTY_ATTS
expr_stmt|;
if|if
condition|(
name|extractScripts
condition|)
block|{
name|writeScript
argument_list|()
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|bodyLevel
operator|>
literal|0
operator|&&
name|discardLevel
operator|==
literal|0
condition|)
block|{
name|String
name|safe
init|=
name|mapper
operator|.
name|mapSafeElement
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|safe
operator|!=
literal|null
condition|)
block|{
name|xhtml
operator|.
name|endElement
argument_list|(
name|safe
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|XHTMLContentHandler
operator|.
name|ENDLINE
operator|.
name|contains
argument_list|(
name|name
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|ENGLISH
argument_list|)
argument_list|)
condition|)
block|{
comment|// TIKA-343: Replace closing block tags (and<br/>) with a
comment|// newline unless the HtmlMapper above has already mapped
comment|// them to something else
name|xhtml
operator|.
name|newline
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|titleLevel
operator|>
literal|0
condition|)
block|{
name|titleLevel
operator|--
expr_stmt|;
if|if
condition|(
name|titleLevel
operator|==
literal|0
operator|&&
operator|!
name|isTitleSetToMetadata
condition|)
block|{
name|metadata
operator|.
name|set
argument_list|(
name|TikaCoreProperties
operator|.
name|TITLE
argument_list|,
name|title
operator|.
name|toString
argument_list|()
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
name|isTitleSetToMetadata
operator|=
literal|true
expr_stmt|;
block|}
block|}
if|if
condition|(
name|bodyLevel
operator|>
literal|0
condition|)
block|{
name|bodyLevel
operator|--
expr_stmt|;
block|}
if|if
condition|(
name|discardLevel
operator|>
literal|0
condition|)
block|{
name|discardLevel
operator|--
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|handleDataURIScheme
parameter_list|(
name|String
name|string
parameter_list|)
throws|throws
name|SAXException
block|{
name|DataURIScheme
name|dataURIScheme
init|=
literal|null
decl_stmt|;
try|try
block|{
name|dataURIScheme
operator|=
name|dataURISchemeUtil
operator|.
name|parse
argument_list|(
name|string
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DataURISchemeParseException
name|e
parameter_list|)
block|{
comment|//swallow
return|return;
block|}
comment|//do anything with attrs?
name|Metadata
name|m
init|=
operator|new
name|Metadata
argument_list|()
decl_stmt|;
name|m
operator|.
name|set
argument_list|(
name|TikaCoreProperties
operator|.
name|EMBEDDED_RESOURCE_TYPE
argument_list|,
name|TikaCoreProperties
operator|.
name|EmbeddedResourceType
operator|.
name|INLINE
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|dataURIScheme
operator|.
name|getMediaType
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|m
operator|.
name|set
argument_list|(
name|Metadata
operator|.
name|CONTENT_TYPE
argument_list|,
name|dataURIScheme
operator|.
name|getMediaType
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|EmbeddedDocumentExtractor
name|embeddedDocumentExtractor
init|=
name|EmbeddedDocumentUtil
operator|.
name|getEmbeddedDocumentExtractor
argument_list|(
name|context
argument_list|)
decl_stmt|;
if|if
condition|(
name|embeddedDocumentExtractor
operator|.
name|shouldParseEmbedded
argument_list|(
name|m
argument_list|)
condition|)
block|{
try|try
init|(
name|InputStream
name|stream
init|=
name|dataURIScheme
operator|.
name|getInputStream
argument_list|()
init|)
block|{
name|embeddedDocumentExtractor
operator|.
name|parseEmbedded
argument_list|(
name|stream
argument_list|,
name|xhtml
argument_list|,
name|m
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|EmbeddedDocumentUtil
operator|.
name|recordEmbeddedStreamException
argument_list|(
name|e
argument_list|,
name|metadata
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|writeScript
parameter_list|()
throws|throws
name|SAXException
block|{
comment|//don't write an attached macro if there is no content
comment|//we may want to revisit this behavior
if|if
condition|(
name|script
operator|.
name|toString
argument_list|()
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return;
block|}
comment|//do anything with attrs?
name|Metadata
name|m
init|=
operator|new
name|Metadata
argument_list|()
decl_stmt|;
name|m
operator|.
name|set
argument_list|(
name|TikaCoreProperties
operator|.
name|EMBEDDED_RESOURCE_TYPE
argument_list|,
name|TikaCoreProperties
operator|.
name|EmbeddedResourceType
operator|.
name|MACRO
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|src
init|=
name|scriptAtts
operator|.
name|getValue
argument_list|(
literal|"src"
argument_list|)
decl_stmt|;
if|if
condition|(
name|src
operator|!=
literal|null
condition|)
block|{
name|m
operator|.
name|set
argument_list|(
name|HTML
operator|.
name|SCRIPT_SOURCE
argument_list|,
name|src
argument_list|)
expr_stmt|;
block|}
name|EmbeddedDocumentExtractor
name|embeddedDocumentExtractor
init|=
name|EmbeddedDocumentUtil
operator|.
name|getEmbeddedDocumentExtractor
argument_list|(
name|context
argument_list|)
decl_stmt|;
comment|//try to scrape dataURISchemes from javascript
name|List
argument_list|<
name|DataURIScheme
argument_list|>
name|dataURISchemes
init|=
name|dataURISchemeUtil
operator|.
name|extract
argument_list|(
name|script
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|DataURIScheme
name|dataURIScheme
range|:
name|dataURISchemes
control|)
block|{
name|Metadata
name|dataUriMetadata
init|=
operator|new
name|Metadata
argument_list|()
decl_stmt|;
name|dataUriMetadata
operator|.
name|set
argument_list|(
name|TikaCoreProperties
operator|.
name|EMBEDDED_RESOURCE_TYPE
argument_list|,
name|TikaCoreProperties
operator|.
name|EmbeddedResourceType
operator|.
name|INLINE
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|dataUriMetadata
operator|.
name|set
argument_list|(
name|Metadata
operator|.
name|CONTENT_TYPE
argument_list|,
name|dataURIScheme
operator|.
name|getMediaType
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|embeddedDocumentExtractor
operator|.
name|shouldParseEmbedded
argument_list|(
name|dataUriMetadata
argument_list|)
condition|)
block|{
try|try
init|(
name|InputStream
name|dataURISchemeInputStream
init|=
name|dataURIScheme
operator|.
name|getInputStream
argument_list|()
init|)
block|{
name|embeddedDocumentExtractor
operator|.
name|parseEmbedded
argument_list|(
name|dataURISchemeInputStream
argument_list|,
name|xhtml
argument_list|,
name|dataUriMetadata
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|//swallow
block|}
block|}
block|}
try|try
init|(
name|InputStream
name|stream
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|script
operator|.
name|toString
argument_list|()
operator|.
name|getBytes
argument_list|(
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
argument_list|)
init|)
block|{
name|embeddedDocumentExtractor
operator|.
name|parseEmbedded
argument_list|(
name|stream
argument_list|,
name|xhtml
argument_list|,
name|m
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|//shouldn't ever happen
block|}
finally|finally
block|{
name|script
operator|.
name|setLength
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|characters
parameter_list|(
name|char
index|[]
name|ch
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|length
parameter_list|)
throws|throws
name|SAXException
block|{
if|if
condition|(
name|scriptLevel
operator|>
literal|0
operator|&&
name|extractScripts
condition|)
block|{
name|script
operator|.
name|append
argument_list|(
name|ch
argument_list|,
name|start
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|titleLevel
operator|>
literal|0
operator|&&
name|bodyLevel
operator|==
literal|0
condition|)
block|{
name|title
operator|.
name|append
argument_list|(
name|ch
argument_list|,
name|start
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|bodyLevel
operator|>
literal|0
operator|&&
name|discardLevel
operator|==
literal|0
condition|)
block|{
name|super
operator|.
name|characters
argument_list|(
name|ch
argument_list|,
name|start
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|ignorableWhitespace
parameter_list|(
name|char
index|[]
name|ch
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|length
parameter_list|)
throws|throws
name|SAXException
block|{
if|if
condition|(
name|bodyLevel
operator|>
literal|0
operator|&&
name|discardLevel
operator|==
literal|0
condition|)
block|{
name|super
operator|.
name|ignorableWhitespace
argument_list|(
name|ch
argument_list|,
name|start
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|String
name|resolve
parameter_list|(
name|String
name|url
parameter_list|)
block|{
return|return
name|resolve
argument_list|(
name|metadata
operator|.
name|get
argument_list|(
name|Metadata
operator|.
name|CONTENT_LOCATION
argument_list|)
argument_list|,
name|url
argument_list|)
return|;
block|}
specifier|private
name|String
name|resolve
parameter_list|(
name|String
name|base
parameter_list|,
name|String
name|url
parameter_list|)
block|{
name|url
operator|=
name|url
operator|.
name|trim
argument_list|()
expr_stmt|;
comment|// Return the URL as-is if no base URL is available or if the URL
comment|// matches a common non-hierarchical or pseudo URI prefix
name|String
name|lower
init|=
name|url
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|ENGLISH
argument_list|)
decl_stmt|;
if|if
condition|(
name|base
operator|==
literal|null
operator|||
name|lower
operator|.
name|startsWith
argument_list|(
literal|"urn:"
argument_list|)
operator|||
name|lower
operator|.
name|startsWith
argument_list|(
literal|"mailto:"
argument_list|)
operator|||
name|lower
operator|.
name|startsWith
argument_list|(
literal|"tel:"
argument_list|)
operator|||
name|lower
operator|.
name|startsWith
argument_list|(
literal|"data:"
argument_list|)
operator|||
name|lower
operator|.
name|startsWith
argument_list|(
literal|"javascript:"
argument_list|)
operator|||
name|lower
operator|.
name|startsWith
argument_list|(
literal|"about:"
argument_list|)
condition|)
block|{
return|return
name|url
return|;
block|}
try|try
block|{
name|URL
name|baseURL
init|=
operator|new
name|URL
argument_list|(
name|base
operator|.
name|trim
argument_list|()
argument_list|)
decl_stmt|;
comment|// We need to handle one special case, where the relativeUrl is
comment|// just a query string (like "?pid=1"), and the baseUrl doesn't
comment|// end with a '/'. In that case, the URL class removes the last
comment|// portion of the path, which we don't want.
name|String
name|path
init|=
name|baseURL
operator|.
name|getPath
argument_list|()
decl_stmt|;
if|if
condition|(
name|url
operator|.
name|startsWith
argument_list|(
literal|"?"
argument_list|)
operator|&&
name|path
operator|.
name|length
argument_list|()
operator|>
literal|0
operator|&&
operator|!
name|path
operator|.
name|endsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
return|return
operator|new
name|URL
argument_list|(
name|baseURL
operator|.
name|getProtocol
argument_list|()
argument_list|,
name|baseURL
operator|.
name|getHost
argument_list|()
argument_list|,
name|baseURL
operator|.
name|getPort
argument_list|()
argument_list|,
name|baseURL
operator|.
name|getPath
argument_list|()
operator|+
name|url
argument_list|)
operator|.
name|toExternalForm
argument_list|()
return|;
block|}
else|else
block|{
return|return
operator|new
name|URL
argument_list|(
name|baseURL
argument_list|,
name|url
argument_list|)
operator|.
name|toExternalForm
argument_list|()
return|;
block|}
block|}
catch|catch
parameter_list|(
name|MalformedURLException
name|e
parameter_list|)
block|{
comment|// Unknown or broken format; just return the URL as received.
return|return
name|url
return|;
block|}
block|}
block|}
end_class

end_unit

