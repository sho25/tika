begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|ocr
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_comment
comment|/**  * Configuration for TesseractOCRParser.  *   * This allows to enable TesseractOCRParser and set its parameters:  *<p>  * TesseractOCRConfig config = new TesseractOCRConfig();<br>  * config.setTesseractPath(tesseractFolder);<br>  * parseContext.set(TesseractOCRConfig.class, config);<br>  *</p>  *  * Parameters can also be set by either editing the existing TesseractOCRConfig.properties file in,  * tika-parser/src/main/resources/org/apache/tika/parser/ocr, or overriding it by creating your own  * and placing it in the package org/apache/tika/parser/ocr on the classpath.  *   */
end_comment

begin_class
specifier|public
class|class
name|TesseractOCRConfig
implements|implements
name|Serializable
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
operator|-
literal|4861942486845757891L
decl_stmt|;
comment|// Path to tesseract installation folder, if not on system path.
specifier|private
name|String
name|tesseractPath
init|=
literal|""
decl_stmt|;
comment|// Language dictionary to be used.
specifier|private
name|String
name|language
init|=
literal|"eng"
decl_stmt|;
comment|// Tesseract page segmentation mode.
specifier|private
name|String
name|pageSegMode
init|=
literal|"1"
decl_stmt|;
comment|// Minimum file size to submit file to ocr.
specifier|private
name|int
name|minFileSizeToOcr
init|=
literal|0
decl_stmt|;
comment|// Maximum file size to submit file to ocr.
specifier|private
name|int
name|maxFileSizeToOcr
init|=
name|Integer
operator|.
name|MAX_VALUE
decl_stmt|;
comment|// Maximum time (seconds) to wait for the ocring process termination
specifier|private
name|int
name|timeout
init|=
literal|120
decl_stmt|;
comment|/** 	 * Default contructor. 	 */
specifier|public
name|TesseractOCRConfig
parameter_list|()
block|{
name|init
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getResourceAsStream
argument_list|(
literal|"TesseractOCRConfig.properties"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/** 	 * Loads properties from InputStream and then tries to close InputStream. 	 * If there is an IOException, this silently swallows the exception 	 * and goes back to the default. 	 * 	 * @param is 	 */
specifier|public
name|TesseractOCRConfig
parameter_list|(
name|InputStream
name|is
parameter_list|)
block|{
name|init
argument_list|(
name|is
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|init
parameter_list|(
name|InputStream
name|is
parameter_list|)
block|{
if|if
condition|(
name|is
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|Properties
name|props
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
try|try
block|{
name|props
operator|.
name|load
argument_list|(
name|is
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{ 		}
finally|finally
block|{
if|if
condition|(
name|is
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|is
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|//swallow
block|}
block|}
block|}
name|setTesseractPath
argument_list|(
name|getProp
argument_list|(
name|props
argument_list|,
literal|"tesseractPath"
argument_list|,
name|getTesseractPath
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|setLanguage
argument_list|(
name|getProp
argument_list|(
name|props
argument_list|,
literal|"language"
argument_list|,
name|getLanguage
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|setPageSegMode
argument_list|(
name|getProp
argument_list|(
name|props
argument_list|,
literal|"pageSegMode"
argument_list|,
name|getPageSegMode
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|setMinFileSizeToOcr
argument_list|(
name|getProp
argument_list|(
name|props
argument_list|,
literal|"minFileSizeToOcr"
argument_list|,
name|getMinFileSizeToOcr
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|setMaxFileSizeToOcr
argument_list|(
name|getProp
argument_list|(
name|props
argument_list|,
literal|"maxFileSizeToOcr"
argument_list|,
name|getMaxFileSizeToOcr
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|setTimeout
argument_list|(
name|getProp
argument_list|(
name|props
argument_list|,
literal|"timeout"
argument_list|,
name|getTimeout
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/** @see #setTesseractPath(String tesseractPath)*/
specifier|public
name|String
name|getTesseractPath
parameter_list|()
block|{
return|return
name|tesseractPath
return|;
block|}
comment|/** 	 * Set tesseract installation folder, needed if it is not on system path. 	 */
specifier|public
name|void
name|setTesseractPath
parameter_list|(
name|String
name|tesseractPath
parameter_list|)
block|{
if|if
condition|(
operator|!
name|tesseractPath
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|!
name|tesseractPath
operator|.
name|endsWith
argument_list|(
name|File
operator|.
name|separator
argument_list|)
condition|)
name|tesseractPath
operator|+=
name|File
operator|.
name|separator
expr_stmt|;
name|this
operator|.
name|tesseractPath
operator|=
name|tesseractPath
expr_stmt|;
block|}
comment|/** @see #setLanguage(String language)*/
specifier|public
name|String
name|getLanguage
parameter_list|()
block|{
return|return
name|language
return|;
block|}
comment|/** 	 * Set tesseract language dictionary to be used. Default is "eng". 	 * Multiple languages may be specified, separated by plus characters. 	 */
specifier|public
name|void
name|setLanguage
parameter_list|(
name|String
name|language
parameter_list|)
block|{
if|if
condition|(
operator|!
name|language
operator|.
name|matches
argument_list|(
literal|"([A-Za-z](\\+?))*"
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Invalid language code"
argument_list|)
throw|;
block|}
name|this
operator|.
name|language
operator|=
name|language
expr_stmt|;
block|}
comment|/** @see #setPageSegMode(String pageSegMode)*/
specifier|public
name|String
name|getPageSegMode
parameter_list|()
block|{
return|return
name|pageSegMode
return|;
block|}
comment|/** 	 * Set tesseract page segmentation mode. 	 * Default is 1 = Automatic page segmentation with OSD (Orientation and Script Detection) 	 */
specifier|public
name|void
name|setPageSegMode
parameter_list|(
name|String
name|pageSegMode
parameter_list|)
block|{
if|if
condition|(
operator|!
name|pageSegMode
operator|.
name|matches
argument_list|(
literal|"[1-9]|10"
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Invalid language code"
argument_list|)
throw|;
block|}
name|this
operator|.
name|pageSegMode
operator|=
name|pageSegMode
expr_stmt|;
block|}
comment|/** @see #setMinFileSizeToOcr(int minFileSizeToOcr)*/
specifier|public
name|int
name|getMinFileSizeToOcr
parameter_list|()
block|{
return|return
name|minFileSizeToOcr
return|;
block|}
comment|/** 	 * Set minimum file size to submit file to ocr. 	 * Default is 0. 	 */
specifier|public
name|void
name|setMinFileSizeToOcr
parameter_list|(
name|int
name|minFileSizeToOcr
parameter_list|)
block|{
name|this
operator|.
name|minFileSizeToOcr
operator|=
name|minFileSizeToOcr
expr_stmt|;
block|}
comment|/** @see #setMaxFileSizeToOcr(int maxFileSizeToOcr)*/
specifier|public
name|int
name|getMaxFileSizeToOcr
parameter_list|()
block|{
return|return
name|maxFileSizeToOcr
return|;
block|}
comment|/** 	 * Set maximum file size to submit file to ocr. 	 * Default is Integer.MAX_VALUE. 	 */
specifier|public
name|void
name|setMaxFileSizeToOcr
parameter_list|(
name|int
name|maxFileSizeToOcr
parameter_list|)
block|{
name|this
operator|.
name|maxFileSizeToOcr
operator|=
name|maxFileSizeToOcr
expr_stmt|;
block|}
comment|/** 	 * Set maximum time (seconds) to wait for the ocring process to terminate. 	 * Default value is 120s. 	 */
specifier|public
name|void
name|setTimeout
parameter_list|(
name|int
name|timeout
parameter_list|)
block|{
name|this
operator|.
name|timeout
operator|=
name|timeout
expr_stmt|;
block|}
comment|/** @see #setTimeout(int timeout)*/
specifier|public
name|int
name|getTimeout
parameter_list|()
block|{
return|return
name|timeout
return|;
block|}
comment|/** 	 * Get property from the properties file passed in. 	 * @param properties properties file to read from. 	 * @param property the property to fetch. 	 * @param defaultMissing default parameter to use. 	 * @return the value. 	 */
specifier|private
name|int
name|getProp
parameter_list|(
name|Properties
name|properties
parameter_list|,
name|String
name|property
parameter_list|,
name|int
name|defaultMissing
parameter_list|)
block|{
name|String
name|p
init|=
name|properties
operator|.
name|getProperty
argument_list|(
name|property
argument_list|)
decl_stmt|;
if|if
condition|(
name|p
operator|==
literal|null
operator|||
name|p
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|defaultMissing
return|;
block|}
try|try
block|{
return|return
name|Integer
operator|.
name|parseInt
argument_list|(
name|p
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Cannot parse TesseractOCRConfig variable %s, invalid integer value"
argument_list|,
name|property
argument_list|)
argument_list|,
name|ex
argument_list|)
throw|;
block|}
block|}
comment|/** 	 * Get property from the properties file passed in. 	 * @param properties properties file to read from. 	 * @param property the property to fetch. 	 * @param defaultMissing default parameter to use. 	 * @return the value. 	 */
specifier|private
name|String
name|getProp
parameter_list|(
name|Properties
name|properties
parameter_list|,
name|String
name|property
parameter_list|,
name|String
name|defaultMissing
parameter_list|)
block|{
return|return
name|properties
operator|.
name|getProperty
argument_list|(
name|property
argument_list|,
name|defaultMissing
argument_list|)
return|;
block|}
block|}
end_class

end_unit

