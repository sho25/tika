begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|wordperfect
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_comment
comment|/**  * Extracts WordPerfect Document Area text from a WordPerfect document  * version 6+.  * @author Pascal Essiembre  */
end_comment

begin_class
class|class
name|WP6DocumentAreaExtractor
extends|extends
name|WPDocumentAreaExtractor
block|{
specifier|protected
name|void
name|extract
parameter_list|(
name|int
name|c
parameter_list|,
name|WPInputStream
name|in
parameter_list|,
name|StringBuilder
name|out
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|c
operator|>
literal|0
operator|&&
name|c
operator|<=
literal|32
condition|)
block|{
name|out
operator|.
name|append
argument_list|(
name|WP6Charsets
operator|.
name|DEFAULT_EXTENDED_INTL_CHARS
index|[
name|c
index|]
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|c
operator|>=
literal|33
operator|&&
name|c
operator|<=
literal|126
condition|)
block|{
name|out
operator|.
name|append
argument_list|(
operator|(
name|char
operator|)
name|c
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|c
operator|==
literal|128
condition|)
block|{
name|out
operator|.
name|append
argument_list|(
literal|' '
argument_list|)
expr_stmt|;
comment|// Soft space
block|}
elseif|else
if|if
condition|(
name|c
operator|==
literal|129
condition|)
block|{
name|out
operator|.
name|append
argument_list|(
literal|'\u00A0'
argument_list|)
expr_stmt|;
comment|// Hard space
block|}
elseif|else
if|if
condition|(
name|c
operator|==
literal|129
condition|)
block|{
name|out
operator|.
name|append
argument_list|(
literal|'-'
argument_list|)
expr_stmt|;
comment|// Hard hyphen
block|}
elseif|else
if|if
condition|(
name|c
operator|==
literal|135
operator|||
name|c
operator|==
literal|137
condition|)
block|{
name|out
operator|.
name|append
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
comment|// Dormant Hard return
block|}
elseif|else
if|if
condition|(
name|c
operator|==
literal|138
condition|)
block|{
comment|// skip to closing pair surrounding page number
name|skipUntilChar
argument_list|(
name|in
argument_list|,
literal|139
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|c
operator|==
literal|198
condition|)
block|{
comment|// end of cell
name|out
operator|.
name|append
argument_list|(
literal|'\t'
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|c
operator|>=
literal|180
operator|&&
name|c
operator|<=
literal|207
condition|)
block|{
name|out
operator|.
name|append
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|c
operator|>=
literal|208
operator|&&
name|c
operator|<=
literal|239
condition|)
block|{
comment|// Variable-Length Multi-Byte Functions
name|int
name|subgroup
init|=
name|in
operator|.
name|readWP
argument_list|()
decl_stmt|;
name|int
name|functionSize
init|=
name|in
operator|.
name|readWPShort
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|functionSize
operator|-
literal|4
condition|;
name|i
operator|++
control|)
block|{
name|in
operator|.
name|readWP
argument_list|()
expr_stmt|;
block|}
comment|// End-of-Line group
if|if
condition|(
name|c
operator|==
literal|208
condition|)
block|{
if|if
condition|(
name|subgroup
operator|>=
literal|1
operator|&&
name|subgroup
operator|<=
literal|3
condition|)
block|{
name|out
operator|.
name|append
argument_list|(
literal|' '
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|subgroup
operator|==
literal|10
condition|)
block|{
comment|// end of cell
name|out
operator|.
name|append
argument_list|(
literal|'\t'
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|subgroup
operator|>=
literal|4
operator|&&
name|subgroup
operator|<=
literal|19
condition|)
block|{
name|out
operator|.
name|append
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|subgroup
operator|>=
literal|20
operator|&&
name|subgroup
operator|<=
literal|22
condition|)
block|{
name|out
operator|.
name|append
argument_list|(
literal|' '
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|subgroup
operator|>=
literal|23
operator|&&
name|subgroup
operator|<=
literal|28
condition|)
block|{
name|out
operator|.
name|append
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|c
operator|==
literal|213
condition|)
block|{
name|out
operator|.
name|append
argument_list|(
literal|' '
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|c
operator|==
literal|224
condition|)
block|{
name|out
operator|.
name|append
argument_list|(
literal|'\t'
argument_list|)
expr_stmt|;
block|}
comment|//TODO Are there functions containing data? Like footnotes?
block|}
elseif|else
if|if
condition|(
name|c
operator|==
literal|240
condition|)
block|{
comment|// extended char
name|int
name|charval
init|=
name|in
operator|.
name|readWP
argument_list|()
decl_stmt|;
name|int
name|charset
init|=
name|in
operator|.
name|readWP
argument_list|()
decl_stmt|;
name|in
operator|.
name|readWP
argument_list|()
expr_stmt|;
comment|// closing character
name|WP6Charsets
operator|.
name|append
argument_list|(
name|out
argument_list|,
name|charset
argument_list|,
name|charval
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|c
operator|>=
literal|241
operator|&&
name|c
operator|<=
literal|254
condition|)
block|{
name|skipUntilChar
argument_list|(
name|in
argument_list|,
name|c
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|c
operator|==
literal|255
condition|)
block|{
name|skipUntilChar
argument_list|(
name|in
argument_list|,
name|c
argument_list|)
expr_stmt|;
block|}
comment|// Ignored codes above 127:
comment|// 130,131,133: soft hyphens
comment|// 134: invisible return in line
comment|// 136: soft end of center/align
comment|// 140: style separator mark
comment|// 141,142: start/end of text to skip
comment|// 143: exited hyphenation
comment|// 144: cancel hyphenation
comment|// 145-151: match functions
comment|// 152-179: unknown/ignored
comment|// 255: reserved, cannot be used
block|}
block|}
end_class

end_unit

