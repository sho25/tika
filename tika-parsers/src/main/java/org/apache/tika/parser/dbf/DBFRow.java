begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|dbf
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_class
class|class
name|DBFRow
block|{
name|DBFCell
index|[]
name|cells
decl_stmt|;
specifier|private
name|boolean
name|isDeleted
init|=
literal|false
decl_stmt|;
name|DBFRow
parameter_list|(
name|DBFFileHeader
name|header
parameter_list|)
block|{
name|cells
operator|=
operator|new
name|DBFCell
index|[
name|header
operator|.
name|getCols
argument_list|()
operator|.
name|length
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|cells
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|DBFColumnHeader
name|columnHeader
init|=
name|header
operator|.
name|getCols
argument_list|()
index|[
name|i
index|]
decl_stmt|;
name|cells
index|[
name|i
index|]
operator|=
operator|new
name|DBFCell
argument_list|(
name|columnHeader
operator|.
name|getColType
argument_list|()
argument_list|,
name|columnHeader
operator|.
name|fieldLength
argument_list|,
name|columnHeader
operator|.
name|decimalCount
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|DBFRow
parameter_list|()
block|{}
name|void
name|setDeleted
parameter_list|(
name|boolean
name|deleted
parameter_list|)
block|{
name|isDeleted
operator|=
name|deleted
expr_stmt|;
block|}
name|boolean
name|isDeleted
parameter_list|()
block|{
return|return
name|isDeleted
return|;
block|}
name|DBFRow
name|deepCopy
parameter_list|()
block|{
name|DBFRow
name|row
init|=
operator|new
name|DBFRow
argument_list|()
decl_stmt|;
name|row
operator|.
name|isDeleted
operator|=
name|this
operator|.
name|isDeleted
expr_stmt|;
name|row
operator|.
name|cells
operator|=
operator|new
name|DBFCell
index|[
name|cells
operator|.
name|length
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|cells
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|row
operator|.
name|cells
index|[
name|i
index|]
operator|=
name|cells
index|[
name|i
index|]
operator|.
name|deepCopy
argument_list|()
expr_stmt|;
block|}
return|return
name|row
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"DBFRow{"
operator|+
literal|"cells="
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|cells
argument_list|)
operator|+
literal|'}'
return|;
block|}
block|}
end_class

end_unit

