begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|code
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|uwyn
operator|.
name|jhighlight
operator|.
name|renderer
operator|.
name|XhtmlRendererFactory
operator|.
name|CPP
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|uwyn
operator|.
name|jhighlight
operator|.
name|renderer
operator|.
name|XhtmlRendererFactory
operator|.
name|GROOVY
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|uwyn
operator|.
name|jhighlight
operator|.
name|renderer
operator|.
name|XhtmlRendererFactory
operator|.
name|JAVA
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|Charset
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|com
operator|.
name|uwyn
operator|.
name|jhighlight
operator|.
name|renderer
operator|.
name|Renderer
import|;
end_import

begin_import
import|import
name|com
operator|.
name|uwyn
operator|.
name|jhighlight
operator|.
name|renderer
operator|.
name|XhtmlRendererFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|input
operator|.
name|CloseShieldInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|detect
operator|.
name|AutoDetectReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|detect
operator|.
name|EncodingDetector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|exception
operator|.
name|TikaException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|metadata
operator|.
name|Metadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|metadata
operator|.
name|TikaCoreProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|mime
operator|.
name|MediaType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|AbstractEncodingDetectorParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|ParseContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|ccil
operator|.
name|cowan
operator|.
name|tagsoup
operator|.
name|HTMLSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|ccil
operator|.
name|cowan
operator|.
name|tagsoup
operator|.
name|Schema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|ContentHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|InputSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_comment
comment|/**  * Generic Source code parser for Java, Groovy, C++.  * Aware: This parser uses JHightlight library (https://github.com/codelibs/jhighlight) under CDDL/LGPL dual license  *  * @author Hong-Thai.Nguyen  * @since 1.6  */
end_comment

begin_class
specifier|public
class|class
name|SourceCodeParser
extends|extends
name|AbstractEncodingDetectorParser
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
operator|-
literal|4543476498190054160L
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Pattern
name|authorPattern
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"(?im)@author (.*) *$"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|MediaType
argument_list|,
name|String
argument_list|>
name|TYPES_TO_RENDERER
init|=
operator|new
name|HashMap
argument_list|<
name|MediaType
argument_list|,
name|String
argument_list|>
argument_list|()
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
operator|-
literal|741976157563751152L
decl_stmt|;
block|{
name|put
argument_list|(
name|MediaType
operator|.
name|text
argument_list|(
literal|"x-c++src"
argument_list|)
argument_list|,
name|CPP
argument_list|)
expr_stmt|;
name|put
argument_list|(
name|MediaType
operator|.
name|text
argument_list|(
literal|"x-java-source"
argument_list|)
argument_list|,
name|JAVA
argument_list|)
expr_stmt|;
name|put
argument_list|(
name|MediaType
operator|.
name|text
argument_list|(
literal|"x-groovy"
argument_list|)
argument_list|,
name|GROOVY
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
comment|//Parse the HTML document
specifier|private
specifier|static
specifier|final
name|Schema
name|HTML_SCHEMA
init|=
operator|new
name|HTMLSchema
argument_list|()
decl_stmt|;
specifier|public
name|SourceCodeParser
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
specifier|public
name|SourceCodeParser
parameter_list|(
name|EncodingDetector
name|encodingDetector
parameter_list|)
block|{
name|super
argument_list|(
name|encodingDetector
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Set
argument_list|<
name|MediaType
argument_list|>
name|getSupportedTypes
parameter_list|(
name|ParseContext
name|context
parameter_list|)
block|{
return|return
name|TYPES_TO_RENDERER
operator|.
name|keySet
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|parse
parameter_list|(
name|InputStream
name|stream
parameter_list|,
name|ContentHandler
name|handler
parameter_list|,
name|Metadata
name|metadata
parameter_list|,
name|ParseContext
name|context
parameter_list|)
throws|throws
name|IOException
throws|,
name|SAXException
throws|,
name|TikaException
block|{
try|try
init|(
name|AutoDetectReader
name|reader
init|=
operator|new
name|AutoDetectReader
argument_list|(
operator|new
name|CloseShieldInputStream
argument_list|(
name|stream
argument_list|)
argument_list|,
name|metadata
argument_list|,
name|getEncodingDetector
argument_list|(
name|context
argument_list|)
argument_list|)
init|)
block|{
name|Charset
name|charset
init|=
name|reader
operator|.
name|getCharset
argument_list|()
decl_stmt|;
name|String
name|mediaType
init|=
name|metadata
operator|.
name|get
argument_list|(
name|Metadata
operator|.
name|CONTENT_TYPE
argument_list|)
decl_stmt|;
name|String
name|name
init|=
name|metadata
operator|.
name|get
argument_list|(
name|TikaCoreProperties
operator|.
name|RESOURCE_NAME_KEY
argument_list|)
decl_stmt|;
if|if
condition|(
name|mediaType
operator|!=
literal|null
operator|&&
name|name
operator|!=
literal|null
condition|)
block|{
name|MediaType
name|type
init|=
name|MediaType
operator|.
name|parse
argument_list|(
name|mediaType
argument_list|)
decl_stmt|;
name|metadata
operator|.
name|set
argument_list|(
name|Metadata
operator|.
name|CONTENT_TYPE
argument_list|,
name|type
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|metadata
operator|.
name|set
argument_list|(
name|Metadata
operator|.
name|CONTENT_ENCODING
argument_list|,
name|charset
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|StringBuilder
name|out
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|String
name|line
decl_stmt|;
name|int
name|nbLines
init|=
literal|0
decl_stmt|;
while|while
condition|(
operator|(
name|line
operator|=
name|reader
operator|.
name|readLine
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
name|out
operator|.
name|append
argument_list|(
name|line
operator|+
name|System
operator|.
name|getProperty
argument_list|(
literal|"line.separator"
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|author
init|=
name|parserAuthor
argument_list|(
name|line
argument_list|)
decl_stmt|;
if|if
condition|(
name|author
operator|!=
literal|null
condition|)
block|{
name|metadata
operator|.
name|add
argument_list|(
name|TikaCoreProperties
operator|.
name|CREATOR
argument_list|,
name|author
argument_list|)
expr_stmt|;
block|}
name|nbLines
operator|++
expr_stmt|;
block|}
name|metadata
operator|.
name|set
argument_list|(
literal|"LoC"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|nbLines
argument_list|)
argument_list|)
expr_stmt|;
name|Renderer
name|renderer
init|=
name|getRenderer
argument_list|(
name|type
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|codeAsHtml
init|=
name|renderer
operator|.
name|highlight
argument_list|(
name|name
argument_list|,
name|out
operator|.
name|toString
argument_list|()
argument_list|,
name|charset
operator|.
name|name
argument_list|()
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|Schema
name|schema
init|=
name|context
operator|.
name|get
argument_list|(
name|Schema
operator|.
name|class
argument_list|,
name|HTML_SCHEMA
argument_list|)
decl_stmt|;
name|org
operator|.
name|ccil
operator|.
name|cowan
operator|.
name|tagsoup
operator|.
name|Parser
name|parser
init|=
operator|new
name|org
operator|.
name|ccil
operator|.
name|cowan
operator|.
name|tagsoup
operator|.
name|Parser
argument_list|()
decl_stmt|;
name|parser
operator|.
name|setProperty
argument_list|(
name|org
operator|.
name|ccil
operator|.
name|cowan
operator|.
name|tagsoup
operator|.
name|Parser
operator|.
name|schemaProperty
argument_list|,
name|schema
argument_list|)
expr_stmt|;
name|parser
operator|.
name|setContentHandler
argument_list|(
name|handler
argument_list|)
expr_stmt|;
name|parser
operator|.
name|parse
argument_list|(
operator|new
name|InputSource
argument_list|(
operator|new
name|StringReader
argument_list|(
name|codeAsHtml
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|Renderer
name|getRenderer
parameter_list|(
name|String
name|mimeType
parameter_list|)
block|{
name|MediaType
name|mt
init|=
name|MediaType
operator|.
name|parse
argument_list|(
name|mimeType
argument_list|)
decl_stmt|;
name|String
name|type
init|=
name|TYPES_TO_RENDERER
operator|.
name|get
argument_list|(
name|mt
argument_list|)
decl_stmt|;
if|if
condition|(
name|type
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"unparseable content type "
operator|+
name|mimeType
argument_list|)
throw|;
block|}
return|return
name|XhtmlRendererFactory
operator|.
name|getRenderer
argument_list|(
name|type
argument_list|)
return|;
block|}
specifier|private
name|String
name|parserAuthor
parameter_list|(
name|String
name|line
parameter_list|)
block|{
name|Matcher
name|m
init|=
name|authorPattern
operator|.
name|matcher
argument_list|(
name|line
argument_list|)
decl_stmt|;
if|if
condition|(
name|m
operator|.
name|find
argument_list|()
condition|)
block|{
return|return
name|m
operator|.
name|group
argument_list|(
literal|1
argument_list|)
operator|.
name|trim
argument_list|()
return|;
block|}
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

