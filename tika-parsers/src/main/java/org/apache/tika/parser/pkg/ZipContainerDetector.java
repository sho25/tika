begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|pkg
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|compress
operator|.
name|archivers
operator|.
name|zip
operator|.
name|ZipArchiveEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|compress
operator|.
name|archivers
operator|.
name|zip
operator|.
name|ZipFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|extractor
operator|.
name|ExtractorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|openxml4j
operator|.
name|exceptions
operator|.
name|InvalidFormatException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|openxml4j
operator|.
name|opc
operator|.
name|OPCPackage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|openxml4j
operator|.
name|opc
operator|.
name|PackageAccess
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|openxml4j
operator|.
name|opc
operator|.
name|PackagePart
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|openxml4j
operator|.
name|opc
operator|.
name|PackageRelationshipCollection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|detect
operator|.
name|Detector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|io
operator|.
name|TikaInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|metadata
operator|.
name|Metadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|mime
operator|.
name|MediaType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|iwork
operator|.
name|IWorkPackageParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|iwork
operator|.
name|IWorkPackageParser
operator|.
name|IWORKDocumentType
import|;
end_import

begin_comment
comment|/**  * A detector that works on a Zip document  *  to figure out exactly what the file is  */
end_comment

begin_class
specifier|public
class|class
name|ZipContainerDetector
implements|implements
name|Detector
block|{
comment|/** Serial version UID */
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|2891763938430295453L
decl_stmt|;
specifier|public
name|MediaType
name|detect
parameter_list|(
name|InputStream
name|input
parameter_list|,
name|Metadata
name|metadata
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Check if we have access to the document
if|if
condition|(
name|input
operator|==
literal|null
condition|)
block|{
return|return
name|MediaType
operator|.
name|OCTET_STREAM
return|;
block|}
comment|// Check if the document starts with the Zip header
name|input
operator|.
name|mark
argument_list|(
literal|4
argument_list|)
expr_stmt|;
try|try
block|{
if|if
condition|(
name|input
operator|.
name|read
argument_list|()
operator|!=
literal|'P'
operator|||
name|input
operator|.
name|read
argument_list|()
operator|!=
literal|'K'
operator|||
name|input
operator|.
name|read
argument_list|()
operator|!=
literal|3
operator|||
name|input
operator|.
name|read
argument_list|()
operator|!=
literal|4
condition|)
block|{
return|return
name|MediaType
operator|.
name|OCTET_STREAM
return|;
block|}
block|}
finally|finally
block|{
name|input
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
comment|// We can only detect the exact type when given a TikaInputStream
name|TikaInputStream
name|tis
init|=
name|TikaInputStream
operator|.
name|cast
argument_list|(
name|input
argument_list|)
decl_stmt|;
if|if
condition|(
name|tis
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|ZipFile
name|zip
init|=
operator|new
name|ZipFile
argument_list|(
name|tis
operator|.
name|getFile
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|MediaType
name|type
init|=
name|detectOpenDocument
argument_list|(
name|zip
argument_list|)
decl_stmt|;
if|if
condition|(
name|type
operator|==
literal|null
condition|)
block|{
name|type
operator|=
name|detectOfficeOpenXML
argument_list|(
name|zip
argument_list|,
name|tis
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|type
operator|==
literal|null
condition|)
block|{
name|type
operator|=
name|detectIWork
argument_list|(
name|zip
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|type
operator|!=
literal|null
condition|)
block|{
return|return
name|type
return|;
block|}
elseif|else
if|if
condition|(
name|zip
operator|.
name|getEntry
argument_list|(
literal|"META-INF/MANIFEST.MF"
argument_list|)
operator|!=
literal|null
condition|)
block|{
return|return
name|MediaType
operator|.
name|application
argument_list|(
literal|"java-archive"
argument_list|)
return|;
block|}
block|}
finally|finally
block|{
comment|// TODO: shouldn't we record the open
comment|// container so it can be later
comment|// reused...?
comment|// tis.setOpenContainer(zip);
name|zip
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ignore
parameter_list|)
block|{             }
block|}
comment|// Fallback: it's still a zip file, we just don't know what kind of one
return|return
name|MediaType
operator|.
name|APPLICATION_ZIP
return|;
block|}
specifier|private
specifier|static
name|MediaType
name|detectOpenDocument
parameter_list|(
name|ZipFile
name|zip
parameter_list|)
block|{
try|try
block|{
name|ZipArchiveEntry
name|mimetype
init|=
name|zip
operator|.
name|getEntry
argument_list|(
literal|"mimetype"
argument_list|)
decl_stmt|;
if|if
condition|(
name|mimetype
operator|!=
literal|null
condition|)
block|{
name|InputStream
name|stream
init|=
name|zip
operator|.
name|getInputStream
argument_list|(
name|mimetype
argument_list|)
decl_stmt|;
try|try
block|{
return|return
name|MediaType
operator|.
name|parse
argument_list|(
name|IOUtils
operator|.
name|toString
argument_list|(
name|stream
argument_list|,
literal|"UTF-8"
argument_list|)
argument_list|)
return|;
block|}
finally|finally
block|{
name|stream
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
block|}
specifier|private
specifier|static
name|MediaType
name|detectOfficeOpenXML
parameter_list|(
name|ZipFile
name|zip
parameter_list|,
name|TikaInputStream
name|stream
parameter_list|)
block|{
try|try
block|{
if|if
condition|(
name|zip
operator|.
name|getEntry
argument_list|(
literal|"_rels/.rels"
argument_list|)
operator|!=
literal|null
operator|||
name|zip
operator|.
name|getEntry
argument_list|(
literal|"[Content_Types].xml"
argument_list|)
operator|!=
literal|null
condition|)
block|{
comment|// Use POI to open and investigate it for us
name|OPCPackage
name|pkg
init|=
name|OPCPackage
operator|.
name|open
argument_list|(
name|stream
operator|.
name|getFile
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|,
name|PackageAccess
operator|.
name|READ
argument_list|)
decl_stmt|;
name|stream
operator|.
name|setOpenContainer
argument_list|(
name|pkg
argument_list|)
expr_stmt|;
comment|// Detect based on the open OPC Package
return|return
name|detectOfficeOpenXML
argument_list|(
name|pkg
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
catch|catch
parameter_list|(
name|InvalidFormatException
name|e
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
block|}
comment|/**      * Detects the type of an OfficeOpenXML (OOXML) file from      *  opened Package       */
specifier|public
specifier|static
name|MediaType
name|detectOfficeOpenXML
parameter_list|(
name|OPCPackage
name|pkg
parameter_list|)
block|{
name|PackageRelationshipCollection
name|core
init|=
name|pkg
operator|.
name|getRelationshipsByType
argument_list|(
name|ExtractorFactory
operator|.
name|CORE_DOCUMENT_REL
argument_list|)
decl_stmt|;
if|if
condition|(
name|core
operator|.
name|size
argument_list|()
operator|!=
literal|1
condition|)
block|{
comment|// Invalid OOXML Package received
return|return
literal|null
return|;
block|}
comment|// Get the type of the core document part
name|PackagePart
name|corePart
init|=
name|pkg
operator|.
name|getPart
argument_list|(
name|core
operator|.
name|getRelationship
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|coreType
init|=
name|corePart
operator|.
name|getContentType
argument_list|()
decl_stmt|;
comment|// Turn that into the type of the overall document
name|String
name|docType
init|=
name|coreType
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|coreType
operator|.
name|lastIndexOf
argument_list|(
literal|'.'
argument_list|)
argument_list|)
decl_stmt|;
comment|// The Macro Enabled formats are a little special
if|if
condition|(
name|docType
operator|.
name|toLowerCase
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|"macroenabled"
argument_list|)
condition|)
block|{
name|docType
operator|=
name|docType
operator|.
name|toLowerCase
argument_list|()
operator|+
literal|".12"
expr_stmt|;
block|}
comment|// Build the MediaType object and return
return|return
name|MediaType
operator|.
name|parse
argument_list|(
name|docType
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|MediaType
name|detectIWork
parameter_list|(
name|ZipFile
name|zip
parameter_list|)
block|{
if|if
condition|(
name|zip
operator|.
name|getEntry
argument_list|(
name|IWorkPackageParser
operator|.
name|IWORK_COMMON_ENTRY
argument_list|)
operator|!=
literal|null
condition|)
block|{
comment|// Locate the appropriate index file entry, and reads from that
comment|// the root element of the document. That is used to the identify
comment|// the correct type of the keynote container.
for|for
control|(
name|String
name|entryName
range|:
name|IWorkPackageParser
operator|.
name|IWORK_CONTENT_ENTRIES
control|)
block|{
name|IWORKDocumentType
name|type
init|=
name|IWORKDocumentType
operator|.
name|detectType
argument_list|(
name|zip
operator|.
name|getEntry
argument_list|(
name|entryName
argument_list|)
argument_list|,
name|zip
argument_list|)
decl_stmt|;
if|if
condition|(
name|type
operator|!=
literal|null
condition|)
block|{
return|return
name|type
operator|.
name|getType
argument_list|()
return|;
block|}
block|}
comment|// Not sure, fallback to the container type
return|return
name|MediaType
operator|.
name|application
argument_list|(
literal|"vnd.apple.iwork"
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
block|}
end_class

end_unit

