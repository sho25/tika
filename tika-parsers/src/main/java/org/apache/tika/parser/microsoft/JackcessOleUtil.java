begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/* Copyright (c) 2013 James Ahlborn  Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the License. You may obtain a copy of the License at      http://www.apache.org/licenses/LICENSE-2.0  Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License. */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|microsoft
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Closeable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|Charset
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Blob
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLFeatureNotSupportedException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|Normalizer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|com
operator|.
name|healthmarketscience
operator|.
name|jackcess
operator|.
name|DataType
import|;
end_import

begin_import
import|import
name|com
operator|.
name|healthmarketscience
operator|.
name|jackcess
operator|.
name|util
operator|.
name|OleBlob
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|healthmarketscience
operator|.
name|jackcess
operator|.
name|util
operator|.
name|OleBlob
operator|.
name|*
import|;
end_import

begin_import
import|import
name|com
operator|.
name|healthmarketscience
operator|.
name|jackcess
operator|.
name|impl
operator|.
name|ByteUtil
import|;
end_import

begin_import
import|import
name|com
operator|.
name|healthmarketscience
operator|.
name|jackcess
operator|.
name|impl
operator|.
name|CustomToStringStyle
import|;
end_import

begin_import
import|import
name|com
operator|.
name|healthmarketscience
operator|.
name|jackcess
operator|.
name|impl
operator|.
name|PageChannel
import|;
end_import

begin_comment
comment|/**  * Utility code for working with OLE data.  * Temporary workaround until POI 4.0.0 is released and Jackcess is updated  *  *  * @author James Ahlborn  * @usage _advanced_class_  * @deprecated this class will be removed in Tika>= 1.20  */
end_comment

begin_class
annotation|@
name|Deprecated
class|class
name|JackcessOleUtil
block|{
comment|/**          * Interface used to allow optional inclusion of the poi library for working          * with compound ole data.          */
interface|interface
name|CompoundPackageFactory
block|{
specifier|public
name|ContentImpl
name|createCompoundPackageContent
parameter_list|(
name|OleBlobImpl
name|blob
parameter_list|,
name|String
name|prettyName
parameter_list|,
name|String
name|className
parameter_list|,
name|String
name|typeName
parameter_list|,
name|ByteBuffer
name|blobBb
parameter_list|,
name|int
name|dataBlockLen
parameter_list|)
function_decl|;
block|}
specifier|private
specifier|static
specifier|final
name|int
name|PACKAGE_SIGNATURE
init|=
literal|0x1C15
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Charset
name|OLE_CHARSET
init|=
name|Charset
operator|.
name|forName
argument_list|(
literal|"US-ASCII"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Charset
name|OLE_UTF_CHARSET
init|=
name|Charset
operator|.
name|forName
argument_list|(
literal|"UTF-16LE"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|COMPOUND_STORAGE_SIGNATURE
init|=
block|{
operator|(
name|byte
operator|)
literal|0xd0
block|,
operator|(
name|byte
operator|)
literal|0xcf
block|,
operator|(
name|byte
operator|)
literal|0x11
block|,
operator|(
name|byte
operator|)
literal|0xe0
block|,
operator|(
name|byte
operator|)
literal|0xa1
block|,
operator|(
name|byte
operator|)
literal|0xb1
block|,
operator|(
name|byte
operator|)
literal|0x1a
block|,
operator|(
name|byte
operator|)
literal|0xe1
block|}
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|SIMPLE_PACKAGE_TYPE
init|=
literal|"Package"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|PACKAGE_OBJECT_TYPE
init|=
literal|0x02
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|OLE_VERSION
init|=
literal|0x0501
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|OLE_FORMAT
init|=
literal|0x02
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|PACKAGE_STREAM_SIGNATURE
init|=
literal|0x02
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|PS_EMBEDDED_FILE
init|=
literal|0x030000
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|PS_LINKED_FILE
init|=
literal|0x010000
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Set
argument_list|<
name|ContentType
argument_list|>
name|WRITEABLE_TYPES
init|=
name|EnumSet
operator|.
name|of
argument_list|(
name|ContentType
operator|.
name|LINK
argument_list|,
name|ContentType
operator|.
name|SIMPLE_PACKAGE
argument_list|,
name|ContentType
operator|.
name|OTHER
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|NO_DATA
init|=
operator|new
name|byte
index|[
literal|0
index|]
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|LINK_HEADER
init|=
literal|0x01
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|PACKAGE_FOOTER
init|=
block|{
literal|0x01
block|,
literal|0x05
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x01
block|,
operator|(
name|byte
operator|)
literal|0xAD
block|,
literal|0x05
block|,
operator|(
name|byte
operator|)
literal|0xFE
block|}
decl_stmt|;
comment|// regex pattern which matches all the crazy extra stuff in unicode
specifier|private
specifier|static
specifier|final
name|Pattern
name|UNICODE_ACCENT_PATTERN
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"[\\p{InCombiningDiacriticalMarks}\\p{IsLm}\\p{IsSk}]+"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|CompoundPackageFactory
name|COMPOUND_FACTORY
decl_stmt|;
static|static
block|{
name|CompoundPackageFactory
name|compoundFactory
init|=
literal|null
decl_stmt|;
try|try
block|{
name|compoundFactory
operator|=
operator|(
name|CompoundPackageFactory
operator|)
name|Class
operator|.
name|forName
argument_list|(
literal|"org.apache.tika.parser.microsoft.JackcessCompoundOleUtil"
argument_list|)
operator|.
name|newInstance
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
comment|// must not have poi, will load compound ole data as "other"
block|}
name|COMPOUND_FACTORY
operator|=
name|compoundFactory
expr_stmt|;
block|}
comment|/**          * Parses an access database blob structure and returns an appropriate          * OleBlob instance.          */
specifier|public
specifier|static
name|OleBlob
name|parseBlob
parameter_list|(
name|byte
index|[]
name|bytes
parameter_list|)
block|{
return|return
operator|new
name|OleBlobImpl
argument_list|(
name|bytes
argument_list|)
return|;
block|}
comment|/**          * Creates a new OlBlob instance using the given information.          */
specifier|public
specifier|static
name|OleBlob
name|createBlob
parameter_list|(
name|Builder
name|oleBuilder
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
if|if
condition|(
operator|!
name|WRITEABLE_TYPES
operator|.
name|contains
argument_list|(
name|oleBuilder
operator|.
name|getType
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Cannot currently create ole values of type "
operator|+
name|oleBuilder
operator|.
name|getType
argument_list|()
argument_list|)
throw|;
block|}
name|long
name|contentLen
init|=
name|oleBuilder
operator|.
name|getContentLength
argument_list|()
decl_stmt|;
name|byte
index|[]
name|contentBytes
init|=
name|oleBuilder
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|InputStream
name|contentStream
init|=
name|oleBuilder
operator|.
name|getStream
argument_list|()
decl_stmt|;
name|byte
index|[]
name|packageStreamHeader
init|=
name|NO_DATA
decl_stmt|;
name|byte
index|[]
name|packageStreamFooter
init|=
name|NO_DATA
decl_stmt|;
switch|switch
condition|(
name|oleBuilder
operator|.
name|getType
argument_list|()
condition|)
block|{
case|case
name|LINK
case|:
name|packageStreamHeader
operator|=
name|writePackageStreamHeader
argument_list|(
name|oleBuilder
argument_list|)
expr_stmt|;
comment|// link "content" is file path
name|contentBytes
operator|=
name|getZeroTermStrBytes
argument_list|(
name|oleBuilder
operator|.
name|getFilePath
argument_list|()
argument_list|)
expr_stmt|;
name|contentLen
operator|=
name|contentBytes
operator|.
name|length
expr_stmt|;
break|break;
case|case
name|SIMPLE_PACKAGE
case|:
name|packageStreamHeader
operator|=
name|writePackageStreamHeader
argument_list|(
name|oleBuilder
argument_list|)
expr_stmt|;
name|packageStreamFooter
operator|=
name|writePackageStreamFooter
argument_list|(
name|oleBuilder
argument_list|)
expr_stmt|;
break|break;
case|case
name|OTHER
case|:
comment|// nothing more to do
break|break;
default|default:
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"unexpected type "
operator|+
name|oleBuilder
operator|.
name|getType
argument_list|()
argument_list|)
throw|;
block|}
name|long
name|payloadLen
init|=
name|packageStreamHeader
operator|.
name|length
operator|+
name|packageStreamFooter
operator|.
name|length
operator|+
name|contentLen
decl_stmt|;
name|byte
index|[]
name|packageHeader
init|=
name|writePackageHeader
argument_list|(
name|oleBuilder
argument_list|,
name|payloadLen
argument_list|)
decl_stmt|;
name|long
name|totalOleLen
init|=
name|packageHeader
operator|.
name|length
operator|+
name|PACKAGE_FOOTER
operator|.
name|length
operator|+
name|payloadLen
decl_stmt|;
if|if
condition|(
name|totalOleLen
operator|>
name|DataType
operator|.
name|OLE
operator|.
name|getMaxSize
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Content size of "
operator|+
name|totalOleLen
operator|+
literal|" is too large for ole column"
argument_list|)
throw|;
block|}
name|byte
index|[]
name|oleBytes
init|=
operator|new
name|byte
index|[
operator|(
name|int
operator|)
name|totalOleLen
index|]
decl_stmt|;
name|ByteBuffer
name|bb
init|=
name|PageChannel
operator|.
name|wrap
argument_list|(
name|oleBytes
argument_list|)
decl_stmt|;
name|bb
operator|.
name|put
argument_list|(
name|packageHeader
argument_list|)
expr_stmt|;
name|bb
operator|.
name|put
argument_list|(
name|packageStreamHeader
argument_list|)
expr_stmt|;
if|if
condition|(
name|contentLen
operator|>
literal|0L
condition|)
block|{
if|if
condition|(
name|contentBytes
operator|!=
literal|null
condition|)
block|{
name|bb
operator|.
name|put
argument_list|(
name|contentBytes
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|byte
index|[]
name|buf
init|=
operator|new
name|byte
index|[
literal|8192
index|]
decl_stmt|;
name|int
name|numBytes
init|=
literal|0
decl_stmt|;
while|while
condition|(
operator|(
name|numBytes
operator|=
name|contentStream
operator|.
name|read
argument_list|(
name|buf
argument_list|)
operator|)
operator|>=
literal|0
condition|)
block|{
name|bb
operator|.
name|put
argument_list|(
name|buf
argument_list|,
literal|0
argument_list|,
name|numBytes
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|bb
operator|.
name|put
argument_list|(
name|packageStreamFooter
argument_list|)
expr_stmt|;
name|bb
operator|.
name|put
argument_list|(
name|PACKAGE_FOOTER
argument_list|)
expr_stmt|;
return|return
name|parseBlob
argument_list|(
name|oleBytes
argument_list|)
return|;
block|}
finally|finally
block|{
name|ByteUtil
operator|.
name|closeQuietly
argument_list|(
name|oleBuilder
operator|.
name|getStream
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|byte
index|[]
name|writePackageHeader
parameter_list|(
name|Builder
name|oleBuilder
parameter_list|,
name|long
name|contentLen
parameter_list|)
block|{
name|byte
index|[]
name|prettyNameBytes
init|=
name|getZeroTermStrBytes
argument_list|(
name|oleBuilder
operator|.
name|getPrettyName
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|className
init|=
name|oleBuilder
operator|.
name|getClassName
argument_list|()
decl_stmt|;
name|String
name|typeName
init|=
name|oleBuilder
operator|.
name|getTypeName
argument_list|()
decl_stmt|;
if|if
condition|(
name|className
operator|==
literal|null
condition|)
block|{
name|className
operator|=
name|typeName
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|typeName
operator|==
literal|null
condition|)
block|{
name|typeName
operator|=
name|className
expr_stmt|;
block|}
name|byte
index|[]
name|classNameBytes
init|=
name|getZeroTermStrBytes
argument_list|(
name|className
argument_list|)
decl_stmt|;
name|byte
index|[]
name|typeNameBytes
init|=
name|getZeroTermStrBytes
argument_list|(
name|typeName
argument_list|)
decl_stmt|;
name|int
name|packageHeaderLen
init|=
literal|20
operator|+
name|prettyNameBytes
operator|.
name|length
operator|+
name|classNameBytes
operator|.
name|length
decl_stmt|;
name|int
name|oleHeaderLen
init|=
literal|24
operator|+
name|typeNameBytes
operator|.
name|length
decl_stmt|;
name|byte
index|[]
name|headerBytes
init|=
operator|new
name|byte
index|[
name|packageHeaderLen
operator|+
name|oleHeaderLen
index|]
decl_stmt|;
name|ByteBuffer
name|bb
init|=
name|PageChannel
operator|.
name|wrap
argument_list|(
name|headerBytes
argument_list|)
decl_stmt|;
comment|// write outer package header
name|bb
operator|.
name|putShort
argument_list|(
operator|(
name|short
operator|)
name|PACKAGE_SIGNATURE
argument_list|)
expr_stmt|;
name|bb
operator|.
name|putShort
argument_list|(
operator|(
name|short
operator|)
name|packageHeaderLen
argument_list|)
expr_stmt|;
name|bb
operator|.
name|putInt
argument_list|(
name|PACKAGE_OBJECT_TYPE
argument_list|)
expr_stmt|;
name|bb
operator|.
name|putShort
argument_list|(
operator|(
name|short
operator|)
name|prettyNameBytes
operator|.
name|length
argument_list|)
expr_stmt|;
name|bb
operator|.
name|putShort
argument_list|(
operator|(
name|short
operator|)
name|classNameBytes
operator|.
name|length
argument_list|)
expr_stmt|;
name|int
name|prettyNameOff
init|=
name|bb
operator|.
name|position
argument_list|()
operator|+
literal|8
decl_stmt|;
name|bb
operator|.
name|putShort
argument_list|(
operator|(
name|short
operator|)
name|prettyNameOff
argument_list|)
expr_stmt|;
name|bb
operator|.
name|putShort
argument_list|(
call|(
name|short
call|)
argument_list|(
name|prettyNameOff
operator|+
name|prettyNameBytes
operator|.
name|length
argument_list|)
argument_list|)
expr_stmt|;
name|bb
operator|.
name|putInt
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|bb
operator|.
name|put
argument_list|(
name|prettyNameBytes
argument_list|)
expr_stmt|;
name|bb
operator|.
name|put
argument_list|(
name|classNameBytes
argument_list|)
expr_stmt|;
comment|// put ole header
name|bb
operator|.
name|putInt
argument_list|(
name|OLE_VERSION
argument_list|)
expr_stmt|;
name|bb
operator|.
name|putInt
argument_list|(
name|OLE_FORMAT
argument_list|)
expr_stmt|;
name|bb
operator|.
name|putInt
argument_list|(
name|typeNameBytes
operator|.
name|length
argument_list|)
expr_stmt|;
name|bb
operator|.
name|put
argument_list|(
name|typeNameBytes
argument_list|)
expr_stmt|;
name|bb
operator|.
name|putLong
argument_list|(
literal|0L
argument_list|)
expr_stmt|;
name|bb
operator|.
name|putInt
argument_list|(
operator|(
name|int
operator|)
name|contentLen
argument_list|)
expr_stmt|;
return|return
name|headerBytes
return|;
block|}
specifier|private
specifier|static
name|byte
index|[]
name|writePackageStreamHeader
parameter_list|(
name|Builder
name|oleBuilder
parameter_list|)
block|{
name|byte
index|[]
name|fileNameBytes
init|=
name|getZeroTermStrBytes
argument_list|(
name|oleBuilder
operator|.
name|getFileName
argument_list|()
argument_list|)
decl_stmt|;
name|byte
index|[]
name|filePathBytes
init|=
name|getZeroTermStrBytes
argument_list|(
name|oleBuilder
operator|.
name|getFilePath
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|headerLen
init|=
literal|6
operator|+
name|fileNameBytes
operator|.
name|length
operator|+
name|filePathBytes
operator|.
name|length
decl_stmt|;
if|if
condition|(
name|oleBuilder
operator|.
name|getType
argument_list|()
operator|==
name|ContentType
operator|.
name|SIMPLE_PACKAGE
condition|)
block|{
name|headerLen
operator|+=
literal|8
operator|+
name|filePathBytes
operator|.
name|length
expr_stmt|;
block|}
else|else
block|{
name|headerLen
operator|+=
literal|2
expr_stmt|;
block|}
name|byte
index|[]
name|headerBytes
init|=
operator|new
name|byte
index|[
name|headerLen
index|]
decl_stmt|;
name|ByteBuffer
name|bb
init|=
name|PageChannel
operator|.
name|wrap
argument_list|(
name|headerBytes
argument_list|)
decl_stmt|;
name|bb
operator|.
name|putShort
argument_list|(
operator|(
name|short
operator|)
name|PACKAGE_STREAM_SIGNATURE
argument_list|)
expr_stmt|;
name|bb
operator|.
name|put
argument_list|(
name|fileNameBytes
argument_list|)
expr_stmt|;
name|bb
operator|.
name|put
argument_list|(
name|filePathBytes
argument_list|)
expr_stmt|;
if|if
condition|(
name|oleBuilder
operator|.
name|getType
argument_list|()
operator|==
name|ContentType
operator|.
name|SIMPLE_PACKAGE
condition|)
block|{
name|bb
operator|.
name|putInt
argument_list|(
name|PS_EMBEDDED_FILE
argument_list|)
expr_stmt|;
name|bb
operator|.
name|putInt
argument_list|(
name|filePathBytes
operator|.
name|length
argument_list|)
expr_stmt|;
name|bb
operator|.
name|put
argument_list|(
name|filePathBytes
argument_list|,
literal|0
argument_list|,
name|filePathBytes
operator|.
name|length
argument_list|)
expr_stmt|;
name|bb
operator|.
name|putInt
argument_list|(
operator|(
name|int
operator|)
name|oleBuilder
operator|.
name|getContentLength
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|bb
operator|.
name|putInt
argument_list|(
name|PS_LINKED_FILE
argument_list|)
expr_stmt|;
name|bb
operator|.
name|putShort
argument_list|(
operator|(
name|short
operator|)
name|LINK_HEADER
argument_list|)
expr_stmt|;
block|}
return|return
name|headerBytes
return|;
block|}
specifier|private
specifier|static
name|byte
index|[]
name|writePackageStreamFooter
parameter_list|(
name|Builder
name|oleBuilder
parameter_list|)
block|{
comment|// note, these are _not_ zero terminated
name|byte
index|[]
name|fileNameBytes
init|=
name|oleBuilder
operator|.
name|getFileName
argument_list|()
operator|.
name|getBytes
argument_list|(
name|OLE_UTF_CHARSET
argument_list|)
decl_stmt|;
name|byte
index|[]
name|filePathBytes
init|=
name|oleBuilder
operator|.
name|getFilePath
argument_list|()
operator|.
name|getBytes
argument_list|(
name|OLE_UTF_CHARSET
argument_list|)
decl_stmt|;
name|int
name|footerLen
init|=
literal|12
operator|+
operator|(
name|filePathBytes
operator|.
name|length
operator|*
literal|2
operator|)
operator|+
name|fileNameBytes
operator|.
name|length
decl_stmt|;
name|byte
index|[]
name|footerBytes
init|=
operator|new
name|byte
index|[
name|footerLen
index|]
decl_stmt|;
name|ByteBuffer
name|bb
init|=
name|PageChannel
operator|.
name|wrap
argument_list|(
name|footerBytes
argument_list|)
decl_stmt|;
name|bb
operator|.
name|putInt
argument_list|(
name|filePathBytes
operator|.
name|length
operator|/
literal|2
argument_list|)
expr_stmt|;
name|bb
operator|.
name|put
argument_list|(
name|filePathBytes
argument_list|)
expr_stmt|;
name|bb
operator|.
name|putInt
argument_list|(
name|fileNameBytes
operator|.
name|length
operator|/
literal|2
argument_list|)
expr_stmt|;
name|bb
operator|.
name|put
argument_list|(
name|fileNameBytes
argument_list|)
expr_stmt|;
name|bb
operator|.
name|putInt
argument_list|(
name|filePathBytes
operator|.
name|length
operator|/
literal|2
argument_list|)
expr_stmt|;
name|bb
operator|.
name|put
argument_list|(
name|filePathBytes
argument_list|)
expr_stmt|;
return|return
name|footerBytes
return|;
block|}
comment|/**          * creates the appropriate ContentImpl for the given blob.          */
specifier|private
specifier|static
name|ContentImpl
name|parseContent
parameter_list|(
name|OleBlobImpl
name|blob
parameter_list|)
throws|throws
name|IOException
block|{
name|ByteBuffer
name|bb
init|=
name|PageChannel
operator|.
name|wrap
argument_list|(
name|blob
operator|.
name|getBytes
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|bb
operator|.
name|remaining
argument_list|()
operator|<
literal|2
operator|)
operator|||
operator|(
name|bb
operator|.
name|getShort
argument_list|()
operator|!=
name|PACKAGE_SIGNATURE
operator|)
condition|)
block|{
return|return
operator|new
name|UnknownContentImpl
argument_list|(
name|blob
argument_list|)
return|;
block|}
comment|// read outer package header
name|int
name|headerSize
init|=
name|bb
operator|.
name|getShort
argument_list|()
decl_stmt|;
comment|/* int objType = */
name|bb
operator|.
name|getInt
argument_list|()
expr_stmt|;
name|int
name|prettyNameLen
init|=
name|bb
operator|.
name|getShort
argument_list|()
decl_stmt|;
name|int
name|classNameLen
init|=
name|bb
operator|.
name|getShort
argument_list|()
decl_stmt|;
name|int
name|prettyNameOff
init|=
name|bb
operator|.
name|getShort
argument_list|()
decl_stmt|;
name|int
name|classNameOff
init|=
name|bb
operator|.
name|getShort
argument_list|()
decl_stmt|;
comment|/* int objSize = */
name|bb
operator|.
name|getInt
argument_list|()
expr_stmt|;
name|String
name|prettyName
init|=
name|readStr
argument_list|(
name|bb
argument_list|,
name|prettyNameOff
argument_list|,
name|prettyNameLen
argument_list|)
decl_stmt|;
name|String
name|className
init|=
name|readStr
argument_list|(
name|bb
argument_list|,
name|classNameOff
argument_list|,
name|classNameLen
argument_list|)
decl_stmt|;
name|bb
operator|.
name|position
argument_list|(
name|headerSize
argument_list|)
expr_stmt|;
comment|// read ole header
name|int
name|oleVer
init|=
name|bb
operator|.
name|getInt
argument_list|()
decl_stmt|;
comment|/* int format = */
name|bb
operator|.
name|getInt
argument_list|()
expr_stmt|;
if|if
condition|(
name|oleVer
operator|!=
name|OLE_VERSION
condition|)
block|{
return|return
operator|new
name|UnknownContentImpl
argument_list|(
name|blob
argument_list|)
return|;
block|}
name|int
name|typeNameLen
init|=
name|bb
operator|.
name|getInt
argument_list|()
decl_stmt|;
name|String
name|typeName
init|=
name|readStr
argument_list|(
name|bb
argument_list|,
name|bb
operator|.
name|position
argument_list|()
argument_list|,
name|typeNameLen
argument_list|)
decl_stmt|;
name|bb
operator|.
name|getLong
argument_list|()
expr_stmt|;
comment|// unused
name|int
name|dataBlockLen
init|=
name|bb
operator|.
name|getInt
argument_list|()
decl_stmt|;
name|int
name|dataBlockPos
init|=
name|bb
operator|.
name|position
argument_list|()
decl_stmt|;
if|if
condition|(
name|SIMPLE_PACKAGE_TYPE
operator|.
name|equalsIgnoreCase
argument_list|(
name|typeName
argument_list|)
condition|)
block|{
return|return
name|createSimplePackageContent
argument_list|(
name|blob
argument_list|,
name|prettyName
argument_list|,
name|className
argument_list|,
name|typeName
argument_list|,
name|bb
argument_list|,
name|dataBlockLen
argument_list|)
return|;
block|}
comment|// if COMPOUND_FACTORY is null, the poi library isn't available, so just
comment|// load compound data as "other"
if|if
condition|(
operator|(
name|COMPOUND_FACTORY
operator|!=
literal|null
operator|)
operator|&&
operator|(
name|bb
operator|.
name|remaining
argument_list|()
operator|>=
name|COMPOUND_STORAGE_SIGNATURE
operator|.
name|length
operator|)
operator|&&
name|ByteUtil
operator|.
name|matchesRange
argument_list|(
name|bb
argument_list|,
name|bb
operator|.
name|position
argument_list|()
argument_list|,
name|COMPOUND_STORAGE_SIGNATURE
argument_list|)
condition|)
block|{
return|return
name|COMPOUND_FACTORY
operator|.
name|createCompoundPackageContent
argument_list|(
name|blob
argument_list|,
name|prettyName
argument_list|,
name|className
argument_list|,
name|typeName
argument_list|,
name|bb
argument_list|,
name|dataBlockLen
argument_list|)
return|;
block|}
comment|// this is either some other "special" (as yet unhandled) format, or it is
comment|// simply an embedded file (or it is compound data and poi isn't available)
return|return
operator|new
name|OtherContentImpl
argument_list|(
name|blob
argument_list|,
name|prettyName
argument_list|,
name|className
argument_list|,
name|typeName
argument_list|,
name|dataBlockPos
argument_list|,
name|dataBlockLen
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|ContentImpl
name|createSimplePackageContent
parameter_list|(
name|OleBlobImpl
name|blob
parameter_list|,
name|String
name|prettyName
parameter_list|,
name|String
name|className
parameter_list|,
name|String
name|typeName
parameter_list|,
name|ByteBuffer
name|blobBb
parameter_list|,
name|int
name|dataBlockLen
parameter_list|)
block|{
name|int
name|dataBlockPos
init|=
name|blobBb
operator|.
name|position
argument_list|()
decl_stmt|;
name|ByteBuffer
name|bb
init|=
name|PageChannel
operator|.
name|narrowBuffer
argument_list|(
name|blobBb
argument_list|,
name|dataBlockPos
argument_list|,
name|dataBlockPos
operator|+
name|dataBlockLen
argument_list|)
decl_stmt|;
name|int
name|packageSig
init|=
name|bb
operator|.
name|getShort
argument_list|()
decl_stmt|;
if|if
condition|(
name|packageSig
operator|!=
name|PACKAGE_STREAM_SIGNATURE
condition|)
block|{
return|return
operator|new
name|OtherContentImpl
argument_list|(
name|blob
argument_list|,
name|prettyName
argument_list|,
name|className
argument_list|,
name|typeName
argument_list|,
name|dataBlockPos
argument_list|,
name|dataBlockLen
argument_list|)
return|;
block|}
name|String
name|fileName
init|=
name|readZeroTermStr
argument_list|(
name|bb
argument_list|)
decl_stmt|;
name|String
name|filePath
init|=
name|readZeroTermStr
argument_list|(
name|bb
argument_list|)
decl_stmt|;
name|int
name|packageType
init|=
name|bb
operator|.
name|getInt
argument_list|()
decl_stmt|;
if|if
condition|(
name|packageType
operator|==
name|PS_EMBEDDED_FILE
condition|)
block|{
name|int
name|localFilePathLen
init|=
name|bb
operator|.
name|getInt
argument_list|()
decl_stmt|;
name|String
name|localFilePath
init|=
name|readStr
argument_list|(
name|bb
argument_list|,
name|bb
operator|.
name|position
argument_list|()
argument_list|,
name|localFilePathLen
argument_list|)
decl_stmt|;
name|int
name|dataLen
init|=
name|bb
operator|.
name|getInt
argument_list|()
decl_stmt|;
name|int
name|dataPos
init|=
name|bb
operator|.
name|position
argument_list|()
decl_stmt|;
name|bb
operator|.
name|position
argument_list|(
name|dataLen
operator|+
name|dataPos
argument_list|)
expr_stmt|;
comment|// remaining strings are in "reverse" order (local file path, file name,
comment|// file path).  these string usee a real utf charset, and therefore can
comment|// "fix" problems with ascii based names (so we prefer these strings to
comment|// the original strings we found)
name|int
name|strNum
init|=
literal|0
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|int
name|rem
init|=
name|bb
operator|.
name|remaining
argument_list|()
decl_stmt|;
if|if
condition|(
name|rem
operator|<
literal|4
condition|)
block|{
break|break;
block|}
name|int
name|strLen
init|=
name|bb
operator|.
name|getInt
argument_list|()
decl_stmt|;
name|String
name|remStr
init|=
name|readStr
argument_list|(
name|bb
argument_list|,
name|bb
operator|.
name|position
argument_list|()
argument_list|,
name|strLen
operator|*
literal|2
argument_list|,
name|OLE_UTF_CHARSET
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|strNum
condition|)
block|{
case|case
literal|0
case|:
name|localFilePath
operator|=
name|remStr
expr_stmt|;
break|break;
case|case
literal|1
case|:
name|fileName
operator|=
name|remStr
expr_stmt|;
break|break;
case|case
literal|2
case|:
name|filePath
operator|=
name|remStr
expr_stmt|;
break|break;
default|default:
comment|// ignore
block|}
operator|++
name|strNum
expr_stmt|;
block|}
return|return
operator|new
name|SimplePackageContentImpl
argument_list|(
name|blob
argument_list|,
name|prettyName
argument_list|,
name|className
argument_list|,
name|typeName
argument_list|,
name|dataPos
argument_list|,
name|dataLen
argument_list|,
name|fileName
argument_list|,
name|filePath
argument_list|,
name|localFilePath
argument_list|)
return|;
block|}
if|if
condition|(
name|packageType
operator|==
name|PS_LINKED_FILE
condition|)
block|{
name|bb
operator|.
name|getShort
argument_list|()
expr_stmt|;
comment|//unknown
name|String
name|linkStr
init|=
name|readZeroTermStr
argument_list|(
name|bb
argument_list|)
decl_stmt|;
return|return
operator|new
name|LinkContentImpl
argument_list|(
name|blob
argument_list|,
name|prettyName
argument_list|,
name|className
argument_list|,
name|typeName
argument_list|,
name|fileName
argument_list|,
name|linkStr
argument_list|,
name|filePath
argument_list|)
return|;
block|}
return|return
operator|new
name|OtherContentImpl
argument_list|(
name|blob
argument_list|,
name|prettyName
argument_list|,
name|className
argument_list|,
name|typeName
argument_list|,
name|dataBlockPos
argument_list|,
name|dataBlockLen
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|String
name|readStr
parameter_list|(
name|ByteBuffer
name|bb
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|)
block|{
return|return
name|readStr
argument_list|(
name|bb
argument_list|,
name|off
argument_list|,
name|len
argument_list|,
name|OLE_CHARSET
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|String
name|readZeroTermStr
parameter_list|(
name|ByteBuffer
name|bb
parameter_list|)
block|{
name|int
name|off
init|=
name|bb
operator|.
name|position
argument_list|()
decl_stmt|;
while|while
condition|(
name|bb
operator|.
name|hasRemaining
argument_list|()
condition|)
block|{
name|byte
name|b
init|=
name|bb
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|b
operator|==
literal|0
condition|)
block|{
break|break;
block|}
block|}
name|int
name|len
init|=
name|bb
operator|.
name|position
argument_list|()
operator|-
name|off
decl_stmt|;
return|return
name|readStr
argument_list|(
name|bb
argument_list|,
name|off
argument_list|,
name|len
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|String
name|readStr
parameter_list|(
name|ByteBuffer
name|bb
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|,
name|Charset
name|charset
parameter_list|)
block|{
name|String
name|str
init|=
operator|new
name|String
argument_list|(
name|bb
operator|.
name|array
argument_list|()
argument_list|,
name|off
argument_list|,
name|len
argument_list|,
name|charset
argument_list|)
decl_stmt|;
name|bb
operator|.
name|position
argument_list|(
name|off
operator|+
name|len
argument_list|)
expr_stmt|;
if|if
condition|(
name|str
operator|.
name|charAt
argument_list|(
name|str
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
operator|==
literal|'\0'
condition|)
block|{
name|str
operator|=
name|str
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|str
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
return|return
name|str
return|;
block|}
specifier|private
specifier|static
name|byte
index|[]
name|getZeroTermStrBytes
parameter_list|(
name|String
name|str
parameter_list|)
block|{
comment|// since we are converting to ascii, try to make "nicer" versions of crazy
comment|// chars (e.g. convert "u with an umlaut" to just "u").  this may not
comment|// ultimately help anything but it is what ms access does.
comment|// decompose complex chars into combos of char and accent
name|str
operator|=
name|Normalizer
operator|.
name|normalize
argument_list|(
name|str
argument_list|,
name|Normalizer
operator|.
name|Form
operator|.
name|NFD
argument_list|)
expr_stmt|;
comment|// strip the accents
name|str
operator|=
name|UNICODE_ACCENT_PATTERN
operator|.
name|matcher
argument_list|(
name|str
argument_list|)
operator|.
name|replaceAll
argument_list|(
literal|""
argument_list|)
expr_stmt|;
comment|// (re)normalize what is left
name|str
operator|=
name|Normalizer
operator|.
name|normalize
argument_list|(
name|str
argument_list|,
name|Normalizer
operator|.
name|Form
operator|.
name|NFC
argument_list|)
expr_stmt|;
return|return
operator|(
name|str
operator|+
literal|'\0'
operator|)
operator|.
name|getBytes
argument_list|(
name|OLE_CHARSET
argument_list|)
return|;
block|}
specifier|static
specifier|final
class|class
name|OleBlobImpl
implements|implements
name|OleBlob
block|{
specifier|private
name|byte
index|[]
name|_bytes
decl_stmt|;
specifier|private
name|ContentImpl
name|_content
decl_stmt|;
specifier|private
name|OleBlobImpl
parameter_list|(
name|byte
index|[]
name|bytes
parameter_list|)
block|{
name|_bytes
operator|=
name|bytes
expr_stmt|;
block|}
specifier|public
name|void
name|writeTo
parameter_list|(
name|OutputStream
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|write
argument_list|(
name|_bytes
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Content
name|getContent
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|_content
operator|==
literal|null
condition|)
block|{
name|_content
operator|=
name|parseContent
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
return|return
name|_content
return|;
block|}
specifier|public
name|InputStream
name|getBinaryStream
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
operator|new
name|ByteArrayInputStream
argument_list|(
name|_bytes
argument_list|)
return|;
block|}
specifier|public
name|InputStream
name|getBinaryStream
parameter_list|(
name|long
name|pos
parameter_list|,
name|long
name|len
parameter_list|)
throws|throws
name|SQLException
block|{
return|return
operator|new
name|ByteArrayInputStream
argument_list|(
name|_bytes
argument_list|,
name|fromJdbcOffset
argument_list|(
name|pos
argument_list|)
argument_list|,
operator|(
name|int
operator|)
name|len
argument_list|)
return|;
block|}
specifier|public
name|long
name|length
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
name|_bytes
operator|.
name|length
return|;
block|}
specifier|public
name|byte
index|[]
name|getBytes
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|_bytes
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"blob is closed"
argument_list|)
throw|;
block|}
return|return
name|_bytes
return|;
block|}
specifier|public
name|byte
index|[]
name|getBytes
parameter_list|(
name|long
name|pos
parameter_list|,
name|int
name|len
parameter_list|)
throws|throws
name|SQLException
block|{
return|return
name|ByteUtil
operator|.
name|copyOf
argument_list|(
name|_bytes
argument_list|,
name|fromJdbcOffset
argument_list|(
name|pos
argument_list|)
argument_list|,
name|len
argument_list|)
return|;
block|}
specifier|public
name|long
name|position
parameter_list|(
name|byte
index|[]
name|pattern
parameter_list|,
name|long
name|start
parameter_list|)
throws|throws
name|SQLException
block|{
name|int
name|pos
init|=
name|ByteUtil
operator|.
name|findRange
argument_list|(
name|PageChannel
operator|.
name|wrap
argument_list|(
name|_bytes
argument_list|)
argument_list|,
name|fromJdbcOffset
argument_list|(
name|start
argument_list|)
argument_list|,
name|pattern
argument_list|)
decl_stmt|;
return|return
operator|(
operator|(
name|pos
operator|>=
literal|0
operator|)
condition|?
name|toJdbcOffset
argument_list|(
name|pos
argument_list|)
else|:
name|pos
operator|)
return|;
block|}
specifier|public
name|long
name|position
parameter_list|(
name|Blob
name|pattern
parameter_list|,
name|long
name|start
parameter_list|)
throws|throws
name|SQLException
block|{
return|return
name|position
argument_list|(
name|pattern
operator|.
name|getBytes
argument_list|(
literal|1L
argument_list|,
operator|(
name|int
operator|)
name|pattern
operator|.
name|length
argument_list|()
argument_list|)
argument_list|,
name|start
argument_list|)
return|;
block|}
specifier|public
name|OutputStream
name|setBinaryStream
parameter_list|(
name|long
name|position
parameter_list|)
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|SQLFeatureNotSupportedException
argument_list|()
throw|;
block|}
specifier|public
name|void
name|truncate
parameter_list|(
name|long
name|len
parameter_list|)
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|SQLFeatureNotSupportedException
argument_list|()
throw|;
block|}
specifier|public
name|int
name|setBytes
parameter_list|(
name|long
name|pos
parameter_list|,
name|byte
index|[]
name|bytes
parameter_list|)
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|SQLFeatureNotSupportedException
argument_list|()
throw|;
block|}
specifier|public
name|int
name|setBytes
parameter_list|(
name|long
name|pos
parameter_list|,
name|byte
index|[]
name|bytes
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|lesn
parameter_list|)
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|SQLFeatureNotSupportedException
argument_list|()
throw|;
block|}
specifier|public
name|void
name|free
parameter_list|()
block|{
name|close
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|close
parameter_list|()
block|{
name|_bytes
operator|=
literal|null
expr_stmt|;
name|ByteUtil
operator|.
name|closeQuietly
argument_list|(
name|_content
argument_list|)
expr_stmt|;
name|_content
operator|=
literal|null
expr_stmt|;
block|}
specifier|private
specifier|static
name|int
name|toJdbcOffset
parameter_list|(
name|int
name|off
parameter_list|)
block|{
return|return
name|off
operator|+
literal|1
return|;
block|}
specifier|private
specifier|static
name|int
name|fromJdbcOffset
parameter_list|(
name|long
name|off
parameter_list|)
block|{
return|return
operator|(
name|int
operator|)
name|off
operator|-
literal|1
return|;
block|}
block|}
specifier|static
specifier|abstract
class|class
name|ContentImpl
implements|implements
name|Content
implements|,
name|Closeable
block|{
specifier|protected
specifier|final
name|OleBlobImpl
name|_blob
decl_stmt|;
specifier|protected
name|ContentImpl
parameter_list|(
name|OleBlobImpl
name|blob
parameter_list|)
block|{
name|_blob
operator|=
name|blob
expr_stmt|;
block|}
specifier|public
name|OleBlobImpl
name|getBlob
parameter_list|()
block|{
return|return
name|_blob
return|;
block|}
specifier|protected
name|byte
index|[]
name|getBytes
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|getBlob
argument_list|()
operator|.
name|getBytes
argument_list|()
return|;
block|}
specifier|public
name|void
name|close
parameter_list|()
block|{
comment|// base does nothing
block|}
block|}
specifier|static
specifier|abstract
class|class
name|EmbeddedContentImpl
extends|extends
name|ContentImpl
implements|implements
name|EmbeddedContent
block|{
specifier|private
specifier|final
name|int
name|_position
decl_stmt|;
specifier|private
specifier|final
name|int
name|_length
decl_stmt|;
specifier|protected
name|EmbeddedContentImpl
parameter_list|(
name|OleBlobImpl
name|blob
parameter_list|,
name|int
name|position
parameter_list|,
name|int
name|length
parameter_list|)
block|{
name|super
argument_list|(
name|blob
argument_list|)
expr_stmt|;
name|_position
operator|=
name|position
expr_stmt|;
name|_length
operator|=
name|length
expr_stmt|;
block|}
specifier|public
name|long
name|length
parameter_list|()
block|{
return|return
name|_length
return|;
block|}
specifier|public
name|InputStream
name|getStream
parameter_list|()
throws|throws
name|IOException
block|{
return|return
operator|new
name|ByteArrayInputStream
argument_list|(
name|getBytes
argument_list|()
argument_list|,
name|_position
argument_list|,
name|_length
argument_list|)
return|;
block|}
specifier|public
name|void
name|writeTo
parameter_list|(
name|OutputStream
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|write
argument_list|(
name|getBytes
argument_list|()
argument_list|,
name|_position
argument_list|,
name|_length
argument_list|)
expr_stmt|;
block|}
block|}
specifier|static
specifier|abstract
class|class
name|EmbeddedPackageContentImpl
extends|extends
name|EmbeddedContentImpl
implements|implements
name|PackageContent
block|{
specifier|private
specifier|final
name|String
name|_prettyName
decl_stmt|;
specifier|private
specifier|final
name|String
name|_className
decl_stmt|;
specifier|private
specifier|final
name|String
name|_typeName
decl_stmt|;
specifier|protected
name|EmbeddedPackageContentImpl
parameter_list|(
name|OleBlobImpl
name|blob
parameter_list|,
name|String
name|prettyName
parameter_list|,
name|String
name|className
parameter_list|,
name|String
name|typeName
parameter_list|,
name|int
name|position
parameter_list|,
name|int
name|length
parameter_list|)
block|{
name|super
argument_list|(
name|blob
argument_list|,
name|position
argument_list|,
name|length
argument_list|)
expr_stmt|;
name|_prettyName
operator|=
name|prettyName
expr_stmt|;
name|_className
operator|=
name|className
expr_stmt|;
name|_typeName
operator|=
name|typeName
expr_stmt|;
block|}
specifier|public
name|String
name|getPrettyName
parameter_list|()
block|{
return|return
name|_prettyName
return|;
block|}
specifier|public
name|String
name|getClassName
parameter_list|()
block|{
return|return
name|_className
return|;
block|}
specifier|public
name|String
name|getTypeName
parameter_list|()
block|{
return|return
name|_typeName
return|;
block|}
block|}
specifier|private
specifier|static
specifier|final
class|class
name|LinkContentImpl
extends|extends
name|EmbeddedPackageContentImpl
implements|implements
name|LinkContent
block|{
specifier|private
specifier|final
name|String
name|_fileName
decl_stmt|;
specifier|private
specifier|final
name|String
name|_linkPath
decl_stmt|;
specifier|private
specifier|final
name|String
name|_filePath
decl_stmt|;
specifier|private
name|LinkContentImpl
parameter_list|(
name|OleBlobImpl
name|blob
parameter_list|,
name|String
name|prettyName
parameter_list|,
name|String
name|className
parameter_list|,
name|String
name|typeName
parameter_list|,
name|String
name|fileName
parameter_list|,
name|String
name|linkPath
parameter_list|,
name|String
name|filePath
parameter_list|)
block|{
name|super
argument_list|(
name|blob
argument_list|,
name|prettyName
argument_list|,
name|className
argument_list|,
name|typeName
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|_fileName
operator|=
name|fileName
expr_stmt|;
name|_linkPath
operator|=
name|linkPath
expr_stmt|;
name|_filePath
operator|=
name|filePath
expr_stmt|;
block|}
specifier|public
name|ContentType
name|getType
parameter_list|()
block|{
return|return
name|ContentType
operator|.
name|LINK
return|;
block|}
specifier|public
name|String
name|getFileName
parameter_list|()
block|{
return|return
name|_fileName
return|;
block|}
specifier|public
name|String
name|getLinkPath
parameter_list|()
block|{
return|return
name|_linkPath
return|;
block|}
specifier|public
name|String
name|getFilePath
parameter_list|()
block|{
return|return
name|_filePath
return|;
block|}
specifier|public
name|InputStream
name|getLinkStream
parameter_list|()
throws|throws
name|IOException
block|{
return|return
operator|new
name|FileInputStream
argument_list|(
name|getLinkPath
argument_list|()
argument_list|)
return|;
block|}
block|}
specifier|private
specifier|static
specifier|final
class|class
name|SimplePackageContentImpl
extends|extends
name|EmbeddedPackageContentImpl
implements|implements
name|SimplePackageContent
block|{
specifier|private
specifier|final
name|String
name|_fileName
decl_stmt|;
specifier|private
specifier|final
name|String
name|_filePath
decl_stmt|;
specifier|private
specifier|final
name|String
name|_localFilePath
decl_stmt|;
specifier|private
name|SimplePackageContentImpl
parameter_list|(
name|OleBlobImpl
name|blob
parameter_list|,
name|String
name|prettyName
parameter_list|,
name|String
name|className
parameter_list|,
name|String
name|typeName
parameter_list|,
name|int
name|position
parameter_list|,
name|int
name|length
parameter_list|,
name|String
name|fileName
parameter_list|,
name|String
name|filePath
parameter_list|,
name|String
name|localFilePath
parameter_list|)
block|{
name|super
argument_list|(
name|blob
argument_list|,
name|prettyName
argument_list|,
name|className
argument_list|,
name|typeName
argument_list|,
name|position
argument_list|,
name|length
argument_list|)
expr_stmt|;
name|_fileName
operator|=
name|fileName
expr_stmt|;
name|_filePath
operator|=
name|filePath
expr_stmt|;
name|_localFilePath
operator|=
name|localFilePath
expr_stmt|;
block|}
specifier|public
name|ContentType
name|getType
parameter_list|()
block|{
return|return
name|ContentType
operator|.
name|SIMPLE_PACKAGE
return|;
block|}
specifier|public
name|String
name|getFileName
parameter_list|()
block|{
return|return
name|_fileName
return|;
block|}
specifier|public
name|String
name|getFilePath
parameter_list|()
block|{
return|return
name|_filePath
return|;
block|}
specifier|public
name|String
name|getLocalFilePath
parameter_list|()
block|{
return|return
name|_localFilePath
return|;
block|}
block|}
specifier|private
specifier|static
specifier|final
class|class
name|OtherContentImpl
extends|extends
name|EmbeddedPackageContentImpl
implements|implements
name|OtherContent
block|{
specifier|private
name|OtherContentImpl
parameter_list|(
name|OleBlobImpl
name|blob
parameter_list|,
name|String
name|prettyName
parameter_list|,
name|String
name|className
parameter_list|,
name|String
name|typeName
parameter_list|,
name|int
name|position
parameter_list|,
name|int
name|length
parameter_list|)
block|{
name|super
argument_list|(
name|blob
argument_list|,
name|prettyName
argument_list|,
name|className
argument_list|,
name|typeName
argument_list|,
name|position
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
specifier|public
name|ContentType
name|getType
parameter_list|()
block|{
return|return
name|ContentType
operator|.
name|OTHER
return|;
block|}
block|}
specifier|private
specifier|static
specifier|final
class|class
name|UnknownContentImpl
extends|extends
name|ContentImpl
block|{
specifier|private
name|UnknownContentImpl
parameter_list|(
name|OleBlobImpl
name|blob
parameter_list|)
block|{
name|super
argument_list|(
name|blob
argument_list|)
expr_stmt|;
block|}
specifier|public
name|ContentType
name|getType
parameter_list|()
block|{
return|return
name|ContentType
operator|.
name|UNKNOWN
return|;
block|}
block|}
block|}
end_class

end_unit

