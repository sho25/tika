begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|ner
operator|.
name|mitie
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|ner
operator|.
name|NERecogniser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  *  This class offers an implementation of {@link NERecogniser} based on  *  trained models using state-of-the-art information extraction tools. This NER requires additional setup,  *  due to runtime binding to MIT Information Extraction.  *  See<a href="http://wiki.apache.org/tika/TikaAndMITIE">  *      Tika MITIE Wiki</a> for configuring this recogniser.  *  @see NERecogniser  *  */
end_comment

begin_class
specifier|public
class|class
name|MITIENERecogniser
implements|implements
name|NERecogniser
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|MITIENERecogniser
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|MODEL_PROP_NAME
init|=
literal|"ner.mitie.model"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|ENTITY_TYPES
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
block|{
block|{
name|add
parameter_list|(
name|PERSON
parameter_list|)
constructor_decl|;
name|add
parameter_list|(
name|LOCATION
parameter_list|)
constructor_decl|;
name|add
parameter_list|(
name|ORGANIZATION
parameter_list|)
constructor_decl|;
name|add
argument_list|(
literal|"MISC"
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|NamedEntityExtractor_Class
init|=
literal|"edu.mit.ll.mitie.NamedEntityExtractor"
decl_stmt|;
specifier|private
name|boolean
name|available
init|=
literal|false
decl_stmt|;
specifier|private
name|Object
name|extractorInstance
decl_stmt|;
specifier|public
name|MITIENERecogniser
parameter_list|()
block|{
name|this
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
name|MODEL_PROP_NAME
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Creates a NERecogniser by loading model from given path      * @param modelPath path to NER model file      */
specifier|public
name|MITIENERecogniser
parameter_list|(
name|String
name|modelPath
parameter_list|)
block|{
try|try
block|{
if|if
condition|(
operator|!
operator|(
operator|new
name|File
argument_list|(
name|modelPath
argument_list|)
operator|)
operator|.
name|exists
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"{} does not exist"
argument_list|,
name|modelPath
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|namedEntityExtractorClass
init|=
name|Class
operator|.
name|forName
argument_list|(
name|NamedEntityExtractor_Class
argument_list|)
decl_stmt|;
name|extractorInstance
operator|=
name|namedEntityExtractorClass
operator|.
name|getDeclaredConstructor
argument_list|(
operator|new
name|Class
index|[]
block|{
name|String
operator|.
name|class
block|}
argument_list|)
operator|.
name|newInstance
argument_list|(
literal|"/Users/manali/cs599_dr/MITIE/MITIE-models/english/ner_model.dat"
argument_list|)
expr_stmt|;
name|this
operator|.
name|available
operator|=
literal|true
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"{} while trying to load the model from {}"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|modelPath
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Available for service ? {}"
argument_list|,
name|available
argument_list|)
expr_stmt|;
block|}
comment|/**      *      * @return {@code true} if model was available, valid and was able to initialise the classifier.      * returns {@code false} when this recogniser is not available for service.      */
specifier|public
name|boolean
name|isAvailable
parameter_list|()
block|{
return|return
name|available
return|;
block|}
comment|/**      * Gets set of entity types recognised by this recogniser      * @return set of entity classes/types      */
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|getEntityTypes
parameter_list|()
block|{
return|return
name|ENTITY_TYPES
return|;
block|}
comment|/**      * recognises names of entities in the text      * @param text text which possibly contains names      * @return map of entity type -> set of names      */
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|recognise
parameter_list|(
name|String
name|text
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|names
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
try|try
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|stringVectorClass
init|=
name|Class
operator|.
name|forName
argument_list|(
literal|"edu.mit.ll.mitie.StringVector"
argument_list|)
decl_stmt|;
name|Class
argument_list|<
name|?
argument_list|>
name|entityMentionVectorClass
init|=
name|Class
operator|.
name|forName
argument_list|(
literal|"edu.mit.ll.mitie.EntityMentionVector"
argument_list|)
decl_stmt|;
name|Class
argument_list|<
name|?
argument_list|>
name|entityMentionClass
init|=
name|Class
operator|.
name|forName
argument_list|(
literal|"edu.mit.ll.mitie.EntityMention"
argument_list|)
decl_stmt|;
name|Object
name|entityMentionObject
init|=
literal|null
decl_stmt|;
name|Class
argument_list|<
name|?
argument_list|>
name|globalClass
init|=
name|Class
operator|.
name|forName
argument_list|(
literal|"edu.mit.ll.mitie.global"
argument_list|)
decl_stmt|;
name|Object
name|stringVectorObject
init|=
name|extractorInstance
operator|.
name|getClass
argument_list|()
operator|.
name|getMethod
argument_list|(
literal|"getPossibleNerTags"
argument_list|)
operator|.
name|invoke
argument_list|(
name|extractorInstance
argument_list|)
decl_stmt|;
name|long
name|size
init|=
operator|(
name|Long
operator|)
name|stringVectorClass
operator|.
name|getMethod
argument_list|(
literal|"size"
argument_list|)
operator|.
name|invoke
argument_list|(
name|stringVectorObject
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|String
argument_list|>
name|possibleTags
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|long
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|String
name|t
init|=
operator|(
name|String
operator|)
name|stringVectorClass
operator|.
name|getMethod
argument_list|(
literal|"get"
argument_list|,
name|Integer
operator|.
name|TYPE
argument_list|)
operator|.
name|invoke
argument_list|(
name|stringVectorObject
argument_list|,
operator|(
name|int
operator|)
name|i
argument_list|)
decl_stmt|;
name|possibleTags
operator|.
name|add
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
name|Method
name|tokenize
init|=
name|globalClass
operator|.
name|getMethod
argument_list|(
literal|"tokenize"
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|stringVectorObject
operator|=
name|tokenize
operator|.
name|invoke
argument_list|(
name|globalClass
argument_list|,
name|text
argument_list|)
expr_stmt|;
name|ArrayList
argument_list|<
name|String
argument_list|>
name|stringVector
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|size
operator|=
operator|(
name|Long
operator|)
name|stringVectorClass
operator|.
name|getMethod
argument_list|(
literal|"size"
argument_list|)
operator|.
name|invoke
argument_list|(
name|stringVectorObject
argument_list|)
expr_stmt|;
for|for
control|(
name|long
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|String
name|t
init|=
operator|(
name|String
operator|)
name|stringVectorClass
operator|.
name|getMethod
argument_list|(
literal|"get"
argument_list|,
name|Integer
operator|.
name|TYPE
argument_list|)
operator|.
name|invoke
argument_list|(
name|stringVectorObject
argument_list|,
operator|(
name|int
operator|)
name|i
argument_list|)
decl_stmt|;
name|stringVector
operator|.
name|add
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
name|Method
name|extractEntities
init|=
name|extractorInstance
operator|.
name|getClass
argument_list|()
operator|.
name|getMethod
argument_list|(
literal|"extractEntities"
argument_list|,
name|stringVectorClass
argument_list|)
decl_stmt|;
name|Object
name|entities
init|=
name|extractEntities
operator|.
name|invoke
argument_list|(
name|extractorInstance
argument_list|,
name|stringVectorObject
argument_list|)
decl_stmt|;
name|size
operator|=
operator|(
name|Long
operator|)
name|entityMentionVectorClass
operator|.
name|getMethod
argument_list|(
literal|"size"
argument_list|)
operator|.
name|invoke
argument_list|(
name|entities
argument_list|)
expr_stmt|;
for|for
control|(
name|long
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|entityMentionObject
operator|=
name|entityMentionVectorClass
operator|.
name|getMethod
argument_list|(
literal|"get"
argument_list|,
name|Integer
operator|.
name|TYPE
argument_list|)
operator|.
name|invoke
argument_list|(
name|entities
argument_list|,
operator|(
name|int
operator|)
name|i
argument_list|)
expr_stmt|;
name|int
name|tag_index
init|=
operator|(
name|Integer
operator|)
name|entityMentionClass
operator|.
name|getMethod
argument_list|(
literal|"getTag"
argument_list|)
operator|.
name|invoke
argument_list|(
name|entityMentionObject
argument_list|)
decl_stmt|;
name|String
name|tag
init|=
name|possibleTags
operator|.
name|get
argument_list|(
name|tag_index
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|x
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|names
operator|.
name|containsKey
argument_list|(
name|tag
argument_list|)
condition|)
block|{
name|x
operator|=
name|names
operator|.
name|get
argument_list|(
name|tag
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|names
operator|.
name|put
argument_list|(
name|tag
argument_list|,
name|x
argument_list|)
expr_stmt|;
block|}
name|int
name|start
init|=
operator|(
name|Integer
operator|)
name|entityMentionClass
operator|.
name|getMethod
argument_list|(
literal|"getStart"
argument_list|)
operator|.
name|invoke
argument_list|(
name|entityMentionObject
argument_list|)
decl_stmt|;
name|int
name|end
init|=
operator|(
name|Integer
operator|)
name|entityMentionClass
operator|.
name|getMethod
argument_list|(
literal|"getEnd"
argument_list|)
operator|.
name|invoke
argument_list|(
name|entityMentionObject
argument_list|)
decl_stmt|;
name|String
name|match
init|=
literal|""
decl_stmt|;
for|for
control|(
init|;
name|start
operator|<
name|end
condition|;
name|start
operator|++
control|)
block|{
name|match
operator|+=
name|stringVector
operator|.
name|get
argument_list|(
name|start
argument_list|)
operator|+
literal|" "
expr_stmt|;
block|}
name|x
operator|.
name|add
argument_list|(
name|match
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
name|names
return|;
block|}
block|}
end_class

end_unit

