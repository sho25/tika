begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|image
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|UnsupportedEncodingException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|util
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|exception
operator|.
name|TikaException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|io
operator|.
name|EndianUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|metadata
operator|.
name|Metadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|metadata
operator|.
name|TIFF
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|mime
operator|.
name|MediaType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|AbstractParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|ParseContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|sax
operator|.
name|XHTMLContentHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|ContentHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_comment
comment|/**  * Parser for the Adobe Photoshop PSD File Format.  *   * Documentation on the file format is available from  * http://www.adobe.com/devnet-apps/photoshop/fileformatashtml/PhotoshopFileFormats.htm  */
end_comment

begin_class
specifier|public
class|class
name|PSDParser
extends|extends
name|AbstractParser
block|{
specifier|private
specifier|static
specifier|final
name|Set
argument_list|<
name|MediaType
argument_list|>
name|SUPPORTED_TYPES
init|=
name|Collections
operator|.
name|unmodifiableSet
argument_list|(
operator|new
name|HashSet
argument_list|<
name|MediaType
argument_list|>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|MediaType
operator|.
name|image
argument_list|(
literal|"vnd.adobe.photoshop"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
specifier|public
name|Set
argument_list|<
name|MediaType
argument_list|>
name|getSupportedTypes
parameter_list|(
name|ParseContext
name|context
parameter_list|)
block|{
return|return
name|SUPPORTED_TYPES
return|;
block|}
specifier|public
name|void
name|parse
parameter_list|(
name|InputStream
name|stream
parameter_list|,
name|ContentHandler
name|handler
parameter_list|,
name|Metadata
name|metadata
parameter_list|,
name|ParseContext
name|context
parameter_list|)
throws|throws
name|IOException
throws|,
name|SAXException
throws|,
name|TikaException
block|{
comment|// Check for the magic header signature
name|byte
index|[]
name|signature
init|=
operator|new
name|byte
index|[
literal|4
index|]
decl_stmt|;
name|IOUtils
operator|.
name|readFully
argument_list|(
name|stream
argument_list|,
name|signature
argument_list|)
expr_stmt|;
if|if
condition|(
name|signature
index|[
literal|0
index|]
operator|==
operator|(
name|byte
operator|)
literal|'8'
operator|&&
name|signature
index|[
literal|1
index|]
operator|==
operator|(
name|byte
operator|)
literal|'B'
operator|&&
name|signature
index|[
literal|2
index|]
operator|==
operator|(
name|byte
operator|)
literal|'P'
operator|&&
name|signature
index|[
literal|3
index|]
operator|==
operator|(
name|byte
operator|)
literal|'S'
condition|)
block|{
comment|// Good, signature found
block|}
else|else
block|{
throw|throw
operator|new
name|TikaException
argument_list|(
literal|"PSD/PSB magic signature invalid"
argument_list|)
throw|;
block|}
comment|// Check the version
name|int
name|version
init|=
name|EndianUtils
operator|.
name|readUShortBE
argument_list|(
name|stream
argument_list|)
decl_stmt|;
if|if
condition|(
name|version
operator|==
literal|1
operator|||
name|version
operator|==
literal|2
condition|)
block|{
comment|// Good, we support these two
block|}
else|else
block|{
throw|throw
operator|new
name|TikaException
argument_list|(
literal|"Invalid PSD/PSB version "
operator|+
name|version
argument_list|)
throw|;
block|}
comment|// Skip the reserved block
name|IOUtils
operator|.
name|readFully
argument_list|(
name|stream
argument_list|,
operator|new
name|byte
index|[
literal|6
index|]
argument_list|)
expr_stmt|;
comment|// Number of channels in the image
name|int
name|numChannels
init|=
name|EndianUtils
operator|.
name|readUShortBE
argument_list|(
name|stream
argument_list|)
decl_stmt|;
comment|// TODO Identify a suitable metadata key for this
comment|// Width and Height
name|int
name|height
init|=
name|EndianUtils
operator|.
name|readIntBE
argument_list|(
name|stream
argument_list|)
decl_stmt|;
name|int
name|width
init|=
name|EndianUtils
operator|.
name|readIntBE
argument_list|(
name|stream
argument_list|)
decl_stmt|;
name|metadata
operator|.
name|set
argument_list|(
name|TIFF
operator|.
name|IMAGE_LENGTH
argument_list|,
name|height
argument_list|)
expr_stmt|;
name|metadata
operator|.
name|set
argument_list|(
name|TIFF
operator|.
name|IMAGE_WIDTH
argument_list|,
name|width
argument_list|)
expr_stmt|;
comment|// Depth (bits per channel)
name|int
name|depth
init|=
name|EndianUtils
operator|.
name|readUShortBE
argument_list|(
name|stream
argument_list|)
decl_stmt|;
name|metadata
operator|.
name|set
argument_list|(
name|TIFF
operator|.
name|BITS_PER_SAMPLE
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|depth
argument_list|)
argument_list|)
expr_stmt|;
comment|// Colour mode
comment|// Bitmap = 0; Grayscale = 1; Indexed = 2; RGB = 3; CMYK = 4; Multichannel = 7; Duotone = 8; Lab = 9.
name|int
name|colorMode
init|=
name|EndianUtils
operator|.
name|readUShortBE
argument_list|(
name|stream
argument_list|)
decl_stmt|;
comment|// TODO Identify a suitable metadata key for this
comment|// Next is the Color Mode section
comment|// We don't care about this bit
name|long
name|colorModeSectionSize
init|=
name|EndianUtils
operator|.
name|readIntBE
argument_list|(
name|stream
argument_list|)
decl_stmt|;
name|stream
operator|.
name|skip
argument_list|(
name|colorModeSectionSize
argument_list|)
expr_stmt|;
comment|// Next is the Image Resources section
comment|// Check for certain interesting keys here
name|long
name|imageResourcesSectionSize
init|=
name|EndianUtils
operator|.
name|readIntBE
argument_list|(
name|stream
argument_list|)
decl_stmt|;
name|long
name|read
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|read
operator|<
name|imageResourcesSectionSize
condition|)
block|{
name|ResourceBlock
name|rb
init|=
operator|new
name|ResourceBlock
argument_list|(
name|stream
argument_list|)
decl_stmt|;
name|read
operator|+=
name|rb
operator|.
name|totalLength
expr_stmt|;
comment|// Is it one we can do something useful with?
if|if
condition|(
name|rb
operator|.
name|id
operator|==
name|ResourceBlock
operator|.
name|ID_CAPTION
condition|)
block|{
name|metadata
operator|.
name|add
argument_list|(
name|Metadata
operator|.
name|DESCRIPTION
argument_list|,
name|rb
operator|.
name|getDataAsString
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|rb
operator|.
name|id
operator|==
name|ResourceBlock
operator|.
name|ID_EXIF_1
condition|)
block|{
comment|// TODO Parse the EXIF info
block|}
elseif|else
if|if
condition|(
name|rb
operator|.
name|id
operator|==
name|ResourceBlock
operator|.
name|ID_EXIF_3
condition|)
block|{
comment|// TODO Parse the EXIF info
block|}
elseif|else
if|if
condition|(
name|rb
operator|.
name|id
operator|==
name|ResourceBlock
operator|.
name|ID_XMP
condition|)
block|{
comment|// TODO Parse the XMP info
block|}
block|}
comment|// Next is the Layer and Mask Info
comment|// Finally we have Image Data
comment|// We can't do anything with these parts
comment|// We don't have any helpful text, sorry...
name|XHTMLContentHandler
name|xhtml
init|=
operator|new
name|XHTMLContentHandler
argument_list|(
name|handler
argument_list|,
name|metadata
argument_list|)
decl_stmt|;
name|xhtml
operator|.
name|startDocument
argument_list|()
expr_stmt|;
name|xhtml
operator|.
name|endDocument
argument_list|()
expr_stmt|;
block|}
specifier|private
specifier|static
class|class
name|ResourceBlock
block|{
specifier|private
specifier|static
specifier|final
name|long
name|SIGNATURE
init|=
literal|0x3842494d
decl_stmt|;
comment|// 8BIM
specifier|private
specifier|static
specifier|final
name|int
name|ID_CAPTION
init|=
literal|0x03F0
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|ID_URL
init|=
literal|0x040B
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|ID_EXIF_1
init|=
literal|0x0422
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|ID_EXIF_3
init|=
literal|0x0423
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|ID_XMP
init|=
literal|0x0424
decl_stmt|;
specifier|private
name|int
name|id
decl_stmt|;
specifier|private
name|String
name|name
decl_stmt|;
specifier|private
name|byte
index|[]
name|data
decl_stmt|;
specifier|private
name|int
name|totalLength
decl_stmt|;
specifier|private
name|ResourceBlock
parameter_list|(
name|InputStream
name|stream
parameter_list|)
throws|throws
name|IOException
throws|,
name|TikaException
block|{
comment|// Verify the signature
name|long
name|sig
init|=
name|EndianUtils
operator|.
name|readIntBE
argument_list|(
name|stream
argument_list|)
decl_stmt|;
if|if
condition|(
name|sig
operator|!=
name|SIGNATURE
condition|)
block|{
throw|throw
operator|new
name|TikaException
argument_list|(
literal|"Invalid Image Resource Block Signature Found, got "
operator|+
name|sig
operator|+
literal|" 0x"
operator|+
name|Long
operator|.
name|toHexString
argument_list|(
name|sig
argument_list|)
operator|+
literal|" but the spec defines "
operator|+
name|SIGNATURE
argument_list|)
throw|;
block|}
comment|// Read the block
name|id
operator|=
name|EndianUtils
operator|.
name|readUShortBE
argument_list|(
name|stream
argument_list|)
expr_stmt|;
name|StringBuffer
name|nameB
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|int
name|nameLen
init|=
literal|0
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|int
name|v
init|=
name|stream
operator|.
name|read
argument_list|()
decl_stmt|;
name|nameLen
operator|++
expr_stmt|;
if|if
condition|(
name|v
operator|==
literal|0
condition|)
block|{
comment|// Even size, may be padded
if|if
condition|(
name|nameLen
operator|%
literal|2
operator|==
literal|1
condition|)
block|{
name|stream
operator|.
name|read
argument_list|()
expr_stmt|;
name|nameLen
operator|++
expr_stmt|;
block|}
break|break;
block|}
else|else
block|{
name|nameB
operator|.
name|append
argument_list|(
operator|(
name|char
operator|)
name|v
argument_list|)
expr_stmt|;
block|}
name|name
operator|=
name|nameB
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
name|int
name|dataLen
init|=
name|EndianUtils
operator|.
name|readIntBE
argument_list|(
name|stream
argument_list|)
decl_stmt|;
name|totalLength
operator|=
literal|4
operator|+
literal|2
operator|+
name|nameLen
operator|+
literal|4
operator|+
name|dataLen
expr_stmt|;
name|data
operator|=
operator|new
name|byte
index|[
name|dataLen
index|]
expr_stmt|;
name|IOUtils
operator|.
name|readFully
argument_list|(
name|stream
argument_list|,
name|data
argument_list|)
expr_stmt|;
block|}
specifier|private
name|String
name|getDataAsString
parameter_list|()
block|{
comment|// Will be null padded
try|try
block|{
return|return
operator|new
name|String
argument_list|(
name|data
argument_list|,
literal|0
argument_list|,
name|data
operator|.
name|length
operator|-
literal|1
argument_list|,
literal|"ASCII"
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|UnsupportedEncodingException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Something is very broken in your JVM!"
argument_list|)
throw|;
block|}
block|}
block|}
block|}
end_class

end_unit

