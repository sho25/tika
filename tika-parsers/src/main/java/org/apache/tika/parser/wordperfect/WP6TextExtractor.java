begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/* Copyright 2015-2016 Norconex Inc.  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|wordperfect
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|metadata
operator|.
name|Metadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|metadata
operator|.
name|WordPerfect
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|sax
operator|.
name|XHTMLContentHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_comment
comment|/**  * Extracts text from a WordPerfect document according to WP6 File Format.  * This format appears to be compatible with more recent versions too.  * @author Pascal Essiembre  */
end_comment

begin_class
class|class
name|WP6TextExtractor
block|{
specifier|public
name|void
name|extract
parameter_list|(
name|InputStream
name|input
parameter_list|,
name|XHTMLContentHandler
name|xhtml
parameter_list|,
name|Metadata
name|metadata
parameter_list|)
throws|throws
name|IOException
throws|,
name|SAXException
block|{
name|WPInputStream
name|in
init|=
operator|new
name|WPInputStream
argument_list|(
name|input
argument_list|)
decl_stmt|;
name|WP6FileHeader
name|header
init|=
name|parseFileHeader
argument_list|(
name|in
argument_list|)
decl_stmt|;
name|applyMetadata
argument_list|(
name|header
argument_list|,
name|metadata
argument_list|)
expr_stmt|;
comment|// For text extraction we can safely ignore WP Index Area and
comment|// Packet Data Area and jump right away to Document Area.
name|extractDocumentText
argument_list|(
name|in
argument_list|,
name|header
operator|.
name|getDocAreaPointer
argument_list|()
argument_list|,
name|xhtml
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|applyMetadata
parameter_list|(
name|WP6FileHeader
name|header
parameter_list|,
name|Metadata
name|metadata
parameter_list|)
block|{
name|metadata
operator|.
name|set
argument_list|(
name|WordPerfect
operator|.
name|FILE_SIZE
argument_list|,
name|Long
operator|.
name|toString
argument_list|(
name|header
operator|.
name|getFileSize
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|metadata
operator|.
name|set
argument_list|(
name|WordPerfect
operator|.
name|FILE_ID
argument_list|,
name|header
operator|.
name|getFileId
argument_list|()
argument_list|)
expr_stmt|;
name|metadata
operator|.
name|set
argument_list|(
name|WordPerfect
operator|.
name|PRODUCT_TYPE
argument_list|,
name|header
operator|.
name|getProductType
argument_list|()
argument_list|)
expr_stmt|;
name|metadata
operator|.
name|set
argument_list|(
name|WordPerfect
operator|.
name|FILE_TYPE
argument_list|,
name|header
operator|.
name|getFileType
argument_list|()
argument_list|)
expr_stmt|;
name|metadata
operator|.
name|set
argument_list|(
name|WordPerfect
operator|.
name|MAJOR_VERSION
argument_list|,
name|header
operator|.
name|getMajorVersion
argument_list|()
argument_list|)
expr_stmt|;
name|metadata
operator|.
name|set
argument_list|(
name|WordPerfect
operator|.
name|MINOR_VERSION
argument_list|,
name|header
operator|.
name|getMinorVersion
argument_list|()
argument_list|)
expr_stmt|;
name|metadata
operator|.
name|set
argument_list|(
name|WordPerfect
operator|.
name|ENCRYPTED
argument_list|,
name|Boolean
operator|.
name|toString
argument_list|(
name|header
operator|.
name|isEncrypted
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|extractDocumentText
parameter_list|(
name|WPInputStream
name|in
parameter_list|,
name|long
name|offset
parameter_list|,
name|XHTMLContentHandler
name|xhtml
parameter_list|)
throws|throws
name|IOException
throws|,
name|SAXException
block|{
name|xhtml
operator|.
name|startElement
argument_list|(
literal|"p"
argument_list|)
expr_stmt|;
comment|// Move to offset (for some reason skip() did not work).
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|offset
condition|;
name|i
operator|++
control|)
block|{
name|in
operator|.
name|readWPByte
argument_list|()
expr_stmt|;
block|}
name|int
name|chunk
init|=
literal|4096
decl_stmt|;
name|StringBuilder
name|out
init|=
operator|new
name|StringBuilder
argument_list|(
name|chunk
argument_list|)
decl_stmt|;
name|int
name|c
decl_stmt|;
while|while
condition|(
operator|(
name|c
operator|=
name|in
operator|.
name|read
argument_list|()
operator|)
operator|!=
operator|-
literal|1
condition|)
block|{
if|if
condition|(
name|c
operator|>
literal|0
operator|&&
name|c
operator|<=
literal|32
condition|)
block|{
name|out
operator|.
name|append
argument_list|(
name|WP6Constants
operator|.
name|DEFAULT_EXTENDED_INTL_CHARS
index|[
name|c
index|]
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|c
operator|>=
literal|33
operator|&&
name|c
operator|<=
literal|126
condition|)
block|{
name|out
operator|.
name|append
argument_list|(
operator|(
name|char
operator|)
name|c
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|c
operator|==
literal|128
condition|)
block|{
name|out
operator|.
name|append
argument_list|(
literal|' '
argument_list|)
expr_stmt|;
comment|// Soft space
block|}
elseif|else
if|if
condition|(
name|c
operator|==
literal|129
condition|)
block|{
name|out
operator|.
name|append
argument_list|(
literal|'\u00A0'
argument_list|)
expr_stmt|;
comment|// Hard space
block|}
elseif|else
if|if
condition|(
name|c
operator|==
literal|129
condition|)
block|{
name|out
operator|.
name|append
argument_list|(
literal|'-'
argument_list|)
expr_stmt|;
comment|// Hard hyphen
block|}
elseif|else
if|if
condition|(
name|c
operator|==
literal|135
operator|||
name|c
operator|==
literal|137
condition|)
block|{
name|out
operator|.
name|append
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
comment|// Dormant Hard return
block|}
elseif|else
if|if
condition|(
name|c
operator|==
literal|138
condition|)
block|{
comment|// skip to closing pair surrounding page number
name|skipUntilChar
argument_list|(
name|in
argument_list|,
literal|139
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|c
operator|==
literal|198
condition|)
block|{
comment|// end of cell
name|out
operator|.
name|append
argument_list|(
literal|'\t'
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|c
operator|>=
literal|180
operator|&&
name|c
operator|<=
literal|207
condition|)
block|{
name|out
operator|.
name|append
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|c
operator|>=
literal|208
operator|&&
name|c
operator|<=
literal|239
condition|)
block|{
comment|// Variable-Length Multi-Byte Functions
name|int
name|subgroup
init|=
name|in
operator|.
name|readWP
argument_list|()
decl_stmt|;
name|int
name|functionSize
init|=
name|in
operator|.
name|readWPShort
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|functionSize
operator|-
literal|4
condition|;
name|i
operator|++
control|)
block|{
name|in
operator|.
name|readWP
argument_list|()
expr_stmt|;
block|}
comment|// End-of-Line group
if|if
condition|(
name|c
operator|==
literal|208
condition|)
block|{
if|if
condition|(
name|subgroup
operator|>=
literal|1
operator|&&
name|subgroup
operator|<=
literal|3
condition|)
block|{
name|out
operator|.
name|append
argument_list|(
literal|' '
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|subgroup
operator|==
literal|10
condition|)
block|{
comment|// end of cell
name|out
operator|.
name|append
argument_list|(
literal|'\t'
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|subgroup
operator|>=
literal|4
operator|&&
name|subgroup
operator|<=
literal|19
condition|)
block|{
name|out
operator|.
name|append
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|subgroup
operator|>=
literal|20
operator|&&
name|subgroup
operator|<=
literal|22
condition|)
block|{
name|out
operator|.
name|append
argument_list|(
literal|' '
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|subgroup
operator|>=
literal|23
operator|&&
name|subgroup
operator|<=
literal|28
condition|)
block|{
name|out
operator|.
name|append
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|c
operator|==
literal|213
condition|)
block|{
name|out
operator|.
name|append
argument_list|(
literal|' '
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|c
operator|==
literal|224
condition|)
block|{
name|out
operator|.
name|append
argument_list|(
literal|'\t'
argument_list|)
expr_stmt|;
block|}
comment|//TODO Are there functions containing data? Like footnotes?
block|}
elseif|else
if|if
condition|(
name|c
operator|==
literal|240
condition|)
block|{
comment|// extended char
name|int
name|charval
init|=
name|in
operator|.
name|readWP
argument_list|()
decl_stmt|;
name|int
name|charset
init|=
name|in
operator|.
name|readWP
argument_list|()
decl_stmt|;
name|in
operator|.
name|readWP
argument_list|()
expr_stmt|;
comment|// closing character
comment|//TODO implement all charsets
if|if
condition|(
name|charset
operator|==
literal|4
operator|||
name|charset
operator|==
literal|5
condition|)
block|{
name|out
operator|.
name|append
argument_list|(
name|WP6Constants
operator|.
name|EXTENDED_CHARSETS
index|[
name|charset
index|]
index|[
name|charval
index|]
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|out
operator|.
name|append
argument_list|(
literal|"[TODO:charset"
operator|+
name|charset
operator|+
literal|"]"
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|c
operator|>=
literal|241
operator|&&
name|c
operator|<=
literal|254
condition|)
block|{
name|skipUntilChar
argument_list|(
name|in
argument_list|,
name|c
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|c
operator|==
literal|255
condition|)
block|{
name|skipUntilChar
argument_list|(
name|in
argument_list|,
name|c
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|out
operator|.
name|length
argument_list|()
operator|>=
name|chunk
condition|)
block|{
name|xhtml
operator|.
name|characters
argument_list|(
name|out
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|setLength
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Ignored codes above 127:
comment|// 130,131,133: soft hyphens
comment|// 134: invisible return in line
comment|// 136: soft end of center/align
comment|// 140: style separator mark
comment|// 141,142: start/end of text to skip
comment|// 143: exited hyphenation
comment|// 144: cancel hyphenation
comment|// 145-151: match functions
comment|// 152-179: unknown/ignored
comment|// 255: reserved, cannot be used
name|xhtml
operator|.
name|characters
argument_list|(
name|out
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|setLength
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|xhtml
operator|.
name|endElement
argument_list|(
literal|"p"
argument_list|)
expr_stmt|;
block|}
comment|// Skips until the given character is encountered.
specifier|private
name|int
name|skipUntilChar
parameter_list|(
name|WPInputStream
name|in
parameter_list|,
name|int
name|targetChar
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|count
init|=
literal|0
decl_stmt|;
name|int
name|c
decl_stmt|;
while|while
condition|(
operator|(
name|c
operator|=
name|in
operator|.
name|read
argument_list|()
operator|)
operator|!=
operator|-
literal|1
condition|)
block|{
name|count
operator|++
expr_stmt|;
if|if
condition|(
name|c
operator|==
name|targetChar
condition|)
block|{
return|return
name|count
return|;
block|}
block|}
return|return
name|count
return|;
block|}
specifier|private
name|WP6FileHeader
name|parseFileHeader
parameter_list|(
name|WPInputStream
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|WP6FileHeader
name|header
init|=
operator|new
name|WP6FileHeader
argument_list|()
decl_stmt|;
comment|// File header
name|in
operator|.
name|mark
argument_list|(
literal|30
argument_list|)
expr_stmt|;
name|header
operator|.
name|setFileId
argument_list|(
name|in
operator|.
name|readWPString
argument_list|(
literal|4
argument_list|)
argument_list|)
expr_stmt|;
comment|// 1-4
name|header
operator|.
name|setDocAreaPointer
argument_list|(
name|in
operator|.
name|readWPLong
argument_list|()
argument_list|)
expr_stmt|;
comment|// 5-8
name|header
operator|.
name|setProductType
argument_list|(
name|in
operator|.
name|readWP
argument_list|()
argument_list|)
expr_stmt|;
comment|// 9
name|header
operator|.
name|setFileType
argument_list|(
name|in
operator|.
name|readWPChar
argument_list|()
argument_list|)
expr_stmt|;
comment|// 10
name|header
operator|.
name|setMajorVersion
argument_list|(
name|in
operator|.
name|readWP
argument_list|()
argument_list|)
expr_stmt|;
comment|// 11
name|header
operator|.
name|setMinorVersion
argument_list|(
name|in
operator|.
name|readWP
argument_list|()
argument_list|)
expr_stmt|;
comment|// 12
name|header
operator|.
name|setEncrypted
argument_list|(
name|in
operator|.
name|readWPShort
argument_list|()
operator|!=
literal|0
argument_list|)
expr_stmt|;
comment|// 13-14
name|header
operator|.
name|setIndexAreaPointer
argument_list|(
name|in
operator|.
name|readWPShort
argument_list|()
argument_list|)
expr_stmt|;
comment|// 15-16
try|try
block|{
name|in
operator|.
name|skip
argument_list|(
literal|4
argument_list|)
expr_stmt|;
comment|// 4 reserved bytes: skip     // 17-20
name|header
operator|.
name|setFileSize
argument_list|(
name|in
operator|.
name|readWPLong
argument_list|()
argument_list|)
expr_stmt|;
comment|// 21-24
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// May fail if not extended error, which is fine.
block|}
name|in
operator|.
name|reset
argument_list|()
expr_stmt|;
comment|//TODO header may be shared between corel products, so move validation
comment|//specific to each product elsewhere?
comment|//TODO convert to logs only, and let it fail elsewhere?
comment|//        if (!WP6Constants.WP6_FILE_ID.equals(header.getFileId())) {
comment|//            throw new IOException("Not a WordPerfect file. File must start "
comment|//                    + "with " + WP6Constants.WP6_FILE_ID + " but was "
comment|//                    + header.getFileId());
comment|//        }
comment|//        if (WP6Constants.WP6_PRODUCT_TYPE != header.getProductType()) {
comment|//            throw new IOException("Not a WordPerfect file. Product type "
comment|//                    + "must be " + WP6Constants.WP6_PRODUCT_TYPE + " but was "
comment|//                    + header.getProductType());
comment|//        }
comment|//TODO perform file type validation?
return|return
name|header
return|;
block|}
block|}
end_class

end_unit

