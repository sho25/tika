begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|microsoft
operator|.
name|onenote
package|;
end_package

begin_comment
comment|/**  * Some types of FileNodes have an "fnd" variable.  * FND stands for "File Node Data"  *<p>  * These are the different types of FND variables there are.  *<p>  * The value of each constant corresponds to the FileNodeID property for the file node.  */
end_comment

begin_class
specifier|final
class|class
name|FndStructureConstants
block|{
specifier|private
name|FndStructureConstants
parameter_list|()
block|{
comment|// no op
block|}
specifier|static
specifier|final
name|long
name|ObjectSpaceManifestRootFND
init|=
literal|0x04
decl_stmt|;
specifier|static
specifier|final
name|long
name|ObjectSpaceManifestListReferenceFND
init|=
literal|0x08
decl_stmt|;
specifier|static
specifier|final
name|long
name|ObjectSpaceManifestListStartFND
init|=
literal|0x0c
decl_stmt|;
specifier|static
specifier|final
name|long
name|RevisionManifestListReferenceFND
init|=
literal|0x10
decl_stmt|;
specifier|static
specifier|final
name|long
name|RevisionManifestListStartFND
init|=
literal|0x14
decl_stmt|;
specifier|static
specifier|final
name|long
name|RevisionManifestStart4FND
init|=
literal|0x1b
decl_stmt|;
specifier|static
specifier|final
name|long
name|RevisionManifestEndFND
init|=
literal|0x1c
decl_stmt|;
specifier|static
specifier|final
name|long
name|RevisionManifestStart6FND
init|=
literal|0x1e
decl_stmt|;
specifier|static
specifier|final
name|long
name|RevisionManifestStart7FND
init|=
literal|0x1f
decl_stmt|;
specifier|static
specifier|final
name|long
name|GlobalIdTableStartFNDX
init|=
literal|0x21
decl_stmt|;
specifier|static
specifier|final
name|long
name|GlobalIdTableStart2FND
init|=
literal|0x22
decl_stmt|;
specifier|static
specifier|final
name|long
name|GlobalIdTableEntryFNDX
init|=
literal|0x24
decl_stmt|;
specifier|static
specifier|final
name|long
name|GlobalIdTableEntry2FNDX
init|=
literal|0x25
decl_stmt|;
specifier|static
specifier|final
name|long
name|GlobalIdTableEntry3FNDX
init|=
literal|0x26
decl_stmt|;
specifier|static
specifier|final
name|long
name|GlobalIdTableEndFNDX
init|=
literal|0x28
decl_stmt|;
specifier|public
specifier|static
specifier|final
class|class
name|CanRevise
block|{
specifier|private
name|CanRevise
parameter_list|()
block|{
comment|// no op
block|}
specifier|static
specifier|final
name|long
name|ObjectDeclarationWithRefCountFNDX
init|=
literal|0x2d
decl_stmt|;
specifier|static
specifier|final
name|long
name|ObjectDeclarationWithRefCount2FNDX
init|=
literal|0x2e
decl_stmt|;
specifier|static
specifier|final
name|long
name|ObjectRevisionWithRefCountFNDX
init|=
literal|0x041
decl_stmt|;
specifier|static
specifier|final
name|long
name|ObjectRevisionWithRefCount2FNDX
init|=
literal|0x42
decl_stmt|;
specifier|static
specifier|final
name|long
name|ObjectDeclaration2RefCountFND
init|=
literal|0x0A4
decl_stmt|;
specifier|static
specifier|final
name|long
name|ObjectDeclaration2LargeRefCountFND
init|=
literal|0xA5
decl_stmt|;
specifier|static
specifier|final
name|long
name|ReadOnlyObjectDeclaration2RefCountFND
init|=
literal|0xc4
decl_stmt|;
specifier|static
specifier|final
name|long
name|ReadOnlyObjectDeclaration2LargeRefCountFND
init|=
literal|0xc5
decl_stmt|;
specifier|static
specifier|final
name|long
name|ObjectDeclarationFileData3RefCountFND
init|=
literal|0x72
decl_stmt|;
specifier|static
specifier|final
name|long
name|ObjectDeclarationFileData3LargeRefCountFND
init|=
literal|0x73
decl_stmt|;
block|}
specifier|static
specifier|final
name|long
name|RootObjectReference2FNDX
init|=
literal|0x59
decl_stmt|;
specifier|static
specifier|final
name|long
name|RootObjectReference3FND
init|=
literal|0x5a
decl_stmt|;
comment|// each root object must have a differe
specifier|static
specifier|final
name|long
name|RevisionRoleDeclarationFND
init|=
literal|0x5c
decl_stmt|;
specifier|static
specifier|final
name|long
name|RevisionRoleAndContextDeclarationFND
init|=
literal|0x5d
decl_stmt|;
specifier|static
specifier|final
name|long
name|ObjectDataEncryptionKeyV2FNDX
init|=
literal|0x7c
decl_stmt|;
specifier|static
specifier|final
name|long
name|ObjectInfoDependencyOverridesFND
init|=
literal|0x84
decl_stmt|;
specifier|static
specifier|final
name|long
name|DataSignatureGroupDefinitionFND
init|=
literal|0x8c
decl_stmt|;
specifier|static
specifier|final
name|long
name|FileDataStoreListReferenceFND
init|=
literal|0x90
decl_stmt|;
specifier|static
specifier|final
name|long
name|FileDataStoreObjectReferenceFND
init|=
literal|0x94
decl_stmt|;
specifier|static
specifier|final
name|long
name|ObjectGroupListReferenceFND
init|=
literal|0xb0
decl_stmt|;
specifier|static
specifier|final
name|long
name|ObjectGroupStartFND
init|=
literal|0xb4
decl_stmt|;
specifier|static
specifier|final
name|long
name|ObjectGroupEndFND
init|=
literal|0xb8
decl_stmt|;
specifier|static
specifier|final
name|long
name|HashedChunkDescriptor2FND
init|=
literal|0xc2
decl_stmt|;
specifier|static
specifier|final
name|long
name|ChunkTerminatorFND
init|=
literal|0xff
decl_stmt|;
specifier|static
name|String
name|nameOf
parameter_list|(
name|long
name|type
parameter_list|)
block|{
switch|switch
condition|(
operator|new
name|Long
argument_list|(
name|type
argument_list|)
operator|.
name|intValue
argument_list|()
condition|)
block|{
case|case
operator|(
name|int
operator|)
name|ObjectSpaceManifestRootFND
case|:
return|return
literal|"ObjectSpaceManifestRootFND"
return|;
case|case
operator|(
name|int
operator|)
name|ObjectSpaceManifestListReferenceFND
case|:
return|return
literal|"ObjectSpaceManifestListReferenceFND"
return|;
case|case
operator|(
name|int
operator|)
name|ObjectSpaceManifestListStartFND
case|:
return|return
literal|"ObjectSpaceManifestListStartFND"
return|;
case|case
operator|(
name|int
operator|)
name|RevisionManifestListReferenceFND
case|:
return|return
literal|"RevisionManifestListReferenceFND"
return|;
case|case
operator|(
name|int
operator|)
name|RevisionManifestListStartFND
case|:
return|return
literal|"RevisionManifestListStartFND"
return|;
case|case
operator|(
name|int
operator|)
name|RevisionManifestStart4FND
case|:
return|return
literal|"RevisionManifestStart4FND"
return|;
case|case
operator|(
name|int
operator|)
name|RevisionManifestEndFND
case|:
return|return
literal|"RevisionManifestEndFND"
return|;
case|case
operator|(
name|int
operator|)
name|RevisionManifestStart6FND
case|:
return|return
literal|"RevisionManifestStart6FND"
return|;
case|case
operator|(
name|int
operator|)
name|RevisionManifestStart7FND
case|:
return|return
literal|"RevisionManifestStart7FND"
return|;
case|case
operator|(
name|int
operator|)
name|GlobalIdTableStartFNDX
case|:
return|return
literal|"GlobalIdTableStartFNDX"
return|;
case|case
operator|(
name|int
operator|)
name|GlobalIdTableStart2FND
case|:
return|return
literal|"GlobalIdTableStart2FND"
return|;
case|case
operator|(
name|int
operator|)
name|GlobalIdTableEntryFNDX
case|:
return|return
literal|"GlobalIdTableEntryFNDX"
return|;
case|case
operator|(
name|int
operator|)
name|GlobalIdTableEntry2FNDX
case|:
return|return
literal|"GlobalIdTableEntry2FNDX"
return|;
case|case
operator|(
name|int
operator|)
name|GlobalIdTableEntry3FNDX
case|:
return|return
literal|"GlobalIdTableEntry3FNDX"
return|;
case|case
operator|(
name|int
operator|)
name|GlobalIdTableEndFNDX
case|:
return|return
literal|"GlobalIdTableEndFNDX"
return|;
case|case
operator|(
name|int
operator|)
name|CanRevise
operator|.
name|ObjectDeclarationWithRefCountFNDX
case|:
return|return
literal|"ObjectDeclarationWithRefCountFNDX"
return|;
case|case
operator|(
name|int
operator|)
name|CanRevise
operator|.
name|ObjectDeclarationWithRefCount2FNDX
case|:
return|return
literal|"ObjectDeclarationWithRefCount2FNDX"
return|;
case|case
operator|(
name|int
operator|)
name|CanRevise
operator|.
name|ObjectRevisionWithRefCountFNDX
case|:
return|return
literal|"ObjectRevisionWithRefCountFNDX"
return|;
case|case
operator|(
name|int
operator|)
name|CanRevise
operator|.
name|ObjectRevisionWithRefCount2FNDX
case|:
return|return
literal|"ObjectRevisionWithRefCount2FNDX"
return|;
case|case
operator|(
name|int
operator|)
name|CanRevise
operator|.
name|ObjectDeclaration2RefCountFND
case|:
return|return
literal|"ObjectDeclaration2RefCountFND"
return|;
case|case
operator|(
name|int
operator|)
name|CanRevise
operator|.
name|ObjectDeclaration2LargeRefCountFND
case|:
return|return
literal|"ObjectDeclaration2LargeRefCountFND"
return|;
case|case
operator|(
name|int
operator|)
name|CanRevise
operator|.
name|ReadOnlyObjectDeclaration2RefCountFND
case|:
return|return
literal|"ReadOnlyObjectDeclaration2RefCountFND"
return|;
case|case
operator|(
name|int
operator|)
name|CanRevise
operator|.
name|ReadOnlyObjectDeclaration2LargeRefCountFND
case|:
return|return
literal|"ReadOnlyObjectDeclaration2LargeRefCountFND"
return|;
case|case
operator|(
name|int
operator|)
name|CanRevise
operator|.
name|ObjectDeclarationFileData3RefCountFND
case|:
return|return
literal|"ObjectDeclarationFileData3RefCountFND"
return|;
case|case
operator|(
name|int
operator|)
name|CanRevise
operator|.
name|ObjectDeclarationFileData3LargeRefCountFND
case|:
return|return
literal|"ObjectDeclarationFileData3LargeRefCountFND"
return|;
case|case
operator|(
name|int
operator|)
name|RootObjectReference2FNDX
case|:
return|return
literal|"RootObjectReference2FNDX"
return|;
case|case
operator|(
name|int
operator|)
name|RootObjectReference3FND
case|:
return|return
literal|"RootObjectReference3FND"
return|;
case|case
operator|(
name|int
operator|)
name|RevisionRoleDeclarationFND
case|:
return|return
literal|"RevisionRoleDeclarationFND"
return|;
case|case
operator|(
name|int
operator|)
name|RevisionRoleAndContextDeclarationFND
case|:
return|return
literal|"RevisionRoleAndContextDeclarationFND"
return|;
case|case
operator|(
name|int
operator|)
name|ObjectDataEncryptionKeyV2FNDX
case|:
return|return
literal|"ObjectDataEncryptionKeyV2FNDX"
return|;
case|case
operator|(
name|int
operator|)
name|ObjectInfoDependencyOverridesFND
case|:
return|return
literal|"ObjectInfoDependencyOverridesFND"
return|;
case|case
operator|(
name|int
operator|)
name|DataSignatureGroupDefinitionFND
case|:
return|return
literal|"DataSignatureGroupDefinitionFND"
return|;
case|case
operator|(
name|int
operator|)
name|FileDataStoreListReferenceFND
case|:
return|return
literal|"FileDataStoreListReferenceFND"
return|;
case|case
operator|(
name|int
operator|)
name|FileDataStoreObjectReferenceFND
case|:
return|return
literal|"FileDataStoreObjectReferenceFND"
return|;
case|case
operator|(
name|int
operator|)
name|ObjectGroupListReferenceFND
case|:
return|return
literal|"ObjectGroupListReferenceFND"
return|;
case|case
operator|(
name|int
operator|)
name|ObjectGroupStartFND
case|:
return|return
literal|"ObjectGroupStartFND"
return|;
case|case
operator|(
name|int
operator|)
name|ObjectGroupEndFND
case|:
return|return
literal|"ObjectGroupEndFND"
return|;
case|case
operator|(
name|int
operator|)
name|HashedChunkDescriptor2FND
case|:
return|return
literal|"HashedChunkDescriptor2FND"
return|;
case|case
operator|(
name|int
operator|)
name|ChunkTerminatorFND
case|:
return|return
literal|"ChunkTerminatorFND"
return|;
default|default:
return|return
literal|"UnknownFND"
return|;
block|}
block|}
block|}
end_class

end_unit

