begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|microsoft
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|hwpf
operator|.
name|converter
operator|.
name|NumberFormatter
import|;
end_import

begin_class
specifier|public
specifier|abstract
class|class
name|AbstractListManager
block|{
specifier|private
specifier|final
specifier|static
name|String
name|BULLET
init|=
literal|"\u00b7"
decl_stmt|;
specifier|protected
name|Map
argument_list|<
name|Integer
argument_list|,
name|ParagraphLevelCounter
argument_list|>
name|listLevelMap
init|=
operator|new
name|HashMap
argument_list|<
name|Integer
argument_list|,
name|ParagraphLevelCounter
argument_list|>
argument_list|()
decl_stmt|;
specifier|protected
name|Map
argument_list|<
name|Integer
argument_list|,
name|LevelTuple
index|[]
argument_list|>
name|overrideTupleMap
init|=
operator|new
name|HashMap
argument_list|<
name|Integer
argument_list|,
name|LevelTuple
index|[]
argument_list|>
argument_list|()
decl_stmt|;
comment|//helper class that is docx/doc format agnostic
specifier|protected
class|class
name|ParagraphLevelCounter
block|{
name|Pattern
name|LEVEL_INTERPOLATOR
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"%(\\d+)"
argument_list|)
decl_stmt|;
comment|//counts can == 0 if the format is decimal, make sure
comment|//that flag values are< 0
specifier|private
specifier|final
name|Integer
name|NOT_SEEN_YET
init|=
operator|-
literal|1
decl_stmt|;
specifier|private
specifier|final
name|Integer
name|FIRST_SKIPPED
init|=
operator|-
literal|2
decl_stmt|;
specifier|private
name|List
argument_list|<
name|Integer
argument_list|>
name|counts
init|=
operator|new
name|ArrayList
argument_list|<
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|LevelTuple
index|[]
name|levelTuples
decl_stmt|;
specifier|private
name|int
name|lastLevel
init|=
operator|-
literal|1
decl_stmt|;
specifier|public
name|ParagraphLevelCounter
parameter_list|(
name|LevelTuple
index|[]
name|levelTuples
parameter_list|)
block|{
name|this
operator|.
name|levelTuples
operator|=
name|levelTuples
expr_stmt|;
block|}
specifier|public
name|int
name|getNumberOfLevels
parameter_list|()
block|{
return|return
name|levelTuples
operator|.
name|length
return|;
block|}
comment|/**          * Apply this to every numbered paragraph in order.          *          * @param levelNumber     level number that is being incremented          * @return the new formatted number string for this level          */
specifier|public
name|String
name|incrementLevel
parameter_list|(
name|int
name|levelNumber
parameter_list|,
name|LevelTuple
index|[]
name|overrideLevelTuples
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
name|lastLevel
operator|+
literal|1
init|;
name|i
operator|<
name|levelNumber
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|>=
name|counts
operator|.
name|size
argument_list|()
condition|)
block|{
name|int
name|val
init|=
name|getStart
argument_list|(
name|i
argument_list|,
name|overrideLevelTuples
argument_list|)
decl_stmt|;
name|counts
operator|.
name|add
argument_list|(
name|i
argument_list|,
name|val
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|int
name|count
init|=
name|counts
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|count
operator|==
name|NOT_SEEN_YET
condition|)
block|{
name|count
operator|=
name|getStart
argument_list|(
name|i
argument_list|,
name|overrideLevelTuples
argument_list|)
expr_stmt|;
name|counts
operator|.
name|set
argument_list|(
name|i
argument_list|,
name|count
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|levelNumber
operator|<
name|counts
operator|.
name|size
argument_list|()
condition|)
block|{
name|resetAfter
argument_list|(
name|levelNumber
argument_list|,
name|overrideLevelTuples
argument_list|)
expr_stmt|;
name|int
name|count
init|=
name|counts
operator|.
name|get
argument_list|(
name|levelNumber
argument_list|)
decl_stmt|;
if|if
condition|(
name|count
operator|==
name|NOT_SEEN_YET
condition|)
block|{
name|count
operator|=
name|getStart
argument_list|(
name|levelNumber
argument_list|,
name|overrideLevelTuples
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|count
operator|++
expr_stmt|;
block|}
name|counts
operator|.
name|set
argument_list|(
name|levelNumber
argument_list|,
name|count
argument_list|)
expr_stmt|;
name|lastLevel
operator|=
name|levelNumber
expr_stmt|;
return|return
name|format
argument_list|(
name|levelNumber
argument_list|,
name|overrideLevelTuples
argument_list|)
return|;
block|}
name|counts
operator|.
name|add
argument_list|(
name|levelNumber
argument_list|,
name|getStart
argument_list|(
name|levelNumber
argument_list|,
name|overrideLevelTuples
argument_list|)
argument_list|)
expr_stmt|;
name|lastLevel
operator|=
name|levelNumber
expr_stmt|;
return|return
name|format
argument_list|(
name|levelNumber
argument_list|,
name|overrideLevelTuples
argument_list|)
return|;
block|}
comment|/**          * @param level which level to format          * @return the string that represents the number and the surrounding text for this paragraph          */
specifier|private
name|String
name|format
parameter_list|(
name|int
name|level
parameter_list|,
name|LevelTuple
index|[]
name|overrideLevelTuples
parameter_list|)
block|{
if|if
condition|(
name|level
operator|<
literal|0
operator|||
name|level
operator|>=
name|levelTuples
operator|.
name|length
condition|)
block|{
comment|//log?
return|return
literal|""
return|;
block|}
name|boolean
name|isLegal
init|=
operator|(
name|overrideLevelTuples
operator|!=
literal|null
operator|)
condition|?
name|overrideLevelTuples
index|[
name|level
index|]
operator|.
name|isLegal
else|:
name|levelTuples
index|[
name|level
index|]
operator|.
name|isLegal
decl_stmt|;
comment|//short circuit bullet
name|String
name|numFmt
init|=
name|getNumFormat
argument_list|(
name|level
argument_list|,
name|isLegal
argument_list|,
name|overrideLevelTuples
argument_list|)
decl_stmt|;
if|if
condition|(
literal|"bullet"
operator|.
name|equals
argument_list|(
name|numFmt
argument_list|)
condition|)
block|{
return|return
name|BULLET
operator|+
literal|" "
return|;
block|}
name|String
name|lvlText
init|=
operator|(
name|overrideLevelTuples
operator|==
literal|null
operator|||
name|overrideLevelTuples
index|[
name|level
index|]
operator|.
name|lvlText
operator|==
literal|null
operator|)
condition|?
name|levelTuples
index|[
name|level
index|]
operator|.
name|lvlText
else|:
name|overrideLevelTuples
index|[
name|level
index|]
operator|.
name|lvlText
decl_stmt|;
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|Matcher
name|m
init|=
name|LEVEL_INTERPOLATOR
operator|.
name|matcher
argument_list|(
name|lvlText
argument_list|)
decl_stmt|;
name|int
name|last
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|m
operator|.
name|find
argument_list|()
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|lvlText
operator|.
name|substring
argument_list|(
name|last
argument_list|,
name|m
operator|.
name|start
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|lvlString
init|=
name|m
operator|.
name|group
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|int
name|lvlNum
init|=
operator|-
literal|1
decl_stmt|;
try|try
block|{
name|lvlNum
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|lvlString
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
comment|//swallow
block|}
name|String
name|numString
init|=
literal|""
decl_stmt|;
comment|//need to subtract 1 because, e.g. %1 is the format
comment|//for the number at array offset 0
name|numString
operator|=
name|formatNum
argument_list|(
name|lvlNum
operator|-
literal|1
argument_list|,
name|isLegal
argument_list|,
name|overrideLevelTuples
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|numString
argument_list|)
expr_stmt|;
name|last
operator|=
name|m
operator|.
name|end
argument_list|()
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
name|lvlText
operator|.
name|substring
argument_list|(
name|last
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|sb
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
comment|//TODO: add in character after number
name|sb
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
comment|//actual level number
specifier|private
name|String
name|formatNum
parameter_list|(
name|int
name|lvlNum
parameter_list|,
name|boolean
name|isLegal
parameter_list|,
name|LevelTuple
index|[]
name|overrideLevelTuples
parameter_list|)
block|{
name|int
name|numFmtStyle
init|=
literal|0
decl_stmt|;
name|String
name|numFmt
init|=
name|getNumFormat
argument_list|(
name|lvlNum
argument_list|,
name|isLegal
argument_list|,
name|overrideLevelTuples
argument_list|)
decl_stmt|;
name|int
name|count
init|=
name|getCount
argument_list|(
name|lvlNum
argument_list|)
decl_stmt|;
if|if
condition|(
name|count
operator|<
literal|0
condition|)
block|{
name|count
operator|=
literal|1
expr_stmt|;
block|}
if|if
condition|(
literal|"lowerLetter"
operator|.
name|equals
argument_list|(
name|numFmt
argument_list|)
condition|)
block|{
name|numFmtStyle
operator|=
literal|4
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"lowerRoman"
operator|.
name|equals
argument_list|(
name|numFmt
argument_list|)
condition|)
block|{
name|numFmtStyle
operator|=
literal|2
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"decimal"
operator|.
name|equals
argument_list|(
name|numFmt
argument_list|)
condition|)
block|{
name|numFmtStyle
operator|=
literal|0
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"upperLetter"
operator|.
name|equals
argument_list|(
name|numFmt
argument_list|)
condition|)
block|{
name|numFmtStyle
operator|=
literal|3
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"upperRoman"
operator|.
name|equals
argument_list|(
name|numFmt
argument_list|)
condition|)
block|{
name|numFmtStyle
operator|=
literal|1
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"bullet"
operator|.
name|equals
argument_list|(
name|numFmt
argument_list|)
condition|)
block|{
return|return
literal|""
return|;
comment|//not yet handled by NumberFormatter...TODO: add to NumberFormatter?
block|}
elseif|else
if|if
condition|(
literal|"ordinal"
operator|.
name|equals
argument_list|(
name|numFmt
argument_list|)
condition|)
block|{
return|return
name|ordinalize
argument_list|(
name|count
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
literal|"decimalZero"
operator|.
name|equals
argument_list|(
name|numFmt
argument_list|)
condition|)
block|{
return|return
literal|"0"
operator|+
name|NumberFormatter
operator|.
name|getNumber
argument_list|(
name|count
argument_list|,
literal|0
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
literal|"none"
operator|.
name|equals
argument_list|(
name|numFmt
argument_list|)
condition|)
block|{
return|return
literal|""
return|;
block|}
return|return
name|NumberFormatter
operator|.
name|getNumber
argument_list|(
name|count
argument_list|,
name|numFmtStyle
argument_list|)
return|;
block|}
specifier|private
name|String
name|ordinalize
parameter_list|(
name|int
name|count
parameter_list|)
block|{
comment|//this is only good for locale == English
name|String
name|countString
init|=
name|Integer
operator|.
name|toString
argument_list|(
name|count
argument_list|)
decl_stmt|;
if|if
condition|(
name|countString
operator|.
name|endsWith
argument_list|(
literal|"1"
argument_list|)
condition|)
block|{
return|return
name|countString
operator|+
literal|"st"
return|;
block|}
elseif|else
if|if
condition|(
name|countString
operator|.
name|endsWith
argument_list|(
literal|"2"
argument_list|)
condition|)
block|{
return|return
name|countString
operator|+
literal|"nd"
return|;
block|}
elseif|else
if|if
condition|(
name|countString
operator|.
name|endsWith
argument_list|(
literal|"3"
argument_list|)
condition|)
block|{
return|return
name|countString
operator|+
literal|"rd"
return|;
block|}
return|return
name|countString
operator|+
literal|"th"
return|;
block|}
specifier|private
name|String
name|getNumFormat
parameter_list|(
name|int
name|lvlNum
parameter_list|,
name|boolean
name|isLegal
parameter_list|,
name|LevelTuple
index|[]
name|overrideLevelTuples
parameter_list|)
block|{
if|if
condition|(
name|lvlNum
operator|<
literal|0
operator|||
name|lvlNum
operator|>=
name|levelTuples
operator|.
name|length
condition|)
block|{
comment|//log?
return|return
literal|"decimal"
return|;
block|}
if|if
condition|(
name|isLegal
condition|)
block|{
comment|//return decimal no matter the level if isLegal is true
return|return
literal|"decimal"
return|;
block|}
return|return
operator|(
name|overrideLevelTuples
operator|==
literal|null
operator|||
name|overrideLevelTuples
index|[
name|lvlNum
index|]
operator|.
name|numFmt
operator|==
literal|null
operator|)
condition|?
name|levelTuples
index|[
name|lvlNum
index|]
operator|.
name|numFmt
else|:
name|overrideLevelTuples
index|[
name|lvlNum
index|]
operator|.
name|numFmt
return|;
block|}
specifier|private
name|int
name|getCount
parameter_list|(
name|int
name|lvlNum
parameter_list|)
block|{
if|if
condition|(
name|lvlNum
operator|<
literal|0
operator|||
name|lvlNum
operator|>=
name|counts
operator|.
name|size
argument_list|()
condition|)
block|{
comment|//log?
return|return
literal|1
return|;
block|}
return|return
name|counts
operator|.
name|get
argument_list|(
name|lvlNum
argument_list|)
return|;
block|}
specifier|private
name|void
name|resetAfter
parameter_list|(
name|int
name|startlevelNumber
parameter_list|,
name|LevelTuple
index|[]
name|overrideLevelTuples
parameter_list|)
block|{
for|for
control|(
name|int
name|levelNumber
init|=
name|startlevelNumber
operator|+
literal|1
init|;
name|levelNumber
operator|<
name|counts
operator|.
name|size
argument_list|()
condition|;
name|levelNumber
operator|++
control|)
block|{
name|int
name|cnt
init|=
name|counts
operator|.
name|get
argument_list|(
name|levelNumber
argument_list|)
decl_stmt|;
if|if
condition|(
name|cnt
operator|==
name|NOT_SEEN_YET
condition|)
block|{
comment|//do nothing
block|}
elseif|else
if|if
condition|(
name|cnt
operator|==
name|FIRST_SKIPPED
condition|)
block|{
comment|//do nothing
block|}
elseif|else
if|if
condition|(
name|levelTuples
operator|.
name|length
operator|>
name|levelNumber
condition|)
block|{
comment|//never reset if restarts == 0
name|int
name|restart
init|=
operator|(
name|overrideLevelTuples
operator|==
literal|null
operator|||
name|overrideLevelTuples
index|[
name|levelNumber
index|]
operator|.
name|restart
operator|<
literal|0
operator|)
condition|?
name|levelTuples
index|[
name|levelNumber
index|]
operator|.
name|restart
else|:
name|overrideLevelTuples
index|[
name|levelNumber
index|]
operator|.
name|restart
decl_stmt|;
if|if
condition|(
name|restart
operator|==
literal|0
condition|)
block|{
return|return;
block|}
elseif|else
if|if
condition|(
name|restart
operator|==
operator|-
literal|1
operator|||
name|startlevelNumber
operator|<=
name|restart
operator|-
literal|1
condition|)
block|{
name|counts
operator|.
name|set
argument_list|(
name|levelNumber
argument_list|,
name|NOT_SEEN_YET
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|//do nothing/don't reset
block|}
block|}
else|else
block|{
comment|//reset!
name|counts
operator|.
name|set
argument_list|(
name|levelNumber
argument_list|,
name|NOT_SEEN_YET
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|int
name|getStart
parameter_list|(
name|int
name|levelNumber
parameter_list|,
name|LevelTuple
index|[]
name|overrideLevelTuples
parameter_list|)
block|{
if|if
condition|(
name|levelNumber
operator|>=
name|levelTuples
operator|.
name|length
condition|)
block|{
return|return
literal|1
return|;
block|}
else|else
block|{
return|return
operator|(
name|overrideLevelTuples
operator|==
literal|null
operator|||
name|overrideLevelTuples
index|[
name|levelNumber
index|]
operator|.
name|start
operator|<
literal|0
operator|)
condition|?
name|levelTuples
index|[
name|levelNumber
index|]
operator|.
name|start
else|:
name|overrideLevelTuples
index|[
name|levelNumber
index|]
operator|.
name|start
return|;
block|}
block|}
block|}
specifier|protected
class|class
name|LevelTuple
block|{
specifier|private
specifier|final
name|int
name|start
decl_stmt|;
specifier|private
specifier|final
name|int
name|restart
decl_stmt|;
specifier|private
specifier|final
name|String
name|lvlText
decl_stmt|;
specifier|private
specifier|final
name|String
name|numFmt
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|isLegal
decl_stmt|;
specifier|public
name|LevelTuple
parameter_list|(
name|String
name|lvlText
parameter_list|)
block|{
name|this
operator|.
name|lvlText
operator|=
name|lvlText
expr_stmt|;
name|start
operator|=
literal|1
expr_stmt|;
name|restart
operator|=
operator|-
literal|1
expr_stmt|;
name|numFmt
operator|=
literal|"decimal"
expr_stmt|;
name|isLegal
operator|=
literal|false
expr_stmt|;
block|}
specifier|public
name|LevelTuple
parameter_list|(
name|int
name|start
parameter_list|,
name|int
name|restart
parameter_list|,
name|String
name|lvlText
parameter_list|,
name|String
name|numFmt
parameter_list|,
name|boolean
name|isLegal
parameter_list|)
block|{
name|this
operator|.
name|start
operator|=
name|start
expr_stmt|;
name|this
operator|.
name|restart
operator|=
name|restart
expr_stmt|;
name|this
operator|.
name|lvlText
operator|=
name|lvlText
expr_stmt|;
name|this
operator|.
name|numFmt
operator|=
name|numFmt
expr_stmt|;
name|this
operator|.
name|isLegal
operator|=
name|isLegal
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

