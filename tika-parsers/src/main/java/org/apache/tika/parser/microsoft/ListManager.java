begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|microsoft
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|NoSuchElementException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|hwpf
operator|.
name|HWPFDocument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|hwpf
operator|.
name|model
operator|.
name|ListData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|hwpf
operator|.
name|model
operator|.
name|ListFormatOverrideLevel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|hwpf
operator|.
name|model
operator|.
name|ListLevel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|hwpf
operator|.
name|model
operator|.
name|ListTables
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|hwpf
operator|.
name|usermodel
operator|.
name|Paragraph
import|;
end_import

begin_comment
comment|/**  * Computes the number text which goes at the beginning of each list paragraph  *<p/>  *<p><em>Note:</em> This class only handles the raw number text and does not apply any further formatting as described in [MS-DOC], v20140721, 2.4.6.3, Part 3 to it.<p>  *<p><em>Note 2:</em> The {@code tplc}, a visual override for the appearance of list levels, as defined in [MS-DOC], v20140721, 2.9.328 is not taken care of in this class.</p>  *<p>Further, this class does not yet handle overrides</p>  */
end_comment

begin_class
specifier|public
class|class
name|ListManager
extends|extends
name|AbstractListManager
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|logger
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|ListManager
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|ListTables
name|listTables
decl_stmt|;
comment|/**      * Ordinary constructor for a new list reader      *      * @param document Document to process      */
specifier|public
name|ListManager
parameter_list|(
specifier|final
name|HWPFDocument
name|document
parameter_list|)
block|{
name|this
operator|.
name|listTables
operator|=
name|document
operator|.
name|getListTables
argument_list|()
expr_stmt|;
block|}
comment|/**      * Get the formatted number for a given paragraph      *<p/>      *<p><em>Note:</em> This only works correctly if called subsequently for<em>all</em> paragraphs in a valid selection (main document, text field, ...) which are part of a list.</p>      *      * @param paragraph list paragraph to process      * @return String which represents the numbering of this list paragraph; never {@code null}, can be empty string, though,       *        if something goes wrong in getList()      * @throws IllegalArgumentException If the given paragraph is {@code null} or is not part of a list      */
specifier|public
name|String
name|getFormattedNumber
parameter_list|(
specifier|final
name|Paragraph
name|paragraph
parameter_list|)
block|{
if|if
condition|(
name|paragraph
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Given paragraph cannot be null."
argument_list|)
throw|;
if|if
condition|(
operator|!
name|paragraph
operator|.
name|isInList
argument_list|()
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Can only process list paragraphs."
argument_list|)
throw|;
comment|//lsid is equivalent to docx's abnum
comment|//ilfo is equivalent to docx's num
name|int
name|currAbNumId
init|=
operator|-
literal|1
decl_stmt|;
try|try
block|{
name|currAbNumId
operator|=
name|paragraph
operator|.
name|getList
argument_list|()
operator|.
name|getLsid
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchElementException
name|e
parameter_list|)
block|{
comment|//somewhat frequent exception when initializing HWPFList
return|return
literal|""
return|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
return|return
literal|""
return|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|e
parameter_list|)
block|{
return|return
literal|""
return|;
block|}
name|int
name|currNumId
init|=
name|paragraph
operator|.
name|getIlfo
argument_list|()
decl_stmt|;
name|ParagraphLevelCounter
name|lc
init|=
name|listLevelMap
operator|.
name|get
argument_list|(
name|currAbNumId
argument_list|)
decl_stmt|;
name|LevelTuple
index|[]
name|overrideTuples
init|=
name|overrideTupleMap
operator|.
name|get
argument_list|(
name|currNumId
argument_list|)
decl_stmt|;
if|if
condition|(
name|lc
operator|==
literal|null
condition|)
block|{
name|ListData
name|listData
init|=
name|listTables
operator|.
name|getListData
argument_list|(
name|paragraph
operator|.
name|getList
argument_list|()
operator|.
name|getLsid
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|listData
operator|==
literal|null
condition|)
block|{
comment|//silently skip
return|return
literal|""
return|;
block|}
name|LevelTuple
index|[]
name|levelTuples
init|=
operator|new
name|LevelTuple
index|[
name|listData
operator|.
name|getLevels
argument_list|()
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|listData
operator|.
name|getLevels
argument_list|()
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|levelTuples
index|[
name|i
index|]
operator|=
name|buildTuple
argument_list|(
name|i
argument_list|,
name|listData
operator|.
name|getLevels
argument_list|()
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|lc
operator|=
operator|new
name|ParagraphLevelCounter
argument_list|(
name|levelTuples
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|overrideTuples
operator|==
literal|null
condition|)
block|{
name|overrideTuples
operator|=
name|buildOverrideTuples
argument_list|(
name|paragraph
argument_list|,
name|lc
operator|.
name|getNumberOfLevels
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|String
name|formattedString
init|=
name|lc
operator|.
name|incrementLevel
argument_list|(
name|paragraph
operator|.
name|getIlvl
argument_list|()
argument_list|,
name|overrideTuples
argument_list|)
decl_stmt|;
name|listLevelMap
operator|.
name|put
argument_list|(
name|currAbNumId
argument_list|,
name|lc
argument_list|)
expr_stmt|;
name|overrideTupleMap
operator|.
name|put
argument_list|(
name|currNumId
argument_list|,
name|overrideTuples
argument_list|)
expr_stmt|;
return|return
name|formattedString
return|;
block|}
specifier|private
name|LevelTuple
name|buildTuple
parameter_list|(
name|int
name|i
parameter_list|,
name|ListLevel
name|listLevel
parameter_list|)
block|{
name|boolean
name|isLegal
init|=
literal|false
decl_stmt|;
name|int
name|start
init|=
literal|1
decl_stmt|;
name|int
name|restart
init|=
operator|-
literal|1
decl_stmt|;
name|String
name|lvlText
init|=
literal|"%"
operator|+
name|i
operator|+
literal|"."
decl_stmt|;
name|String
name|numFmt
init|=
literal|"decimal"
decl_stmt|;
name|start
operator|=
name|listLevel
operator|.
name|getStartAt
argument_list|()
expr_stmt|;
name|restart
operator|=
name|listLevel
operator|.
name|getRestart
argument_list|()
expr_stmt|;
name|isLegal
operator|=
name|listLevel
operator|.
name|isLegalNumbering
argument_list|()
expr_stmt|;
name|numFmt
operator|=
name|convertToNewNumFormat
argument_list|(
name|listLevel
operator|.
name|getNumberFormat
argument_list|()
argument_list|)
expr_stmt|;
name|lvlText
operator|=
name|convertToNewNumberText
argument_list|(
name|listLevel
operator|.
name|getNumberText
argument_list|()
argument_list|,
name|listLevel
operator|.
name|getLevelNumberingPlaceholderOffsets
argument_list|()
argument_list|)
expr_stmt|;
return|return
operator|new
name|LevelTuple
argument_list|(
name|start
argument_list|,
name|restart
argument_list|,
name|lvlText
argument_list|,
name|numFmt
argument_list|,
name|isLegal
argument_list|)
return|;
block|}
specifier|private
name|LevelTuple
index|[]
name|buildOverrideTuples
parameter_list|(
name|Paragraph
name|par
parameter_list|,
name|int
name|length
parameter_list|)
block|{
name|ListFormatOverrideLevel
name|overrideLevel
decl_stmt|;
comment|// find the override for this level
if|if
condition|(
name|listTables
operator|.
name|getLfoData
argument_list|(
name|par
operator|.
name|getIlfo
argument_list|()
argument_list|)
operator|.
name|getRgLfoLvl
argument_list|()
operator|.
name|length
operator|==
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
name|overrideLevel
operator|=
name|listTables
operator|.
name|getLfoData
argument_list|(
name|par
operator|.
name|getIlfo
argument_list|()
argument_list|)
operator|.
name|getRgLfoLvl
argument_list|()
index|[
literal|0
index|]
expr_stmt|;
if|if
condition|(
name|overrideLevel
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|LevelTuple
index|[]
name|levelTuples
init|=
operator|new
name|LevelTuple
index|[
name|length
index|]
decl_stmt|;
name|ListLevel
name|listLevel
init|=
name|overrideLevel
operator|.
name|getLevel
argument_list|()
decl_stmt|;
if|if
condition|(
name|listLevel
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
name|i
operator|++
control|)
block|{
name|levelTuples
index|[
name|i
index|]
operator|=
name|buildTuple
argument_list|(
name|i
argument_list|,
name|listLevel
argument_list|)
expr_stmt|;
block|}
return|return
name|levelTuples
return|;
block|}
specifier|private
name|String
name|convertToNewNumberText
parameter_list|(
name|String
name|numberText
parameter_list|,
name|byte
index|[]
name|numberOffsets
parameter_list|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|int
name|last
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numberOffsets
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|int
name|offset
init|=
operator|(
name|int
operator|)
name|numberOffsets
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|offset
operator|==
literal|0
condition|)
block|{
break|break;
block|}
if|if
condition|(
name|offset
operator|-
literal|1
operator|<
name|last
operator|||
name|offset
operator|>
name|numberText
operator|.
name|length
argument_list|()
condition|)
block|{
comment|//something went wrong.
comment|//silently stop
break|break;
block|}
name|sb
operator|.
name|append
argument_list|(
name|numberText
operator|.
name|substring
argument_list|(
name|last
argument_list|,
name|offset
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
comment|//need to add one because newer format
comment|//adds one.  In .doc, this was the array index;
comment|//but in .docx, this is the level number
name|int
name|lvlNum
init|=
operator|(
name|int
operator|)
name|numberText
operator|.
name|charAt
argument_list|(
name|offset
operator|-
literal|1
argument_list|)
operator|+
literal|1
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"%"
operator|+
name|lvlNum
argument_list|)
expr_stmt|;
name|last
operator|=
name|offset
expr_stmt|;
block|}
if|if
condition|(
name|last
operator|<
name|numberText
operator|.
name|length
argument_list|()
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|numberText
operator|.
name|substring
argument_list|(
name|last
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|private
name|String
name|convertToNewNumFormat
parameter_list|(
name|int
name|numberFormat
parameter_list|)
block|{
switch|switch
condition|(
name|numberFormat
condition|)
block|{
case|case
operator|-
literal|1
case|:
return|return
literal|"none"
return|;
case|case
literal|0
case|:
return|return
literal|"decimal"
return|;
case|case
literal|1
case|:
return|return
literal|"upperRoman"
return|;
case|case
literal|2
case|:
return|return
literal|"lowerRoman"
return|;
case|case
literal|3
case|:
return|return
literal|"upperLetter"
return|;
case|case
literal|4
case|:
return|return
literal|"lowerLetter"
return|;
case|case
literal|5
case|:
return|return
literal|"ordinal"
return|;
case|case
literal|22
case|:
return|return
literal|"decimalZero"
return|;
case|case
literal|23
case|:
return|return
literal|"bullet"
return|;
case|case
literal|47
case|:
return|return
literal|"none"
return|;
default|default:
comment|//do we really want to silently swallow these uncovered cases?
comment|//throw new RuntimeException("NOT COVERED: " + numberFormat);
return|return
literal|"decimal"
return|;
block|}
block|}
block|}
end_class

end_unit

