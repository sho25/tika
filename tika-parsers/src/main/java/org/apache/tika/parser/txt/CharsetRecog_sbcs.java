begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  ****************************************************************************  * Copyright (C) 2005-2009, International Business Machines Corporation and *  * others. All Rights Reserved.                                             *  ************************************************************************** *  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|txt
package|;
end_package

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_comment
comment|/**  * This class recognizes single-byte encodings. Because the encoding scheme is so  * simple, language statistics are used to do the matching.  *   * @internal  */
end_comment

begin_class
specifier|abstract
class|class
name|CharsetRecog_sbcs
extends|extends
name|CharsetRecognizer
block|{
comment|/* (non-Javadoc)      * @see com.ibm.icu.text.CharsetRecognizer#getName()      */
specifier|abstract
name|String
name|getName
parameter_list|()
function_decl|;
comment|/* (non-Javadoc)      * @see com.ibm.icu.text.CharsetRecognizer#match(com.ibm.icu.text.CharsetDetector)      */
specifier|abstract
name|int
name|match
parameter_list|(
name|CharsetDetector
name|det
parameter_list|)
function_decl|;
specifier|static
class|class
name|NGramParser
block|{
comment|//        private static final int N_GRAM_SIZE = 3;
specifier|private
specifier|static
specifier|final
name|int
name|N_GRAM_MASK
init|=
literal|0xFFFFFF
decl_stmt|;
specifier|private
name|int
name|byteIndex
init|=
literal|0
decl_stmt|;
specifier|private
name|int
name|ngram
init|=
literal|0
decl_stmt|;
specifier|private
name|int
index|[]
name|ngramList
decl_stmt|;
specifier|private
name|byte
index|[]
name|byteMap
decl_stmt|;
specifier|private
name|int
name|ngramCount
decl_stmt|;
specifier|private
name|int
name|hitCount
decl_stmt|;
specifier|private
name|byte
name|spaceChar
decl_stmt|;
specifier|public
name|NGramParser
parameter_list|(
name|int
index|[]
name|theNgramList
parameter_list|,
name|byte
index|[]
name|theByteMap
parameter_list|)
block|{
name|ngramList
operator|=
name|theNgramList
expr_stmt|;
name|byteMap
operator|=
name|theByteMap
expr_stmt|;
name|ngram
operator|=
literal|0
expr_stmt|;
name|ngramCount
operator|=
name|hitCount
operator|=
literal|0
expr_stmt|;
block|}
comment|/*          * Binary search for value in table, which must have exactly 64 entries.          */
specifier|private
specifier|static
name|int
name|search
parameter_list|(
name|int
index|[]
name|table
parameter_list|,
name|int
name|value
parameter_list|)
block|{
name|int
name|index
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|table
index|[
name|index
operator|+
literal|32
index|]
operator|<=
name|value
condition|)
block|{
name|index
operator|+=
literal|32
expr_stmt|;
block|}
if|if
condition|(
name|table
index|[
name|index
operator|+
literal|16
index|]
operator|<=
name|value
condition|)
block|{
name|index
operator|+=
literal|16
expr_stmt|;
block|}
if|if
condition|(
name|table
index|[
name|index
operator|+
literal|8
index|]
operator|<=
name|value
condition|)
block|{
name|index
operator|+=
literal|8
expr_stmt|;
block|}
if|if
condition|(
name|table
index|[
name|index
operator|+
literal|4
index|]
operator|<=
name|value
condition|)
block|{
name|index
operator|+=
literal|4
expr_stmt|;
block|}
if|if
condition|(
name|table
index|[
name|index
operator|+
literal|2
index|]
operator|<=
name|value
condition|)
block|{
name|index
operator|+=
literal|2
expr_stmt|;
block|}
if|if
condition|(
name|table
index|[
name|index
operator|+
literal|1
index|]
operator|<=
name|value
condition|)
block|{
name|index
operator|+=
literal|1
expr_stmt|;
block|}
if|if
condition|(
name|table
index|[
name|index
index|]
operator|>
name|value
condition|)
block|{
name|index
operator|-=
literal|1
expr_stmt|;
block|}
if|if
condition|(
name|index
operator|<
literal|0
operator|||
name|table
index|[
name|index
index|]
operator|!=
name|value
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
return|return
name|index
return|;
block|}
specifier|private
name|void
name|lookup
parameter_list|(
name|int
name|thisNgram
parameter_list|)
block|{
name|ngramCount
operator|+=
literal|1
expr_stmt|;
if|if
condition|(
name|search
argument_list|(
name|ngramList
argument_list|,
name|thisNgram
argument_list|)
operator|>=
literal|0
condition|)
block|{
name|hitCount
operator|+=
literal|1
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|addByte
parameter_list|(
name|int
name|b
parameter_list|)
block|{
name|ngram
operator|=
operator|(
operator|(
name|ngram
operator|<<
literal|8
operator|)
operator|+
operator|(
name|b
operator|&
literal|0xFF
operator|)
operator|)
operator|&
name|N_GRAM_MASK
expr_stmt|;
name|lookup
argument_list|(
name|ngram
argument_list|)
expr_stmt|;
block|}
specifier|private
name|int
name|nextByte
parameter_list|(
name|CharsetDetector
name|det
parameter_list|)
block|{
if|if
condition|(
name|byteIndex
operator|>=
name|det
operator|.
name|fInputLen
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
return|return
name|det
operator|.
name|fInputBytes
index|[
name|byteIndex
operator|++
index|]
operator|&
literal|0xFF
return|;
block|}
specifier|public
name|int
name|parse
parameter_list|(
name|CharsetDetector
name|det
parameter_list|)
block|{
return|return
name|parse
argument_list|(
name|det
argument_list|,
operator|(
name|byte
operator|)
literal|0x20
argument_list|)
return|;
block|}
specifier|public
name|int
name|parse
parameter_list|(
name|CharsetDetector
name|det
parameter_list|,
name|byte
name|spaceCh
parameter_list|)
block|{
name|int
name|b
decl_stmt|;
name|boolean
name|ignoreSpace
init|=
literal|false
decl_stmt|;
name|this
operator|.
name|spaceChar
operator|=
name|spaceCh
expr_stmt|;
while|while
condition|(
operator|(
name|b
operator|=
name|nextByte
argument_list|(
name|det
argument_list|)
operator|)
operator|>=
literal|0
condition|)
block|{
name|byte
name|mb
init|=
name|byteMap
index|[
name|b
index|]
decl_stmt|;
comment|// TODO: 0x20 might not be a space in all character sets...
if|if
condition|(
name|mb
operator|!=
literal|0
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|mb
operator|==
name|spaceChar
operator|&&
name|ignoreSpace
operator|)
condition|)
block|{
name|addByte
argument_list|(
name|mb
argument_list|)
expr_stmt|;
block|}
name|ignoreSpace
operator|=
operator|(
name|mb
operator|==
name|spaceChar
operator|)
expr_stmt|;
block|}
block|}
comment|// TODO: Is this OK? The buffer could have ended in the middle of a word...
name|addByte
argument_list|(
name|spaceChar
argument_list|)
expr_stmt|;
name|double
name|rawPercent
init|=
operator|(
name|double
operator|)
name|hitCount
operator|/
operator|(
name|double
operator|)
name|ngramCount
decl_stmt|;
comment|//                if (rawPercent<= 2.0) {
comment|//                    return 0;
comment|//                }
comment|// TODO - This is a bit of a hack to take care of a case
comment|// were we were getting a confidence of 135...
if|if
condition|(
name|rawPercent
operator|>
literal|0.33
condition|)
block|{
return|return
literal|98
return|;
block|}
return|return
call|(
name|int
call|)
argument_list|(
name|rawPercent
operator|*
literal|300.0
argument_list|)
return|;
block|}
block|}
specifier|protected
name|boolean
name|haveC1Bytes
init|=
literal|false
decl_stmt|;
name|int
name|match
parameter_list|(
name|CharsetDetector
name|det
parameter_list|,
name|int
index|[]
name|ngrams
parameter_list|,
name|byte
index|[]
name|byteMap
parameter_list|)
block|{
return|return
name|match
argument_list|(
name|det
argument_list|,
name|ngrams
argument_list|,
name|byteMap
argument_list|,
operator|(
name|byte
operator|)
literal|0x20
argument_list|)
return|;
block|}
name|int
name|match
parameter_list|(
name|CharsetDetector
name|det
parameter_list|,
name|int
index|[]
name|ngrams
parameter_list|,
name|byte
index|[]
name|byteMap
parameter_list|,
name|byte
name|spaceChar
parameter_list|)
block|{
name|NGramParser
name|parser
init|=
operator|new
name|NGramParser
argument_list|(
name|ngrams
argument_list|,
name|byteMap
argument_list|)
decl_stmt|;
name|haveC1Bytes
operator|=
name|det
operator|.
name|fC1Bytes
expr_stmt|;
return|return
name|parser
operator|.
name|parse
argument_list|(
name|det
argument_list|,
name|spaceChar
argument_list|)
return|;
block|}
specifier|abstract
specifier|static
class|class
name|CharsetRecog_8859_1
extends|extends
name|CharsetRecog_sbcs
block|{
specifier|protected
specifier|static
name|byte
index|[]
name|byteMap
init|=
block|{
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x00
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x61
block|,
operator|(
name|byte
operator|)
literal|0x62
block|,
operator|(
name|byte
operator|)
literal|0x63
block|,
operator|(
name|byte
operator|)
literal|0x64
block|,
operator|(
name|byte
operator|)
literal|0x65
block|,
operator|(
name|byte
operator|)
literal|0x66
block|,
operator|(
name|byte
operator|)
literal|0x67
block|,
operator|(
name|byte
operator|)
literal|0x68
block|,
operator|(
name|byte
operator|)
literal|0x69
block|,
operator|(
name|byte
operator|)
literal|0x6A
block|,
operator|(
name|byte
operator|)
literal|0x6B
block|,
operator|(
name|byte
operator|)
literal|0x6C
block|,
operator|(
name|byte
operator|)
literal|0x6D
block|,
operator|(
name|byte
operator|)
literal|0x6E
block|,
operator|(
name|byte
operator|)
literal|0x6F
block|,
operator|(
name|byte
operator|)
literal|0x70
block|,
operator|(
name|byte
operator|)
literal|0x71
block|,
operator|(
name|byte
operator|)
literal|0x72
block|,
operator|(
name|byte
operator|)
literal|0x73
block|,
operator|(
name|byte
operator|)
literal|0x74
block|,
operator|(
name|byte
operator|)
literal|0x75
block|,
operator|(
name|byte
operator|)
literal|0x76
block|,
operator|(
name|byte
operator|)
literal|0x77
block|,
operator|(
name|byte
operator|)
literal|0x78
block|,
operator|(
name|byte
operator|)
literal|0x79
block|,
operator|(
name|byte
operator|)
literal|0x7A
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x61
block|,
operator|(
name|byte
operator|)
literal|0x62
block|,
operator|(
name|byte
operator|)
literal|0x63
block|,
operator|(
name|byte
operator|)
literal|0x64
block|,
operator|(
name|byte
operator|)
literal|0x65
block|,
operator|(
name|byte
operator|)
literal|0x66
block|,
operator|(
name|byte
operator|)
literal|0x67
block|,
operator|(
name|byte
operator|)
literal|0x68
block|,
operator|(
name|byte
operator|)
literal|0x69
block|,
operator|(
name|byte
operator|)
literal|0x6A
block|,
operator|(
name|byte
operator|)
literal|0x6B
block|,
operator|(
name|byte
operator|)
literal|0x6C
block|,
operator|(
name|byte
operator|)
literal|0x6D
block|,
operator|(
name|byte
operator|)
literal|0x6E
block|,
operator|(
name|byte
operator|)
literal|0x6F
block|,
operator|(
name|byte
operator|)
literal|0x70
block|,
operator|(
name|byte
operator|)
literal|0x71
block|,
operator|(
name|byte
operator|)
literal|0x72
block|,
operator|(
name|byte
operator|)
literal|0x73
block|,
operator|(
name|byte
operator|)
literal|0x74
block|,
operator|(
name|byte
operator|)
literal|0x75
block|,
operator|(
name|byte
operator|)
literal|0x76
block|,
operator|(
name|byte
operator|)
literal|0x77
block|,
operator|(
name|byte
operator|)
literal|0x78
block|,
operator|(
name|byte
operator|)
literal|0x79
block|,
operator|(
name|byte
operator|)
literal|0x7A
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0xAA
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0xB5
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0xBA
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0xE0
block|,
operator|(
name|byte
operator|)
literal|0xE1
block|,
operator|(
name|byte
operator|)
literal|0xE2
block|,
operator|(
name|byte
operator|)
literal|0xE3
block|,
operator|(
name|byte
operator|)
literal|0xE4
block|,
operator|(
name|byte
operator|)
literal|0xE5
block|,
operator|(
name|byte
operator|)
literal|0xE6
block|,
operator|(
name|byte
operator|)
literal|0xE7
block|,
operator|(
name|byte
operator|)
literal|0xE8
block|,
operator|(
name|byte
operator|)
literal|0xE9
block|,
operator|(
name|byte
operator|)
literal|0xEA
block|,
operator|(
name|byte
operator|)
literal|0xEB
block|,
operator|(
name|byte
operator|)
literal|0xEC
block|,
operator|(
name|byte
operator|)
literal|0xED
block|,
operator|(
name|byte
operator|)
literal|0xEE
block|,
operator|(
name|byte
operator|)
literal|0xEF
block|,
operator|(
name|byte
operator|)
literal|0xF0
block|,
operator|(
name|byte
operator|)
literal|0xF1
block|,
operator|(
name|byte
operator|)
literal|0xF2
block|,
operator|(
name|byte
operator|)
literal|0xF3
block|,
operator|(
name|byte
operator|)
literal|0xF4
block|,
operator|(
name|byte
operator|)
literal|0xF5
block|,
operator|(
name|byte
operator|)
literal|0xF6
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0xF8
block|,
operator|(
name|byte
operator|)
literal|0xF9
block|,
operator|(
name|byte
operator|)
literal|0xFA
block|,
operator|(
name|byte
operator|)
literal|0xFB
block|,
operator|(
name|byte
operator|)
literal|0xFC
block|,
operator|(
name|byte
operator|)
literal|0xFD
block|,
operator|(
name|byte
operator|)
literal|0xFE
block|,
operator|(
name|byte
operator|)
literal|0xDF
block|,
operator|(
name|byte
operator|)
literal|0xE0
block|,
operator|(
name|byte
operator|)
literal|0xE1
block|,
operator|(
name|byte
operator|)
literal|0xE2
block|,
operator|(
name|byte
operator|)
literal|0xE3
block|,
operator|(
name|byte
operator|)
literal|0xE4
block|,
operator|(
name|byte
operator|)
literal|0xE5
block|,
operator|(
name|byte
operator|)
literal|0xE6
block|,
operator|(
name|byte
operator|)
literal|0xE7
block|,
operator|(
name|byte
operator|)
literal|0xE8
block|,
operator|(
name|byte
operator|)
literal|0xE9
block|,
operator|(
name|byte
operator|)
literal|0xEA
block|,
operator|(
name|byte
operator|)
literal|0xEB
block|,
operator|(
name|byte
operator|)
literal|0xEC
block|,
operator|(
name|byte
operator|)
literal|0xED
block|,
operator|(
name|byte
operator|)
literal|0xEE
block|,
operator|(
name|byte
operator|)
literal|0xEF
block|,
operator|(
name|byte
operator|)
literal|0xF0
block|,
operator|(
name|byte
operator|)
literal|0xF1
block|,
operator|(
name|byte
operator|)
literal|0xF2
block|,
operator|(
name|byte
operator|)
literal|0xF3
block|,
operator|(
name|byte
operator|)
literal|0xF4
block|,
operator|(
name|byte
operator|)
literal|0xF5
block|,
operator|(
name|byte
operator|)
literal|0xF6
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0xF8
block|,
operator|(
name|byte
operator|)
literal|0xF9
block|,
operator|(
name|byte
operator|)
literal|0xFA
block|,
operator|(
name|byte
operator|)
literal|0xFB
block|,
operator|(
name|byte
operator|)
literal|0xFC
block|,
operator|(
name|byte
operator|)
literal|0xFD
block|,
operator|(
name|byte
operator|)
literal|0xFE
block|,
operator|(
name|byte
operator|)
literal|0xFF
block|,          }
decl_stmt|;
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|haveC1Bytes
condition|?
literal|"windows-1252"
else|:
literal|"ISO-8859-1"
return|;
block|}
block|}
specifier|static
class|class
name|CharsetRecog_8859_1_da
extends|extends
name|CharsetRecog_8859_1
block|{
specifier|private
specifier|static
name|int
index|[]
name|ngrams
init|=
block|{
literal|0x206166
block|,
literal|0x206174
block|,
literal|0x206465
block|,
literal|0x20656E
block|,
literal|0x206572
block|,
literal|0x20666F
block|,
literal|0x206861
block|,
literal|0x206920
block|,
literal|0x206D65
block|,
literal|0x206F67
block|,
literal|0x2070E5
block|,
literal|0x207369
block|,
literal|0x207374
block|,
literal|0x207469
block|,
literal|0x207669
block|,
literal|0x616620
block|,
literal|0x616E20
block|,
literal|0x616E64
block|,
literal|0x617220
block|,
literal|0x617420
block|,
literal|0x646520
block|,
literal|0x64656E
block|,
literal|0x646572
block|,
literal|0x646574
block|,
literal|0x652073
block|,
literal|0x656420
block|,
literal|0x656465
block|,
literal|0x656E20
block|,
literal|0x656E64
block|,
literal|0x657220
block|,
literal|0x657265
block|,
literal|0x657320
block|,
literal|0x657420
block|,
literal|0x666F72
block|,
literal|0x676520
block|,
literal|0x67656E
block|,
literal|0x676572
block|,
literal|0x696765
block|,
literal|0x696C20
block|,
literal|0x696E67
block|,
literal|0x6B6520
block|,
literal|0x6B6B65
block|,
literal|0x6C6572
block|,
literal|0x6C6967
block|,
literal|0x6C6C65
block|,
literal|0x6D6564
block|,
literal|0x6E6465
block|,
literal|0x6E6520
block|,
literal|0x6E6720
block|,
literal|0x6E6765
block|,
literal|0x6F6720
block|,
literal|0x6F6D20
block|,
literal|0x6F7220
block|,
literal|0x70E520
block|,
literal|0x722064
block|,
literal|0x722065
block|,
literal|0x722073
block|,
literal|0x726520
block|,
literal|0x737465
block|,
literal|0x742073
block|,
literal|0x746520
block|,
literal|0x746572
block|,
literal|0x74696C
block|,
literal|0x766572
block|,          }
decl_stmt|;
specifier|public
name|String
name|getLanguage
parameter_list|()
block|{
return|return
literal|"da"
return|;
block|}
specifier|public
name|int
name|match
parameter_list|(
name|CharsetDetector
name|det
parameter_list|)
block|{
return|return
name|match
argument_list|(
name|det
argument_list|,
name|ngrams
argument_list|,
name|byteMap
argument_list|)
return|;
block|}
block|}
specifier|static
class|class
name|CharsetRecog_8859_1_de
extends|extends
name|CharsetRecog_8859_1
block|{
specifier|private
specifier|static
name|int
index|[]
name|ngrams
init|=
block|{
literal|0x20616E
block|,
literal|0x206175
block|,
literal|0x206265
block|,
literal|0x206461
block|,
literal|0x206465
block|,
literal|0x206469
block|,
literal|0x206569
block|,
literal|0x206765
block|,
literal|0x206861
block|,
literal|0x20696E
block|,
literal|0x206D69
block|,
literal|0x207363
block|,
literal|0x207365
block|,
literal|0x20756E
block|,
literal|0x207665
block|,
literal|0x20766F
block|,
literal|0x207765
block|,
literal|0x207A75
block|,
literal|0x626572
block|,
literal|0x636820
block|,
literal|0x636865
block|,
literal|0x636874
block|,
literal|0x646173
block|,
literal|0x64656E
block|,
literal|0x646572
block|,
literal|0x646965
block|,
literal|0x652064
block|,
literal|0x652073
block|,
literal|0x65696E
block|,
literal|0x656974
block|,
literal|0x656E20
block|,
literal|0x657220
block|,
literal|0x657320
block|,
literal|0x67656E
block|,
literal|0x68656E
block|,
literal|0x687420
block|,
literal|0x696368
block|,
literal|0x696520
block|,
literal|0x696E20
block|,
literal|0x696E65
block|,
literal|0x697420
block|,
literal|0x6C6963
block|,
literal|0x6C6C65
block|,
literal|0x6E2061
block|,
literal|0x6E2064
block|,
literal|0x6E2073
block|,
literal|0x6E6420
block|,
literal|0x6E6465
block|,
literal|0x6E6520
block|,
literal|0x6E6720
block|,
literal|0x6E6765
block|,
literal|0x6E7465
block|,
literal|0x722064
block|,
literal|0x726465
block|,
literal|0x726569
block|,
literal|0x736368
block|,
literal|0x737465
block|,
literal|0x742064
block|,
literal|0x746520
block|,
literal|0x74656E
block|,
literal|0x746572
block|,
literal|0x756E64
block|,
literal|0x756E67
block|,
literal|0x766572
block|,          }
decl_stmt|;
specifier|public
name|String
name|getLanguage
parameter_list|()
block|{
return|return
literal|"de"
return|;
block|}
specifier|public
name|int
name|match
parameter_list|(
name|CharsetDetector
name|det
parameter_list|)
block|{
return|return
name|match
argument_list|(
name|det
argument_list|,
name|ngrams
argument_list|,
name|byteMap
argument_list|)
return|;
block|}
block|}
specifier|static
class|class
name|CharsetRecog_8859_1_en
extends|extends
name|CharsetRecog_8859_1
block|{
specifier|private
specifier|static
name|int
index|[]
name|ngrams
init|=
block|{
literal|0x206120
block|,
literal|0x20616E
block|,
literal|0x206265
block|,
literal|0x20636F
block|,
literal|0x20666F
block|,
literal|0x206861
block|,
literal|0x206865
block|,
literal|0x20696E
block|,
literal|0x206D61
block|,
literal|0x206F66
block|,
literal|0x207072
block|,
literal|0x207265
block|,
literal|0x207361
block|,
literal|0x207374
block|,
literal|0x207468
block|,
literal|0x20746F
block|,
literal|0x207768
block|,
literal|0x616964
block|,
literal|0x616C20
block|,
literal|0x616E20
block|,
literal|0x616E64
block|,
literal|0x617320
block|,
literal|0x617420
block|,
literal|0x617465
block|,
literal|0x617469
block|,
literal|0x642061
block|,
literal|0x642074
block|,
literal|0x652061
block|,
literal|0x652073
block|,
literal|0x652074
block|,
literal|0x656420
block|,
literal|0x656E74
block|,
literal|0x657220
block|,
literal|0x657320
block|,
literal|0x666F72
block|,
literal|0x686174
block|,
literal|0x686520
block|,
literal|0x686572
block|,
literal|0x696420
block|,
literal|0x696E20
block|,
literal|0x696E67
block|,
literal|0x696F6E
block|,
literal|0x697320
block|,
literal|0x6E2061
block|,
literal|0x6E2074
block|,
literal|0x6E6420
block|,
literal|0x6E6720
block|,
literal|0x6E7420
block|,
literal|0x6F6620
block|,
literal|0x6F6E20
block|,
literal|0x6F7220
block|,
literal|0x726520
block|,
literal|0x727320
block|,
literal|0x732061
block|,
literal|0x732074
block|,
literal|0x736169
block|,
literal|0x737420
block|,
literal|0x742074
block|,
literal|0x746572
block|,
literal|0x746861
block|,
literal|0x746865
block|,
literal|0x74696F
block|,
literal|0x746F20
block|,
literal|0x747320
block|,          }
decl_stmt|;
specifier|public
name|String
name|getLanguage
parameter_list|()
block|{
return|return
literal|"en"
return|;
block|}
specifier|public
name|int
name|match
parameter_list|(
name|CharsetDetector
name|det
parameter_list|)
block|{
return|return
name|match
argument_list|(
name|det
argument_list|,
name|ngrams
argument_list|,
name|byteMap
argument_list|)
return|;
block|}
block|}
specifier|static
class|class
name|CharsetRecog_8859_1_es
extends|extends
name|CharsetRecog_8859_1
block|{
specifier|private
specifier|static
name|int
index|[]
name|ngrams
init|=
block|{
literal|0x206120
block|,
literal|0x206361
block|,
literal|0x20636F
block|,
literal|0x206465
block|,
literal|0x20656C
block|,
literal|0x20656E
block|,
literal|0x206573
block|,
literal|0x20696E
block|,
literal|0x206C61
block|,
literal|0x206C6F
block|,
literal|0x207061
block|,
literal|0x20706F
block|,
literal|0x207072
block|,
literal|0x207175
block|,
literal|0x207265
block|,
literal|0x207365
block|,
literal|0x20756E
block|,
literal|0x207920
block|,
literal|0x612063
block|,
literal|0x612064
block|,
literal|0x612065
block|,
literal|0x61206C
block|,
literal|0x612070
block|,
literal|0x616369
block|,
literal|0x61646F
block|,
literal|0x616C20
block|,
literal|0x617220
block|,
literal|0x617320
block|,
literal|0x6369F3
block|,
literal|0x636F6E
block|,
literal|0x646520
block|,
literal|0x64656C
block|,
literal|0x646F20
block|,
literal|0x652064
block|,
literal|0x652065
block|,
literal|0x65206C
block|,
literal|0x656C20
block|,
literal|0x656E20
block|,
literal|0x656E74
block|,
literal|0x657320
block|,
literal|0x657374
block|,
literal|0x69656E
block|,
literal|0x69F36E
block|,
literal|0x6C6120
block|,
literal|0x6C6F73
block|,
literal|0x6E2065
block|,
literal|0x6E7465
block|,
literal|0x6F2064
block|,
literal|0x6F2065
block|,
literal|0x6F6E20
block|,
literal|0x6F7220
block|,
literal|0x6F7320
block|,
literal|0x706172
block|,
literal|0x717565
block|,
literal|0x726120
block|,
literal|0x726573
block|,
literal|0x732064
block|,
literal|0x732065
block|,
literal|0x732070
block|,
literal|0x736520
block|,
literal|0x746520
block|,
literal|0x746F20
block|,
literal|0x756520
block|,
literal|0xF36E20
block|,          }
decl_stmt|;
specifier|public
name|String
name|getLanguage
parameter_list|()
block|{
return|return
literal|"es"
return|;
block|}
specifier|public
name|int
name|match
parameter_list|(
name|CharsetDetector
name|det
parameter_list|)
block|{
return|return
name|match
argument_list|(
name|det
argument_list|,
name|ngrams
argument_list|,
name|byteMap
argument_list|)
return|;
block|}
block|}
specifier|static
class|class
name|CharsetRecog_8859_1_fr
extends|extends
name|CharsetRecog_8859_1
block|{
specifier|private
specifier|static
name|int
index|[]
name|ngrams
init|=
block|{
literal|0x206175
block|,
literal|0x20636F
block|,
literal|0x206461
block|,
literal|0x206465
block|,
literal|0x206475
block|,
literal|0x20656E
block|,
literal|0x206574
block|,
literal|0x206C61
block|,
literal|0x206C65
block|,
literal|0x207061
block|,
literal|0x20706F
block|,
literal|0x207072
block|,
literal|0x207175
block|,
literal|0x207365
block|,
literal|0x20736F
block|,
literal|0x20756E
block|,
literal|0x20E020
block|,
literal|0x616E74
block|,
literal|0x617469
block|,
literal|0x636520
block|,
literal|0x636F6E
block|,
literal|0x646520
block|,
literal|0x646573
block|,
literal|0x647520
block|,
literal|0x652061
block|,
literal|0x652063
block|,
literal|0x652064
block|,
literal|0x652065
block|,
literal|0x65206C
block|,
literal|0x652070
block|,
literal|0x652073
block|,
literal|0x656E20
block|,
literal|0x656E74
block|,
literal|0x657220
block|,
literal|0x657320
block|,
literal|0x657420
block|,
literal|0x657572
block|,
literal|0x696F6E
block|,
literal|0x697320
block|,
literal|0x697420
block|,
literal|0x6C6120
block|,
literal|0x6C6520
block|,
literal|0x6C6573
block|,
literal|0x6D656E
block|,
literal|0x6E2064
block|,
literal|0x6E6520
block|,
literal|0x6E7320
block|,
literal|0x6E7420
block|,
literal|0x6F6E20
block|,
literal|0x6F6E74
block|,
literal|0x6F7572
block|,
literal|0x717565
block|,
literal|0x72206C
block|,
literal|0x726520
block|,
literal|0x732061
block|,
literal|0x732064
block|,
literal|0x732065
block|,
literal|0x73206C
block|,
literal|0x732070
block|,
literal|0x742064
block|,
literal|0x746520
block|,
literal|0x74696F
block|,
literal|0x756520
block|,
literal|0x757220
block|,          }
decl_stmt|;
specifier|public
name|String
name|getLanguage
parameter_list|()
block|{
return|return
literal|"fr"
return|;
block|}
specifier|public
name|int
name|match
parameter_list|(
name|CharsetDetector
name|det
parameter_list|)
block|{
return|return
name|match
argument_list|(
name|det
argument_list|,
name|ngrams
argument_list|,
name|byteMap
argument_list|)
return|;
block|}
block|}
specifier|static
class|class
name|CharsetRecog_8859_1_it
extends|extends
name|CharsetRecog_8859_1
block|{
specifier|private
specifier|static
name|int
index|[]
name|ngrams
init|=
block|{
literal|0x20616C
block|,
literal|0x206368
block|,
literal|0x20636F
block|,
literal|0x206465
block|,
literal|0x206469
block|,
literal|0x206520
block|,
literal|0x20696C
block|,
literal|0x20696E
block|,
literal|0x206C61
block|,
literal|0x207065
block|,
literal|0x207072
block|,
literal|0x20756E
block|,
literal|0x612063
block|,
literal|0x612064
block|,
literal|0x612070
block|,
literal|0x612073
block|,
literal|0x61746F
block|,
literal|0x636865
block|,
literal|0x636F6E
block|,
literal|0x64656C
block|,
literal|0x646920
block|,
literal|0x652061
block|,
literal|0x652063
block|,
literal|0x652064
block|,
literal|0x652069
block|,
literal|0x65206C
block|,
literal|0x652070
block|,
literal|0x652073
block|,
literal|0x656C20
block|,
literal|0x656C6C
block|,
literal|0x656E74
block|,
literal|0x657220
block|,
literal|0x686520
block|,
literal|0x692061
block|,
literal|0x692063
block|,
literal|0x692064
block|,
literal|0x692073
block|,
literal|0x696120
block|,
literal|0x696C20
block|,
literal|0x696E20
block|,
literal|0x696F6E
block|,
literal|0x6C6120
block|,
literal|0x6C6520
block|,
literal|0x6C6920
block|,
literal|0x6C6C61
block|,
literal|0x6E6520
block|,
literal|0x6E6920
block|,
literal|0x6E6F20
block|,
literal|0x6E7465
block|,
literal|0x6F2061
block|,
literal|0x6F2064
block|,
literal|0x6F2069
block|,
literal|0x6F2073
block|,
literal|0x6F6E20
block|,
literal|0x6F6E65
block|,
literal|0x706572
block|,
literal|0x726120
block|,
literal|0x726520
block|,
literal|0x736920
block|,
literal|0x746120
block|,
literal|0x746520
block|,
literal|0x746920
block|,
literal|0x746F20
block|,
literal|0x7A696F
block|,          }
decl_stmt|;
specifier|public
name|String
name|getLanguage
parameter_list|()
block|{
return|return
literal|"it"
return|;
block|}
specifier|public
name|int
name|match
parameter_list|(
name|CharsetDetector
name|det
parameter_list|)
block|{
return|return
name|match
argument_list|(
name|det
argument_list|,
name|ngrams
argument_list|,
name|byteMap
argument_list|)
return|;
block|}
block|}
specifier|static
class|class
name|CharsetRecog_8859_1_nl
extends|extends
name|CharsetRecog_8859_1
block|{
specifier|private
specifier|static
name|int
index|[]
name|ngrams
init|=
block|{
literal|0x20616C
block|,
literal|0x206265
block|,
literal|0x206461
block|,
literal|0x206465
block|,
literal|0x206469
block|,
literal|0x206565
block|,
literal|0x20656E
block|,
literal|0x206765
block|,
literal|0x206865
block|,
literal|0x20696E
block|,
literal|0x206D61
block|,
literal|0x206D65
block|,
literal|0x206F70
block|,
literal|0x207465
block|,
literal|0x207661
block|,
literal|0x207665
block|,
literal|0x20766F
block|,
literal|0x207765
block|,
literal|0x207A69
block|,
literal|0x61616E
block|,
literal|0x616172
block|,
literal|0x616E20
block|,
literal|0x616E64
block|,
literal|0x617220
block|,
literal|0x617420
block|,
literal|0x636874
block|,
literal|0x646520
block|,
literal|0x64656E
block|,
literal|0x646572
block|,
literal|0x652062
block|,
literal|0x652076
block|,
literal|0x65656E
block|,
literal|0x656572
block|,
literal|0x656E20
block|,
literal|0x657220
block|,
literal|0x657273
block|,
literal|0x657420
block|,
literal|0x67656E
block|,
literal|0x686574
block|,
literal|0x696520
block|,
literal|0x696E20
block|,
literal|0x696E67
block|,
literal|0x697320
block|,
literal|0x6E2062
block|,
literal|0x6E2064
block|,
literal|0x6E2065
block|,
literal|0x6E2068
block|,
literal|0x6E206F
block|,
literal|0x6E2076
block|,
literal|0x6E6465
block|,
literal|0x6E6720
block|,
literal|0x6F6E64
block|,
literal|0x6F6F72
block|,
literal|0x6F7020
block|,
literal|0x6F7220
block|,
literal|0x736368
block|,
literal|0x737465
block|,
literal|0x742064
block|,
literal|0x746520
block|,
literal|0x74656E
block|,
literal|0x746572
block|,
literal|0x76616E
block|,
literal|0x766572
block|,
literal|0x766F6F
block|,          }
decl_stmt|;
specifier|public
name|String
name|getLanguage
parameter_list|()
block|{
return|return
literal|"nl"
return|;
block|}
specifier|public
name|int
name|match
parameter_list|(
name|CharsetDetector
name|det
parameter_list|)
block|{
return|return
name|match
argument_list|(
name|det
argument_list|,
name|ngrams
argument_list|,
name|byteMap
argument_list|)
return|;
block|}
block|}
specifier|static
class|class
name|CharsetRecog_8859_1_no
extends|extends
name|CharsetRecog_8859_1
block|{
specifier|private
specifier|static
name|int
index|[]
name|ngrams
init|=
block|{
literal|0x206174
block|,
literal|0x206176
block|,
literal|0x206465
block|,
literal|0x20656E
block|,
literal|0x206572
block|,
literal|0x20666F
block|,
literal|0x206861
block|,
literal|0x206920
block|,
literal|0x206D65
block|,
literal|0x206F67
block|,
literal|0x2070E5
block|,
literal|0x207365
block|,
literal|0x20736B
block|,
literal|0x20736F
block|,
literal|0x207374
block|,
literal|0x207469
block|,
literal|0x207669
block|,
literal|0x20E520
block|,
literal|0x616E64
block|,
literal|0x617220
block|,
literal|0x617420
block|,
literal|0x646520
block|,
literal|0x64656E
block|,
literal|0x646574
block|,
literal|0x652073
block|,
literal|0x656420
block|,
literal|0x656E20
block|,
literal|0x656E65
block|,
literal|0x657220
block|,
literal|0x657265
block|,
literal|0x657420
block|,
literal|0x657474
block|,
literal|0x666F72
block|,
literal|0x67656E
block|,
literal|0x696B6B
block|,
literal|0x696C20
block|,
literal|0x696E67
block|,
literal|0x6B6520
block|,
literal|0x6B6B65
block|,
literal|0x6C6520
block|,
literal|0x6C6C65
block|,
literal|0x6D6564
block|,
literal|0x6D656E
block|,
literal|0x6E2073
block|,
literal|0x6E6520
block|,
literal|0x6E6720
block|,
literal|0x6E6765
block|,
literal|0x6E6E65
block|,
literal|0x6F6720
block|,
literal|0x6F6D20
block|,
literal|0x6F7220
block|,
literal|0x70E520
block|,
literal|0x722073
block|,
literal|0x726520
block|,
literal|0x736F6D
block|,
literal|0x737465
block|,
literal|0x742073
block|,
literal|0x746520
block|,
literal|0x74656E
block|,
literal|0x746572
block|,
literal|0x74696C
block|,
literal|0x747420
block|,
literal|0x747465
block|,
literal|0x766572
block|,          }
decl_stmt|;
specifier|public
name|String
name|getLanguage
parameter_list|()
block|{
return|return
literal|"no"
return|;
block|}
specifier|public
name|int
name|match
parameter_list|(
name|CharsetDetector
name|det
parameter_list|)
block|{
return|return
name|match
argument_list|(
name|det
argument_list|,
name|ngrams
argument_list|,
name|byteMap
argument_list|)
return|;
block|}
block|}
specifier|static
class|class
name|CharsetRecog_8859_1_pt
extends|extends
name|CharsetRecog_8859_1
block|{
specifier|private
specifier|static
name|int
index|[]
name|ngrams
init|=
block|{
literal|0x206120
block|,
literal|0x20636F
block|,
literal|0x206461
block|,
literal|0x206465
block|,
literal|0x20646F
block|,
literal|0x206520
block|,
literal|0x206573
block|,
literal|0x206D61
block|,
literal|0x206E6F
block|,
literal|0x206F20
block|,
literal|0x207061
block|,
literal|0x20706F
block|,
literal|0x207072
block|,
literal|0x207175
block|,
literal|0x207265
block|,
literal|0x207365
block|,
literal|0x20756D
block|,
literal|0x612061
block|,
literal|0x612063
block|,
literal|0x612064
block|,
literal|0x612070
block|,
literal|0x616465
block|,
literal|0x61646F
block|,
literal|0x616C20
block|,
literal|0x617220
block|,
literal|0x617261
block|,
literal|0x617320
block|,
literal|0x636F6D
block|,
literal|0x636F6E
block|,
literal|0x646120
block|,
literal|0x646520
block|,
literal|0x646F20
block|,
literal|0x646F73
block|,
literal|0x652061
block|,
literal|0x652064
block|,
literal|0x656D20
block|,
literal|0x656E74
block|,
literal|0x657320
block|,
literal|0x657374
block|,
literal|0x696120
block|,
literal|0x696361
block|,
literal|0x6D656E
block|,
literal|0x6E7465
block|,
literal|0x6E746F
block|,
literal|0x6F2061
block|,
literal|0x6F2063
block|,
literal|0x6F2064
block|,
literal|0x6F2065
block|,
literal|0x6F2070
block|,
literal|0x6F7320
block|,
literal|0x706172
block|,
literal|0x717565
block|,
literal|0x726120
block|,
literal|0x726573
block|,
literal|0x732061
block|,
literal|0x732064
block|,
literal|0x732065
block|,
literal|0x732070
block|,
literal|0x737461
block|,
literal|0x746520
block|,
literal|0x746F20
block|,
literal|0x756520
block|,
literal|0xE36F20
block|,
literal|0xE7E36F
block|,          }
decl_stmt|;
specifier|public
name|String
name|getLanguage
parameter_list|()
block|{
return|return
literal|"pt"
return|;
block|}
specifier|public
name|int
name|match
parameter_list|(
name|CharsetDetector
name|det
parameter_list|)
block|{
return|return
name|match
argument_list|(
name|det
argument_list|,
name|ngrams
argument_list|,
name|byteMap
argument_list|)
return|;
block|}
block|}
specifier|static
class|class
name|CharsetRecog_8859_1_sv
extends|extends
name|CharsetRecog_8859_1
block|{
specifier|private
specifier|static
name|int
index|[]
name|ngrams
init|=
block|{
literal|0x206174
block|,
literal|0x206176
block|,
literal|0x206465
block|,
literal|0x20656E
block|,
literal|0x2066F6
block|,
literal|0x206861
block|,
literal|0x206920
block|,
literal|0x20696E
block|,
literal|0x206B6F
block|,
literal|0x206D65
block|,
literal|0x206F63
block|,
literal|0x2070E5
block|,
literal|0x20736B
block|,
literal|0x20736F
block|,
literal|0x207374
block|,
literal|0x207469
block|,
literal|0x207661
block|,
literal|0x207669
block|,
literal|0x20E472
block|,
literal|0x616465
block|,
literal|0x616E20
block|,
literal|0x616E64
block|,
literal|0x617220
block|,
literal|0x617474
block|,
literal|0x636820
block|,
literal|0x646520
block|,
literal|0x64656E
block|,
literal|0x646572
block|,
literal|0x646574
block|,
literal|0x656420
block|,
literal|0x656E20
block|,
literal|0x657220
block|,
literal|0x657420
block|,
literal|0x66F672
block|,
literal|0x67656E
block|,
literal|0x696C6C
block|,
literal|0x696E67
block|,
literal|0x6B6120
block|,
literal|0x6C6C20
block|,
literal|0x6D6564
block|,
literal|0x6E2073
block|,
literal|0x6E6120
block|,
literal|0x6E6465
block|,
literal|0x6E6720
block|,
literal|0x6E6765
block|,
literal|0x6E696E
block|,
literal|0x6F6368
block|,
literal|0x6F6D20
block|,
literal|0x6F6E20
block|,
literal|0x70E520
block|,
literal|0x722061
block|,
literal|0x722073
block|,
literal|0x726120
block|,
literal|0x736B61
block|,
literal|0x736F6D
block|,
literal|0x742073
block|,
literal|0x746120
block|,
literal|0x746520
block|,
literal|0x746572
block|,
literal|0x74696C
block|,
literal|0x747420
block|,
literal|0x766172
block|,
literal|0xE47220
block|,
literal|0xF67220
block|,          }
decl_stmt|;
specifier|public
name|String
name|getLanguage
parameter_list|()
block|{
return|return
literal|"sv"
return|;
block|}
specifier|public
name|int
name|match
parameter_list|(
name|CharsetDetector
name|det
parameter_list|)
block|{
return|return
name|match
argument_list|(
name|det
argument_list|,
name|ngrams
argument_list|,
name|byteMap
argument_list|)
return|;
block|}
block|}
specifier|abstract
specifier|static
class|class
name|CharsetRecog_8859_2
extends|extends
name|CharsetRecog_sbcs
block|{
specifier|protected
specifier|static
name|byte
index|[]
name|byteMap
init|=
block|{
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x00
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x61
block|,
operator|(
name|byte
operator|)
literal|0x62
block|,
operator|(
name|byte
operator|)
literal|0x63
block|,
operator|(
name|byte
operator|)
literal|0x64
block|,
operator|(
name|byte
operator|)
literal|0x65
block|,
operator|(
name|byte
operator|)
literal|0x66
block|,
operator|(
name|byte
operator|)
literal|0x67
block|,
operator|(
name|byte
operator|)
literal|0x68
block|,
operator|(
name|byte
operator|)
literal|0x69
block|,
operator|(
name|byte
operator|)
literal|0x6A
block|,
operator|(
name|byte
operator|)
literal|0x6B
block|,
operator|(
name|byte
operator|)
literal|0x6C
block|,
operator|(
name|byte
operator|)
literal|0x6D
block|,
operator|(
name|byte
operator|)
literal|0x6E
block|,
operator|(
name|byte
operator|)
literal|0x6F
block|,
operator|(
name|byte
operator|)
literal|0x70
block|,
operator|(
name|byte
operator|)
literal|0x71
block|,
operator|(
name|byte
operator|)
literal|0x72
block|,
operator|(
name|byte
operator|)
literal|0x73
block|,
operator|(
name|byte
operator|)
literal|0x74
block|,
operator|(
name|byte
operator|)
literal|0x75
block|,
operator|(
name|byte
operator|)
literal|0x76
block|,
operator|(
name|byte
operator|)
literal|0x77
block|,
operator|(
name|byte
operator|)
literal|0x78
block|,
operator|(
name|byte
operator|)
literal|0x79
block|,
operator|(
name|byte
operator|)
literal|0x7A
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x61
block|,
operator|(
name|byte
operator|)
literal|0x62
block|,
operator|(
name|byte
operator|)
literal|0x63
block|,
operator|(
name|byte
operator|)
literal|0x64
block|,
operator|(
name|byte
operator|)
literal|0x65
block|,
operator|(
name|byte
operator|)
literal|0x66
block|,
operator|(
name|byte
operator|)
literal|0x67
block|,
operator|(
name|byte
operator|)
literal|0x68
block|,
operator|(
name|byte
operator|)
literal|0x69
block|,
operator|(
name|byte
operator|)
literal|0x6A
block|,
operator|(
name|byte
operator|)
literal|0x6B
block|,
operator|(
name|byte
operator|)
literal|0x6C
block|,
operator|(
name|byte
operator|)
literal|0x6D
block|,
operator|(
name|byte
operator|)
literal|0x6E
block|,
operator|(
name|byte
operator|)
literal|0x6F
block|,
operator|(
name|byte
operator|)
literal|0x70
block|,
operator|(
name|byte
operator|)
literal|0x71
block|,
operator|(
name|byte
operator|)
literal|0x72
block|,
operator|(
name|byte
operator|)
literal|0x73
block|,
operator|(
name|byte
operator|)
literal|0x74
block|,
operator|(
name|byte
operator|)
literal|0x75
block|,
operator|(
name|byte
operator|)
literal|0x76
block|,
operator|(
name|byte
operator|)
literal|0x77
block|,
operator|(
name|byte
operator|)
literal|0x78
block|,
operator|(
name|byte
operator|)
literal|0x79
block|,
operator|(
name|byte
operator|)
literal|0x7A
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0xB1
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0xB3
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0xB5
block|,
operator|(
name|byte
operator|)
literal|0xB6
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0xB9
block|,
operator|(
name|byte
operator|)
literal|0xBA
block|,
operator|(
name|byte
operator|)
literal|0xBB
block|,
operator|(
name|byte
operator|)
literal|0xBC
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0xBE
block|,
operator|(
name|byte
operator|)
literal|0xBF
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0xB1
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0xB3
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0xB5
block|,
operator|(
name|byte
operator|)
literal|0xB6
block|,
operator|(
name|byte
operator|)
literal|0xB7
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0xB9
block|,
operator|(
name|byte
operator|)
literal|0xBA
block|,
operator|(
name|byte
operator|)
literal|0xBB
block|,
operator|(
name|byte
operator|)
literal|0xBC
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0xBE
block|,
operator|(
name|byte
operator|)
literal|0xBF
block|,
operator|(
name|byte
operator|)
literal|0xE0
block|,
operator|(
name|byte
operator|)
literal|0xE1
block|,
operator|(
name|byte
operator|)
literal|0xE2
block|,
operator|(
name|byte
operator|)
literal|0xE3
block|,
operator|(
name|byte
operator|)
literal|0xE4
block|,
operator|(
name|byte
operator|)
literal|0xE5
block|,
operator|(
name|byte
operator|)
literal|0xE6
block|,
operator|(
name|byte
operator|)
literal|0xE7
block|,
operator|(
name|byte
operator|)
literal|0xE8
block|,
operator|(
name|byte
operator|)
literal|0xE9
block|,
operator|(
name|byte
operator|)
literal|0xEA
block|,
operator|(
name|byte
operator|)
literal|0xEB
block|,
operator|(
name|byte
operator|)
literal|0xEC
block|,
operator|(
name|byte
operator|)
literal|0xED
block|,
operator|(
name|byte
operator|)
literal|0xEE
block|,
operator|(
name|byte
operator|)
literal|0xEF
block|,
operator|(
name|byte
operator|)
literal|0xF0
block|,
operator|(
name|byte
operator|)
literal|0xF1
block|,
operator|(
name|byte
operator|)
literal|0xF2
block|,
operator|(
name|byte
operator|)
literal|0xF3
block|,
operator|(
name|byte
operator|)
literal|0xF4
block|,
operator|(
name|byte
operator|)
literal|0xF5
block|,
operator|(
name|byte
operator|)
literal|0xF6
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0xF8
block|,
operator|(
name|byte
operator|)
literal|0xF9
block|,
operator|(
name|byte
operator|)
literal|0xFA
block|,
operator|(
name|byte
operator|)
literal|0xFB
block|,
operator|(
name|byte
operator|)
literal|0xFC
block|,
operator|(
name|byte
operator|)
literal|0xFD
block|,
operator|(
name|byte
operator|)
literal|0xFE
block|,
operator|(
name|byte
operator|)
literal|0xDF
block|,
operator|(
name|byte
operator|)
literal|0xE0
block|,
operator|(
name|byte
operator|)
literal|0xE1
block|,
operator|(
name|byte
operator|)
literal|0xE2
block|,
operator|(
name|byte
operator|)
literal|0xE3
block|,
operator|(
name|byte
operator|)
literal|0xE4
block|,
operator|(
name|byte
operator|)
literal|0xE5
block|,
operator|(
name|byte
operator|)
literal|0xE6
block|,
operator|(
name|byte
operator|)
literal|0xE7
block|,
operator|(
name|byte
operator|)
literal|0xE8
block|,
operator|(
name|byte
operator|)
literal|0xE9
block|,
operator|(
name|byte
operator|)
literal|0xEA
block|,
operator|(
name|byte
operator|)
literal|0xEB
block|,
operator|(
name|byte
operator|)
literal|0xEC
block|,
operator|(
name|byte
operator|)
literal|0xED
block|,
operator|(
name|byte
operator|)
literal|0xEE
block|,
operator|(
name|byte
operator|)
literal|0xEF
block|,
operator|(
name|byte
operator|)
literal|0xF0
block|,
operator|(
name|byte
operator|)
literal|0xF1
block|,
operator|(
name|byte
operator|)
literal|0xF2
block|,
operator|(
name|byte
operator|)
literal|0xF3
block|,
operator|(
name|byte
operator|)
literal|0xF4
block|,
operator|(
name|byte
operator|)
literal|0xF5
block|,
operator|(
name|byte
operator|)
literal|0xF6
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0xF8
block|,
operator|(
name|byte
operator|)
literal|0xF9
block|,
operator|(
name|byte
operator|)
literal|0xFA
block|,
operator|(
name|byte
operator|)
literal|0xFB
block|,
operator|(
name|byte
operator|)
literal|0xFC
block|,
operator|(
name|byte
operator|)
literal|0xFD
block|,
operator|(
name|byte
operator|)
literal|0xFE
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,          }
decl_stmt|;
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|haveC1Bytes
condition|?
literal|"windows-1250"
else|:
literal|"ISO-8859-2"
return|;
block|}
block|}
specifier|static
class|class
name|CharsetRecog_8859_2_cs
extends|extends
name|CharsetRecog_8859_2
block|{
specifier|private
specifier|static
name|int
index|[]
name|ngrams
init|=
block|{
literal|0x206120
block|,
literal|0x206279
block|,
literal|0x20646F
block|,
literal|0x206A65
block|,
literal|0x206E61
block|,
literal|0x206E65
block|,
literal|0x206F20
block|,
literal|0x206F64
block|,
literal|0x20706F
block|,
literal|0x207072
block|,
literal|0x2070F8
block|,
literal|0x20726F
block|,
literal|0x207365
block|,
literal|0x20736F
block|,
literal|0x207374
block|,
literal|0x20746F
block|,
literal|0x207620
block|,
literal|0x207679
block|,
literal|0x207A61
block|,
literal|0x612070
block|,
literal|0x636520
block|,
literal|0x636820
block|,
literal|0x652070
block|,
literal|0x652073
block|,
literal|0x652076
block|,
literal|0x656D20
block|,
literal|0x656EED
block|,
literal|0x686F20
block|,
literal|0x686F64
block|,
literal|0x697374
block|,
literal|0x6A6520
block|,
literal|0x6B7465
block|,
literal|0x6C6520
block|,
literal|0x6C6920
block|,
literal|0x6E6120
block|,
literal|0x6EE920
block|,
literal|0x6EEC20
block|,
literal|0x6EED20
block|,
literal|0x6F2070
block|,
literal|0x6F646E
block|,
literal|0x6F6A69
block|,
literal|0x6F7374
block|,
literal|0x6F7520
block|,
literal|0x6F7661
block|,
literal|0x706F64
block|,
literal|0x706F6A
block|,
literal|0x70726F
block|,
literal|0x70F865
block|,
literal|0x736520
block|,
literal|0x736F75
block|,
literal|0x737461
block|,
literal|0x737469
block|,
literal|0x73746E
block|,
literal|0x746572
block|,
literal|0x746EED
block|,
literal|0x746F20
block|,
literal|0x752070
block|,
literal|0xBE6520
block|,
literal|0xE16EED
block|,
literal|0xE9686F
block|,
literal|0xED2070
block|,
literal|0xED2073
block|,
literal|0xED6D20
block|,
literal|0xF86564
block|,          }
decl_stmt|;
specifier|public
name|String
name|getLanguage
parameter_list|()
block|{
return|return
literal|"cs"
return|;
block|}
specifier|public
name|int
name|match
parameter_list|(
name|CharsetDetector
name|det
parameter_list|)
block|{
return|return
name|match
argument_list|(
name|det
argument_list|,
name|ngrams
argument_list|,
name|byteMap
argument_list|)
return|;
block|}
block|}
specifier|static
class|class
name|CharsetRecog_8859_2_hu
extends|extends
name|CharsetRecog_8859_2
block|{
specifier|private
specifier|static
name|int
index|[]
name|ngrams
init|=
block|{
literal|0x206120
block|,
literal|0x20617A
block|,
literal|0x206265
block|,
literal|0x206567
block|,
literal|0x20656C
block|,
literal|0x206665
block|,
literal|0x206861
block|,
literal|0x20686F
block|,
literal|0x206973
block|,
literal|0x206B65
block|,
literal|0x206B69
block|,
literal|0x206BF6
block|,
literal|0x206C65
block|,
literal|0x206D61
block|,
literal|0x206D65
block|,
literal|0x206D69
block|,
literal|0x206E65
block|,
literal|0x20737A
block|,
literal|0x207465
block|,
literal|0x20E973
block|,
literal|0x612061
block|,
literal|0x61206B
block|,
literal|0x61206D
block|,
literal|0x612073
block|,
literal|0x616B20
block|,
literal|0x616E20
block|,
literal|0x617A20
block|,
literal|0x62616E
block|,
literal|0x62656E
block|,
literal|0x656779
block|,
literal|0x656B20
block|,
literal|0x656C20
block|,
literal|0x656C65
block|,
literal|0x656D20
block|,
literal|0x656E20
block|,
literal|0x657265
block|,
literal|0x657420
block|,
literal|0x657465
block|,
literal|0x657474
block|,
literal|0x677920
block|,
literal|0x686F67
block|,
literal|0x696E74
block|,
literal|0x697320
block|,
literal|0x6B2061
block|,
literal|0x6BF67A
block|,
literal|0x6D6567
block|,
literal|0x6D696E
block|,
literal|0x6E2061
block|,
literal|0x6E616B
block|,
literal|0x6E656B
block|,
literal|0x6E656D
block|,
literal|0x6E7420
block|,
literal|0x6F6779
block|,
literal|0x732061
block|,
literal|0x737A65
block|,
literal|0x737A74
block|,
literal|0x737AE1
block|,
literal|0x73E967
block|,
literal|0x742061
block|,
literal|0x747420
block|,
literal|0x74E173
block|,
literal|0x7A6572
block|,
literal|0xE16E20
block|,
literal|0xE97320
block|,          }
decl_stmt|;
specifier|public
name|String
name|getLanguage
parameter_list|()
block|{
return|return
literal|"hu"
return|;
block|}
specifier|public
name|int
name|match
parameter_list|(
name|CharsetDetector
name|det
parameter_list|)
block|{
return|return
name|match
argument_list|(
name|det
argument_list|,
name|ngrams
argument_list|,
name|byteMap
argument_list|)
return|;
block|}
block|}
specifier|static
class|class
name|CharsetRecog_8859_2_pl
extends|extends
name|CharsetRecog_8859_2
block|{
specifier|private
specifier|static
name|int
index|[]
name|ngrams
init|=
block|{
literal|0x20637A
block|,
literal|0x20646F
block|,
literal|0x206920
block|,
literal|0x206A65
block|,
literal|0x206B6F
block|,
literal|0x206D61
block|,
literal|0x206D69
block|,
literal|0x206E61
block|,
literal|0x206E69
block|,
literal|0x206F64
block|,
literal|0x20706F
block|,
literal|0x207072
block|,
literal|0x207369
block|,
literal|0x207720
block|,
literal|0x207769
block|,
literal|0x207779
block|,
literal|0x207A20
block|,
literal|0x207A61
block|,
literal|0x612070
block|,
literal|0x612077
block|,
literal|0x616E69
block|,
literal|0x636820
block|,
literal|0x637A65
block|,
literal|0x637A79
block|,
literal|0x646F20
block|,
literal|0x647A69
block|,
literal|0x652070
block|,
literal|0x652073
block|,
literal|0x652077
block|,
literal|0x65207A
block|,
literal|0x65676F
block|,
literal|0x656A20
block|,
literal|0x656D20
block|,
literal|0x656E69
block|,
literal|0x676F20
block|,
literal|0x696120
block|,
literal|0x696520
block|,
literal|0x69656A
block|,
literal|0x6B6120
block|,
literal|0x6B6920
block|,
literal|0x6B6965
block|,
literal|0x6D6965
block|,
literal|0x6E6120
block|,
literal|0x6E6961
block|,
literal|0x6E6965
block|,
literal|0x6F2070
block|,
literal|0x6F7761
block|,
literal|0x6F7769
block|,
literal|0x706F6C
block|,
literal|0x707261
block|,
literal|0x70726F
block|,
literal|0x70727A
block|,
literal|0x727A65
block|,
literal|0x727A79
block|,
literal|0x7369EA
block|,
literal|0x736B69
block|,
literal|0x737461
block|,
literal|0x776965
block|,
literal|0x796368
block|,
literal|0x796D20
block|,
literal|0x7A6520
block|,
literal|0x7A6965
block|,
literal|0x7A7920
block|,
literal|0xF37720
block|,          }
decl_stmt|;
specifier|public
name|String
name|getLanguage
parameter_list|()
block|{
return|return
literal|"pl"
return|;
block|}
specifier|public
name|int
name|match
parameter_list|(
name|CharsetDetector
name|det
parameter_list|)
block|{
return|return
name|match
argument_list|(
name|det
argument_list|,
name|ngrams
argument_list|,
name|byteMap
argument_list|)
return|;
block|}
block|}
specifier|static
class|class
name|CharsetRecog_8859_2_ro
extends|extends
name|CharsetRecog_8859_2
block|{
specifier|private
specifier|static
name|int
index|[]
name|ngrams
init|=
block|{
literal|0x206120
block|,
literal|0x206163
block|,
literal|0x206361
block|,
literal|0x206365
block|,
literal|0x20636F
block|,
literal|0x206375
block|,
literal|0x206465
block|,
literal|0x206469
block|,
literal|0x206C61
block|,
literal|0x206D61
block|,
literal|0x207065
block|,
literal|0x207072
block|,
literal|0x207365
block|,
literal|0x2073E3
block|,
literal|0x20756E
block|,
literal|0x20BA69
block|,
literal|0x20EE6E
block|,
literal|0x612063
block|,
literal|0x612064
block|,
literal|0x617265
block|,
literal|0x617420
block|,
literal|0x617465
block|,
literal|0x617520
block|,
literal|0x636172
block|,
literal|0x636F6E
block|,
literal|0x637520
block|,
literal|0x63E320
block|,
literal|0x646520
block|,
literal|0x652061
block|,
literal|0x652063
block|,
literal|0x652064
block|,
literal|0x652070
block|,
literal|0x652073
block|,
literal|0x656120
block|,
literal|0x656920
block|,
literal|0x656C65
block|,
literal|0x656E74
block|,
literal|0x657374
block|,
literal|0x692061
block|,
literal|0x692063
block|,
literal|0x692064
block|,
literal|0x692070
block|,
literal|0x696520
block|,
literal|0x696920
block|,
literal|0x696E20
block|,
literal|0x6C6120
block|,
literal|0x6C6520
block|,
literal|0x6C6F72
block|,
literal|0x6C7569
block|,
literal|0x6E6520
block|,
literal|0x6E7472
block|,
literal|0x6F7220
block|,
literal|0x70656E
block|,
literal|0x726520
block|,
literal|0x726561
block|,
literal|0x727520
block|,
literal|0x73E320
block|,
literal|0x746520
block|,
literal|0x747275
block|,
literal|0x74E320
block|,
literal|0x756920
block|,
literal|0x756C20
block|,
literal|0xBA6920
block|,
literal|0xEE6E20
block|,          }
decl_stmt|;
specifier|public
name|String
name|getLanguage
parameter_list|()
block|{
return|return
literal|"ro"
return|;
block|}
specifier|public
name|int
name|match
parameter_list|(
name|CharsetDetector
name|det
parameter_list|)
block|{
return|return
name|match
argument_list|(
name|det
argument_list|,
name|ngrams
argument_list|,
name|byteMap
argument_list|)
return|;
block|}
block|}
specifier|abstract
specifier|static
class|class
name|CharsetRecog_8859_5
extends|extends
name|CharsetRecog_sbcs
block|{
specifier|protected
specifier|static
name|byte
index|[]
name|byteMap
init|=
block|{
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x00
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x61
block|,
operator|(
name|byte
operator|)
literal|0x62
block|,
operator|(
name|byte
operator|)
literal|0x63
block|,
operator|(
name|byte
operator|)
literal|0x64
block|,
operator|(
name|byte
operator|)
literal|0x65
block|,
operator|(
name|byte
operator|)
literal|0x66
block|,
operator|(
name|byte
operator|)
literal|0x67
block|,
operator|(
name|byte
operator|)
literal|0x68
block|,
operator|(
name|byte
operator|)
literal|0x69
block|,
operator|(
name|byte
operator|)
literal|0x6A
block|,
operator|(
name|byte
operator|)
literal|0x6B
block|,
operator|(
name|byte
operator|)
literal|0x6C
block|,
operator|(
name|byte
operator|)
literal|0x6D
block|,
operator|(
name|byte
operator|)
literal|0x6E
block|,
operator|(
name|byte
operator|)
literal|0x6F
block|,
operator|(
name|byte
operator|)
literal|0x70
block|,
operator|(
name|byte
operator|)
literal|0x71
block|,
operator|(
name|byte
operator|)
literal|0x72
block|,
operator|(
name|byte
operator|)
literal|0x73
block|,
operator|(
name|byte
operator|)
literal|0x74
block|,
operator|(
name|byte
operator|)
literal|0x75
block|,
operator|(
name|byte
operator|)
literal|0x76
block|,
operator|(
name|byte
operator|)
literal|0x77
block|,
operator|(
name|byte
operator|)
literal|0x78
block|,
operator|(
name|byte
operator|)
literal|0x79
block|,
operator|(
name|byte
operator|)
literal|0x7A
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x61
block|,
operator|(
name|byte
operator|)
literal|0x62
block|,
operator|(
name|byte
operator|)
literal|0x63
block|,
operator|(
name|byte
operator|)
literal|0x64
block|,
operator|(
name|byte
operator|)
literal|0x65
block|,
operator|(
name|byte
operator|)
literal|0x66
block|,
operator|(
name|byte
operator|)
literal|0x67
block|,
operator|(
name|byte
operator|)
literal|0x68
block|,
operator|(
name|byte
operator|)
literal|0x69
block|,
operator|(
name|byte
operator|)
literal|0x6A
block|,
operator|(
name|byte
operator|)
literal|0x6B
block|,
operator|(
name|byte
operator|)
literal|0x6C
block|,
operator|(
name|byte
operator|)
literal|0x6D
block|,
operator|(
name|byte
operator|)
literal|0x6E
block|,
operator|(
name|byte
operator|)
literal|0x6F
block|,
operator|(
name|byte
operator|)
literal|0x70
block|,
operator|(
name|byte
operator|)
literal|0x71
block|,
operator|(
name|byte
operator|)
literal|0x72
block|,
operator|(
name|byte
operator|)
literal|0x73
block|,
operator|(
name|byte
operator|)
literal|0x74
block|,
operator|(
name|byte
operator|)
literal|0x75
block|,
operator|(
name|byte
operator|)
literal|0x76
block|,
operator|(
name|byte
operator|)
literal|0x77
block|,
operator|(
name|byte
operator|)
literal|0x78
block|,
operator|(
name|byte
operator|)
literal|0x79
block|,
operator|(
name|byte
operator|)
literal|0x7A
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0xF1
block|,
operator|(
name|byte
operator|)
literal|0xF2
block|,
operator|(
name|byte
operator|)
literal|0xF3
block|,
operator|(
name|byte
operator|)
literal|0xF4
block|,
operator|(
name|byte
operator|)
literal|0xF5
block|,
operator|(
name|byte
operator|)
literal|0xF6
block|,
operator|(
name|byte
operator|)
literal|0xF7
block|,
operator|(
name|byte
operator|)
literal|0xF8
block|,
operator|(
name|byte
operator|)
literal|0xF9
block|,
operator|(
name|byte
operator|)
literal|0xFA
block|,
operator|(
name|byte
operator|)
literal|0xFB
block|,
operator|(
name|byte
operator|)
literal|0xFC
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0xFE
block|,
operator|(
name|byte
operator|)
literal|0xFF
block|,
operator|(
name|byte
operator|)
literal|0xD0
block|,
operator|(
name|byte
operator|)
literal|0xD1
block|,
operator|(
name|byte
operator|)
literal|0xD2
block|,
operator|(
name|byte
operator|)
literal|0xD3
block|,
operator|(
name|byte
operator|)
literal|0xD4
block|,
operator|(
name|byte
operator|)
literal|0xD5
block|,
operator|(
name|byte
operator|)
literal|0xD6
block|,
operator|(
name|byte
operator|)
literal|0xD7
block|,
operator|(
name|byte
operator|)
literal|0xD8
block|,
operator|(
name|byte
operator|)
literal|0xD9
block|,
operator|(
name|byte
operator|)
literal|0xDA
block|,
operator|(
name|byte
operator|)
literal|0xDB
block|,
operator|(
name|byte
operator|)
literal|0xDC
block|,
operator|(
name|byte
operator|)
literal|0xDD
block|,
operator|(
name|byte
operator|)
literal|0xDE
block|,
operator|(
name|byte
operator|)
literal|0xDF
block|,
operator|(
name|byte
operator|)
literal|0xE0
block|,
operator|(
name|byte
operator|)
literal|0xE1
block|,
operator|(
name|byte
operator|)
literal|0xE2
block|,
operator|(
name|byte
operator|)
literal|0xE3
block|,
operator|(
name|byte
operator|)
literal|0xE4
block|,
operator|(
name|byte
operator|)
literal|0xE5
block|,
operator|(
name|byte
operator|)
literal|0xE6
block|,
operator|(
name|byte
operator|)
literal|0xE7
block|,
operator|(
name|byte
operator|)
literal|0xE8
block|,
operator|(
name|byte
operator|)
literal|0xE9
block|,
operator|(
name|byte
operator|)
literal|0xEA
block|,
operator|(
name|byte
operator|)
literal|0xEB
block|,
operator|(
name|byte
operator|)
literal|0xEC
block|,
operator|(
name|byte
operator|)
literal|0xED
block|,
operator|(
name|byte
operator|)
literal|0xEE
block|,
operator|(
name|byte
operator|)
literal|0xEF
block|,
operator|(
name|byte
operator|)
literal|0xD0
block|,
operator|(
name|byte
operator|)
literal|0xD1
block|,
operator|(
name|byte
operator|)
literal|0xD2
block|,
operator|(
name|byte
operator|)
literal|0xD3
block|,
operator|(
name|byte
operator|)
literal|0xD4
block|,
operator|(
name|byte
operator|)
literal|0xD5
block|,
operator|(
name|byte
operator|)
literal|0xD6
block|,
operator|(
name|byte
operator|)
literal|0xD7
block|,
operator|(
name|byte
operator|)
literal|0xD8
block|,
operator|(
name|byte
operator|)
literal|0xD9
block|,
operator|(
name|byte
operator|)
literal|0xDA
block|,
operator|(
name|byte
operator|)
literal|0xDB
block|,
operator|(
name|byte
operator|)
literal|0xDC
block|,
operator|(
name|byte
operator|)
literal|0xDD
block|,
operator|(
name|byte
operator|)
literal|0xDE
block|,
operator|(
name|byte
operator|)
literal|0xDF
block|,
operator|(
name|byte
operator|)
literal|0xE0
block|,
operator|(
name|byte
operator|)
literal|0xE1
block|,
operator|(
name|byte
operator|)
literal|0xE2
block|,
operator|(
name|byte
operator|)
literal|0xE3
block|,
operator|(
name|byte
operator|)
literal|0xE4
block|,
operator|(
name|byte
operator|)
literal|0xE5
block|,
operator|(
name|byte
operator|)
literal|0xE6
block|,
operator|(
name|byte
operator|)
literal|0xE7
block|,
operator|(
name|byte
operator|)
literal|0xE8
block|,
operator|(
name|byte
operator|)
literal|0xE9
block|,
operator|(
name|byte
operator|)
literal|0xEA
block|,
operator|(
name|byte
operator|)
literal|0xEB
block|,
operator|(
name|byte
operator|)
literal|0xEC
block|,
operator|(
name|byte
operator|)
literal|0xED
block|,
operator|(
name|byte
operator|)
literal|0xEE
block|,
operator|(
name|byte
operator|)
literal|0xEF
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0xF1
block|,
operator|(
name|byte
operator|)
literal|0xF2
block|,
operator|(
name|byte
operator|)
literal|0xF3
block|,
operator|(
name|byte
operator|)
literal|0xF4
block|,
operator|(
name|byte
operator|)
literal|0xF5
block|,
operator|(
name|byte
operator|)
literal|0xF6
block|,
operator|(
name|byte
operator|)
literal|0xF7
block|,
operator|(
name|byte
operator|)
literal|0xF8
block|,
operator|(
name|byte
operator|)
literal|0xF9
block|,
operator|(
name|byte
operator|)
literal|0xFA
block|,
operator|(
name|byte
operator|)
literal|0xFB
block|,
operator|(
name|byte
operator|)
literal|0xFC
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0xFE
block|,
operator|(
name|byte
operator|)
literal|0xFF
block|,          }
decl_stmt|;
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
literal|"ISO-8859-5"
return|;
block|}
block|}
specifier|static
class|class
name|CharsetRecog_8859_5_ru
extends|extends
name|CharsetRecog_8859_5
block|{
specifier|private
specifier|static
name|int
index|[]
name|ngrams
init|=
block|{
literal|0x20D220
block|,
literal|0x20D2DE
block|,
literal|0x20D4DE
block|,
literal|0x20D7D0
block|,
literal|0x20D820
block|,
literal|0x20DAD0
block|,
literal|0x20DADE
block|,
literal|0x20DDD0
block|,
literal|0x20DDD5
block|,
literal|0x20DED1
block|,
literal|0x20DFDE
block|,
literal|0x20DFE0
block|,
literal|0x20E0D0
block|,
literal|0x20E1DE
block|,
literal|0x20E1E2
block|,
literal|0x20E2DE
block|,
literal|0x20E7E2
block|,
literal|0x20EDE2
block|,
literal|0xD0DDD8
block|,
literal|0xD0E2EC
block|,
literal|0xD3DE20
block|,
literal|0xD5DBEC
block|,
literal|0xD5DDD8
block|,
literal|0xD5E1E2
block|,
literal|0xD5E220
block|,
literal|0xD820DF
block|,
literal|0xD8D520
block|,
literal|0xD8D820
block|,
literal|0xD8EF20
block|,
literal|0xDBD5DD
block|,
literal|0xDBD820
block|,
literal|0xDBECDD
block|,
literal|0xDDD020
block|,
literal|0xDDD520
block|,
literal|0xDDD8D5
block|,
literal|0xDDD8EF
block|,
literal|0xDDDE20
block|,
literal|0xDDDED2
block|,
literal|0xDE20D2
block|,
literal|0xDE20DF
block|,
literal|0xDE20E1
block|,
literal|0xDED220
block|,
literal|0xDED2D0
block|,
literal|0xDED3DE
block|,
literal|0xDED920
block|,
literal|0xDEDBEC
block|,
literal|0xDEDC20
block|,
literal|0xDEE1E2
block|,
literal|0xDFDEDB
block|,
literal|0xDFE0D5
block|,
literal|0xDFE0D8
block|,
literal|0xDFE0DE
block|,
literal|0xE0D0D2
block|,
literal|0xE0D5D4
block|,
literal|0xE1E2D0
block|,
literal|0xE1E2D2
block|,
literal|0xE1E2D8
block|,
literal|0xE1EF20
block|,
literal|0xE2D5DB
block|,
literal|0xE2DE20
block|,
literal|0xE2DEE0
block|,
literal|0xE2EC20
block|,
literal|0xE7E2DE
block|,
literal|0xEBE520
block|,          }
decl_stmt|;
specifier|public
name|String
name|getLanguage
parameter_list|()
block|{
return|return
literal|"ru"
return|;
block|}
specifier|public
name|int
name|match
parameter_list|(
name|CharsetDetector
name|det
parameter_list|)
block|{
return|return
name|match
argument_list|(
name|det
argument_list|,
name|ngrams
argument_list|,
name|byteMap
argument_list|)
return|;
block|}
block|}
specifier|abstract
specifier|static
class|class
name|CharsetRecog_8859_6
extends|extends
name|CharsetRecog_sbcs
block|{
specifier|protected
specifier|static
name|byte
index|[]
name|byteMap
init|=
block|{
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x00
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x61
block|,
operator|(
name|byte
operator|)
literal|0x62
block|,
operator|(
name|byte
operator|)
literal|0x63
block|,
operator|(
name|byte
operator|)
literal|0x64
block|,
operator|(
name|byte
operator|)
literal|0x65
block|,
operator|(
name|byte
operator|)
literal|0x66
block|,
operator|(
name|byte
operator|)
literal|0x67
block|,
operator|(
name|byte
operator|)
literal|0x68
block|,
operator|(
name|byte
operator|)
literal|0x69
block|,
operator|(
name|byte
operator|)
literal|0x6A
block|,
operator|(
name|byte
operator|)
literal|0x6B
block|,
operator|(
name|byte
operator|)
literal|0x6C
block|,
operator|(
name|byte
operator|)
literal|0x6D
block|,
operator|(
name|byte
operator|)
literal|0x6E
block|,
operator|(
name|byte
operator|)
literal|0x6F
block|,
operator|(
name|byte
operator|)
literal|0x70
block|,
operator|(
name|byte
operator|)
literal|0x71
block|,
operator|(
name|byte
operator|)
literal|0x72
block|,
operator|(
name|byte
operator|)
literal|0x73
block|,
operator|(
name|byte
operator|)
literal|0x74
block|,
operator|(
name|byte
operator|)
literal|0x75
block|,
operator|(
name|byte
operator|)
literal|0x76
block|,
operator|(
name|byte
operator|)
literal|0x77
block|,
operator|(
name|byte
operator|)
literal|0x78
block|,
operator|(
name|byte
operator|)
literal|0x79
block|,
operator|(
name|byte
operator|)
literal|0x7A
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x61
block|,
operator|(
name|byte
operator|)
literal|0x62
block|,
operator|(
name|byte
operator|)
literal|0x63
block|,
operator|(
name|byte
operator|)
literal|0x64
block|,
operator|(
name|byte
operator|)
literal|0x65
block|,
operator|(
name|byte
operator|)
literal|0x66
block|,
operator|(
name|byte
operator|)
literal|0x67
block|,
operator|(
name|byte
operator|)
literal|0x68
block|,
operator|(
name|byte
operator|)
literal|0x69
block|,
operator|(
name|byte
operator|)
literal|0x6A
block|,
operator|(
name|byte
operator|)
literal|0x6B
block|,
operator|(
name|byte
operator|)
literal|0x6C
block|,
operator|(
name|byte
operator|)
literal|0x6D
block|,
operator|(
name|byte
operator|)
literal|0x6E
block|,
operator|(
name|byte
operator|)
literal|0x6F
block|,
operator|(
name|byte
operator|)
literal|0x70
block|,
operator|(
name|byte
operator|)
literal|0x71
block|,
operator|(
name|byte
operator|)
literal|0x72
block|,
operator|(
name|byte
operator|)
literal|0x73
block|,
operator|(
name|byte
operator|)
literal|0x74
block|,
operator|(
name|byte
operator|)
literal|0x75
block|,
operator|(
name|byte
operator|)
literal|0x76
block|,
operator|(
name|byte
operator|)
literal|0x77
block|,
operator|(
name|byte
operator|)
literal|0x78
block|,
operator|(
name|byte
operator|)
literal|0x79
block|,
operator|(
name|byte
operator|)
literal|0x7A
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0xC1
block|,
operator|(
name|byte
operator|)
literal|0xC2
block|,
operator|(
name|byte
operator|)
literal|0xC3
block|,
operator|(
name|byte
operator|)
literal|0xC4
block|,
operator|(
name|byte
operator|)
literal|0xC5
block|,
operator|(
name|byte
operator|)
literal|0xC6
block|,
operator|(
name|byte
operator|)
literal|0xC7
block|,
operator|(
name|byte
operator|)
literal|0xC8
block|,
operator|(
name|byte
operator|)
literal|0xC9
block|,
operator|(
name|byte
operator|)
literal|0xCA
block|,
operator|(
name|byte
operator|)
literal|0xCB
block|,
operator|(
name|byte
operator|)
literal|0xCC
block|,
operator|(
name|byte
operator|)
literal|0xCD
block|,
operator|(
name|byte
operator|)
literal|0xCE
block|,
operator|(
name|byte
operator|)
literal|0xCF
block|,
operator|(
name|byte
operator|)
literal|0xD0
block|,
operator|(
name|byte
operator|)
literal|0xD1
block|,
operator|(
name|byte
operator|)
literal|0xD2
block|,
operator|(
name|byte
operator|)
literal|0xD3
block|,
operator|(
name|byte
operator|)
literal|0xD4
block|,
operator|(
name|byte
operator|)
literal|0xD5
block|,
operator|(
name|byte
operator|)
literal|0xD6
block|,
operator|(
name|byte
operator|)
literal|0xD7
block|,
operator|(
name|byte
operator|)
literal|0xD8
block|,
operator|(
name|byte
operator|)
literal|0xD9
block|,
operator|(
name|byte
operator|)
literal|0xDA
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0xE0
block|,
operator|(
name|byte
operator|)
literal|0xE1
block|,
operator|(
name|byte
operator|)
literal|0xE2
block|,
operator|(
name|byte
operator|)
literal|0xE3
block|,
operator|(
name|byte
operator|)
literal|0xE4
block|,
operator|(
name|byte
operator|)
literal|0xE5
block|,
operator|(
name|byte
operator|)
literal|0xE6
block|,
operator|(
name|byte
operator|)
literal|0xE7
block|,
operator|(
name|byte
operator|)
literal|0xE8
block|,
operator|(
name|byte
operator|)
literal|0xE9
block|,
operator|(
name|byte
operator|)
literal|0xEA
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,          }
decl_stmt|;
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
literal|"ISO-8859-6"
return|;
block|}
block|}
specifier|static
class|class
name|CharsetRecog_8859_6_ar
extends|extends
name|CharsetRecog_8859_6
block|{
specifier|private
specifier|static
name|int
index|[]
name|ngrams
init|=
block|{
literal|0x20C7E4
block|,
literal|0x20C7E6
block|,
literal|0x20C8C7
block|,
literal|0x20D9E4
block|,
literal|0x20E1EA
block|,
literal|0x20E4E4
block|,
literal|0x20E5E6
block|,
literal|0x20E8C7
block|,
literal|0xC720C7
block|,
literal|0xC7C120
block|,
literal|0xC7CA20
block|,
literal|0xC7D120
block|,
literal|0xC7E420
block|,
literal|0xC7E4C3
block|,
literal|0xC7E4C7
block|,
literal|0xC7E4C8
block|,
literal|0xC7E4CA
block|,
literal|0xC7E4CC
block|,
literal|0xC7E4CD
block|,
literal|0xC7E4CF
block|,
literal|0xC7E4D3
block|,
literal|0xC7E4D9
block|,
literal|0xC7E4E2
block|,
literal|0xC7E4E5
block|,
literal|0xC7E4E8
block|,
literal|0xC7E4EA
block|,
literal|0xC7E520
block|,
literal|0xC7E620
block|,
literal|0xC7E6CA
block|,
literal|0xC820C7
block|,
literal|0xC920C7
block|,
literal|0xC920E1
block|,
literal|0xC920E4
block|,
literal|0xC920E5
block|,
literal|0xC920E8
block|,
literal|0xCA20C7
block|,
literal|0xCF20C7
block|,
literal|0xCFC920
block|,
literal|0xD120C7
block|,
literal|0xD1C920
block|,
literal|0xD320C7
block|,
literal|0xD920C7
block|,
literal|0xD9E4E9
block|,
literal|0xE1EA20
block|,
literal|0xE420C7
block|,
literal|0xE4C920
block|,
literal|0xE4E920
block|,
literal|0xE4EA20
block|,
literal|0xE520C7
block|,
literal|0xE5C720
block|,
literal|0xE5C920
block|,
literal|0xE5E620
block|,
literal|0xE620C7
block|,
literal|0xE720C7
block|,
literal|0xE7C720
block|,
literal|0xE8C7E4
block|,
literal|0xE8E620
block|,
literal|0xE920C7
block|,
literal|0xEA20C7
block|,
literal|0xEA20E5
block|,
literal|0xEA20E8
block|,
literal|0xEAC920
block|,
literal|0xEAD120
block|,
literal|0xEAE620
block|,          }
decl_stmt|;
specifier|public
name|String
name|getLanguage
parameter_list|()
block|{
return|return
literal|"ar"
return|;
block|}
specifier|public
name|int
name|match
parameter_list|(
name|CharsetDetector
name|det
parameter_list|)
block|{
return|return
name|match
argument_list|(
name|det
argument_list|,
name|ngrams
argument_list|,
name|byteMap
argument_list|)
return|;
block|}
block|}
specifier|abstract
specifier|static
class|class
name|CharsetRecog_8859_7
extends|extends
name|CharsetRecog_sbcs
block|{
specifier|protected
specifier|static
name|byte
index|[]
name|byteMap
init|=
block|{
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x00
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x61
block|,
operator|(
name|byte
operator|)
literal|0x62
block|,
operator|(
name|byte
operator|)
literal|0x63
block|,
operator|(
name|byte
operator|)
literal|0x64
block|,
operator|(
name|byte
operator|)
literal|0x65
block|,
operator|(
name|byte
operator|)
literal|0x66
block|,
operator|(
name|byte
operator|)
literal|0x67
block|,
operator|(
name|byte
operator|)
literal|0x68
block|,
operator|(
name|byte
operator|)
literal|0x69
block|,
operator|(
name|byte
operator|)
literal|0x6A
block|,
operator|(
name|byte
operator|)
literal|0x6B
block|,
operator|(
name|byte
operator|)
literal|0x6C
block|,
operator|(
name|byte
operator|)
literal|0x6D
block|,
operator|(
name|byte
operator|)
literal|0x6E
block|,
operator|(
name|byte
operator|)
literal|0x6F
block|,
operator|(
name|byte
operator|)
literal|0x70
block|,
operator|(
name|byte
operator|)
literal|0x71
block|,
operator|(
name|byte
operator|)
literal|0x72
block|,
operator|(
name|byte
operator|)
literal|0x73
block|,
operator|(
name|byte
operator|)
literal|0x74
block|,
operator|(
name|byte
operator|)
literal|0x75
block|,
operator|(
name|byte
operator|)
literal|0x76
block|,
operator|(
name|byte
operator|)
literal|0x77
block|,
operator|(
name|byte
operator|)
literal|0x78
block|,
operator|(
name|byte
operator|)
literal|0x79
block|,
operator|(
name|byte
operator|)
literal|0x7A
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x61
block|,
operator|(
name|byte
operator|)
literal|0x62
block|,
operator|(
name|byte
operator|)
literal|0x63
block|,
operator|(
name|byte
operator|)
literal|0x64
block|,
operator|(
name|byte
operator|)
literal|0x65
block|,
operator|(
name|byte
operator|)
literal|0x66
block|,
operator|(
name|byte
operator|)
literal|0x67
block|,
operator|(
name|byte
operator|)
literal|0x68
block|,
operator|(
name|byte
operator|)
literal|0x69
block|,
operator|(
name|byte
operator|)
literal|0x6A
block|,
operator|(
name|byte
operator|)
literal|0x6B
block|,
operator|(
name|byte
operator|)
literal|0x6C
block|,
operator|(
name|byte
operator|)
literal|0x6D
block|,
operator|(
name|byte
operator|)
literal|0x6E
block|,
operator|(
name|byte
operator|)
literal|0x6F
block|,
operator|(
name|byte
operator|)
literal|0x70
block|,
operator|(
name|byte
operator|)
literal|0x71
block|,
operator|(
name|byte
operator|)
literal|0x72
block|,
operator|(
name|byte
operator|)
literal|0x73
block|,
operator|(
name|byte
operator|)
literal|0x74
block|,
operator|(
name|byte
operator|)
literal|0x75
block|,
operator|(
name|byte
operator|)
literal|0x76
block|,
operator|(
name|byte
operator|)
literal|0x77
block|,
operator|(
name|byte
operator|)
literal|0x78
block|,
operator|(
name|byte
operator|)
literal|0x79
block|,
operator|(
name|byte
operator|)
literal|0x7A
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0xA1
block|,
operator|(
name|byte
operator|)
literal|0xA2
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0xDC
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0xDD
block|,
operator|(
name|byte
operator|)
literal|0xDE
block|,
operator|(
name|byte
operator|)
literal|0xDF
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0xFC
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0xFD
block|,
operator|(
name|byte
operator|)
literal|0xFE
block|,
operator|(
name|byte
operator|)
literal|0xC0
block|,
operator|(
name|byte
operator|)
literal|0xE1
block|,
operator|(
name|byte
operator|)
literal|0xE2
block|,
operator|(
name|byte
operator|)
literal|0xE3
block|,
operator|(
name|byte
operator|)
literal|0xE4
block|,
operator|(
name|byte
operator|)
literal|0xE5
block|,
operator|(
name|byte
operator|)
literal|0xE6
block|,
operator|(
name|byte
operator|)
literal|0xE7
block|,
operator|(
name|byte
operator|)
literal|0xE8
block|,
operator|(
name|byte
operator|)
literal|0xE9
block|,
operator|(
name|byte
operator|)
literal|0xEA
block|,
operator|(
name|byte
operator|)
literal|0xEB
block|,
operator|(
name|byte
operator|)
literal|0xEC
block|,
operator|(
name|byte
operator|)
literal|0xED
block|,
operator|(
name|byte
operator|)
literal|0xEE
block|,
operator|(
name|byte
operator|)
literal|0xEF
block|,
operator|(
name|byte
operator|)
literal|0xF0
block|,
operator|(
name|byte
operator|)
literal|0xF1
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0xF3
block|,
operator|(
name|byte
operator|)
literal|0xF4
block|,
operator|(
name|byte
operator|)
literal|0xF5
block|,
operator|(
name|byte
operator|)
literal|0xF6
block|,
operator|(
name|byte
operator|)
literal|0xF7
block|,
operator|(
name|byte
operator|)
literal|0xF8
block|,
operator|(
name|byte
operator|)
literal|0xF9
block|,
operator|(
name|byte
operator|)
literal|0xFA
block|,
operator|(
name|byte
operator|)
literal|0xFB
block|,
operator|(
name|byte
operator|)
literal|0xDC
block|,
operator|(
name|byte
operator|)
literal|0xDD
block|,
operator|(
name|byte
operator|)
literal|0xDE
block|,
operator|(
name|byte
operator|)
literal|0xDF
block|,
operator|(
name|byte
operator|)
literal|0xE0
block|,
operator|(
name|byte
operator|)
literal|0xE1
block|,
operator|(
name|byte
operator|)
literal|0xE2
block|,
operator|(
name|byte
operator|)
literal|0xE3
block|,
operator|(
name|byte
operator|)
literal|0xE4
block|,
operator|(
name|byte
operator|)
literal|0xE5
block|,
operator|(
name|byte
operator|)
literal|0xE6
block|,
operator|(
name|byte
operator|)
literal|0xE7
block|,
operator|(
name|byte
operator|)
literal|0xE8
block|,
operator|(
name|byte
operator|)
literal|0xE9
block|,
operator|(
name|byte
operator|)
literal|0xEA
block|,
operator|(
name|byte
operator|)
literal|0xEB
block|,
operator|(
name|byte
operator|)
literal|0xEC
block|,
operator|(
name|byte
operator|)
literal|0xED
block|,
operator|(
name|byte
operator|)
literal|0xEE
block|,
operator|(
name|byte
operator|)
literal|0xEF
block|,
operator|(
name|byte
operator|)
literal|0xF0
block|,
operator|(
name|byte
operator|)
literal|0xF1
block|,
operator|(
name|byte
operator|)
literal|0xF2
block|,
operator|(
name|byte
operator|)
literal|0xF3
block|,
operator|(
name|byte
operator|)
literal|0xF4
block|,
operator|(
name|byte
operator|)
literal|0xF5
block|,
operator|(
name|byte
operator|)
literal|0xF6
block|,
operator|(
name|byte
operator|)
literal|0xF7
block|,
operator|(
name|byte
operator|)
literal|0xF8
block|,
operator|(
name|byte
operator|)
literal|0xF9
block|,
operator|(
name|byte
operator|)
literal|0xFA
block|,
operator|(
name|byte
operator|)
literal|0xFB
block|,
operator|(
name|byte
operator|)
literal|0xFC
block|,
operator|(
name|byte
operator|)
literal|0xFD
block|,
operator|(
name|byte
operator|)
literal|0xFE
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,          }
decl_stmt|;
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|haveC1Bytes
condition|?
literal|"windows-1253"
else|:
literal|"ISO-8859-7"
return|;
block|}
block|}
specifier|static
class|class
name|CharsetRecog_8859_7_el
extends|extends
name|CharsetRecog_8859_7
block|{
specifier|private
specifier|static
name|int
index|[]
name|ngrams
init|=
block|{
literal|0x20E1ED
block|,
literal|0x20E1F0
block|,
literal|0x20E3E9
block|,
literal|0x20E4E9
block|,
literal|0x20E5F0
block|,
literal|0x20E720
block|,
literal|0x20EAE1
block|,
literal|0x20ECE5
block|,
literal|0x20EDE1
block|,
literal|0x20EF20
block|,
literal|0x20F0E1
block|,
literal|0x20F0EF
block|,
literal|0x20F0F1
block|,
literal|0x20F3F4
block|,
literal|0x20F3F5
block|,
literal|0x20F4E7
block|,
literal|0x20F4EF
block|,
literal|0xDFE120
block|,
literal|0xE120E1
block|,
literal|0xE120F4
block|,
literal|0xE1E920
block|,
literal|0xE1ED20
block|,
literal|0xE1F0FC
block|,
literal|0xE1F220
block|,
literal|0xE3E9E1
block|,
literal|0xE5E920
block|,
literal|0xE5F220
block|,
literal|0xE720F4
block|,
literal|0xE7ED20
block|,
literal|0xE7F220
block|,
literal|0xE920F4
block|,
literal|0xE9E120
block|,
literal|0xE9EADE
block|,
literal|0xE9F220
block|,
literal|0xEAE1E9
block|,
literal|0xEAE1F4
block|,
literal|0xECE520
block|,
literal|0xED20E1
block|,
literal|0xED20E5
block|,
literal|0xED20F0
block|,
literal|0xEDE120
block|,
literal|0xEFF220
block|,
literal|0xEFF520
block|,
literal|0xF0EFF5
block|,
literal|0xF0F1EF
block|,
literal|0xF0FC20
block|,
literal|0xF220E1
block|,
literal|0xF220E5
block|,
literal|0xF220EA
block|,
literal|0xF220F0
block|,
literal|0xF220F4
block|,
literal|0xF3E520
block|,
literal|0xF3E720
block|,
literal|0xF3F4EF
block|,
literal|0xF4E120
block|,
literal|0xF4E1E9
block|,
literal|0xF4E7ED
block|,
literal|0xF4E7F2
block|,
literal|0xF4E9EA
block|,
literal|0xF4EF20
block|,
literal|0xF4EFF5
block|,
literal|0xF4F9ED
block|,
literal|0xF9ED20
block|,
literal|0xFEED20
block|,          }
decl_stmt|;
specifier|public
name|String
name|getLanguage
parameter_list|()
block|{
return|return
literal|"el"
return|;
block|}
specifier|public
name|int
name|match
parameter_list|(
name|CharsetDetector
name|det
parameter_list|)
block|{
return|return
name|match
argument_list|(
name|det
argument_list|,
name|ngrams
argument_list|,
name|byteMap
argument_list|)
return|;
block|}
block|}
specifier|abstract
specifier|static
class|class
name|CharsetRecog_8859_8
extends|extends
name|CharsetRecog_sbcs
block|{
specifier|protected
specifier|static
name|byte
index|[]
name|byteMap
init|=
block|{
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x00
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x61
block|,
operator|(
name|byte
operator|)
literal|0x62
block|,
operator|(
name|byte
operator|)
literal|0x63
block|,
operator|(
name|byte
operator|)
literal|0x64
block|,
operator|(
name|byte
operator|)
literal|0x65
block|,
operator|(
name|byte
operator|)
literal|0x66
block|,
operator|(
name|byte
operator|)
literal|0x67
block|,
operator|(
name|byte
operator|)
literal|0x68
block|,
operator|(
name|byte
operator|)
literal|0x69
block|,
operator|(
name|byte
operator|)
literal|0x6A
block|,
operator|(
name|byte
operator|)
literal|0x6B
block|,
operator|(
name|byte
operator|)
literal|0x6C
block|,
operator|(
name|byte
operator|)
literal|0x6D
block|,
operator|(
name|byte
operator|)
literal|0x6E
block|,
operator|(
name|byte
operator|)
literal|0x6F
block|,
operator|(
name|byte
operator|)
literal|0x70
block|,
operator|(
name|byte
operator|)
literal|0x71
block|,
operator|(
name|byte
operator|)
literal|0x72
block|,
operator|(
name|byte
operator|)
literal|0x73
block|,
operator|(
name|byte
operator|)
literal|0x74
block|,
operator|(
name|byte
operator|)
literal|0x75
block|,
operator|(
name|byte
operator|)
literal|0x76
block|,
operator|(
name|byte
operator|)
literal|0x77
block|,
operator|(
name|byte
operator|)
literal|0x78
block|,
operator|(
name|byte
operator|)
literal|0x79
block|,
operator|(
name|byte
operator|)
literal|0x7A
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x61
block|,
operator|(
name|byte
operator|)
literal|0x62
block|,
operator|(
name|byte
operator|)
literal|0x63
block|,
operator|(
name|byte
operator|)
literal|0x64
block|,
operator|(
name|byte
operator|)
literal|0x65
block|,
operator|(
name|byte
operator|)
literal|0x66
block|,
operator|(
name|byte
operator|)
literal|0x67
block|,
operator|(
name|byte
operator|)
literal|0x68
block|,
operator|(
name|byte
operator|)
literal|0x69
block|,
operator|(
name|byte
operator|)
literal|0x6A
block|,
operator|(
name|byte
operator|)
literal|0x6B
block|,
operator|(
name|byte
operator|)
literal|0x6C
block|,
operator|(
name|byte
operator|)
literal|0x6D
block|,
operator|(
name|byte
operator|)
literal|0x6E
block|,
operator|(
name|byte
operator|)
literal|0x6F
block|,
operator|(
name|byte
operator|)
literal|0x70
block|,
operator|(
name|byte
operator|)
literal|0x71
block|,
operator|(
name|byte
operator|)
literal|0x72
block|,
operator|(
name|byte
operator|)
literal|0x73
block|,
operator|(
name|byte
operator|)
literal|0x74
block|,
operator|(
name|byte
operator|)
literal|0x75
block|,
operator|(
name|byte
operator|)
literal|0x76
block|,
operator|(
name|byte
operator|)
literal|0x77
block|,
operator|(
name|byte
operator|)
literal|0x78
block|,
operator|(
name|byte
operator|)
literal|0x79
block|,
operator|(
name|byte
operator|)
literal|0x7A
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0xB5
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0xE0
block|,
operator|(
name|byte
operator|)
literal|0xE1
block|,
operator|(
name|byte
operator|)
literal|0xE2
block|,
operator|(
name|byte
operator|)
literal|0xE3
block|,
operator|(
name|byte
operator|)
literal|0xE4
block|,
operator|(
name|byte
operator|)
literal|0xE5
block|,
operator|(
name|byte
operator|)
literal|0xE6
block|,
operator|(
name|byte
operator|)
literal|0xE7
block|,
operator|(
name|byte
operator|)
literal|0xE8
block|,
operator|(
name|byte
operator|)
literal|0xE9
block|,
operator|(
name|byte
operator|)
literal|0xEA
block|,
operator|(
name|byte
operator|)
literal|0xEB
block|,
operator|(
name|byte
operator|)
literal|0xEC
block|,
operator|(
name|byte
operator|)
literal|0xED
block|,
operator|(
name|byte
operator|)
literal|0xEE
block|,
operator|(
name|byte
operator|)
literal|0xEF
block|,
operator|(
name|byte
operator|)
literal|0xF0
block|,
operator|(
name|byte
operator|)
literal|0xF1
block|,
operator|(
name|byte
operator|)
literal|0xF2
block|,
operator|(
name|byte
operator|)
literal|0xF3
block|,
operator|(
name|byte
operator|)
literal|0xF4
block|,
operator|(
name|byte
operator|)
literal|0xF5
block|,
operator|(
name|byte
operator|)
literal|0xF6
block|,
operator|(
name|byte
operator|)
literal|0xF7
block|,
operator|(
name|byte
operator|)
literal|0xF8
block|,
operator|(
name|byte
operator|)
literal|0xF9
block|,
operator|(
name|byte
operator|)
literal|0xFA
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,          }
decl_stmt|;
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|haveC1Bytes
condition|?
literal|"windows-1255"
else|:
literal|"ISO-8859-8"
return|;
block|}
block|}
specifier|static
class|class
name|CharsetRecog_8859_8_I_he
extends|extends
name|CharsetRecog_8859_8
block|{
specifier|private
specifier|static
name|int
index|[]
name|ngrams
init|=
block|{
literal|0x20E0E5
block|,
literal|0x20E0E7
block|,
literal|0x20E0E9
block|,
literal|0x20E0FA
block|,
literal|0x20E1E9
block|,
literal|0x20E1EE
block|,
literal|0x20E4E0
block|,
literal|0x20E4E5
block|,
literal|0x20E4E9
block|,
literal|0x20E4EE
block|,
literal|0x20E4F2
block|,
literal|0x20E4F9
block|,
literal|0x20E4FA
block|,
literal|0x20ECE0
block|,
literal|0x20ECE4
block|,
literal|0x20EEE0
block|,
literal|0x20F2EC
block|,
literal|0x20F9EC
block|,
literal|0xE0FA20
block|,
literal|0xE420E0
block|,
literal|0xE420E1
block|,
literal|0xE420E4
block|,
literal|0xE420EC
block|,
literal|0xE420EE
block|,
literal|0xE420F9
block|,
literal|0xE4E5E0
block|,
literal|0xE5E020
block|,
literal|0xE5ED20
block|,
literal|0xE5EF20
block|,
literal|0xE5F820
block|,
literal|0xE5FA20
block|,
literal|0xE920E4
block|,
literal|0xE9E420
block|,
literal|0xE9E5FA
block|,
literal|0xE9E9ED
block|,
literal|0xE9ED20
block|,
literal|0xE9EF20
block|,
literal|0xE9F820
block|,
literal|0xE9FA20
block|,
literal|0xEC20E0
block|,
literal|0xEC20E4
block|,
literal|0xECE020
block|,
literal|0xECE420
block|,
literal|0xED20E0
block|,
literal|0xED20E1
block|,
literal|0xED20E4
block|,
literal|0xED20EC
block|,
literal|0xED20EE
block|,
literal|0xED20F9
block|,
literal|0xEEE420
block|,
literal|0xEF20E4
block|,
literal|0xF0E420
block|,
literal|0xF0E920
block|,
literal|0xF0E9ED
block|,
literal|0xF2EC20
block|,
literal|0xF820E4
block|,
literal|0xF8E9ED
block|,
literal|0xF9EC20
block|,
literal|0xFA20E0
block|,
literal|0xFA20E1
block|,
literal|0xFA20E4
block|,
literal|0xFA20EC
block|,
literal|0xFA20EE
block|,
literal|0xFA20F9
block|,          }
decl_stmt|;
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|haveC1Bytes
condition|?
literal|"windows-1255"
else|:
comment|/*"ISO-8859-8-I"*/
literal|"ISO-8859-8"
return|;
block|}
specifier|public
name|String
name|getLanguage
parameter_list|()
block|{
return|return
literal|"he"
return|;
block|}
specifier|public
name|int
name|match
parameter_list|(
name|CharsetDetector
name|det
parameter_list|)
block|{
return|return
name|match
argument_list|(
name|det
argument_list|,
name|ngrams
argument_list|,
name|byteMap
argument_list|)
return|;
block|}
block|}
specifier|static
class|class
name|CharsetRecog_8859_8_he
extends|extends
name|CharsetRecog_8859_8
block|{
specifier|private
specifier|static
name|int
index|[]
name|ngrams
init|=
block|{
literal|0x20E0E5
block|,
literal|0x20E0EC
block|,
literal|0x20E4E9
block|,
literal|0x20E4EC
block|,
literal|0x20E4EE
block|,
literal|0x20E4F0
block|,
literal|0x20E9F0
block|,
literal|0x20ECF2
block|,
literal|0x20ECF9
block|,
literal|0x20EDE5
block|,
literal|0x20EDE9
block|,
literal|0x20EFE5
block|,
literal|0x20EFE9
block|,
literal|0x20F8E5
block|,
literal|0x20F8E9
block|,
literal|0x20FAE0
block|,
literal|0x20FAE5
block|,
literal|0x20FAE9
block|,
literal|0xE020E4
block|,
literal|0xE020EC
block|,
literal|0xE020ED
block|,
literal|0xE020FA
block|,
literal|0xE0E420
block|,
literal|0xE0E5E4
block|,
literal|0xE0EC20
block|,
literal|0xE0EE20
block|,
literal|0xE120E4
block|,
literal|0xE120ED
block|,
literal|0xE120FA
block|,
literal|0xE420E4
block|,
literal|0xE420E9
block|,
literal|0xE420EC
block|,
literal|0xE420ED
block|,
literal|0xE420EF
block|,
literal|0xE420F8
block|,
literal|0xE420FA
block|,
literal|0xE4EC20
block|,
literal|0xE5E020
block|,
literal|0xE5E420
block|,
literal|0xE7E020
block|,
literal|0xE9E020
block|,
literal|0xE9E120
block|,
literal|0xE9E420
block|,
literal|0xEC20E4
block|,
literal|0xEC20ED
block|,
literal|0xEC20FA
block|,
literal|0xECF220
block|,
literal|0xECF920
block|,
literal|0xEDE9E9
block|,
literal|0xEDE9F0
block|,
literal|0xEDE9F8
block|,
literal|0xEE20E4
block|,
literal|0xEE20ED
block|,
literal|0xEE20FA
block|,
literal|0xEEE120
block|,
literal|0xEEE420
block|,
literal|0xF2E420
block|,
literal|0xF920E4
block|,
literal|0xF920ED
block|,
literal|0xF920FA
block|,
literal|0xF9E420
block|,
literal|0xFAE020
block|,
literal|0xFAE420
block|,
literal|0xFAE5E9
block|,          }
decl_stmt|;
specifier|public
name|String
name|getLanguage
parameter_list|()
block|{
return|return
literal|"he"
return|;
block|}
specifier|public
name|int
name|match
parameter_list|(
name|CharsetDetector
name|det
parameter_list|)
block|{
return|return
name|match
argument_list|(
name|det
argument_list|,
name|ngrams
argument_list|,
name|byteMap
argument_list|)
return|;
block|}
block|}
specifier|abstract
specifier|static
class|class
name|CharsetRecog_8859_9
extends|extends
name|CharsetRecog_sbcs
block|{
specifier|protected
specifier|static
name|byte
index|[]
name|byteMap
init|=
block|{
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x00
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x61
block|,
operator|(
name|byte
operator|)
literal|0x62
block|,
operator|(
name|byte
operator|)
literal|0x63
block|,
operator|(
name|byte
operator|)
literal|0x64
block|,
operator|(
name|byte
operator|)
literal|0x65
block|,
operator|(
name|byte
operator|)
literal|0x66
block|,
operator|(
name|byte
operator|)
literal|0x67
block|,
operator|(
name|byte
operator|)
literal|0x68
block|,
operator|(
name|byte
operator|)
literal|0x69
block|,
operator|(
name|byte
operator|)
literal|0x6A
block|,
operator|(
name|byte
operator|)
literal|0x6B
block|,
operator|(
name|byte
operator|)
literal|0x6C
block|,
operator|(
name|byte
operator|)
literal|0x6D
block|,
operator|(
name|byte
operator|)
literal|0x6E
block|,
operator|(
name|byte
operator|)
literal|0x6F
block|,
operator|(
name|byte
operator|)
literal|0x70
block|,
operator|(
name|byte
operator|)
literal|0x71
block|,
operator|(
name|byte
operator|)
literal|0x72
block|,
operator|(
name|byte
operator|)
literal|0x73
block|,
operator|(
name|byte
operator|)
literal|0x74
block|,
operator|(
name|byte
operator|)
literal|0x75
block|,
operator|(
name|byte
operator|)
literal|0x76
block|,
operator|(
name|byte
operator|)
literal|0x77
block|,
operator|(
name|byte
operator|)
literal|0x78
block|,
operator|(
name|byte
operator|)
literal|0x79
block|,
operator|(
name|byte
operator|)
literal|0x7A
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x61
block|,
operator|(
name|byte
operator|)
literal|0x62
block|,
operator|(
name|byte
operator|)
literal|0x63
block|,
operator|(
name|byte
operator|)
literal|0x64
block|,
operator|(
name|byte
operator|)
literal|0x65
block|,
operator|(
name|byte
operator|)
literal|0x66
block|,
operator|(
name|byte
operator|)
literal|0x67
block|,
operator|(
name|byte
operator|)
literal|0x68
block|,
operator|(
name|byte
operator|)
literal|0x69
block|,
operator|(
name|byte
operator|)
literal|0x6A
block|,
operator|(
name|byte
operator|)
literal|0x6B
block|,
operator|(
name|byte
operator|)
literal|0x6C
block|,
operator|(
name|byte
operator|)
literal|0x6D
block|,
operator|(
name|byte
operator|)
literal|0x6E
block|,
operator|(
name|byte
operator|)
literal|0x6F
block|,
operator|(
name|byte
operator|)
literal|0x70
block|,
operator|(
name|byte
operator|)
literal|0x71
block|,
operator|(
name|byte
operator|)
literal|0x72
block|,
operator|(
name|byte
operator|)
literal|0x73
block|,
operator|(
name|byte
operator|)
literal|0x74
block|,
operator|(
name|byte
operator|)
literal|0x75
block|,
operator|(
name|byte
operator|)
literal|0x76
block|,
operator|(
name|byte
operator|)
literal|0x77
block|,
operator|(
name|byte
operator|)
literal|0x78
block|,
operator|(
name|byte
operator|)
literal|0x79
block|,
operator|(
name|byte
operator|)
literal|0x7A
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0xAA
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0xB5
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0xBA
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0xE0
block|,
operator|(
name|byte
operator|)
literal|0xE1
block|,
operator|(
name|byte
operator|)
literal|0xE2
block|,
operator|(
name|byte
operator|)
literal|0xE3
block|,
operator|(
name|byte
operator|)
literal|0xE4
block|,
operator|(
name|byte
operator|)
literal|0xE5
block|,
operator|(
name|byte
operator|)
literal|0xE6
block|,
operator|(
name|byte
operator|)
literal|0xE7
block|,
operator|(
name|byte
operator|)
literal|0xE8
block|,
operator|(
name|byte
operator|)
literal|0xE9
block|,
operator|(
name|byte
operator|)
literal|0xEA
block|,
operator|(
name|byte
operator|)
literal|0xEB
block|,
operator|(
name|byte
operator|)
literal|0xEC
block|,
operator|(
name|byte
operator|)
literal|0xED
block|,
operator|(
name|byte
operator|)
literal|0xEE
block|,
operator|(
name|byte
operator|)
literal|0xEF
block|,
operator|(
name|byte
operator|)
literal|0xF0
block|,
operator|(
name|byte
operator|)
literal|0xF1
block|,
operator|(
name|byte
operator|)
literal|0xF2
block|,
operator|(
name|byte
operator|)
literal|0xF3
block|,
operator|(
name|byte
operator|)
literal|0xF4
block|,
operator|(
name|byte
operator|)
literal|0xF5
block|,
operator|(
name|byte
operator|)
literal|0xF6
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0xF8
block|,
operator|(
name|byte
operator|)
literal|0xF9
block|,
operator|(
name|byte
operator|)
literal|0xFA
block|,
operator|(
name|byte
operator|)
literal|0xFB
block|,
operator|(
name|byte
operator|)
literal|0xFC
block|,
operator|(
name|byte
operator|)
literal|0x69
block|,
operator|(
name|byte
operator|)
literal|0xFE
block|,
operator|(
name|byte
operator|)
literal|0xDF
block|,
operator|(
name|byte
operator|)
literal|0xE0
block|,
operator|(
name|byte
operator|)
literal|0xE1
block|,
operator|(
name|byte
operator|)
literal|0xE2
block|,
operator|(
name|byte
operator|)
literal|0xE3
block|,
operator|(
name|byte
operator|)
literal|0xE4
block|,
operator|(
name|byte
operator|)
literal|0xE5
block|,
operator|(
name|byte
operator|)
literal|0xE6
block|,
operator|(
name|byte
operator|)
literal|0xE7
block|,
operator|(
name|byte
operator|)
literal|0xE8
block|,
operator|(
name|byte
operator|)
literal|0xE9
block|,
operator|(
name|byte
operator|)
literal|0xEA
block|,
operator|(
name|byte
operator|)
literal|0xEB
block|,
operator|(
name|byte
operator|)
literal|0xEC
block|,
operator|(
name|byte
operator|)
literal|0xED
block|,
operator|(
name|byte
operator|)
literal|0xEE
block|,
operator|(
name|byte
operator|)
literal|0xEF
block|,
operator|(
name|byte
operator|)
literal|0xF0
block|,
operator|(
name|byte
operator|)
literal|0xF1
block|,
operator|(
name|byte
operator|)
literal|0xF2
block|,
operator|(
name|byte
operator|)
literal|0xF3
block|,
operator|(
name|byte
operator|)
literal|0xF4
block|,
operator|(
name|byte
operator|)
literal|0xF5
block|,
operator|(
name|byte
operator|)
literal|0xF6
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0xF8
block|,
operator|(
name|byte
operator|)
literal|0xF9
block|,
operator|(
name|byte
operator|)
literal|0xFA
block|,
operator|(
name|byte
operator|)
literal|0xFB
block|,
operator|(
name|byte
operator|)
literal|0xFC
block|,
operator|(
name|byte
operator|)
literal|0xFD
block|,
operator|(
name|byte
operator|)
literal|0xFE
block|,
operator|(
name|byte
operator|)
literal|0xFF
block|,          }
decl_stmt|;
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|haveC1Bytes
condition|?
literal|"windows-1254"
else|:
literal|"ISO-8859-9"
return|;
block|}
block|}
specifier|static
class|class
name|CharsetRecog_8859_9_tr
extends|extends
name|CharsetRecog_8859_9
block|{
specifier|private
specifier|static
name|int
index|[]
name|ngrams
init|=
block|{
literal|0x206261
block|,
literal|0x206269
block|,
literal|0x206275
block|,
literal|0x206461
block|,
literal|0x206465
block|,
literal|0x206765
block|,
literal|0x206861
block|,
literal|0x20696C
block|,
literal|0x206B61
block|,
literal|0x206B6F
block|,
literal|0x206D61
block|,
literal|0x206F6C
block|,
literal|0x207361
block|,
literal|0x207461
block|,
literal|0x207665
block|,
literal|0x207961
block|,
literal|0x612062
block|,
literal|0x616B20
block|,
literal|0x616C61
block|,
literal|0x616D61
block|,
literal|0x616E20
block|,
literal|0x616EFD
block|,
literal|0x617220
block|,
literal|0x617261
block|,
literal|0x6172FD
block|,
literal|0x6173FD
block|,
literal|0x617961
block|,
literal|0x626972
block|,
literal|0x646120
block|,
literal|0x646520
block|,
literal|0x646920
block|,
literal|0x652062
block|,
literal|0x65206B
block|,
literal|0x656469
block|,
literal|0x656E20
block|,
literal|0x657220
block|,
literal|0x657269
block|,
literal|0x657369
block|,
literal|0x696C65
block|,
literal|0x696E20
block|,
literal|0x696E69
block|,
literal|0x697220
block|,
literal|0x6C616E
block|,
literal|0x6C6172
block|,
literal|0x6C6520
block|,
literal|0x6C6572
block|,
literal|0x6E2061
block|,
literal|0x6E2062
block|,
literal|0x6E206B
block|,
literal|0x6E6461
block|,
literal|0x6E6465
block|,
literal|0x6E6520
block|,
literal|0x6E6920
block|,
literal|0x6E696E
block|,
literal|0x6EFD20
block|,
literal|0x72696E
block|,
literal|0x72FD6E
block|,
literal|0x766520
block|,
literal|0x796120
block|,
literal|0x796F72
block|,
literal|0xFD6E20
block|,
literal|0xFD6E64
block|,
literal|0xFD6EFD
block|,
literal|0xFDF0FD
block|,          }
decl_stmt|;
specifier|public
name|String
name|getLanguage
parameter_list|()
block|{
return|return
literal|"tr"
return|;
block|}
specifier|public
name|int
name|match
parameter_list|(
name|CharsetDetector
name|det
parameter_list|)
block|{
return|return
name|match
argument_list|(
name|det
argument_list|,
name|ngrams
argument_list|,
name|byteMap
argument_list|)
return|;
block|}
block|}
specifier|static
class|class
name|CharsetRecog_windows_1251
extends|extends
name|CharsetRecog_sbcs
block|{
specifier|private
specifier|static
name|int
index|[]
name|ngrams
init|=
block|{
literal|0x20E220
block|,
literal|0x20E2EE
block|,
literal|0x20E4EE
block|,
literal|0x20E7E0
block|,
literal|0x20E820
block|,
literal|0x20EAE0
block|,
literal|0x20EAEE
block|,
literal|0x20EDE0
block|,
literal|0x20EDE5
block|,
literal|0x20EEE1
block|,
literal|0x20EFEE
block|,
literal|0x20EFF0
block|,
literal|0x20F0E0
block|,
literal|0x20F1EE
block|,
literal|0x20F1F2
block|,
literal|0x20F2EE
block|,
literal|0x20F7F2
block|,
literal|0x20FDF2
block|,
literal|0xE0EDE8
block|,
literal|0xE0F2FC
block|,
literal|0xE3EE20
block|,
literal|0xE5EBFC
block|,
literal|0xE5EDE8
block|,
literal|0xE5F1F2
block|,
literal|0xE5F220
block|,
literal|0xE820EF
block|,
literal|0xE8E520
block|,
literal|0xE8E820
block|,
literal|0xE8FF20
block|,
literal|0xEBE5ED
block|,
literal|0xEBE820
block|,
literal|0xEBFCED
block|,
literal|0xEDE020
block|,
literal|0xEDE520
block|,
literal|0xEDE8E5
block|,
literal|0xEDE8FF
block|,
literal|0xEDEE20
block|,
literal|0xEDEEE2
block|,
literal|0xEE20E2
block|,
literal|0xEE20EF
block|,
literal|0xEE20F1
block|,
literal|0xEEE220
block|,
literal|0xEEE2E0
block|,
literal|0xEEE3EE
block|,
literal|0xEEE920
block|,
literal|0xEEEBFC
block|,
literal|0xEEEC20
block|,
literal|0xEEF1F2
block|,
literal|0xEFEEEB
block|,
literal|0xEFF0E5
block|,
literal|0xEFF0E8
block|,
literal|0xEFF0EE
block|,
literal|0xF0E0E2
block|,
literal|0xF0E5E4
block|,
literal|0xF1F2E0
block|,
literal|0xF1F2E2
block|,
literal|0xF1F2E8
block|,
literal|0xF1FF20
block|,
literal|0xF2E5EB
block|,
literal|0xF2EE20
block|,
literal|0xF2EEF0
block|,
literal|0xF2FC20
block|,
literal|0xF7F2EE
block|,
literal|0xFBF520
block|,          }
decl_stmt|;
specifier|private
specifier|static
name|byte
index|[]
name|byteMap
init|=
block|{
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x00
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x61
block|,
operator|(
name|byte
operator|)
literal|0x62
block|,
operator|(
name|byte
operator|)
literal|0x63
block|,
operator|(
name|byte
operator|)
literal|0x64
block|,
operator|(
name|byte
operator|)
literal|0x65
block|,
operator|(
name|byte
operator|)
literal|0x66
block|,
operator|(
name|byte
operator|)
literal|0x67
block|,
operator|(
name|byte
operator|)
literal|0x68
block|,
operator|(
name|byte
operator|)
literal|0x69
block|,
operator|(
name|byte
operator|)
literal|0x6A
block|,
operator|(
name|byte
operator|)
literal|0x6B
block|,
operator|(
name|byte
operator|)
literal|0x6C
block|,
operator|(
name|byte
operator|)
literal|0x6D
block|,
operator|(
name|byte
operator|)
literal|0x6E
block|,
operator|(
name|byte
operator|)
literal|0x6F
block|,
operator|(
name|byte
operator|)
literal|0x70
block|,
operator|(
name|byte
operator|)
literal|0x71
block|,
operator|(
name|byte
operator|)
literal|0x72
block|,
operator|(
name|byte
operator|)
literal|0x73
block|,
operator|(
name|byte
operator|)
literal|0x74
block|,
operator|(
name|byte
operator|)
literal|0x75
block|,
operator|(
name|byte
operator|)
literal|0x76
block|,
operator|(
name|byte
operator|)
literal|0x77
block|,
operator|(
name|byte
operator|)
literal|0x78
block|,
operator|(
name|byte
operator|)
literal|0x79
block|,
operator|(
name|byte
operator|)
literal|0x7A
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x61
block|,
operator|(
name|byte
operator|)
literal|0x62
block|,
operator|(
name|byte
operator|)
literal|0x63
block|,
operator|(
name|byte
operator|)
literal|0x64
block|,
operator|(
name|byte
operator|)
literal|0x65
block|,
operator|(
name|byte
operator|)
literal|0x66
block|,
operator|(
name|byte
operator|)
literal|0x67
block|,
operator|(
name|byte
operator|)
literal|0x68
block|,
operator|(
name|byte
operator|)
literal|0x69
block|,
operator|(
name|byte
operator|)
literal|0x6A
block|,
operator|(
name|byte
operator|)
literal|0x6B
block|,
operator|(
name|byte
operator|)
literal|0x6C
block|,
operator|(
name|byte
operator|)
literal|0x6D
block|,
operator|(
name|byte
operator|)
literal|0x6E
block|,
operator|(
name|byte
operator|)
literal|0x6F
block|,
operator|(
name|byte
operator|)
literal|0x70
block|,
operator|(
name|byte
operator|)
literal|0x71
block|,
operator|(
name|byte
operator|)
literal|0x72
block|,
operator|(
name|byte
operator|)
literal|0x73
block|,
operator|(
name|byte
operator|)
literal|0x74
block|,
operator|(
name|byte
operator|)
literal|0x75
block|,
operator|(
name|byte
operator|)
literal|0x76
block|,
operator|(
name|byte
operator|)
literal|0x77
block|,
operator|(
name|byte
operator|)
literal|0x78
block|,
operator|(
name|byte
operator|)
literal|0x79
block|,
operator|(
name|byte
operator|)
literal|0x7A
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x90
block|,
operator|(
name|byte
operator|)
literal|0x83
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x83
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x9A
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x9C
block|,
operator|(
name|byte
operator|)
literal|0x9D
block|,
operator|(
name|byte
operator|)
literal|0x9E
block|,
operator|(
name|byte
operator|)
literal|0x9F
block|,
operator|(
name|byte
operator|)
literal|0x90
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x9A
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x9C
block|,
operator|(
name|byte
operator|)
literal|0x9D
block|,
operator|(
name|byte
operator|)
literal|0x9E
block|,
operator|(
name|byte
operator|)
literal|0x9F
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0xA2
block|,
operator|(
name|byte
operator|)
literal|0xA2
block|,
operator|(
name|byte
operator|)
literal|0xBC
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0xB4
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0xB8
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0xBA
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0xBF
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0xB3
block|,
operator|(
name|byte
operator|)
literal|0xB3
block|,
operator|(
name|byte
operator|)
literal|0xB4
block|,
operator|(
name|byte
operator|)
literal|0xB5
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0xB8
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0xBA
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0xBC
block|,
operator|(
name|byte
operator|)
literal|0xBE
block|,
operator|(
name|byte
operator|)
literal|0xBE
block|,
operator|(
name|byte
operator|)
literal|0xBF
block|,
operator|(
name|byte
operator|)
literal|0xE0
block|,
operator|(
name|byte
operator|)
literal|0xE1
block|,
operator|(
name|byte
operator|)
literal|0xE2
block|,
operator|(
name|byte
operator|)
literal|0xE3
block|,
operator|(
name|byte
operator|)
literal|0xE4
block|,
operator|(
name|byte
operator|)
literal|0xE5
block|,
operator|(
name|byte
operator|)
literal|0xE6
block|,
operator|(
name|byte
operator|)
literal|0xE7
block|,
operator|(
name|byte
operator|)
literal|0xE8
block|,
operator|(
name|byte
operator|)
literal|0xE9
block|,
operator|(
name|byte
operator|)
literal|0xEA
block|,
operator|(
name|byte
operator|)
literal|0xEB
block|,
operator|(
name|byte
operator|)
literal|0xEC
block|,
operator|(
name|byte
operator|)
literal|0xED
block|,
operator|(
name|byte
operator|)
literal|0xEE
block|,
operator|(
name|byte
operator|)
literal|0xEF
block|,
operator|(
name|byte
operator|)
literal|0xF0
block|,
operator|(
name|byte
operator|)
literal|0xF1
block|,
operator|(
name|byte
operator|)
literal|0xF2
block|,
operator|(
name|byte
operator|)
literal|0xF3
block|,
operator|(
name|byte
operator|)
literal|0xF4
block|,
operator|(
name|byte
operator|)
literal|0xF5
block|,
operator|(
name|byte
operator|)
literal|0xF6
block|,
operator|(
name|byte
operator|)
literal|0xF7
block|,
operator|(
name|byte
operator|)
literal|0xF8
block|,
operator|(
name|byte
operator|)
literal|0xF9
block|,
operator|(
name|byte
operator|)
literal|0xFA
block|,
operator|(
name|byte
operator|)
literal|0xFB
block|,
operator|(
name|byte
operator|)
literal|0xFC
block|,
operator|(
name|byte
operator|)
literal|0xFD
block|,
operator|(
name|byte
operator|)
literal|0xFE
block|,
operator|(
name|byte
operator|)
literal|0xFF
block|,
operator|(
name|byte
operator|)
literal|0xE0
block|,
operator|(
name|byte
operator|)
literal|0xE1
block|,
operator|(
name|byte
operator|)
literal|0xE2
block|,
operator|(
name|byte
operator|)
literal|0xE3
block|,
operator|(
name|byte
operator|)
literal|0xE4
block|,
operator|(
name|byte
operator|)
literal|0xE5
block|,
operator|(
name|byte
operator|)
literal|0xE6
block|,
operator|(
name|byte
operator|)
literal|0xE7
block|,
operator|(
name|byte
operator|)
literal|0xE8
block|,
operator|(
name|byte
operator|)
literal|0xE9
block|,
operator|(
name|byte
operator|)
literal|0xEA
block|,
operator|(
name|byte
operator|)
literal|0xEB
block|,
operator|(
name|byte
operator|)
literal|0xEC
block|,
operator|(
name|byte
operator|)
literal|0xED
block|,
operator|(
name|byte
operator|)
literal|0xEE
block|,
operator|(
name|byte
operator|)
literal|0xEF
block|,
operator|(
name|byte
operator|)
literal|0xF0
block|,
operator|(
name|byte
operator|)
literal|0xF1
block|,
operator|(
name|byte
operator|)
literal|0xF2
block|,
operator|(
name|byte
operator|)
literal|0xF3
block|,
operator|(
name|byte
operator|)
literal|0xF4
block|,
operator|(
name|byte
operator|)
literal|0xF5
block|,
operator|(
name|byte
operator|)
literal|0xF6
block|,
operator|(
name|byte
operator|)
literal|0xF7
block|,
operator|(
name|byte
operator|)
literal|0xF8
block|,
operator|(
name|byte
operator|)
literal|0xF9
block|,
operator|(
name|byte
operator|)
literal|0xFA
block|,
operator|(
name|byte
operator|)
literal|0xFB
block|,
operator|(
name|byte
operator|)
literal|0xFC
block|,
operator|(
name|byte
operator|)
literal|0xFD
block|,
operator|(
name|byte
operator|)
literal|0xFE
block|,
operator|(
name|byte
operator|)
literal|0xFF
block|,          }
decl_stmt|;
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
literal|"windows-1251"
return|;
block|}
specifier|public
name|String
name|getLanguage
parameter_list|()
block|{
return|return
literal|"ru"
return|;
block|}
specifier|public
name|int
name|match
parameter_list|(
name|CharsetDetector
name|det
parameter_list|)
block|{
return|return
name|match
argument_list|(
name|det
argument_list|,
name|ngrams
argument_list|,
name|byteMap
argument_list|)
return|;
block|}
block|}
specifier|static
class|class
name|CharsetRecog_IBM866_ru
extends|extends
name|CharsetRecog_sbcs
block|{
specifier|private
specifier|static
name|int
index|[]
name|ngrams
init|=
block|{
literal|0x20E220
block|,
literal|0x20E2EE
block|,
literal|0x20E4EE
block|,
literal|0x20E7E0
block|,
literal|0x20E820
block|,
literal|0x20EAE0
block|,
literal|0x20EAEE
block|,
literal|0x20EDE0
block|,
literal|0x20EDE5
block|,
literal|0x20EEE1
block|,
literal|0x20EFEE
block|,
literal|0x20EFF0
block|,
literal|0x20F0E0
block|,
literal|0x20F1EE
block|,
literal|0x20F1F2
block|,
literal|0x20F2EE
block|,
literal|0x20F7F2
block|,
literal|0x20FDF2
block|,
literal|0xE0EDE8
block|,
literal|0xE0F2FC
block|,
literal|0xE3EE20
block|,
literal|0xE5EBFC
block|,
literal|0xE5EDE8
block|,
literal|0xE5F1F2
block|,
literal|0xE5F220
block|,
literal|0xE820EF
block|,
literal|0xE8E520
block|,
literal|0xE8E820
block|,
literal|0xE8FF20
block|,
literal|0xEBE5ED
block|,
literal|0xEBE820
block|,
literal|0xEBFCED
block|,
literal|0xEDE020
block|,
literal|0xEDE520
block|,
literal|0xEDE8E5
block|,
literal|0xEDE8FF
block|,
literal|0xEDEE20
block|,
literal|0xEDEEE2
block|,
literal|0xEE20E2
block|,
literal|0xEE20EF
block|,
literal|0xEE20F1
block|,
literal|0xEEE220
block|,
literal|0xEEE2E0
block|,
literal|0xEEE3EE
block|,
literal|0xEEE920
block|,
literal|0xEEEBFC
block|,
literal|0xEEEC20
block|,
literal|0xEEF1F2
block|,
literal|0xEFEEEB
block|,
literal|0xEFF0E5
block|,
literal|0xEFF0E8
block|,
literal|0xEFF0EE
block|,
literal|0xF0E0E2
block|,
literal|0xF0E5E4
block|,
literal|0xF1F2E0
block|,
literal|0xF1F2E2
block|,
literal|0xF1F2E8
block|,
literal|0xF1FF20
block|,
literal|0xF2E5EB
block|,
literal|0xF2EE20
block|,
literal|0xF2EEF0
block|,
literal|0xF2FC20
block|,
literal|0xF7F2EE
block|,
literal|0xFBF520
block|,         }
decl_stmt|;
comment|// bytemap converts cp866 chars to cp1251 chars, so ngrams are still unchanged
specifier|private
specifier|static
name|byte
index|[]
name|byteMap
init|=
block|{
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x00
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x61
block|,
operator|(
name|byte
operator|)
literal|0x62
block|,
operator|(
name|byte
operator|)
literal|0x63
block|,
operator|(
name|byte
operator|)
literal|0x64
block|,
operator|(
name|byte
operator|)
literal|0x65
block|,
operator|(
name|byte
operator|)
literal|0x66
block|,
operator|(
name|byte
operator|)
literal|0x67
block|,
operator|(
name|byte
operator|)
literal|0x68
block|,
operator|(
name|byte
operator|)
literal|0x69
block|,
operator|(
name|byte
operator|)
literal|0x6A
block|,
operator|(
name|byte
operator|)
literal|0x6B
block|,
operator|(
name|byte
operator|)
literal|0x6C
block|,
operator|(
name|byte
operator|)
literal|0x6D
block|,
operator|(
name|byte
operator|)
literal|0x6E
block|,
operator|(
name|byte
operator|)
literal|0x6F
block|,
operator|(
name|byte
operator|)
literal|0x70
block|,
operator|(
name|byte
operator|)
literal|0x71
block|,
operator|(
name|byte
operator|)
literal|0x72
block|,
operator|(
name|byte
operator|)
literal|0x73
block|,
operator|(
name|byte
operator|)
literal|0x74
block|,
operator|(
name|byte
operator|)
literal|0x75
block|,
operator|(
name|byte
operator|)
literal|0x76
block|,
operator|(
name|byte
operator|)
literal|0x77
block|,
operator|(
name|byte
operator|)
literal|0x78
block|,
operator|(
name|byte
operator|)
literal|0x79
block|,
operator|(
name|byte
operator|)
literal|0x7A
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x61
block|,
operator|(
name|byte
operator|)
literal|0x62
block|,
operator|(
name|byte
operator|)
literal|0x63
block|,
operator|(
name|byte
operator|)
literal|0x64
block|,
operator|(
name|byte
operator|)
literal|0x65
block|,
operator|(
name|byte
operator|)
literal|0x66
block|,
operator|(
name|byte
operator|)
literal|0x67
block|,
operator|(
name|byte
operator|)
literal|0x68
block|,
operator|(
name|byte
operator|)
literal|0x69
block|,
operator|(
name|byte
operator|)
literal|0x6A
block|,
operator|(
name|byte
operator|)
literal|0x6B
block|,
operator|(
name|byte
operator|)
literal|0x6C
block|,
operator|(
name|byte
operator|)
literal|0x6D
block|,
operator|(
name|byte
operator|)
literal|0x6E
block|,
operator|(
name|byte
operator|)
literal|0x6F
block|,
operator|(
name|byte
operator|)
literal|0x70
block|,
operator|(
name|byte
operator|)
literal|0x71
block|,
operator|(
name|byte
operator|)
literal|0x72
block|,
operator|(
name|byte
operator|)
literal|0x73
block|,
operator|(
name|byte
operator|)
literal|0x74
block|,
operator|(
name|byte
operator|)
literal|0x75
block|,
operator|(
name|byte
operator|)
literal|0x76
block|,
operator|(
name|byte
operator|)
literal|0x77
block|,
operator|(
name|byte
operator|)
literal|0x78
block|,
operator|(
name|byte
operator|)
literal|0x79
block|,
operator|(
name|byte
operator|)
literal|0x7A
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0xE0
block|,
operator|(
name|byte
operator|)
literal|0xE1
block|,
operator|(
name|byte
operator|)
literal|0xE2
block|,
operator|(
name|byte
operator|)
literal|0xE3
block|,
operator|(
name|byte
operator|)
literal|0xE4
block|,
operator|(
name|byte
operator|)
literal|0xE5
block|,
operator|(
name|byte
operator|)
literal|0xE6
block|,
operator|(
name|byte
operator|)
literal|0xE7
block|,
operator|(
name|byte
operator|)
literal|0xE8
block|,
operator|(
name|byte
operator|)
literal|0xE9
block|,
operator|(
name|byte
operator|)
literal|0xEA
block|,
operator|(
name|byte
operator|)
literal|0xEB
block|,
operator|(
name|byte
operator|)
literal|0xEC
block|,
operator|(
name|byte
operator|)
literal|0xED
block|,
operator|(
name|byte
operator|)
literal|0xEE
block|,
operator|(
name|byte
operator|)
literal|0xEF
block|,
operator|(
name|byte
operator|)
literal|0xF0
block|,
operator|(
name|byte
operator|)
literal|0xF1
block|,
operator|(
name|byte
operator|)
literal|0xF2
block|,
operator|(
name|byte
operator|)
literal|0xF3
block|,
operator|(
name|byte
operator|)
literal|0xF4
block|,
operator|(
name|byte
operator|)
literal|0xF5
block|,
operator|(
name|byte
operator|)
literal|0xF6
block|,
operator|(
name|byte
operator|)
literal|0xF7
block|,
operator|(
name|byte
operator|)
literal|0xF8
block|,
operator|(
name|byte
operator|)
literal|0xF9
block|,
operator|(
name|byte
operator|)
literal|0xFA
block|,
operator|(
name|byte
operator|)
literal|0xFB
block|,
operator|(
name|byte
operator|)
literal|0xFC
block|,
operator|(
name|byte
operator|)
literal|0xFD
block|,
operator|(
name|byte
operator|)
literal|0xFE
block|,
operator|(
name|byte
operator|)
literal|0xFF
block|,
operator|(
name|byte
operator|)
literal|0xE0
block|,
operator|(
name|byte
operator|)
literal|0xE1
block|,
operator|(
name|byte
operator|)
literal|0xE2
block|,
operator|(
name|byte
operator|)
literal|0xE3
block|,
operator|(
name|byte
operator|)
literal|0xE4
block|,
operator|(
name|byte
operator|)
literal|0xE5
block|,
operator|(
name|byte
operator|)
literal|0xE6
block|,
operator|(
name|byte
operator|)
literal|0xE7
block|,
operator|(
name|byte
operator|)
literal|0xE8
block|,
operator|(
name|byte
operator|)
literal|0xE9
block|,
operator|(
name|byte
operator|)
literal|0xEA
block|,
operator|(
name|byte
operator|)
literal|0xEB
block|,
operator|(
name|byte
operator|)
literal|0xEC
block|,
operator|(
name|byte
operator|)
literal|0xED
block|,
operator|(
name|byte
operator|)
literal|0xEE
block|,
operator|(
name|byte
operator|)
literal|0xEF
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0xF0
block|,
operator|(
name|byte
operator|)
literal|0xF1
block|,
operator|(
name|byte
operator|)
literal|0xF2
block|,
operator|(
name|byte
operator|)
literal|0xF3
block|,
operator|(
name|byte
operator|)
literal|0xF4
block|,
operator|(
name|byte
operator|)
literal|0xF5
block|,
operator|(
name|byte
operator|)
literal|0xF6
block|,
operator|(
name|byte
operator|)
literal|0xF7
block|,
operator|(
name|byte
operator|)
literal|0xF8
block|,
operator|(
name|byte
operator|)
literal|0xF9
block|,
operator|(
name|byte
operator|)
literal|0xFA
block|,
operator|(
name|byte
operator|)
literal|0xFB
block|,
operator|(
name|byte
operator|)
literal|0xFC
block|,
operator|(
name|byte
operator|)
literal|0xFD
block|,
operator|(
name|byte
operator|)
literal|0xFE
block|,
operator|(
name|byte
operator|)
literal|0xFF
block|,
operator|(
name|byte
operator|)
literal|0xB8
block|,
operator|(
name|byte
operator|)
literal|0xB8
block|,
operator|(
name|byte
operator|)
literal|0xBA
block|,
operator|(
name|byte
operator|)
literal|0xBA
block|,
operator|(
name|byte
operator|)
literal|0xBF
block|,
operator|(
name|byte
operator|)
literal|0xBF
block|,
operator|(
name|byte
operator|)
literal|0xA2
block|,
operator|(
name|byte
operator|)
literal|0xA2
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,         }
decl_stmt|;
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
literal|"IBM866"
return|;
block|}
specifier|public
name|String
name|getLanguage
parameter_list|()
block|{
return|return
literal|"ru"
return|;
block|}
specifier|public
name|int
name|match
parameter_list|(
name|CharsetDetector
name|det
parameter_list|)
block|{
return|return
name|match
argument_list|(
name|det
argument_list|,
name|ngrams
argument_list|,
name|byteMap
argument_list|)
return|;
block|}
block|}
specifier|static
class|class
name|CharsetRecog_windows_1256
extends|extends
name|CharsetRecog_sbcs
block|{
specifier|private
specifier|static
name|int
index|[]
name|ngrams
init|=
block|{
literal|0x20C7E1
block|,
literal|0x20C7E4
block|,
literal|0x20C8C7
block|,
literal|0x20DAE1
block|,
literal|0x20DDED
block|,
literal|0x20E1E1
block|,
literal|0x20E3E4
block|,
literal|0x20E6C7
block|,
literal|0xC720C7
block|,
literal|0xC7C120
block|,
literal|0xC7CA20
block|,
literal|0xC7D120
block|,
literal|0xC7E120
block|,
literal|0xC7E1C3
block|,
literal|0xC7E1C7
block|,
literal|0xC7E1C8
block|,
literal|0xC7E1CA
block|,
literal|0xC7E1CC
block|,
literal|0xC7E1CD
block|,
literal|0xC7E1CF
block|,
literal|0xC7E1D3
block|,
literal|0xC7E1DA
block|,
literal|0xC7E1DE
block|,
literal|0xC7E1E3
block|,
literal|0xC7E1E6
block|,
literal|0xC7E1ED
block|,
literal|0xC7E320
block|,
literal|0xC7E420
block|,
literal|0xC7E4CA
block|,
literal|0xC820C7
block|,
literal|0xC920C7
block|,
literal|0xC920DD
block|,
literal|0xC920E1
block|,
literal|0xC920E3
block|,
literal|0xC920E6
block|,
literal|0xCA20C7
block|,
literal|0xCF20C7
block|,
literal|0xCFC920
block|,
literal|0xD120C7
block|,
literal|0xD1C920
block|,
literal|0xD320C7
block|,
literal|0xDA20C7
block|,
literal|0xDAE1EC
block|,
literal|0xDDED20
block|,
literal|0xE120C7
block|,
literal|0xE1C920
block|,
literal|0xE1EC20
block|,
literal|0xE1ED20
block|,
literal|0xE320C7
block|,
literal|0xE3C720
block|,
literal|0xE3C920
block|,
literal|0xE3E420
block|,
literal|0xE420C7
block|,
literal|0xE520C7
block|,
literal|0xE5C720
block|,
literal|0xE6C7E1
block|,
literal|0xE6E420
block|,
literal|0xEC20C7
block|,
literal|0xED20C7
block|,
literal|0xED20E3
block|,
literal|0xED20E6
block|,
literal|0xEDC920
block|,
literal|0xEDD120
block|,
literal|0xEDE420
block|,          }
decl_stmt|;
specifier|private
specifier|static
name|byte
index|[]
name|byteMap
init|=
block|{
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x00
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x61
block|,
operator|(
name|byte
operator|)
literal|0x62
block|,
operator|(
name|byte
operator|)
literal|0x63
block|,
operator|(
name|byte
operator|)
literal|0x64
block|,
operator|(
name|byte
operator|)
literal|0x65
block|,
operator|(
name|byte
operator|)
literal|0x66
block|,
operator|(
name|byte
operator|)
literal|0x67
block|,
operator|(
name|byte
operator|)
literal|0x68
block|,
operator|(
name|byte
operator|)
literal|0x69
block|,
operator|(
name|byte
operator|)
literal|0x6A
block|,
operator|(
name|byte
operator|)
literal|0x6B
block|,
operator|(
name|byte
operator|)
literal|0x6C
block|,
operator|(
name|byte
operator|)
literal|0x6D
block|,
operator|(
name|byte
operator|)
literal|0x6E
block|,
operator|(
name|byte
operator|)
literal|0x6F
block|,
operator|(
name|byte
operator|)
literal|0x70
block|,
operator|(
name|byte
operator|)
literal|0x71
block|,
operator|(
name|byte
operator|)
literal|0x72
block|,
operator|(
name|byte
operator|)
literal|0x73
block|,
operator|(
name|byte
operator|)
literal|0x74
block|,
operator|(
name|byte
operator|)
literal|0x75
block|,
operator|(
name|byte
operator|)
literal|0x76
block|,
operator|(
name|byte
operator|)
literal|0x77
block|,
operator|(
name|byte
operator|)
literal|0x78
block|,
operator|(
name|byte
operator|)
literal|0x79
block|,
operator|(
name|byte
operator|)
literal|0x7A
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x61
block|,
operator|(
name|byte
operator|)
literal|0x62
block|,
operator|(
name|byte
operator|)
literal|0x63
block|,
operator|(
name|byte
operator|)
literal|0x64
block|,
operator|(
name|byte
operator|)
literal|0x65
block|,
operator|(
name|byte
operator|)
literal|0x66
block|,
operator|(
name|byte
operator|)
literal|0x67
block|,
operator|(
name|byte
operator|)
literal|0x68
block|,
operator|(
name|byte
operator|)
literal|0x69
block|,
operator|(
name|byte
operator|)
literal|0x6A
block|,
operator|(
name|byte
operator|)
literal|0x6B
block|,
operator|(
name|byte
operator|)
literal|0x6C
block|,
operator|(
name|byte
operator|)
literal|0x6D
block|,
operator|(
name|byte
operator|)
literal|0x6E
block|,
operator|(
name|byte
operator|)
literal|0x6F
block|,
operator|(
name|byte
operator|)
literal|0x70
block|,
operator|(
name|byte
operator|)
literal|0x71
block|,
operator|(
name|byte
operator|)
literal|0x72
block|,
operator|(
name|byte
operator|)
literal|0x73
block|,
operator|(
name|byte
operator|)
literal|0x74
block|,
operator|(
name|byte
operator|)
literal|0x75
block|,
operator|(
name|byte
operator|)
literal|0x76
block|,
operator|(
name|byte
operator|)
literal|0x77
block|,
operator|(
name|byte
operator|)
literal|0x78
block|,
operator|(
name|byte
operator|)
literal|0x79
block|,
operator|(
name|byte
operator|)
literal|0x7A
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x81
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x83
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x88
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x8A
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x9C
block|,
operator|(
name|byte
operator|)
literal|0x8D
block|,
operator|(
name|byte
operator|)
literal|0x8E
block|,
operator|(
name|byte
operator|)
literal|0x8F
block|,
operator|(
name|byte
operator|)
literal|0x90
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x98
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x9A
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x9C
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x9F
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0xAA
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0xB5
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0xC0
block|,
operator|(
name|byte
operator|)
literal|0xC1
block|,
operator|(
name|byte
operator|)
literal|0xC2
block|,
operator|(
name|byte
operator|)
literal|0xC3
block|,
operator|(
name|byte
operator|)
literal|0xC4
block|,
operator|(
name|byte
operator|)
literal|0xC5
block|,
operator|(
name|byte
operator|)
literal|0xC6
block|,
operator|(
name|byte
operator|)
literal|0xC7
block|,
operator|(
name|byte
operator|)
literal|0xC8
block|,
operator|(
name|byte
operator|)
literal|0xC9
block|,
operator|(
name|byte
operator|)
literal|0xCA
block|,
operator|(
name|byte
operator|)
literal|0xCB
block|,
operator|(
name|byte
operator|)
literal|0xCC
block|,
operator|(
name|byte
operator|)
literal|0xCD
block|,
operator|(
name|byte
operator|)
literal|0xCE
block|,
operator|(
name|byte
operator|)
literal|0xCF
block|,
operator|(
name|byte
operator|)
literal|0xD0
block|,
operator|(
name|byte
operator|)
literal|0xD1
block|,
operator|(
name|byte
operator|)
literal|0xD2
block|,
operator|(
name|byte
operator|)
literal|0xD3
block|,
operator|(
name|byte
operator|)
literal|0xD4
block|,
operator|(
name|byte
operator|)
literal|0xD5
block|,
operator|(
name|byte
operator|)
literal|0xD6
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0xD8
block|,
operator|(
name|byte
operator|)
literal|0xD9
block|,
operator|(
name|byte
operator|)
literal|0xDA
block|,
operator|(
name|byte
operator|)
literal|0xDB
block|,
operator|(
name|byte
operator|)
literal|0xDC
block|,
operator|(
name|byte
operator|)
literal|0xDD
block|,
operator|(
name|byte
operator|)
literal|0xDE
block|,
operator|(
name|byte
operator|)
literal|0xDF
block|,
operator|(
name|byte
operator|)
literal|0xE0
block|,
operator|(
name|byte
operator|)
literal|0xE1
block|,
operator|(
name|byte
operator|)
literal|0xE2
block|,
operator|(
name|byte
operator|)
literal|0xE3
block|,
operator|(
name|byte
operator|)
literal|0xE4
block|,
operator|(
name|byte
operator|)
literal|0xE5
block|,
operator|(
name|byte
operator|)
literal|0xE6
block|,
operator|(
name|byte
operator|)
literal|0xE7
block|,
operator|(
name|byte
operator|)
literal|0xE8
block|,
operator|(
name|byte
operator|)
literal|0xE9
block|,
operator|(
name|byte
operator|)
literal|0xEA
block|,
operator|(
name|byte
operator|)
literal|0xEB
block|,
operator|(
name|byte
operator|)
literal|0xEC
block|,
operator|(
name|byte
operator|)
literal|0xED
block|,
operator|(
name|byte
operator|)
literal|0xEE
block|,
operator|(
name|byte
operator|)
literal|0xEF
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0xF4
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0xF9
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0xFB
block|,
operator|(
name|byte
operator|)
literal|0xFC
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0xFF
block|,          }
decl_stmt|;
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
literal|"windows-1256"
return|;
block|}
specifier|public
name|String
name|getLanguage
parameter_list|()
block|{
return|return
literal|"ar"
return|;
block|}
specifier|public
name|int
name|match
parameter_list|(
name|CharsetDetector
name|det
parameter_list|)
block|{
return|return
name|match
argument_list|(
name|det
argument_list|,
name|ngrams
argument_list|,
name|byteMap
argument_list|)
return|;
block|}
block|}
specifier|static
class|class
name|CharsetRecog_KOI8_R
extends|extends
name|CharsetRecog_sbcs
block|{
specifier|private
specifier|static
name|int
index|[]
name|ngrams
init|=
block|{
literal|0x20C4CF
block|,
literal|0x20C920
block|,
literal|0x20CBC1
block|,
literal|0x20CBCF
block|,
literal|0x20CEC1
block|,
literal|0x20CEC5
block|,
literal|0x20CFC2
block|,
literal|0x20D0CF
block|,
literal|0x20D0D2
block|,
literal|0x20D2C1
block|,
literal|0x20D3CF
block|,
literal|0x20D3D4
block|,
literal|0x20D4CF
block|,
literal|0x20D720
block|,
literal|0x20D7CF
block|,
literal|0x20DAC1
block|,
literal|0x20DCD4
block|,
literal|0x20DED4
block|,
literal|0xC1CEC9
block|,
literal|0xC1D4D8
block|,
literal|0xC5CCD8
block|,
literal|0xC5CEC9
block|,
literal|0xC5D3D4
block|,
literal|0xC5D420
block|,
literal|0xC7CF20
block|,
literal|0xC920D0
block|,
literal|0xC9C520
block|,
literal|0xC9C920
block|,
literal|0xC9D120
block|,
literal|0xCCC5CE
block|,
literal|0xCCC920
block|,
literal|0xCCD8CE
block|,
literal|0xCEC120
block|,
literal|0xCEC520
block|,
literal|0xCEC9C5
block|,
literal|0xCEC9D1
block|,
literal|0xCECF20
block|,
literal|0xCECFD7
block|,
literal|0xCF20D0
block|,
literal|0xCF20D3
block|,
literal|0xCF20D7
block|,
literal|0xCFC7CF
block|,
literal|0xCFCA20
block|,
literal|0xCFCCD8
block|,
literal|0xCFCD20
block|,
literal|0xCFD3D4
block|,
literal|0xCFD720
block|,
literal|0xCFD7C1
block|,
literal|0xD0CFCC
block|,
literal|0xD0D2C5
block|,
literal|0xD0D2C9
block|,
literal|0xD0D2CF
block|,
literal|0xD2C1D7
block|,
literal|0xD2C5C4
block|,
literal|0xD3D120
block|,
literal|0xD3D4C1
block|,
literal|0xD3D4C9
block|,
literal|0xD3D4D7
block|,
literal|0xD4C5CC
block|,
literal|0xD4CF20
block|,
literal|0xD4CFD2
block|,
literal|0xD4D820
block|,
literal|0xD9C820
block|,
literal|0xDED4CF
block|,          }
decl_stmt|;
specifier|private
specifier|static
name|byte
index|[]
name|byteMap
init|=
block|{
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x00
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x61
block|,
operator|(
name|byte
operator|)
literal|0x62
block|,
operator|(
name|byte
operator|)
literal|0x63
block|,
operator|(
name|byte
operator|)
literal|0x64
block|,
operator|(
name|byte
operator|)
literal|0x65
block|,
operator|(
name|byte
operator|)
literal|0x66
block|,
operator|(
name|byte
operator|)
literal|0x67
block|,
operator|(
name|byte
operator|)
literal|0x68
block|,
operator|(
name|byte
operator|)
literal|0x69
block|,
operator|(
name|byte
operator|)
literal|0x6A
block|,
operator|(
name|byte
operator|)
literal|0x6B
block|,
operator|(
name|byte
operator|)
literal|0x6C
block|,
operator|(
name|byte
operator|)
literal|0x6D
block|,
operator|(
name|byte
operator|)
literal|0x6E
block|,
operator|(
name|byte
operator|)
literal|0x6F
block|,
operator|(
name|byte
operator|)
literal|0x70
block|,
operator|(
name|byte
operator|)
literal|0x71
block|,
operator|(
name|byte
operator|)
literal|0x72
block|,
operator|(
name|byte
operator|)
literal|0x73
block|,
operator|(
name|byte
operator|)
literal|0x74
block|,
operator|(
name|byte
operator|)
literal|0x75
block|,
operator|(
name|byte
operator|)
literal|0x76
block|,
operator|(
name|byte
operator|)
literal|0x77
block|,
operator|(
name|byte
operator|)
literal|0x78
block|,
operator|(
name|byte
operator|)
literal|0x79
block|,
operator|(
name|byte
operator|)
literal|0x7A
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x61
block|,
operator|(
name|byte
operator|)
literal|0x62
block|,
operator|(
name|byte
operator|)
literal|0x63
block|,
operator|(
name|byte
operator|)
literal|0x64
block|,
operator|(
name|byte
operator|)
literal|0x65
block|,
operator|(
name|byte
operator|)
literal|0x66
block|,
operator|(
name|byte
operator|)
literal|0x67
block|,
operator|(
name|byte
operator|)
literal|0x68
block|,
operator|(
name|byte
operator|)
literal|0x69
block|,
operator|(
name|byte
operator|)
literal|0x6A
block|,
operator|(
name|byte
operator|)
literal|0x6B
block|,
operator|(
name|byte
operator|)
literal|0x6C
block|,
operator|(
name|byte
operator|)
literal|0x6D
block|,
operator|(
name|byte
operator|)
literal|0x6E
block|,
operator|(
name|byte
operator|)
literal|0x6F
block|,
operator|(
name|byte
operator|)
literal|0x70
block|,
operator|(
name|byte
operator|)
literal|0x71
block|,
operator|(
name|byte
operator|)
literal|0x72
block|,
operator|(
name|byte
operator|)
literal|0x73
block|,
operator|(
name|byte
operator|)
literal|0x74
block|,
operator|(
name|byte
operator|)
literal|0x75
block|,
operator|(
name|byte
operator|)
literal|0x76
block|,
operator|(
name|byte
operator|)
literal|0x77
block|,
operator|(
name|byte
operator|)
literal|0x78
block|,
operator|(
name|byte
operator|)
literal|0x79
block|,
operator|(
name|byte
operator|)
literal|0x7A
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0xA3
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0xA3
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0xC0
block|,
operator|(
name|byte
operator|)
literal|0xC1
block|,
operator|(
name|byte
operator|)
literal|0xC2
block|,
operator|(
name|byte
operator|)
literal|0xC3
block|,
operator|(
name|byte
operator|)
literal|0xC4
block|,
operator|(
name|byte
operator|)
literal|0xC5
block|,
operator|(
name|byte
operator|)
literal|0xC6
block|,
operator|(
name|byte
operator|)
literal|0xC7
block|,
operator|(
name|byte
operator|)
literal|0xC8
block|,
operator|(
name|byte
operator|)
literal|0xC9
block|,
operator|(
name|byte
operator|)
literal|0xCA
block|,
operator|(
name|byte
operator|)
literal|0xCB
block|,
operator|(
name|byte
operator|)
literal|0xCC
block|,
operator|(
name|byte
operator|)
literal|0xCD
block|,
operator|(
name|byte
operator|)
literal|0xCE
block|,
operator|(
name|byte
operator|)
literal|0xCF
block|,
operator|(
name|byte
operator|)
literal|0xD0
block|,
operator|(
name|byte
operator|)
literal|0xD1
block|,
operator|(
name|byte
operator|)
literal|0xD2
block|,
operator|(
name|byte
operator|)
literal|0xD3
block|,
operator|(
name|byte
operator|)
literal|0xD4
block|,
operator|(
name|byte
operator|)
literal|0xD5
block|,
operator|(
name|byte
operator|)
literal|0xD6
block|,
operator|(
name|byte
operator|)
literal|0xD7
block|,
operator|(
name|byte
operator|)
literal|0xD8
block|,
operator|(
name|byte
operator|)
literal|0xD9
block|,
operator|(
name|byte
operator|)
literal|0xDA
block|,
operator|(
name|byte
operator|)
literal|0xDB
block|,
operator|(
name|byte
operator|)
literal|0xDC
block|,
operator|(
name|byte
operator|)
literal|0xDD
block|,
operator|(
name|byte
operator|)
literal|0xDE
block|,
operator|(
name|byte
operator|)
literal|0xDF
block|,
operator|(
name|byte
operator|)
literal|0xC0
block|,
operator|(
name|byte
operator|)
literal|0xC1
block|,
operator|(
name|byte
operator|)
literal|0xC2
block|,
operator|(
name|byte
operator|)
literal|0xC3
block|,
operator|(
name|byte
operator|)
literal|0xC4
block|,
operator|(
name|byte
operator|)
literal|0xC5
block|,
operator|(
name|byte
operator|)
literal|0xC6
block|,
operator|(
name|byte
operator|)
literal|0xC7
block|,
operator|(
name|byte
operator|)
literal|0xC8
block|,
operator|(
name|byte
operator|)
literal|0xC9
block|,
operator|(
name|byte
operator|)
literal|0xCA
block|,
operator|(
name|byte
operator|)
literal|0xCB
block|,
operator|(
name|byte
operator|)
literal|0xCC
block|,
operator|(
name|byte
operator|)
literal|0xCD
block|,
operator|(
name|byte
operator|)
literal|0xCE
block|,
operator|(
name|byte
operator|)
literal|0xCF
block|,
operator|(
name|byte
operator|)
literal|0xD0
block|,
operator|(
name|byte
operator|)
literal|0xD1
block|,
operator|(
name|byte
operator|)
literal|0xD2
block|,
operator|(
name|byte
operator|)
literal|0xD3
block|,
operator|(
name|byte
operator|)
literal|0xD4
block|,
operator|(
name|byte
operator|)
literal|0xD5
block|,
operator|(
name|byte
operator|)
literal|0xD6
block|,
operator|(
name|byte
operator|)
literal|0xD7
block|,
operator|(
name|byte
operator|)
literal|0xD8
block|,
operator|(
name|byte
operator|)
literal|0xD9
block|,
operator|(
name|byte
operator|)
literal|0xDA
block|,
operator|(
name|byte
operator|)
literal|0xDB
block|,
operator|(
name|byte
operator|)
literal|0xDC
block|,
operator|(
name|byte
operator|)
literal|0xDD
block|,
operator|(
name|byte
operator|)
literal|0xDE
block|,
operator|(
name|byte
operator|)
literal|0xDF
block|,          }
decl_stmt|;
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
literal|"KOI8-R"
return|;
block|}
specifier|public
name|String
name|getLanguage
parameter_list|()
block|{
return|return
literal|"ru"
return|;
block|}
specifier|public
name|int
name|match
parameter_list|(
name|CharsetDetector
name|det
parameter_list|)
block|{
return|return
name|match
argument_list|(
name|det
argument_list|,
name|ngrams
argument_list|,
name|byteMap
argument_list|)
return|;
block|}
block|}
specifier|abstract
specifier|static
class|class
name|CharsetRecog_IBM424_he
extends|extends
name|CharsetRecog_sbcs
block|{
specifier|protected
specifier|static
name|byte
index|[]
name|byteMap
init|=
block|{
comment|/*                 -0           -1           -2           -3           -4           -5           -6           -7           -8           -9           -A           -B           -C           -D           -E           -F   */
comment|/* 0- */
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
comment|/* 1- */
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
comment|/* 2- */
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
comment|/* 3- */
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
comment|/* 4- */
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x41
block|,
operator|(
name|byte
operator|)
literal|0x42
block|,
operator|(
name|byte
operator|)
literal|0x43
block|,
operator|(
name|byte
operator|)
literal|0x44
block|,
operator|(
name|byte
operator|)
literal|0x45
block|,
operator|(
name|byte
operator|)
literal|0x46
block|,
operator|(
name|byte
operator|)
literal|0x47
block|,
operator|(
name|byte
operator|)
literal|0x48
block|,
operator|(
name|byte
operator|)
literal|0x49
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
comment|/* 5- */
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x51
block|,
operator|(
name|byte
operator|)
literal|0x52
block|,
operator|(
name|byte
operator|)
literal|0x53
block|,
operator|(
name|byte
operator|)
literal|0x54
block|,
operator|(
name|byte
operator|)
literal|0x55
block|,
operator|(
name|byte
operator|)
literal|0x56
block|,
operator|(
name|byte
operator|)
literal|0x57
block|,
operator|(
name|byte
operator|)
literal|0x58
block|,
operator|(
name|byte
operator|)
literal|0x59
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
comment|/* 6- */
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x62
block|,
operator|(
name|byte
operator|)
literal|0x63
block|,
operator|(
name|byte
operator|)
literal|0x64
block|,
operator|(
name|byte
operator|)
literal|0x65
block|,
operator|(
name|byte
operator|)
literal|0x66
block|,
operator|(
name|byte
operator|)
literal|0x67
block|,
operator|(
name|byte
operator|)
literal|0x68
block|,
operator|(
name|byte
operator|)
literal|0x69
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
comment|/* 7- */
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x71
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x00
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
comment|/* 8- */
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x81
block|,
operator|(
name|byte
operator|)
literal|0x82
block|,
operator|(
name|byte
operator|)
literal|0x83
block|,
operator|(
name|byte
operator|)
literal|0x84
block|,
operator|(
name|byte
operator|)
literal|0x85
block|,
operator|(
name|byte
operator|)
literal|0x86
block|,
operator|(
name|byte
operator|)
literal|0x87
block|,
operator|(
name|byte
operator|)
literal|0x88
block|,
operator|(
name|byte
operator|)
literal|0x89
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
comment|/* 9- */
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x91
block|,
operator|(
name|byte
operator|)
literal|0x92
block|,
operator|(
name|byte
operator|)
literal|0x93
block|,
operator|(
name|byte
operator|)
literal|0x94
block|,
operator|(
name|byte
operator|)
literal|0x95
block|,
operator|(
name|byte
operator|)
literal|0x96
block|,
operator|(
name|byte
operator|)
literal|0x97
block|,
operator|(
name|byte
operator|)
literal|0x98
block|,
operator|(
name|byte
operator|)
literal|0x99
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
comment|/* A- */
operator|(
name|byte
operator|)
literal|0xA0
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0xA2
block|,
operator|(
name|byte
operator|)
literal|0xA3
block|,
operator|(
name|byte
operator|)
literal|0xA4
block|,
operator|(
name|byte
operator|)
literal|0xA5
block|,
operator|(
name|byte
operator|)
literal|0xA6
block|,
operator|(
name|byte
operator|)
literal|0xA7
block|,
operator|(
name|byte
operator|)
literal|0xA8
block|,
operator|(
name|byte
operator|)
literal|0xA9
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
comment|/* B- */
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
comment|/* C- */
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x81
block|,
operator|(
name|byte
operator|)
literal|0x82
block|,
operator|(
name|byte
operator|)
literal|0x83
block|,
operator|(
name|byte
operator|)
literal|0x84
block|,
operator|(
name|byte
operator|)
literal|0x85
block|,
operator|(
name|byte
operator|)
literal|0x86
block|,
operator|(
name|byte
operator|)
literal|0x87
block|,
operator|(
name|byte
operator|)
literal|0x88
block|,
operator|(
name|byte
operator|)
literal|0x89
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
comment|/* D- */
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x91
block|,
operator|(
name|byte
operator|)
literal|0x92
block|,
operator|(
name|byte
operator|)
literal|0x93
block|,
operator|(
name|byte
operator|)
literal|0x94
block|,
operator|(
name|byte
operator|)
literal|0x95
block|,
operator|(
name|byte
operator|)
literal|0x96
block|,
operator|(
name|byte
operator|)
literal|0x97
block|,
operator|(
name|byte
operator|)
literal|0x98
block|,
operator|(
name|byte
operator|)
literal|0x99
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
comment|/* E- */
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0xA2
block|,
operator|(
name|byte
operator|)
literal|0xA3
block|,
operator|(
name|byte
operator|)
literal|0xA4
block|,
operator|(
name|byte
operator|)
literal|0xA5
block|,
operator|(
name|byte
operator|)
literal|0xA6
block|,
operator|(
name|byte
operator|)
literal|0xA7
block|,
operator|(
name|byte
operator|)
literal|0xA8
block|,
operator|(
name|byte
operator|)
literal|0xA9
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
comment|/* F- */
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,          }
decl_stmt|;
specifier|public
name|String
name|getLanguage
parameter_list|()
block|{
return|return
literal|"he"
return|;
block|}
block|}
specifier|static
class|class
name|CharsetRecog_IBM424_he_rtl
extends|extends
name|CharsetRecog_IBM424_he
block|{
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
literal|"IBM424_rtl"
return|;
block|}
specifier|private
specifier|static
name|int
index|[]
name|ngrams
init|=
block|{
literal|0x404146
block|,
literal|0x404148
block|,
literal|0x404151
block|,
literal|0x404171
block|,
literal|0x404251
block|,
literal|0x404256
block|,
literal|0x404541
block|,
literal|0x404546
block|,
literal|0x404551
block|,
literal|0x404556
block|,
literal|0x404562
block|,
literal|0x404569
block|,
literal|0x404571
block|,
literal|0x405441
block|,
literal|0x405445
block|,
literal|0x405641
block|,
literal|0x406254
block|,
literal|0x406954
block|,
literal|0x417140
block|,
literal|0x454041
block|,
literal|0x454042
block|,
literal|0x454045
block|,
literal|0x454054
block|,
literal|0x454056
block|,
literal|0x454069
block|,
literal|0x454641
block|,
literal|0x464140
block|,
literal|0x465540
block|,
literal|0x465740
block|,
literal|0x466840
block|,
literal|0x467140
block|,
literal|0x514045
block|,
literal|0x514540
block|,
literal|0x514671
block|,
literal|0x515155
block|,
literal|0x515540
block|,
literal|0x515740
block|,
literal|0x516840
block|,
literal|0x517140
block|,
literal|0x544041
block|,
literal|0x544045
block|,
literal|0x544140
block|,
literal|0x544540
block|,
literal|0x554041
block|,
literal|0x554042
block|,
literal|0x554045
block|,
literal|0x554054
block|,
literal|0x554056
block|,
literal|0x554069
block|,
literal|0x564540
block|,
literal|0x574045
block|,
literal|0x584540
block|,
literal|0x585140
block|,
literal|0x585155
block|,
literal|0x625440
block|,
literal|0x684045
block|,
literal|0x685155
block|,
literal|0x695440
block|,
literal|0x714041
block|,
literal|0x714042
block|,
literal|0x714045
block|,
literal|0x714054
block|,
literal|0x714056
block|,
literal|0x714069
block|,          }
decl_stmt|;
specifier|public
name|int
name|match
parameter_list|(
name|CharsetDetector
name|det
parameter_list|)
block|{
return|return
name|match
argument_list|(
name|det
argument_list|,
name|ngrams
argument_list|,
name|byteMap
argument_list|,
operator|(
name|byte
operator|)
literal|0x40
argument_list|)
return|;
block|}
block|}
specifier|static
class|class
name|CharsetRecog_IBM424_he_ltr
extends|extends
name|CharsetRecog_IBM424_he
block|{
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
literal|"IBM424_ltr"
return|;
block|}
specifier|private
specifier|static
name|int
index|[]
name|ngrams
init|=
block|{
literal|0x404146
block|,
literal|0x404154
block|,
literal|0x404551
block|,
literal|0x404554
block|,
literal|0x404556
block|,
literal|0x404558
block|,
literal|0x405158
block|,
literal|0x405462
block|,
literal|0x405469
block|,
literal|0x405546
block|,
literal|0x405551
block|,
literal|0x405746
block|,
literal|0x405751
block|,
literal|0x406846
block|,
literal|0x406851
block|,
literal|0x407141
block|,
literal|0x407146
block|,
literal|0x407151
block|,
literal|0x414045
block|,
literal|0x414054
block|,
literal|0x414055
block|,
literal|0x414071
block|,
literal|0x414540
block|,
literal|0x414645
block|,
literal|0x415440
block|,
literal|0x415640
block|,
literal|0x424045
block|,
literal|0x424055
block|,
literal|0x424071
block|,
literal|0x454045
block|,
literal|0x454051
block|,
literal|0x454054
block|,
literal|0x454055
block|,
literal|0x454057
block|,
literal|0x454068
block|,
literal|0x454071
block|,
literal|0x455440
block|,
literal|0x464140
block|,
literal|0x464540
block|,
literal|0x484140
block|,
literal|0x514140
block|,
literal|0x514240
block|,
literal|0x514540
block|,
literal|0x544045
block|,
literal|0x544055
block|,
literal|0x544071
block|,
literal|0x546240
block|,
literal|0x546940
block|,
literal|0x555151
block|,
literal|0x555158
block|,
literal|0x555168
block|,
literal|0x564045
block|,
literal|0x564055
block|,
literal|0x564071
block|,
literal|0x564240
block|,
literal|0x564540
block|,
literal|0x624540
block|,
literal|0x694045
block|,
literal|0x694055
block|,
literal|0x694071
block|,
literal|0x694540
block|,
literal|0x714140
block|,
literal|0x714540
block|,
literal|0x714651
block|}
decl_stmt|;
specifier|public
name|int
name|match
parameter_list|(
name|CharsetDetector
name|det
parameter_list|)
block|{
return|return
name|match
argument_list|(
name|det
argument_list|,
name|ngrams
argument_list|,
name|byteMap
argument_list|,
operator|(
name|byte
operator|)
literal|0x40
argument_list|)
return|;
block|}
block|}
specifier|abstract
specifier|static
class|class
name|CharsetRecog_IBM420_ar
extends|extends
name|CharsetRecog_sbcs
block|{
comment|//arabic shaping class, method shape/unshape
comment|//protected static ArabicShaping as = new ArabicShaping(ArabicShaping.LETTERS_UNSHAPE);
specifier|protected
name|byte
index|[]
name|prev_fInputBytes
init|=
literal|null
decl_stmt|;
specifier|protected
specifier|static
name|byte
index|[]
name|byteMap
init|=
block|{
comment|/*                 -0           -1           -2           -3           -4           -5           -6           -7           -8           -9           -A           -B           -C           -D           -E           -F   */
comment|/* 0- */
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
comment|/* 1- */
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
comment|/* 2- */
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
comment|/* 3- */
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
comment|/* 4- */
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x42
block|,
operator|(
name|byte
operator|)
literal|0x43
block|,
operator|(
name|byte
operator|)
literal|0x44
block|,
operator|(
name|byte
operator|)
literal|0x45
block|,
operator|(
name|byte
operator|)
literal|0x46
block|,
operator|(
name|byte
operator|)
literal|0x47
block|,
operator|(
name|byte
operator|)
literal|0x48
block|,
operator|(
name|byte
operator|)
literal|0x49
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
comment|/* 5- */
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x51
block|,
operator|(
name|byte
operator|)
literal|0x52
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x55
block|,
operator|(
name|byte
operator|)
literal|0x56
block|,
operator|(
name|byte
operator|)
literal|0x57
block|,
operator|(
name|byte
operator|)
literal|0x58
block|,
operator|(
name|byte
operator|)
literal|0x59
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
comment|/* 6- */
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x62
block|,
operator|(
name|byte
operator|)
literal|0x63
block|,
operator|(
name|byte
operator|)
literal|0x64
block|,
operator|(
name|byte
operator|)
literal|0x65
block|,
operator|(
name|byte
operator|)
literal|0x66
block|,
operator|(
name|byte
operator|)
literal|0x67
block|,
operator|(
name|byte
operator|)
literal|0x68
block|,
operator|(
name|byte
operator|)
literal|0x69
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
comment|/* 7- */
operator|(
name|byte
operator|)
literal|0x70
block|,
operator|(
name|byte
operator|)
literal|0x71
block|,
operator|(
name|byte
operator|)
literal|0x72
block|,
operator|(
name|byte
operator|)
literal|0x73
block|,
operator|(
name|byte
operator|)
literal|0x74
block|,
operator|(
name|byte
operator|)
literal|0x75
block|,
operator|(
name|byte
operator|)
literal|0x76
block|,
operator|(
name|byte
operator|)
literal|0x77
block|,
operator|(
name|byte
operator|)
literal|0x78
block|,
operator|(
name|byte
operator|)
literal|0x79
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
comment|/* 8- */
operator|(
name|byte
operator|)
literal|0x80
block|,
operator|(
name|byte
operator|)
literal|0x81
block|,
operator|(
name|byte
operator|)
literal|0x82
block|,
operator|(
name|byte
operator|)
literal|0x83
block|,
operator|(
name|byte
operator|)
literal|0x84
block|,
operator|(
name|byte
operator|)
literal|0x85
block|,
operator|(
name|byte
operator|)
literal|0x86
block|,
operator|(
name|byte
operator|)
literal|0x87
block|,
operator|(
name|byte
operator|)
literal|0x88
block|,
operator|(
name|byte
operator|)
literal|0x89
block|,
operator|(
name|byte
operator|)
literal|0x8A
block|,
operator|(
name|byte
operator|)
literal|0x8B
block|,
operator|(
name|byte
operator|)
literal|0x8C
block|,
operator|(
name|byte
operator|)
literal|0x8D
block|,
operator|(
name|byte
operator|)
literal|0x8E
block|,
operator|(
name|byte
operator|)
literal|0x8F
block|,
comment|/* 9- */
operator|(
name|byte
operator|)
literal|0x90
block|,
operator|(
name|byte
operator|)
literal|0x91
block|,
operator|(
name|byte
operator|)
literal|0x92
block|,
operator|(
name|byte
operator|)
literal|0x93
block|,
operator|(
name|byte
operator|)
literal|0x94
block|,
operator|(
name|byte
operator|)
literal|0x95
block|,
operator|(
name|byte
operator|)
literal|0x96
block|,
operator|(
name|byte
operator|)
literal|0x97
block|,
operator|(
name|byte
operator|)
literal|0x98
block|,
operator|(
name|byte
operator|)
literal|0x99
block|,
operator|(
name|byte
operator|)
literal|0x9A
block|,
operator|(
name|byte
operator|)
literal|0x9B
block|,
operator|(
name|byte
operator|)
literal|0x9C
block|,
operator|(
name|byte
operator|)
literal|0x9D
block|,
operator|(
name|byte
operator|)
literal|0x9E
block|,
operator|(
name|byte
operator|)
literal|0x9F
block|,
comment|/* A- */
operator|(
name|byte
operator|)
literal|0xA0
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0xA2
block|,
operator|(
name|byte
operator|)
literal|0xA3
block|,
operator|(
name|byte
operator|)
literal|0xA4
block|,
operator|(
name|byte
operator|)
literal|0xA5
block|,
operator|(
name|byte
operator|)
literal|0xA6
block|,
operator|(
name|byte
operator|)
literal|0xA7
block|,
operator|(
name|byte
operator|)
literal|0xA8
block|,
operator|(
name|byte
operator|)
literal|0xA9
block|,
operator|(
name|byte
operator|)
literal|0xAA
block|,
operator|(
name|byte
operator|)
literal|0xAB
block|,
operator|(
name|byte
operator|)
literal|0xAC
block|,
operator|(
name|byte
operator|)
literal|0xAD
block|,
operator|(
name|byte
operator|)
literal|0xAE
block|,
operator|(
name|byte
operator|)
literal|0xAF
block|,
comment|/* B- */
operator|(
name|byte
operator|)
literal|0xB0
block|,
operator|(
name|byte
operator|)
literal|0xB1
block|,
operator|(
name|byte
operator|)
literal|0xB2
block|,
operator|(
name|byte
operator|)
literal|0xB3
block|,
operator|(
name|byte
operator|)
literal|0xB4
block|,
operator|(
name|byte
operator|)
literal|0xB5
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0xB8
block|,
operator|(
name|byte
operator|)
literal|0xB9
block|,
operator|(
name|byte
operator|)
literal|0xBA
block|,
operator|(
name|byte
operator|)
literal|0xBB
block|,
operator|(
name|byte
operator|)
literal|0xBC
block|,
operator|(
name|byte
operator|)
literal|0xBD
block|,
operator|(
name|byte
operator|)
literal|0xBE
block|,
operator|(
name|byte
operator|)
literal|0xBF
block|,
comment|/* C- */
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x81
block|,
operator|(
name|byte
operator|)
literal|0x82
block|,
operator|(
name|byte
operator|)
literal|0x83
block|,
operator|(
name|byte
operator|)
literal|0x84
block|,
operator|(
name|byte
operator|)
literal|0x85
block|,
operator|(
name|byte
operator|)
literal|0x86
block|,
operator|(
name|byte
operator|)
literal|0x87
block|,
operator|(
name|byte
operator|)
literal|0x88
block|,
operator|(
name|byte
operator|)
literal|0x89
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0xCB
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0xCD
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0xCF
block|,
comment|/* D- */
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x91
block|,
operator|(
name|byte
operator|)
literal|0x92
block|,
operator|(
name|byte
operator|)
literal|0x93
block|,
operator|(
name|byte
operator|)
literal|0x94
block|,
operator|(
name|byte
operator|)
literal|0x95
block|,
operator|(
name|byte
operator|)
literal|0x96
block|,
operator|(
name|byte
operator|)
literal|0x97
block|,
operator|(
name|byte
operator|)
literal|0x98
block|,
operator|(
name|byte
operator|)
literal|0x99
block|,
operator|(
name|byte
operator|)
literal|0xDA
block|,
operator|(
name|byte
operator|)
literal|0xDB
block|,
operator|(
name|byte
operator|)
literal|0xDC
block|,
operator|(
name|byte
operator|)
literal|0xDD
block|,
operator|(
name|byte
operator|)
literal|0xDE
block|,
operator|(
name|byte
operator|)
literal|0xDF
block|,
comment|/* E- */
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0xA2
block|,
operator|(
name|byte
operator|)
literal|0xA3
block|,
operator|(
name|byte
operator|)
literal|0xA4
block|,
operator|(
name|byte
operator|)
literal|0xA5
block|,
operator|(
name|byte
operator|)
literal|0xA6
block|,
operator|(
name|byte
operator|)
literal|0xA7
block|,
operator|(
name|byte
operator|)
literal|0xA8
block|,
operator|(
name|byte
operator|)
literal|0xA9
block|,
operator|(
name|byte
operator|)
literal|0xEA
block|,
operator|(
name|byte
operator|)
literal|0xEB
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0xED
block|,
operator|(
name|byte
operator|)
literal|0xEE
block|,
operator|(
name|byte
operator|)
literal|0xEF
block|,
comment|/* F- */
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0xFB
block|,
operator|(
name|byte
operator|)
literal|0xFC
block|,
operator|(
name|byte
operator|)
literal|0xFD
block|,
operator|(
name|byte
operator|)
literal|0xFE
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,          }
decl_stmt|;
specifier|protected
specifier|static
name|byte
index|[]
name|unshapeMap
init|=
block|{
comment|/*                 -0           -1           -2           -3           -4           -5           -6           -7           -8           -9           -A           -B           -C           -D           -E           -F   */
comment|/* 0- */
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
comment|/* 1- */
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
comment|/* 2- */
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
comment|/* 3- */
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
comment|/* 4- */
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x40
block|,
operator|(
name|byte
operator|)
literal|0x42
block|,
operator|(
name|byte
operator|)
literal|0x42
block|,
operator|(
name|byte
operator|)
literal|0x44
block|,
operator|(
name|byte
operator|)
literal|0x45
block|,
operator|(
name|byte
operator|)
literal|0x46
block|,
operator|(
name|byte
operator|)
literal|0x47
block|,
operator|(
name|byte
operator|)
literal|0x47
block|,
operator|(
name|byte
operator|)
literal|0x49
block|,
operator|(
name|byte
operator|)
literal|0x4A
block|,
operator|(
name|byte
operator|)
literal|0x4B
block|,
operator|(
name|byte
operator|)
literal|0x4C
block|,
operator|(
name|byte
operator|)
literal|0x4D
block|,
operator|(
name|byte
operator|)
literal|0x4E
block|,
operator|(
name|byte
operator|)
literal|0x4F
block|,
comment|/* 5- */
operator|(
name|byte
operator|)
literal|0x50
block|,
operator|(
name|byte
operator|)
literal|0x49
block|,
operator|(
name|byte
operator|)
literal|0x52
block|,
operator|(
name|byte
operator|)
literal|0x53
block|,
operator|(
name|byte
operator|)
literal|0x54
block|,
operator|(
name|byte
operator|)
literal|0x55
block|,
operator|(
name|byte
operator|)
literal|0x56
block|,
operator|(
name|byte
operator|)
literal|0x56
block|,
operator|(
name|byte
operator|)
literal|0x58
block|,
operator|(
name|byte
operator|)
literal|0x58
block|,
operator|(
name|byte
operator|)
literal|0x5A
block|,
operator|(
name|byte
operator|)
literal|0x5B
block|,
operator|(
name|byte
operator|)
literal|0x5C
block|,
operator|(
name|byte
operator|)
literal|0x5D
block|,
operator|(
name|byte
operator|)
literal|0x5E
block|,
operator|(
name|byte
operator|)
literal|0x5F
block|,
comment|/* 6- */
operator|(
name|byte
operator|)
literal|0x60
block|,
operator|(
name|byte
operator|)
literal|0x61
block|,
operator|(
name|byte
operator|)
literal|0x62
block|,
operator|(
name|byte
operator|)
literal|0x63
block|,
operator|(
name|byte
operator|)
literal|0x63
block|,
operator|(
name|byte
operator|)
literal|0x65
block|,
operator|(
name|byte
operator|)
literal|0x65
block|,
operator|(
name|byte
operator|)
literal|0x67
block|,
operator|(
name|byte
operator|)
literal|0x67
block|,
operator|(
name|byte
operator|)
literal|0x69
block|,
operator|(
name|byte
operator|)
literal|0x6A
block|,
operator|(
name|byte
operator|)
literal|0x6B
block|,
operator|(
name|byte
operator|)
literal|0x6C
block|,
operator|(
name|byte
operator|)
literal|0x6D
block|,
operator|(
name|byte
operator|)
literal|0x6E
block|,
operator|(
name|byte
operator|)
literal|0x6F
block|,
comment|/* 7- */
operator|(
name|byte
operator|)
literal|0x69
block|,
operator|(
name|byte
operator|)
literal|0x71
block|,
operator|(
name|byte
operator|)
literal|0x71
block|,
operator|(
name|byte
operator|)
literal|0x73
block|,
operator|(
name|byte
operator|)
literal|0x74
block|,
operator|(
name|byte
operator|)
literal|0x75
block|,
operator|(
name|byte
operator|)
literal|0x76
block|,
operator|(
name|byte
operator|)
literal|0x77
block|,
operator|(
name|byte
operator|)
literal|0x77
block|,
operator|(
name|byte
operator|)
literal|0x79
block|,
operator|(
name|byte
operator|)
literal|0x7A
block|,
operator|(
name|byte
operator|)
literal|0x7B
block|,
operator|(
name|byte
operator|)
literal|0x7C
block|,
operator|(
name|byte
operator|)
literal|0x7D
block|,
operator|(
name|byte
operator|)
literal|0x7E
block|,
operator|(
name|byte
operator|)
literal|0x7F
block|,
comment|/* 8- */
operator|(
name|byte
operator|)
literal|0x80
block|,
operator|(
name|byte
operator|)
literal|0x81
block|,
operator|(
name|byte
operator|)
literal|0x82
block|,
operator|(
name|byte
operator|)
literal|0x83
block|,
operator|(
name|byte
operator|)
literal|0x84
block|,
operator|(
name|byte
operator|)
literal|0x85
block|,
operator|(
name|byte
operator|)
literal|0x86
block|,
operator|(
name|byte
operator|)
literal|0x87
block|,
operator|(
name|byte
operator|)
literal|0x88
block|,
operator|(
name|byte
operator|)
literal|0x89
block|,
operator|(
name|byte
operator|)
literal|0x80
block|,
operator|(
name|byte
operator|)
literal|0x8B
block|,
operator|(
name|byte
operator|)
literal|0x8B
block|,
operator|(
name|byte
operator|)
literal|0x8D
block|,
operator|(
name|byte
operator|)
literal|0x8D
block|,
operator|(
name|byte
operator|)
literal|0x8F
block|,
comment|/* 9- */
operator|(
name|byte
operator|)
literal|0x90
block|,
operator|(
name|byte
operator|)
literal|0x91
block|,
operator|(
name|byte
operator|)
literal|0x92
block|,
operator|(
name|byte
operator|)
literal|0x93
block|,
operator|(
name|byte
operator|)
literal|0x94
block|,
operator|(
name|byte
operator|)
literal|0x95
block|,
operator|(
name|byte
operator|)
literal|0x96
block|,
operator|(
name|byte
operator|)
literal|0x97
block|,
operator|(
name|byte
operator|)
literal|0x98
block|,
operator|(
name|byte
operator|)
literal|0x99
block|,
operator|(
name|byte
operator|)
literal|0x9A
block|,
operator|(
name|byte
operator|)
literal|0x9A
block|,
operator|(
name|byte
operator|)
literal|0x9A
block|,
operator|(
name|byte
operator|)
literal|0x9A
block|,
operator|(
name|byte
operator|)
literal|0x9E
block|,
operator|(
name|byte
operator|)
literal|0x9E
block|,
comment|/* A- */
operator|(
name|byte
operator|)
literal|0x9E
block|,
operator|(
name|byte
operator|)
literal|0xA1
block|,
operator|(
name|byte
operator|)
literal|0xA2
block|,
operator|(
name|byte
operator|)
literal|0xA3
block|,
operator|(
name|byte
operator|)
literal|0xA4
block|,
operator|(
name|byte
operator|)
literal|0xA5
block|,
operator|(
name|byte
operator|)
literal|0xA6
block|,
operator|(
name|byte
operator|)
literal|0xA7
block|,
operator|(
name|byte
operator|)
literal|0xA8
block|,
operator|(
name|byte
operator|)
literal|0xA9
block|,
operator|(
name|byte
operator|)
literal|0x9E
block|,
operator|(
name|byte
operator|)
literal|0xAB
block|,
operator|(
name|byte
operator|)
literal|0xAB
block|,
operator|(
name|byte
operator|)
literal|0xAD
block|,
operator|(
name|byte
operator|)
literal|0xAD
block|,
operator|(
name|byte
operator|)
literal|0xAF
block|,
comment|/* B- */
operator|(
name|byte
operator|)
literal|0xAF
block|,
operator|(
name|byte
operator|)
literal|0xB1
block|,
operator|(
name|byte
operator|)
literal|0xB2
block|,
operator|(
name|byte
operator|)
literal|0xB3
block|,
operator|(
name|byte
operator|)
literal|0xB4
block|,
operator|(
name|byte
operator|)
literal|0xB5
block|,
operator|(
name|byte
operator|)
literal|0xB6
block|,
operator|(
name|byte
operator|)
literal|0xB7
block|,
operator|(
name|byte
operator|)
literal|0xB8
block|,
operator|(
name|byte
operator|)
literal|0xB9
block|,
operator|(
name|byte
operator|)
literal|0xB1
block|,
operator|(
name|byte
operator|)
literal|0xBB
block|,
operator|(
name|byte
operator|)
literal|0xBB
block|,
operator|(
name|byte
operator|)
literal|0xBD
block|,
operator|(
name|byte
operator|)
literal|0xBD
block|,
operator|(
name|byte
operator|)
literal|0xBF
block|,
comment|/* C- */
operator|(
name|byte
operator|)
literal|0xC0
block|,
operator|(
name|byte
operator|)
literal|0xC1
block|,
operator|(
name|byte
operator|)
literal|0xC2
block|,
operator|(
name|byte
operator|)
literal|0xC3
block|,
operator|(
name|byte
operator|)
literal|0xC4
block|,
operator|(
name|byte
operator|)
literal|0xC5
block|,
operator|(
name|byte
operator|)
literal|0xC6
block|,
operator|(
name|byte
operator|)
literal|0xC7
block|,
operator|(
name|byte
operator|)
literal|0xC8
block|,
operator|(
name|byte
operator|)
literal|0xC9
block|,
operator|(
name|byte
operator|)
literal|0xCA
block|,
operator|(
name|byte
operator|)
literal|0xBF
block|,
operator|(
name|byte
operator|)
literal|0xCC
block|,
operator|(
name|byte
operator|)
literal|0xBF
block|,
operator|(
name|byte
operator|)
literal|0xCE
block|,
operator|(
name|byte
operator|)
literal|0xCF
block|,
comment|/* D- */
operator|(
name|byte
operator|)
literal|0xD0
block|,
operator|(
name|byte
operator|)
literal|0xD1
block|,
operator|(
name|byte
operator|)
literal|0xD2
block|,
operator|(
name|byte
operator|)
literal|0xD3
block|,
operator|(
name|byte
operator|)
literal|0xD4
block|,
operator|(
name|byte
operator|)
literal|0xD5
block|,
operator|(
name|byte
operator|)
literal|0xD6
block|,
operator|(
name|byte
operator|)
literal|0xD7
block|,
operator|(
name|byte
operator|)
literal|0xD8
block|,
operator|(
name|byte
operator|)
literal|0xD9
block|,
operator|(
name|byte
operator|)
literal|0xDA
block|,
operator|(
name|byte
operator|)
literal|0xDA
block|,
operator|(
name|byte
operator|)
literal|0xDC
block|,
operator|(
name|byte
operator|)
literal|0xDC
block|,
operator|(
name|byte
operator|)
literal|0xDC
block|,
operator|(
name|byte
operator|)
literal|0xDF
block|,
comment|/* E- */
operator|(
name|byte
operator|)
literal|0xE0
block|,
operator|(
name|byte
operator|)
literal|0xE1
block|,
operator|(
name|byte
operator|)
literal|0xE2
block|,
operator|(
name|byte
operator|)
literal|0xE3
block|,
operator|(
name|byte
operator|)
literal|0xE4
block|,
operator|(
name|byte
operator|)
literal|0xE5
block|,
operator|(
name|byte
operator|)
literal|0xE6
block|,
operator|(
name|byte
operator|)
literal|0xE7
block|,
operator|(
name|byte
operator|)
literal|0xE8
block|,
operator|(
name|byte
operator|)
literal|0xE9
block|,
operator|(
name|byte
operator|)
literal|0xEA
block|,
operator|(
name|byte
operator|)
literal|0xEB
block|,
operator|(
name|byte
operator|)
literal|0xEC
block|,
operator|(
name|byte
operator|)
literal|0xED
block|,
operator|(
name|byte
operator|)
literal|0xEE
block|,
operator|(
name|byte
operator|)
literal|0xEF
block|,
comment|/* F- */
operator|(
name|byte
operator|)
literal|0xF0
block|,
operator|(
name|byte
operator|)
literal|0xF1
block|,
operator|(
name|byte
operator|)
literal|0xF2
block|,
operator|(
name|byte
operator|)
literal|0xF3
block|,
operator|(
name|byte
operator|)
literal|0xF4
block|,
operator|(
name|byte
operator|)
literal|0xF5
block|,
operator|(
name|byte
operator|)
literal|0xF6
block|,
operator|(
name|byte
operator|)
literal|0xF7
block|,
operator|(
name|byte
operator|)
literal|0xF8
block|,
operator|(
name|byte
operator|)
literal|0xF9
block|,
operator|(
name|byte
operator|)
literal|0xFA
block|,
operator|(
name|byte
operator|)
literal|0xFB
block|,
operator|(
name|byte
operator|)
literal|0xFC
block|,
operator|(
name|byte
operator|)
literal|0xFD
block|,
operator|(
name|byte
operator|)
literal|0xFE
block|,
operator|(
name|byte
operator|)
literal|0xFF
block|,          }
decl_stmt|;
specifier|public
name|String
name|getLanguage
parameter_list|()
block|{
return|return
literal|"ar"
return|;
block|}
specifier|protected
name|void
name|matchInit
parameter_list|(
name|CharsetDetector
name|det
parameter_list|)
block|{
name|prev_fInputBytes
operator|=
operator|(
name|byte
index|[]
operator|)
name|det
operator|.
name|fInputBytes
operator|.
name|clone
argument_list|()
expr_stmt|;
name|byte
name|bb
index|[]
init|=
name|unshape
argument_list|(
name|det
operator|.
name|fInputBytes
argument_list|)
decl_stmt|;
name|det
operator|.
name|setText
argument_list|(
name|bb
argument_list|)
expr_stmt|;
block|}
comment|/*          * Arabic shaping needs to be done manually. Cannot call ArabicShaping class          * because CharsetDetector is dealing with bytes not Unicode code points. We could          * convert the bytes to Unicode code points but that would leave us dependent          * on CharsetICU which we try to avoid. IBM420 converter amongst different versions          * of JDK can produce different results and therefore is also avoided.          */
specifier|private
name|byte
index|[]
name|unshape
parameter_list|(
name|byte
index|[]
name|inputBytes
parameter_list|)
block|{
name|byte
name|resultByteArr
index|[]
init|=
name|unshapeLamAlef
argument_list|(
name|inputBytes
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|inputBytes
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|resultByteArr
index|[
name|i
index|]
operator|=
name|unshapeMap
index|[
name|resultByteArr
index|[
name|i
index|]
operator|&
literal|0xFF
index|]
expr_stmt|;
block|}
return|return
name|resultByteArr
return|;
block|}
specifier|private
name|byte
index|[]
name|unshapeLamAlef
parameter_list|(
name|byte
index|[]
name|inputBytes
parameter_list|)
block|{
name|ByteBuffer
name|resultBigBuffer
init|=
name|ByteBuffer
operator|.
name|allocate
argument_list|(
name|inputBytes
operator|.
name|length
operator|*
literal|2
argument_list|)
decl_stmt|;
name|ByteBuffer
name|resultBuffer
decl_stmt|;
name|byte
name|unshapedLamAlef
index|[]
init|=
block|{
operator|(
name|byte
operator|)
literal|0xb1
block|,
operator|(
name|byte
operator|)
literal|0x56
block|}
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|inputBytes
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|isLamAlef
argument_list|(
name|inputBytes
index|[
name|i
index|]
argument_list|)
condition|)
name|resultBigBuffer
operator|.
name|put
argument_list|(
name|unshapedLamAlef
argument_list|)
expr_stmt|;
else|else
name|resultBigBuffer
operator|.
name|put
argument_list|(
name|inputBytes
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|resultBuffer
operator|=
name|ByteBuffer
operator|.
name|allocate
argument_list|(
name|resultBigBuffer
operator|.
name|position
argument_list|()
argument_list|)
expr_stmt|;
name|resultBuffer
operator|.
name|put
argument_list|(
name|resultBigBuffer
operator|.
name|array
argument_list|()
argument_list|,
literal|0
argument_list|,
name|resultBigBuffer
operator|.
name|position
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|resultBuffer
operator|.
name|array
argument_list|()
return|;
block|}
specifier|private
name|boolean
name|isLamAlef
parameter_list|(
name|byte
name|b
parameter_list|)
block|{
name|byte
name|shapedLamAlef
index|[]
init|=
block|{
operator|(
name|byte
operator|)
literal|0xb2
block|,
operator|(
name|byte
operator|)
literal|0xb3
block|,
operator|(
name|byte
operator|)
literal|0xb4
block|,
operator|(
name|byte
operator|)
literal|0xb5
block|,
operator|(
name|byte
operator|)
literal|0xb7
block|,
operator|(
name|byte
operator|)
literal|0xb8
block|}
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|shapedLamAlef
operator|.
name|length
condition|;
name|i
operator|++
control|)
if|if
condition|(
name|b
operator|==
name|shapedLamAlef
index|[
name|i
index|]
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
specifier|protected
name|void
name|matchFinish
parameter_list|(
name|CharsetDetector
name|det
parameter_list|)
block|{
if|if
condition|(
name|prev_fInputBytes
operator|!=
literal|null
condition|)
name|det
operator|.
name|setText
argument_list|(
name|prev_fInputBytes
argument_list|)
expr_stmt|;
block|}
block|}
specifier|static
class|class
name|CharsetRecog_IBM420_ar_rtl
extends|extends
name|CharsetRecog_IBM420_ar
block|{
specifier|private
specifier|static
name|int
index|[]
name|ngrams
init|=
block|{
literal|0x4056B1
block|,
literal|0x4056BD
block|,
literal|0x405856
block|,
literal|0x409AB1
block|,
literal|0x40ABDC
block|,
literal|0x40B1B1
block|,
literal|0x40BBBD
block|,
literal|0x40CF56
block|,
literal|0x564056
block|,
literal|0x564640
block|,
literal|0x566340
block|,
literal|0x567540
block|,
literal|0x56B140
block|,
literal|0x56B149
block|,
literal|0x56B156
block|,
literal|0x56B158
block|,
literal|0x56B163
block|,
literal|0x56B167
block|,
literal|0x56B169
block|,
literal|0x56B173
block|,
literal|0x56B178
block|,
literal|0x56B19A
block|,
literal|0x56B1AD
block|,
literal|0x56B1BB
block|,
literal|0x56B1CF
block|,
literal|0x56B1DC
block|,
literal|0x56BB40
block|,
literal|0x56BD40
block|,
literal|0x56BD63
block|,
literal|0x584056
block|,
literal|0x624056
block|,
literal|0x6240AB
block|,
literal|0x6240B1
block|,
literal|0x6240BB
block|,
literal|0x6240CF
block|,
literal|0x634056
block|,
literal|0x734056
block|,
literal|0x736240
block|,
literal|0x754056
block|,
literal|0x756240
block|,
literal|0x784056
block|,
literal|0x9A4056
block|,
literal|0x9AB1DA
block|,
literal|0xABDC40
block|,
literal|0xB14056
block|,
literal|0xB16240
block|,
literal|0xB1DA40
block|,
literal|0xB1DC40
block|,
literal|0xBB4056
block|,
literal|0xBB5640
block|,
literal|0xBB6240
block|,
literal|0xBBBD40
block|,
literal|0xBD4056
block|,
literal|0xBF4056
block|,
literal|0xBF5640
block|,
literal|0xCF56B1
block|,
literal|0xCFBD40
block|,
literal|0xDA4056
block|,
literal|0xDC4056
block|,
literal|0xDC40BB
block|,
literal|0xDC40CF
block|,
literal|0xDC6240
block|,
literal|0xDC7540
block|,
literal|0xDCBD40
block|,         }
decl_stmt|;
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
literal|"IBM420_rtl"
return|;
block|}
specifier|public
name|int
name|match
parameter_list|(
name|CharsetDetector
name|det
parameter_list|)
block|{
name|matchInit
argument_list|(
name|det
argument_list|)
expr_stmt|;
name|int
name|result
init|=
name|match
argument_list|(
name|det
argument_list|,
name|ngrams
argument_list|,
name|byteMap
argument_list|,
operator|(
name|byte
operator|)
literal|0x40
argument_list|)
decl_stmt|;
name|matchFinish
argument_list|(
name|det
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
block|}
specifier|static
class|class
name|CharsetRecog_IBM420_ar_ltr
extends|extends
name|CharsetRecog_IBM420_ar
block|{
specifier|private
specifier|static
name|int
index|[]
name|ngrams
init|=
block|{
literal|0x404656
block|,
literal|0x4056BB
block|,
literal|0x4056BF
block|,
literal|0x406273
block|,
literal|0x406275
block|,
literal|0x4062B1
block|,
literal|0x4062BB
block|,
literal|0x4062DC
block|,
literal|0x406356
block|,
literal|0x407556
block|,
literal|0x4075DC
block|,
literal|0x40B156
block|,
literal|0x40BB56
block|,
literal|0x40BD56
block|,
literal|0x40BDBB
block|,
literal|0x40BDCF
block|,
literal|0x40BDDC
block|,
literal|0x40DAB1
block|,
literal|0x40DCAB
block|,
literal|0x40DCB1
block|,
literal|0x49B156
block|,
literal|0x564056
block|,
literal|0x564058
block|,
literal|0x564062
block|,
literal|0x564063
block|,
literal|0x564073
block|,
literal|0x564075
block|,
literal|0x564078
block|,
literal|0x56409A
block|,
literal|0x5640B1
block|,
literal|0x5640BB
block|,
literal|0x5640BD
block|,
literal|0x5640BF
block|,
literal|0x5640DA
block|,
literal|0x5640DC
block|,
literal|0x565840
block|,
literal|0x56B156
block|,
literal|0x56CF40
block|,
literal|0x58B156
block|,
literal|0x63B156
block|,
literal|0x63BD56
block|,
literal|0x67B156
block|,
literal|0x69B156
block|,
literal|0x73B156
block|,
literal|0x78B156
block|,
literal|0x9AB156
block|,
literal|0xAB4062
block|,
literal|0xADB156
block|,
literal|0xB14062
block|,
literal|0xB15640
block|,
literal|0xB156CF
block|,
literal|0xB19A40
block|,
literal|0xB1B140
block|,
literal|0xBB4062
block|,
literal|0xBB40DC
block|,
literal|0xBBB156
block|,
literal|0xBD5640
block|,
literal|0xBDBB40
block|,
literal|0xCF4062
block|,
literal|0xCF40DC
block|,
literal|0xCFB156
block|,
literal|0xDAB19A
block|,
literal|0xDCAB40
block|,
literal|0xDCB156
block|}
decl_stmt|;
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
literal|"IBM420_ltr"
return|;
block|}
specifier|public
name|int
name|match
parameter_list|(
name|CharsetDetector
name|det
parameter_list|)
block|{
name|matchInit
argument_list|(
name|det
argument_list|)
expr_stmt|;
name|int
name|result
init|=
name|match
argument_list|(
name|det
argument_list|,
name|ngrams
argument_list|,
name|byteMap
argument_list|,
operator|(
name|byte
operator|)
literal|0x40
argument_list|)
decl_stmt|;
name|matchFinish
argument_list|(
name|det
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
block|}
specifier|static
specifier|abstract
class|class
name|CharsetRecog_EBCDIC_500
extends|extends
name|CharsetRecog_sbcs
block|{
comment|// This maps EBCDIC 500 codepoints onto either space (not of interest), or a lower
comment|//  case ISO_8859_1 number/letter/accented-letter codepoint for ngram matching
comment|// Because we map to ISO_8859_1, we can re-use the ngrams from those detectors
specifier|protected
specifier|static
name|byte
index|[]
name|byteMap
init|=
block|{
comment|/* 0x00-0x07 */
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
comment|/* 0x08-0x0f */
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
comment|/* 0x10-0x17 */
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
comment|/* 0x18-0x1f */
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
comment|/* 0x20-0x27 */
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
comment|/* 0x28-0x2f */
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
comment|/* 0x30-0x37 */
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
comment|/* 0x38-0x3f */
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
comment|/* 0x40-0x47 */
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0xe2
block|,
operator|(
name|byte
operator|)
literal|0xe4
block|,
operator|(
name|byte
operator|)
literal|0xe0
block|,
operator|(
name|byte
operator|)
literal|0xe1
block|,
operator|(
name|byte
operator|)
literal|0xe3
block|,
operator|(
name|byte
operator|)
literal|0xe5
block|,
comment|/* 0x48-0x4f */
operator|(
name|byte
operator|)
literal|0xe7
block|,
operator|(
name|byte
operator|)
literal|0xf1
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
comment|/* 0x50-0x57 */
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0xe9
block|,
operator|(
name|byte
operator|)
literal|0xea
block|,
operator|(
name|byte
operator|)
literal|0xeb
block|,
operator|(
name|byte
operator|)
literal|0xe8
block|,
operator|(
name|byte
operator|)
literal|0xed
block|,
operator|(
name|byte
operator|)
literal|0xee
block|,
operator|(
name|byte
operator|)
literal|0xef
block|,
comment|/* 0x58-0x5f */
operator|(
name|byte
operator|)
literal|0xec
block|,
operator|(
name|byte
operator|)
literal|0xdf
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
comment|/* 0x60-0x67 */
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0xe2
block|,
operator|(
name|byte
operator|)
literal|0xe4
block|,
operator|(
name|byte
operator|)
literal|0xe0
block|,
operator|(
name|byte
operator|)
literal|0xe1
block|,
operator|(
name|byte
operator|)
literal|0xe3
block|,
operator|(
name|byte
operator|)
literal|0xe5
block|,
comment|/* 0x68-0x6f */
operator|(
name|byte
operator|)
literal|0xe7
block|,
operator|(
name|byte
operator|)
literal|0xf1
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
comment|/* 0x70-0x77 */
operator|(
name|byte
operator|)
literal|0xf8
block|,
operator|(
name|byte
operator|)
literal|0xe9
block|,
operator|(
name|byte
operator|)
literal|0xea
block|,
operator|(
name|byte
operator|)
literal|0xeb
block|,
operator|(
name|byte
operator|)
literal|0xe8
block|,
operator|(
name|byte
operator|)
literal|0xed
block|,
operator|(
name|byte
operator|)
literal|0xee
block|,
operator|(
name|byte
operator|)
literal|0xef
block|,
comment|/* 0x78-0x7f */
operator|(
name|byte
operator|)
literal|0xec
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
comment|/* 0x80-0x87 */
operator|(
name|byte
operator|)
literal|0xd8
block|,
operator|(
name|byte
operator|)
literal|'a'
block|,
operator|(
name|byte
operator|)
literal|'b'
block|,
operator|(
name|byte
operator|)
literal|'c'
block|,
operator|(
name|byte
operator|)
literal|'d'
block|,
operator|(
name|byte
operator|)
literal|'e'
block|,
operator|(
name|byte
operator|)
literal|'f'
block|,
operator|(
name|byte
operator|)
literal|'g'
block|,
comment|/* 0x88-0x8f */
operator|(
name|byte
operator|)
literal|'h'
block|,
operator|(
name|byte
operator|)
literal|'i'
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
comment|/* 0x90-0x97 */
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|'j'
block|,
operator|(
name|byte
operator|)
literal|'k'
block|,
operator|(
name|byte
operator|)
literal|'l'
block|,
operator|(
name|byte
operator|)
literal|'m'
block|,
operator|(
name|byte
operator|)
literal|'n'
block|,
operator|(
name|byte
operator|)
literal|'o'
block|,
operator|(
name|byte
operator|)
literal|'p'
block|,
comment|/* 0x98-0x9f */
operator|(
name|byte
operator|)
literal|'q'
block|,
operator|(
name|byte
operator|)
literal|'r'
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
comment|/* 0xa0-0xa7 */
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|'s'
block|,
operator|(
name|byte
operator|)
literal|'t'
block|,
operator|(
name|byte
operator|)
literal|'u'
block|,
operator|(
name|byte
operator|)
literal|'v'
block|,
operator|(
name|byte
operator|)
literal|'w'
block|,
operator|(
name|byte
operator|)
literal|'x'
block|,
comment|/* 0xa8-0xaf */
operator|(
name|byte
operator|)
literal|'y'
block|,
operator|(
name|byte
operator|)
literal|'z'
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
comment|/* 0xb0-0xb7 */
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
comment|/* 0xb8-0xbf */
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
comment|/* 0xc0-0xc7 */
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|'a'
block|,
operator|(
name|byte
operator|)
literal|'b'
block|,
operator|(
name|byte
operator|)
literal|'c'
block|,
operator|(
name|byte
operator|)
literal|'d'
block|,
operator|(
name|byte
operator|)
literal|'e'
block|,
operator|(
name|byte
operator|)
literal|'f'
block|,
operator|(
name|byte
operator|)
literal|'g'
block|,
comment|/* 0xc8-0xcf */
operator|(
name|byte
operator|)
literal|'h'
block|,
operator|(
name|byte
operator|)
literal|'i'
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0xf4
block|,
operator|(
name|byte
operator|)
literal|0xf6
block|,
operator|(
name|byte
operator|)
literal|0xf2
block|,
operator|(
name|byte
operator|)
literal|0xf3
block|,
operator|(
name|byte
operator|)
literal|0xf5
block|,
comment|/* 0xd0-0xd7 */
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|'j'
block|,
operator|(
name|byte
operator|)
literal|'k'
block|,
operator|(
name|byte
operator|)
literal|'l'
block|,
operator|(
name|byte
operator|)
literal|'m'
block|,
operator|(
name|byte
operator|)
literal|'n'
block|,
operator|(
name|byte
operator|)
literal|'o'
block|,
operator|(
name|byte
operator|)
literal|'p'
block|,
comment|/* 0xd8-0xdf */
operator|(
name|byte
operator|)
literal|'q'
block|,
operator|(
name|byte
operator|)
literal|'r'
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0xfb
block|,
operator|(
name|byte
operator|)
literal|0xfc
block|,
operator|(
name|byte
operator|)
literal|0xf9
block|,
operator|(
name|byte
operator|)
literal|0xfa
block|,
operator|(
name|byte
operator|)
literal|0xff
block|,
comment|/* 0xe0-0xe7 */
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|'s'
block|,
operator|(
name|byte
operator|)
literal|'t'
block|,
operator|(
name|byte
operator|)
literal|'u'
block|,
operator|(
name|byte
operator|)
literal|'v'
block|,
operator|(
name|byte
operator|)
literal|'w'
block|,
operator|(
name|byte
operator|)
literal|'x'
block|,
comment|/* 0xe8-0xef */
operator|(
name|byte
operator|)
literal|'y'
block|,
operator|(
name|byte
operator|)
literal|'z'
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0xf4
block|,
operator|(
name|byte
operator|)
literal|0xf6
block|,
operator|(
name|byte
operator|)
literal|0xf2
block|,
operator|(
name|byte
operator|)
literal|0xf3
block|,
operator|(
name|byte
operator|)
literal|0xf5
block|,
comment|/* 0xf0-0xf7 */
operator|(
name|byte
operator|)
literal|'0'
block|,
operator|(
name|byte
operator|)
literal|'1'
block|,
operator|(
name|byte
operator|)
literal|'2'
block|,
operator|(
name|byte
operator|)
literal|'3'
block|,
operator|(
name|byte
operator|)
literal|'4'
block|,
operator|(
name|byte
operator|)
literal|'5'
block|,
operator|(
name|byte
operator|)
literal|'6'
block|,
operator|(
name|byte
operator|)
literal|'7'
block|,
comment|/* 0xf8-0xff */
operator|(
name|byte
operator|)
literal|'8'
block|,
operator|(
name|byte
operator|)
literal|'9'
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,
operator|(
name|byte
operator|)
literal|0xfb
block|,
operator|(
name|byte
operator|)
literal|0xfc
block|,
operator|(
name|byte
operator|)
literal|0xf9
block|,
operator|(
name|byte
operator|)
literal|0xfa
block|,
operator|(
name|byte
operator|)
literal|0x20
block|,         }
decl_stmt|;
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
literal|"IBM500"
return|;
block|}
block|}
specifier|static
class|class
name|CharsetRecog_EBCDIC_500_en
extends|extends
name|CharsetRecog_EBCDIC_500
block|{
specifier|public
name|String
name|getLanguage
parameter_list|()
block|{
return|return
literal|"en"
return|;
block|}
specifier|public
name|int
name|match
parameter_list|(
name|CharsetDetector
name|det
parameter_list|)
block|{
return|return
name|match
argument_list|(
name|det
argument_list|,
name|CharsetRecog_8859_1_en
operator|.
name|ngrams
argument_list|,
name|byteMap
argument_list|)
return|;
block|}
block|}
specifier|static
class|class
name|CharsetRecog_EBCDIC_500_de
extends|extends
name|CharsetRecog_EBCDIC_500
block|{
specifier|public
name|String
name|getLanguage
parameter_list|()
block|{
return|return
literal|"de"
return|;
block|}
specifier|public
name|int
name|match
parameter_list|(
name|CharsetDetector
name|det
parameter_list|)
block|{
return|return
name|match
argument_list|(
name|det
argument_list|,
name|CharsetRecog_8859_1_de
operator|.
name|ngrams
argument_list|,
name|byteMap
argument_list|)
return|;
block|}
block|}
specifier|static
class|class
name|CharsetRecog_EBCDIC_500_fr
extends|extends
name|CharsetRecog_EBCDIC_500
block|{
specifier|public
name|String
name|getLanguage
parameter_list|()
block|{
return|return
literal|"fr"
return|;
block|}
specifier|public
name|int
name|match
parameter_list|(
name|CharsetDetector
name|det
parameter_list|)
block|{
return|return
name|match
argument_list|(
name|det
argument_list|,
name|CharsetRecog_8859_1_fr
operator|.
name|ngrams
argument_list|,
name|byteMap
argument_list|)
return|;
block|}
block|}
specifier|static
class|class
name|CharsetRecog_EBCDIC_500_es
extends|extends
name|CharsetRecog_EBCDIC_500
block|{
specifier|public
name|String
name|getLanguage
parameter_list|()
block|{
return|return
literal|"es"
return|;
block|}
specifier|public
name|int
name|match
parameter_list|(
name|CharsetDetector
name|det
parameter_list|)
block|{
return|return
name|match
argument_list|(
name|det
argument_list|,
name|CharsetRecog_8859_1_es
operator|.
name|ngrams
argument_list|,
name|byteMap
argument_list|)
return|;
block|}
block|}
specifier|static
class|class
name|CharsetRecog_EBCDIC_500_it
extends|extends
name|CharsetRecog_EBCDIC_500
block|{
specifier|public
name|String
name|getLanguage
parameter_list|()
block|{
return|return
literal|"it"
return|;
block|}
specifier|public
name|int
name|match
parameter_list|(
name|CharsetDetector
name|det
parameter_list|)
block|{
return|return
name|match
argument_list|(
name|det
argument_list|,
name|CharsetRecog_8859_1_it
operator|.
name|ngrams
argument_list|,
name|byteMap
argument_list|)
return|;
block|}
block|}
specifier|static
class|class
name|CharsetRecog_EBCDIC_500_nl
extends|extends
name|CharsetRecog_EBCDIC_500
block|{
specifier|public
name|String
name|getLanguage
parameter_list|()
block|{
return|return
literal|"nl"
return|;
block|}
specifier|public
name|int
name|match
parameter_list|(
name|CharsetDetector
name|det
parameter_list|)
block|{
return|return
name|match
argument_list|(
name|det
argument_list|,
name|CharsetRecog_8859_1_nl
operator|.
name|ngrams
argument_list|,
name|byteMap
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

