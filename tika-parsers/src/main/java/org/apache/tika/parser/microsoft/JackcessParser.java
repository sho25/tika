begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|microsoft
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|com
operator|.
name|healthmarketscience
operator|.
name|jackcess
operator|.
name|Database
import|;
end_import

begin_import
import|import
name|com
operator|.
name|healthmarketscience
operator|.
name|jackcess
operator|.
name|DatabaseBuilder
import|;
end_import

begin_import
import|import
name|com
operator|.
name|healthmarketscience
operator|.
name|jackcess
operator|.
name|util
operator|.
name|LinkResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|exception
operator|.
name|TikaException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|io
operator|.
name|TikaInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|metadata
operator|.
name|Metadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|metadata
operator|.
name|Property
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|mime
operator|.
name|MediaType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|AbstractParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|ParseContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|sax
operator|.
name|XHTMLContentHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|ContentHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_comment
comment|/**  * Parser that handles Microsoft Access files via  *<a href="http://jackcess.sourceforge.net/>Jackcess</a>  *<p>  * Many, many thanks to LexisNexisÂ®/Health Market Science (HMS), Brian O'Neill,  * and James Ahlborn for relicensing Jackcess to Apache v2.0!  */
end_comment

begin_class
specifier|public
class|class
name|JackcessParser
extends|extends
name|AbstractParser
block|{
specifier|public
specifier|static
specifier|final
name|String
name|SUMMARY_PROPERTY_PREFIX
init|=
literal|"MDB_SUMMARY_PROP"
decl_stmt|;
specifier|public
specifier|static
name|String
name|MDB_PROPERTY_PREFIX
init|=
literal|"MDB_PROP"
operator|+
name|Metadata
operator|.
name|NAMESPACE_PREFIX_DELIMITER
decl_stmt|;
specifier|public
specifier|static
name|String
name|USER_DEFINED_PROPERTY_PREFIX
init|=
literal|"MDB_USER_PROP"
operator|+
name|Metadata
operator|.
name|NAMESPACE_PREFIX_DELIMITER
decl_stmt|;
specifier|public
specifier|static
name|Property
name|MDB_PW
init|=
name|Property
operator|.
name|externalText
argument_list|(
literal|"Password"
argument_list|)
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|LinkResolver
name|IGNORE_LINK_RESOLVER
init|=
operator|new
name|IgnoreLinkResolver
argument_list|()
decl_stmt|;
comment|//TODO: figure out how to get this info
comment|// public static Property LINKED_DATABASES = Property.externalTextBag("LinkedDatabases");
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
operator|-
literal|752276948656079347L
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|MediaType
name|MEDIA_TYPE
init|=
name|MediaType
operator|.
name|application
argument_list|(
literal|"x-msaccess"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Set
argument_list|<
name|MediaType
argument_list|>
name|SUPPORTED_TYPES
init|=
name|Collections
operator|.
name|singleton
argument_list|(
name|MEDIA_TYPE
argument_list|)
decl_stmt|;
specifier|private
name|Locale
name|locale
init|=
name|Locale
operator|.
name|ROOT
decl_stmt|;
annotation|@
name|Override
specifier|public
name|Set
argument_list|<
name|MediaType
argument_list|>
name|getSupportedTypes
parameter_list|(
name|ParseContext
name|context
parameter_list|)
block|{
return|return
name|SUPPORTED_TYPES
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|parse
parameter_list|(
name|InputStream
name|stream
parameter_list|,
name|ContentHandler
name|handler
parameter_list|,
name|Metadata
name|metadata
parameter_list|,
name|ParseContext
name|context
parameter_list|)
throws|throws
name|IOException
throws|,
name|SAXException
throws|,
name|TikaException
block|{
name|TikaInputStream
name|tis
init|=
name|TikaInputStream
operator|.
name|get
argument_list|(
name|stream
argument_list|)
decl_stmt|;
name|Database
name|db
init|=
literal|null
decl_stmt|;
name|XHTMLContentHandler
name|xhtml
init|=
operator|new
name|XHTMLContentHandler
argument_list|(
name|handler
argument_list|,
name|metadata
argument_list|)
decl_stmt|;
name|xhtml
operator|.
name|startDocument
argument_list|()
expr_stmt|;
try|try
block|{
name|db
operator|=
operator|new
name|DatabaseBuilder
argument_list|()
operator|.
name|setReadOnly
argument_list|(
literal|true
argument_list|)
operator|.
name|open
argument_list|(
name|tis
operator|.
name|getFile
argument_list|()
argument_list|)
expr_stmt|;
name|db
operator|.
name|setLinkResolver
argument_list|(
name|IGNORE_LINK_RESOLVER
argument_list|)
expr_stmt|;
comment|//just in case
name|JackcessExtractor
name|ex
init|=
operator|new
name|JackcessExtractor
argument_list|(
name|context
argument_list|,
name|locale
argument_list|)
decl_stmt|;
name|ex
operator|.
name|parse
argument_list|(
name|db
argument_list|,
name|xhtml
argument_list|,
name|metadata
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|db
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|db
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|//swallow = silent close
block|}
block|}
block|}
name|xhtml
operator|.
name|endDocument
argument_list|()
expr_stmt|;
block|}
specifier|private
specifier|static
specifier|final
class|class
name|IgnoreLinkResolver
implements|implements
name|LinkResolver
block|{
comment|//If links are resolved, Jackcess might try to open and process
comment|//any file on the current system that is specified as a linked db.
comment|//This could be a nasty security issue.
annotation|@
name|Override
specifier|public
name|Database
name|resolveLinkedDatabase
parameter_list|(
name|Database
name|database
parameter_list|,
name|String
name|s
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"DO NOT ALLOW RESOLVING OF LINKS!!!"
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

