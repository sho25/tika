begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|microsoft
operator|.
name|onenote
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|StringUtils
import|;
end_import

begin_class
class|class
name|FileNodeListHeader
block|{
specifier|public
specifier|static
specifier|final
name|long
name|UNIT_MAGIC_CONSTANT
init|=
literal|0xA4567AB1F5F7F4C4L
decl_stmt|;
name|long
name|position
decl_stmt|;
name|long
name|fileNodeListId
decl_stmt|;
name|long
name|nFragmentSequence
decl_stmt|;
comment|/**      * The FileNodeListHeader structure specifies the beginning of a FileNodeListFragment structure.      *      * @param position          Position of the file where this header starts.      * @param uintMagic         An unsigned integer; MUST be "0xA4567AB1F5F7F4C4"      * @param fileNodeListId    An unsigned integer that specifies the identity of the file node list      *                          this fragment belongs to. MUST be equal to or greater than 0x00000010. The pair of      *                          FileNodeListID and nFragmentSequence fields MUST be unique relative to other      *                          FileNodeListFragment structures in the file.      * @param nFragmentSequence An unsigned integer that specifies the index of the fragment in the      *                          file node list containing the fragment. The nFragmentSequence field of the first fragment in a      *                          given file node list MUST be 0 and the nFragmentSequence fields of all subsequent fragments in      *                          this list MUST be sequential.      */
specifier|public
name|FileNodeListHeader
parameter_list|(
name|long
name|position
parameter_list|,
name|long
name|uintMagic
parameter_list|,
name|long
name|fileNodeListId
parameter_list|,
name|long
name|nFragmentSequence
parameter_list|)
block|{
if|if
condition|(
name|uintMagic
operator|!=
name|UNIT_MAGIC_CONSTANT
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"unitMagic must always be: 0x"
operator|+
name|Long
operator|.
name|toHexString
argument_list|(
name|UNIT_MAGIC_CONSTANT
argument_list|)
argument_list|)
throw|;
block|}
name|this
operator|.
name|position
operator|=
name|position
expr_stmt|;
name|this
operator|.
name|fileNodeListId
operator|=
name|fileNodeListId
expr_stmt|;
if|if
condition|(
name|fileNodeListId
operator|<
literal|0x00000010
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"FileNodeListHeader.fileNodeListId MUST be equal to or greater than 0x00000010"
argument_list|)
throw|;
block|}
name|this
operator|.
name|nFragmentSequence
operator|=
name|nFragmentSequence
expr_stmt|;
block|}
specifier|public
name|long
name|getFileNodeListId
parameter_list|()
block|{
return|return
name|fileNodeListId
return|;
block|}
specifier|public
name|FileNodeListHeader
name|setFileNodeListId
parameter_list|(
name|long
name|fileNodeListId
parameter_list|)
block|{
name|this
operator|.
name|fileNodeListId
operator|=
name|fileNodeListId
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|long
name|getnFragmentSequence
parameter_list|()
block|{
return|return
name|nFragmentSequence
return|;
block|}
specifier|public
name|FileNodeListHeader
name|setnFragmentSequence
parameter_list|(
name|long
name|nFragmentSequence
parameter_list|)
block|{
name|this
operator|.
name|nFragmentSequence
operator|=
name|nFragmentSequence
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|long
name|getPosition
parameter_list|()
block|{
return|return
name|position
return|;
block|}
specifier|public
name|FileNodeListHeader
name|setPosition
parameter_list|(
name|long
name|position
parameter_list|)
block|{
name|this
operator|.
name|position
operator|=
name|position
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|String
name|getPositionHex
parameter_list|()
block|{
return|return
literal|"0x"
operator|+
name|StringUtils
operator|.
name|leftPad
argument_list|(
name|Long
operator|.
name|toHexString
argument_list|(
name|position
argument_list|)
argument_list|,
literal|8
argument_list|,
literal|"0"
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"FileNodeListHeader{"
operator|+
literal|"position="
operator|+
literal|"0x"
operator|+
name|StringUtils
operator|.
name|leftPad
argument_list|(
name|Long
operator|.
name|toHexString
argument_list|(
name|position
argument_list|)
argument_list|,
literal|8
argument_list|,
literal|"0"
argument_list|)
operator|+
literal|", fileNodeListId="
operator|+
name|fileNodeListId
operator|+
literal|", nFragmentSequence="
operator|+
name|nFragmentSequence
operator|+
literal|'}'
return|;
block|}
block|}
end_class

end_unit

