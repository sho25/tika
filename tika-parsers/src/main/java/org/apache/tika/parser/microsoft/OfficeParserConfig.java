begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|microsoft
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_class
specifier|public
class|class
name|OfficeParserConfig
implements|implements
name|Serializable
block|{
specifier|private
name|boolean
name|extractMacros
init|=
literal|false
decl_stmt|;
specifier|private
name|boolean
name|includeDeletedContent
init|=
literal|false
decl_stmt|;
specifier|private
name|boolean
name|includeMoveFromContent
init|=
literal|false
decl_stmt|;
specifier|private
name|boolean
name|includeShapeBasedContent
init|=
literal|true
decl_stmt|;
specifier|private
name|boolean
name|useSAXDocxExtractor
init|=
literal|false
decl_stmt|;
specifier|private
name|boolean
name|useSAXPptxExtractor
init|=
literal|false
decl_stmt|;
comment|/**      * Sets whether or not MSOffice parsers should extract macros.      * As of Tika 1.15, the default is<code>false</code>.      *      * @param extractMacros      */
specifier|public
name|void
name|setExtractMacros
parameter_list|(
name|boolean
name|extractMacros
parameter_list|)
block|{
name|this
operator|.
name|extractMacros
operator|=
name|extractMacros
expr_stmt|;
block|}
comment|/**      *      * @return whether or not to extract macros      */
specifier|public
name|boolean
name|getExtractMacros
parameter_list|()
block|{
return|return
name|extractMacros
return|;
block|}
comment|/**      * Sets whether or not the parser should include deleted content.      *<p/>      *<b>This has only been implemented in the streaming docx parser      * ({@link org.apache.tika.parser.microsoft.ooxml.SXWPFWordExtractorDecorator} so far!!!</b>      * @param includeDeletedContent      */
specifier|public
name|void
name|setIncludeDeletedContent
parameter_list|(
name|boolean
name|includeDeletedContent
parameter_list|)
block|{
name|this
operator|.
name|includeDeletedContent
operator|=
name|includeDeletedContent
expr_stmt|;
block|}
specifier|public
name|boolean
name|getIncludeDeletedContent
parameter_list|()
block|{
return|return
name|includeDeletedContent
return|;
block|}
comment|/**      * With track changes on, when a section is moved, the content      * is stored in both the "moveFrom" section and in the "moveTo" section.      *<p/>      * If you'd like to include the section both in its original location (moveFrom)      * and in its new location (moveTo), set this to<code>true</code>      *<p/>      * Default:<code>false</code>      *<p/>      *<b>This has only been implemented in the streaming docx parser      * ({@link org.apache.tika.parser.microsoft.ooxml.SXWPFWordExtractorDecorator} so far!!!</b>      * @param includeMoveFromContent      */
specifier|public
name|void
name|setIncludeMoveFromContent
parameter_list|(
name|boolean
name|includeMoveFromContent
parameter_list|)
block|{
name|this
operator|.
name|includeMoveFromContent
operator|=
name|includeMoveFromContent
expr_stmt|;
block|}
specifier|public
name|boolean
name|getIncludeMoveFromContent
parameter_list|()
block|{
return|return
name|includeMoveFromContent
return|;
block|}
comment|/**      * In Excel and Word, there can be text stored within drawing shapes.      * (In PowerPoint everything is in a Shape)      *<p/>      * If you'd like to skip processing these to look for text, set this to      *<code>false</code>      *<p/>      * Default:<code>true</code>      * @param includeShapeBasedContent      */
specifier|public
name|void
name|setIncludeShapeBasedContent
parameter_list|(
name|boolean
name|includeShapeBasedContent
parameter_list|)
block|{
name|this
operator|.
name|includeShapeBasedContent
operator|=
name|includeShapeBasedContent
expr_stmt|;
block|}
specifier|public
name|boolean
name|getIncludeShapeBasedContent
parameter_list|()
block|{
return|return
name|includeShapeBasedContent
return|;
block|}
specifier|public
name|boolean
name|getUseSAXDocxExtractor
parameter_list|()
block|{
return|return
name|useSAXDocxExtractor
return|;
block|}
comment|/**      * Use the experimental SAX-based streaming DOCX parser?      * If set to<code>false</code>, the classic parser will be used; if<code>true</code>,      * the new experimental parser will be used.      *<p/>      * Default:<code>false</code> (classic DOM parser)      * @param useSAXDocxExtractor      */
specifier|public
name|void
name|setUseSAXDocxExtractor
parameter_list|(
name|boolean
name|useSAXDocxExtractor
parameter_list|)
block|{
name|this
operator|.
name|useSAXDocxExtractor
operator|=
name|useSAXDocxExtractor
expr_stmt|;
block|}
comment|/**      * Use the experimental SAX-based streaming DOCX parser?      * If set to<code>false</code>, the classic parser will be used; if<code>true</code>,      * the new experimental parser will be used.      *<p/>      * Default:<code>false</code> (classic DOM parser)      * @param useSAXPptxExtractor      */
specifier|public
name|void
name|setUseSAXPptxExtractor
parameter_list|(
name|boolean
name|useSAXPptxExtractor
parameter_list|)
block|{
name|this
operator|.
name|useSAXPptxExtractor
operator|=
name|useSAXPptxExtractor
expr_stmt|;
block|}
specifier|public
name|boolean
name|getUseSAXPptxExtractor
parameter_list|()
block|{
return|return
name|useSAXPptxExtractor
return|;
block|}
block|}
end_class

end_unit

