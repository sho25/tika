begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|microsoft
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_class
specifier|public
class|class
name|OfficeParserConfig
implements|implements
name|Serializable
block|{
specifier|private
name|boolean
name|extractMacros
init|=
literal|false
decl_stmt|;
specifier|private
name|boolean
name|includeDeletedContent
init|=
literal|false
decl_stmt|;
specifier|private
name|boolean
name|includeMoveFromContent
init|=
literal|false
decl_stmt|;
specifier|private
name|boolean
name|includeShapeBasedContent
init|=
literal|true
decl_stmt|;
specifier|private
name|boolean
name|includeHeadersAndFooters
init|=
literal|true
decl_stmt|;
specifier|private
name|boolean
name|includeMissingRows
init|=
literal|false
decl_stmt|;
specifier|private
name|boolean
name|includeSlideNotes
init|=
literal|true
decl_stmt|;
specifier|private
name|boolean
name|includeSlideMasterContent
init|=
literal|true
decl_stmt|;
specifier|private
name|boolean
name|concatenatePhoneticRuns
init|=
literal|true
decl_stmt|;
specifier|private
name|boolean
name|useSAXDocxExtractor
init|=
literal|false
decl_stmt|;
specifier|private
name|boolean
name|useSAXPptxExtractor
init|=
literal|false
decl_stmt|;
specifier|private
name|boolean
name|extractAllAlternativesFromMSG
decl_stmt|;
comment|/**      * Sets whether or not MSOffice parsers should extract macros.      * As of Tika 1.15, the default is<code>false</code>.      *      * @param extractMacros      */
specifier|public
name|void
name|setExtractMacros
parameter_list|(
name|boolean
name|extractMacros
parameter_list|)
block|{
name|this
operator|.
name|extractMacros
operator|=
name|extractMacros
expr_stmt|;
block|}
comment|/**      *      * @return whether or not to extract macros      */
specifier|public
name|boolean
name|getExtractMacros
parameter_list|()
block|{
return|return
name|extractMacros
return|;
block|}
comment|/**      * Sets whether or not the parser should include deleted content.      *<p/>      *<b>This has only been implemented in the streaming docx parser      * ({@link org.apache.tika.parser.microsoft.ooxml.SXWPFWordExtractorDecorator} so far!!!</b>      * @param includeDeletedContent      */
specifier|public
name|void
name|setIncludeDeletedContent
parameter_list|(
name|boolean
name|includeDeletedContent
parameter_list|)
block|{
name|this
operator|.
name|includeDeletedContent
operator|=
name|includeDeletedContent
expr_stmt|;
block|}
specifier|public
name|boolean
name|getIncludeDeletedContent
parameter_list|()
block|{
return|return
name|includeDeletedContent
return|;
block|}
comment|/**      * With track changes on, when a section is moved, the content      * is stored in both the "moveFrom" section and in the "moveTo" section.      *<p/>      * If you'd like to include the section both in its original location (moveFrom)      * and in its new location (moveTo), set this to<code>true</code>      *<p/>      * Default:<code>false</code>      *<p/>      *<b>This has only been implemented in the streaming docx parser      * ({@link org.apache.tika.parser.microsoft.ooxml.SXWPFWordExtractorDecorator} so far!!!</b>      * @param includeMoveFromContent      */
specifier|public
name|void
name|setIncludeMoveFromContent
parameter_list|(
name|boolean
name|includeMoveFromContent
parameter_list|)
block|{
name|this
operator|.
name|includeMoveFromContent
operator|=
name|includeMoveFromContent
expr_stmt|;
block|}
specifier|public
name|boolean
name|getIncludeMoveFromContent
parameter_list|()
block|{
return|return
name|includeMoveFromContent
return|;
block|}
comment|/**      * In Excel and Word, there can be text stored within drawing shapes.      * (In PowerPoint everything is in a Shape)      *<p/>      * If you'd like to skip processing these to look for text, set this to      *<code>false</code>      *<p/>      * Default:<code>true</code>      * @param includeShapeBasedContent      */
specifier|public
name|void
name|setIncludeShapeBasedContent
parameter_list|(
name|boolean
name|includeShapeBasedContent
parameter_list|)
block|{
name|this
operator|.
name|includeShapeBasedContent
operator|=
name|includeShapeBasedContent
expr_stmt|;
block|}
specifier|public
name|boolean
name|getIncludeShapeBasedContent
parameter_list|()
block|{
return|return
name|includeShapeBasedContent
return|;
block|}
comment|/**      * Whether or not to include headers and footers.      *<p/>      * This only operates on headers and footers in Word and Excel,      * not master slide content in Powerpoint.      *<p/>      * Default:<code>true</code>      * @param includeHeadersAndFooters      */
specifier|public
name|void
name|setIncludeHeadersAndFooters
parameter_list|(
name|boolean
name|includeHeadersAndFooters
parameter_list|)
block|{
name|this
operator|.
name|includeHeadersAndFooters
operator|=
name|includeHeadersAndFooters
expr_stmt|;
block|}
specifier|public
name|boolean
name|getIncludeHeadersAndFooters
parameter_list|()
block|{
return|return
name|includeHeadersAndFooters
return|;
block|}
specifier|public
name|boolean
name|getUseSAXDocxExtractor
parameter_list|()
block|{
return|return
name|useSAXDocxExtractor
return|;
block|}
comment|/**      * Use the experimental SAX-based streaming DOCX parser?      * If set to<code>false</code>, the classic parser will be used; if<code>true</code>,      * the new experimental parser will be used.      *<p/>      * Default:<code>false</code> (classic DOM parser)      * @param useSAXDocxExtractor      */
specifier|public
name|void
name|setUseSAXDocxExtractor
parameter_list|(
name|boolean
name|useSAXDocxExtractor
parameter_list|)
block|{
name|this
operator|.
name|useSAXDocxExtractor
operator|=
name|useSAXDocxExtractor
expr_stmt|;
block|}
comment|/**      * Use the experimental SAX-based streaming DOCX parser?      * If set to<code>false</code>, the classic parser will be used; if<code>true</code>,      * the new experimental parser will be used.      *<p/>      * Default:<code>false</code> (classic DOM parser)      * @param useSAXPptxExtractor      */
specifier|public
name|void
name|setUseSAXPptxExtractor
parameter_list|(
name|boolean
name|useSAXPptxExtractor
parameter_list|)
block|{
name|this
operator|.
name|useSAXPptxExtractor
operator|=
name|useSAXPptxExtractor
expr_stmt|;
block|}
specifier|public
name|boolean
name|getUseSAXPptxExtractor
parameter_list|()
block|{
return|return
name|useSAXPptxExtractor
return|;
block|}
specifier|public
name|boolean
name|getConcatenatePhoneticRuns
parameter_list|()
block|{
return|return
name|concatenatePhoneticRuns
return|;
block|}
comment|/**      * Microsoft Excel files can sometimes contain phonetic (furigana) strings.      * See<a href="https://support.office.com/en-us/article/PHONETIC-function-9a329dac-0c0f-42f8-9a55-639086988554">PHONETIC</a>.      * This sets whether or not the parser will concatenate the phonetic runs to the original text.      *<p>      * This is currently only supported by the xls and xlsx parsers (not the xlsb parser),      * and the default is<code>true</code>.      *</p>      *      * @param concatenatePhoneticRuns      */
specifier|public
name|void
name|setConcatenatePhoneticRuns
parameter_list|(
name|boolean
name|concatenatePhoneticRuns
parameter_list|)
block|{
name|this
operator|.
name|concatenatePhoneticRuns
operator|=
name|concatenatePhoneticRuns
expr_stmt|;
block|}
comment|/**      * Some .msg files can contain body content in html, rtf and/or text.      * The default behavior is to pick the first non-null value and include only that.      * If you'd like to extract all non-null body content, which is likely duplicative,      * set this value to true.      *      * @param extractAllAlternativesFromMSG whether or not to extract all alternative parts      * @since 1.17      */
specifier|public
name|void
name|setExtractAllAlternativesFromMSG
parameter_list|(
name|boolean
name|extractAllAlternativesFromMSG
parameter_list|)
block|{
name|this
operator|.
name|extractAllAlternativesFromMSG
operator|=
name|extractAllAlternativesFromMSG
expr_stmt|;
block|}
specifier|public
name|boolean
name|getExtractAllAlternativesFromMSG
parameter_list|()
block|{
return|return
name|extractAllAlternativesFromMSG
return|;
block|}
comment|/**      * For table-like formats, and tables within other formats, should      *  missing rows in sparse tables be output where detected?      * The default is to only output rows defined within the file, which      *  avoid lots of blank lines, but means layout isn't preserved.      */
specifier|public
name|void
name|setIncludeMissingRows
parameter_list|(
name|boolean
name|includeMissingRows
parameter_list|)
block|{
name|this
operator|.
name|includeMissingRows
operator|=
name|includeMissingRows
expr_stmt|;
block|}
specifier|public
name|boolean
name|getIncludeMissingRows
parameter_list|()
block|{
return|return
name|includeMissingRows
return|;
block|}
specifier|public
name|boolean
name|getIncludeSlideNotes
parameter_list|()
block|{
return|return
name|includeSlideNotes
return|;
block|}
comment|/**      * Whether or not to process slide notes content.  If set      * to<code>false</code>, the parser will skip the text content      * and all embedded objects from the slide notes in ppt and ppt[xm].      * The default is<code>true</code>.      *      * @param includeSlideNotes whether or not to process slide notes      * @since 1.19.1      */
specifier|public
name|void
name|setIncludeSlideNotes
parameter_list|(
name|boolean
name|includeSlideNotes
parameter_list|)
block|{
name|this
operator|.
name|includeSlideNotes
operator|=
name|includeSlideNotes
expr_stmt|;
block|}
comment|/**      * @since 1.19.1      * @return whether or not to process content in slide masters      */
specifier|public
name|boolean
name|getIncludeSlideMasterContent
parameter_list|()
block|{
return|return
name|includeSlideMasterContent
return|;
block|}
comment|/**      * Whether or not to include contents from any of the three      * types of masters -- slide, notes, handout -- in a .ppt or ppt[xm] file.      * If set to<code>false</code>, the parser will not extract      * text or embedded objects from any of the masters.      *      * @since 1.19.1      * @param includeSlideMasterContent      */
specifier|public
name|void
name|setIncludeSlideMasterContent
parameter_list|(
name|boolean
name|includeSlideMasterContent
parameter_list|)
block|{
name|this
operator|.
name|includeSlideMasterContent
operator|=
name|includeSlideMasterContent
expr_stmt|;
block|}
block|}
end_class

end_unit

