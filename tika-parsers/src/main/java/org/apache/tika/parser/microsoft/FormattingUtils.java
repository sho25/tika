begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|microsoft
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|wp
operator|.
name|usermodel
operator|.
name|CharacterRun
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|xwpf
operator|.
name|usermodel
operator|.
name|UnderlinePatterns
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|xwpf
operator|.
name|usermodel
operator|.
name|XWPFRun
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|sax
operator|.
name|XHTMLContentHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Deque
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_class
specifier|public
class|class
name|FormattingUtils
block|{
specifier|private
name|FormattingUtils
parameter_list|()
block|{     }
comment|/**      * Closes all tags until {@code currentState} contains only tags from {@code desired} set,      * then open all required tags to reach desired state.      *      * @param xhtml        handler      * @param desired      desired formatting state      * @param currentState current formatting state (stack of open formatting tags)      * @throws SAXException pass underlying handler exception      */
specifier|public
specifier|static
name|void
name|ensureFormattingState
parameter_list|(
name|XHTMLContentHandler
name|xhtml
parameter_list|,
name|EnumSet
argument_list|<
name|Tag
argument_list|>
name|desired
parameter_list|,
name|Deque
argument_list|<
name|Tag
argument_list|>
name|currentState
parameter_list|)
throws|throws
name|SAXException
block|{
name|EnumSet
argument_list|<
name|FormattingUtils
operator|.
name|Tag
argument_list|>
name|undesired
init|=
name|EnumSet
operator|.
name|complementOf
argument_list|(
name|desired
argument_list|)
decl_stmt|;
while|while
condition|(
operator|!
name|currentState
operator|.
name|isEmpty
argument_list|()
operator|&&
name|currentState
operator|.
name|stream
argument_list|()
operator|.
name|anyMatch
argument_list|(
name|undesired
operator|::
name|contains
argument_list|)
condition|)
block|{
name|xhtml
operator|.
name|endElement
argument_list|(
name|currentState
operator|.
name|pop
argument_list|()
operator|.
name|tagName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|desired
operator|.
name|removeAll
argument_list|(
name|currentState
argument_list|)
expr_stmt|;
for|for
control|(
name|FormattingUtils
operator|.
name|Tag
name|tag
range|:
name|desired
control|)
block|{
name|currentState
operator|.
name|push
argument_list|(
name|tag
argument_list|)
expr_stmt|;
name|xhtml
operator|.
name|startElement
argument_list|(
name|tag
operator|.
name|tagName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Closes all formatting tags.      *      * @param xhtml           handler      * @param formattingState current formatting state (stack of open formatting tags)      * @throws SAXException pass underlying handler exception      */
specifier|public
specifier|static
name|void
name|closeStyleTags
parameter_list|(
name|XHTMLContentHandler
name|xhtml
parameter_list|,
name|Deque
argument_list|<
name|Tag
argument_list|>
name|formattingState
parameter_list|)
throws|throws
name|SAXException
block|{
name|ensureFormattingState
argument_list|(
name|xhtml
argument_list|,
name|EnumSet
operator|.
name|noneOf
argument_list|(
name|Tag
operator|.
name|class
argument_list|)
argument_list|,
name|formattingState
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|EnumSet
argument_list|<
name|Tag
argument_list|>
name|toTags
parameter_list|(
name|CharacterRun
name|run
parameter_list|)
block|{
name|EnumSet
argument_list|<
name|Tag
argument_list|>
name|tags
init|=
name|EnumSet
operator|.
name|noneOf
argument_list|(
name|Tag
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|run
operator|.
name|isBold
argument_list|()
condition|)
block|{
name|tags
operator|.
name|add
argument_list|(
name|Tag
operator|.
name|B
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|run
operator|.
name|isItalic
argument_list|()
condition|)
block|{
name|tags
operator|.
name|add
argument_list|(
name|Tag
operator|.
name|I
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|run
operator|.
name|isStrikeThrough
argument_list|()
condition|)
block|{
name|tags
operator|.
name|add
argument_list|(
name|Tag
operator|.
name|S
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|run
operator|instanceof
name|XWPFRun
condition|)
block|{
name|XWPFRun
name|xwpfRun
init|=
operator|(
name|XWPFRun
operator|)
name|run
decl_stmt|;
if|if
condition|(
name|xwpfRun
operator|.
name|getUnderline
argument_list|()
operator|!=
name|UnderlinePatterns
operator|.
name|NONE
condition|)
block|{
name|tags
operator|.
name|add
argument_list|(
name|Tag
operator|.
name|U
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|run
operator|instanceof
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|hwpf
operator|.
name|usermodel
operator|.
name|CharacterRun
condition|)
block|{
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|hwpf
operator|.
name|usermodel
operator|.
name|CharacterRun
name|hwpfRun
init|=
operator|(
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|hwpf
operator|.
name|usermodel
operator|.
name|CharacterRun
operator|)
name|run
decl_stmt|;
if|if
condition|(
name|hwpfRun
operator|.
name|getUnderlineCode
argument_list|()
operator|!=
literal|0
condition|)
block|{
name|tags
operator|.
name|add
argument_list|(
name|Tag
operator|.
name|U
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|tags
return|;
block|}
specifier|public
enum|enum
name|Tag
block|{
comment|// DON'T reorder elements to avoid breaking tests: EnumSet is iterated in natural order
comment|// as enum variants are declared
name|B
block|,
name|I
block|,
name|S
block|,
name|U
block|;
specifier|public
name|String
name|tagName
parameter_list|()
block|{
return|return
name|name
argument_list|()
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

