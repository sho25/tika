begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|dbf
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|dbf
operator|.
name|DBFColumnHeader
operator|.
name|ColType
operator|.
name|AT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|dbf
operator|.
name|DBFColumnHeader
operator|.
name|ColType
operator|.
name|PLUS
import|;
end_import

begin_class
class|class
name|DBFColumnHeader
block|{
comment|//from: http://www.dbf2002.com/dbf-file-format.html
enum|enum
name|ColType
block|{
name|C
block|,
comment|//character
name|Y
block|,
comment|//currency
name|D
block|,
comment|//date
name|T
block|,
comment|//datetime
name|B
block|,
comment|//double
name|I
block|,
comment|//integer,
name|G
block|,
comment|//general
name|P
block|,
comment|//picture
name|F
block|,
comment|//floating point binary numeric
name|L
block|,
comment|//logical
name|M
block|,
comment|//memo
name|N
block|,
comment|//binary coded decimal numeric
name|PLUS
block|,
comment|//autoincrement
name|AT
block|,
comment|//timestamp dbase level 7
name|O
block|,
comment|//double
block|}
specifier|private
specifier|final
specifier|static
name|Map
argument_list|<
name|Integer
argument_list|,
name|ColType
argument_list|>
name|COL_TYPE_MAP
init|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
decl_stmt|;
static|static
block|{
for|for
control|(
name|ColType
name|type
range|:
name|ColType
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|type
operator|.
name|equals
argument_list|(
name|PLUS
argument_list|)
condition|)
block|{
name|COL_TYPE_MAP
operator|.
name|put
argument_list|(
operator|(
name|int
operator|)
literal|'+'
argument_list|,
name|PLUS
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|type
operator|.
name|equals
argument_list|(
name|AT
argument_list|)
condition|)
block|{
name|COL_TYPE_MAP
operator|.
name|put
argument_list|(
operator|(
name|int
operator|)
literal|'@'
argument_list|,
name|AT
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|COL_TYPE_MAP
operator|.
name|put
argument_list|(
operator|(
name|int
operator|)
name|type
operator|.
name|toString
argument_list|()
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
argument_list|,
name|type
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|String
name|name
decl_stmt|;
specifier|private
name|ColType
name|colType
init|=
literal|null
decl_stmt|;
name|int
name|fieldLength
init|=
operator|-
literal|1
decl_stmt|;
name|int
name|decimalCount
init|=
operator|-
literal|1
decl_stmt|;
specifier|public
name|void
name|setType
parameter_list|(
name|int
name|type
parameter_list|)
block|{
name|colType
operator|=
name|COL_TYPE_MAP
operator|.
name|get
argument_list|(
name|type
argument_list|)
expr_stmt|;
if|if
condition|(
name|colType
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unrecognized column type for column: "
operator|+
name|name
operator|+
literal|". I regret I don't recognize: "
operator|+
operator|(
name|char
operator|)
name|type
argument_list|)
throw|;
block|}
block|}
name|ColType
name|getColType
parameter_list|()
block|{
return|return
name|colType
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"DBFColumnHeader{"
operator|+
literal|"name='"
operator|+
name|name
operator|+
literal|'\''
operator|+
literal|", colType="
operator|+
name|colType
operator|+
literal|", fieldLength="
operator|+
name|fieldLength
operator|+
literal|", decimalCount="
operator|+
name|decimalCount
operator|+
literal|'}'
return|;
block|}
block|}
end_class

end_unit

