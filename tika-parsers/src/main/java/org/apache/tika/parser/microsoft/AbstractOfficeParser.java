begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|microsoft
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|config
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|AbstractParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|ParseContext
import|;
end_import

begin_comment
comment|/**  * Intermediate layer to set {@link OfficeParserConfig} uniformly.  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|AbstractOfficeParser
extends|extends
name|AbstractParser
block|{
specifier|private
specifier|final
name|OfficeParserConfig
name|defaultOfficeParserConfig
init|=
operator|new
name|OfficeParserConfig
argument_list|()
decl_stmt|;
comment|/**      * Checks to see if the user has specified an {@link OfficeParserConfig}.      * If so, no changes are made; if not, one is added to the context.      *      * @param parseContext      */
specifier|public
name|void
name|configure
parameter_list|(
name|ParseContext
name|parseContext
parameter_list|)
block|{
name|OfficeParserConfig
name|officeParserConfig
init|=
name|parseContext
operator|.
name|get
argument_list|(
name|OfficeParserConfig
operator|.
name|class
argument_list|,
name|defaultOfficeParserConfig
argument_list|)
decl_stmt|;
name|parseContext
operator|.
name|set
argument_list|(
name|OfficeParserConfig
operator|.
name|class
argument_list|,
name|officeParserConfig
argument_list|)
expr_stmt|;
block|}
comment|/**      * @see OfficeParserConfig#getIncludeDeletedContent      *      * @return      */
specifier|public
name|boolean
name|getIncludeDeletedContent
parameter_list|()
block|{
return|return
name|defaultOfficeParserConfig
operator|.
name|getIncludeDeletedContent
argument_list|()
return|;
block|}
comment|/**      * @see OfficeParserConfig#getIncludeMoveFromContent()      *      * @return      */
specifier|public
name|boolean
name|getIncludeMoveFromContent
parameter_list|()
block|{
return|return
name|defaultOfficeParserConfig
operator|.
name|getIncludeMoveFromContent
argument_list|()
return|;
block|}
comment|/**      * @see OfficeParserConfig#getUseSAXDocxExtractor()      *      * @return      */
specifier|public
name|boolean
name|getUseSAXDocxExtractor
parameter_list|()
block|{
return|return
name|defaultOfficeParserConfig
operator|.
name|getUseSAXDocxExtractor
argument_list|()
return|;
block|}
comment|/**      * @see OfficeParserConfig#getExtractMacros()      * @return whether or not to extract macros      */
specifier|public
name|boolean
name|getExtractMacros
parameter_list|()
block|{
return|return
name|defaultOfficeParserConfig
operator|.
name|getExtractMacros
argument_list|()
return|;
block|}
annotation|@
name|Field
specifier|public
name|void
name|setIncludeDeletedContent
parameter_list|(
name|boolean
name|includeDeletedConent
parameter_list|)
block|{
name|defaultOfficeParserConfig
operator|.
name|setIncludeDeletedContent
argument_list|(
name|includeDeletedConent
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Field
specifier|public
name|void
name|setIncludeMoveFromContent
parameter_list|(
name|boolean
name|includeMoveFromContent
parameter_list|)
block|{
name|defaultOfficeParserConfig
operator|.
name|setIncludeMoveFromContent
argument_list|(
name|includeMoveFromContent
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Field
specifier|public
name|void
name|setIncludeShapeBasedContent
parameter_list|(
name|boolean
name|includeShapeBasedContent
parameter_list|)
block|{
name|defaultOfficeParserConfig
operator|.
name|setIncludeShapeBasedContent
argument_list|(
name|includeShapeBasedContent
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Field
specifier|public
name|void
name|setUseSAXDocxExtractor
parameter_list|(
name|boolean
name|useSAXDocxExtractor
parameter_list|)
block|{
name|defaultOfficeParserConfig
operator|.
name|setUseSAXDocxExtractor
argument_list|(
name|useSAXDocxExtractor
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Field
specifier|public
name|void
name|setUseSAXPptxExtractor
parameter_list|(
name|boolean
name|useSAXPptxExtractor
parameter_list|)
block|{
name|defaultOfficeParserConfig
operator|.
name|setUseSAXPptxExtractor
argument_list|(
name|useSAXPptxExtractor
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Field
specifier|public
name|void
name|setExtractMacros
parameter_list|(
name|boolean
name|extractMacros
parameter_list|)
block|{
name|defaultOfficeParserConfig
operator|.
name|setExtractMacros
argument_list|(
name|extractMacros
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Field
specifier|public
name|void
name|setConcatenatePhoneticRuns
parameter_list|(
name|boolean
name|concatenatePhoneticRuns
parameter_list|)
block|{
name|defaultOfficeParserConfig
operator|.
name|setConcatenatePhoneticRuns
argument_list|(
name|concatenatePhoneticRuns
argument_list|)
expr_stmt|;
block|}
name|void
name|getConcatenatePhoneticRuns
parameter_list|()
block|{
name|defaultOfficeParserConfig
operator|.
name|getConcatenatePhoneticRuns
argument_list|()
expr_stmt|;
block|}
comment|/**      * Some .msg files can contain body content in html, rtf and/or text.      * The default behavior is to pick the first non-null value and include only that.      * If you'd like to extract all non-null body content, which is likely duplicative,      * set this value to true.      *      * @param extractAllAlternativesFromMSG whether or not to extract all alternative parts from msg files      * @since 1.17      */
annotation|@
name|Field
specifier|public
name|void
name|setExtractAllAlternativesFromMSG
parameter_list|(
name|boolean
name|extractAllAlternativesFromMSG
parameter_list|)
block|{
name|defaultOfficeParserConfig
operator|.
name|setExtractAllAlternativesFromMSG
argument_list|(
name|extractAllAlternativesFromMSG
argument_list|)
expr_stmt|;
block|}
specifier|public
name|boolean
name|getExtractAllAlternativesFromMSG
parameter_list|()
block|{
return|return
name|defaultOfficeParserConfig
operator|.
name|getExtractAllAlternativesFromMSG
argument_list|()
return|;
block|}
block|}
end_class

end_unit

