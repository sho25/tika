begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|dwg
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|util
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|util
operator|.
name|LittleEndian
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|util
operator|.
name|StringUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|exception
operator|.
name|TikaException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|metadata
operator|.
name|Metadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|mime
operator|.
name|MediaType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|ParseContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|Parser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|sax
operator|.
name|XHTMLContentHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|ContentHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_comment
comment|/**  * DWG (CAD Drawing) parser. This is a very basic parser, which just  *  looks for bits of the headers.  * Note that we use Apache POI for various parts of the processing, as  *  lots of the low level string/int/short concepts are the same.  */
end_comment

begin_class
specifier|public
class|class
name|DWGParser
implements|implements
name|Parser
block|{
specifier|private
specifier|static
name|MediaType
name|TYPE
init|=
name|MediaType
operator|.
name|image
argument_list|(
literal|"vnd.dwg"
argument_list|)
decl_stmt|;
specifier|public
name|Set
argument_list|<
name|MediaType
argument_list|>
name|getSupportedTypes
parameter_list|(
name|ParseContext
name|context
parameter_list|)
block|{
return|return
name|Collections
operator|.
name|singleton
argument_list|(
name|TYPE
argument_list|)
return|;
block|}
comment|/** The order of the fields in the header */
specifier|private
specifier|static
name|String
index|[]
name|HEADER_PROPERTIES_ENTRIES
init|=
block|{
name|Metadata
operator|.
name|TITLE
block|,
name|Metadata
operator|.
name|SUBJECT
block|,
name|Metadata
operator|.
name|AUTHOR
block|,
name|Metadata
operator|.
name|KEYWORDS
block|,
name|Metadata
operator|.
name|COMMENTS
block|,
name|Metadata
operator|.
name|LAST_AUTHOR
block|,
literal|null
block|,
comment|// Unknown?
name|Metadata
operator|.
name|RELATION
block|,
comment|// Hyperlink
block|}
decl_stmt|;
specifier|public
name|void
name|parse
parameter_list|(
name|InputStream
name|stream
parameter_list|,
name|ContentHandler
name|handler
parameter_list|,
name|Metadata
name|metadata
parameter_list|,
name|ParseContext
name|context
parameter_list|)
throws|throws
name|IOException
throws|,
name|TikaException
throws|,
name|SAXException
block|{
comment|// First up, which version of the format are we handling?
name|byte
index|[]
name|header
init|=
operator|new
name|byte
index|[
literal|128
index|]
decl_stmt|;
name|IOUtils
operator|.
name|readFully
argument_list|(
name|stream
argument_list|,
name|header
argument_list|)
expr_stmt|;
name|String
name|version
init|=
operator|new
name|String
argument_list|(
name|header
argument_list|,
literal|0
argument_list|,
literal|6
argument_list|,
literal|"US-ASCII"
argument_list|)
decl_stmt|;
name|XHTMLContentHandler
name|xhtml
init|=
operator|new
name|XHTMLContentHandler
argument_list|(
name|handler
argument_list|,
name|metadata
argument_list|)
decl_stmt|;
name|xhtml
operator|.
name|startDocument
argument_list|()
expr_stmt|;
if|if
condition|(
name|version
operator|.
name|equals
argument_list|(
literal|"AC1018"
argument_list|)
condition|)
block|{
name|metadata
operator|.
name|set
argument_list|(
name|Metadata
operator|.
name|CONTENT_TYPE
argument_list|,
name|TYPE
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|skipToPropertyInfoSection
argument_list|(
name|stream
argument_list|,
name|header
argument_list|)
expr_stmt|;
name|get2004Props
argument_list|(
name|stream
argument_list|,
name|metadata
argument_list|,
name|xhtml
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|version
operator|.
name|equals
argument_list|(
literal|"AC1021"
argument_list|)
operator|||
name|version
operator|.
name|equals
argument_list|(
literal|"AC1024"
argument_list|)
condition|)
block|{
name|metadata
operator|.
name|set
argument_list|(
name|Metadata
operator|.
name|CONTENT_TYPE
argument_list|,
name|TYPE
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|skipToPropertyInfoSection
argument_list|(
name|stream
argument_list|,
name|header
argument_list|)
expr_stmt|;
name|get2007and2010Props
argument_list|(
name|stream
argument_list|,
name|metadata
argument_list|,
name|xhtml
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|TikaException
argument_list|(
literal|"Unsupported AutoCAD drawing version: "
operator|+
name|version
argument_list|)
throw|;
block|}
name|xhtml
operator|.
name|endDocument
argument_list|()
expr_stmt|;
block|}
comment|/**      * Stored as US-ASCII      */
specifier|private
name|void
name|get2004Props
parameter_list|(
name|InputStream
name|stream
parameter_list|,
name|Metadata
name|metadata
parameter_list|,
name|XHTMLContentHandler
name|xhtml
parameter_list|)
throws|throws
name|IOException
throws|,
name|SAXException
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|HEADER_PROPERTIES_ENTRIES
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|int
name|stringLen
init|=
name|LittleEndian
operator|.
name|readUShort
argument_list|(
name|stream
argument_list|)
decl_stmt|;
name|byte
index|[]
name|stringData
init|=
operator|new
name|byte
index|[
name|stringLen
index|]
decl_stmt|;
name|IOUtils
operator|.
name|readFully
argument_list|(
name|stream
argument_list|,
name|stringData
argument_list|)
expr_stmt|;
comment|// Often but not always null terminated
if|if
condition|(
name|stringData
index|[
name|stringLen
operator|-
literal|1
index|]
operator|==
literal|0
condition|)
block|{
name|stringLen
operator|--
expr_stmt|;
block|}
name|String
name|headerValue
init|=
name|StringUtil
operator|.
name|getFromCompressedUnicode
argument_list|(
name|stringData
argument_list|,
literal|0
argument_list|,
name|stringLen
argument_list|)
decl_stmt|;
name|handleHeader
argument_list|(
name|i
argument_list|,
name|headerValue
argument_list|,
name|metadata
argument_list|,
name|xhtml
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Stored as UCS2, so 16 bit "unicode"      */
specifier|private
name|void
name|get2007and2010Props
parameter_list|(
name|InputStream
name|stream
parameter_list|,
name|Metadata
name|metadata
parameter_list|,
name|XHTMLContentHandler
name|xhtml
parameter_list|)
throws|throws
name|IOException
throws|,
name|SAXException
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|HEADER_PROPERTIES_ENTRIES
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|int
name|stringLen
init|=
name|LittleEndian
operator|.
name|readUShort
argument_list|(
name|stream
argument_list|)
decl_stmt|;
name|byte
index|[]
name|stringData
init|=
operator|new
name|byte
index|[
name|stringLen
operator|*
literal|2
index|]
decl_stmt|;
name|IOUtils
operator|.
name|readFully
argument_list|(
name|stream
argument_list|,
name|stringData
argument_list|)
expr_stmt|;
name|String
name|headerValue
init|=
name|StringUtil
operator|.
name|getFromUnicodeLE
argument_list|(
name|stringData
argument_list|)
decl_stmt|;
name|handleHeader
argument_list|(
name|i
argument_list|,
name|headerValue
argument_list|,
name|metadata
argument_list|,
name|xhtml
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|handleHeader
parameter_list|(
name|int
name|headerNumber
parameter_list|,
name|String
name|value
parameter_list|,
name|Metadata
name|metadata
parameter_list|,
name|XHTMLContentHandler
name|xhtml
parameter_list|)
throws|throws
name|SAXException
block|{
if|if
condition|(
name|value
operator|==
literal|null
operator|||
name|value
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return;
block|}
comment|// Some strings are null terminated
if|if
condition|(
name|value
operator|.
name|charAt
argument_list|(
name|value
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
operator|==
literal|0
condition|)
block|{
name|value
operator|=
name|value
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|value
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
name|String
name|headerProp
init|=
name|HEADER_PROPERTIES_ENTRIES
index|[
name|headerNumber
index|]
decl_stmt|;
if|if
condition|(
name|headerProp
operator|!=
literal|null
condition|)
block|{
name|metadata
operator|.
name|set
argument_list|(
name|headerProp
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
name|xhtml
operator|.
name|element
argument_list|(
literal|"p"
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|skipToPropertyInfoSection
parameter_list|(
name|InputStream
name|stream
parameter_list|,
name|byte
index|[]
name|header
parameter_list|)
throws|throws
name|IOException
block|{
comment|// The offset is stored in the header from 0x20 onwards
name|long
name|offsetToSection
init|=
name|LittleEndian
operator|.
name|getLong
argument_list|(
name|header
argument_list|,
literal|0x20
argument_list|)
decl_stmt|;
name|long
name|toSkip
init|=
name|offsetToSection
operator|-
name|header
operator|.
name|length
decl_stmt|;
while|while
condition|(
name|toSkip
operator|>
literal|0
condition|)
block|{
name|byte
index|[]
name|skip
init|=
operator|new
name|byte
index|[
name|Math
operator|.
name|min
argument_list|(
operator|(
name|int
operator|)
name|toSkip
argument_list|,
literal|0x4000
argument_list|)
index|]
decl_stmt|;
name|IOUtils
operator|.
name|readFully
argument_list|(
name|stream
argument_list|,
name|skip
argument_list|)
expr_stmt|;
name|toSkip
operator|-=
name|skip
operator|.
name|length
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|parse
parameter_list|(
name|InputStream
name|stream
parameter_list|,
name|ContentHandler
name|handler
parameter_list|,
name|Metadata
name|metadata
parameter_list|)
throws|throws
name|IOException
throws|,
name|SAXException
throws|,
name|TikaException
block|{
name|parse
argument_list|(
name|stream
argument_list|,
name|handler
argument_list|,
name|metadata
argument_list|,
operator|new
name|ParseContext
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

