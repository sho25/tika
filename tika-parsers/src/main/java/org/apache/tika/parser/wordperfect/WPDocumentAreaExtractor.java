begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|wordperfect
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|sax
operator|.
name|XHTMLContentHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_comment
comment|/**  * Extracts WordPerfect Document Area text from a WordPerfect document.  * @author Pascal Essiembre  */
end_comment

begin_class
specifier|abstract
class|class
name|WPDocumentAreaExtractor
block|{
specifier|public
name|void
name|extract
parameter_list|(
name|WPInputStream
name|in
parameter_list|,
name|XHTMLContentHandler
name|xhtml
parameter_list|)
throws|throws
name|IOException
throws|,
name|SAXException
block|{
name|int
name|chunk
init|=
literal|4096
decl_stmt|;
name|StringBuilder
name|out
init|=
operator|new
name|StringBuilder
argument_list|(
name|chunk
argument_list|)
decl_stmt|;
name|int
name|c
decl_stmt|;
while|while
condition|(
operator|(
name|c
operator|=
name|in
operator|.
name|read
argument_list|()
operator|)
operator|!=
operator|-
literal|1
condition|)
block|{
name|extract
argument_list|(
name|c
argument_list|,
name|in
argument_list|,
name|out
argument_list|)
expr_stmt|;
if|if
condition|(
name|out
operator|.
name|length
argument_list|()
operator|>=
name|chunk
condition|)
block|{
name|xhtml
operator|.
name|characters
argument_list|(
name|out
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|setLength
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
name|xhtml
operator|.
name|characters
argument_list|(
name|out
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|setLength
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
specifier|protected
specifier|abstract
name|void
name|extract
parameter_list|(
name|int
name|c
parameter_list|,
name|WPInputStream
name|in
parameter_list|,
name|StringBuilder
name|out
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|// Skips until the given character is encountered.
specifier|protected
name|int
name|skipUntilChar
parameter_list|(
name|WPInputStream
name|in
parameter_list|,
name|int
name|targetChar
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|count
init|=
literal|0
decl_stmt|;
name|int
name|c
decl_stmt|;
while|while
condition|(
operator|(
name|c
operator|=
name|in
operator|.
name|read
argument_list|()
operator|)
operator|!=
operator|-
literal|1
condition|)
block|{
name|count
operator|++
expr_stmt|;
if|if
condition|(
name|c
operator|==
name|targetChar
condition|)
block|{
return|return
name|count
return|;
block|}
block|}
return|return
name|count
return|;
block|}
block|}
end_class

end_unit

