begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|xliff
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|exception
operator|.
name|TikaException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|io
operator|.
name|TikaInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|metadata
operator|.
name|Metadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|mime
operator|.
name|MediaType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|AbstractParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|ParseContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|Parser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|sax
operator|.
name|EndDocumentShieldingContentHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|sax
operator|.
name|XHTMLContentHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|ContentHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|ZipEntry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|ZipFile
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|ZipInputStream
import|;
end_import

begin_comment
comment|/**  * Parser for XLZ Archives.  */
end_comment

begin_class
specifier|public
class|class
name|XLZParser
extends|extends
name|AbstractParser
block|{
comment|/**      * Serial version UID      */
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
operator|-
literal|1877314028666058564L
decl_stmt|;
comment|/**      * Custom XLZ mime type.      */
specifier|private
specifier|static
specifier|final
name|MediaType
name|XLZ_CONTENT_TYPE
init|=
name|MediaType
operator|.
name|application
argument_list|(
literal|"x-xliff+zip"
argument_list|)
decl_stmt|;
comment|/**      * Supported types set.      */
specifier|private
specifier|static
specifier|final
name|Set
argument_list|<
name|MediaType
argument_list|>
name|SUPPORTED_TYPES
init|=
name|Collections
operator|.
name|singleton
argument_list|(
name|XLZ_CONTENT_TYPE
argument_list|)
decl_stmt|;
comment|/**      * XLF Extension      */
specifier|private
specifier|static
specifier|final
name|String
name|XLF
init|=
literal|".xlf"
decl_stmt|;
annotation|@
name|Override
specifier|public
name|Set
argument_list|<
name|MediaType
argument_list|>
name|getSupportedTypes
parameter_list|(
name|ParseContext
name|context
parameter_list|)
block|{
return|return
name|SUPPORTED_TYPES
return|;
block|}
comment|/**      * Shared Parser instance.      */
specifier|private
name|Parser
name|xliffParser
init|=
operator|new
name|XLIFF12Parser
argument_list|()
decl_stmt|;
specifier|public
name|void
name|parse
parameter_list|(
name|InputStream
name|stream
parameter_list|,
name|ContentHandler
name|baseHandler
parameter_list|,
name|Metadata
name|metadata
parameter_list|,
name|ParseContext
name|context
parameter_list|)
throws|throws
name|IOException
throws|,
name|SAXException
throws|,
name|TikaException
block|{
name|ZipFile
name|zipFile
init|=
literal|null
decl_stmt|;
name|ZipInputStream
name|zipStream
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|stream
operator|instanceof
name|TikaInputStream
condition|)
block|{
name|TikaInputStream
name|tis
init|=
operator|(
name|TikaInputStream
operator|)
name|stream
decl_stmt|;
name|Object
name|container
init|=
operator|(
operator|(
name|TikaInputStream
operator|)
name|stream
operator|)
operator|.
name|getOpenContainer
argument_list|()
decl_stmt|;
if|if
condition|(
name|container
operator|instanceof
name|ZipFile
condition|)
block|{
name|zipFile
operator|=
operator|(
name|ZipFile
operator|)
name|container
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|tis
operator|.
name|hasFile
argument_list|()
condition|)
block|{
name|zipFile
operator|=
operator|new
name|ZipFile
argument_list|(
name|tis
operator|.
name|getFile
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|zipStream
operator|=
operator|new
name|ZipInputStream
argument_list|(
name|stream
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|zipStream
operator|=
operator|new
name|ZipInputStream
argument_list|(
name|stream
argument_list|)
expr_stmt|;
block|}
comment|// Prepare to handle the content
name|XHTMLContentHandler
name|xhtml
init|=
operator|new
name|XHTMLContentHandler
argument_list|(
name|baseHandler
argument_list|,
name|metadata
argument_list|)
decl_stmt|;
name|EndDocumentShieldingContentHandler
name|handler
init|=
operator|new
name|EndDocumentShieldingContentHandler
argument_list|(
name|xhtml
argument_list|)
decl_stmt|;
if|if
condition|(
name|zipFile
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|handleZipFile
argument_list|(
name|zipFile
argument_list|,
name|metadata
argument_list|,
name|context
argument_list|,
name|handler
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|zipFile
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
try|try
block|{
name|handleZipStream
argument_list|(
name|zipStream
argument_list|,
name|metadata
argument_list|,
name|context
argument_list|,
name|handler
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|zipStream
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|handler
operator|.
name|getEndDocumentWasCalled
argument_list|()
condition|)
block|{
name|handler
operator|.
name|reallyEndDocument
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|handleZipStream
parameter_list|(
name|ZipInputStream
name|zipStream
parameter_list|,
name|Metadata
name|metadata
parameter_list|,
name|ParseContext
name|context
parameter_list|,
name|EndDocumentShieldingContentHandler
name|handler
parameter_list|)
throws|throws
name|IOException
throws|,
name|TikaException
throws|,
name|SAXException
block|{
name|ZipEntry
name|entry
init|=
name|zipStream
operator|.
name|getNextEntry
argument_list|()
decl_stmt|;
if|if
condition|(
name|entry
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"No entries found in ZipInputStream"
argument_list|)
throw|;
block|}
while|while
condition|(
name|entry
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|entry
operator|.
name|getName
argument_list|()
operator|.
name|contains
argument_list|(
name|XLF
argument_list|)
condition|)
block|{
name|xliffParser
operator|.
name|parse
argument_list|(
name|zipStream
argument_list|,
name|handler
argument_list|,
name|metadata
argument_list|,
name|context
argument_list|)
expr_stmt|;
block|}
name|entry
operator|=
name|zipStream
operator|.
name|getNextEntry
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|handleZipFile
parameter_list|(
name|ZipFile
name|zipFile
parameter_list|,
name|Metadata
name|metadata
parameter_list|,
name|ParseContext
name|context
parameter_list|,
name|EndDocumentShieldingContentHandler
name|handler
parameter_list|)
throws|throws
name|IOException
throws|,
name|TikaException
throws|,
name|SAXException
block|{
name|Enumeration
argument_list|<
name|?
extends|extends
name|ZipEntry
argument_list|>
name|entries
init|=
name|zipFile
operator|.
name|entries
argument_list|()
decl_stmt|;
while|while
condition|(
name|entries
operator|.
name|hasMoreElements
argument_list|()
condition|)
block|{
name|ZipEntry
name|entry
init|=
name|entries
operator|.
name|nextElement
argument_list|()
decl_stmt|;
if|if
condition|(
name|entry
operator|.
name|getName
argument_list|()
operator|.
name|contains
argument_list|(
name|XLF
argument_list|)
condition|)
block|{
name|xliffParser
operator|.
name|parse
argument_list|(
name|zipFile
operator|.
name|getInputStream
argument_list|(
name|entry
argument_list|)
argument_list|,
name|handler
argument_list|,
name|metadata
argument_list|,
name|context
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

