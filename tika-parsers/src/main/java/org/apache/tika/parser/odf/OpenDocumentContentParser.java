begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|odf
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|sax
operator|.
name|XHTMLContentHandler
operator|.
name|XHTML
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|BitSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Stack
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|XMLConstants
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|ParserConfigurationException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|SAXParser
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|SAXParserFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|exception
operator|.
name|TikaException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|io
operator|.
name|CloseShieldInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|metadata
operator|.
name|Metadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|mime
operator|.
name|MediaType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|AbstractParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|ParseContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|sax
operator|.
name|ElementMappingContentHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|sax
operator|.
name|OfflineContentHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|sax
operator|.
name|XHTMLContentHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|sax
operator|.
name|ElementMappingContentHandler
operator|.
name|TargetElement
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|Attributes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|ContentHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXNotRecognizedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|helpers
operator|.
name|AttributesImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|helpers
operator|.
name|DefaultHandler
import|;
end_import

begin_comment
comment|/**  * Parser for ODF<code>content.xml</code> files.  */
end_comment

begin_class
specifier|public
class|class
name|OpenDocumentContentParser
extends|extends
name|AbstractParser
block|{
specifier|private
interface|interface
name|Style
block|{     }
specifier|private
specifier|static
class|class
name|TextStyle
implements|implements
name|Style
block|{
specifier|public
name|boolean
name|italic
decl_stmt|;
specifier|public
name|boolean
name|bold
decl_stmt|;
specifier|public
name|boolean
name|underlined
decl_stmt|;
block|}
specifier|private
specifier|static
class|class
name|ListStyle
implements|implements
name|Style
block|{
specifier|public
name|boolean
name|ordered
decl_stmt|;
specifier|public
name|String
name|getTag
parameter_list|()
block|{
return|return
name|ordered
condition|?
literal|"ol"
else|:
literal|"ul"
return|;
block|}
block|}
specifier|private
specifier|static
specifier|final
class|class
name|OpenDocumentElementMappingContentHandler
extends|extends
name|ElementMappingContentHandler
block|{
specifier|private
specifier|final
name|ContentHandler
name|handler
decl_stmt|;
specifier|private
specifier|final
name|BitSet
name|textNodeStack
init|=
operator|new
name|BitSet
argument_list|()
decl_stmt|;
specifier|private
name|int
name|nodeDepth
init|=
literal|0
decl_stmt|;
specifier|private
name|int
name|completelyFiltered
init|=
literal|0
decl_stmt|;
specifier|private
name|Stack
argument_list|<
name|String
argument_list|>
name|headingStack
init|=
operator|new
name|Stack
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|TextStyle
argument_list|>
name|textStyleMap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|TextStyle
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|ListStyle
argument_list|>
name|listStyleMap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|ListStyle
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|TextStyle
name|textStyle
decl_stmt|;
specifier|private
name|TextStyle
name|lastTextStyle
decl_stmt|;
specifier|private
name|Stack
argument_list|<
name|ListStyle
argument_list|>
name|listStyleStack
init|=
operator|new
name|Stack
argument_list|<
name|ListStyle
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|ListStyle
name|listStyle
decl_stmt|;
specifier|private
name|OpenDocumentElementMappingContentHandler
parameter_list|(
name|ContentHandler
name|handler
parameter_list|,
name|Map
argument_list|<
name|QName
argument_list|,
name|TargetElement
argument_list|>
name|mappings
parameter_list|)
block|{
name|super
argument_list|(
name|handler
argument_list|,
name|mappings
argument_list|)
expr_stmt|;
name|this
operator|.
name|handler
operator|=
name|handler
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|characters
parameter_list|(
name|char
index|[]
name|ch
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|length
parameter_list|)
throws|throws
name|SAXException
block|{
comment|// only forward content of tags from text:-namespace
if|if
condition|(
name|completelyFiltered
operator|==
literal|0
operator|&&
name|nodeDepth
operator|>
literal|0
operator|&&
name|textNodeStack
operator|.
name|get
argument_list|(
name|nodeDepth
operator|-
literal|1
argument_list|)
condition|)
block|{
name|lazyEndSpan
argument_list|()
expr_stmt|;
name|super
operator|.
name|characters
argument_list|(
name|ch
argument_list|,
name|start
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
block|}
comment|// helper for checking tags which need complete filtering
comment|// (with sub-tags)
specifier|private
name|boolean
name|needsCompleteFiltering
parameter_list|(
name|String
name|namespaceURI
parameter_list|,
name|String
name|localName
parameter_list|)
block|{
if|if
condition|(
name|TEXT_NS
operator|.
name|equals
argument_list|(
name|namespaceURI
argument_list|)
condition|)
block|{
return|return
name|localName
operator|.
name|endsWith
argument_list|(
literal|"-template"
argument_list|)
operator|||
name|localName
operator|.
name|endsWith
argument_list|(
literal|"-style"
argument_list|)
return|;
block|}
return|return
name|TABLE_NS
operator|.
name|equals
argument_list|(
name|namespaceURI
argument_list|)
operator|&&
literal|"covered-table-cell"
operator|.
name|equals
argument_list|(
name|localName
argument_list|)
return|;
block|}
comment|// map the heading level to<hX> HTML tags
specifier|private
name|String
name|getXHTMLHeaderTagName
parameter_list|(
name|Attributes
name|atts
parameter_list|)
block|{
name|String
name|depthStr
init|=
name|atts
operator|.
name|getValue
argument_list|(
name|TEXT_NS
argument_list|,
literal|"outline-level"
argument_list|)
decl_stmt|;
if|if
condition|(
name|depthStr
operator|==
literal|null
condition|)
block|{
return|return
literal|"h1"
return|;
block|}
name|int
name|depth
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|depthStr
argument_list|)
decl_stmt|;
if|if
condition|(
name|depth
operator|>=
literal|6
condition|)
block|{
return|return
literal|"h6"
return|;
block|}
elseif|else
if|if
condition|(
name|depth
operator|<=
literal|1
condition|)
block|{
return|return
literal|"h1"
return|;
block|}
else|else
block|{
return|return
literal|"h"
operator|+
name|depth
return|;
block|}
block|}
comment|/** 		 * Check if a node is a text node 		 */
specifier|private
name|boolean
name|isTextNode
parameter_list|(
name|String
name|namespaceURI
parameter_list|,
name|String
name|localName
parameter_list|)
block|{
if|if
condition|(
name|TEXT_NS
operator|.
name|equals
argument_list|(
name|namespaceURI
argument_list|)
operator|&&
operator|!
name|localName
operator|.
name|equals
argument_list|(
literal|"page-number"
argument_list|)
operator|&&
operator|!
name|localName
operator|.
name|equals
argument_list|(
literal|"page-count"
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|SVG_NS
operator|.
name|equals
argument_list|(
name|namespaceURI
argument_list|)
condition|)
block|{
return|return
literal|"title"
operator|.
name|equals
argument_list|(
name|localName
argument_list|)
operator|||
literal|"desc"
operator|.
name|equals
argument_list|(
name|localName
argument_list|)
return|;
block|}
return|return
literal|false
return|;
block|}
specifier|private
name|void
name|startList
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|SAXException
block|{
name|String
name|elementName
init|=
literal|"ul"
decl_stmt|;
if|if
condition|(
name|name
operator|!=
literal|null
condition|)
block|{
name|ListStyle
name|style
init|=
name|listStyleMap
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|elementName
operator|=
name|style
operator|!=
literal|null
condition|?
name|style
operator|.
name|getTag
argument_list|()
else|:
literal|"ul"
expr_stmt|;
name|listStyleStack
operator|.
name|push
argument_list|(
name|style
argument_list|)
expr_stmt|;
block|}
name|handler
operator|.
name|startElement
argument_list|(
name|XHTML
argument_list|,
name|elementName
argument_list|,
name|elementName
argument_list|,
name|EMPTY_ATTRIBUTES
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|endList
parameter_list|()
throws|throws
name|SAXException
block|{
name|String
name|elementName
init|=
literal|"ul"
decl_stmt|;
if|if
condition|(
operator|!
name|listStyleStack
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|ListStyle
name|style
init|=
name|listStyleStack
operator|.
name|pop
argument_list|()
decl_stmt|;
name|elementName
operator|=
name|style
operator|!=
literal|null
condition|?
name|style
operator|.
name|getTag
argument_list|()
else|:
literal|"ul"
expr_stmt|;
block|}
name|handler
operator|.
name|endElement
argument_list|(
name|XHTML
argument_list|,
name|elementName
argument_list|,
name|elementName
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|startSpan
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|SAXException
block|{
if|if
condition|(
name|name
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|TextStyle
name|style
init|=
name|textStyleMap
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|style
operator|==
literal|null
condition|)
block|{
return|return;
block|}
comment|// End tags that refer to no longer valid styles
if|if
condition|(
operator|!
name|style
operator|.
name|underlined
operator|&&
name|lastTextStyle
operator|!=
literal|null
operator|&&
name|lastTextStyle
operator|.
name|underlined
condition|)
block|{
name|handler
operator|.
name|endElement
argument_list|(
name|XHTML
argument_list|,
literal|"u"
argument_list|,
literal|"u"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|style
operator|.
name|italic
operator|&&
name|lastTextStyle
operator|!=
literal|null
operator|&&
name|lastTextStyle
operator|.
name|italic
condition|)
block|{
name|handler
operator|.
name|endElement
argument_list|(
name|XHTML
argument_list|,
literal|"i"
argument_list|,
literal|"i"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|style
operator|.
name|bold
operator|&&
name|lastTextStyle
operator|!=
literal|null
operator|&&
name|lastTextStyle
operator|.
name|bold
condition|)
block|{
name|handler
operator|.
name|endElement
argument_list|(
name|XHTML
argument_list|,
literal|"b"
argument_list|,
literal|"b"
argument_list|)
expr_stmt|;
block|}
comment|// Start tags for new styles
if|if
condition|(
name|style
operator|.
name|bold
operator|&&
operator|(
name|lastTextStyle
operator|==
literal|null
operator|||
operator|!
name|lastTextStyle
operator|.
name|bold
operator|)
condition|)
block|{
name|handler
operator|.
name|startElement
argument_list|(
name|XHTML
argument_list|,
literal|"b"
argument_list|,
literal|"b"
argument_list|,
name|EMPTY_ATTRIBUTES
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|style
operator|.
name|italic
operator|&&
operator|(
name|lastTextStyle
operator|==
literal|null
operator|||
operator|!
name|lastTextStyle
operator|.
name|italic
operator|)
condition|)
block|{
name|handler
operator|.
name|startElement
argument_list|(
name|XHTML
argument_list|,
literal|"i"
argument_list|,
literal|"i"
argument_list|,
name|EMPTY_ATTRIBUTES
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|style
operator|.
name|underlined
operator|&&
operator|(
name|lastTextStyle
operator|==
literal|null
operator|||
operator|!
name|lastTextStyle
operator|.
name|underlined
operator|)
condition|)
block|{
name|handler
operator|.
name|startElement
argument_list|(
name|XHTML
argument_list|,
literal|"u"
argument_list|,
literal|"u"
argument_list|,
name|EMPTY_ATTRIBUTES
argument_list|)
expr_stmt|;
block|}
name|textStyle
operator|=
name|style
expr_stmt|;
name|lastTextStyle
operator|=
literal|null
expr_stmt|;
block|}
specifier|private
name|void
name|endSpan
parameter_list|()
throws|throws
name|SAXException
block|{
name|lastTextStyle
operator|=
name|textStyle
expr_stmt|;
name|textStyle
operator|=
literal|null
expr_stmt|;
block|}
specifier|private
name|void
name|lazyEndSpan
parameter_list|()
throws|throws
name|SAXException
block|{
if|if
condition|(
name|lastTextStyle
operator|==
literal|null
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|lastTextStyle
operator|.
name|underlined
condition|)
block|{
name|handler
operator|.
name|endElement
argument_list|(
name|XHTML
argument_list|,
literal|"u"
argument_list|,
literal|"u"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|lastTextStyle
operator|.
name|italic
condition|)
block|{
name|handler
operator|.
name|endElement
argument_list|(
name|XHTML
argument_list|,
literal|"i"
argument_list|,
literal|"i"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|lastTextStyle
operator|.
name|bold
condition|)
block|{
name|handler
operator|.
name|endElement
argument_list|(
name|XHTML
argument_list|,
literal|"b"
argument_list|,
literal|"b"
argument_list|)
expr_stmt|;
block|}
name|lastTextStyle
operator|=
literal|null
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|startElement
parameter_list|(
name|String
name|namespaceURI
parameter_list|,
name|String
name|localName
parameter_list|,
name|String
name|qName
parameter_list|,
name|Attributes
name|attrs
parameter_list|)
throws|throws
name|SAXException
block|{
comment|// keep track of current node type. If it is a text node,
comment|// a bit at the current depth its set in textNodeStack.
comment|// characters() checks the top bit to determine, if the
comment|// actual node is a text node to print out nodeDepth contains
comment|// the depth of the current node and also marks top of stack.
assert|assert
name|nodeDepth
operator|>=
literal|0
assert|;
comment|// Set styles
if|if
condition|(
name|STYLE_NS
operator|.
name|equals
argument_list|(
name|namespaceURI
argument_list|)
operator|&&
literal|"style"
operator|.
name|equals
argument_list|(
name|localName
argument_list|)
condition|)
block|{
name|String
name|family
init|=
name|attrs
operator|.
name|getValue
argument_list|(
name|STYLE_NS
argument_list|,
literal|"family"
argument_list|)
decl_stmt|;
if|if
condition|(
literal|"text"
operator|.
name|equals
argument_list|(
name|family
argument_list|)
condition|)
block|{
name|textStyle
operator|=
operator|new
name|TextStyle
argument_list|()
expr_stmt|;
name|String
name|name
init|=
name|attrs
operator|.
name|getValue
argument_list|(
name|STYLE_NS
argument_list|,
literal|"name"
argument_list|)
decl_stmt|;
name|textStyleMap
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|textStyle
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|TEXT_NS
operator|.
name|equals
argument_list|(
name|namespaceURI
argument_list|)
operator|&&
literal|"list-style"
operator|.
name|equals
argument_list|(
name|localName
argument_list|)
condition|)
block|{
name|listStyle
operator|=
operator|new
name|ListStyle
argument_list|()
expr_stmt|;
name|String
name|name
init|=
name|attrs
operator|.
name|getValue
argument_list|(
name|STYLE_NS
argument_list|,
literal|"name"
argument_list|)
decl_stmt|;
name|listStyleMap
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|listStyle
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|textStyle
operator|!=
literal|null
operator|&&
name|STYLE_NS
operator|.
name|equals
argument_list|(
name|namespaceURI
argument_list|)
operator|&&
literal|"text-properties"
operator|.
name|equals
argument_list|(
name|localName
argument_list|)
condition|)
block|{
name|String
name|fontStyle
init|=
name|attrs
operator|.
name|getValue
argument_list|(
name|FORMATTING_OBJECTS_NS
argument_list|,
literal|"font-style"
argument_list|)
decl_stmt|;
if|if
condition|(
literal|"italic"
operator|.
name|equals
argument_list|(
name|fontStyle
argument_list|)
operator|||
literal|"oblique"
operator|.
name|equals
argument_list|(
name|fontStyle
argument_list|)
condition|)
block|{
name|textStyle
operator|.
name|italic
operator|=
literal|true
expr_stmt|;
block|}
name|String
name|fontWeight
init|=
name|attrs
operator|.
name|getValue
argument_list|(
name|FORMATTING_OBJECTS_NS
argument_list|,
literal|"font-weight"
argument_list|)
decl_stmt|;
if|if
condition|(
literal|"bold"
operator|.
name|equals
argument_list|(
name|fontWeight
argument_list|)
operator|||
literal|"bolder"
operator|.
name|equals
argument_list|(
name|fontWeight
argument_list|)
operator|||
operator|(
name|fontWeight
operator|!=
literal|null
operator|&&
name|Character
operator|.
name|isDigit
argument_list|(
name|fontWeight
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|&&
name|Integer
operator|.
name|valueOf
argument_list|(
name|fontWeight
argument_list|)
operator|>
literal|500
operator|)
condition|)
block|{
name|textStyle
operator|.
name|bold
operator|=
literal|true
expr_stmt|;
block|}
name|String
name|underlineStyle
init|=
name|attrs
operator|.
name|getValue
argument_list|(
name|STYLE_NS
argument_list|,
literal|"text-underline-style"
argument_list|)
decl_stmt|;
if|if
condition|(
name|underlineStyle
operator|!=
literal|null
condition|)
block|{
name|textStyle
operator|.
name|underlined
operator|=
literal|true
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|listStyle
operator|!=
literal|null
operator|&&
name|TEXT_NS
operator|.
name|equals
argument_list|(
name|namespaceURI
argument_list|)
condition|)
block|{
if|if
condition|(
literal|"list-level-style-bullet"
operator|.
name|equals
argument_list|(
name|localName
argument_list|)
condition|)
block|{
name|listStyle
operator|.
name|ordered
operator|=
literal|false
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"list-level-style-number"
operator|.
name|equals
argument_list|(
name|localName
argument_list|)
condition|)
block|{
name|listStyle
operator|.
name|ordered
operator|=
literal|true
expr_stmt|;
block|}
block|}
name|textNodeStack
operator|.
name|set
argument_list|(
name|nodeDepth
operator|++
argument_list|,
name|isTextNode
argument_list|(
name|namespaceURI
argument_list|,
name|localName
argument_list|)
argument_list|)
expr_stmt|;
comment|// filter *all* content of some tags
assert|assert
name|completelyFiltered
operator|>=
literal|0
assert|;
if|if
condition|(
name|needsCompleteFiltering
argument_list|(
name|namespaceURI
argument_list|,
name|localName
argument_list|)
condition|)
block|{
name|completelyFiltered
operator|++
expr_stmt|;
block|}
comment|// call next handler if no filtering
if|if
condition|(
name|completelyFiltered
operator|==
literal|0
condition|)
block|{
comment|// special handling of text:h, that are directly passed
comment|// to incoming handler
if|if
condition|(
name|TEXT_NS
operator|.
name|equals
argument_list|(
name|namespaceURI
argument_list|)
operator|&&
literal|"h"
operator|.
name|equals
argument_list|(
name|localName
argument_list|)
condition|)
block|{
specifier|final
name|String
name|el
init|=
name|headingStack
operator|.
name|push
argument_list|(
name|getXHTMLHeaderTagName
argument_list|(
name|attrs
argument_list|)
argument_list|)
decl_stmt|;
name|handler
operator|.
name|startElement
argument_list|(
name|XHTMLContentHandler
operator|.
name|XHTML
argument_list|,
name|el
argument_list|,
name|el
argument_list|,
name|EMPTY_ATTRIBUTES
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|TEXT_NS
operator|.
name|equals
argument_list|(
name|namespaceURI
argument_list|)
operator|&&
literal|"list"
operator|.
name|equals
argument_list|(
name|localName
argument_list|)
condition|)
block|{
name|startList
argument_list|(
name|attrs
operator|.
name|getValue
argument_list|(
name|TEXT_NS
argument_list|,
literal|"style-name"
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|TEXT_NS
operator|.
name|equals
argument_list|(
name|namespaceURI
argument_list|)
operator|&&
literal|"span"
operator|.
name|equals
argument_list|(
name|localName
argument_list|)
condition|)
block|{
name|startSpan
argument_list|(
name|attrs
operator|.
name|getValue
argument_list|(
name|TEXT_NS
argument_list|,
literal|"style-name"
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|super
operator|.
name|startElement
argument_list|(
name|namespaceURI
argument_list|,
name|localName
argument_list|,
name|qName
argument_list|,
name|attrs
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|endElement
parameter_list|(
name|String
name|namespaceURI
parameter_list|,
name|String
name|localName
parameter_list|,
name|String
name|qName
parameter_list|)
throws|throws
name|SAXException
block|{
if|if
condition|(
name|STYLE_NS
operator|.
name|equals
argument_list|(
name|namespaceURI
argument_list|)
operator|&&
literal|"style"
operator|.
name|equals
argument_list|(
name|localName
argument_list|)
condition|)
block|{
name|textStyle
operator|=
literal|null
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|TEXT_NS
operator|.
name|equals
argument_list|(
name|namespaceURI
argument_list|)
operator|&&
literal|"list-style"
operator|.
name|equals
argument_list|(
name|localName
argument_list|)
condition|)
block|{
name|listStyle
operator|=
literal|null
expr_stmt|;
block|}
comment|// call next handler if no filtering
if|if
condition|(
name|completelyFiltered
operator|==
literal|0
condition|)
block|{
comment|// special handling of text:h, that are directly passed
comment|// to incoming handler
if|if
condition|(
name|TEXT_NS
operator|.
name|equals
argument_list|(
name|namespaceURI
argument_list|)
operator|&&
literal|"h"
operator|.
name|equals
argument_list|(
name|localName
argument_list|)
condition|)
block|{
specifier|final
name|String
name|el
init|=
name|headingStack
operator|.
name|pop
argument_list|()
decl_stmt|;
name|handler
operator|.
name|endElement
argument_list|(
name|XHTMLContentHandler
operator|.
name|XHTML
argument_list|,
name|el
argument_list|,
name|el
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|TEXT_NS
operator|.
name|equals
argument_list|(
name|namespaceURI
argument_list|)
operator|&&
literal|"list"
operator|.
name|equals
argument_list|(
name|localName
argument_list|)
condition|)
block|{
name|endList
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|TEXT_NS
operator|.
name|equals
argument_list|(
name|namespaceURI
argument_list|)
operator|&&
literal|"span"
operator|.
name|equals
argument_list|(
name|localName
argument_list|)
condition|)
block|{
name|endSpan
argument_list|()
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|TEXT_NS
operator|.
name|equals
argument_list|(
name|namespaceURI
argument_list|)
operator|&&
literal|"p"
operator|.
name|equals
argument_list|(
name|localName
argument_list|)
condition|)
block|{
name|lazyEndSpan
argument_list|()
expr_stmt|;
block|}
name|super
operator|.
name|endElement
argument_list|(
name|namespaceURI
argument_list|,
name|localName
argument_list|,
name|qName
argument_list|)
expr_stmt|;
block|}
comment|// special handling of tabulators
if|if
condition|(
name|TEXT_NS
operator|.
name|equals
argument_list|(
name|namespaceURI
argument_list|)
operator|&&
operator|(
literal|"tab-stop"
operator|.
name|equals
argument_list|(
name|localName
argument_list|)
operator|||
literal|"tab"
operator|.
name|equals
argument_list|(
name|localName
argument_list|)
operator|)
condition|)
block|{
name|this
operator|.
name|characters
argument_list|(
name|TAB
argument_list|,
literal|0
argument_list|,
name|TAB
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
block|}
comment|// revert filter for *all* content of some tags
if|if
condition|(
name|needsCompleteFiltering
argument_list|(
name|namespaceURI
argument_list|,
name|localName
argument_list|)
condition|)
block|{
name|completelyFiltered
operator|--
expr_stmt|;
block|}
assert|assert
name|completelyFiltered
operator|>=
literal|0
assert|;
comment|// reduce current node depth
name|nodeDepth
operator|--
expr_stmt|;
assert|assert
name|nodeDepth
operator|>=
literal|0
assert|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|startPrefixMapping
parameter_list|(
name|String
name|prefix
parameter_list|,
name|String
name|uri
parameter_list|)
block|{
comment|// remove prefix mappings as they should not occur in XHTML
block|}
annotation|@
name|Override
specifier|public
name|void
name|endPrefixMapping
parameter_list|(
name|String
name|prefix
parameter_list|)
block|{
comment|// remove prefix mappings as they should not occur in XHTML
block|}
block|}
specifier|public
specifier|static
specifier|final
name|String
name|TEXT_NS
init|=
literal|"urn:oasis:names:tc:opendocument:xmlns:text:1.0"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|TABLE_NS
init|=
literal|"urn:oasis:names:tc:opendocument:xmlns:table:1.0"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|STYLE_NS
init|=
literal|"urn:oasis:names:tc:opendocument:xmlns:style:1.0"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|FORMATTING_OBJECTS_NS
init|=
literal|"urn:oasis:names:tc:opendocument:xmlns:xsl-fo-compatible:1.0"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|OFFICE_NS
init|=
literal|"urn:oasis:names:tc:opendocument:xmlns:office:1.0"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|SVG_NS
init|=
literal|"urn:oasis:names:tc:opendocument:xmlns:svg-compatible:1.0"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|PRESENTATION_NS
init|=
literal|"urn:oasis:names:tc:opendocument:xmlns:presentation:1.0"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|DRAW_NS
init|=
literal|"urn:oasis:names:tc:opendocument:xmlns:drawing:1.0"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|XLINK_NS
init|=
literal|"http://www.w3.org/1999/xlink"
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|char
index|[]
name|TAB
init|=
operator|new
name|char
index|[]
block|{
literal|'\t'
block|}
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Attributes
name|EMPTY_ATTRIBUTES
init|=
operator|new
name|AttributesImpl
argument_list|()
decl_stmt|;
comment|/**      * Mappings between ODF tag names and XHTML tag names      * (including attributes). All other tag names/attributes are ignored      * and left out from event stream.       */
specifier|private
specifier|static
specifier|final
name|HashMap
argument_list|<
name|QName
argument_list|,
name|TargetElement
argument_list|>
name|MAPPINGS
init|=
operator|new
name|HashMap
argument_list|<
name|QName
argument_list|,
name|TargetElement
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
comment|// general mappings of text:-tags
name|MAPPINGS
operator|.
name|put
argument_list|(
operator|new
name|QName
argument_list|(
name|TEXT_NS
argument_list|,
literal|"p"
argument_list|)
argument_list|,
operator|new
name|TargetElement
argument_list|(
name|XHTML
argument_list|,
literal|"p"
argument_list|)
argument_list|)
expr_stmt|;
comment|// text:h-tags are mapped specifically in startElement/endElement
name|MAPPINGS
operator|.
name|put
argument_list|(
operator|new
name|QName
argument_list|(
name|TEXT_NS
argument_list|,
literal|"line-break"
argument_list|)
argument_list|,
operator|new
name|TargetElement
argument_list|(
name|XHTML
argument_list|,
literal|"br"
argument_list|)
argument_list|)
expr_stmt|;
name|MAPPINGS
operator|.
name|put
argument_list|(
operator|new
name|QName
argument_list|(
name|TEXT_NS
argument_list|,
literal|"list-item"
argument_list|)
argument_list|,
operator|new
name|TargetElement
argument_list|(
name|XHTML
argument_list|,
literal|"li"
argument_list|)
argument_list|)
expr_stmt|;
name|MAPPINGS
operator|.
name|put
argument_list|(
operator|new
name|QName
argument_list|(
name|TEXT_NS
argument_list|,
literal|"note"
argument_list|)
argument_list|,
operator|new
name|TargetElement
argument_list|(
name|XHTML
argument_list|,
literal|"div"
argument_list|)
argument_list|)
expr_stmt|;
name|MAPPINGS
operator|.
name|put
argument_list|(
operator|new
name|QName
argument_list|(
name|OFFICE_NS
argument_list|,
literal|"annotation"
argument_list|)
argument_list|,
operator|new
name|TargetElement
argument_list|(
name|XHTML
argument_list|,
literal|"div"
argument_list|)
argument_list|)
expr_stmt|;
name|MAPPINGS
operator|.
name|put
argument_list|(
operator|new
name|QName
argument_list|(
name|PRESENTATION_NS
argument_list|,
literal|"notes"
argument_list|)
argument_list|,
operator|new
name|TargetElement
argument_list|(
name|XHTML
argument_list|,
literal|"div"
argument_list|)
argument_list|)
expr_stmt|;
name|MAPPINGS
operator|.
name|put
argument_list|(
operator|new
name|QName
argument_list|(
name|DRAW_NS
argument_list|,
literal|"object"
argument_list|)
argument_list|,
operator|new
name|TargetElement
argument_list|(
name|XHTML
argument_list|,
literal|"object"
argument_list|)
argument_list|)
expr_stmt|;
name|MAPPINGS
operator|.
name|put
argument_list|(
operator|new
name|QName
argument_list|(
name|DRAW_NS
argument_list|,
literal|"text-box"
argument_list|)
argument_list|,
operator|new
name|TargetElement
argument_list|(
name|XHTML
argument_list|,
literal|"div"
argument_list|)
argument_list|)
expr_stmt|;
name|MAPPINGS
operator|.
name|put
argument_list|(
operator|new
name|QName
argument_list|(
name|SVG_NS
argument_list|,
literal|"title"
argument_list|)
argument_list|,
operator|new
name|TargetElement
argument_list|(
name|XHTML
argument_list|,
literal|"span"
argument_list|)
argument_list|)
expr_stmt|;
name|MAPPINGS
operator|.
name|put
argument_list|(
operator|new
name|QName
argument_list|(
name|SVG_NS
argument_list|,
literal|"desc"
argument_list|)
argument_list|,
operator|new
name|TargetElement
argument_list|(
name|XHTML
argument_list|,
literal|"span"
argument_list|)
argument_list|)
expr_stmt|;
name|MAPPINGS
operator|.
name|put
argument_list|(
operator|new
name|QName
argument_list|(
name|TEXT_NS
argument_list|,
literal|"span"
argument_list|)
argument_list|,
operator|new
name|TargetElement
argument_list|(
name|XHTML
argument_list|,
literal|"span"
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|HashMap
argument_list|<
name|QName
argument_list|,
name|QName
argument_list|>
name|aAttsMapping
init|=
operator|new
name|HashMap
argument_list|<
name|QName
argument_list|,
name|QName
argument_list|>
argument_list|()
decl_stmt|;
name|aAttsMapping
operator|.
name|put
argument_list|(
operator|new
name|QName
argument_list|(
name|XLINK_NS
argument_list|,
literal|"href"
argument_list|)
argument_list|,
operator|new
name|QName
argument_list|(
literal|"href"
argument_list|)
argument_list|)
expr_stmt|;
name|aAttsMapping
operator|.
name|put
argument_list|(
operator|new
name|QName
argument_list|(
name|XLINK_NS
argument_list|,
literal|"title"
argument_list|)
argument_list|,
operator|new
name|QName
argument_list|(
literal|"title"
argument_list|)
argument_list|)
expr_stmt|;
name|MAPPINGS
operator|.
name|put
argument_list|(
operator|new
name|QName
argument_list|(
name|TEXT_NS
argument_list|,
literal|"a"
argument_list|)
argument_list|,
operator|new
name|TargetElement
argument_list|(
name|XHTML
argument_list|,
literal|"a"
argument_list|,
name|aAttsMapping
argument_list|)
argument_list|)
expr_stmt|;
comment|// create HTML tables from table:-tags
name|MAPPINGS
operator|.
name|put
argument_list|(
operator|new
name|QName
argument_list|(
name|TABLE_NS
argument_list|,
literal|"table"
argument_list|)
argument_list|,
operator|new
name|TargetElement
argument_list|(
name|XHTML
argument_list|,
literal|"table"
argument_list|)
argument_list|)
expr_stmt|;
comment|// repeating of rows is ignored; for columns, see below!
name|MAPPINGS
operator|.
name|put
argument_list|(
operator|new
name|QName
argument_list|(
name|TABLE_NS
argument_list|,
literal|"table-row"
argument_list|)
argument_list|,
operator|new
name|TargetElement
argument_list|(
name|XHTML
argument_list|,
literal|"tr"
argument_list|)
argument_list|)
expr_stmt|;
comment|// special mapping for rowspan/colspan attributes
specifier|final
name|HashMap
argument_list|<
name|QName
argument_list|,
name|QName
argument_list|>
name|tableCellAttsMapping
init|=
operator|new
name|HashMap
argument_list|<
name|QName
argument_list|,
name|QName
argument_list|>
argument_list|()
decl_stmt|;
name|tableCellAttsMapping
operator|.
name|put
argument_list|(
operator|new
name|QName
argument_list|(
name|TABLE_NS
argument_list|,
literal|"number-columns-spanned"
argument_list|)
argument_list|,
operator|new
name|QName
argument_list|(
literal|"colspan"
argument_list|)
argument_list|)
expr_stmt|;
name|tableCellAttsMapping
operator|.
name|put
argument_list|(
operator|new
name|QName
argument_list|(
name|TABLE_NS
argument_list|,
literal|"number-rows-spanned"
argument_list|)
argument_list|,
operator|new
name|QName
argument_list|(
literal|"rowspan"
argument_list|)
argument_list|)
expr_stmt|;
comment|/* TODO: The following is not correct, the cell should be repeated not spanned!          * Code generates a HTML cell, spanning all repeated columns, to make the cell look correct.          * Problems may occur when both spanning and repeating is given, which is not allowed by spec.          * Cell spanning instead of repeating  is not a problem, because OpenOffice uses it          * only for empty cells.          */
name|tableCellAttsMapping
operator|.
name|put
argument_list|(
operator|new
name|QName
argument_list|(
name|TABLE_NS
argument_list|,
literal|"number-columns-repeated"
argument_list|)
argument_list|,
operator|new
name|QName
argument_list|(
literal|"colspan"
argument_list|)
argument_list|)
expr_stmt|;
name|MAPPINGS
operator|.
name|put
argument_list|(
operator|new
name|QName
argument_list|(
name|TABLE_NS
argument_list|,
literal|"table-cell"
argument_list|)
argument_list|,
operator|new
name|TargetElement
argument_list|(
name|XHTML
argument_list|,
literal|"td"
argument_list|,
name|tableCellAttsMapping
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Set
argument_list|<
name|MediaType
argument_list|>
name|getSupportedTypes
parameter_list|(
name|ParseContext
name|context
parameter_list|)
block|{
return|return
name|Collections
operator|.
name|emptySet
argument_list|()
return|;
comment|// not a top-level parser
block|}
specifier|public
name|void
name|parse
parameter_list|(
name|InputStream
name|stream
parameter_list|,
name|ContentHandler
name|handler
parameter_list|,
name|Metadata
name|metadata
parameter_list|,
name|ParseContext
name|context
parameter_list|)
throws|throws
name|IOException
throws|,
name|SAXException
throws|,
name|TikaException
block|{
name|parseInternal
argument_list|(
name|stream
argument_list|,
operator|new
name|XHTMLContentHandler
argument_list|(
name|handler
argument_list|,
name|metadata
argument_list|)
argument_list|,
name|metadata
argument_list|,
name|context
argument_list|)
expr_stmt|;
block|}
name|void
name|parseInternal
parameter_list|(
name|InputStream
name|stream
parameter_list|,
specifier|final
name|ContentHandler
name|handler
parameter_list|,
name|Metadata
name|metadata
parameter_list|,
name|ParseContext
name|context
parameter_list|)
throws|throws
name|IOException
throws|,
name|SAXException
throws|,
name|TikaException
block|{
name|DefaultHandler
name|dh
init|=
operator|new
name|OpenDocumentElementMappingContentHandler
argument_list|(
name|handler
argument_list|,
name|MAPPINGS
argument_list|)
decl_stmt|;
try|try
block|{
name|SAXParserFactory
name|factory
init|=
name|SAXParserFactory
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|factory
operator|.
name|setValidating
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|factory
operator|.
name|setNamespaceAware
argument_list|(
literal|true
argument_list|)
expr_stmt|;
try|try
block|{
name|factory
operator|.
name|setFeature
argument_list|(
name|XMLConstants
operator|.
name|FEATURE_SECURE_PROCESSING
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SAXNotRecognizedException
name|e
parameter_list|)
block|{
comment|// TIKA-329: Some XML parsers do not support the secure-processing
comment|// feature, even though it's required by JAXP in Java 5. Ignoring
comment|// the exception is fine here, deployments without this feature
comment|// are inherently vulnerable to XML denial-of-service attacks.
block|}
name|SAXParser
name|parser
init|=
name|factory
operator|.
name|newSAXParser
argument_list|()
decl_stmt|;
name|parser
operator|.
name|parse
argument_list|(
operator|new
name|CloseShieldInputStream
argument_list|(
name|stream
argument_list|)
argument_list|,
operator|new
name|OfflineContentHandler
argument_list|(
operator|new
name|NSNormalizerContentHandler
argument_list|(
name|dh
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParserConfigurationException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|TikaException
argument_list|(
literal|"XML parser configuration error"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

