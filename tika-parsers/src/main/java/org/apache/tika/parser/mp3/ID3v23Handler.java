begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|mp3
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|exception
operator|.
name|TikaException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|mp3
operator|.
name|ID3v2Frame
operator|.
name|RawTag
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|mp3
operator|.
name|ID3v2Frame
operator|.
name|RawTagIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_comment
comment|/**  * This is used to parse ID3 Version 2.3 Tag information from an MP3 file,  * if available.  *  * @see<a href="http://id3lib.sourceforge.net/id3/id3v2.3.0.html">MP3 ID3 Version 2.3 specification</a>  */
end_comment

begin_class
specifier|public
class|class
name|ID3v23Handler
implements|implements
name|ID3Tags
block|{
specifier|private
name|String
name|title
decl_stmt|;
specifier|private
name|String
name|artist
decl_stmt|;
specifier|private
name|String
name|album
decl_stmt|;
specifier|private
name|String
name|year
decl_stmt|;
specifier|private
name|String
name|composer
decl_stmt|;
specifier|private
name|String
name|genre
decl_stmt|;
specifier|private
name|String
name|trackNumber
decl_stmt|;
specifier|private
name|String
name|albumArtist
decl_stmt|;
specifier|private
name|String
name|disc
decl_stmt|;
specifier|private
name|String
name|compilation
decl_stmt|;
specifier|private
name|List
argument_list|<
name|ID3Comment
argument_list|>
name|comments
init|=
operator|new
name|ArrayList
argument_list|<
name|ID3Comment
argument_list|>
argument_list|()
decl_stmt|;
specifier|public
name|ID3v23Handler
parameter_list|(
name|ID3v2Frame
name|frame
parameter_list|)
throws|throws
name|IOException
throws|,
name|SAXException
throws|,
name|TikaException
block|{
name|RawTagIterator
name|tags
init|=
operator|new
name|RawV23TagIterator
argument_list|(
name|frame
argument_list|)
decl_stmt|;
while|while
condition|(
name|tags
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|RawTag
name|tag
init|=
name|tags
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|tag
operator|.
name|name
operator|.
name|equals
argument_list|(
literal|"TIT2"
argument_list|)
condition|)
block|{
name|title
operator|=
name|getTagString
argument_list|(
name|tag
operator|.
name|data
argument_list|,
literal|0
argument_list|,
name|tag
operator|.
name|data
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|tag
operator|.
name|name
operator|.
name|equals
argument_list|(
literal|"TPE1"
argument_list|)
condition|)
block|{
name|artist
operator|=
name|getTagString
argument_list|(
name|tag
operator|.
name|data
argument_list|,
literal|0
argument_list|,
name|tag
operator|.
name|data
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|tag
operator|.
name|name
operator|.
name|equals
argument_list|(
literal|"TPE2"
argument_list|)
condition|)
block|{
name|albumArtist
operator|=
name|getTagString
argument_list|(
name|tag
operator|.
name|data
argument_list|,
literal|0
argument_list|,
name|tag
operator|.
name|data
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|tag
operator|.
name|name
operator|.
name|equals
argument_list|(
literal|"TALB"
argument_list|)
condition|)
block|{
name|album
operator|=
name|getTagString
argument_list|(
name|tag
operator|.
name|data
argument_list|,
literal|0
argument_list|,
name|tag
operator|.
name|data
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|tag
operator|.
name|name
operator|.
name|equals
argument_list|(
literal|"TYER"
argument_list|)
condition|)
block|{
name|year
operator|=
name|getTagString
argument_list|(
name|tag
operator|.
name|data
argument_list|,
literal|0
argument_list|,
name|tag
operator|.
name|data
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|tag
operator|.
name|name
operator|.
name|equals
argument_list|(
literal|"TCOM"
argument_list|)
condition|)
block|{
name|composer
operator|=
name|getTagString
argument_list|(
name|tag
operator|.
name|data
argument_list|,
literal|0
argument_list|,
name|tag
operator|.
name|data
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|tag
operator|.
name|name
operator|.
name|equals
argument_list|(
literal|"COMM"
argument_list|)
condition|)
block|{
name|comments
operator|.
name|add
argument_list|(
name|getComment
argument_list|(
name|tag
operator|.
name|data
argument_list|,
literal|0
argument_list|,
name|tag
operator|.
name|data
operator|.
name|length
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|tag
operator|.
name|name
operator|.
name|equals
argument_list|(
literal|"TRCK"
argument_list|)
condition|)
block|{
name|trackNumber
operator|=
name|getTagString
argument_list|(
name|tag
operator|.
name|data
argument_list|,
literal|0
argument_list|,
name|tag
operator|.
name|data
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|tag
operator|.
name|name
operator|.
name|equals
argument_list|(
literal|"TPOS"
argument_list|)
condition|)
block|{
name|disc
operator|=
name|getTagString
argument_list|(
name|tag
operator|.
name|data
argument_list|,
literal|0
argument_list|,
name|tag
operator|.
name|data
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|tag
operator|.
name|name
operator|.
name|equals
argument_list|(
literal|"TCMP"
argument_list|)
condition|)
block|{
name|compilation
operator|=
name|getTagString
argument_list|(
name|tag
operator|.
name|data
argument_list|,
literal|0
argument_list|,
name|tag
operator|.
name|data
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|tag
operator|.
name|name
operator|.
name|equals
argument_list|(
literal|"TCON"
argument_list|)
condition|)
block|{
name|genre
operator|=
name|ID3v22Handler
operator|.
name|extractGenre
argument_list|(
name|getTagString
argument_list|(
name|tag
operator|.
name|data
argument_list|,
literal|0
argument_list|,
name|tag
operator|.
name|data
operator|.
name|length
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|String
name|getTagString
parameter_list|(
name|byte
index|[]
name|data
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|)
block|{
return|return
name|ID3v2Frame
operator|.
name|getTagString
argument_list|(
name|data
argument_list|,
name|offset
argument_list|,
name|length
argument_list|)
return|;
block|}
specifier|private
name|ID3Comment
name|getComment
parameter_list|(
name|byte
index|[]
name|data
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|)
block|{
return|return
name|ID3v2Frame
operator|.
name|getComment
argument_list|(
name|data
argument_list|,
name|offset
argument_list|,
name|length
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|getTagsPresent
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
specifier|public
name|String
name|getTitle
parameter_list|()
block|{
return|return
name|title
return|;
block|}
specifier|public
name|String
name|getArtist
parameter_list|()
block|{
return|return
name|artist
return|;
block|}
specifier|public
name|String
name|getAlbum
parameter_list|()
block|{
return|return
name|album
return|;
block|}
specifier|public
name|String
name|getYear
parameter_list|()
block|{
return|return
name|year
return|;
block|}
specifier|public
name|String
name|getComposer
parameter_list|()
block|{
return|return
name|composer
return|;
block|}
specifier|public
name|List
argument_list|<
name|ID3Comment
argument_list|>
name|getComments
parameter_list|()
block|{
return|return
name|comments
return|;
block|}
specifier|public
name|String
name|getGenre
parameter_list|()
block|{
return|return
name|genre
return|;
block|}
specifier|public
name|String
name|getTrackNumber
parameter_list|()
block|{
return|return
name|trackNumber
return|;
block|}
specifier|public
name|String
name|getAlbumArtist
parameter_list|()
block|{
return|return
name|albumArtist
return|;
block|}
specifier|public
name|String
name|getDisc
parameter_list|()
block|{
return|return
name|disc
return|;
block|}
specifier|public
name|String
name|getCompilation
parameter_list|()
block|{
return|return
name|compilation
return|;
block|}
specifier|private
class|class
name|RawV23TagIterator
extends|extends
name|RawTagIterator
block|{
specifier|private
name|RawV23TagIterator
parameter_list|(
name|ID3v2Frame
name|frame
parameter_list|)
block|{
name|frame
operator|.
name|super
argument_list|(
literal|4
argument_list|,
literal|4
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

