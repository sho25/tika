begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|wordperfect
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|exception
operator|.
name|EncryptedDocumentException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|exception
operator|.
name|TikaException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|exception
operator|.
name|UnsupportedFormatException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|metadata
operator|.
name|Metadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|metadata
operator|.
name|WordPerfect
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|mime
operator|.
name|MediaType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|AbstractParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|ParseContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|sax
operator|.
name|XHTMLContentHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|ContentHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_comment
comment|/**  *<p>Parser for Corel WordPerfect documents. Targets WP6 File Format  * but appears to be compatible with more recent versions too.</p>  * @author Pascal Essiembre   */
end_comment

begin_class
specifier|public
class|class
name|WordPerfectParser
extends|extends
name|AbstractParser
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|8941810225917012232L
decl_stmt|;
specifier|final
specifier|static
name|MediaType
name|WP_BASE
init|=
name|MediaType
operator|.
name|application
argument_list|(
literal|"vnd.wordperfect"
argument_list|)
decl_stmt|;
specifier|final
specifier|static
name|MediaType
name|WP_UNK
init|=
operator|new
name|MediaType
argument_list|(
name|WP_BASE
argument_list|,
literal|"version"
argument_list|,
literal|"unknown"
argument_list|)
decl_stmt|;
specifier|final
specifier|static
name|MediaType
name|WP_5_0
init|=
operator|new
name|MediaType
argument_list|(
name|WP_BASE
argument_list|,
literal|"version"
argument_list|,
literal|"5.0"
argument_list|)
decl_stmt|;
specifier|final
specifier|static
name|MediaType
name|WP_5_1
init|=
operator|new
name|MediaType
argument_list|(
name|WP_BASE
argument_list|,
literal|"version"
argument_list|,
literal|"5.1"
argument_list|)
decl_stmt|;
specifier|final
specifier|static
name|MediaType
name|WP_6_x
init|=
operator|new
name|MediaType
argument_list|(
name|WP_BASE
argument_list|,
literal|"version"
argument_list|,
literal|"6.x"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Set
argument_list|<
name|MediaType
argument_list|>
name|SUPPORTED_TYPES
init|=
name|Collections
operator|.
name|unmodifiableSet
argument_list|(
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|WP_5_0
argument_list|,
name|WP_5_1
argument_list|,
name|WP_6_x
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
annotation|@
name|Override
specifier|public
name|Set
argument_list|<
name|MediaType
argument_list|>
name|getSupportedTypes
parameter_list|(
name|ParseContext
name|context
parameter_list|)
block|{
return|return
name|SUPPORTED_TYPES
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|parse
parameter_list|(
name|InputStream
name|stream
parameter_list|,
name|ContentHandler
name|handler
parameter_list|,
name|Metadata
name|metadata
parameter_list|,
name|ParseContext
name|context
parameter_list|)
throws|throws
name|IOException
throws|,
name|SAXException
throws|,
name|TikaException
block|{
name|WPInputStream
name|wpStream
init|=
operator|new
name|WPInputStream
argument_list|(
name|stream
argument_list|)
decl_stmt|;
name|WPPrefixArea
name|prefixArea
init|=
name|WPPrefixAreaExtractor
operator|.
name|extract
argument_list|(
name|wpStream
argument_list|)
decl_stmt|;
name|ensureFileSupport
argument_list|(
name|prefixArea
argument_list|,
name|metadata
argument_list|)
expr_stmt|;
name|applyMetadata
argument_list|(
name|prefixArea
argument_list|,
name|metadata
argument_list|)
expr_stmt|;
name|extractDocumentArea
argument_list|(
name|prefixArea
argument_list|,
name|wpStream
argument_list|,
operator|new
name|XHTMLContentHandler
argument_list|(
name|handler
argument_list|,
name|metadata
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|extractDocumentArea
parameter_list|(
name|WPPrefixArea
name|prefixArea
parameter_list|,
name|WPInputStream
name|in
parameter_list|,
name|XHTMLContentHandler
name|xhtml
parameter_list|)
throws|throws
name|SAXException
throws|,
name|IOException
block|{
comment|// Move to offset (for some reason skip() did not work).
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|prefixArea
operator|.
name|getDocAreaPointer
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|in
operator|.
name|readWPByte
argument_list|()
expr_stmt|;
block|}
name|xhtml
operator|.
name|startDocument
argument_list|()
expr_stmt|;
name|xhtml
operator|.
name|startElement
argument_list|(
literal|"p"
argument_list|)
expr_stmt|;
name|getDocumentAreaExtractor
argument_list|(
name|prefixArea
argument_list|)
operator|.
name|extract
argument_list|(
name|in
argument_list|,
name|xhtml
argument_list|)
expr_stmt|;
name|xhtml
operator|.
name|endElement
argument_list|(
literal|"p"
argument_list|)
expr_stmt|;
name|xhtml
operator|.
name|endDocument
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|ensureFileSupport
parameter_list|(
name|WPPrefixArea
name|pa
parameter_list|,
name|Metadata
name|metadata
parameter_list|)
throws|throws
name|UnsupportedFormatException
throws|,
name|EncryptedDocumentException
block|{
if|if
condition|(
name|pa
operator|.
name|getMajorVersion
argument_list|()
operator|!=
name|WPPrefixArea
operator|.
name|WP5_MAJOR_VERSION
operator|&&
name|pa
operator|.
name|getMajorVersion
argument_list|()
operator|!=
name|WPPrefixArea
operator|.
name|WP6_MAJOR_VERSION
condition|)
block|{
name|metadata
operator|.
name|set
argument_list|(
name|Metadata
operator|.
name|CONTENT_TYPE
argument_list|,
name|WP_UNK
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|UnsupportedFormatException
argument_list|(
literal|"Parser doesn't recognize this major version: "
operator|+
name|pa
operator|.
name|getMajorVersion
argument_list|()
argument_list|)
throw|;
block|}
if|if
condition|(
name|pa
operator|.
name|isEncrypted
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|EncryptedDocumentException
argument_list|()
throw|;
block|}
block|}
specifier|private
name|void
name|applyMetadata
parameter_list|(
name|WPPrefixArea
name|pa
parameter_list|,
name|Metadata
name|metadata
parameter_list|)
block|{
comment|// Should we force the more precise media type if only the base
comment|// form is found?  Or shall we store a friendly representation
comment|// of the version in a new field?
if|if
condition|(
name|metadata
operator|.
name|get
argument_list|(
name|Metadata
operator|.
name|CONTENT_TYPE
argument_list|)
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|pa
operator|.
name|getMajorVersion
argument_list|()
operator|==
name|WPPrefixArea
operator|.
name|WP6_MAJOR_VERSION
condition|)
block|{
name|metadata
operator|.
name|set
argument_list|(
name|Metadata
operator|.
name|CONTENT_TYPE
argument_list|,
name|WP_6_x
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|pa
operator|.
name|getMinorVersion
argument_list|()
operator|==
name|WPPrefixArea
operator|.
name|WP5_0_MINOR_VERSION
condition|)
block|{
name|metadata
operator|.
name|set
argument_list|(
name|Metadata
operator|.
name|CONTENT_TYPE
argument_list|,
name|WP_5_0
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|pa
operator|.
name|getMinorVersion
argument_list|()
operator|==
name|WPPrefixArea
operator|.
name|WP5_1_MINOR_VERSION
condition|)
block|{
name|metadata
operator|.
name|set
argument_list|(
name|Metadata
operator|.
name|CONTENT_TYPE
argument_list|,
name|WP_5_1
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|metadata
operator|.
name|set
argument_list|(
name|Metadata
operator|.
name|CONTENT_TYPE
argument_list|,
name|WP_BASE
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|metadata
operator|.
name|set
argument_list|(
name|WordPerfect
operator|.
name|FILE_ID
argument_list|,
name|pa
operator|.
name|getFileId
argument_list|()
argument_list|)
expr_stmt|;
name|metadata
operator|.
name|set
argument_list|(
name|WordPerfect
operator|.
name|PRODUCT_TYPE
argument_list|,
name|pa
operator|.
name|getProductType
argument_list|()
argument_list|)
expr_stmt|;
name|metadata
operator|.
name|set
argument_list|(
name|WordPerfect
operator|.
name|FILE_TYPE
argument_list|,
name|pa
operator|.
name|getFileType
argument_list|()
argument_list|)
expr_stmt|;
name|metadata
operator|.
name|set
argument_list|(
name|WordPerfect
operator|.
name|MAJOR_VERSION
argument_list|,
name|pa
operator|.
name|getMajorVersion
argument_list|()
argument_list|)
expr_stmt|;
name|metadata
operator|.
name|set
argument_list|(
name|WordPerfect
operator|.
name|MINOR_VERSION
argument_list|,
name|pa
operator|.
name|getMinorVersion
argument_list|()
argument_list|)
expr_stmt|;
name|metadata
operator|.
name|set
argument_list|(
name|WordPerfect
operator|.
name|ENCRYPTED
argument_list|,
name|Boolean
operator|.
name|toString
argument_list|(
name|pa
operator|.
name|isEncrypted
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|pa
operator|.
name|getFileSize
argument_list|()
operator|>
operator|-
literal|1
condition|)
block|{
name|metadata
operator|.
name|set
argument_list|(
name|WordPerfect
operator|.
name|FILE_SIZE
argument_list|,
name|Long
operator|.
name|toString
argument_list|(
name|pa
operator|.
name|getFileSize
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|WPDocumentAreaExtractor
name|getDocumentAreaExtractor
parameter_list|(
name|WPPrefixArea
name|prefixArea
parameter_list|)
block|{
if|if
condition|(
name|prefixArea
operator|.
name|getMajorVersion
argument_list|()
operator|==
name|WPPrefixArea
operator|.
name|WP6_MAJOR_VERSION
condition|)
block|{
return|return
operator|new
name|WP6DocumentAreaExtractor
argument_list|()
return|;
block|}
comment|// we can safely assume v5 as exception would have been thrown
return|return
operator|new
name|WP5DocumentAreaExtractor
argument_list|()
return|;
block|}
block|}
end_class

end_unit

