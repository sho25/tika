begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *   *     http://www.apache.org/licenses/LICENSE-2.0  *   * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|strings
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|UnsupportedEncodingException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|metadata
operator|.
name|Metadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|mime
operator|.
name|MediaType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|AbstractParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|ParseContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|sax
operator|.
name|XHTMLContentHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|ContentHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_comment
comment|/**  * Parser to extract printable Latin1 strings from arbitrary files with pure  * java. Useful for binary or unknown files, for files without a specific parser  * and for corrupted ones causing a TikaException as a fallback parser.  *   * Currently the parser does a best effort to extract Latin1 strings, used by  * Western European languages, encoded with ISO-8859-1, UTF-8 or UTF-16 charsets  * within the same file.  *   * The implementation is optimized for fast parsing with only one pass.  */
end_comment

begin_class
specifier|public
class|class
name|Latin1StringsParser
extends|extends
name|AbstractParser
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
comment|/**      * The set of supported types      */
specifier|private
specifier|static
specifier|final
name|Set
argument_list|<
name|MediaType
argument_list|>
name|SUPPORTED_TYPES
init|=
name|getTypes
argument_list|()
decl_stmt|;
comment|/**      * The valid ISO-8859-1 character map.      */
specifier|private
specifier|static
specifier|final
name|boolean
index|[]
name|isChar
init|=
name|getCharMap
argument_list|()
decl_stmt|;
comment|/**      * The size of the internal buffers.      */
specifier|private
specifier|static
name|int
name|BUF_SIZE
init|=
literal|64
operator|*
literal|1024
decl_stmt|;
comment|/**      * The minimum size of a character sequence to be extracted.      */
specifier|private
name|int
name|minSize
init|=
literal|4
decl_stmt|;
comment|/**      * The output buffer.      */
specifier|private
name|byte
index|[]
name|output
init|=
operator|new
name|byte
index|[
name|BUF_SIZE
index|]
decl_stmt|;
comment|/**      * The input buffer.      */
specifier|private
name|byte
index|[]
name|input
init|=
operator|new
name|byte
index|[
name|BUF_SIZE
index|]
decl_stmt|;
comment|/**      * The temporary position into the output buffer.      */
specifier|private
name|int
name|tmpPos
init|=
literal|0
decl_stmt|;
comment|/**      * The current position into the output buffer.      */
specifier|private
name|int
name|outPos
init|=
literal|0
decl_stmt|;
comment|/**      * The number of bytes into the input buffer.      */
specifier|private
name|int
name|inSize
init|=
literal|0
decl_stmt|;
comment|/**      * The position into the input buffer.      */
specifier|private
name|int
name|inPos
init|=
literal|0
decl_stmt|;
comment|/**      * The output content handler.      */
specifier|private
name|XHTMLContentHandler
name|xhtml
decl_stmt|;
comment|/**      * Returns the minimum size of a character sequence to be extracted.      *       * @return the minimum size of a character sequence      */
specifier|public
name|int
name|getMinSize
parameter_list|()
block|{
return|return
name|minSize
return|;
block|}
comment|/**      * Sets the minimum size of a character sequence to be extracted.      *       * @param minSize      *            the minimum size of a character sequence      */
specifier|public
name|void
name|setMinSize
parameter_list|(
name|int
name|minSize
parameter_list|)
block|{
name|this
operator|.
name|minSize
operator|=
name|minSize
expr_stmt|;
block|}
comment|/**      * Populates the valid ISO-8859-1 character map.      *       * @return the valid ISO-8859-1 character map.      */
specifier|private
specifier|static
name|boolean
index|[]
name|getCharMap
parameter_list|()
block|{
name|boolean
index|[]
name|isChar
init|=
operator|new
name|boolean
index|[
literal|256
index|]
decl_stmt|;
for|for
control|(
name|int
name|c
init|=
name|Byte
operator|.
name|MIN_VALUE
init|;
name|c
operator|<=
name|Byte
operator|.
name|MAX_VALUE
condition|;
name|c
operator|++
control|)
if|if
condition|(
operator|(
name|c
operator|>=
literal|0x20
operator|&&
name|c
operator|<=
literal|0x7E
operator|)
operator|||
operator|(
name|c
operator|>=
operator|(
name|byte
operator|)
literal|0xC0
operator|&&
name|c
operator|<=
operator|(
name|byte
operator|)
literal|0xFE
operator|)
operator|||
name|c
operator|==
literal|0x0A
operator|||
name|c
operator|==
literal|0x0D
operator|||
name|c
operator|==
literal|0x09
condition|)
block|{
name|isChar
index|[
name|c
operator|&
literal|0xFF
index|]
operator|=
literal|true
expr_stmt|;
block|}
return|return
name|isChar
return|;
block|}
comment|/**      * Returns the set of supported types.      *       * @return the set of supported types      */
specifier|private
specifier|static
name|Set
argument_list|<
name|MediaType
argument_list|>
name|getTypes
parameter_list|()
block|{
name|HashSet
argument_list|<
name|MediaType
argument_list|>
name|supportedTypes
init|=
operator|new
name|HashSet
argument_list|<
name|MediaType
argument_list|>
argument_list|()
decl_stmt|;
name|supportedTypes
operator|.
name|add
argument_list|(
name|MediaType
operator|.
name|OCTET_STREAM
argument_list|)
expr_stmt|;
return|return
name|supportedTypes
return|;
block|}
comment|/**      * Tests if the byte is a ISO-8859-1 char.      *       * @param c      *            the byte to test.      *       * @return if the byte is a char.      */
specifier|private
specifier|static
specifier|final
name|boolean
name|isChar
parameter_list|(
name|byte
name|c
parameter_list|)
block|{
return|return
name|isChar
index|[
name|c
operator|&
literal|0xFF
index|]
return|;
block|}
comment|/**      * Flushes the internal output buffer to the content handler.      *       * @throws UnsupportedEncodingException      * @throws SAXException      */
specifier|private
name|void
name|flushBuffer
parameter_list|()
throws|throws
name|UnsupportedEncodingException
throws|,
name|SAXException
block|{
if|if
condition|(
name|tmpPos
operator|-
name|outPos
operator|>=
name|minSize
condition|)
name|outPos
operator|=
name|tmpPos
operator|-
name|minSize
expr_stmt|;
name|xhtml
operator|.
name|characters
argument_list|(
operator|new
name|String
argument_list|(
name|output
argument_list|,
literal|0
argument_list|,
name|outPos
argument_list|,
literal|"windows-1252"
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|k
init|=
literal|0
init|;
name|k
operator|<
name|tmpPos
operator|-
name|outPos
condition|;
name|k
operator|++
control|)
name|output
index|[
name|k
index|]
operator|=
name|output
index|[
name|outPos
operator|+
name|k
index|]
expr_stmt|;
name|tmpPos
operator|=
name|tmpPos
operator|-
name|outPos
expr_stmt|;
name|outPos
operator|=
literal|0
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Set
argument_list|<
name|MediaType
argument_list|>
name|getSupportedTypes
parameter_list|(
name|ParseContext
name|arg0
parameter_list|)
block|{
return|return
name|SUPPORTED_TYPES
return|;
block|}
comment|/**      * @see org.apache.tika.parser.Parser#parse(java.io.InputStream,      *      org.xml.sax.ContentHandler, org.apache.tika.metadata.Metadata,      *      org.apache.tika.parser.ParseContext)      */
annotation|@
name|Override
specifier|public
name|void
name|parse
parameter_list|(
name|InputStream
name|stream
parameter_list|,
name|ContentHandler
name|handler
parameter_list|,
name|Metadata
name|metadata
parameter_list|,
name|ParseContext
name|context
parameter_list|)
throws|throws
name|IOException
throws|,
name|SAXException
block|{
comment|/*          * Creates a new instance because the object is not immutable.          */
operator|new
name|Latin1StringsParser
argument_list|()
operator|.
name|doParse
argument_list|(
name|stream
argument_list|,
name|handler
argument_list|,
name|metadata
argument_list|,
name|context
argument_list|)
expr_stmt|;
block|}
comment|/**      * Does a best effort to extract Latin1 strings encoded with ISO-8859-1,      * UTF-8 or UTF-16. Valid chars are saved into the output buffer and the      * temporary buffer position is incremented. When an invalid char is read,      * the difference of the temporary and current buffer position is checked.      * If it is greater than the minimum string size, the current buffer      * position is updated to the temp position. If it is not, the temp position      * is reseted to the current position.      *       * @param stream      *            the input stream.      * @param handler      *            the output content handler      * @param metadata      *            the metadata of the file      * @param context      *            the parsing context      * @throws IOException      *             if an io error occurs      * @throws SAXException      *             if a sax error occurs      */
specifier|private
name|void
name|doParse
parameter_list|(
name|InputStream
name|stream
parameter_list|,
name|ContentHandler
name|handler
parameter_list|,
name|Metadata
name|metadata
parameter_list|,
name|ParseContext
name|context
parameter_list|)
throws|throws
name|IOException
throws|,
name|SAXException
block|{
name|tmpPos
operator|=
literal|0
expr_stmt|;
name|outPos
operator|=
literal|0
expr_stmt|;
name|xhtml
operator|=
operator|new
name|XHTMLContentHandler
argument_list|(
name|handler
argument_list|,
name|metadata
argument_list|)
expr_stmt|;
name|xhtml
operator|.
name|startDocument
argument_list|()
expr_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
do|do
block|{
name|inSize
operator|=
literal|0
expr_stmt|;
while|while
condition|(
operator|(
name|i
operator|=
name|stream
operator|.
name|read
argument_list|(
name|input
argument_list|,
name|inSize
argument_list|,
name|BUF_SIZE
operator|-
name|inSize
argument_list|)
operator|)
operator|>
literal|0
condition|)
block|{
name|inSize
operator|+=
name|i
expr_stmt|;
block|}
name|inPos
operator|=
literal|0
expr_stmt|;
while|while
condition|(
name|inPos
operator|<
name|inSize
condition|)
block|{
name|byte
name|c
init|=
name|input
index|[
name|inPos
operator|++
index|]
decl_stmt|;
name|boolean
name|utf8
init|=
literal|false
decl_stmt|;
comment|/*                  * Test for a possible UTF8 encoded char                  */
if|if
condition|(
name|c
operator|==
operator|(
name|byte
operator|)
literal|0xC3
condition|)
block|{
name|byte
name|c_
init|=
name|inPos
operator|<
name|inSize
condition|?
name|input
index|[
name|inPos
operator|++
index|]
else|:
operator|(
name|byte
operator|)
name|stream
operator|.
name|read
argument_list|()
decl_stmt|;
comment|/*                      * Test if the next byte is in the valid UTF8 range                      */
if|if
condition|(
name|c_
operator|>=
operator|(
name|byte
operator|)
literal|0x80
operator|&&
name|c_
operator|<=
operator|(
name|byte
operator|)
literal|0xBF
condition|)
block|{
name|utf8
operator|=
literal|true
expr_stmt|;
name|output
index|[
name|tmpPos
operator|++
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
name|c_
operator|+
literal|0x40
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|output
index|[
name|tmpPos
operator|++
index|]
operator|=
name|c
expr_stmt|;
name|c
operator|=
name|c_
expr_stmt|;
block|}
if|if
condition|(
name|tmpPos
operator|==
name|BUF_SIZE
condition|)
name|flushBuffer
argument_list|()
expr_stmt|;
comment|/*                      * Test for a possible UTF8 encoded char                      */
block|}
elseif|else
if|if
condition|(
name|c
operator|==
operator|(
name|byte
operator|)
literal|0xC2
condition|)
block|{
name|byte
name|c_
init|=
name|inPos
operator|<
name|inSize
condition|?
name|input
index|[
name|inPos
operator|++
index|]
else|:
operator|(
name|byte
operator|)
name|stream
operator|.
name|read
argument_list|()
decl_stmt|;
comment|/*                      * Test if the next byte is in the valid UTF8 range                      */
if|if
condition|(
name|c_
operator|>=
operator|(
name|byte
operator|)
literal|0xA0
operator|&&
name|c_
operator|<=
operator|(
name|byte
operator|)
literal|0xBF
condition|)
block|{
name|utf8
operator|=
literal|true
expr_stmt|;
name|output
index|[
name|tmpPos
operator|++
index|]
operator|=
name|c_
expr_stmt|;
block|}
else|else
block|{
name|output
index|[
name|tmpPos
operator|++
index|]
operator|=
name|c
expr_stmt|;
name|c
operator|=
name|c_
expr_stmt|;
block|}
if|if
condition|(
name|tmpPos
operator|==
name|BUF_SIZE
condition|)
name|flushBuffer
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|utf8
condition|)
comment|/*                      * Test if the byte is a valid char.                      */
if|if
condition|(
name|isChar
argument_list|(
name|c
argument_list|)
condition|)
block|{
name|output
index|[
name|tmpPos
operator|++
index|]
operator|=
name|c
expr_stmt|;
if|if
condition|(
name|tmpPos
operator|==
name|BUF_SIZE
condition|)
name|flushBuffer
argument_list|()
expr_stmt|;
block|}
else|else
block|{
comment|/*                          * Test if the byte is an invalid char, marking a string                          * end. If it is a zero, test 2 positions before or                          * ahead for a valid char, meaning it marks the                          * transition between ISO-8859-1 and UTF16 sequences.                          */
if|if
condition|(
name|c
operator|!=
literal|0
operator|||
operator|(
name|inPos
operator|>=
literal|3
operator|&&
name|isChar
argument_list|(
name|input
index|[
name|inPos
operator|-
literal|3
index|]
argument_list|)
operator|)
operator|||
operator|(
name|inPos
operator|+
literal|1
operator|<
name|inSize
operator|&&
name|isChar
argument_list|(
name|input
index|[
name|inPos
operator|+
literal|1
index|]
argument_list|)
operator|)
condition|)
block|{
if|if
condition|(
name|tmpPos
operator|-
name|outPos
operator|>=
name|minSize
condition|)
block|{
name|output
index|[
name|tmpPos
operator|++
index|]
operator|=
literal|0x0A
expr_stmt|;
name|outPos
operator|=
name|tmpPos
expr_stmt|;
if|if
condition|(
name|tmpPos
operator|==
name|BUF_SIZE
condition|)
name|flushBuffer
argument_list|()
expr_stmt|;
block|}
else|else
name|tmpPos
operator|=
name|outPos
expr_stmt|;
block|}
block|}
block|}
block|}
do|while
condition|(
name|i
operator|!=
operator|-
literal|1
operator|&&
operator|!
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|isInterrupted
argument_list|()
condition|)
do|;
if|if
condition|(
name|tmpPos
operator|-
name|outPos
operator|>=
name|minSize
condition|)
block|{
name|output
index|[
name|tmpPos
operator|++
index|]
operator|=
literal|0x0A
expr_stmt|;
name|outPos
operator|=
name|tmpPos
expr_stmt|;
block|}
name|xhtml
operator|.
name|characters
argument_list|(
operator|new
name|String
argument_list|(
name|output
argument_list|,
literal|0
argument_list|,
name|outPos
argument_list|,
literal|"windows-1252"
argument_list|)
argument_list|)
expr_stmt|;
name|xhtml
operator|.
name|endDocument
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

