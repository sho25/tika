begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|utils
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|codec
operator|.
name|binary
operator|.
name|Base32
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|codec
operator|.
name|binary
operator|.
name|Hex
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|metadata
operator|.
name|Metadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|metadata
operator|.
name|TikaCoreProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|DigestingParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|digest
operator|.
name|CompositeDigester
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|digest
operator|.
name|InputStreamDigester
import|;
end_import

begin_comment
comment|/**  * Implementation of {@link org.apache.tika.parser.DigestingParser.Digester}  * that relies on commons.codec.digest.DigestUtils to calculate digest hashes.  *<p>  * This digester tries to use the regular mark/reset protocol on the InputStream.  * However, this wraps an internal BoundedInputStream, and if the InputStream  * is not fully read, then this will reset the stream and  * spool the InputStream to disk (via TikaInputStream) and then digest the file.  */
end_comment

begin_class
specifier|public
class|class
name|CommonsDigester
extends|extends
name|CompositeDigester
block|{
specifier|public
enum|enum
name|DigestAlgorithm
block|{
comment|//those currently available in commons.digest
name|MD2
argument_list|(
literal|"MD2"
argument_list|)
block|,
name|MD5
argument_list|(
literal|"MD5"
argument_list|)
block|,
name|SHA1
argument_list|(
literal|"SHA-1"
argument_list|)
block|,
name|SHA256
argument_list|(
literal|"SHA-256"
argument_list|)
block|,
name|SHA384
argument_list|(
literal|"SHA-384"
argument_list|)
block|,
name|SHA512
argument_list|(
literal|"SHA-512"
argument_list|)
block|;
specifier|private
specifier|final
name|String
name|javaName
decl_stmt|;
name|DigestAlgorithm
parameter_list|(
name|String
name|javaName
parameter_list|)
block|{
name|this
operator|.
name|javaName
operator|=
name|javaName
expr_stmt|;
block|}
name|String
name|getJavaName
parameter_list|()
block|{
return|return
name|javaName
return|;
block|}
name|String
name|getMetadataKey
parameter_list|()
block|{
return|return
name|TikaCoreProperties
operator|.
name|TIKA_META_PREFIX
operator|+
literal|"digest"
operator|+
name|Metadata
operator|.
name|NAMESPACE_PREFIX_DELIMITER
operator|+
name|this
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
comment|/**      * Include a string representing the comma-separated algorithms to run: e.g. "md5,sha1".      * If you want base 32 encoding instead of hexadecimal, add ":32" to the algorithm, e.g. "md5,sha1:32"      *<p/>      * Will throw an IllegalArgumentException if an algorithm isn't supported      * @param markLimit      * @param algorithmString      */
specifier|public
name|CommonsDigester
parameter_list|(
name|int
name|markLimit
parameter_list|,
name|String
name|algorithmString
parameter_list|)
block|{
name|super
argument_list|(
name|buildDigesters
argument_list|(
name|markLimit
argument_list|,
name|algorithmString
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      *      * @param markLimit limit for mark/reset; after this limit is hit, the      *                  stream is reset and spooled to disk      * @param algorithms algorithms to run      * @deprecated use {@link #CommonsDigester(int, String)}      */
specifier|public
name|CommonsDigester
parameter_list|(
name|int
name|markLimit
parameter_list|,
name|DigestAlgorithm
modifier|...
name|algorithms
parameter_list|)
block|{
name|super
argument_list|(
name|buildDigesters
argument_list|(
name|markLimit
argument_list|,
name|algorithms
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|DigestingParser
operator|.
name|Digester
index|[]
name|buildDigesters
parameter_list|(
name|int
name|markLimit
parameter_list|,
name|DigestAlgorithm
index|[]
name|algorithms
parameter_list|)
block|{
name|DigestingParser
operator|.
name|Digester
index|[]
name|digesters
init|=
operator|new
name|DigestingParser
operator|.
name|Digester
index|[
name|algorithms
operator|.
name|length
index|]
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|DigestAlgorithm
name|algorithm
range|:
name|algorithms
control|)
block|{
name|digesters
index|[
name|i
operator|++
index|]
operator|=
operator|new
name|InputStreamDigester
argument_list|(
name|markLimit
argument_list|,
name|algorithm
operator|.
name|getJavaName
argument_list|()
argument_list|,
name|algorithm
operator|.
name|name
argument_list|()
argument_list|,
operator|new
name|HexEncoder
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|digesters
return|;
block|}
comment|/**      * This returns digest algorithms only.  It does not understand the encoding      * syntax, e.g. "MD5:32" (base 32 encoding of MD5).  To parse      * those, see {@link #CommonsDigester(int, String)}.      *      * @deprecated use the {@link #CommonsDigester(int, String)} instead      * @param s comma-delimited (no space) list of algorithms to use: md5,sha256.      * @return      *      */
annotation|@
name|Deprecated
specifier|public
specifier|static
name|DigestAlgorithm
index|[]
name|parse
parameter_list|(
name|String
name|s
parameter_list|)
block|{
assert|assert
operator|(
name|s
operator|!=
literal|null
operator|)
assert|;
name|List
argument_list|<
name|DigestAlgorithm
argument_list|>
name|ret
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|algoString
range|:
name|s
operator|.
name|split
argument_list|(
literal|","
argument_list|)
control|)
block|{
name|ret
operator|.
name|add
argument_list|(
name|getDigestAlgorithm
argument_list|(
name|algoString
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
operator|.
name|toArray
argument_list|(
operator|new
name|DigestAlgorithm
index|[
name|ret
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|DigestAlgorithm
name|getDigestAlgorithm
parameter_list|(
name|String
name|algoString
parameter_list|)
block|{
name|String
name|uc
init|=
name|algoString
operator|.
name|toUpperCase
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|)
decl_stmt|;
if|if
condition|(
name|uc
operator|.
name|equals
argument_list|(
name|DigestAlgorithm
operator|.
name|MD2
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|DigestAlgorithm
operator|.
name|MD2
return|;
block|}
elseif|else
if|if
condition|(
name|uc
operator|.
name|equals
argument_list|(
name|DigestAlgorithm
operator|.
name|MD5
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|DigestAlgorithm
operator|.
name|MD5
return|;
block|}
elseif|else
if|if
condition|(
name|uc
operator|.
name|equals
argument_list|(
name|DigestAlgorithm
operator|.
name|SHA1
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|DigestAlgorithm
operator|.
name|SHA1
return|;
block|}
elseif|else
if|if
condition|(
name|uc
operator|.
name|equals
argument_list|(
name|DigestAlgorithm
operator|.
name|SHA256
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|DigestAlgorithm
operator|.
name|SHA256
return|;
block|}
elseif|else
if|if
condition|(
name|uc
operator|.
name|equals
argument_list|(
name|DigestAlgorithm
operator|.
name|SHA384
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|DigestAlgorithm
operator|.
name|SHA384
return|;
block|}
elseif|else
if|if
condition|(
name|uc
operator|.
name|equals
argument_list|(
name|DigestAlgorithm
operator|.
name|SHA512
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|DigestAlgorithm
operator|.
name|SHA512
return|;
block|}
else|else
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|DigestAlgorithm
name|algo
range|:
name|DigestAlgorithm
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|i
operator|++
operator|>
literal|0
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
name|algo
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Couldn't match "
operator|+
name|algoString
operator|+
literal|" with any of: "
operator|+
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|static
name|DigestingParser
operator|.
name|Digester
index|[]
name|buildDigesters
parameter_list|(
name|int
name|markLimit
parameter_list|,
name|String
name|digesterDef
parameter_list|)
block|{
name|String
index|[]
name|digests
init|=
name|digesterDef
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
name|DigestingParser
operator|.
name|Digester
index|[]
name|digesters
init|=
operator|new
name|DigestingParser
operator|.
name|Digester
index|[
name|digests
operator|.
name|length
index|]
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|String
name|digest
range|:
name|digests
control|)
block|{
name|String
index|[]
name|parts
init|=
name|digest
operator|.
name|split
argument_list|(
literal|":"
argument_list|)
decl_stmt|;
name|DigestingParser
operator|.
name|Encoder
name|encoder
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|parts
operator|.
name|length
operator|>
literal|1
condition|)
block|{
if|if
condition|(
name|parts
index|[
literal|1
index|]
operator|.
name|equals
argument_list|(
literal|"16"
argument_list|)
condition|)
block|{
name|encoder
operator|=
operator|new
name|HexEncoder
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|parts
index|[
literal|1
index|]
operator|.
name|equals
argument_list|(
literal|"32"
argument_list|)
condition|)
block|{
name|encoder
operator|=
operator|new
name|Base32Encoder
argument_list|()
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Value must be '16' or '32'"
argument_list|)
throw|;
block|}
block|}
else|else
block|{
name|encoder
operator|=
operator|new
name|HexEncoder
argument_list|()
expr_stmt|;
block|}
name|DigestAlgorithm
name|digestAlgorithm
init|=
name|getDigestAlgorithm
argument_list|(
name|parts
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|digesters
index|[
name|i
operator|++
index|]
operator|=
operator|new
name|InputStreamDigester
argument_list|(
name|markLimit
argument_list|,
name|digestAlgorithm
operator|.
name|getJavaName
argument_list|()
argument_list|,
name|digestAlgorithm
operator|.
name|name
argument_list|()
argument_list|,
name|encoder
argument_list|)
expr_stmt|;
block|}
return|return
name|digesters
return|;
block|}
specifier|private
specifier|static
class|class
name|HexEncoder
implements|implements
name|DigestingParser
operator|.
name|Encoder
block|{
annotation|@
name|Override
specifier|public
name|String
name|encode
parameter_list|(
name|byte
index|[]
name|bytes
parameter_list|)
block|{
return|return
name|Hex
operator|.
name|encodeHexString
argument_list|(
name|bytes
argument_list|)
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|Base32Encoder
implements|implements
name|DigestingParser
operator|.
name|Encoder
block|{
annotation|@
name|Override
specifier|public
name|String
name|encode
parameter_list|(
name|byte
index|[]
name|bytes
parameter_list|)
block|{
return|return
operator|new
name|Base32
argument_list|()
operator|.
name|encodeToString
argument_list|(
name|bytes
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

