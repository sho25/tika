begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|html
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|detect
operator|.
name|EncodingDetector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|metadata
operator|.
name|Metadata
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|Charset
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|IllegalCharsetNameException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|UnsupportedCharsetException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|IntStream
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|html
operator|.
name|StrictHtmlEncodingDetector
operator|.
name|SequenceMatcher
operator|.
name|caseInsensitive
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|html
operator|.
name|StrictHtmlEncodingDetector
operator|.
name|SingleByteMatcher
operator|.
name|matchers
import|;
end_import

begin_comment
comment|/**  * This is a strict html encoding detector that enforces the standard  * far more strictly than the HtmlEncodingDetector.  */
end_comment

begin_class
specifier|public
class|class
name|StrictHtmlEncodingDetector
implements|implements
name|EncodingDetector
block|{
specifier|private
specifier|static
specifier|final
name|String
name|CHARSET_LABEL_FILE
init|=
literal|"whatwg-encoding-labels.tsv"
decl_stmt|;
specifier|private
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|Charset
argument_list|>
name|CHARSET_LABELS
init|=
name|getCharsetLabels
argument_list|()
decl_stmt|;
specifier|private
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|Charset
argument_list|>
name|getCharsetLabels
parameter_list|()
block|{
name|String
name|path
init|=
name|StrictHtmlEncodingDetector
operator|.
name|class
operator|.
name|getPackage
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|replace
argument_list|(
literal|'.'
argument_list|,
literal|'/'
argument_list|)
decl_stmt|;
name|String
name|filename
init|=
literal|'/'
operator|+
name|path
operator|+
literal|'/'
operator|+
name|CHARSET_LABEL_FILE
decl_stmt|;
name|InputStream
name|inputStream
init|=
name|StrictHtmlEncodingDetector
operator|.
name|class
operator|.
name|getResourceAsStream
argument_list|(
name|filename
argument_list|)
decl_stmt|;
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|inputStream
argument_list|,
literal|"Missing charset label mapping file : "
operator|+
name|filename
argument_list|)
expr_stmt|;
try|try
init|(
name|BufferedReader
name|buffer
init|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|inputStream
argument_list|,
name|StandardCharsets
operator|.
name|US_ASCII
argument_list|)
argument_list|)
init|)
block|{
return|return
name|buffer
operator|.
name|lines
argument_list|()
operator|.
name|filter
argument_list|(
name|s
lambda|->
operator|!
name|s
operator|.
name|startsWith
argument_list|(
literal|"#"
argument_list|)
argument_list|)
operator|.
name|map
argument_list|(
name|s
lambda|->
name|s
operator|.
name|split
argument_list|(
literal|"\t"
argument_list|)
argument_list|)
operator|.
name|filter
argument_list|(
name|parts
lambda|->
name|parts
operator|.
name|length
operator|>=
literal|2
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toMap
argument_list|(
name|parts
lambda|->
name|parts
index|[
literal|0
index|]
argument_list|,
name|StrictHtmlEncodingDetector
operator|::
name|charsetFromStandard
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|UncheckedIOException
argument_list|(
literal|"Unable to read the charset label mapping"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|static
name|Charset
name|charsetFromStandard
parameter_list|(
name|String
index|[]
name|names
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|names
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
try|try
block|{
return|return
name|Charset
operator|.
name|forName
argument_list|(
name|names
index|[
literal|1
index|]
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IllegalCharsetNameException
decl||
name|UnsupportedCharsetException
name|e
parameter_list|)
block|{
comment|/* pass */
block|}
block|}
comment|// The only single-byte charset extended charset that must be present on every Java platform
return|return
name|StandardCharsets
operator|.
name|ISO_8859_1
return|;
block|}
specifier|private
specifier|static
name|Charset
name|getCharsetByLabel
parameter_list|(
name|String
name|label
parameter_list|)
block|{
if|if
condition|(
name|label
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|label
operator|=
name|label
operator|.
name|trim
argument_list|()
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|US
argument_list|)
expr_stmt|;
return|return
name|CHARSET_LABELS
operator|.
name|get
argument_list|(
name|label
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Charset
name|detect
parameter_list|(
name|InputStream
name|input
parameter_list|,
name|Metadata
name|metadata
parameter_list|)
throws|throws
name|IOException
block|{
name|PreScanner
name|preScanner
init|=
operator|new
name|PreScanner
argument_list|(
name|input
argument_list|)
decl_stmt|;
comment|// If there is a BOM at the beginning, the detection does not go further
name|Charset
name|bomCharset
init|=
name|preScanner
operator|.
name|detectBOM
argument_list|()
decl_stmt|;
if|if
condition|(
name|bomCharset
operator|!=
literal|null
condition|)
return|return
name|bomCharset
return|;
comment|// Assume that if there was a charset specified either by the end user or the transport level,
comment|// it was stored in the metadata
name|String
name|incomingCharsetName
init|=
name|metadata
operator|.
name|get
argument_list|(
name|Metadata
operator|.
name|CONTENT_ENCODING
argument_list|)
decl_stmt|;
if|if
condition|(
name|incomingCharsetName
operator|!=
literal|null
condition|)
block|{
name|Charset
name|incomingCharset
init|=
name|getCharsetByLabel
argument_list|(
name|incomingCharsetName
argument_list|)
decl_stmt|;
if|if
condition|(
name|incomingCharset
operator|!=
literal|null
condition|)
return|return
name|incomingCharset
return|;
block|}
return|return
name|preScanner
operator|.
name|scan
argument_list|()
return|;
block|}
specifier|static
class|class
name|PreScanner
block|{
specifier|private
specifier|static
specifier|final
name|Pattern
name|META_CHARSET_PATTERN
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"charset\\s*=\\s*([\"']?)([^\"'\\s;]+)\\1"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|ByteMatcher
name|COMMENT_START
init|=
operator|new
name|SequenceMatcher
argument_list|(
literal|"<!--"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|ByteMatcher
name|COMMENT_END
init|=
operator|new
name|SequenceMatcher
argument_list|(
literal|"-->"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|ByteMatcher
name|LETTER
init|=
operator|new
name|OrMatcher
argument_list|(
operator|new
name|RangeMatcher
argument_list|(
operator|(
name|byte
operator|)
literal|'a'
argument_list|,
operator|(
name|byte
operator|)
literal|'z'
argument_list|)
argument_list|,
operator|new
name|RangeMatcher
argument_list|(
operator|(
name|byte
operator|)
literal|'A'
argument_list|,
operator|(
name|byte
operator|)
literal|'Z'
argument_list|)
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|ByteMatcher
name|SPACE
init|=
operator|new
name|OrMatcher
argument_list|(
name|matchers
argument_list|(
literal|0x09
argument_list|,
literal|0x0A
argument_list|,
literal|0x0C
argument_list|,
literal|0x0D
argument_list|,
literal|0x20
argument_list|)
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|ByteMatcher
name|SLASH
init|=
operator|new
name|SingleByteMatcher
argument_list|(
operator|(
name|byte
operator|)
literal|'/'
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|ByteMatcher
name|EQUAL
init|=
operator|new
name|SingleByteMatcher
argument_list|(
operator|(
name|byte
operator|)
literal|'='
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|ByteMatcher
name|TAG_END
init|=
operator|new
name|SingleByteMatcher
argument_list|(
operator|(
name|byte
operator|)
literal|'>'
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|ByteMatcher
name|SINGLE_QUOTE
init|=
operator|new
name|SingleByteMatcher
argument_list|(
operator|(
name|byte
operator|)
literal|'\''
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|ByteMatcher
name|DOUBLE_QUOTE
init|=
operator|new
name|SingleByteMatcher
argument_list|(
operator|(
name|byte
operator|)
literal|'"'
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|ByteMatcher
name|QUOTE
init|=
operator|new
name|OrMatcher
argument_list|(
name|SINGLE_QUOTE
argument_list|,
name|DOUBLE_QUOTE
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|ByteMatcher
name|TAG_END_OR_SLASH
init|=
operator|new
name|OrMatcher
argument_list|(
name|SLASH
argument_list|,
name|TAG_END
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|ByteMatcher
name|SPACE_OR_SLASH
init|=
operator|new
name|OrMatcher
argument_list|(
name|SPACE
argument_list|,
name|SLASH
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|ByteMatcher
name|SPACE_OR_TAG_END
init|=
operator|new
name|OrMatcher
argument_list|(
name|SPACE
argument_list|,
name|TAG_END
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|ByteMatcher
name|META_START
init|=
operator|new
name|SequenceMatcher
argument_list|(
name|caseInsensitive
argument_list|(
literal|"<meta"
argument_list|)
argument_list|,
name|SPACE_OR_SLASH
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|ByteMatcher
name|TAG_START
init|=
operator|new
name|SequenceMatcher
argument_list|(
operator|new
name|SingleByteMatcher
argument_list|(
operator|(
name|byte
operator|)
literal|'<'
argument_list|)
argument_list|,
operator|new
name|OrMatcher
argument_list|(
name|SLASH
argument_list|,
name|LETTER
argument_list|)
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|ByteMatcher
name|TAG_BODY
init|=
operator|new
name|NegativeMatcher
argument_list|(
operator|new
name|OrMatcher
argument_list|(
name|SPACE
argument_list|,
name|TAG_END
argument_list|)
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|ByteMatcher
name|SPECIAL_TAG_START
init|=
operator|new
name|SequenceMatcher
argument_list|(
operator|new
name|SingleByteMatcher
argument_list|(
operator|(
name|byte
operator|)
literal|'<'
argument_list|)
argument_list|,
operator|new
name|OrMatcher
argument_list|(
name|matchers
argument_list|(
literal|"!/?"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|ByteMatcher
name|UTF8_BOM
init|=
operator|new
name|SequenceMatcher
argument_list|(
name|matchers
argument_list|(
literal|0xEF
argument_list|,
literal|0xBB
argument_list|,
literal|0xBF
argument_list|)
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|ByteMatcher
name|UTF16_BE_BOM
init|=
operator|new
name|SequenceMatcher
argument_list|(
name|matchers
argument_list|(
literal|0xFE
argument_list|,
literal|0xFF
argument_list|)
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|ByteMatcher
name|UTF16_LE_BOM
init|=
operator|new
name|SequenceMatcher
argument_list|(
name|matchers
argument_list|(
literal|0xFF
argument_list|,
literal|0xFE
argument_list|)
argument_list|)
decl_stmt|;
name|PushbackInputStream
name|stream
decl_stmt|;
specifier|private
name|CharsetDetectionResult
name|detectedCharset
init|=
operator|new
name|CharsetDetectionResult
argument_list|()
decl_stmt|;
specifier|public
name|PreScanner
parameter_list|(
name|InputStream
name|inputStream
parameter_list|)
block|{
name|this
operator|.
name|stream
operator|=
operator|new
name|PushbackInputStream
argument_list|(
name|inputStream
argument_list|,
literal|32
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Charset
name|scan
parameter_list|()
block|{
while|while
condition|(
name|processAtLeastOneByte
argument_list|()
condition|)
block|{
if|if
condition|(
name|detectedCharset
operator|.
name|isFound
argument_list|()
condition|)
block|{
return|return
name|detectedCharset
operator|.
name|getCharset
argument_list|()
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|private
name|Charset
name|detectBOM
parameter_list|()
block|{
try|try
block|{
if|if
condition|(
name|UTF8_BOM
operator|.
name|matches
argument_list|(
name|stream
argument_list|)
condition|)
return|return
name|StandardCharsets
operator|.
name|UTF_8
return|;
elseif|else
if|if
condition|(
name|UTF16_BE_BOM
operator|.
name|matches
argument_list|(
name|stream
argument_list|)
condition|)
return|return
name|StandardCharsets
operator|.
name|UTF_16BE
return|;
elseif|else
if|if
condition|(
name|UTF16_LE_BOM
operator|.
name|matches
argument_list|(
name|stream
argument_list|)
condition|)
return|return
name|StandardCharsets
operator|.
name|UTF_16LE
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|/* stream could not be read, also return null */
block|}
return|return
literal|null
return|;
block|}
specifier|private
name|boolean
name|processAtLeastOneByte
parameter_list|()
block|{
try|try
block|{
return|return
name|processComment
argument_list|()
operator|||
name|processMeta
argument_list|()
operator|||
name|processTag
argument_list|()
operator|||
name|processSpecialTag
argument_list|()
operator|||
name|processAny
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
block|}
specifier|private
name|boolean
name|processAny
parameter_list|()
throws|throws
name|IOException
block|{
name|int
name|read
init|=
name|stream
operator|.
name|read
argument_list|()
decl_stmt|;
return|return
name|read
operator|!=
operator|-
literal|1
return|;
block|}
specifier|private
name|boolean
name|hasBytes
parameter_list|()
throws|throws
name|IOException
block|{
name|int
name|read
init|=
name|stream
operator|.
name|read
argument_list|()
decl_stmt|;
if|if
condition|(
name|read
operator|!=
operator|-
literal|1
condition|)
name|stream
operator|.
name|unread
argument_list|(
name|read
argument_list|)
expr_stmt|;
return|return
name|read
operator|!=
operator|-
literal|1
return|;
block|}
specifier|private
name|boolean
name|processComment
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|COMMENT_START
operator|.
name|matches
argument_list|(
name|stream
argument_list|)
condition|)
block|{
comment|// The two '-' in the '-->' sequence can be the same as those in the '<!--' sequence.
name|stream
operator|.
name|unread
argument_list|(
literal|"--"
operator|.
name|getBytes
argument_list|(
name|StandardCharsets
operator|.
name|US_ASCII
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|COMMENT_END
operator|.
name|advanceUntilMatches
argument_list|(
name|stream
argument_list|)
return|;
block|}
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|processTag
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|TAG_START
operator|.
name|matches
argument_list|(
name|stream
argument_list|)
condition|)
block|{
name|TAG_BODY
operator|.
name|skipAll
argument_list|(
name|stream
argument_list|)
expr_stmt|;
while|while
condition|(
name|getAttribute
argument_list|()
operator|!=
literal|null
condition|)
block|{
comment|/*ignore the attribute*/
block|}
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|processSpecialTag
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|SPECIAL_TAG_START
operator|.
name|matches
argument_list|(
name|stream
argument_list|)
condition|)
block|{
name|TAG_BODY
operator|.
name|skipAll
argument_list|(
name|stream
argument_list|)
expr_stmt|;
return|return
name|TAG_END
operator|.
name|advanceUntilMatches
argument_list|(
name|stream
argument_list|)
return|;
block|}
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|processMeta
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|META_START
operator|.
name|matches
argument_list|(
name|stream
argument_list|)
condition|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|attributeNames
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|boolean
name|gotPragma
init|=
literal|false
decl_stmt|;
name|Boolean
name|needPragma
init|=
literal|null
decl_stmt|;
name|CharsetDetectionResult
name|charset
init|=
operator|new
name|CharsetDetectionResult
argument_list|()
decl_stmt|;
while|while
condition|(
name|hasBytes
argument_list|()
condition|)
block|{
name|Attribute
name|attribute
init|=
name|getAttribute
argument_list|()
decl_stmt|;
if|if
condition|(
name|attribute
operator|==
literal|null
condition|)
break|break;
if|if
condition|(
name|attributeNames
operator|.
name|contains
argument_list|(
name|attribute
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
continue|continue;
name|attributeNames
operator|.
name|add
argument_list|(
name|attribute
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|attribute
operator|.
name|getName
argument_list|()
condition|)
block|{
case|case
literal|"http-equiv"
case|:
if|if
condition|(
name|attribute
operator|.
name|getValue
argument_list|()
operator|.
name|equals
argument_list|(
literal|"content-type"
argument_list|)
condition|)
name|gotPragma
operator|=
literal|true
expr_stmt|;
break|break;
case|case
literal|"content"
case|:
name|String
name|charsetName
init|=
name|getEncodingFromMeta
argument_list|(
name|attribute
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|charset
operator|.
name|isFound
argument_list|()
operator|&&
name|charsetName
operator|!=
literal|null
condition|)
block|{
name|charset
operator|.
name|find
argument_list|(
name|charsetName
argument_list|)
expr_stmt|;
name|needPragma
operator|=
literal|true
expr_stmt|;
block|}
break|break;
case|case
literal|"charset"
case|:
name|charset
operator|.
name|find
argument_list|(
name|attribute
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|needPragma
operator|=
literal|false
expr_stmt|;
break|break;
default|default:
comment|// Ignore non-charset related attributes
block|}
block|}
if|if
condition|(
name|needPragma
operator|!=
literal|null
operator|&&
operator|!
operator|(
name|needPragma
operator|&&
operator|!
name|gotPragma
operator|)
condition|)
block|{
name|detectedCharset
operator|=
name|charset
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
specifier|private
name|String
name|getEncodingFromMeta
parameter_list|(
name|String
name|attributeValue
parameter_list|)
block|{
name|Matcher
name|matcher
init|=
name|META_CHARSET_PATTERN
operator|.
name|matcher
argument_list|(
name|attributeValue
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|matcher
operator|.
name|find
argument_list|()
condition|)
return|return
literal|null
return|;
return|return
name|matcher
operator|.
name|group
argument_list|(
literal|2
argument_list|)
return|;
block|}
specifier|private
name|Attribute
name|getAttribute
parameter_list|()
throws|throws
name|IOException
block|{
name|SPACE_OR_SLASH
operator|.
name|skipAll
argument_list|(
name|stream
argument_list|)
expr_stmt|;
if|if
condition|(
name|TAG_END
operator|.
name|peekMatches
argument_list|(
name|stream
argument_list|)
condition|)
return|return
literal|null
return|;
name|StringBuilder
name|name
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
while|while
condition|(
operator|!
name|EQUAL
operator|.
name|peekMatches
argument_list|(
name|stream
argument_list|)
operator|||
name|name
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
if|if
condition|(
name|TAG_END_OR_SLASH
operator|.
name|peekMatches
argument_list|(
name|stream
argument_list|)
condition|)
block|{
break|break;
block|}
elseif|else
if|if
condition|(
name|SPACE
operator|.
name|peekMatches
argument_list|(
name|stream
argument_list|)
condition|)
block|{
name|SPACE
operator|.
name|skipAll
argument_list|(
name|stream
argument_list|)
expr_stmt|;
break|break;
block|}
else|else
block|{
name|name
operator|.
name|append
argument_list|(
name|getLowerCaseChar
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|EQUAL
operator|.
name|matches
argument_list|(
name|stream
argument_list|)
condition|)
return|return
operator|new
name|Attribute
argument_list|(
name|name
operator|.
name|toString
argument_list|()
argument_list|,
literal|""
argument_list|)
return|;
name|SPACE
operator|.
name|skipAll
argument_list|(
name|stream
argument_list|)
expr_stmt|;
name|StringBuilder
name|value
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|byte
index|[]
name|quoteMatched
init|=
name|QUOTE
operator|.
name|match
argument_list|(
name|stream
argument_list|)
decl_stmt|;
if|if
condition|(
name|quoteMatched
operator|!=
literal|null
condition|)
block|{
name|char
name|quote
init|=
operator|(
name|char
operator|)
name|quoteMatched
index|[
literal|0
index|]
decl_stmt|;
name|int
name|nextChar
init|=
operator|-
literal|1
decl_stmt|;
while|while
condition|(
name|nextChar
operator|!=
name|quote
condition|)
block|{
if|if
condition|(
name|nextChar
operator|!=
operator|-
literal|1
condition|)
name|value
operator|.
name|append
argument_list|(
operator|(
name|char
operator|)
name|nextChar
argument_list|)
expr_stmt|;
name|nextChar
operator|=
name|getLowerCaseChar
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
while|while
condition|(
operator|!
name|SPACE_OR_TAG_END
operator|.
name|peekMatches
argument_list|(
name|stream
argument_list|)
condition|)
block|{
name|value
operator|.
name|append
argument_list|(
name|getLowerCaseChar
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|new
name|Attribute
argument_list|(
name|name
operator|.
name|toString
argument_list|()
argument_list|,
name|value
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
specifier|private
name|char
name|getLowerCaseChar
parameter_list|()
throws|throws
name|IOException
block|{
name|int
name|nextPoint
init|=
name|stream
operator|.
name|read
argument_list|()
decl_stmt|;
if|if
condition|(
name|nextPoint
operator|==
operator|-
literal|1
condition|)
throw|throw
operator|new
name|IOException
argument_list|()
throw|;
if|if
condition|(
name|nextPoint
operator|>=
literal|'A'
operator|&&
name|nextPoint
operator|<=
literal|'Z'
condition|)
name|nextPoint
operator|+=
literal|0x20
expr_stmt|;
comment|// lowercase
return|return
operator|(
name|char
operator|)
name|nextPoint
return|;
block|}
block|}
specifier|static
class|class
name|Attribute
block|{
name|String
name|name
decl_stmt|;
name|String
name|value
decl_stmt|;
specifier|public
name|Attribute
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|value
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|value
operator|=
name|value
expr_stmt|;
block|}
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
specifier|public
name|String
name|getValue
parameter_list|()
block|{
return|return
name|value
return|;
block|}
block|}
comment|/**      * A detection may either not find a charset, find an invalid charset, or find a valid charset      */
specifier|static
class|class
name|CharsetDetectionResult
block|{
specifier|private
name|boolean
name|found
init|=
literal|false
decl_stmt|;
specifier|private
name|Charset
name|charset
init|=
literal|null
decl_stmt|;
specifier|public
name|CharsetDetectionResult
parameter_list|()
block|{
comment|/* default result: not found */
block|}
specifier|public
name|boolean
name|isFound
parameter_list|()
block|{
return|return
name|found
return|;
block|}
specifier|public
name|void
name|find
parameter_list|(
name|String
name|charsetName
parameter_list|)
block|{
name|this
operator|.
name|found
operator|=
literal|true
expr_stmt|;
name|charsetName
operator|=
name|charsetName
operator|.
name|trim
argument_list|()
expr_stmt|;
if|if
condition|(
literal|"x-user-defined"
operator|.
name|equals
argument_list|(
name|charsetName
argument_list|)
condition|)
name|charsetName
operator|=
literal|"windows-1252"
expr_stmt|;
name|this
operator|.
name|charset
operator|=
name|getCharsetByLabel
argument_list|(
name|charsetName
argument_list|)
expr_stmt|;
comment|// The specification states: If charset is a UTF-16 encoding, then set charset to UTF-8.
if|if
condition|(
name|UTF_16LE
operator|.
name|equals
argument_list|(
name|charset
argument_list|)
operator|||
name|UTF_16BE
operator|.
name|equals
argument_list|(
name|charset
argument_list|)
condition|)
name|charset
operator|=
name|UTF_8
expr_stmt|;
block|}
specifier|public
name|Charset
name|getCharset
parameter_list|()
block|{
comment|// the result may be null even if found is true, in the case there is a charset specified,
comment|// but it is invalid
return|return
name|charset
return|;
block|}
block|}
specifier|static
specifier|abstract
class|class
name|ByteMatcher
block|{
specifier|abstract
name|byte
index|[]
name|match
parameter_list|(
name|PushbackInputStream
name|pushbackInputStream
parameter_list|)
throws|throws
name|IOException
function_decl|;
name|boolean
name|matches
parameter_list|(
name|PushbackInputStream
name|pushbackInputStream
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|this
operator|.
name|match
argument_list|(
name|pushbackInputStream
argument_list|)
operator|!=
literal|null
return|;
block|}
name|boolean
name|advanceUntilMatches
parameter_list|(
name|PushbackInputStream
name|pushbackInputStream
parameter_list|)
throws|throws
name|IOException
block|{
while|while
condition|(
operator|!
name|this
operator|.
name|matches
argument_list|(
name|pushbackInputStream
argument_list|)
condition|)
block|{
name|int
name|nextByte
init|=
name|pushbackInputStream
operator|.
name|read
argument_list|()
decl_stmt|;
if|if
condition|(
name|nextByte
operator|==
operator|-
literal|1
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
name|void
name|skipAll
parameter_list|(
name|PushbackInputStream
name|pushbackInputStream
parameter_list|)
throws|throws
name|IOException
block|{
while|while
condition|(
name|matches
argument_list|(
name|pushbackInputStream
argument_list|)
condition|)
block|{
comment|/* just skip the byte */
block|}
block|}
specifier|public
name|boolean
name|peekMatches
parameter_list|(
name|PushbackInputStream
name|pushbackInputStream
parameter_list|)
throws|throws
name|IOException
block|{
name|byte
index|[]
name|matched
init|=
name|this
operator|.
name|match
argument_list|(
name|pushbackInputStream
argument_list|)
decl_stmt|;
if|if
condition|(
name|matched
operator|!=
literal|null
condition|)
name|pushbackInputStream
operator|.
name|unread
argument_list|(
name|matched
argument_list|)
expr_stmt|;
return|return
name|matched
operator|!=
literal|null
return|;
block|}
block|}
specifier|static
class|class
name|SingleByteMatcher
extends|extends
name|ByteMatcher
block|{
specifier|private
name|byte
name|b
decl_stmt|;
specifier|public
name|SingleByteMatcher
parameter_list|(
name|byte
name|b
parameter_list|)
block|{
name|this
operator|.
name|b
operator|=
name|b
expr_stmt|;
block|}
specifier|public
specifier|static
name|ByteMatcher
index|[]
name|matchers
parameter_list|(
name|String
name|s
parameter_list|)
block|{
return|return
name|matchers
argument_list|(
name|s
operator|.
name|chars
argument_list|()
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|ByteMatcher
index|[]
name|matchers
parameter_list|(
name|int
modifier|...
name|bytes
parameter_list|)
block|{
return|return
name|matchers
argument_list|(
name|IntStream
operator|.
name|of
argument_list|(
name|bytes
argument_list|)
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|ByteMatcher
index|[]
name|matchers
parameter_list|(
name|IntStream
name|byteStream
parameter_list|)
block|{
return|return
name|byteStream
operator|.
name|mapToObj
argument_list|(
name|i
lambda|->
operator|new
name|SingleByteMatcher
argument_list|(
operator|(
name|byte
operator|)
name|i
argument_list|)
argument_list|)
operator|.
name|toArray
argument_list|(
name|ByteMatcher
index|[]
operator|::
operator|new
argument_list|)
return|;
block|}
annotation|@
name|Override
name|byte
index|[]
name|match
parameter_list|(
name|PushbackInputStream
name|pushbackInputStream
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|read
init|=
name|pushbackInputStream
operator|.
name|read
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
name|byte
operator|)
name|read
operator|==
name|b
condition|)
return|return
operator|new
name|byte
index|[]
block|{
name|b
block|}
return|;
if|if
condition|(
name|read
operator|!=
operator|-
literal|1
condition|)
name|pushbackInputStream
operator|.
name|unread
argument_list|(
name|read
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
specifier|static
class|class
name|SequenceMatcher
extends|extends
name|ByteMatcher
block|{
specifier|private
name|ByteMatcher
index|[]
name|matchers
decl_stmt|;
specifier|public
name|SequenceMatcher
parameter_list|(
name|ByteMatcher
modifier|...
name|matchers
parameter_list|)
block|{
name|this
operator|.
name|matchers
operator|=
name|matchers
expr_stmt|;
block|}
specifier|public
name|SequenceMatcher
parameter_list|(
name|String
name|s
parameter_list|)
block|{
name|this
argument_list|(
name|matchers
argument_list|(
name|s
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|SequenceMatcher
name|caseInsensitive
parameter_list|(
name|String
name|s
parameter_list|)
block|{
name|ByteMatcher
index|[]
name|lowerMatchers
init|=
name|matchers
argument_list|(
name|s
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|US
argument_list|)
argument_list|)
decl_stmt|;
name|ByteMatcher
index|[]
name|upperMatchers
init|=
name|matchers
argument_list|(
name|s
operator|.
name|toUpperCase
argument_list|(
name|Locale
operator|.
name|US
argument_list|)
argument_list|)
decl_stmt|;
name|OrMatcher
index|[]
name|matchers
init|=
name|IntStream
operator|.
name|range
argument_list|(
literal|0
argument_list|,
name|Math
operator|.
name|min
argument_list|(
name|lowerMatchers
operator|.
name|length
argument_list|,
name|upperMatchers
operator|.
name|length
argument_list|)
argument_list|)
operator|.
name|mapToObj
argument_list|(
name|i
lambda|->
operator|new
name|OrMatcher
argument_list|(
name|lowerMatchers
index|[
name|i
index|]
argument_list|,
name|upperMatchers
index|[
name|i
index|]
argument_list|)
argument_list|)
operator|.
name|toArray
argument_list|(
name|OrMatcher
index|[]
operator|::
operator|new
argument_list|)
decl_stmt|;
return|return
operator|new
name|SequenceMatcher
argument_list|(
name|matchers
argument_list|)
return|;
block|}
annotation|@
name|Override
name|byte
index|[]
name|match
parameter_list|(
name|PushbackInputStream
name|pushbackInputStream
parameter_list|)
throws|throws
name|IOException
block|{
name|ByteArrayOutputStream
name|allMatched
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
for|for
control|(
name|ByteMatcher
name|m
range|:
name|matchers
control|)
block|{
name|byte
index|[]
name|matched
init|=
name|m
operator|.
name|match
argument_list|(
name|pushbackInputStream
argument_list|)
decl_stmt|;
if|if
condition|(
name|matched
operator|==
literal|null
condition|)
block|{
name|pushbackInputStream
operator|.
name|unread
argument_list|(
name|allMatched
operator|.
name|toByteArray
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
else|else
block|{
name|allMatched
operator|.
name|write
argument_list|(
name|matched
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|allMatched
operator|.
name|toByteArray
argument_list|()
return|;
block|}
block|}
specifier|static
class|class
name|OrMatcher
extends|extends
name|ByteMatcher
block|{
specifier|private
name|ByteMatcher
index|[]
name|matchers
decl_stmt|;
specifier|public
name|OrMatcher
parameter_list|(
name|ByteMatcher
modifier|...
name|matchers
parameter_list|)
block|{
name|this
operator|.
name|matchers
operator|=
name|matchers
expr_stmt|;
block|}
annotation|@
name|Override
name|byte
index|[]
name|match
parameter_list|(
name|PushbackInputStream
name|pushbackInputStream
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|ByteMatcher
name|m
range|:
name|matchers
control|)
block|{
name|byte
index|[]
name|matched
init|=
name|m
operator|.
name|match
argument_list|(
name|pushbackInputStream
argument_list|)
decl_stmt|;
if|if
condition|(
name|matched
operator|!=
literal|null
condition|)
return|return
name|matched
return|;
block|}
return|return
literal|null
return|;
block|}
block|}
specifier|static
class|class
name|NegativeMatcher
extends|extends
name|ByteMatcher
block|{
specifier|private
name|ByteMatcher
name|matcher
decl_stmt|;
specifier|public
name|NegativeMatcher
parameter_list|(
name|ByteMatcher
name|matcher
parameter_list|)
block|{
name|this
operator|.
name|matcher
operator|=
name|matcher
expr_stmt|;
block|}
annotation|@
name|Override
name|byte
index|[]
name|match
parameter_list|(
name|PushbackInputStream
name|pushbackInputStream
parameter_list|)
throws|throws
name|IOException
block|{
name|byte
index|[]
name|matched
init|=
name|matcher
operator|.
name|match
argument_list|(
name|pushbackInputStream
argument_list|)
decl_stmt|;
if|if
condition|(
name|matched
operator|==
literal|null
condition|)
block|{
name|int
name|read
init|=
name|pushbackInputStream
operator|.
name|read
argument_list|()
decl_stmt|;
if|if
condition|(
name|read
operator|==
operator|-
literal|1
condition|)
return|return
literal|null
return|;
return|return
operator|new
name|byte
index|[]
block|{
operator|(
name|byte
operator|)
name|read
block|}
return|;
block|}
else|else
block|{
name|pushbackInputStream
operator|.
name|unread
argument_list|(
name|matched
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
block|}
specifier|static
class|class
name|RangeMatcher
extends|extends
name|ByteMatcher
block|{
specifier|private
name|byte
name|low
decl_stmt|;
specifier|private
name|byte
name|high
decl_stmt|;
specifier|public
name|RangeMatcher
parameter_list|(
name|byte
name|low
parameter_list|,
name|byte
name|high
parameter_list|)
block|{
name|this
operator|.
name|low
operator|=
name|low
expr_stmt|;
name|this
operator|.
name|high
operator|=
name|high
expr_stmt|;
block|}
annotation|@
name|Override
name|byte
index|[]
name|match
parameter_list|(
name|PushbackInputStream
name|pushbackInputStream
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|read
init|=
name|pushbackInputStream
operator|.
name|read
argument_list|()
decl_stmt|;
if|if
condition|(
name|read
operator|>=
name|low
operator|&&
name|read
operator|<=
name|high
condition|)
return|return
operator|new
name|byte
index|[]
block|{
operator|(
name|byte
operator|)
name|read
block|}
return|;
if|if
condition|(
name|read
operator|!=
operator|-
literal|1
condition|)
name|pushbackInputStream
operator|.
name|unread
argument_list|(
name|read
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
block|}
end_class

end_unit

