begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|executable
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|metadata
operator|.
name|Property
import|;
end_import

begin_comment
comment|/**  * Metadata for describing machines, such as their  *  architecture, type and endian-ness  */
end_comment

begin_interface
specifier|public
interface|interface
name|MachineMetadata
block|{
specifier|public
specifier|static
specifier|final
name|String
name|PREFIX
init|=
literal|"machine:"
decl_stmt|;
specifier|public
specifier|static
name|Property
name|ARCHITECTURE_BITS
init|=
name|Property
operator|.
name|internalClosedChoise
argument_list|(
name|PREFIX
operator|+
literal|"architectureBits"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"8"
block|,
literal|"16"
block|,
literal|"32"
block|,
literal|"64"
block|}
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|PLATFORM_SYSV
init|=
literal|"System V"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|PLATFORM_HPUX
init|=
literal|"HP-UX"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|PLATFORM_NETBSD
init|=
literal|"NetBSD"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|PLATFORM_LINUX
init|=
literal|"Linux"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|PLATFORM_SOLARIS
init|=
literal|"Solaris"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|PLATFORM_AIX
init|=
literal|"AIX"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|PLATFORM_IRIX
init|=
literal|"IRIX"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|PLATFORM_FREEBSD
init|=
literal|"FreeBSD"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|PLATFORM_TRU64
init|=
literal|"Tru64"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|PLATFORM_ARM
init|=
literal|"ARM"
decl_stmt|;
comment|// ARM architecture ABI
specifier|public
specifier|static
specifier|final
name|String
name|PLATFORM_EMBEDDED
init|=
literal|"Embedded"
decl_stmt|;
comment|// Stand-alone (embedded) ABI
specifier|public
specifier|static
specifier|final
name|String
name|PLATFORM_WINDOWS
init|=
literal|"Windows"
decl_stmt|;
specifier|public
specifier|static
name|Property
name|PLATFORM
init|=
name|Property
operator|.
name|internalClosedChoise
argument_list|(
name|PREFIX
operator|+
literal|"platform"
argument_list|,
operator|new
name|String
index|[]
block|{
name|PLATFORM_SYSV
block|,
name|PLATFORM_HPUX
block|,
name|PLATFORM_NETBSD
block|,
name|PLATFORM_LINUX
block|,
name|PLATFORM_SOLARIS
block|,
name|PLATFORM_AIX
block|,
name|PLATFORM_IRIX
block|,
name|PLATFORM_FREEBSD
block|,
name|PLATFORM_TRU64
block|,
name|PLATFORM_ARM
block|,
name|PLATFORM_EMBEDDED
block|,
name|PLATFORM_WINDOWS
block|}
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|MACHINE_x86_32
init|=
literal|"x86-32"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|MACHINE_x86_64
init|=
literal|"x86-64"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|MACHINE_IA_64
init|=
literal|"IA-64"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|MACHINE_SPARC
init|=
literal|"SPARC"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|MACHINE_M68K
init|=
literal|"Motorola-68000"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|MACHINE_M88K
init|=
literal|"Motorola-88000"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|MACHINE_MIPS
init|=
literal|"MIPS"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|MACHINE_PPC
init|=
literal|"PPC"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|MACHINE_S370
init|=
literal|"S370"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|MACHINE_S390
init|=
literal|"S390"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|MACHINE_ARM
init|=
literal|"ARM"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|MACHINE_VAX
init|=
literal|"Vax"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|MACHINE_ALPHA
init|=
literal|"Alpha"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|MACHINE_EFI
init|=
literal|"EFI"
decl_stmt|;
comment|// EFI ByteCode
specifier|public
specifier|static
specifier|final
name|String
name|MACHINE_M32R
init|=
literal|"M32R"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|MACHINE_SH3
init|=
literal|"SH3"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|MACHINE_SH4
init|=
literal|"SH4"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|MACHINE_SH5
init|=
literal|"SH5"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|MACHINE_UNKNOWN
init|=
literal|"Unknown"
decl_stmt|;
specifier|public
specifier|static
name|Property
name|MACHINE_TYPE
init|=
name|Property
operator|.
name|internalClosedChoise
argument_list|(
name|PREFIX
operator|+
literal|"machineType"
argument_list|,
operator|new
name|String
index|[]
block|{
name|MACHINE_x86_32
block|,
name|MACHINE_x86_64
block|,
name|MACHINE_IA_64
block|,
name|MACHINE_SPARC
block|,
name|MACHINE_M68K
block|,
name|MACHINE_M88K
block|,
name|MACHINE_MIPS
block|,
name|MACHINE_PPC
block|,
name|MACHINE_S370
block|,
name|MACHINE_S390
block|,
name|MACHINE_ARM
block|,
name|MACHINE_VAX
block|,
name|MACHINE_ALPHA
block|,
name|MACHINE_EFI
block|,
name|MACHINE_M32R
block|,
name|MACHINE_SH3
block|,
name|MACHINE_SH4
block|,
name|MACHINE_SH5
block|,
name|MACHINE_UNKNOWN
block|}
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
class|class
name|Endian
block|{
specifier|private
name|String
name|name
decl_stmt|;
specifier|private
name|boolean
name|msb
decl_stmt|;
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
specifier|public
name|boolean
name|isMSB
parameter_list|()
block|{
return|return
name|msb
return|;
block|}
specifier|public
name|String
name|getMSB
parameter_list|()
block|{
if|if
condition|(
name|msb
condition|)
block|{
return|return
literal|"MSB"
return|;
block|}
else|else
block|{
return|return
literal|"LSB"
return|;
block|}
block|}
specifier|private
name|Endian
parameter_list|(
name|String
name|name
parameter_list|,
name|boolean
name|msb
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|msb
operator|=
name|msb
expr_stmt|;
block|}
specifier|public
specifier|static
specifier|final
name|Endian
name|LITTLE
init|=
operator|new
name|Endian
argument_list|(
literal|"Little"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|Endian
name|BIG
init|=
operator|new
name|Endian
argument_list|(
literal|"Big"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
block|}
specifier|public
specifier|static
name|Property
name|ENDIAN
init|=
name|Property
operator|.
name|internalClosedChoise
argument_list|(
name|PREFIX
operator|+
literal|"endian"
argument_list|,
operator|new
name|String
index|[]
block|{
name|Endian
operator|.
name|LITTLE
operator|.
name|name
block|,
name|Endian
operator|.
name|BIG
operator|.
name|name
block|}
argument_list|)
decl_stmt|;
block|}
end_interface

end_unit

