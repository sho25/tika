begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|dbf
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|exception
operator|.
name|TikaException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|io
operator|.
name|EndianUtils
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_class
class|class
name|DBFFileHeader
block|{
specifier|private
name|DBFReader
operator|.
name|Version
name|version
decl_stmt|;
specifier|private
name|Calendar
name|lastModified
decl_stmt|;
specifier|private
name|int
name|numRecords
init|=
operator|-
literal|1
decl_stmt|;
specifier|private
name|short
name|numBytesInHeader
decl_stmt|;
specifier|private
name|short
name|numBytesInRecord
decl_stmt|;
specifier|private
name|DBFColumnHeader
index|[]
name|cols
decl_stmt|;
specifier|public
specifier|static
name|DBFFileHeader
name|parse
parameter_list|(
name|InputStream
name|is
parameter_list|)
throws|throws
name|IOException
throws|,
name|TikaException
block|{
name|DBFFileHeader
name|header
init|=
operator|new
name|DBFFileHeader
argument_list|()
decl_stmt|;
name|int
name|firstByte
init|=
name|is
operator|.
name|read
argument_list|()
decl_stmt|;
name|header
operator|.
name|version
operator|=
name|DBFReader
operator|.
name|getVersion
argument_list|(
name|firstByte
argument_list|)
expr_stmt|;
if|if
condition|(
name|header
operator|.
name|version
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|TikaException
argument_list|(
literal|"Unrecognized first byte in DBFFile: "
operator|+
name|firstByte
argument_list|)
throw|;
block|}
name|int
name|lastModYear
init|=
name|is
operator|.
name|read
argument_list|()
decl_stmt|;
name|int
name|lastModMonth
init|=
name|is
operator|.
name|read
argument_list|()
decl_stmt|;
name|int
name|lastModDay
init|=
name|is
operator|.
name|read
argument_list|()
decl_stmt|;
name|Calendar
name|now
init|=
name|GregorianCalendar
operator|.
name|getInstance
argument_list|(
name|TimeZone
operator|.
name|getTimeZone
argument_list|(
literal|"UTC"
argument_list|)
argument_list|,
name|Locale
operator|.
name|ROOT
argument_list|)
decl_stmt|;
comment|//if this was last modified after the current year, assume
comment|//the file was created in 1900
if|if
condition|(
name|lastModYear
operator|+
literal|2000
operator|>
name|now
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|YEAR
argument_list|)
condition|)
block|{
name|lastModYear
operator|+=
literal|1900
expr_stmt|;
block|}
else|else
block|{
name|lastModYear
operator|+=
literal|2000
expr_stmt|;
block|}
name|Calendar
name|lastModified
init|=
operator|new
name|GregorianCalendar
argument_list|(
name|TimeZone
operator|.
name|getTimeZone
argument_list|(
literal|"UTC"
argument_list|)
argument_list|,
name|Locale
operator|.
name|ROOT
argument_list|)
decl_stmt|;
name|lastModified
operator|.
name|set
argument_list|(
name|lastModYear
argument_list|,
name|lastModMonth
operator|-
literal|1
argument_list|,
name|lastModDay
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|header
operator|.
name|lastModified
operator|=
name|lastModified
expr_stmt|;
name|header
operator|.
name|numRecords
operator|=
name|EndianUtils
operator|.
name|readIntLE
argument_list|(
name|is
argument_list|)
expr_stmt|;
name|header
operator|.
name|numBytesInHeader
operator|=
name|EndianUtils
operator|.
name|readShortLE
argument_list|(
name|is
argument_list|)
expr_stmt|;
name|header
operator|.
name|numBytesInRecord
operator|=
name|EndianUtils
operator|.
name|readShortLE
argument_list|(
name|is
argument_list|)
expr_stmt|;
name|IOUtils
operator|.
name|skipFully
argument_list|(
name|is
argument_list|,
literal|20
argument_list|)
expr_stmt|;
comment|//TODO: can get useful info out of here
name|int
name|numCols
init|=
literal|0
decl_stmt|;
comment|//(header.numBytesInHeader - 32) / 32;
name|List
argument_list|<
name|DBFColumnHeader
argument_list|>
name|headers
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
name|int
name|bytesAccountedFor
init|=
literal|0
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|DBFColumnHeader
name|colHeader
init|=
name|readCol
argument_list|(
name|is
argument_list|)
decl_stmt|;
name|bytesAccountedFor
operator|+=
name|colHeader
operator|.
name|fieldLength
expr_stmt|;
name|numCols
operator|++
expr_stmt|;
name|headers
operator|.
name|add
argument_list|(
name|colHeader
argument_list|)
expr_stmt|;
if|if
condition|(
name|bytesAccountedFor
operator|>=
name|header
operator|.
name|numBytesInRecord
operator|-
literal|1
condition|)
block|{
break|break;
block|}
block|}
name|header
operator|.
name|cols
operator|=
name|headers
operator|.
name|toArray
argument_list|(
operator|new
name|DBFColumnHeader
index|[
name|headers
operator|.
name|size
argument_list|()
index|]
argument_list|)
expr_stmt|;
name|int
name|endOfHeader
init|=
name|is
operator|.
name|read
argument_list|()
decl_stmt|;
if|if
condition|(
name|endOfHeader
operator|!=
literal|13
condition|)
block|{
throw|throw
operator|new
name|TikaException
argument_list|(
literal|"Expected new line at end of header"
argument_list|)
throw|;
block|}
name|long
name|totalReadSoFar
init|=
literal|32
operator|+
operator|(
name|numCols
operator|*
literal|32
operator|)
operator|+
literal|1
decl_stmt|;
comment|//there can be extra bytes in the header
name|long
name|extraHeaderBytes
init|=
name|header
operator|.
name|numBytesInHeader
operator|-
name|totalReadSoFar
decl_stmt|;
name|IOUtils
operator|.
name|skipFully
argument_list|(
name|is
argument_list|,
name|extraHeaderBytes
argument_list|)
expr_stmt|;
return|return
name|header
return|;
block|}
specifier|private
specifier|static
name|DBFColumnHeader
name|readCol
parameter_list|(
name|InputStream
name|is
parameter_list|)
throws|throws
name|IOException
throws|,
name|TikaException
block|{
name|byte
index|[]
name|fieldRecord
init|=
operator|new
name|byte
index|[
literal|32
index|]
decl_stmt|;
name|IOUtils
operator|.
name|readFully
argument_list|(
name|is
argument_list|,
name|fieldRecord
argument_list|)
expr_stmt|;
name|DBFColumnHeader
name|col
init|=
operator|new
name|DBFColumnHeader
argument_list|()
decl_stmt|;
name|col
operator|.
name|name
operator|=
operator|new
name|byte
index|[
literal|11
index|]
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|fieldRecord
argument_list|,
literal|0
argument_list|,
name|col
operator|.
name|name
argument_list|,
literal|0
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|int
name|colType
init|=
name|fieldRecord
index|[
literal|11
index|]
operator|&
literal|0xFF
decl_stmt|;
if|if
condition|(
name|colType
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"File truncated before coltype in header"
argument_list|)
throw|;
block|}
name|col
operator|.
name|setType
argument_list|(
name|colType
argument_list|)
expr_stmt|;
name|col
operator|.
name|fieldLength
operator|=
name|fieldRecord
index|[
literal|16
index|]
operator|&
literal|0xFF
expr_stmt|;
if|if
condition|(
name|col
operator|.
name|fieldLength
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|TikaException
argument_list|(
literal|"Field length for column "
operator|+
name|col
operator|.
name|getName
argument_list|(
name|StandardCharsets
operator|.
name|US_ASCII
argument_list|)
operator|+
literal|" is< 0"
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
name|col
operator|.
name|fieldLength
operator|>
name|DBFReader
operator|.
name|MAX_FIELD_LENGTH
condition|)
block|{
throw|throw
operator|new
name|TikaException
argument_list|(
literal|"Field length ("
operator|+
name|col
operator|.
name|fieldLength
operator|+
literal|") is greater than DBReader.MAX_FIELD_LENGTH ("
operator|+
name|DBFReader
operator|.
name|MAX_FIELD_LENGTH
operator|+
literal|")"
argument_list|)
throw|;
block|}
name|col
operator|.
name|decimalCount
operator|=
name|fieldRecord
index|[
literal|17
index|]
operator|&
literal|0xFF
expr_stmt|;
return|return
name|col
return|;
block|}
name|DBFColumnHeader
index|[]
name|getCols
parameter_list|()
block|{
return|return
name|cols
return|;
block|}
name|int
name|getNumRecords
parameter_list|()
block|{
return|return
name|numRecords
return|;
block|}
name|Calendar
name|getLastModified
parameter_list|()
block|{
return|return
name|lastModified
return|;
block|}
name|DBFReader
operator|.
name|Version
name|getVersion
parameter_list|()
block|{
return|return
name|version
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"DBFFileHeader{"
operator|+
literal|"lastModified="
operator|+
name|lastModified
operator|+
literal|", numRecords="
operator|+
name|numRecords
operator|+
literal|", numBytesInHeader="
operator|+
name|numBytesInHeader
operator|+
literal|", numBytesInRecord="
operator|+
name|numBytesInRecord
operator|+
literal|", cols="
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|cols
argument_list|)
operator|+
literal|'}'
return|;
block|}
block|}
end_class

end_unit

