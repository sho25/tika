begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|chm
operator|.
name|lzx
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CancellationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|exception
operator|.
name|TikaException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|chm
operator|.
name|core
operator|.
name|ChmCommons
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|chm
operator|.
name|core
operator|.
name|ChmCommons
operator|.
name|IntelState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|chm
operator|.
name|core
operator|.
name|ChmCommons
operator|.
name|LzxState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|chm
operator|.
name|core
operator|.
name|ChmConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|chm
operator|.
name|exception
operator|.
name|ChmParsingException
import|;
end_import

begin_class
specifier|public
class|class
name|ChmLzxState
implements|implements
name|Cloneable
block|{
comment|/* Class' members */
specifier|private
name|int
name|window
decl_stmt|;
comment|/* the actual decoding window */
specifier|private
name|long
name|window_size
decl_stmt|;
comment|/* window size (32Kb through 2Mb) */
specifier|private
name|int
name|window_position
decl_stmt|;
comment|/* current offset within the window */
specifier|private
name|int
name|main_tree_elements
decl_stmt|;
comment|/* number of main tree elements */
specifier|private
name|LzxState
name|hadStarted
decl_stmt|;
comment|/* have we started decoding at all yet? */
specifier|private
name|int
name|block_type
decl_stmt|;
comment|/* type of this block */
specifier|private
name|int
name|block_length
decl_stmt|;
comment|/* uncompressed length of this block */
specifier|private
name|int
name|block_remaining
decl_stmt|;
comment|/* uncompressed bytes still left to decode */
specifier|private
name|int
name|frames_read
decl_stmt|;
comment|/* the number of CFDATA blocks processed */
specifier|private
name|int
name|intel_file_size
decl_stmt|;
comment|/* magic header value used for transform */
specifier|private
name|long
name|intel_current_possition
decl_stmt|;
comment|/* current offset in transform space */
specifier|private
name|IntelState
name|intel_state
decl_stmt|;
comment|/* have we seen any translatable data yet? */
specifier|private
name|long
name|R0
decl_stmt|;
comment|/* for the LRU offset system */
specifier|private
name|long
name|R1
decl_stmt|;
comment|/* for the LRU offset system */
specifier|private
name|long
name|R2
decl_stmt|;
comment|/* for the LRU offset system */
comment|// Trees - PRETREE, MAINTREE, LENGTH, ALIGNED
specifier|protected
name|short
index|[]
name|mainTreeLengtsTable
decl_stmt|;
specifier|protected
name|short
index|[]
name|mainTreeTable
decl_stmt|;
specifier|protected
name|short
index|[]
name|lengthTreeTable
decl_stmt|;
specifier|protected
name|short
index|[]
name|lengthTreeLengtsTable
decl_stmt|;
specifier|protected
name|short
index|[]
name|alignedLenTable
decl_stmt|;
specifier|protected
name|short
index|[]
name|alignedTreeTable
decl_stmt|;
annotation|@
name|Override
specifier|public
name|ChmLzxState
name|clone
parameter_list|()
block|{
try|try
block|{
name|ChmLzxState
name|clone
init|=
operator|(
name|ChmLzxState
operator|)
name|super
operator|.
name|clone
argument_list|()
decl_stmt|;
name|clone
operator|.
name|mainTreeLengtsTable
operator|=
name|arrayClone
argument_list|(
name|mainTreeLengtsTable
argument_list|)
expr_stmt|;
name|clone
operator|.
name|mainTreeTable
operator|=
name|arrayClone
argument_list|(
name|mainTreeTable
argument_list|)
expr_stmt|;
name|clone
operator|.
name|lengthTreeTable
operator|=
name|arrayClone
argument_list|(
name|lengthTreeTable
argument_list|)
expr_stmt|;
name|clone
operator|.
name|lengthTreeLengtsTable
operator|=
name|arrayClone
argument_list|(
name|lengthTreeLengtsTable
argument_list|)
expr_stmt|;
name|clone
operator|.
name|alignedLenTable
operator|=
name|arrayClone
argument_list|(
name|alignedLenTable
argument_list|)
expr_stmt|;
name|clone
operator|.
name|alignedTreeTable
operator|=
name|arrayClone
argument_list|(
name|alignedTreeTable
argument_list|)
expr_stmt|;
return|return
name|clone
return|;
block|}
catch|catch
parameter_list|(
name|CloneNotSupportedException
name|ex
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
block|}
specifier|protected
name|short
index|[]
name|getMainTreeTable
parameter_list|()
block|{
return|return
name|mainTreeTable
return|;
block|}
specifier|protected
name|short
index|[]
name|getAlignedTreeTable
parameter_list|()
block|{
return|return
name|alignedTreeTable
return|;
block|}
specifier|protected
name|void
name|setAlignedTreeTable
parameter_list|(
name|short
index|[]
name|alignedTreeTable
parameter_list|)
block|{
name|this
operator|.
name|alignedTreeTable
operator|=
name|alignedTreeTable
expr_stmt|;
block|}
specifier|protected
name|short
index|[]
name|getLengthTreeTable
parameter_list|()
throws|throws
name|TikaException
block|{
if|if
condition|(
name|lengthTreeTable
operator|!=
literal|null
condition|)
return|return
name|this
operator|.
name|lengthTreeTable
return|;
else|else
throw|throw
operator|new
name|ChmParsingException
argument_list|(
literal|"lengthTreeTable is null"
argument_list|)
throw|;
block|}
specifier|protected
name|void
name|setLengthTreeTable
parameter_list|(
name|short
index|[]
name|lengthTreeTable
parameter_list|)
block|{
name|this
operator|.
name|lengthTreeTable
operator|=
name|lengthTreeTable
expr_stmt|;
block|}
specifier|protected
name|void
name|setMainTreeTable
parameter_list|(
name|short
index|[]
name|mainTreeTable
parameter_list|)
block|{
name|this
operator|.
name|mainTreeTable
operator|=
name|mainTreeTable
expr_stmt|;
block|}
specifier|protected
name|short
index|[]
name|getAlignedLenTable
parameter_list|()
block|{
return|return
name|this
operator|.
name|alignedLenTable
return|;
block|}
specifier|protected
name|void
name|setAlignedLenTable
parameter_list|(
name|short
index|[]
name|alignedLenTable
parameter_list|)
block|{
name|this
operator|.
name|alignedLenTable
operator|=
name|alignedLenTable
expr_stmt|;
block|}
comment|/**      * It suits for informative outlook      */
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"actual decoding window:="
operator|+
name|getWindow
argument_list|()
operator|+
name|System
operator|.
name|getProperty
argument_list|(
literal|"line.separator"
argument_list|)
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"window size (32Kb through 2Mb):="
operator|+
name|getWindowSize
argument_list|()
operator|+
name|System
operator|.
name|getProperty
argument_list|(
literal|"line.separator"
argument_list|)
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"current offset within the window:="
operator|+
name|getWindowPosition
argument_list|()
operator|+
name|System
operator|.
name|getProperty
argument_list|(
literal|"line.separator"
argument_list|)
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"number of main tree elements:="
operator|+
name|getMainTreeElements
argument_list|()
operator|+
name|System
operator|.
name|getProperty
argument_list|(
literal|"line.separator"
argument_list|)
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"have we started decoding at all yet?:="
operator|+
name|getHadStarted
argument_list|()
operator|+
name|System
operator|.
name|getProperty
argument_list|(
literal|"line.separator"
argument_list|)
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"type of this block:="
operator|+
name|getBlockType
argument_list|()
operator|+
name|System
operator|.
name|getProperty
argument_list|(
literal|"line.separator"
argument_list|)
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"uncompressed length of this block:="
operator|+
name|getBlockLength
argument_list|()
operator|+
name|System
operator|.
name|getProperty
argument_list|(
literal|"line.separator"
argument_list|)
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"uncompressed bytes still left to decode:="
operator|+
name|getBlockRemaining
argument_list|()
operator|+
name|System
operator|.
name|getProperty
argument_list|(
literal|"line.separator"
argument_list|)
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"the number of CFDATA blocks processed:="
operator|+
name|getFramesRead
argument_list|()
operator|+
name|System
operator|.
name|getProperty
argument_list|(
literal|"line.separator"
argument_list|)
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"magic header value used for transform:="
operator|+
name|getIntelFileSize
argument_list|()
operator|+
name|System
operator|.
name|getProperty
argument_list|(
literal|"line.separator"
argument_list|)
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"current offset in transform space:="
operator|+
name|getIntelCurrentPossition
argument_list|()
operator|+
name|System
operator|.
name|getProperty
argument_list|(
literal|"line.separator"
argument_list|)
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"have we seen any translatable data yet?:="
operator|+
name|getIntelState
argument_list|()
operator|+
name|System
operator|.
name|getProperty
argument_list|(
literal|"line.separator"
argument_list|)
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"R0 for the LRU offset system:="
operator|+
name|getR0
argument_list|()
operator|+
name|System
operator|.
name|getProperty
argument_list|(
literal|"line.separator"
argument_list|)
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"R1 for the LRU offset system:="
operator|+
name|getR1
argument_list|()
operator|+
name|System
operator|.
name|getProperty
argument_list|(
literal|"line.separator"
argument_list|)
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"R2 for the LRU offset system:="
operator|+
name|getR2
argument_list|()
operator|+
name|System
operator|.
name|getProperty
argument_list|(
literal|"line.separator"
argument_list|)
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"main tree length:="
operator|+
name|getMainTreeLengtsTable
argument_list|()
operator|.
name|length
operator|+
name|System
operator|.
name|getProperty
argument_list|(
literal|"line.separator"
argument_list|)
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"secondary tree length:="
operator|+
name|getLengthTreeLengtsTable
argument_list|()
operator|.
name|length
operator|+
name|System
operator|.
name|getProperty
argument_list|(
literal|"line.separator"
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|ChmLzxState
parameter_list|(
name|int
name|window
parameter_list|)
throws|throws
name|TikaException
block|{
if|if
condition|(
name|window
operator|>=
literal|0
condition|)
block|{
name|int
name|position_slots
decl_stmt|;
name|int
name|win
init|=
name|ChmCommons
operator|.
name|getWindowSize
argument_list|(
name|window
argument_list|)
decl_stmt|;
name|setWindowSize
argument_list|(
literal|1
operator|<<
name|win
argument_list|)
expr_stmt|;
comment|/* LZX supports window sizes of 2^15 (32Kb) through 2^21 (2Mb) */
if|if
condition|(
name|win
argument_list|<
literal|15
operator|||
name|win
argument_list|>
literal|21
condition|)
throw|throw
operator|new
name|ChmParsingException
argument_list|(
literal|"window less than 15 or window greater than 21"
argument_list|)
throw|;
comment|/* Calculates required position slots */
if|if
condition|(
name|win
operator|==
literal|20
condition|)
name|position_slots
operator|=
literal|42
expr_stmt|;
elseif|else
if|if
condition|(
name|win
operator|==
literal|21
condition|)
name|position_slots
operator|=
literal|50
expr_stmt|;
else|else
name|position_slots
operator|=
name|win
operator|<<
literal|1
expr_stmt|;
comment|//TODO: position_slots is not used ?
name|setR0
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|setR1
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|setR2
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|setMainTreeElements
argument_list|(
literal|512
argument_list|)
expr_stmt|;
name|setHadStarted
argument_list|(
name|LzxState
operator|.
name|NOT_STARTED_DECODING
argument_list|)
expr_stmt|;
name|setFramesRead
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|setBlockRemaining
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|setBlockType
argument_list|(
name|ChmConstants
operator|.
name|LZX_BLOCKTYPE_INVALID
argument_list|)
expr_stmt|;
name|setIntelCurrentPossition
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|setIntelState
argument_list|(
name|IntelState
operator|.
name|NOT_STARTED
argument_list|)
expr_stmt|;
name|setWindowPosition
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|setMainTreeLengtsTable
argument_list|(
operator|new
name|short
index|[
name|getMainTreeElements
argument_list|()
index|]
argument_list|)
expr_stmt|;
name|setLengthTreeLengtsTable
argument_list|(
operator|new
name|short
index|[
name|ChmConstants
operator|.
name|LZX_NUM_SECONDARY_LENGTHS
index|]
argument_list|)
expr_stmt|;
block|}
else|else
throw|throw
operator|new
name|CancellationException
argument_list|(
literal|"window size should be more than zero"
argument_list|)
throw|;
block|}
specifier|protected
name|void
name|setWindow
parameter_list|(
name|int
name|window
parameter_list|)
block|{
name|this
operator|.
name|window
operator|=
name|window
expr_stmt|;
block|}
specifier|protected
name|int
name|getWindow
parameter_list|()
block|{
return|return
name|window
return|;
block|}
specifier|protected
name|void
name|setWindowSize
parameter_list|(
name|long
name|window_size
parameter_list|)
block|{
name|this
operator|.
name|window_size
operator|=
name|window_size
expr_stmt|;
block|}
specifier|protected
name|long
name|getWindowSize
parameter_list|()
block|{
return|return
name|window_size
return|;
block|}
specifier|protected
name|void
name|setWindowPosition
parameter_list|(
name|int
name|window_position
parameter_list|)
block|{
name|this
operator|.
name|window_position
operator|=
name|window_position
expr_stmt|;
block|}
specifier|protected
name|int
name|getWindowPosition
parameter_list|()
block|{
return|return
name|window_position
return|;
block|}
specifier|protected
name|void
name|setMainTreeElements
parameter_list|(
name|int
name|main_tree_elements
parameter_list|)
block|{
name|this
operator|.
name|main_tree_elements
operator|=
name|main_tree_elements
expr_stmt|;
block|}
specifier|protected
name|int
name|getMainTreeElements
parameter_list|()
block|{
return|return
name|main_tree_elements
return|;
block|}
specifier|protected
name|void
name|setHadStarted
parameter_list|(
name|LzxState
name|hadStarted
parameter_list|)
block|{
name|this
operator|.
name|hadStarted
operator|=
name|hadStarted
expr_stmt|;
block|}
specifier|protected
name|LzxState
name|getHadStarted
parameter_list|()
block|{
return|return
name|hadStarted
return|;
block|}
specifier|protected
name|void
name|setBlockType
parameter_list|(
name|int
name|block_type
parameter_list|)
block|{
name|this
operator|.
name|block_type
operator|=
name|block_type
expr_stmt|;
block|}
specifier|public
name|int
name|getBlockType
parameter_list|()
block|{
return|return
name|block_type
return|;
block|}
specifier|protected
name|void
name|setBlockLength
parameter_list|(
name|int
name|block_length
parameter_list|)
block|{
name|this
operator|.
name|block_length
operator|=
name|block_length
expr_stmt|;
block|}
specifier|protected
name|int
name|getBlockLength
parameter_list|()
block|{
return|return
name|block_length
return|;
block|}
specifier|protected
name|void
name|setBlockRemaining
parameter_list|(
name|int
name|block_remaining
parameter_list|)
block|{
name|this
operator|.
name|block_remaining
operator|=
name|block_remaining
expr_stmt|;
block|}
specifier|protected
name|int
name|getBlockRemaining
parameter_list|()
block|{
return|return
name|block_remaining
return|;
block|}
specifier|protected
name|void
name|setFramesRead
parameter_list|(
name|int
name|frames_read
parameter_list|)
block|{
name|this
operator|.
name|frames_read
operator|=
name|frames_read
expr_stmt|;
block|}
specifier|protected
name|void
name|increaseFramesRead
parameter_list|()
block|{
name|this
operator|.
name|frames_read
operator|=
name|getFramesRead
argument_list|()
operator|+
literal|1
expr_stmt|;
block|}
specifier|protected
name|int
name|getFramesRead
parameter_list|()
block|{
return|return
name|frames_read
return|;
block|}
specifier|protected
name|void
name|setIntelFileSize
parameter_list|(
name|int
name|intel_file_size
parameter_list|)
block|{
name|this
operator|.
name|intel_file_size
operator|=
name|intel_file_size
expr_stmt|;
block|}
specifier|protected
name|int
name|getIntelFileSize
parameter_list|()
block|{
return|return
name|intel_file_size
return|;
block|}
specifier|protected
name|void
name|setIntelCurrentPossition
parameter_list|(
name|long
name|intel_current_possition
parameter_list|)
block|{
name|this
operator|.
name|intel_current_possition
operator|=
name|intel_current_possition
expr_stmt|;
block|}
specifier|protected
name|long
name|getIntelCurrentPossition
parameter_list|()
block|{
return|return
name|intel_current_possition
return|;
block|}
specifier|protected
name|void
name|setIntelState
parameter_list|(
name|IntelState
name|intel_state
parameter_list|)
block|{
name|this
operator|.
name|intel_state
operator|=
name|intel_state
expr_stmt|;
block|}
specifier|protected
name|IntelState
name|getIntelState
parameter_list|()
block|{
return|return
name|intel_state
return|;
block|}
specifier|protected
name|void
name|setR0
parameter_list|(
name|long
name|r0
parameter_list|)
block|{
name|R0
operator|=
name|r0
expr_stmt|;
block|}
specifier|protected
name|long
name|getR0
parameter_list|()
block|{
return|return
name|R0
return|;
block|}
specifier|protected
name|void
name|setR1
parameter_list|(
name|long
name|r1
parameter_list|)
block|{
name|R1
operator|=
name|r1
expr_stmt|;
block|}
specifier|protected
name|long
name|getR1
parameter_list|()
block|{
return|return
name|R1
return|;
block|}
specifier|protected
name|void
name|setR2
parameter_list|(
name|long
name|r2
parameter_list|)
block|{
name|R2
operator|=
name|r2
expr_stmt|;
block|}
specifier|protected
name|long
name|getR2
parameter_list|()
block|{
return|return
name|R2
return|;
block|}
specifier|public
name|void
name|setMainTreeLengtsTable
parameter_list|(
name|short
index|[]
name|mainTreeLengtsTable
parameter_list|)
block|{
name|this
operator|.
name|mainTreeLengtsTable
operator|=
name|mainTreeLengtsTable
expr_stmt|;
block|}
specifier|public
name|short
index|[]
name|getMainTreeLengtsTable
parameter_list|()
block|{
return|return
name|mainTreeLengtsTable
return|;
block|}
specifier|public
name|void
name|setLengthTreeLengtsTable
parameter_list|(
name|short
index|[]
name|lengthTreeLengtsTable
parameter_list|)
block|{
name|this
operator|.
name|lengthTreeLengtsTable
operator|=
name|lengthTreeLengtsTable
expr_stmt|;
block|}
specifier|public
name|short
index|[]
name|getLengthTreeLengtsTable
parameter_list|()
block|{
return|return
name|lengthTreeLengtsTable
return|;
block|}
specifier|private
specifier|static
name|short
index|[]
name|arrayClone
parameter_list|(
name|short
index|[]
name|a
parameter_list|)
block|{
return|return
name|a
operator|==
literal|null
condition|?
literal|null
else|:
operator|(
name|short
index|[]
operator|)
name|a
operator|.
name|clone
argument_list|()
return|;
block|}
block|}
end_class

end_unit

