begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|journal
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|metadata
operator|.
name|Metadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|ParseContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|grobid
operator|.
name|core
operator|.
name|data
operator|.
name|BiblioItem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|grobid
operator|.
name|core
operator|.
name|engines
operator|.
name|Engine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|grobid
operator|.
name|core
operator|.
name|factory
operator|.
name|GrobidFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|grobid
operator|.
name|core
operator|.
name|mock
operator|.
name|MockContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|grobid
operator|.
name|core
operator|.
name|utilities
operator|.
name|GrobidProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|ContentHandler
import|;
end_import

begin_class
specifier|public
class|class
name|GrobidParser
block|{
specifier|private
specifier|static
specifier|final
name|String
name|GROBID_HOME_UNSET_VALUE
init|=
literal|"/path/to/grobid-home"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|GROBID_PROPERTIES_UNSET_VALUE
init|=
literal|"/path/to/grobid-home/config/grobid.properties"
decl_stmt|;
specifier|public
name|GrobidParser
parameter_list|()
block|{    }
specifier|public
name|void
name|parse
parameter_list|(
name|String
name|filePath
parameter_list|,
name|ContentHandler
name|handler
parameter_list|,
name|Metadata
name|metadata
parameter_list|,
name|ParseContext
name|context
parameter_list|)
block|{
name|GrobidConfig
name|gConfig
init|=
operator|new
name|GrobidConfig
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|canRun
argument_list|(
name|gConfig
argument_list|)
condition|)
block|{
return|return;
block|}
try|try
block|{
name|MockContext
operator|.
name|setInitialContext
argument_list|(
name|gConfig
operator|.
name|getGrobidHome
argument_list|()
argument_list|,
name|gConfig
operator|.
name|getGrobidProperties
argument_list|()
argument_list|)
expr_stmt|;
name|GrobidProperties
operator|.
name|getInstance
argument_list|()
expr_stmt|;
name|Engine
name|engine
init|=
name|GrobidFactory
operator|.
name|getInstance
argument_list|()
operator|.
name|createEngine
argument_list|()
decl_stmt|;
name|BiblioItem
name|resHeader
init|=
operator|new
name|BiblioItem
argument_list|()
decl_stmt|;
name|engine
operator|.
name|processHeader
argument_list|(
name|filePath
argument_list|,
literal|false
argument_list|,
name|resHeader
argument_list|)
expr_stmt|;
name|GrobidHeaderMetadata
name|gheaderMetada
init|=
operator|new
name|GrobidHeaderMetadata
argument_list|()
decl_stmt|;
name|gheaderMetada
operator|.
name|generateHeaderMetada
argument_list|(
name|resHeader
argument_list|)
expr_stmt|;
name|populateTikaMetadata
argument_list|(
name|gheaderMetada
argument_list|,
name|metadata
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|populateTikaMetadata
parameter_list|(
name|GrobidHeaderMetadata
name|gheaderMetada
parameter_list|,
name|Metadata
name|metadata
parameter_list|)
block|{
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|pair
range|:
name|gheaderMetada
operator|.
name|getHeaderMetadata
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|metadata
operator|.
name|add
argument_list|(
name|GrobidConfig
operator|.
name|GROBID_PREFIX
operator|+
name|pair
operator|.
name|getKey
argument_list|()
argument_list|,
name|pair
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
specifier|static
name|boolean
name|canRun
parameter_list|(
name|GrobidConfig
name|gConfig
parameter_list|)
block|{
return|return
name|gConfig
operator|.
name|getGrobidHome
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|gConfig
operator|.
name|getGrobidHome
argument_list|()
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
operator|&&
operator|!
name|gConfig
operator|.
name|getGrobidHome
argument_list|()
operator|.
name|equals
argument_list|(
name|GROBID_HOME_UNSET_VALUE
argument_list|)
operator|&&
name|gConfig
operator|.
name|getGrobidProperties
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|gConfig
operator|.
name|getGrobidProperties
argument_list|()
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
operator|&&
operator|!
name|gConfig
operator|.
name|getGrobidProperties
argument_list|()
operator|.
name|equals
argument_list|(
name|GROBID_PROPERTIES_UNSET_VALUE
argument_list|)
return|;
block|}
block|}
end_class

end_unit

