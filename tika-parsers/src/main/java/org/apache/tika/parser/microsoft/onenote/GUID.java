begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|microsoft
operator|.
name|onenote
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_class
class|class
name|GUID
implements|implements
name|Comparable
argument_list|<
name|GUID
argument_list|>
block|{
name|int
index|[]
name|guid
decl_stmt|;
comment|/**      * Converts a GUID of format: {AAAAAAAA-BBBB-CCCC-DDDD-EEEEEEEEEEEE} (in bytes) to a GUID object.      *      * @param guid The bytes that contain string in UTF-16 format of {AAAAAAAA-BBBB-CCCC-DDDD-EEEEEEEEEEEE}      * @return GUID object parsed from guid bytes.      */
specifier|public
specifier|static
name|GUID
name|fromCurlyBraceUTF16Bytes
parameter_list|(
name|byte
index|[]
name|guid
parameter_list|)
block|{
name|int
index|[]
name|intGuid
init|=
operator|new
name|int
index|[
literal|16
index|]
decl_stmt|;
name|String
name|utf16Str
init|=
operator|new
name|String
argument_list|(
name|guid
argument_list|,
name|StandardCharsets
operator|.
name|UTF_16LE
argument_list|)
operator|.
name|replaceAll
argument_list|(
literal|"\\{"
argument_list|,
literal|""
argument_list|)
operator|.
name|replaceAll
argument_list|(
literal|"-"
argument_list|,
literal|""
argument_list|)
operator|.
name|replaceAll
argument_list|(
literal|"}"
argument_list|,
literal|""
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|utf16Str
operator|.
name|length
argument_list|()
condition|;
name|i
operator|+=
literal|2
control|)
block|{
name|intGuid
index|[
name|i
operator|/
literal|2
index|]
operator|=
name|Integer
operator|.
name|parseUnsignedInt
argument_list|(
literal|""
operator|+
name|utf16Str
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
operator|+
name|utf16Str
operator|.
name|charAt
argument_list|(
name|i
operator|+
literal|1
argument_list|)
argument_list|,
literal|16
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|GUID
argument_list|(
name|intGuid
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|compareTo
parameter_list|(
name|GUID
name|o
parameter_list|)
block|{
return|return
name|memcmp
argument_list|(
name|guid
argument_list|,
name|o
operator|.
name|guid
argument_list|,
literal|16
argument_list|)
return|;
block|}
specifier|public
name|GUID
parameter_list|(
name|int
index|[]
name|guid
parameter_list|)
block|{
name|this
operator|.
name|guid
operator|=
name|guid
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|o
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|o
operator|==
literal|null
operator|||
name|getClass
argument_list|()
operator|!=
name|o
operator|.
name|getClass
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
name|GUID
name|guid1
init|=
operator|(
name|GUID
operator|)
name|o
decl_stmt|;
return|return
name|Arrays
operator|.
name|equals
argument_list|(
name|guid
argument_list|,
name|guid1
operator|.
name|guid
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|Arrays
operator|.
name|hashCode
argument_list|(
name|guid
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|int
name|memcmp
parameter_list|(
name|int
name|b1
index|[]
parameter_list|,
name|int
name|b2
index|[]
parameter_list|,
name|int
name|sz
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|sz
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|b1
index|[
name|i
index|]
operator|!=
name|b2
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
operator|(
name|b1
index|[
name|i
index|]
operator|>=
literal|0
operator|&&
name|b2
index|[
name|i
index|]
operator|>=
literal|0
operator|)
operator|||
operator|(
name|b1
index|[
name|i
index|]
operator|<
literal|0
operator|&&
name|b2
index|[
name|i
index|]
operator|<
literal|0
operator|)
condition|)
block|{
return|return
name|b1
index|[
name|i
index|]
operator|-
name|b2
index|[
name|i
index|]
return|;
block|}
if|if
condition|(
name|b1
index|[
name|i
index|]
operator|<
literal|0
operator|&&
name|b2
index|[
name|i
index|]
operator|>=
literal|0
condition|)
block|{
return|return
literal|1
return|;
block|}
if|if
condition|(
name|b2
index|[
name|i
index|]
operator|<
literal|0
operator|&&
name|b1
index|[
name|i
index|]
operator|>=
literal|0
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
block|}
block|}
return|return
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"{"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|4
condition|;
operator|++
name|i
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|StringUtils
operator|.
name|leftPad
argument_list|(
name|Integer
operator|.
name|toHexString
argument_list|(
name|guid
index|[
name|i
index|]
argument_list|)
argument_list|,
literal|2
argument_list|,
literal|'0'
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|"-"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|4
init|;
name|i
operator|<
literal|6
condition|;
operator|++
name|i
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|StringUtils
operator|.
name|leftPad
argument_list|(
name|Integer
operator|.
name|toHexString
argument_list|(
name|guid
index|[
name|i
index|]
argument_list|)
argument_list|,
literal|2
argument_list|,
literal|'0'
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|"-"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|6
init|;
name|i
operator|<
literal|8
condition|;
operator|++
name|i
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|StringUtils
operator|.
name|leftPad
argument_list|(
name|Integer
operator|.
name|toHexString
argument_list|(
name|guid
index|[
name|i
index|]
argument_list|)
argument_list|,
literal|2
argument_list|,
literal|'0'
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|"-"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|8
init|;
name|i
operator|<
literal|10
condition|;
operator|++
name|i
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|StringUtils
operator|.
name|leftPad
argument_list|(
name|Integer
operator|.
name|toHexString
argument_list|(
name|guid
index|[
name|i
index|]
argument_list|)
argument_list|,
literal|2
argument_list|,
literal|'0'
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|"-"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|10
init|;
name|i
operator|<
literal|16
condition|;
operator|++
name|i
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|StringUtils
operator|.
name|leftPad
argument_list|(
name|Integer
operator|.
name|toHexString
argument_list|(
name|guid
index|[
name|i
index|]
argument_list|)
argument_list|,
literal|2
argument_list|,
literal|'0'
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|"}"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
operator|.
name|toUpperCase
argument_list|(
name|Locale
operator|.
name|US
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|GUID
name|nil
parameter_list|()
block|{
return|return
operator|new
name|GUID
argument_list|(
operator|new
name|int
index|[
literal|16
index|]
argument_list|)
return|;
block|}
specifier|public
name|int
index|[]
name|getGuid
parameter_list|()
block|{
return|return
name|guid
return|;
block|}
specifier|public
name|GUID
name|setGuid
parameter_list|(
name|int
index|[]
name|guid
parameter_list|)
block|{
name|this
operator|.
name|guid
operator|=
name|guid
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|String
name|getGuidString
parameter_list|()
block|{
return|return
name|guid
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

