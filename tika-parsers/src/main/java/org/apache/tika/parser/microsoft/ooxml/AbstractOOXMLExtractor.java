begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|microsoft
operator|.
name|ooxml
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|sax
operator|.
name|XHTMLContentHandler
operator|.
name|XHTML
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|POIXMLDocument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|POIXMLTextExtractor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|openxml4j
operator|.
name|exceptions
operator|.
name|InvalidFormatException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|openxml4j
operator|.
name|opc
operator|.
name|OPCPackage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|openxml4j
operator|.
name|opc
operator|.
name|PackagePart
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|openxml4j
operator|.
name|opc
operator|.
name|PackageRelationship
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|openxml4j
operator|.
name|opc
operator|.
name|PackageRelationshipCollection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|openxml4j
operator|.
name|opc
operator|.
name|PackageRelationshipTypes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|openxml4j
operator|.
name|opc
operator|.
name|TargetMode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|openxml4j
operator|.
name|opc
operator|.
name|internal
operator|.
name|FileHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|poifs
operator|.
name|filesystem
operator|.
name|DirectoryNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|poifs
operator|.
name|filesystem
operator|.
name|NPOIFSFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|poifs
operator|.
name|filesystem
operator|.
name|Ole10Native
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|poifs
operator|.
name|filesystem
operator|.
name|Ole10NativeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|poifs
operator|.
name|filesystem
operator|.
name|POIFSFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|xssf
operator|.
name|usermodel
operator|.
name|XSSFRelation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|xwpf
operator|.
name|usermodel
operator|.
name|XWPFRelation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|exception
operator|.
name|TikaException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|extractor
operator|.
name|EmbeddedDocumentExtractor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|extractor
operator|.
name|EmbeddedDocumentUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|io
operator|.
name|TikaInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|metadata
operator|.
name|Metadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|metadata
operator|.
name|TikaCoreProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|ParseContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|microsoft
operator|.
name|OfficeParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|microsoft
operator|.
name|OfficeParser
operator|.
name|POIFSDocumentType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|microsoft
operator|.
name|OfficeParserConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|sax
operator|.
name|EmbeddedContentHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|sax
operator|.
name|OfflineContentHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|sax
operator|.
name|XHTMLContentHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|utils
operator|.
name|ExceptionUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xmlbeans
operator|.
name|XmlException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|ContentHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|helpers
operator|.
name|AttributesImpl
import|;
end_import

begin_comment
comment|/**  * Base class for all Tika OOXML extractors.  *<p/>  * Tika extractors decorate POI extractors so that the parsed content of  * documents is returned as a sequence of XHTML SAX events. Subclasses must  * implement the buildXHTML method {@link #buildXHTML(XHTMLContentHandler)} that  * populates the {@link XHTMLContentHandler} object received as parameter.  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|AbstractOOXMLExtractor
implements|implements
name|OOXMLExtractor
block|{
specifier|static
specifier|final
name|String
name|RELATION_AUDIO
init|=
literal|"http://schemas.openxmlformats.org/officeDocument/2006/relationships/audio"
decl_stmt|;
specifier|static
specifier|final
name|String
name|RELATION_DIAGRAM_DATA
init|=
literal|"http://schemas.openxmlformats.org/officeDocument/2006/relationships/diagramData"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|TYPE_OLE_OBJECT
init|=
literal|"application/vnd.openxmlformats-officedocument.oleObject"
decl_stmt|;
specifier|protected
specifier|final
specifier|static
name|String
index|[]
name|EMBEDDED_RELATIONSHIPS
init|=
operator|new
name|String
index|[]
block|{
name|RELATION_AUDIO
block|,
name|PackageRelationshipTypes
operator|.
name|IMAGE_PART
block|,
name|POIXMLDocument
operator|.
name|PACK_OBJECT_REL_TYPE
block|,
name|PackageRelationshipTypes
operator|.
name|CORE_DOCUMENT
block|,
name|RELATION_DIAGRAM_DATA
block|}
decl_stmt|;
specifier|private
specifier|final
name|EmbeddedDocumentExtractor
name|embeddedExtractor
decl_stmt|;
specifier|private
specifier|final
name|ParseContext
name|context
decl_stmt|;
specifier|protected
name|OfficeParserConfig
name|config
decl_stmt|;
specifier|protected
name|POIXMLTextExtractor
name|extractor
decl_stmt|;
specifier|public
name|AbstractOOXMLExtractor
parameter_list|(
name|ParseContext
name|context
parameter_list|,
name|POIXMLTextExtractor
name|extractor
parameter_list|)
block|{
name|this
operator|.
name|context
operator|=
name|context
expr_stmt|;
name|this
operator|.
name|extractor
operator|=
name|extractor
expr_stmt|;
name|embeddedExtractor
operator|=
name|EmbeddedDocumentUtil
operator|.
name|getEmbeddedDocumentExtractor
argument_list|(
name|context
argument_list|)
expr_stmt|;
comment|// This has already been set by OOXMLParser's call to configure()
comment|// We can rely on this being non-null.
name|this
operator|.
name|config
operator|=
name|context
operator|.
name|get
argument_list|(
name|OfficeParserConfig
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
comment|/**      * @see org.apache.tika.parser.microsoft.ooxml.OOXMLExtractor#getDocument()      */
specifier|public
name|POIXMLDocument
name|getDocument
parameter_list|()
block|{
return|return
name|extractor
operator|.
name|getDocument
argument_list|()
return|;
block|}
comment|/**      * @see org.apache.tika.parser.microsoft.ooxml.OOXMLExtractor#getMetadataExtractor()      */
specifier|public
name|MetadataExtractor
name|getMetadataExtractor
parameter_list|()
block|{
return|return
operator|new
name|MetadataExtractor
argument_list|(
name|extractor
argument_list|)
return|;
block|}
comment|/**      * @see org.apache.tika.parser.microsoft.ooxml.OOXMLExtractor#getXHTML(ContentHandler, Metadata, ParseContext)      */
specifier|public
name|void
name|getXHTML
parameter_list|(
name|ContentHandler
name|handler
parameter_list|,
name|Metadata
name|metadata
parameter_list|,
name|ParseContext
name|context
parameter_list|)
throws|throws
name|SAXException
throws|,
name|XmlException
throws|,
name|IOException
throws|,
name|TikaException
block|{
name|XHTMLContentHandler
name|xhtml
init|=
operator|new
name|XHTMLContentHandler
argument_list|(
name|handler
argument_list|,
name|metadata
argument_list|)
decl_stmt|;
name|xhtml
operator|.
name|startDocument
argument_list|()
expr_stmt|;
name|buildXHTML
argument_list|(
name|xhtml
argument_list|)
expr_stmt|;
comment|// Now do any embedded parts
name|handleEmbeddedParts
argument_list|(
name|handler
argument_list|,
name|metadata
argument_list|)
expr_stmt|;
comment|// thumbnail
name|handleThumbnail
argument_list|(
name|handler
argument_list|)
expr_stmt|;
name|xhtml
operator|.
name|endDocument
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|String
name|getJustFileName
parameter_list|(
name|String
name|desc
parameter_list|)
block|{
name|int
name|idx
init|=
name|desc
operator|.
name|lastIndexOf
argument_list|(
literal|'/'
argument_list|)
decl_stmt|;
if|if
condition|(
name|idx
operator|!=
operator|-
literal|1
condition|)
block|{
name|desc
operator|=
name|desc
operator|.
name|substring
argument_list|(
name|idx
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
name|idx
operator|=
name|desc
operator|.
name|lastIndexOf
argument_list|(
literal|'.'
argument_list|)
expr_stmt|;
if|if
condition|(
name|idx
operator|!=
operator|-
literal|1
condition|)
block|{
name|desc
operator|=
name|desc
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|idx
argument_list|)
expr_stmt|;
block|}
return|return
name|desc
return|;
block|}
specifier|private
name|void
name|handleThumbnail
parameter_list|(
name|ContentHandler
name|handler
parameter_list|)
block|{
try|try
block|{
name|OPCPackage
name|opcPackage
init|=
name|extractor
operator|.
name|getPackage
argument_list|()
decl_stmt|;
for|for
control|(
name|PackageRelationship
name|rel
range|:
name|opcPackage
operator|.
name|getRelationshipsByType
argument_list|(
name|PackageRelationshipTypes
operator|.
name|THUMBNAIL
argument_list|)
control|)
block|{
name|PackagePart
name|tPart
init|=
name|opcPackage
operator|.
name|getPart
argument_list|(
name|rel
argument_list|)
decl_stmt|;
name|InputStream
name|tStream
init|=
name|tPart
operator|.
name|getInputStream
argument_list|()
decl_stmt|;
name|Metadata
name|thumbnailMetadata
init|=
operator|new
name|Metadata
argument_list|()
decl_stmt|;
name|String
name|thumbName
init|=
name|tPart
operator|.
name|getPartName
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
name|thumbnailMetadata
operator|.
name|set
argument_list|(
name|Metadata
operator|.
name|RESOURCE_NAME_KEY
argument_list|,
name|thumbName
argument_list|)
expr_stmt|;
name|AttributesImpl
name|attributes
init|=
operator|new
name|AttributesImpl
argument_list|()
decl_stmt|;
name|attributes
operator|.
name|addAttribute
argument_list|(
name|XHTML
argument_list|,
literal|"class"
argument_list|,
literal|"class"
argument_list|,
literal|"CDATA"
argument_list|,
literal|"embedded"
argument_list|)
expr_stmt|;
name|attributes
operator|.
name|addAttribute
argument_list|(
name|XHTML
argument_list|,
literal|"id"
argument_list|,
literal|"id"
argument_list|,
literal|"CDATA"
argument_list|,
name|thumbName
argument_list|)
expr_stmt|;
name|handler
operator|.
name|startElement
argument_list|(
name|XHTML
argument_list|,
literal|"div"
argument_list|,
literal|"div"
argument_list|,
name|attributes
argument_list|)
expr_stmt|;
name|handler
operator|.
name|endElement
argument_list|(
name|XHTML
argument_list|,
literal|"div"
argument_list|,
literal|"div"
argument_list|)
expr_stmt|;
name|thumbnailMetadata
operator|.
name|set
argument_list|(
name|Metadata
operator|.
name|EMBEDDED_RELATIONSHIP_ID
argument_list|,
name|thumbName
argument_list|)
expr_stmt|;
name|thumbnailMetadata
operator|.
name|set
argument_list|(
name|Metadata
operator|.
name|CONTENT_TYPE
argument_list|,
name|tPart
operator|.
name|getContentType
argument_list|()
argument_list|)
expr_stmt|;
name|thumbnailMetadata
operator|.
name|set
argument_list|(
name|TikaCoreProperties
operator|.
name|TITLE
argument_list|,
name|tPart
operator|.
name|getPartName
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|embeddedExtractor
operator|.
name|shouldParseEmbedded
argument_list|(
name|thumbnailMetadata
argument_list|)
condition|)
block|{
name|embeddedExtractor
operator|.
name|parseEmbedded
argument_list|(
name|TikaInputStream
operator|.
name|get
argument_list|(
name|tStream
argument_list|)
argument_list|,
operator|new
name|EmbeddedContentHandler
argument_list|(
name|handler
argument_list|)
argument_list|,
name|thumbnailMetadata
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
name|tStream
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{          }
block|}
specifier|private
name|void
name|handleEmbeddedParts
parameter_list|(
name|ContentHandler
name|handler
parameter_list|,
name|Metadata
name|metadata
parameter_list|)
throws|throws
name|TikaException
throws|,
name|IOException
throws|,
name|SAXException
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|seen
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
try|try
block|{
for|for
control|(
name|PackagePart
name|source
range|:
name|getMainDocumentParts
argument_list|()
control|)
block|{
if|if
condition|(
name|source
operator|==
literal|null
condition|)
block|{
comment|//parts can go missing; silently ignore --  TIKA-2134
continue|continue;
block|}
for|for
control|(
name|PackageRelationship
name|rel
range|:
name|source
operator|.
name|getRelationships
argument_list|()
control|)
block|{
try|try
block|{
name|handleEmbeddedPart
argument_list|(
name|source
argument_list|,
name|rel
argument_list|,
name|handler
argument_list|,
name|metadata
argument_list|,
name|seen
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|instanceof
name|SAXException
condition|)
block|{
throw|throw
name|e
throw|;
block|}
name|EmbeddedDocumentUtil
operator|.
name|recordEmbeddedStreamException
argument_list|(
name|e
argument_list|,
name|metadata
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|InvalidFormatException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|TikaException
argument_list|(
literal|"Broken OOXML file"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
name|void
name|handleEmbeddedPart
parameter_list|(
name|PackagePart
name|source
parameter_list|,
name|PackageRelationship
name|rel
parameter_list|,
name|ContentHandler
name|handler
parameter_list|,
name|Metadata
name|parentMetadata
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|seen
parameter_list|)
throws|throws
name|IOException
throws|,
name|SAXException
throws|,
name|TikaException
throws|,
name|InvalidFormatException
block|{
name|URI
name|targetURI
init|=
name|rel
operator|.
name|getTargetURI
argument_list|()
decl_stmt|;
if|if
condition|(
name|targetURI
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|seen
operator|.
name|contains
argument_list|(
name|targetURI
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
block|{
return|return;
block|}
name|seen
operator|.
name|add
argument_list|(
name|targetURI
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|URI
name|sourceURI
init|=
name|rel
operator|.
name|getSourceURI
argument_list|()
decl_stmt|;
name|String
name|sourceDesc
decl_stmt|;
if|if
condition|(
name|sourceURI
operator|!=
literal|null
condition|)
block|{
name|sourceDesc
operator|=
name|getJustFileName
argument_list|(
name|sourceURI
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|sourceDesc
operator|.
name|startsWith
argument_list|(
literal|"slide"
argument_list|)
condition|)
block|{
name|sourceDesc
operator|+=
literal|"_"
expr_stmt|;
block|}
else|else
block|{
name|sourceDesc
operator|=
literal|""
expr_stmt|;
block|}
block|}
else|else
block|{
name|sourceDesc
operator|=
literal|""
expr_stmt|;
block|}
if|if
condition|(
name|rel
operator|.
name|getTargetMode
argument_list|()
operator|!=
name|TargetMode
operator|.
name|INTERNAL
condition|)
block|{
return|return;
block|}
name|PackagePart
name|target
decl_stmt|;
try|try
block|{
name|target
operator|=
name|source
operator|.
name|getRelatedPart
argument_list|(
name|rel
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|ex
parameter_list|)
block|{
return|return;
block|}
name|String
name|type
init|=
name|rel
operator|.
name|getRelationshipType
argument_list|()
decl_stmt|;
if|if
condition|(
name|POIXMLDocument
operator|.
name|OLE_OBJECT_REL_TYPE
operator|.
name|equals
argument_list|(
name|type
argument_list|)
operator|&&
name|TYPE_OLE_OBJECT
operator|.
name|equals
argument_list|(
name|target
operator|.
name|getContentType
argument_list|()
argument_list|)
condition|)
block|{
name|handleEmbeddedOLE
argument_list|(
name|target
argument_list|,
name|handler
argument_list|,
name|sourceDesc
operator|+
name|rel
operator|.
name|getId
argument_list|()
argument_list|,
name|parentMetadata
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|RELATION_AUDIO
operator|.
name|equals
argument_list|(
name|type
argument_list|)
operator|||
name|PackageRelationshipTypes
operator|.
name|IMAGE_PART
operator|.
name|equals
argument_list|(
name|type
argument_list|)
operator|||
name|POIXMLDocument
operator|.
name|PACK_OBJECT_REL_TYPE
operator|.
name|equals
argument_list|(
name|type
argument_list|)
operator|||
name|POIXMLDocument
operator|.
name|OLE_OBJECT_REL_TYPE
operator|.
name|equals
argument_list|(
name|type
argument_list|)
condition|)
block|{
name|handleEmbeddedFile
argument_list|(
name|target
argument_list|,
name|handler
argument_list|,
name|sourceDesc
operator|+
name|rel
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|XSSFRelation
operator|.
name|VBA_MACROS
operator|.
name|getRelation
argument_list|()
operator|.
name|equals
argument_list|(
name|type
argument_list|)
condition|)
block|{
name|handleMacros
argument_list|(
name|target
argument_list|,
name|handler
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Handles an embedded OLE object in the document      */
specifier|private
name|void
name|handleEmbeddedOLE
parameter_list|(
name|PackagePart
name|part
parameter_list|,
name|ContentHandler
name|handler
parameter_list|,
name|String
name|rel
parameter_list|,
name|Metadata
name|parentMetadata
parameter_list|)
throws|throws
name|IOException
throws|,
name|SAXException
block|{
comment|// A POIFSFileSystem needs to be at least 3 blocks big to be valid
if|if
condition|(
name|part
operator|.
name|getSize
argument_list|()
operator|>=
literal|0
operator|&&
name|part
operator|.
name|getSize
argument_list|()
operator|<
literal|512
operator|*
literal|3
condition|)
block|{
comment|// Too small, skip
return|return;
block|}
name|InputStream
name|is
init|=
name|part
operator|.
name|getInputStream
argument_list|()
decl_stmt|;
comment|// Open the POIFS (OLE2) structure and process
name|POIFSFileSystem
name|fs
init|=
literal|null
decl_stmt|;
try|try
block|{
name|fs
operator|=
operator|new
name|POIFSFileSystem
argument_list|(
name|part
operator|.
name|getInputStream
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|EmbeddedDocumentUtil
operator|.
name|recordEmbeddedStreamException
argument_list|(
name|e
argument_list|,
name|parentMetadata
argument_list|)
expr_stmt|;
return|return;
block|}
name|TikaInputStream
name|stream
init|=
literal|null
decl_stmt|;
try|try
block|{
name|Metadata
name|metadata
init|=
operator|new
name|Metadata
argument_list|()
decl_stmt|;
name|metadata
operator|.
name|set
argument_list|(
name|Metadata
operator|.
name|EMBEDDED_RELATIONSHIP_ID
argument_list|,
name|rel
argument_list|)
expr_stmt|;
name|DirectoryNode
name|root
init|=
name|fs
operator|.
name|getRoot
argument_list|()
decl_stmt|;
name|POIFSDocumentType
name|type
init|=
name|POIFSDocumentType
operator|.
name|detectType
argument_list|(
name|root
argument_list|)
decl_stmt|;
if|if
condition|(
name|root
operator|.
name|hasEntry
argument_list|(
literal|"CONTENTS"
argument_list|)
operator|&&
name|root
operator|.
name|hasEntry
argument_list|(
literal|"\u0001Ole"
argument_list|)
operator|&&
name|root
operator|.
name|hasEntry
argument_list|(
literal|"\u0001CompObj"
argument_list|)
condition|)
block|{
comment|// TIKA-704: OLE 2.0 embedded non-Office document?
comment|//TODO: figure out if the equivalent of OLE 1.0's
comment|//getCommand() and getFileName() exist for OLE 2.0 to populate
comment|//TikaCoreProperties.ORIGINAL_RESOURCE_NAME
name|stream
operator|=
name|TikaInputStream
operator|.
name|get
argument_list|(
name|fs
operator|.
name|createDocumentInputStream
argument_list|(
literal|"CONTENTS"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|embeddedExtractor
operator|.
name|shouldParseEmbedded
argument_list|(
name|metadata
argument_list|)
condition|)
block|{
name|embeddedExtractor
operator|.
name|parseEmbedded
argument_list|(
name|stream
argument_list|,
operator|new
name|EmbeddedContentHandler
argument_list|(
name|handler
argument_list|)
argument_list|,
name|metadata
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|POIFSDocumentType
operator|.
name|OLE10_NATIVE
operator|==
name|type
condition|)
block|{
comment|// TIKA-704: OLE 1.0 embedded document
name|Ole10Native
name|ole
init|=
name|Ole10Native
operator|.
name|createFromEmbeddedOleObject
argument_list|(
name|fs
argument_list|)
decl_stmt|;
if|if
condition|(
name|ole
operator|.
name|getLabel
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|metadata
operator|.
name|set
argument_list|(
name|Metadata
operator|.
name|RESOURCE_NAME_KEY
argument_list|,
name|ole
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ole
operator|.
name|getCommand
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|metadata
operator|.
name|add
argument_list|(
name|TikaCoreProperties
operator|.
name|ORIGINAL_RESOURCE_NAME
argument_list|,
name|ole
operator|.
name|getCommand
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ole
operator|.
name|getFileName
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|metadata
operator|.
name|add
argument_list|(
name|TikaCoreProperties
operator|.
name|ORIGINAL_RESOURCE_NAME
argument_list|,
name|ole
operator|.
name|getFileName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|byte
index|[]
name|data
init|=
name|ole
operator|.
name|getDataBuffer
argument_list|()
decl_stmt|;
if|if
condition|(
name|data
operator|!=
literal|null
condition|)
block|{
name|stream
operator|=
name|TikaInputStream
operator|.
name|get
argument_list|(
name|data
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|stream
operator|!=
literal|null
operator|&&
name|embeddedExtractor
operator|.
name|shouldParseEmbedded
argument_list|(
name|metadata
argument_list|)
condition|)
block|{
name|embeddedExtractor
operator|.
name|parseEmbedded
argument_list|(
name|stream
argument_list|,
operator|new
name|EmbeddedContentHandler
argument_list|(
name|handler
argument_list|)
argument_list|,
name|metadata
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|handleEmbeddedFile
argument_list|(
name|part
argument_list|,
name|handler
argument_list|,
name|rel
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|e
parameter_list|)
block|{
comment|// There was no CONTENTS entry, so skip this part
block|}
catch|catch
parameter_list|(
name|Ole10NativeException
name|e
parameter_list|)
block|{
comment|// Could not process an OLE 1.0 entry, so skip this part
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|EmbeddedDocumentUtil
operator|.
name|recordEmbeddedStreamException
argument_list|(
name|e
argument_list|,
name|parentMetadata
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|fs
operator|!=
literal|null
condition|)
block|{
name|fs
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|stream
operator|!=
literal|null
condition|)
block|{
name|stream
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Handles an embedded file in the document      */
specifier|protected
name|void
name|handleEmbeddedFile
parameter_list|(
name|PackagePart
name|part
parameter_list|,
name|ContentHandler
name|handler
parameter_list|,
name|String
name|rel
parameter_list|)
throws|throws
name|SAXException
throws|,
name|IOException
block|{
name|Metadata
name|metadata
init|=
operator|new
name|Metadata
argument_list|()
decl_stmt|;
name|metadata
operator|.
name|set
argument_list|(
name|Metadata
operator|.
name|EMBEDDED_RELATIONSHIP_ID
argument_list|,
name|rel
argument_list|)
expr_stmt|;
comment|// Get the name
name|String
name|name
init|=
name|part
operator|.
name|getPartName
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
name|metadata
operator|.
name|set
argument_list|(
name|Metadata
operator|.
name|RESOURCE_NAME_KEY
argument_list|,
name|name
operator|.
name|substring
argument_list|(
name|name
operator|.
name|lastIndexOf
argument_list|(
literal|'/'
argument_list|)
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
comment|// Get the content type
name|metadata
operator|.
name|set
argument_list|(
name|Metadata
operator|.
name|CONTENT_TYPE
argument_list|,
name|part
operator|.
name|getContentType
argument_list|()
argument_list|)
expr_stmt|;
comment|// Call the recursing handler
if|if
condition|(
name|embeddedExtractor
operator|.
name|shouldParseEmbedded
argument_list|(
name|metadata
argument_list|)
condition|)
block|{
try|try
init|(
name|TikaInputStream
name|tis
init|=
name|TikaInputStream
operator|.
name|get
argument_list|(
name|part
operator|.
name|getInputStream
argument_list|()
argument_list|)
init|)
block|{
name|embeddedExtractor
operator|.
name|parseEmbedded
argument_list|(
name|tis
argument_list|,
operator|new
name|EmbeddedContentHandler
argument_list|(
name|handler
argument_list|)
argument_list|,
name|metadata
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Populates the {@link XHTMLContentHandler} object received as parameter.      */
specifier|protected
specifier|abstract
name|void
name|buildXHTML
parameter_list|(
name|XHTMLContentHandler
name|xhtml
parameter_list|)
throws|throws
name|SAXException
throws|,
name|XmlException
throws|,
name|IOException
function_decl|;
comment|/**      * Return a list of the main parts of the document, used      * when searching for embedded resources.      * This should be all the parts of the document that end      * up with things embedded into them.      */
specifier|protected
specifier|abstract
name|List
argument_list|<
name|PackagePart
argument_list|>
name|getMainDocumentParts
parameter_list|()
throws|throws
name|TikaException
function_decl|;
name|void
name|handleMacros
parameter_list|(
name|PackagePart
name|macroPart
parameter_list|,
name|ContentHandler
name|handler
parameter_list|)
throws|throws
name|TikaException
throws|,
name|SAXException
block|{
name|OfficeParserConfig
name|officeParserConfig
init|=
name|context
operator|.
name|get
argument_list|(
name|OfficeParserConfig
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|officeParserConfig
operator|.
name|getExtractMacros
argument_list|()
condition|)
block|{
try|try
init|(
name|InputStream
name|is
init|=
name|macroPart
operator|.
name|getInputStream
argument_list|()
init|)
block|{
try|try
init|(
name|NPOIFSFileSystem
name|npoifs
init|=
operator|new
name|NPOIFSFileSystem
argument_list|(
name|is
argument_list|)
init|)
block|{
comment|//Macro reading exceptions are already swallowed here
name|OfficeParser
operator|.
name|extractMacros
argument_list|(
name|npoifs
argument_list|,
name|handler
argument_list|,
name|embeddedExtractor
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|TikaException
argument_list|(
literal|"Broken OOXML file"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
comment|/**      * This is used by the SAX docx and pptx decorators to load hyperlinks and      * other linked objects      *      * @param bodyPart      * @return      */
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|loadLinkedRelationships
parameter_list|(
name|PackagePart
name|bodyPart
parameter_list|,
name|boolean
name|includeInternal
parameter_list|,
name|Metadata
name|metadata
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|linkedRelationships
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
try|try
block|{
name|PackageRelationshipCollection
name|prc
init|=
name|bodyPart
operator|.
name|getRelationshipsByType
argument_list|(
name|XWPFRelation
operator|.
name|HYPERLINK
operator|.
name|getRelation
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|prc
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|PackageRelationship
name|pr
init|=
name|prc
operator|.
name|getRelationship
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|pr
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
operator|!
name|includeInternal
operator|&&
name|TargetMode
operator|.
name|INTERNAL
operator|.
name|equals
argument_list|(
name|pr
operator|.
name|getTargetMode
argument_list|()
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|String
name|id
init|=
name|pr
operator|.
name|getId
argument_list|()
decl_stmt|;
name|String
name|url
init|=
operator|(
name|pr
operator|.
name|getTargetURI
argument_list|()
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|pr
operator|.
name|getTargetURI
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
name|id
operator|!=
literal|null
operator|&&
name|url
operator|!=
literal|null
condition|)
block|{
name|linkedRelationships
operator|.
name|put
argument_list|(
name|id
argument_list|,
name|url
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|String
name|rel
range|:
name|EMBEDDED_RELATIONSHIPS
control|)
block|{
name|prc
operator|=
name|bodyPart
operator|.
name|getRelationshipsByType
argument_list|(
name|rel
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|prc
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|PackageRelationship
name|pr
init|=
name|prc
operator|.
name|getRelationship
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|pr
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
name|String
name|id
init|=
name|pr
operator|.
name|getId
argument_list|()
decl_stmt|;
name|String
name|uriString
init|=
operator|(
name|pr
operator|.
name|getTargetURI
argument_list|()
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|pr
operator|.
name|getTargetURI
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|String
name|fileName
init|=
name|uriString
decl_stmt|;
if|if
condition|(
name|pr
operator|.
name|getTargetURI
argument_list|()
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|fileName
operator|=
name|FileHelper
operator|.
name|getFilename
argument_list|(
operator|new
name|File
argument_list|(
name|fileName
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|fileName
operator|=
name|uriString
expr_stmt|;
block|}
block|}
if|if
condition|(
name|id
operator|!=
literal|null
condition|)
block|{
name|fileName
operator|=
operator|(
name|fileName
operator|==
literal|null
operator|)
condition|?
literal|""
else|:
name|fileName
expr_stmt|;
name|linkedRelationships
operator|.
name|put
argument_list|(
name|id
argument_list|,
name|fileName
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|InvalidFormatException
name|e
parameter_list|)
block|{
name|EmbeddedDocumentUtil
operator|.
name|recordEmbeddedStreamException
argument_list|(
name|e
argument_list|,
name|metadata
argument_list|)
expr_stmt|;
block|}
return|return
name|linkedRelationships
return|;
block|}
comment|/**      * This should handle the comments, master, notes, with the streaming "general docx/pptx handler"      *      * @param contentType      * @param xhtmlClassLabel      * @param parentPart      * @param contentHandler      */
name|void
name|handleGeneralTextContainingPart
parameter_list|(
name|String
name|contentType
parameter_list|,
name|String
name|xhtmlClassLabel
parameter_list|,
name|PackagePart
name|parentPart
parameter_list|,
name|Metadata
name|parentMetadata
parameter_list|,
name|ContentHandler
name|contentHandler
parameter_list|)
throws|throws
name|SAXException
block|{
name|PackageRelationshipCollection
name|relatedPartPRC
init|=
literal|null
decl_stmt|;
try|try
block|{
name|relatedPartPRC
operator|=
name|parentPart
operator|.
name|getRelationshipsByType
argument_list|(
name|contentType
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidFormatException
name|e
parameter_list|)
block|{
name|parentMetadata
operator|.
name|add
argument_list|(
name|TikaCoreProperties
operator|.
name|TIKA_META_EXCEPTION_WARNING
argument_list|,
name|ExceptionUtils
operator|.
name|getStackTrace
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|relatedPartPRC
operator|!=
literal|null
operator|&&
name|relatedPartPRC
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|AttributesImpl
name|attributes
init|=
operator|new
name|AttributesImpl
argument_list|()
decl_stmt|;
name|attributes
operator|.
name|addAttribute
argument_list|(
literal|""
argument_list|,
literal|"class"
argument_list|,
literal|"class"
argument_list|,
literal|"CDATA"
argument_list|,
name|xhtmlClassLabel
argument_list|)
expr_stmt|;
name|contentHandler
operator|.
name|startElement
argument_list|(
literal|""
argument_list|,
literal|"div"
argument_list|,
literal|"div"
argument_list|,
name|attributes
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|relatedPartPRC
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|PackageRelationship
name|relatedPartPackageRelationship
init|=
name|relatedPartPRC
operator|.
name|getRelationship
argument_list|(
name|i
argument_list|)
decl_stmt|;
try|try
block|{
name|PackagePart
name|relatedPartPart
init|=
name|parentPart
operator|.
name|getRelatedPart
argument_list|(
name|relatedPartPackageRelationship
argument_list|)
decl_stmt|;
try|try
init|(
name|InputStream
name|stream
init|=
name|relatedPartPart
operator|.
name|getInputStream
argument_list|()
init|)
block|{
name|context
operator|.
name|getSAXParser
argument_list|()
operator|.
name|parse
argument_list|(
name|stream
argument_list|,
operator|new
name|OfflineContentHandler
argument_list|(
operator|new
name|EmbeddedContentHandler
argument_list|(
name|contentHandler
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
decl||
name|TikaException
name|e
parameter_list|)
block|{
name|parentMetadata
operator|.
name|add
argument_list|(
name|TikaCoreProperties
operator|.
name|TIKA_META_EXCEPTION_WARNING
argument_list|,
name|ExceptionUtils
operator|.
name|getStackTrace
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|InvalidFormatException
name|e
parameter_list|)
block|{
name|parentMetadata
operator|.
name|add
argument_list|(
name|TikaCoreProperties
operator|.
name|TIKA_META_EXCEPTION_WARNING
argument_list|,
name|ExceptionUtils
operator|.
name|getStackTrace
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|contentHandler
operator|.
name|endElement
argument_list|(
literal|""
argument_list|,
literal|"div"
argument_list|,
literal|"div"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

