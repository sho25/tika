begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|microsoft
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|poifs
operator|.
name|filesystem
operator|.
name|DirectoryEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|poifs
operator|.
name|filesystem
operator|.
name|DirectoryNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|poifs
operator|.
name|filesystem
operator|.
name|DocumentEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|poifs
operator|.
name|filesystem
operator|.
name|DocumentInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|poifs
operator|.
name|filesystem
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|poifs
operator|.
name|filesystem
operator|.
name|POIFSFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|poifs
operator|.
name|storage
operator|.
name|HeaderBlockConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|util
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|util
operator|.
name|LittleEndian
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|exception
operator|.
name|TikaException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|extractor
operator|.
name|AutoContainerExtractor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|extractor
operator|.
name|ContainerEmbededResourceHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|extractor
operator|.
name|ContainerExtractor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|io
operator|.
name|TikaInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|microsoft
operator|.
name|OfficeParser
operator|.
name|POIFSDocumentType
import|;
end_import

begin_comment
comment|/**  * A Container Extractor that handles extracting resources embeded  *  in Microsoft office files, eg images and excel files embeded  *  in a word document.  */
end_comment

begin_class
specifier|public
class|class
name|POIFSContainerExtractor
implements|implements
name|ContainerExtractor
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|223856361982352348L
decl_stmt|;
specifier|public
name|boolean
name|isSupported
parameter_list|(
name|TikaInputStream
name|input
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Grab the first 8 bytes, used to do container detection
name|input
operator|.
name|mark
argument_list|(
literal|8
argument_list|)
expr_stmt|;
name|byte
index|[]
name|first8
init|=
operator|new
name|byte
index|[
literal|8
index|]
decl_stmt|;
name|IOUtils
operator|.
name|readFully
argument_list|(
name|input
argument_list|,
name|first8
argument_list|)
expr_stmt|;
name|input
operator|.
name|reset
argument_list|()
expr_stmt|;
comment|// Is it one of ours?
name|long
name|ole2Signature
init|=
name|LittleEndian
operator|.
name|getLong
argument_list|(
name|first8
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|ole2Signature
operator|==
name|HeaderBlockConstants
operator|.
name|_signature
condition|)
block|{
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
specifier|public
name|void
name|extract
parameter_list|(
name|TikaInputStream
name|stream
parameter_list|,
name|ContainerExtractor
name|recurseExtractor
parameter_list|,
name|ContainerEmbededResourceHandler
name|handler
parameter_list|)
throws|throws
name|IOException
throws|,
name|TikaException
block|{
name|POIFSFileSystem
name|fs
init|=
operator|new
name|POIFSFileSystem
argument_list|(
name|stream
argument_list|)
decl_stmt|;
name|extract
argument_list|(
name|fs
operator|.
name|getRoot
argument_list|()
argument_list|,
name|recurseExtractor
argument_list|,
name|handler
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|extract
parameter_list|(
name|DirectoryEntry
name|dir
parameter_list|,
name|ContainerExtractor
name|recurseExtractor
parameter_list|,
name|ContainerEmbededResourceHandler
name|handler
parameter_list|)
throws|throws
name|IOException
throws|,
name|TikaException
block|{
comment|// What kind of thing is it?
name|POIFSDocumentType
name|type
init|=
name|POIFSDocumentType
operator|.
name|detectType
argument_list|(
name|dir
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|WORKBOOK
case|:
comment|// Firstly do any embeded office documents
for|for
control|(
name|Entry
name|entry
range|:
name|dir
control|)
block|{
if|if
condition|(
name|entry
operator|.
name|getName
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"MBD"
argument_list|)
condition|)
block|{
name|handleEmbededOfficeDoc
argument_list|(
operator|(
name|DirectoryEntry
operator|)
name|entry
argument_list|,
name|recurseExtractor
argument_list|,
name|handler
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Now do the embeded images
comment|// TODO
break|break;
case|case
name|WORDDOCUMENT
case|:
comment|// Firstly do any embeded office documents
try|try
block|{
name|DirectoryEntry
name|op
init|=
operator|(
name|DirectoryEntry
operator|)
name|dir
operator|.
name|getEntry
argument_list|(
literal|"ObjectPool"
argument_list|)
decl_stmt|;
for|for
control|(
name|Entry
name|entry
range|:
name|op
control|)
block|{
if|if
condition|(
name|entry
operator|.
name|getName
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"_"
argument_list|)
condition|)
block|{
name|handleEmbededOfficeDoc
argument_list|(
operator|(
name|DirectoryEntry
operator|)
name|entry
argument_list|,
name|recurseExtractor
argument_list|,
name|handler
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|e
parameter_list|)
block|{}
comment|// Now do the embeded images
comment|// TODO
break|break;
case|case
name|POWERPOINT
case|:
comment|// TODO
break|break;
case|case
name|VISIO
case|:
comment|// TODO
break|break;
case|case
name|OUTLOOK
case|:
comment|// Firstly do any embeded emails
comment|// Now any embeded files
break|break;
block|}
block|}
comment|/**     * Handle an office document that's embeded at the POIFS level     */
specifier|protected
name|void
name|handleEmbededOfficeDoc
parameter_list|(
name|DirectoryEntry
name|dir
parameter_list|,
name|ContainerExtractor
name|recurseExtractor
parameter_list|,
name|ContainerEmbededResourceHandler
name|handler
parameter_list|)
throws|throws
name|IOException
throws|,
name|TikaException
block|{
comment|// Is it an embeded ooxml file?
try|try
block|{
name|Entry
name|ooxml
init|=
name|dir
operator|.
name|getEntry
argument_list|(
literal|"Package"
argument_list|)
decl_stmt|;
comment|// TODO
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|e
parameter_list|)
block|{}
comment|// Looks to be an embeded OLE2 office file
comment|// Need to dump the directory out to a new temp file, so
comment|//  it's stand along
name|POIFSFileSystem
name|newFS
init|=
operator|new
name|POIFSFileSystem
argument_list|()
decl_stmt|;
name|copy
argument_list|(
name|dir
argument_list|,
name|newFS
operator|.
name|getRoot
argument_list|()
argument_list|)
expr_stmt|;
name|File
name|tmpFile
init|=
name|File
operator|.
name|createTempFile
argument_list|(
literal|"tika"
argument_list|,
literal|".ole2"
argument_list|)
decl_stmt|;
name|FileOutputStream
name|out
init|=
operator|new
name|FileOutputStream
argument_list|(
name|tmpFile
argument_list|)
decl_stmt|;
name|newFS
operator|.
name|writeFilesystem
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// What kind of document is it?
name|POIFSDocumentType
name|type
init|=
name|POIFSDocumentType
operator|.
name|detectType
argument_list|(
name|dir
argument_list|)
decl_stmt|;
comment|// Trigger for the document itself
name|TikaInputStream
name|embeded
init|=
name|TikaInputStream
operator|.
name|get
argument_list|(
name|tmpFile
argument_list|)
decl_stmt|;
name|handler
operator|.
name|handle
argument_list|(
literal|null
argument_list|,
name|type
operator|.
name|getType
argument_list|()
argument_list|,
name|embeded
argument_list|)
expr_stmt|;
comment|// If we are recursing, process the document's contents too
if|if
condition|(
name|recurseExtractor
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|recurseExtractor
operator|instanceof
name|POIFSContainerExtractor
operator|||
name|recurseExtractor
operator|instanceof
name|AutoContainerExtractor
condition|)
block|{
comment|// Shortcut - use already open poifs
name|extract
argument_list|(
name|dir
argument_list|,
name|recurseExtractor
argument_list|,
name|handler
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Long way round, need to use the temporary document
name|recurseExtractor
operator|.
name|extract
argument_list|(
name|embeded
argument_list|,
name|recurseExtractor
argument_list|,
name|handler
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Tidy up
name|embeded
operator|.
name|close
argument_list|()
expr_stmt|;
name|tmpFile
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|void
name|copy
parameter_list|(
name|DirectoryEntry
name|sourceDir
parameter_list|,
name|DirectoryEntry
name|destDir
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|Entry
name|entry
range|:
name|sourceDir
control|)
block|{
if|if
condition|(
name|entry
operator|instanceof
name|DirectoryEntry
condition|)
block|{
comment|// Need to recurse
name|DirectoryEntry
name|newDir
init|=
name|destDir
operator|.
name|createDirectory
argument_list|(
name|entry
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|copy
argument_list|(
operator|(
name|DirectoryEntry
operator|)
name|entry
argument_list|,
name|newDir
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Copy entry
name|InputStream
name|contents
init|=
operator|new
name|DocumentInputStream
argument_list|(
operator|(
name|DocumentEntry
operator|)
name|entry
argument_list|)
decl_stmt|;
name|destDir
operator|.
name|createDocument
argument_list|(
name|entry
operator|.
name|getName
argument_list|()
argument_list|,
name|contents
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

