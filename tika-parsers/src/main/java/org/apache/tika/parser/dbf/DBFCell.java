begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|dbf
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|Charset
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_class
class|class
name|DBFCell
block|{
specifier|private
specifier|final
name|DBFColumnHeader
operator|.
name|ColType
name|colType
decl_stmt|;
specifier|private
specifier|final
name|byte
index|[]
name|bytes
decl_stmt|;
specifier|private
specifier|final
name|int
name|decimalCount
decl_stmt|;
name|int
name|bytesReadLast
init|=
literal|0
decl_stmt|;
name|DBFCell
parameter_list|(
name|DBFColumnHeader
operator|.
name|ColType
name|colType
parameter_list|,
name|int
name|fieldLength
parameter_list|,
name|int
name|decimalCount
parameter_list|)
block|{
name|this
operator|.
name|colType
operator|=
name|colType
expr_stmt|;
name|this
operator|.
name|decimalCount
operator|=
name|decimalCount
expr_stmt|;
name|this
operator|.
name|bytes
operator|=
operator|new
name|byte
index|[
name|fieldLength
index|]
expr_stmt|;
block|}
name|String
name|getString
parameter_list|(
name|Charset
name|charset
parameter_list|)
block|{
switch|switch
condition|(
name|colType
condition|)
block|{
case|case
name|C
case|:
return|return
operator|new
name|String
argument_list|(
name|getBytes
argument_list|()
argument_list|,
name|charset
argument_list|)
operator|.
name|trim
argument_list|()
return|;
case|case
name|D
case|:
return|return
name|getFormattedDate
argument_list|()
return|;
case|case
name|N
case|:
return|return
operator|new
name|String
argument_list|(
name|getBytes
argument_list|()
argument_list|,
name|StandardCharsets
operator|.
name|US_ASCII
argument_list|)
operator|.
name|trim
argument_list|()
return|;
case|case
name|L
case|:
return|return
operator|new
name|String
argument_list|(
name|getBytes
argument_list|()
argument_list|,
name|StandardCharsets
operator|.
name|US_ASCII
argument_list|)
operator|.
name|trim
argument_list|()
return|;
default|default:
comment|//TODO: find examples of other cell types for testing
return|return
operator|new
name|String
argument_list|(
name|getBytes
argument_list|()
argument_list|,
name|StandardCharsets
operator|.
name|US_ASCII
argument_list|)
operator|.
name|trim
argument_list|()
return|;
block|}
block|}
comment|//returns whether any content was read
name|boolean
name|read
parameter_list|(
name|InputStream
name|is
parameter_list|)
throws|throws
name|IOException
block|{
name|bytesReadLast
operator|=
name|IOUtils
operator|.
name|read
argument_list|(
name|is
argument_list|,
name|bytes
argument_list|)
expr_stmt|;
if|if
condition|(
name|DBFReader
operator|.
name|STRICT
operator|&&
name|bytesReadLast
operator|!=
name|bytes
operator|.
name|length
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Truncated record, only read "
operator|+
name|bytesReadLast
operator|+
literal|" bytes, but should have read: "
operator|+
name|bytes
operator|.
name|length
argument_list|)
throw|;
block|}
return|return
name|bytesReadLast
operator|>
literal|0
return|;
block|}
comment|/**      *      * @return copy of bytes that were read on the last read      */
name|byte
index|[]
name|getBytes
parameter_list|()
block|{
name|byte
index|[]
name|ret
init|=
operator|new
name|byte
index|[
name|bytesReadLast
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|bytes
argument_list|,
literal|0
argument_list|,
name|ret
argument_list|,
literal|0
argument_list|,
name|bytesReadLast
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
name|DBFColumnHeader
operator|.
name|ColType
name|getColType
parameter_list|()
block|{
return|return
name|colType
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"DBFCell{"
operator|+
literal|"colType="
operator|+
name|colType
operator|+
literal|", bytes="
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|bytes
argument_list|)
operator|+
literal|", decimalCount="
operator|+
name|decimalCount
operator|+
literal|'}'
return|;
block|}
name|DBFCell
name|deepCopy
parameter_list|()
block|{
name|DBFCell
name|cell
init|=
operator|new
name|DBFCell
argument_list|(
name|colType
argument_list|,
name|bytes
operator|.
name|length
argument_list|,
name|decimalCount
argument_list|)
decl_stmt|;
name|cell
operator|.
name|bytesReadLast
operator|=
name|this
operator|.
name|bytesReadLast
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|this
operator|.
name|bytes
argument_list|,
literal|0
argument_list|,
name|cell
operator|.
name|bytes
argument_list|,
literal|0
argument_list|,
name|bytesReadLast
argument_list|)
expr_stmt|;
return|return
name|cell
return|;
block|}
specifier|private
name|String
name|getFormattedDate
parameter_list|()
block|{
name|byte
index|[]
name|dateBytes
init|=
name|getBytes
argument_list|()
decl_stmt|;
if|if
condition|(
name|dateBytes
operator|.
name|length
operator|<
literal|8
condition|)
block|{
return|return
literal|""
return|;
block|}
name|String
name|year
init|=
operator|new
name|String
argument_list|(
name|dateBytes
argument_list|,
literal|0
argument_list|,
literal|4
argument_list|,
name|StandardCharsets
operator|.
name|US_ASCII
argument_list|)
decl_stmt|;
name|String
name|month
init|=
operator|new
name|String
argument_list|(
name|dateBytes
argument_list|,
literal|4
argument_list|,
literal|2
argument_list|,
name|StandardCharsets
operator|.
name|US_ASCII
argument_list|)
decl_stmt|;
name|String
name|day
init|=
operator|new
name|String
argument_list|(
name|dateBytes
argument_list|,
literal|6
argument_list|,
literal|2
argument_list|,
name|StandardCharsets
operator|.
name|US_ASCII
argument_list|)
decl_stmt|;
comment|//test to see that these values make any sense
for|for
control|(
name|String
name|s
range|:
operator|new
name|String
index|[]
block|{
name|year
block|,
name|month
block|,
name|day
block|}
control|)
block|{
try|try
block|{
name|Integer
operator|.
name|parseInt
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
return|return
literal|""
return|;
block|}
block|}
return|return
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"%s/%s/%s"
argument_list|,
name|month
argument_list|,
name|day
argument_list|,
name|year
argument_list|)
return|;
block|}
block|}
end_class

end_unit

