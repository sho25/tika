begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|utils
package|;
end_package

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|MessageDigest
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|NoSuchAlgorithmException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Provider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|codec
operator|.
name|binary
operator|.
name|Base32
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|DigestingParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|digest
operator|.
name|CompositeDigester
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|digest
operator|.
name|InputStreamDigester
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|jce
operator|.
name|provider
operator|.
name|BouncyCastleProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|util
operator|.
name|encoders
operator|.
name|Hex
import|;
end_import

begin_comment
comment|/**  * Digester that relies on BouncyCastle for MessageDigest implementations.  *  */
end_comment

begin_class
specifier|public
class|class
name|BouncyCastleDigester
extends|extends
name|CompositeDigester
block|{
comment|/**      * Include a string representing the comma-separated algorithms to run: e.g. "md5,sha1".      * If you want base 32 encoding instead of hexadecimal, add ":32" to the algorithm, e.g. "md5,sha1:32"      *<p/>      * Will throw an IllegalArgumentException if an algorithm isn't supported      * @param markLimit      * @param algorithmString      */
specifier|public
name|BouncyCastleDigester
parameter_list|(
name|int
name|markLimit
parameter_list|,
name|String
name|algorithmString
parameter_list|)
block|{
name|super
argument_list|(
name|buildDigesters
argument_list|(
name|markLimit
argument_list|,
name|algorithmString
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|DigestingParser
operator|.
name|Digester
index|[]
name|buildDigesters
parameter_list|(
name|int
name|markLimit
parameter_list|,
name|String
name|digesterDef
parameter_list|)
block|{
name|String
index|[]
name|digests
init|=
name|digesterDef
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
name|DigestingParser
operator|.
name|Digester
index|[]
name|digesters
init|=
operator|new
name|DigestingParser
operator|.
name|Digester
index|[
name|digests
operator|.
name|length
index|]
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|String
name|digest
range|:
name|digests
control|)
block|{
name|String
index|[]
name|parts
init|=
name|digest
operator|.
name|split
argument_list|(
literal|":"
argument_list|)
decl_stmt|;
name|DigestingParser
operator|.
name|Encoder
name|encoder
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|parts
operator|.
name|length
operator|>
literal|1
condition|)
block|{
if|if
condition|(
name|parts
index|[
literal|1
index|]
operator|.
name|equals
argument_list|(
literal|"16"
argument_list|)
condition|)
block|{
name|encoder
operator|=
operator|new
name|HexEncoder
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|parts
index|[
literal|1
index|]
operator|.
name|equals
argument_list|(
literal|"32"
argument_list|)
condition|)
block|{
name|encoder
operator|=
operator|new
name|Base32Encoder
argument_list|()
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Value must be '16' or '32'"
argument_list|)
throw|;
block|}
block|}
else|else
block|{
name|encoder
operator|=
operator|new
name|HexEncoder
argument_list|()
expr_stmt|;
block|}
name|digesters
index|[
name|i
operator|++
index|]
operator|=
operator|new
name|BCInputStreamDigester
argument_list|(
name|markLimit
argument_list|,
name|parts
index|[
literal|0
index|]
argument_list|,
name|encoder
argument_list|)
expr_stmt|;
block|}
return|return
name|digesters
return|;
block|}
specifier|private
specifier|static
class|class
name|HexEncoder
implements|implements
name|DigestingParser
operator|.
name|Encoder
block|{
annotation|@
name|Override
specifier|public
name|String
name|encode
parameter_list|(
name|byte
index|[]
name|bytes
parameter_list|)
block|{
return|return
name|Hex
operator|.
name|toHexString
argument_list|(
name|bytes
argument_list|)
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|Base32Encoder
implements|implements
name|DigestingParser
operator|.
name|Encoder
block|{
annotation|@
name|Override
specifier|public
name|String
name|encode
parameter_list|(
name|byte
index|[]
name|bytes
parameter_list|)
block|{
return|return
operator|new
name|Base32
argument_list|()
operator|.
name|encodeToString
argument_list|(
name|bytes
argument_list|)
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|BCInputStreamDigester
extends|extends
name|InputStreamDigester
block|{
specifier|public
name|BCInputStreamDigester
parameter_list|(
name|int
name|markLimit
parameter_list|,
name|String
name|algorithm
parameter_list|,
name|DigestingParser
operator|.
name|Encoder
name|encoder
parameter_list|)
block|{
name|super
argument_list|(
name|markLimit
argument_list|,
name|algorithm
argument_list|,
name|encoder
argument_list|)
expr_stmt|;
try|try
block|{
name|MessageDigest
operator|.
name|getInstance
argument_list|(
name|algorithm
argument_list|,
name|getProvider
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchAlgorithmException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|protected
name|Provider
name|getProvider
parameter_list|()
block|{
return|return
operator|new
name|BouncyCastleProvider
argument_list|()
return|;
block|}
block|}
block|}
end_class

end_unit

