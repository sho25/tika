begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|mail
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|metadata
operator|.
name|Metadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|metadata
operator|.
name|Property
import|;
end_import

begin_class
specifier|public
class|class
name|MailUtil
block|{
specifier|private
specifier|final
specifier|static
name|Pattern
name|EMAIL
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"(?i)([^<@\\s]+@[^@> ]+)"
argument_list|)
decl_stmt|;
comment|/**      * This tries to split a "from" or "to" value into a person field and an email field.      * This does not handle RFC encoded strings (e.g. "=?iso-8859-1?Q?H=E9roux_Louise?"),      * you must decode them first.      *      * @param string      * @param personProperty      * @param emailProperty      * @param metadata      */
specifier|public
specifier|static
name|void
name|setPersonAndEmail
parameter_list|(
name|String
name|string
parameter_list|,
name|Property
name|personProperty
parameter_list|,
name|Property
name|emailProperty
parameter_list|,
name|Metadata
name|metadata
parameter_list|)
block|{
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|String
name|email
init|=
name|extractEmail
argument_list|(
name|string
argument_list|,
name|sb
argument_list|)
decl_stmt|;
name|String
name|person
init|=
name|clean
argument_list|(
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|person
operator|!=
literal|null
operator|&&
name|person
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|metadata
operator|.
name|set
argument_list|(
name|personProperty
argument_list|,
name|person
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|email
operator|!=
literal|null
operator|&&
name|email
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|metadata
operator|.
name|set
argument_list|(
name|emailProperty
argument_list|,
name|email
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * This tries to split a "from" or "to" value into a person field and an email field.      * This does not handle RFC encoded strings (e.g. "=?iso-8859-1?Q?H=E9roux_Louise?"),      * you must decode them first.      *      * @param string      * @param personProperty      * @param emailProperty      * @param metadata      */
specifier|public
specifier|static
name|void
name|addPersonAndEmail
parameter_list|(
name|String
name|string
parameter_list|,
name|Property
name|personProperty
parameter_list|,
name|Property
name|emailProperty
parameter_list|,
name|Metadata
name|metadata
parameter_list|)
block|{
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|String
name|email
init|=
name|extractEmail
argument_list|(
name|string
argument_list|,
name|sb
argument_list|)
decl_stmt|;
name|String
name|person
init|=
name|clean
argument_list|(
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|person
operator|!=
literal|null
operator|&&
name|person
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|metadata
operator|.
name|add
argument_list|(
name|personProperty
argument_list|,
name|person
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|email
operator|!=
literal|null
operator|&&
name|email
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|metadata
operator|.
name|add
argument_list|(
name|emailProperty
argument_list|,
name|email
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|String
name|clean
parameter_list|(
name|String
name|s
parameter_list|)
block|{
name|s
operator|=
name|s
operator|.
name|replaceAll
argument_list|(
literal|"[<>\"]"
argument_list|,
literal|" "
argument_list|)
expr_stmt|;
name|s
operator|=
name|s
operator|.
name|trim
argument_list|()
expr_stmt|;
return|return
name|s
return|;
block|}
specifier|private
specifier|static
name|String
name|extractEmail
parameter_list|(
name|String
name|string
parameter_list|,
name|StringBuffer
name|sb
parameter_list|)
block|{
name|Matcher
name|emailMatcher
init|=
name|EMAIL
operator|.
name|matcher
argument_list|(
name|string
argument_list|)
decl_stmt|;
name|String
name|email
init|=
literal|""
decl_stmt|;
comment|//TODO: warn if more than one email is found?
while|while
condition|(
name|emailMatcher
operator|.
name|find
argument_list|()
condition|)
block|{
name|emailMatcher
operator|.
name|appendReplacement
argument_list|(
name|sb
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|email
operator|=
name|emailMatcher
operator|.
name|group
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
name|emailMatcher
operator|.
name|appendTail
argument_list|(
name|sb
argument_list|)
expr_stmt|;
return|return
name|email
return|;
block|}
comment|/**      * If the chunk looks like it contains an email      * @param chunk to analyse      * @return {@code true} if chunk looks like it contains an email      */
specifier|public
specifier|static
name|boolean
name|containsEmail
parameter_list|(
name|String
name|chunk
parameter_list|)
block|{
if|if
condition|(
name|chunk
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|EMAIL
operator|.
name|matcher
argument_list|(
name|chunk
argument_list|)
operator|.
name|find
argument_list|()
condition|)
block|{
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
block|}
end_class

end_unit

