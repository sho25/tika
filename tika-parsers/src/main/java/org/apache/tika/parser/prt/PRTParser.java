begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|prt
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|util
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|util
operator|.
name|LittleEndian
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|exception
operator|.
name|TikaException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|metadata
operator|.
name|Metadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|mime
operator|.
name|MediaType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|AbstractParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|ParseContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|sax
operator|.
name|XHTMLContentHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|ContentHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_comment
comment|/**  * A basic text extracting parser for the CADKey PRT (CAD Drawing)  *  format. It outputs text from note entries.  */
end_comment

begin_class
specifier|public
class|class
name|PRTParser
extends|extends
name|AbstractParser
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|4659638314375035178L
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Set
argument_list|<
name|MediaType
argument_list|>
name|SUPPORTED_TYPES
init|=
name|Collections
operator|.
name|singleton
argument_list|(
name|MediaType
operator|.
name|application
argument_list|(
literal|"x-prt"
argument_list|)
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|PRT_MIME_TYPE
init|=
literal|"application/x-prt"
decl_stmt|;
specifier|public
name|Set
argument_list|<
name|MediaType
argument_list|>
name|getSupportedTypes
parameter_list|(
name|ParseContext
name|context
parameter_list|)
block|{
return|return
name|SUPPORTED_TYPES
return|;
block|}
specifier|private
specifier|static
specifier|final
name|int
name|MAX_SANE_TEXT_LENGTH
init|=
literal|0x0800
decl_stmt|;
comment|/*      * Text types:      *   00 00 00 00 f0 [3b]f sz sz TEXT     *view name*      *   00 00 00 00 f0 3f 00 00 00 00 00 00 00 00 sz sz TEXT  *view name*      *   (anything)  e0 3f sz sz TEXT    *view name*      *   3x 33 33 33 33 33 e3 3f 0x 00 00 0x 00 00 0x 0x 1f sz sz TEXT    *note entries*       *         *  Note - all text is null terminated      */
specifier|public
name|void
name|parse
parameter_list|(
name|InputStream
name|stream
parameter_list|,
name|ContentHandler
name|handler
parameter_list|,
name|Metadata
name|metadata
parameter_list|,
name|ParseContext
name|context
parameter_list|)
throws|throws
name|IOException
throws|,
name|SAXException
throws|,
name|TikaException
block|{
name|XHTMLContentHandler
name|xhtml
init|=
operator|new
name|XHTMLContentHandler
argument_list|(
name|handler
argument_list|,
name|metadata
argument_list|)
decl_stmt|;
name|Last5
name|l5
init|=
operator|new
name|Last5
argument_list|()
decl_stmt|;
name|int
name|read
decl_stmt|;
comment|// Try to get the creation date, which is YYYYMMDDhhmm
name|byte
index|[]
name|header
init|=
operator|new
name|byte
index|[
literal|30
index|]
decl_stmt|;
name|IOUtils
operator|.
name|readFully
argument_list|(
name|stream
argument_list|,
name|header
argument_list|)
expr_stmt|;
name|byte
index|[]
name|date
init|=
operator|new
name|byte
index|[
literal|12
index|]
decl_stmt|;
name|IOUtils
operator|.
name|readFully
argument_list|(
name|stream
argument_list|,
name|date
argument_list|)
expr_stmt|;
name|String
name|dateStr
init|=
operator|new
name|String
argument_list|(
name|date
argument_list|,
literal|"ASCII"
argument_list|)
decl_stmt|;
if|if
condition|(
name|dateStr
operator|.
name|startsWith
argument_list|(
literal|"19"
argument_list|)
operator|||
name|dateStr
operator|.
name|startsWith
argument_list|(
literal|"20"
argument_list|)
condition|)
block|{
name|String
name|formattedDate
init|=
name|dateStr
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|4
argument_list|)
operator|+
literal|"-"
operator|+
name|dateStr
operator|.
name|substring
argument_list|(
literal|4
argument_list|,
literal|6
argument_list|)
operator|+
literal|"-"
operator|+
name|dateStr
operator|.
name|substring
argument_list|(
literal|6
argument_list|,
literal|8
argument_list|)
operator|+
literal|"T"
operator|+
name|dateStr
operator|.
name|substring
argument_list|(
literal|8
argument_list|,
literal|10
argument_list|)
operator|+
literal|":"
operator|+
name|dateStr
operator|.
name|substring
argument_list|(
literal|10
argument_list|,
literal|12
argument_list|)
operator|+
literal|":00"
decl_stmt|;
name|metadata
operator|.
name|set
argument_list|(
name|Metadata
operator|.
name|CREATION_DATE
argument_list|,
name|formattedDate
argument_list|)
expr_stmt|;
name|metadata
operator|.
name|set
argument_list|(
name|Metadata
operator|.
name|DATE
argument_list|,
name|formattedDate
argument_list|)
expr_stmt|;
block|}
name|metadata
operator|.
name|set
argument_list|(
name|Metadata
operator|.
name|CONTENT_TYPE
argument_list|,
name|PRT_MIME_TYPE
argument_list|)
expr_stmt|;
comment|// Now look for text
while|while
condition|(
operator|(
name|read
operator|=
name|stream
operator|.
name|read
argument_list|()
operator|)
operator|>
operator|-
literal|1
condition|)
block|{
if|if
condition|(
name|read
operator|==
literal|0xe0
operator|||
name|read
operator|==
literal|0xe3
operator|||
name|read
operator|==
literal|0xf0
condition|)
block|{
name|int
name|nread
init|=
name|stream
operator|.
name|read
argument_list|()
decl_stmt|;
if|if
condition|(
name|nread
operator|==
literal|0x3f
operator|||
name|nread
operator|==
literal|0xbf
condition|)
block|{
comment|// Looks promising, check back for a suitable value
if|if
condition|(
name|read
operator|==
literal|0xe3
operator|&&
name|nread
operator|==
literal|0x3f
condition|)
block|{
if|if
condition|(
name|l5
operator|.
name|is33
argument_list|()
condition|)
block|{
comment|// Bingo, note text
name|handleNoteText
argument_list|(
name|stream
argument_list|,
name|xhtml
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|l5
operator|.
name|is00
argument_list|()
condition|)
block|{
comment|// Likely view name
name|handleViewName
argument_list|(
name|read
argument_list|,
name|nread
argument_list|,
name|stream
argument_list|,
name|xhtml
argument_list|,
name|l5
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|l5
operator|.
name|record
argument_list|(
name|read
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|handleNoteText
parameter_list|(
name|InputStream
name|stream
parameter_list|,
name|XHTMLContentHandler
name|xhtml
parameter_list|)
throws|throws
name|IOException
throws|,
name|SAXException
throws|,
name|TikaException
block|{
comment|// Ensure we have the right padding text
name|int
name|read
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|read
operator|=
name|stream
operator|.
name|read
argument_list|()
expr_stmt|;
if|if
condition|(
name|read
operator|>=
literal|0
operator|&&
name|read
operator|<=
literal|0x0f
condition|)
block|{
comment|// Promising
block|}
else|else
block|{
comment|// Wrong, false detection
return|return;
block|}
block|}
name|read
operator|=
name|stream
operator|.
name|read
argument_list|()
expr_stmt|;
if|if
condition|(
name|read
operator|!=
literal|0x1f
condition|)
block|{
comment|// Wrong, false detection
return|return;
block|}
name|int
name|length
init|=
name|LittleEndian
operator|.
name|readUShort
argument_list|(
name|stream
argument_list|)
decl_stmt|;
if|if
condition|(
name|length
operator|<=
name|MAX_SANE_TEXT_LENGTH
condition|)
block|{
comment|// Length sanity check passed
name|handleText
argument_list|(
name|length
argument_list|,
name|stream
argument_list|,
name|xhtml
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|handleViewName
parameter_list|(
name|int
name|typeA
parameter_list|,
name|int
name|typeB
parameter_list|,
name|InputStream
name|stream
parameter_list|,
name|XHTMLContentHandler
name|xhtml
parameter_list|,
name|Last5
name|l5
parameter_list|)
throws|throws
name|IOException
throws|,
name|SAXException
throws|,
name|TikaException
block|{
comment|// Is it 8 byte zero padded?
name|int
name|maybeLength
init|=
name|LittleEndian
operator|.
name|readUShort
argument_list|(
name|stream
argument_list|)
decl_stmt|;
if|if
condition|(
name|maybeLength
operator|==
literal|0
condition|)
block|{
comment|// Check the next 6 bytes too
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|6
condition|;
name|i
operator|++
control|)
block|{
name|int
name|read
init|=
name|stream
operator|.
name|read
argument_list|()
decl_stmt|;
if|if
condition|(
name|read
operator|>=
literal|0
operator|&&
name|read
operator|<=
literal|0x0f
condition|)
block|{
comment|// Promising
block|}
else|else
block|{
comment|// Wrong, false detection
return|return;
block|}
block|}
name|byte
index|[]
name|b2
init|=
operator|new
name|byte
index|[
literal|2
index|]
decl_stmt|;
name|IOUtils
operator|.
name|readFully
argument_list|(
name|stream
argument_list|,
name|b2
argument_list|)
expr_stmt|;
name|int
name|length
init|=
name|LittleEndian
operator|.
name|getUShort
argument_list|(
name|b2
argument_list|)
decl_stmt|;
if|if
condition|(
name|length
operator|>
literal|1
operator|&&
name|length
operator|<=
name|MAX_SANE_TEXT_LENGTH
condition|)
block|{
comment|// Length sanity check passed
name|handleText
argument_list|(
name|length
argument_list|,
name|stream
argument_list|,
name|xhtml
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Was probably something else
name|l5
operator|.
name|record
argument_list|(
name|b2
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|l5
operator|.
name|record
argument_list|(
name|b2
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|maybeLength
operator|>
literal|0
operator|&&
name|maybeLength
operator|<
name|MAX_SANE_TEXT_LENGTH
condition|)
block|{
comment|// Looks like it's straight into the text
name|handleText
argument_list|(
name|maybeLength
argument_list|,
name|stream
argument_list|,
name|xhtml
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|handleText
parameter_list|(
name|int
name|length
parameter_list|,
name|InputStream
name|stream
parameter_list|,
name|XHTMLContentHandler
name|xhtml
parameter_list|)
throws|throws
name|IOException
throws|,
name|SAXException
throws|,
name|TikaException
block|{
name|byte
index|[]
name|str
init|=
operator|new
name|byte
index|[
name|length
index|]
decl_stmt|;
name|IOUtils
operator|.
name|readFully
argument_list|(
name|stream
argument_list|,
name|str
argument_list|)
expr_stmt|;
if|if
condition|(
name|str
index|[
name|length
operator|-
literal|1
index|]
operator|!=
literal|0
condition|)
block|{
comment|// Not properly null terminated, must be wrong
return|return;
block|}
comment|// TODO Is this the right character set?
name|String
name|text
init|=
operator|new
name|String
argument_list|(
name|str
argument_list|,
literal|0
argument_list|,
name|length
operator|-
literal|1
argument_list|,
literal|"UTF-8"
argument_list|)
decl_stmt|;
name|xhtml
operator|.
name|startElement
argument_list|(
literal|"p"
argument_list|)
expr_stmt|;
name|xhtml
operator|.
name|characters
argument_list|(
name|text
argument_list|)
expr_stmt|;
name|xhtml
operator|.
name|endElement
argument_list|(
literal|"p"
argument_list|)
expr_stmt|;
block|}
comment|/**      * Provides a view on the previous 5 bytes      */
specifier|private
specifier|static
class|class
name|Last5
block|{
name|byte
index|[]
name|data
init|=
operator|new
name|byte
index|[
literal|5
index|]
decl_stmt|;
name|int
name|pos
init|=
literal|0
decl_stmt|;
specifier|private
name|void
name|record
parameter_list|(
name|int
name|b
parameter_list|)
block|{
name|data
index|[
name|pos
index|]
operator|=
operator|(
name|byte
operator|)
name|b
expr_stmt|;
name|pos
operator|++
expr_stmt|;
if|if
condition|(
name|pos
operator|>=
name|data
operator|.
name|length
condition|)
block|{
name|pos
operator|=
literal|0
expr_stmt|;
block|}
block|}
specifier|private
name|byte
index|[]
name|get
parameter_list|()
block|{
name|byte
index|[]
name|ret
init|=
operator|new
name|byte
index|[
literal|5
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|ret
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|int
name|p
init|=
name|pos
operator|-
name|i
decl_stmt|;
if|if
condition|(
name|p
operator|<
literal|0
condition|)
block|{
name|p
operator|+=
name|ret
operator|.
name|length
expr_stmt|;
block|}
name|ret
index|[
name|i
index|]
operator|=
name|data
index|[
name|p
index|]
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
specifier|private
name|boolean
name|is33
parameter_list|()
block|{
name|byte
index|[]
name|last5
init|=
name|get
argument_list|()
decl_stmt|;
for|for
control|(
name|byte
name|b
range|:
name|last5
control|)
block|{
if|if
condition|(
name|b
operator|!=
literal|0x33
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
specifier|private
name|boolean
name|is00
parameter_list|()
block|{
name|byte
index|[]
name|last5
init|=
name|get
argument_list|()
decl_stmt|;
for|for
control|(
name|byte
name|b
range|:
name|last5
control|)
block|{
if|if
condition|(
name|b
operator|!=
literal|0x00
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
block|}
block|}
end_class

end_unit

