begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|microsoft
operator|.
name|ooxml
operator|.
name|xwpf
operator|.
name|ml2006
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|openxml4j
operator|.
name|opc
operator|.
name|ContentTypes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|metadata
operator|.
name|Metadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|metadata
operator|.
name|OfficeOpenXMLCore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|metadata
operator|.
name|Property
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|metadata
operator|.
name|TikaCoreProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|Attributes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_class
class|class
name|CorePropertiesHandler
extends|extends
name|AbstractPartHandler
block|{
specifier|final
specifier|static
name|String
name|DC_NS
init|=
literal|"http://purl.org/dc/elements/1.1"
decl_stmt|;
specifier|final
specifier|static
name|String
name|DC_TERMS_NS
init|=
literal|"http://purl.org/dc/terms"
decl_stmt|;
specifier|final
specifier|static
name|String
name|CP_NS
init|=
literal|"http://schemas.openxmlformats.org/package/2006/metadata/core-properties"
decl_stmt|;
specifier|private
specifier|final
name|Metadata
name|metadata
decl_stmt|;
specifier|final
name|StringBuilder
name|buffer
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Property
argument_list|>
argument_list|>
name|properties
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|public
name|CorePropertiesHandler
parameter_list|(
name|Metadata
name|metadata
parameter_list|)
block|{
name|this
operator|.
name|metadata
operator|=
name|metadata
expr_stmt|;
name|addProperties
argument_list|()
expr_stmt|;
block|}
name|void
name|addProperties
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Property
argument_list|>
name|dc
init|=
name|properties
operator|.
name|get
argument_list|(
name|DC_NS
argument_list|)
decl_stmt|;
if|if
condition|(
name|dc
operator|==
literal|null
condition|)
block|{
name|dc
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
block|}
name|dc
operator|.
name|put
argument_list|(
literal|"creator"
argument_list|,
name|TikaCoreProperties
operator|.
name|CREATOR
argument_list|)
expr_stmt|;
name|dc
operator|.
name|put
argument_list|(
literal|"title"
argument_list|,
name|TikaCoreProperties
operator|.
name|TITLE
argument_list|)
expr_stmt|;
name|dc
operator|.
name|put
argument_list|(
literal|"description"
argument_list|,
name|TikaCoreProperties
operator|.
name|DESCRIPTION
argument_list|)
expr_stmt|;
name|properties
operator|.
name|put
argument_list|(
name|DC_NS
argument_list|,
name|dc
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Property
argument_list|>
name|dcTerms
init|=
name|properties
operator|.
name|get
argument_list|(
name|DC_TERMS_NS
argument_list|)
decl_stmt|;
if|if
condition|(
name|dcTerms
operator|==
literal|null
condition|)
block|{
name|dcTerms
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
block|}
name|dcTerms
operator|.
name|put
argument_list|(
literal|"created"
argument_list|,
name|TikaCoreProperties
operator|.
name|CREATED
argument_list|)
expr_stmt|;
name|dcTerms
operator|.
name|put
argument_list|(
literal|"modified"
argument_list|,
name|TikaCoreProperties
operator|.
name|MODIFIED
argument_list|)
expr_stmt|;
name|properties
operator|.
name|put
argument_list|(
name|DC_TERMS_NS
argument_list|,
name|dcTerms
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Property
argument_list|>
name|cp
init|=
name|properties
operator|.
name|get
argument_list|(
name|CP_NS
argument_list|)
decl_stmt|;
if|if
condition|(
name|cp
operator|==
literal|null
condition|)
block|{
name|cp
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
block|}
name|cp
operator|.
name|put
argument_list|(
literal|"category"
argument_list|,
name|OfficeOpenXMLCore
operator|.
name|CATEGORY
argument_list|)
expr_stmt|;
name|cp
operator|.
name|put
argument_list|(
literal|"contentStatus"
argument_list|,
name|OfficeOpenXMLCore
operator|.
name|CONTENT_STATUS
argument_list|)
expr_stmt|;
name|cp
operator|.
name|put
argument_list|(
literal|"lastModifiedBy"
argument_list|,
name|TikaCoreProperties
operator|.
name|MODIFIER
argument_list|)
expr_stmt|;
name|cp
operator|.
name|put
argument_list|(
literal|"lastPrinted"
argument_list|,
name|OfficeOpenXMLCore
operator|.
name|LAST_PRINTED
argument_list|)
expr_stmt|;
name|cp
operator|.
name|put
argument_list|(
literal|"revision"
argument_list|,
name|OfficeOpenXMLCore
operator|.
name|REVISION
argument_list|)
expr_stmt|;
name|cp
operator|.
name|put
argument_list|(
literal|"subject"
argument_list|,
name|OfficeOpenXMLCore
operator|.
name|SUBJECT
argument_list|)
expr_stmt|;
name|cp
operator|.
name|put
argument_list|(
literal|"version"
argument_list|,
name|OfficeOpenXMLCore
operator|.
name|VERSION
argument_list|)
expr_stmt|;
name|properties
operator|.
name|put
argument_list|(
name|CP_NS
argument_list|,
name|cp
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|startDocument
parameter_list|()
throws|throws
name|SAXException
block|{     }
annotation|@
name|Override
specifier|public
name|void
name|endDocument
parameter_list|()
throws|throws
name|SAXException
block|{
name|buffer
operator|.
name|setLength
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|startPrefixMapping
parameter_list|(
name|String
name|prefix
parameter_list|,
name|String
name|uri
parameter_list|)
throws|throws
name|SAXException
block|{     }
annotation|@
name|Override
specifier|public
name|void
name|endPrefixMapping
parameter_list|(
name|String
name|prefix
parameter_list|)
throws|throws
name|SAXException
block|{     }
annotation|@
name|Override
specifier|public
name|void
name|startElement
parameter_list|(
name|String
name|uri
parameter_list|,
name|String
name|localName
parameter_list|,
name|String
name|qName
parameter_list|,
name|Attributes
name|atts
parameter_list|)
throws|throws
name|SAXException
block|{      }
annotation|@
name|Override
specifier|public
name|void
name|endElement
parameter_list|(
name|String
name|uri
parameter_list|,
name|String
name|localName
parameter_list|,
name|String
name|qName
parameter_list|)
throws|throws
name|SAXException
block|{
name|Property
name|prop
init|=
name|getProperty
argument_list|(
name|uri
argument_list|,
name|localName
argument_list|)
decl_stmt|;
if|if
condition|(
name|prop
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|prop
operator|.
name|isMultiValuePermitted
argument_list|()
condition|)
block|{
name|metadata
operator|.
name|add
argument_list|(
name|prop
argument_list|,
name|buffer
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|metadata
operator|.
name|set
argument_list|(
name|prop
argument_list|,
name|buffer
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|buffer
operator|.
name|setLength
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
specifier|private
name|Property
name|getProperty
parameter_list|(
name|String
name|uri
parameter_list|,
name|String
name|localName
parameter_list|)
block|{
if|if
condition|(
name|uri
operator|.
name|endsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
name|uri
operator|=
name|uri
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|uri
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|Property
argument_list|>
name|m
init|=
name|properties
operator|.
name|get
argument_list|(
name|uri
argument_list|)
decl_stmt|;
if|if
condition|(
name|m
operator|!=
literal|null
condition|)
block|{
return|return
name|m
operator|.
name|get
argument_list|(
name|localName
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|characters
parameter_list|(
name|char
index|[]
name|ch
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|length
parameter_list|)
throws|throws
name|SAXException
block|{
name|buffer
operator|.
name|append
argument_list|(
name|ch
argument_list|,
name|start
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|ignorableWhitespace
parameter_list|(
name|char
index|[]
name|ch
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|length
parameter_list|)
throws|throws
name|SAXException
block|{
name|buffer
operator|.
name|append
argument_list|(
name|ch
argument_list|,
name|start
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getContentType
parameter_list|()
block|{
return|return
name|ContentTypes
operator|.
name|CORE_PROPERTIES_PART
return|;
block|}
block|}
end_class

end_unit

