begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|html
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|exception
operator|.
name|TikaException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|io
operator|.
name|CloseShieldInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|metadata
operator|.
name|Metadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|Parser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|ContentHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|InputSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_comment
comment|/**  * HTML parser. Uses CyberNeko to turn the input document to HTML SAX events,  * and post-processes the events to produce XHTML and metadata expected by  * Tika clients.  */
end_comment

begin_class
specifier|public
class|class
name|HtmlParser
implements|implements
name|Parser
block|{
specifier|public
name|void
name|parse
parameter_list|(
name|InputStream
name|stream
parameter_list|,
name|ContentHandler
name|handler
parameter_list|,
name|Metadata
name|metadata
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|context
parameter_list|)
throws|throws
name|IOException
throws|,
name|SAXException
throws|,
name|TikaException
block|{
comment|// Protect the stream from being closed by CyberNeko
name|stream
operator|=
operator|new
name|CloseShieldInputStream
argument_list|(
name|stream
argument_list|)
expr_stmt|;
comment|// Prepare the input source using the encoding hint if available
name|InputSource
name|source
init|=
operator|new
name|InputSource
argument_list|(
name|stream
argument_list|)
decl_stmt|;
name|String
name|encoding
init|=
name|metadata
operator|.
name|get
argument_list|(
name|Metadata
operator|.
name|CONTENT_ENCODING
argument_list|)
decl_stmt|;
if|if
condition|(
name|encoding
operator|!=
literal|null
condition|)
block|{
name|source
operator|.
name|setEncoding
argument_list|(
name|encoding
argument_list|)
expr_stmt|;
block|}
comment|// Parse the HTML document
name|org
operator|.
name|ccil
operator|.
name|cowan
operator|.
name|tagsoup
operator|.
name|Parser
name|parser
init|=
operator|new
name|org
operator|.
name|ccil
operator|.
name|cowan
operator|.
name|tagsoup
operator|.
name|Parser
argument_list|()
decl_stmt|;
name|parser
operator|.
name|setContentHandler
argument_list|(
operator|new
name|XHTMLDowngradeHandler
argument_list|(
operator|new
name|HtmlHandler
argument_list|(
name|this
argument_list|,
name|handler
argument_list|,
name|metadata
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|parser
operator|.
name|parse
argument_list|(
name|source
argument_list|)
expr_stmt|;
block|}
comment|/**      * @deprecated This method will be removed in Apache Tika 1.0.      */
specifier|public
name|void
name|parse
parameter_list|(
name|InputStream
name|stream
parameter_list|,
name|ContentHandler
name|handler
parameter_list|,
name|Metadata
name|metadata
parameter_list|)
throws|throws
name|IOException
throws|,
name|SAXException
throws|,
name|TikaException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|context
init|=
name|Collections
operator|.
name|emptyMap
argument_list|()
decl_stmt|;
name|parse
argument_list|(
name|stream
argument_list|,
name|handler
argument_list|,
name|metadata
argument_list|,
name|context
argument_list|)
expr_stmt|;
block|}
comment|/**      * Maps "safe" HTML element names to semantic XHTML equivalents. If the      * given element is unknown or deemed unsafe for inclusion in the parse      * output, then this method returns<code>null</code> and the element      * will be ignored but the content inside it is still processed. See      * the {@link #isDiscardElement(String)} method for a way to discard      * the entire contents of an element.      *<p>      * Subclasses can override this method to customize the default mapping.      *      * @since Apache Tika 0.5      * @param name HTML element name (upper case)      * @return XHTML element name (lower case), or      *<code>null</code> if the element is unsafe       */
specifier|protected
name|String
name|mapSafeElement
parameter_list|(
name|String
name|name
parameter_list|)
block|{
comment|// Based on http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd
if|if
condition|(
literal|"H1"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
return|return
literal|"h1"
return|;
if|if
condition|(
literal|"H2"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
return|return
literal|"h2"
return|;
if|if
condition|(
literal|"H3"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
return|return
literal|"h3"
return|;
if|if
condition|(
literal|"H4"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
return|return
literal|"h4"
return|;
if|if
condition|(
literal|"H5"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
return|return
literal|"h5"
return|;
if|if
condition|(
literal|"H6"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
return|return
literal|"h6"
return|;
if|if
condition|(
literal|"P"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
return|return
literal|"p"
return|;
if|if
condition|(
literal|"PRE"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
return|return
literal|"pre"
return|;
if|if
condition|(
literal|"BLOCKQUOTE"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
return|return
literal|"blockquote"
return|;
if|if
condition|(
literal|"UL"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
return|return
literal|"ul"
return|;
if|if
condition|(
literal|"OL"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
return|return
literal|"ol"
return|;
if|if
condition|(
literal|"MENU"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
return|return
literal|"ul"
return|;
if|if
condition|(
literal|"LI"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
return|return
literal|"li"
return|;
if|if
condition|(
literal|"DL"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
return|return
literal|"dl"
return|;
if|if
condition|(
literal|"DT"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
return|return
literal|"dt"
return|;
if|if
condition|(
literal|"DD"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
return|return
literal|"dd"
return|;
if|if
condition|(
literal|"TABLE"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
return|return
literal|"table"
return|;
if|if
condition|(
literal|"THEAD"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
return|return
literal|"thead"
return|;
if|if
condition|(
literal|"TBODY"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
return|return
literal|"tbody"
return|;
if|if
condition|(
literal|"TR"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
return|return
literal|"tr"
return|;
if|if
condition|(
literal|"TH"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
return|return
literal|"th"
return|;
if|if
condition|(
literal|"TD"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
return|return
literal|"td"
return|;
return|return
literal|null
return|;
block|}
comment|/**      * Checks whether all content within the given HTML element should be      * discarded instead of including it in the parse output. Subclasses      * can override this method to customize the set of discarded elements.      *      * @since Apache Tika 0.5      * @param name HTML element name (upper case)      * @return<code>true</code> if content inside the named element      *         should be ignored,<code>false</code> otherwise      */
specifier|protected
name|boolean
name|isDiscardElement
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
literal|"STYLE"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
operator|||
literal|"SCRIPT"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
return|;
block|}
block|}
end_class

end_unit

