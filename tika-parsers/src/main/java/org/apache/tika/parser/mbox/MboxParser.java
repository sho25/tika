begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|mbox
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|ParseException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|SimpleDateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Queue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|exception
operator|.
name|TikaException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|extractor
operator|.
name|EmbeddedDocumentExtractor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|extractor
operator|.
name|ParsingEmbeddedDocumentExtractor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|metadata
operator|.
name|Metadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|metadata
operator|.
name|TikaCoreProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|mime
operator|.
name|MediaType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|AbstractParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|ParseContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|sax
operator|.
name|XHTMLContentHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|ContentHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_comment
comment|/**  * Mbox (mailbox) parser. This version extracts each mail from Mbox and uses the  * DelegatingParser to process each mail.  */
end_comment

begin_class
specifier|public
class|class
name|MboxParser
extends|extends
name|AbstractParser
block|{
comment|/** Serial version UID */
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
operator|-
literal|1762689436731160661L
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Set
argument_list|<
name|MediaType
argument_list|>
name|SUPPORTED_TYPES
init|=
name|Collections
operator|.
name|singleton
argument_list|(
name|MediaType
operator|.
name|application
argument_list|(
literal|"mbox"
argument_list|)
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|MBOX_MIME_TYPE
init|=
literal|"application/mbox"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|MBOX_RECORD_DIVIDER
init|=
literal|"From "
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|MAIL_MAX_SIZE
init|=
literal|50000000
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Pattern
name|EMAIL_HEADER_PATTERN
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"([^ ]+):[ \t]*(.*)"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Pattern
name|EMAIL_ADDRESS_PATTERN
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"<(.*@.*)>"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|EMAIL_HEADER_METADATA_PREFIX
init|=
literal|"MboxParser-"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|EMAIL_FROMLINE_METADATA
init|=
name|EMAIL_HEADER_METADATA_PREFIX
operator|+
literal|"from"
decl_stmt|;
specifier|private
name|boolean
name|tracking
init|=
literal|false
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|Integer
argument_list|,
name|Metadata
argument_list|>
name|trackingMetadata
init|=
operator|new
name|HashMap
argument_list|<
name|Integer
argument_list|,
name|Metadata
argument_list|>
argument_list|()
decl_stmt|;
specifier|public
name|Set
argument_list|<
name|MediaType
argument_list|>
name|getSupportedTypes
parameter_list|(
name|ParseContext
name|context
parameter_list|)
block|{
return|return
name|SUPPORTED_TYPES
return|;
block|}
specifier|public
name|void
name|parse
parameter_list|(
name|InputStream
name|stream
parameter_list|,
name|ContentHandler
name|handler
parameter_list|,
name|Metadata
name|metadata
parameter_list|,
name|ParseContext
name|context
parameter_list|)
throws|throws
name|IOException
throws|,
name|TikaException
throws|,
name|SAXException
block|{
name|EmbeddedDocumentExtractor
name|extractor
init|=
name|context
operator|.
name|get
argument_list|(
name|EmbeddedDocumentExtractor
operator|.
name|class
argument_list|,
operator|new
name|ParsingEmbeddedDocumentExtractor
argument_list|(
name|context
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|charsetName
init|=
literal|"windows-1252"
decl_stmt|;
name|metadata
operator|.
name|set
argument_list|(
name|Metadata
operator|.
name|CONTENT_TYPE
argument_list|,
name|MBOX_MIME_TYPE
argument_list|)
expr_stmt|;
name|metadata
operator|.
name|set
argument_list|(
name|Metadata
operator|.
name|CONTENT_ENCODING
argument_list|,
name|charsetName
argument_list|)
expr_stmt|;
name|XHTMLContentHandler
name|xhtml
init|=
operator|new
name|XHTMLContentHandler
argument_list|(
name|handler
argument_list|,
name|metadata
argument_list|)
decl_stmt|;
name|xhtml
operator|.
name|startDocument
argument_list|()
expr_stmt|;
name|InputStreamReader
name|isr
init|=
operator|new
name|InputStreamReader
argument_list|(
name|stream
argument_list|,
name|charsetName
argument_list|)
decl_stmt|;
name|BufferedReader
name|reader
init|=
operator|new
name|BufferedReader
argument_list|(
name|isr
argument_list|)
decl_stmt|;
try|try
block|{
name|String
name|curLine
init|=
name|reader
operator|.
name|readLine
argument_list|()
decl_stmt|;
name|int
name|mailItem
init|=
literal|0
decl_stmt|;
do|do
block|{
if|if
condition|(
name|curLine
operator|.
name|startsWith
argument_list|(
name|MBOX_RECORD_DIVIDER
argument_list|)
condition|)
block|{
name|Metadata
name|mailMetadata
init|=
operator|new
name|Metadata
argument_list|()
decl_stmt|;
name|Queue
argument_list|<
name|String
argument_list|>
name|multiline
init|=
operator|new
name|LinkedList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|mailMetadata
operator|.
name|add
argument_list|(
name|EMAIL_FROMLINE_METADATA
argument_list|,
name|curLine
operator|.
name|substring
argument_list|(
name|MBOX_RECORD_DIVIDER
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|mailMetadata
operator|.
name|set
argument_list|(
name|Metadata
operator|.
name|CONTENT_TYPE
argument_list|,
literal|"message/rfc822"
argument_list|)
expr_stmt|;
name|curLine
operator|=
name|reader
operator|.
name|readLine
argument_list|()
expr_stmt|;
name|ByteArrayOutputStream
name|message
init|=
operator|new
name|ByteArrayOutputStream
argument_list|(
literal|100000
argument_list|)
decl_stmt|;
do|do
block|{
if|if
condition|(
name|curLine
operator|.
name|startsWith
argument_list|(
literal|" "
argument_list|)
operator|||
name|curLine
operator|.
name|startsWith
argument_list|(
literal|"\t"
argument_list|)
condition|)
block|{
name|String
name|latestLine
init|=
name|multiline
operator|.
name|poll
argument_list|()
decl_stmt|;
name|latestLine
operator|+=
literal|" "
operator|+
name|curLine
operator|.
name|trim
argument_list|()
expr_stmt|;
name|multiline
operator|.
name|add
argument_list|(
name|latestLine
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|multiline
operator|.
name|add
argument_list|(
name|curLine
argument_list|)
expr_stmt|;
block|}
name|message
operator|.
name|write
argument_list|(
name|curLine
operator|.
name|getBytes
argument_list|(
name|charsetName
argument_list|)
argument_list|)
expr_stmt|;
name|message
operator|.
name|write
argument_list|(
literal|0x0A
argument_list|)
expr_stmt|;
name|curLine
operator|=
name|reader
operator|.
name|readLine
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|curLine
operator|!=
literal|null
operator|&&
operator|!
name|curLine
operator|.
name|startsWith
argument_list|(
name|MBOX_RECORD_DIVIDER
argument_list|)
operator|&&
name|message
operator|.
name|size
argument_list|()
operator|<
name|MAIL_MAX_SIZE
condition|)
do|;
for|for
control|(
name|String
name|item
range|:
name|multiline
control|)
block|{
name|saveHeaderInMetadata
argument_list|(
name|mailMetadata
argument_list|,
name|item
argument_list|)
expr_stmt|;
block|}
name|ByteArrayInputStream
name|messageStream
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|message
operator|.
name|toByteArray
argument_list|()
argument_list|)
decl_stmt|;
name|message
operator|=
literal|null
expr_stmt|;
if|if
condition|(
name|extractor
operator|.
name|shouldParseEmbedded
argument_list|(
name|mailMetadata
argument_list|)
condition|)
block|{
name|extractor
operator|.
name|parseEmbedded
argument_list|(
name|messageStream
argument_list|,
name|xhtml
argument_list|,
name|mailMetadata
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|tracking
condition|)
block|{
name|getTrackingMetadata
argument_list|()
operator|.
name|put
argument_list|(
name|mailItem
operator|++
argument_list|,
name|mailMetadata
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|curLine
operator|=
name|reader
operator|.
name|readLine
argument_list|()
expr_stmt|;
block|}
block|}
do|while
condition|(
name|curLine
operator|!=
literal|null
operator|&&
operator|!
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|isInterrupted
argument_list|()
condition|)
do|;
block|}
finally|finally
block|{
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|xhtml
operator|.
name|endDocument
argument_list|()
expr_stmt|;
block|}
specifier|public
specifier|static
name|Date
name|parseDate
parameter_list|(
name|String
name|headerContent
parameter_list|)
throws|throws
name|ParseException
block|{
name|SimpleDateFormat
name|dateFormat
init|=
operator|new
name|SimpleDateFormat
argument_list|(
literal|"EEE, d MMM yyyy HH:mm:ss Z"
argument_list|,
name|Locale
operator|.
name|US
argument_list|)
decl_stmt|;
return|return
name|dateFormat
operator|.
name|parse
argument_list|(
name|headerContent
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|isTracking
parameter_list|()
block|{
return|return
name|tracking
return|;
block|}
specifier|public
name|void
name|setTracking
parameter_list|(
name|boolean
name|tracking
parameter_list|)
block|{
name|this
operator|.
name|tracking
operator|=
name|tracking
expr_stmt|;
block|}
specifier|public
name|Map
argument_list|<
name|Integer
argument_list|,
name|Metadata
argument_list|>
name|getTrackingMetadata
parameter_list|()
block|{
return|return
name|trackingMetadata
return|;
block|}
specifier|private
name|void
name|saveHeaderInMetadata
parameter_list|(
name|Metadata
name|metadata
parameter_list|,
name|String
name|curLine
parameter_list|)
block|{
name|Matcher
name|headerMatcher
init|=
name|EMAIL_HEADER_PATTERN
operator|.
name|matcher
argument_list|(
name|curLine
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|headerMatcher
operator|.
name|matches
argument_list|()
condition|)
block|{
return|return;
comment|// ignore malformed header lines
block|}
name|String
name|headerTag
init|=
name|headerMatcher
operator|.
name|group
argument_list|(
literal|1
argument_list|)
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|)
decl_stmt|;
name|String
name|headerContent
init|=
name|headerMatcher
operator|.
name|group
argument_list|(
literal|2
argument_list|)
decl_stmt|;
if|if
condition|(
name|headerTag
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"From"
argument_list|)
condition|)
block|{
name|metadata
operator|.
name|set
argument_list|(
name|TikaCoreProperties
operator|.
name|CREATOR
argument_list|,
name|headerContent
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|headerTag
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"To"
argument_list|)
operator|||
name|headerTag
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"Cc"
argument_list|)
operator|||
name|headerTag
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"Bcc"
argument_list|)
condition|)
block|{
name|Matcher
name|address
init|=
name|EMAIL_ADDRESS_PATTERN
operator|.
name|matcher
argument_list|(
name|headerContent
argument_list|)
decl_stmt|;
if|if
condition|(
name|address
operator|.
name|find
argument_list|()
condition|)
block|{
name|metadata
operator|.
name|add
argument_list|(
name|Metadata
operator|.
name|MESSAGE_RECIPIENT_ADDRESS
argument_list|,
name|address
operator|.
name|group
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|headerContent
operator|.
name|indexOf
argument_list|(
literal|'@'
argument_list|)
operator|>
operator|-
literal|1
condition|)
block|{
name|metadata
operator|.
name|add
argument_list|(
name|Metadata
operator|.
name|MESSAGE_RECIPIENT_ADDRESS
argument_list|,
name|headerContent
argument_list|)
expr_stmt|;
block|}
name|String
name|property
init|=
name|Metadata
operator|.
name|MESSAGE_TO
decl_stmt|;
if|if
condition|(
name|headerTag
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"Cc"
argument_list|)
condition|)
block|{
name|property
operator|=
name|Metadata
operator|.
name|MESSAGE_CC
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|headerTag
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"Bcc"
argument_list|)
condition|)
block|{
name|property
operator|=
name|Metadata
operator|.
name|MESSAGE_BCC
expr_stmt|;
block|}
name|metadata
operator|.
name|add
argument_list|(
name|property
argument_list|,
name|headerContent
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|headerTag
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"Subject"
argument_list|)
condition|)
block|{
name|metadata
operator|.
name|add
argument_list|(
name|Metadata
operator|.
name|SUBJECT
argument_list|,
name|headerContent
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|headerTag
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"Date"
argument_list|)
condition|)
block|{
try|try
block|{
name|Date
name|date
init|=
name|parseDate
argument_list|(
name|headerContent
argument_list|)
decl_stmt|;
name|metadata
operator|.
name|set
argument_list|(
name|TikaCoreProperties
operator|.
name|CREATED
argument_list|,
name|date
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|e
parameter_list|)
block|{
comment|// ignoring date because format was not understood
block|}
block|}
elseif|else
if|if
condition|(
name|headerTag
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"Message-Id"
argument_list|)
condition|)
block|{
name|metadata
operator|.
name|set
argument_list|(
name|TikaCoreProperties
operator|.
name|IDENTIFIER
argument_list|,
name|headerContent
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|headerTag
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"In-Reply-To"
argument_list|)
condition|)
block|{
name|metadata
operator|.
name|set
argument_list|(
name|TikaCoreProperties
operator|.
name|RELATION
argument_list|,
name|headerContent
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|headerTag
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"Content-Type"
argument_list|)
condition|)
block|{
comment|// TODO - key off content-type in headers to
comment|// set mapping to use for content and convert if necessary.
name|metadata
operator|.
name|add
argument_list|(
name|Metadata
operator|.
name|CONTENT_TYPE
argument_list|,
name|headerContent
argument_list|)
expr_stmt|;
name|metadata
operator|.
name|set
argument_list|(
name|TikaCoreProperties
operator|.
name|FORMAT
argument_list|,
name|headerContent
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|metadata
operator|.
name|add
argument_list|(
name|EMAIL_HEADER_METADATA_PREFIX
operator|+
name|headerTag
argument_list|,
name|headerContent
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

