begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|asm
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|exception
operator|.
name|TikaException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|metadata
operator|.
name|Metadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|sax
operator|.
name|XHTMLContentHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|objectweb
operator|.
name|asm
operator|.
name|AnnotationVisitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|objectweb
operator|.
name|asm
operator|.
name|Attribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|objectweb
operator|.
name|asm
operator|.
name|ClassReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|objectweb
operator|.
name|asm
operator|.
name|ClassVisitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|objectweb
operator|.
name|asm
operator|.
name|FieldVisitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|objectweb
operator|.
name|asm
operator|.
name|MethodVisitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|objectweb
operator|.
name|asm
operator|.
name|Opcodes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|objectweb
operator|.
name|asm
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|ContentHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_comment
comment|/**  * Class visitor that generates XHTML SAX events to describe the  * contents of the visited class.  */
end_comment

begin_class
class|class
name|XHTMLClassVisitor
implements|implements
name|ClassVisitor
block|{
specifier|private
specifier|final
name|XHTMLContentHandler
name|xhtml
decl_stmt|;
specifier|private
specifier|final
name|Metadata
name|metadata
decl_stmt|;
specifier|private
name|Type
name|type
decl_stmt|;
specifier|private
name|String
name|packageName
decl_stmt|;
specifier|public
name|XHTMLClassVisitor
parameter_list|(
name|ContentHandler
name|handler
parameter_list|,
name|Metadata
name|metadata
parameter_list|)
block|{
name|this
operator|.
name|xhtml
operator|=
operator|new
name|XHTMLContentHandler
argument_list|(
name|handler
argument_list|,
name|metadata
argument_list|)
expr_stmt|;
name|this
operator|.
name|metadata
operator|=
name|metadata
expr_stmt|;
block|}
specifier|public
name|void
name|parse
parameter_list|(
name|InputStream
name|stream
parameter_list|)
throws|throws
name|TikaException
throws|,
name|SAXException
throws|,
name|IOException
block|{
try|try
block|{
name|ClassReader
name|reader
init|=
operator|new
name|ClassReader
argument_list|(
name|stream
argument_list|)
decl_stmt|;
name|reader
operator|.
name|accept
argument_list|(
name|this
argument_list|,
name|ClassReader
operator|.
name|SKIP_FRAMES
operator||
name|ClassReader
operator|.
name|SKIP_CODE
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|.
name|getCause
argument_list|()
operator|instanceof
name|SAXException
condition|)
block|{
throw|throw
operator|(
name|SAXException
operator|)
name|e
operator|.
name|getCause
argument_list|()
throw|;
block|}
else|else
block|{
throw|throw
operator|new
name|TikaException
argument_list|(
literal|"Failed to parse a Java class"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
specifier|public
name|void
name|visit
parameter_list|(
name|int
name|version
parameter_list|,
name|int
name|access
parameter_list|,
name|String
name|name
parameter_list|,
name|String
name|signature
parameter_list|,
name|String
name|superName
parameter_list|,
name|String
index|[]
name|interfaces
parameter_list|)
block|{
name|type
operator|=
name|Type
operator|.
name|getObjectType
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|String
name|className
init|=
name|type
operator|.
name|getClassName
argument_list|()
decl_stmt|;
name|int
name|dot
init|=
name|className
operator|.
name|lastIndexOf
argument_list|(
literal|'.'
argument_list|)
decl_stmt|;
if|if
condition|(
name|dot
operator|!=
operator|-
literal|1
condition|)
block|{
name|packageName
operator|=
name|className
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|dot
argument_list|)
expr_stmt|;
name|className
operator|=
name|className
operator|.
name|substring
argument_list|(
name|dot
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
name|metadata
operator|.
name|set
argument_list|(
name|Metadata
operator|.
name|TITLE
argument_list|,
name|className
argument_list|)
expr_stmt|;
name|metadata
operator|.
name|set
argument_list|(
name|Metadata
operator|.
name|RESOURCE_NAME_KEY
argument_list|,
name|className
operator|+
literal|".class"
argument_list|)
expr_stmt|;
try|try
block|{
name|xhtml
operator|.
name|startDocument
argument_list|()
expr_stmt|;
name|xhtml
operator|.
name|startElement
argument_list|(
literal|"pre"
argument_list|)
expr_stmt|;
if|if
condition|(
name|packageName
operator|!=
literal|null
condition|)
block|{
name|writeKeyword
argument_list|(
literal|"package"
argument_list|)
expr_stmt|;
name|xhtml
operator|.
name|characters
argument_list|(
literal|" "
operator|+
name|packageName
operator|+
literal|";\n"
argument_list|)
expr_stmt|;
block|}
name|writeAccess
argument_list|(
name|access
argument_list|)
expr_stmt|;
if|if
condition|(
name|isSet
argument_list|(
name|access
argument_list|,
name|Opcodes
operator|.
name|ACC_INTERFACE
argument_list|)
condition|)
block|{
name|writeKeyword
argument_list|(
literal|"interface"
argument_list|)
expr_stmt|;
name|writeSpace
argument_list|()
expr_stmt|;
name|writeType
argument_list|(
name|type
argument_list|)
expr_stmt|;
name|writeSpace
argument_list|()
expr_stmt|;
name|writeInterfaces
argument_list|(
literal|"extends"
argument_list|,
name|interfaces
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|isSet
argument_list|(
name|access
argument_list|,
name|Opcodes
operator|.
name|ACC_ENUM
argument_list|)
condition|)
block|{
name|writeKeyword
argument_list|(
literal|"enum"
argument_list|)
expr_stmt|;
name|writeSpace
argument_list|()
expr_stmt|;
name|writeType
argument_list|(
name|type
argument_list|)
expr_stmt|;
name|writeSpace
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|writeKeyword
argument_list|(
literal|"class"
argument_list|)
expr_stmt|;
name|writeSpace
argument_list|()
expr_stmt|;
name|writeType
argument_list|(
name|type
argument_list|)
expr_stmt|;
name|writeSpace
argument_list|()
expr_stmt|;
if|if
condition|(
name|superName
operator|!=
literal|null
condition|)
block|{
name|Type
name|superType
init|=
name|Type
operator|.
name|getObjectType
argument_list|(
name|superName
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|superType
operator|.
name|getClassName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"java.lang.Object"
argument_list|)
condition|)
block|{
name|writeKeyword
argument_list|(
literal|"extends"
argument_list|)
expr_stmt|;
name|writeSpace
argument_list|()
expr_stmt|;
name|writeType
argument_list|(
name|superType
argument_list|)
expr_stmt|;
name|writeSpace
argument_list|()
expr_stmt|;
block|}
block|}
name|writeInterfaces
argument_list|(
literal|"implements"
argument_list|,
name|interfaces
argument_list|)
expr_stmt|;
block|}
name|xhtml
operator|.
name|characters
argument_list|(
literal|"{\n"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SAXException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
name|void
name|writeInterfaces
parameter_list|(
name|String
name|keyword
parameter_list|,
name|String
index|[]
name|interfaces
parameter_list|)
throws|throws
name|SAXException
block|{
if|if
condition|(
name|interfaces
operator|!=
literal|null
operator|&&
name|interfaces
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|writeKeyword
argument_list|(
name|keyword
argument_list|)
expr_stmt|;
name|String
name|separator
init|=
literal|" "
decl_stmt|;
for|for
control|(
name|String
name|iface
range|:
name|interfaces
control|)
block|{
name|xhtml
operator|.
name|characters
argument_list|(
name|separator
argument_list|)
expr_stmt|;
name|writeType
argument_list|(
name|Type
operator|.
name|getObjectType
argument_list|(
name|iface
argument_list|)
argument_list|)
expr_stmt|;
name|separator
operator|=
literal|", "
expr_stmt|;
block|}
name|writeSpace
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|visitEnd
parameter_list|()
block|{
try|try
block|{
name|xhtml
operator|.
name|characters
argument_list|(
literal|"}\n"
argument_list|)
expr_stmt|;
name|xhtml
operator|.
name|endElement
argument_list|(
literal|"pre"
argument_list|)
expr_stmt|;
name|xhtml
operator|.
name|endDocument
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SAXException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**      * Ignored.      */
specifier|public
name|void
name|visitOuterClass
parameter_list|(
name|String
name|owner
parameter_list|,
name|String
name|name
parameter_list|,
name|String
name|desc
parameter_list|)
block|{     }
comment|/**      * Ignored.      */
specifier|public
name|void
name|visitSource
parameter_list|(
name|String
name|source
parameter_list|,
name|String
name|debug
parameter_list|)
block|{     }
comment|/**      * Ignored.      */
specifier|public
name|AnnotationVisitor
name|visitAnnotation
parameter_list|(
name|String
name|desc
parameter_list|,
name|boolean
name|visible
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
comment|/**      * Ignored.      */
specifier|public
name|void
name|visitAttribute
parameter_list|(
name|Attribute
name|attr
parameter_list|)
block|{     }
comment|/**      * Ignored.      */
specifier|public
name|void
name|visitInnerClass
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|outerName
parameter_list|,
name|String
name|innerName
parameter_list|,
name|int
name|access
parameter_list|)
block|{     }
comment|/**      * Visits a field.      */
specifier|public
name|FieldVisitor
name|visitField
parameter_list|(
name|int
name|access
parameter_list|,
name|String
name|name
parameter_list|,
name|String
name|desc
parameter_list|,
name|String
name|signature
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|isSet
argument_list|(
name|access
argument_list|,
name|Opcodes
operator|.
name|ACC_SYNTHETIC
argument_list|)
condition|)
block|{
try|try
block|{
name|xhtml
operator|.
name|characters
argument_list|(
literal|"    "
argument_list|)
expr_stmt|;
name|writeAccess
argument_list|(
name|access
argument_list|)
expr_stmt|;
name|writeType
argument_list|(
name|Type
operator|.
name|getType
argument_list|(
name|desc
argument_list|)
argument_list|)
expr_stmt|;
name|writeSpace
argument_list|()
expr_stmt|;
name|writeIdentifier
argument_list|(
name|name
argument_list|)
expr_stmt|;
if|if
condition|(
name|isSet
argument_list|(
name|access
argument_list|,
name|Opcodes
operator|.
name|ACC_STATIC
argument_list|)
operator|&&
name|value
operator|!=
literal|null
condition|)
block|{
name|xhtml
operator|.
name|characters
argument_list|(
literal|" = "
argument_list|)
expr_stmt|;
name|xhtml
operator|.
name|characters
argument_list|(
name|value
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|writeSemicolon
argument_list|()
expr_stmt|;
name|writeNewline
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SAXException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
return|return
literal|null
return|;
block|}
comment|/**      * Visits a method.      */
specifier|public
name|MethodVisitor
name|visitMethod
parameter_list|(
name|int
name|access
parameter_list|,
name|String
name|name
parameter_list|,
name|String
name|desc
parameter_list|,
name|String
name|signature
parameter_list|,
name|String
index|[]
name|exceptions
parameter_list|)
block|{
if|if
condition|(
operator|!
name|isSet
argument_list|(
name|access
argument_list|,
name|Opcodes
operator|.
name|ACC_SYNTHETIC
argument_list|)
condition|)
block|{
try|try
block|{
name|xhtml
operator|.
name|characters
argument_list|(
literal|"    "
argument_list|)
expr_stmt|;
name|writeAccess
argument_list|(
name|access
argument_list|)
expr_stmt|;
name|writeType
argument_list|(
name|Type
operator|.
name|getReturnType
argument_list|(
name|desc
argument_list|)
argument_list|)
expr_stmt|;
name|writeSpace
argument_list|()
expr_stmt|;
if|if
condition|(
literal|"<init>"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|writeType
argument_list|(
name|type
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|writeIdentifier
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
name|xhtml
operator|.
name|characters
argument_list|(
literal|"("
argument_list|)
expr_stmt|;
name|String
name|separator
init|=
literal|""
decl_stmt|;
for|for
control|(
name|Type
name|arg
range|:
name|Type
operator|.
name|getArgumentTypes
argument_list|(
name|desc
argument_list|)
control|)
block|{
name|xhtml
operator|.
name|characters
argument_list|(
name|separator
argument_list|)
expr_stmt|;
name|writeType
argument_list|(
name|arg
argument_list|)
expr_stmt|;
name|separator
operator|=
literal|", "
expr_stmt|;
block|}
name|xhtml
operator|.
name|characters
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
if|if
condition|(
name|exceptions
operator|!=
literal|null
operator|&&
name|exceptions
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|writeSpace
argument_list|()
expr_stmt|;
name|writeKeyword
argument_list|(
literal|"throws"
argument_list|)
expr_stmt|;
name|separator
operator|=
literal|" "
expr_stmt|;
for|for
control|(
name|String
name|exception
range|:
name|exceptions
control|)
block|{
name|xhtml
operator|.
name|characters
argument_list|(
name|separator
argument_list|)
expr_stmt|;
name|writeType
argument_list|(
name|Type
operator|.
name|getObjectType
argument_list|(
name|exception
argument_list|)
argument_list|)
expr_stmt|;
name|separator
operator|=
literal|", "
expr_stmt|;
block|}
block|}
name|writeSemicolon
argument_list|()
expr_stmt|;
name|writeNewline
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SAXException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|private
name|void
name|writeIdentifier
parameter_list|(
name|String
name|identifier
parameter_list|)
throws|throws
name|SAXException
block|{
name|xhtml
operator|.
name|startElement
argument_list|(
literal|"span"
argument_list|,
literal|"class"
argument_list|,
literal|"java-identifier"
argument_list|)
expr_stmt|;
name|xhtml
operator|.
name|characters
argument_list|(
name|identifier
argument_list|)
expr_stmt|;
name|xhtml
operator|.
name|endElement
argument_list|(
literal|"span"
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|writeKeyword
parameter_list|(
name|String
name|keyword
parameter_list|)
throws|throws
name|SAXException
block|{
name|xhtml
operator|.
name|startElement
argument_list|(
literal|"span"
argument_list|,
literal|"class"
argument_list|,
literal|"java-keyword"
argument_list|)
expr_stmt|;
name|xhtml
operator|.
name|characters
argument_list|(
name|keyword
argument_list|)
expr_stmt|;
name|xhtml
operator|.
name|endElement
argument_list|(
literal|"span"
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|writeSemicolon
parameter_list|()
throws|throws
name|SAXException
block|{
name|xhtml
operator|.
name|characters
argument_list|(
literal|";"
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|writeSpace
parameter_list|()
throws|throws
name|SAXException
block|{
name|xhtml
operator|.
name|characters
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|writeNewline
parameter_list|()
throws|throws
name|SAXException
block|{
name|xhtml
operator|.
name|characters
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|writeAccess
parameter_list|(
name|int
name|access
parameter_list|)
throws|throws
name|SAXException
block|{
name|writeAccess
argument_list|(
name|access
argument_list|,
name|Opcodes
operator|.
name|ACC_PRIVATE
argument_list|,
literal|"private"
argument_list|)
expr_stmt|;
name|writeAccess
argument_list|(
name|access
argument_list|,
name|Opcodes
operator|.
name|ACC_PROTECTED
argument_list|,
literal|"protected"
argument_list|)
expr_stmt|;
name|writeAccess
argument_list|(
name|access
argument_list|,
name|Opcodes
operator|.
name|ACC_PUBLIC
argument_list|,
literal|"public"
argument_list|)
expr_stmt|;
name|writeAccess
argument_list|(
name|access
argument_list|,
name|Opcodes
operator|.
name|ACC_STATIC
argument_list|,
literal|"static"
argument_list|)
expr_stmt|;
name|writeAccess
argument_list|(
name|access
argument_list|,
name|Opcodes
operator|.
name|ACC_FINAL
argument_list|,
literal|"final"
argument_list|)
expr_stmt|;
name|writeAccess
argument_list|(
name|access
argument_list|,
name|Opcodes
operator|.
name|ACC_ABSTRACT
argument_list|,
literal|"abstract"
argument_list|)
expr_stmt|;
name|writeAccess
argument_list|(
name|access
argument_list|,
name|Opcodes
operator|.
name|ACC_SYNCHRONIZED
argument_list|,
literal|"synchronized"
argument_list|)
expr_stmt|;
name|writeAccess
argument_list|(
name|access
argument_list|,
name|Opcodes
operator|.
name|ACC_TRANSIENT
argument_list|,
literal|"transient"
argument_list|)
expr_stmt|;
name|writeAccess
argument_list|(
name|access
argument_list|,
name|Opcodes
operator|.
name|ACC_VOLATILE
argument_list|,
literal|"volatile"
argument_list|)
expr_stmt|;
name|writeAccess
argument_list|(
name|access
argument_list|,
name|Opcodes
operator|.
name|ACC_NATIVE
argument_list|,
literal|"native"
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|writeAccess
parameter_list|(
name|int
name|access
parameter_list|,
name|int
name|code
parameter_list|,
name|String
name|keyword
parameter_list|)
throws|throws
name|SAXException
block|{
if|if
condition|(
name|isSet
argument_list|(
name|access
argument_list|,
name|code
argument_list|)
condition|)
block|{
name|writeKeyword
argument_list|(
name|keyword
argument_list|)
expr_stmt|;
name|xhtml
operator|.
name|characters
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|writeType
parameter_list|(
name|Type
name|type
parameter_list|)
throws|throws
name|SAXException
block|{
name|String
name|name
init|=
name|type
operator|.
name|getClassName
argument_list|()
decl_stmt|;
if|if
condition|(
name|name
operator|.
name|startsWith
argument_list|(
name|packageName
operator|+
literal|"."
argument_list|)
condition|)
block|{
name|xhtml
operator|.
name|characters
argument_list|(
name|name
operator|.
name|substring
argument_list|(
name|packageName
operator|.
name|length
argument_list|()
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|name
operator|.
name|startsWith
argument_list|(
literal|"java.lang."
argument_list|)
condition|)
block|{
name|xhtml
operator|.
name|characters
argument_list|(
name|name
operator|.
name|substring
argument_list|(
literal|"java.lang."
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|xhtml
operator|.
name|characters
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|boolean
name|isSet
parameter_list|(
name|int
name|value
parameter_list|,
name|int
name|flag
parameter_list|)
block|{
return|return
operator|(
name|value
operator|&
name|flag
operator|)
operator|!=
literal|0
return|;
block|}
block|}
end_class

end_unit

