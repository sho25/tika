begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_comment
comment|/* $Id: XMPPacketParser.java 750418 2009-03-05 11:03:54Z vhennebert $ */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|image
operator|.
name|xmp
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|UnsupportedEncodingException
import|;
end_import

begin_comment
comment|/**  * This class is a parser for XMP packets. By default, it tries to locate the first XMP packet  * it finds and parses it.  *<p>  * Important: Before you use this class to look for an XMP packet in some random file, please read  * the chapter on "Scanning Files for XMP Packets" in the XMP specification!  *<p>  * Thic class was branched from http://xmlgraphics.apache.org/ XMPPacketParser.  * See also org.semanticdesktop.aperture.extractor.xmp.XMPExtractor, a variant.  */
end_comment

begin_class
specifier|public
class|class
name|XMPPacketScanner
block|{
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|PACKET_HEADER
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|PACKET_HEADER_END
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|PACKET_TRAILER
decl_stmt|;
static|static
block|{
try|try
block|{
name|PACKET_HEADER
operator|=
literal|"<?xpacket begin="
operator|.
name|getBytes
argument_list|(
literal|"US-ASCII"
argument_list|)
expr_stmt|;
name|PACKET_HEADER_END
operator|=
literal|"?>"
operator|.
name|getBytes
argument_list|(
literal|"US-ASCII"
argument_list|)
expr_stmt|;
name|PACKET_TRAILER
operator|=
literal|"<?xpacket"
operator|.
name|getBytes
argument_list|(
literal|"US-ASCII"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedEncodingException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Incompatible JVM! US-ASCII encoding not supported."
argument_list|)
throw|;
block|}
block|}
comment|/**      * Locates an XMP packet in a stream, parses it and returns the XMP metadata. If no      * XMP packet is found until the stream ends, null is returned. Note: This method      * only finds the first XMP packet in a stream. And it cannot determine whether it      * has found the right XMP packet if there are multiple packets.      *       * Does<em>not</em> close the stream.      * If XMP block was found reading can continue below the block.      *       * @param in the InputStream to search      * @param xmlOut to write the XMP packet to      * @return true if XMP packet is found, false otherwise      * @throws IOException if an I/O error occurs      * @throws TransformerException if an error occurs while parsing the XMP packet      */
specifier|public
name|boolean
name|parse
parameter_list|(
name|InputStream
name|in
parameter_list|,
name|OutputStream
name|xmlOut
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|in
operator|.
name|markSupported
argument_list|()
condition|)
block|{
name|in
operator|=
operator|new
name|java
operator|.
name|io
operator|.
name|BufferedInputStream
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
name|boolean
name|foundXMP
init|=
name|skipAfter
argument_list|(
name|in
argument_list|,
name|PACKET_HEADER
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|foundXMP
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|//TODO Inspect "begin" attribute!
if|if
condition|(
operator|!
name|skipAfter
argument_list|(
name|in
argument_list|,
name|PACKET_HEADER_END
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Invalid XMP packet header!"
argument_list|)
throw|;
block|}
comment|//TODO Do with TeeInputStream when Commons IO 1.4 is available
if|if
condition|(
operator|!
name|skipAfter
argument_list|(
name|in
argument_list|,
name|PACKET_TRAILER
argument_list|,
name|xmlOut
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"XMP packet not properly terminated!"
argument_list|)
throw|;
block|}
return|return
literal|true
return|;
block|}
specifier|private
specifier|static
name|boolean
name|skipAfter
parameter_list|(
name|InputStream
name|in
parameter_list|,
name|byte
index|[]
name|match
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|skipAfter
argument_list|(
name|in
argument_list|,
name|match
argument_list|,
literal|null
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|boolean
name|skipAfter
parameter_list|(
name|InputStream
name|in
parameter_list|,
name|byte
index|[]
name|match
parameter_list|,
name|OutputStream
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|found
init|=
literal|0
decl_stmt|;
name|int
name|len
init|=
name|match
operator|.
name|length
decl_stmt|;
name|int
name|b
decl_stmt|;
while|while
condition|(
operator|(
name|b
operator|=
name|in
operator|.
name|read
argument_list|()
operator|)
operator|>=
literal|0
condition|)
block|{
if|if
condition|(
name|b
operator|==
name|match
index|[
name|found
index|]
condition|)
block|{
name|found
operator|++
expr_stmt|;
if|if
condition|(
name|found
operator|==
name|len
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|out
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|found
operator|>
literal|0
condition|)
block|{
name|out
operator|.
name|write
argument_list|(
name|match
argument_list|,
literal|0
argument_list|,
name|found
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|write
argument_list|(
name|b
argument_list|)
expr_stmt|;
block|}
name|found
operator|=
literal|0
expr_stmt|;
block|}
block|}
return|return
literal|false
return|;
block|}
block|}
end_class

end_unit

