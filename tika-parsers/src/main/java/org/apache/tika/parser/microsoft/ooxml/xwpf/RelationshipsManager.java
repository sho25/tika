begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|microsoft
operator|.
name|ooxml
operator|.
name|xwpf
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|openxml4j
operator|.
name|opc
operator|.
name|TargetMode
import|;
end_import

begin_class
class|class
name|RelationshipsManager
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Relationship
argument_list|>
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|public
name|void
name|addRelationship
parameter_list|(
name|String
name|relsFileName
parameter_list|,
name|String
name|id
parameter_list|,
name|String
name|type
parameter_list|,
name|String
name|target
parameter_list|,
name|TargetMode
name|targetMode
parameter_list|)
block|{
name|String
name|packageName
init|=
name|convertRelsFileNameToPackageName
argument_list|(
name|relsFileName
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Relationship
argument_list|>
name|thisPackageRels
init|=
name|map
operator|.
name|get
argument_list|(
name|packageName
argument_list|)
decl_stmt|;
if|if
condition|(
name|thisPackageRels
operator|==
literal|null
condition|)
block|{
name|thisPackageRels
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
block|}
name|thisPackageRels
operator|.
name|put
argument_list|(
name|id
argument_list|,
operator|new
name|Relationship
argument_list|(
name|type
argument_list|,
name|target
argument_list|,
name|targetMode
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|packageName
argument_list|,
name|thisPackageRels
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Relationship
name|getRelationship
parameter_list|(
name|String
name|packageName
parameter_list|,
name|String
name|id
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Relationship
argument_list|>
name|thisPackageRels
init|=
name|map
operator|.
name|get
argument_list|(
name|packageName
argument_list|)
decl_stmt|;
if|if
condition|(
name|thisPackageRels
operator|!=
literal|null
condition|)
block|{
return|return
name|thisPackageRels
operator|.
name|get
argument_list|(
name|id
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|private
name|String
name|convertRelsFileNameToPackageName
parameter_list|(
name|String
name|relsFileName
parameter_list|)
block|{
if|if
condition|(
literal|"/_rels/.rels"
operator|.
name|equals
argument_list|(
name|relsFileName
argument_list|)
condition|)
block|{
return|return
literal|"/"
return|;
block|}
name|String
name|tmp
init|=
name|relsFileName
decl_stmt|;
name|tmp
operator|=
name|tmp
operator|.
name|replaceFirst
argument_list|(
literal|"\\/_rels\\/"
argument_list|,
literal|"/"
argument_list|)
expr_stmt|;
name|tmp
operator|=
name|tmp
operator|.
name|replaceFirst
argument_list|(
literal|".rels\\Z"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
return|return
name|tmp
return|;
block|}
block|}
end_class

end_unit

