begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|microsoft
package|;
end_package

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|NumberFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|ddf
operator|.
name|EscherBSERecord
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|ddf
operator|.
name|EscherBlipRecord
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|ddf
operator|.
name|EscherRecord
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|hssf
operator|.
name|eventusermodel
operator|.
name|FormatTrackingHSSFListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|hssf
operator|.
name|eventusermodel
operator|.
name|HSSFEventFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|hssf
operator|.
name|eventusermodel
operator|.
name|HSSFListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|hssf
operator|.
name|eventusermodel
operator|.
name|HSSFRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|hssf
operator|.
name|extractor
operator|.
name|OldExcelExtractor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|hssf
operator|.
name|record
operator|.
name|BOFRecord
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|hssf
operator|.
name|record
operator|.
name|BoundSheetRecord
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|hssf
operator|.
name|record
operator|.
name|CellValueRecordInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|hssf
operator|.
name|record
operator|.
name|CountryRecord
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|hssf
operator|.
name|record
operator|.
name|DateWindow1904Record
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|hssf
operator|.
name|record
operator|.
name|DrawingGroupRecord
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|hssf
operator|.
name|record
operator|.
name|EOFRecord
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|hssf
operator|.
name|record
operator|.
name|ExtSSTRecord
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|hssf
operator|.
name|record
operator|.
name|ExtendedFormatRecord
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|hssf
operator|.
name|record
operator|.
name|FooterRecord
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|hssf
operator|.
name|record
operator|.
name|FormatRecord
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|hssf
operator|.
name|record
operator|.
name|FormulaRecord
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|hssf
operator|.
name|record
operator|.
name|HeaderRecord
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|hssf
operator|.
name|record
operator|.
name|HyperlinkRecord
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|hssf
operator|.
name|record
operator|.
name|LabelRecord
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|hssf
operator|.
name|record
operator|.
name|LabelSSTRecord
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|hssf
operator|.
name|record
operator|.
name|NumberRecord
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|hssf
operator|.
name|record
operator|.
name|RKRecord
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|hssf
operator|.
name|record
operator|.
name|Record
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|hssf
operator|.
name|record
operator|.
name|SSTRecord
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|hssf
operator|.
name|record
operator|.
name|StringRecord
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|hssf
operator|.
name|record
operator|.
name|TextObjectRecord
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|hssf
operator|.
name|record
operator|.
name|chart
operator|.
name|SeriesTextRecord
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|hssf
operator|.
name|record
operator|.
name|common
operator|.
name|UnicodeString
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|hssf
operator|.
name|record
operator|.
name|crypto
operator|.
name|Biff8EncryptionKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|hssf
operator|.
name|usermodel
operator|.
name|HSSFPictureData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|poifs
operator|.
name|filesystem
operator|.
name|DirectoryEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|poifs
operator|.
name|filesystem
operator|.
name|DirectoryNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|poifs
operator|.
name|filesystem
operator|.
name|DocumentInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|poifs
operator|.
name|filesystem
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|poifs
operator|.
name|filesystem
operator|.
name|NPOIFSFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|exception
operator|.
name|EncryptedDocumentException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|exception
operator|.
name|TikaException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|io
operator|.
name|TikaInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|metadata
operator|.
name|Metadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|ParseContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|sax
operator|.
name|XHTMLContentHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_comment
comment|/**  * Excel parser implementation which uses POI's Event API  * to handle the contents of a Workbook.  *<p/>  * The Event API uses a much smaller memory footprint than  *<code>HSSFWorkbook</code> when processing excel files  * but at the cost of more complexity.  *<p/>  * With the Event API a<i>listener</i> is registered for  * specific record types and those records are created,  * fired off to the listener and then discarded as the stream  * is being processed.  *  * @see org.apache.poi.hssf.eventusermodel.HSSFListener  * @see<a href="http://poi.apache.org/hssf/how-to.html#event_api">  * POI Event API How To</a>  */
end_comment

begin_class
specifier|public
class|class
name|ExcelExtractor
extends|extends
name|AbstractPOIFSExtractor
block|{
specifier|private
specifier|static
specifier|final
name|String
name|WORKBOOK_ENTRY
init|=
literal|"Workbook"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|BOOK_ENTRY
init|=
literal|"Book"
decl_stmt|;
comment|/**      *<code>true</code> if the HSSFListener should be registered      * to listen for all records or<code>false</code> (the default)      * if the listener should be configured to only receive specified      * records.      */
specifier|private
name|boolean
name|listenForAllRecords
init|=
literal|false
decl_stmt|;
specifier|public
name|ExcelExtractor
parameter_list|(
name|ParseContext
name|context
parameter_list|,
name|Metadata
name|metadata
parameter_list|)
block|{
name|super
argument_list|(
name|context
argument_list|,
name|metadata
argument_list|)
expr_stmt|;
block|}
comment|/**      * Returns<code>true</code> if this parser is configured to listen      * for all records instead of just the specified few.      */
specifier|public
name|boolean
name|isListenForAllRecords
parameter_list|()
block|{
return|return
name|listenForAllRecords
return|;
block|}
comment|/**      * Specifies whether this parser should to listen for all      * records or just for the specified few.      *<p/>      *<strong>Note:</strong> Under normal operation this setting should      * be<code>false</code> (the default), but you can experiment with      * this setting for testing and debugging purposes.      *      * @param listenForAllRecords<code>true</code> if the HSSFListener      *                            should be registered to listen for all records or<code>false</code>      *                            if the listener should be configured to only receive specified records.      */
specifier|public
name|void
name|setListenForAllRecords
parameter_list|(
name|boolean
name|listenForAllRecords
parameter_list|)
block|{
name|this
operator|.
name|listenForAllRecords
operator|=
name|listenForAllRecords
expr_stmt|;
block|}
comment|/**      * Extracts text from an Excel Workbook writing the extracted content      * to the specified {@link Appendable}.      *      * @param filesystem POI file system      * @throws IOException if an error occurs processing the workbook      *                     or writing the extracted content      */
specifier|protected
name|void
name|parse
parameter_list|(
name|NPOIFSFileSystem
name|filesystem
parameter_list|,
name|XHTMLContentHandler
name|xhtml
parameter_list|,
name|Locale
name|locale
parameter_list|)
throws|throws
name|IOException
throws|,
name|SAXException
throws|,
name|TikaException
block|{
name|parse
argument_list|(
name|filesystem
operator|.
name|getRoot
argument_list|()
argument_list|,
name|xhtml
argument_list|,
name|locale
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|parse
parameter_list|(
name|DirectoryNode
name|root
parameter_list|,
name|XHTMLContentHandler
name|xhtml
parameter_list|,
name|Locale
name|locale
parameter_list|)
throws|throws
name|IOException
throws|,
name|SAXException
throws|,
name|TikaException
block|{
if|if
condition|(
operator|!
name|root
operator|.
name|hasEntry
argument_list|(
name|WORKBOOK_ENTRY
argument_list|)
condition|)
block|{
if|if
condition|(
name|root
operator|.
name|hasEntry
argument_list|(
name|BOOK_ENTRY
argument_list|)
condition|)
block|{
comment|// Excel 5 / Excel 95 file
comment|// Records are in a different structure so needs a
comment|//  different parser to process them
name|OldExcelExtractor
name|extractor
init|=
operator|new
name|OldExcelExtractor
argument_list|(
name|root
argument_list|)
decl_stmt|;
name|OldExcelParser
operator|.
name|parse
argument_list|(
name|extractor
argument_list|,
name|xhtml
argument_list|)
expr_stmt|;
return|return;
block|}
else|else
block|{
comment|// Corrupt file / very old file, just skip text extraction
return|return;
block|}
block|}
comment|// If a password was supplied, use it, otherwise the default
name|Biff8EncryptionKey
operator|.
name|setCurrentUserPassword
argument_list|(
name|getPassword
argument_list|()
argument_list|)
expr_stmt|;
comment|// Have the file processed in event mode
name|TikaHSSFListener
name|listener
init|=
operator|new
name|TikaHSSFListener
argument_list|(
name|xhtml
argument_list|,
name|locale
argument_list|,
name|this
argument_list|,
name|officeParserConfig
argument_list|)
decl_stmt|;
name|listener
operator|.
name|processFile
argument_list|(
name|root
argument_list|,
name|isListenForAllRecords
argument_list|()
argument_list|)
expr_stmt|;
name|listener
operator|.
name|throwStoredException
argument_list|()
expr_stmt|;
for|for
control|(
name|Entry
name|entry
range|:
name|root
control|)
block|{
if|if
condition|(
name|entry
operator|.
name|getName
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"MBD"
argument_list|)
operator|&&
name|entry
operator|instanceof
name|DirectoryEntry
condition|)
block|{
try|try
block|{
name|handleEmbeddedOfficeDoc
argument_list|(
operator|(
name|DirectoryEntry
operator|)
name|entry
argument_list|,
name|xhtml
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TikaException
name|e
parameter_list|)
block|{
comment|// ignore parse errors from embedded documents
block|}
block|}
block|}
block|}
comment|// ======================================================================
comment|/**      * HSSF Listener implementation which processes the HSSF records.      */
specifier|private
specifier|static
class|class
name|TikaHSSFListener
implements|implements
name|HSSFListener
block|{
comment|/**          * XHTML content handler to which the document content is rendered.          */
specifier|private
specifier|final
name|XHTMLContentHandler
name|handler
decl_stmt|;
comment|/**          * The POIFS Extractor, used for embeded resources.          */
specifier|private
specifier|final
name|AbstractPOIFSExtractor
name|extractor
decl_stmt|;
comment|/**          * Format for rendering numbers in the worksheet. Currently we just          * use the platform default formatting.          *          * @see<a href="https://issues.apache.org/jira/browse/TIKA-103">TIKA-103</a>          */
specifier|private
specifier|final
name|NumberFormat
name|format
decl_stmt|;
specifier|private
specifier|final
name|OfficeParserConfig
name|officeParserConfig
decl_stmt|;
comment|/**          * Potential exception thrown by the content handler. When set to          * non-<code>null</code>, causes all subsequent HSSF records to be          * ignored and the stored exception to be thrown when          * {@link #throwStoredException()} is invoked.          */
specifier|private
name|Exception
name|exception
init|=
literal|null
decl_stmt|;
specifier|private
name|SSTRecord
name|sstRecord
decl_stmt|;
specifier|private
name|FormulaRecord
name|stringFormulaRecord
decl_stmt|;
specifier|private
name|short
name|previousSid
decl_stmt|;
comment|/**          * Internal<code>FormatTrackingHSSFListener</code> to handle cell          * formatting within the extraction.          */
specifier|private
name|FormatTrackingHSSFListener
name|formatListener
decl_stmt|;
specifier|private
specifier|final
name|TikaExcelDataFormatter
name|tikaExcelDataFormatter
decl_stmt|;
comment|/**          * List of worksheet names.          */
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|sheetNames
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
comment|/**          * Index of the current worksheet within the workbook.          * Used to find the worksheet name in the {@link #sheetNames} list.          */
specifier|private
name|short
name|currentSheetIndex
decl_stmt|;
comment|/**          * Content of the current worksheet, or<code>null</code> if no          * worksheet is currently active.          */
specifier|private
name|SortedMap
argument_list|<
name|Point
argument_list|,
name|Cell
argument_list|>
name|currentSheet
init|=
literal|null
decl_stmt|;
comment|/**          * Extra text or cells that crops up, typically as part of a          * worksheet but not always.          */
specifier|private
name|List
argument_list|<
name|Cell
argument_list|>
name|extraTextCells
init|=
operator|new
name|ArrayList
argument_list|<
name|Cell
argument_list|>
argument_list|()
decl_stmt|;
comment|/**          * These aren't complete when we first see them, as the          * depend on continue records that aren't always          * contiguous. Collect them for later processing.          */
specifier|private
name|List
argument_list|<
name|DrawingGroupRecord
argument_list|>
name|drawingGroups
init|=
operator|new
name|ArrayList
argument_list|<
name|DrawingGroupRecord
argument_list|>
argument_list|()
decl_stmt|;
comment|/**          * Construct a new listener instance outputting parsed data to          * the specified XHTML content handler.          *          * @param handler Destination to write the parsed output to          */
specifier|private
name|TikaHSSFListener
parameter_list|(
name|XHTMLContentHandler
name|handler
parameter_list|,
name|Locale
name|locale
parameter_list|,
name|AbstractPOIFSExtractor
name|extractor
parameter_list|,
name|OfficeParserConfig
name|officeParserConfig
parameter_list|)
block|{
name|this
operator|.
name|handler
operator|=
name|handler
expr_stmt|;
name|this
operator|.
name|extractor
operator|=
name|extractor
expr_stmt|;
name|this
operator|.
name|format
operator|=
name|NumberFormat
operator|.
name|getInstance
argument_list|(
name|locale
argument_list|)
expr_stmt|;
name|this
operator|.
name|formatListener
operator|=
operator|new
name|TikaFormatTrackingHSSFListener
argument_list|(
name|this
argument_list|,
name|locale
argument_list|)
expr_stmt|;
name|this
operator|.
name|tikaExcelDataFormatter
operator|=
operator|new
name|TikaExcelDataFormatter
argument_list|(
name|locale
argument_list|)
expr_stmt|;
name|this
operator|.
name|officeParserConfig
operator|=
name|officeParserConfig
expr_stmt|;
block|}
comment|/**          * Entry point to listener to start the processing of a file.          *          * @param filesystem          POI file system.          * @param listenForAllRecords sets whether the listener is configured to listen          *                            for all records types or not.          * @throws IOException  on any IO errors.          * @throws SAXException on any SAX parsing errors.          */
specifier|public
name|void
name|processFile
parameter_list|(
name|NPOIFSFileSystem
name|filesystem
parameter_list|,
name|boolean
name|listenForAllRecords
parameter_list|)
throws|throws
name|IOException
throws|,
name|SAXException
throws|,
name|TikaException
block|{
name|processFile
argument_list|(
name|filesystem
operator|.
name|getRoot
argument_list|()
argument_list|,
name|listenForAllRecords
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|processFile
parameter_list|(
name|DirectoryNode
name|root
parameter_list|,
name|boolean
name|listenForAllRecords
parameter_list|)
throws|throws
name|IOException
throws|,
name|SAXException
throws|,
name|TikaException
block|{
comment|// Set up listener and register the records we want to process
name|HSSFRequest
name|hssfRequest
init|=
operator|new
name|HSSFRequest
argument_list|()
decl_stmt|;
name|listenForAllRecords
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|listenForAllRecords
condition|)
block|{
name|hssfRequest
operator|.
name|addListenerForAllRecords
argument_list|(
name|formatListener
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|hssfRequest
operator|.
name|addListener
argument_list|(
name|formatListener
argument_list|,
name|BOFRecord
operator|.
name|sid
argument_list|)
expr_stmt|;
name|hssfRequest
operator|.
name|addListener
argument_list|(
name|formatListener
argument_list|,
name|EOFRecord
operator|.
name|sid
argument_list|)
expr_stmt|;
name|hssfRequest
operator|.
name|addListener
argument_list|(
name|formatListener
argument_list|,
name|DateWindow1904Record
operator|.
name|sid
argument_list|)
expr_stmt|;
name|hssfRequest
operator|.
name|addListener
argument_list|(
name|formatListener
argument_list|,
name|CountryRecord
operator|.
name|sid
argument_list|)
expr_stmt|;
name|hssfRequest
operator|.
name|addListener
argument_list|(
name|formatListener
argument_list|,
name|BoundSheetRecord
operator|.
name|sid
argument_list|)
expr_stmt|;
name|hssfRequest
operator|.
name|addListener
argument_list|(
name|formatListener
argument_list|,
name|SSTRecord
operator|.
name|sid
argument_list|)
expr_stmt|;
name|hssfRequest
operator|.
name|addListener
argument_list|(
name|formatListener
argument_list|,
name|FormulaRecord
operator|.
name|sid
argument_list|)
expr_stmt|;
name|hssfRequest
operator|.
name|addListener
argument_list|(
name|formatListener
argument_list|,
name|LabelRecord
operator|.
name|sid
argument_list|)
expr_stmt|;
name|hssfRequest
operator|.
name|addListener
argument_list|(
name|formatListener
argument_list|,
name|LabelSSTRecord
operator|.
name|sid
argument_list|)
expr_stmt|;
name|hssfRequest
operator|.
name|addListener
argument_list|(
name|formatListener
argument_list|,
name|NumberRecord
operator|.
name|sid
argument_list|)
expr_stmt|;
name|hssfRequest
operator|.
name|addListener
argument_list|(
name|formatListener
argument_list|,
name|RKRecord
operator|.
name|sid
argument_list|)
expr_stmt|;
name|hssfRequest
operator|.
name|addListener
argument_list|(
name|formatListener
argument_list|,
name|StringRecord
operator|.
name|sid
argument_list|)
expr_stmt|;
name|hssfRequest
operator|.
name|addListener
argument_list|(
name|formatListener
argument_list|,
name|HyperlinkRecord
operator|.
name|sid
argument_list|)
expr_stmt|;
name|hssfRequest
operator|.
name|addListener
argument_list|(
name|formatListener
argument_list|,
name|TextObjectRecord
operator|.
name|sid
argument_list|)
expr_stmt|;
name|hssfRequest
operator|.
name|addListener
argument_list|(
name|formatListener
argument_list|,
name|SeriesTextRecord
operator|.
name|sid
argument_list|)
expr_stmt|;
name|hssfRequest
operator|.
name|addListener
argument_list|(
name|formatListener
argument_list|,
name|FormatRecord
operator|.
name|sid
argument_list|)
expr_stmt|;
name|hssfRequest
operator|.
name|addListener
argument_list|(
name|formatListener
argument_list|,
name|ExtendedFormatRecord
operator|.
name|sid
argument_list|)
expr_stmt|;
name|hssfRequest
operator|.
name|addListener
argument_list|(
name|formatListener
argument_list|,
name|DrawingGroupRecord
operator|.
name|sid
argument_list|)
expr_stmt|;
if|if
condition|(
name|extractor
operator|.
name|officeParserConfig
operator|.
name|getIncludeHeadersAndFooters
argument_list|()
condition|)
block|{
name|hssfRequest
operator|.
name|addListener
argument_list|(
name|formatListener
argument_list|,
name|HeaderRecord
operator|.
name|sid
argument_list|)
expr_stmt|;
name|hssfRequest
operator|.
name|addListener
argument_list|(
name|formatListener
argument_list|,
name|FooterRecord
operator|.
name|sid
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Create event factory and process Workbook (fire events)
name|DocumentInputStream
name|documentInputStream
init|=
name|root
operator|.
name|createDocumentInputStream
argument_list|(
name|WORKBOOK_ENTRY
argument_list|)
decl_stmt|;
name|HSSFEventFactory
name|eventFactory
init|=
operator|new
name|HSSFEventFactory
argument_list|()
decl_stmt|;
try|try
block|{
name|eventFactory
operator|.
name|processEvents
argument_list|(
name|hssfRequest
argument_list|,
name|documentInputStream
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|EncryptedDocumentException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|EncryptedDocumentException
argument_list|(
name|e
argument_list|)
throw|;
block|}
comment|// Output any extra text that came after all the sheets
name|processExtraText
argument_list|()
expr_stmt|;
comment|// Look for embeded images, now that the drawing records
comment|//  have been fully matched with their continue data
for|for
control|(
name|DrawingGroupRecord
name|dgr
range|:
name|drawingGroups
control|)
block|{
name|dgr
operator|.
name|decode
argument_list|()
expr_stmt|;
name|findPictures
argument_list|(
name|dgr
operator|.
name|getEscherRecords
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**          * Process a HSSF record.          *          * @param record HSSF Record          */
specifier|public
name|void
name|processRecord
parameter_list|(
name|Record
name|record
parameter_list|)
block|{
if|if
condition|(
name|exception
operator|==
literal|null
condition|)
block|{
try|try
block|{
name|internalProcessRecord
argument_list|(
name|record
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TikaException
name|te
parameter_list|)
block|{
name|exception
operator|=
name|te
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ie
parameter_list|)
block|{
name|exception
operator|=
name|ie
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SAXException
name|se
parameter_list|)
block|{
name|exception
operator|=
name|se
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|void
name|throwStoredException
parameter_list|()
throws|throws
name|TikaException
throws|,
name|SAXException
throws|,
name|IOException
block|{
if|if
condition|(
name|exception
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|exception
operator|instanceof
name|IOException
condition|)
throw|throw
operator|(
name|IOException
operator|)
name|exception
throw|;
if|if
condition|(
name|exception
operator|instanceof
name|SAXException
condition|)
throw|throw
operator|(
name|SAXException
operator|)
name|exception
throw|;
if|if
condition|(
name|exception
operator|instanceof
name|TikaException
condition|)
throw|throw
operator|(
name|TikaException
operator|)
name|exception
throw|;
throw|throw
operator|new
name|TikaException
argument_list|(
name|exception
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
specifier|private
name|void
name|internalProcessRecord
parameter_list|(
name|Record
name|record
parameter_list|)
throws|throws
name|SAXException
throws|,
name|TikaException
throws|,
name|IOException
block|{
switch|switch
condition|(
name|record
operator|.
name|getSid
argument_list|()
condition|)
block|{
case|case
name|BOFRecord
operator|.
name|sid
case|:
comment|// start of workbook, worksheet etc. records
name|BOFRecord
name|bof
init|=
operator|(
name|BOFRecord
operator|)
name|record
decl_stmt|;
if|if
condition|(
name|bof
operator|.
name|getType
argument_list|()
operator|==
name|BOFRecord
operator|.
name|TYPE_WORKBOOK
condition|)
block|{
name|currentSheetIndex
operator|=
operator|-
literal|1
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|bof
operator|.
name|getType
argument_list|()
operator|==
name|BOFRecord
operator|.
name|TYPE_CHART
condition|)
block|{
if|if
condition|(
name|previousSid
operator|==
name|EOFRecord
operator|.
name|sid
condition|)
block|{
comment|// This is a sheet which contains only a chart
name|newSheet
argument_list|()
expr_stmt|;
block|}
else|else
block|{
comment|// This is a chart within a normal sheet
comment|// Handling of this is a bit hacky...
if|if
condition|(
name|currentSheet
operator|!=
literal|null
condition|)
block|{
name|processSheet
argument_list|()
expr_stmt|;
name|currentSheetIndex
operator|--
expr_stmt|;
name|newSheet
argument_list|()
expr_stmt|;
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|bof
operator|.
name|getType
argument_list|()
operator|==
name|BOFRecord
operator|.
name|TYPE_WORKSHEET
condition|)
block|{
name|newSheet
argument_list|()
expr_stmt|;
block|}
break|break;
case|case
name|EOFRecord
operator|.
name|sid
case|:
comment|// end of workbook, worksheet etc. records
if|if
condition|(
name|currentSheet
operator|!=
literal|null
condition|)
block|{
name|processSheet
argument_list|()
expr_stmt|;
block|}
name|currentSheet
operator|=
literal|null
expr_stmt|;
break|break;
case|case
name|BoundSheetRecord
operator|.
name|sid
case|:
comment|// Worksheet index record
name|BoundSheetRecord
name|boundSheetRecord
init|=
operator|(
name|BoundSheetRecord
operator|)
name|record
decl_stmt|;
name|sheetNames
operator|.
name|add
argument_list|(
name|boundSheetRecord
operator|.
name|getSheetname
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|SSTRecord
operator|.
name|sid
case|:
comment|// holds all the strings for LabelSSTRecords
name|sstRecord
operator|=
operator|(
name|SSTRecord
operator|)
name|record
expr_stmt|;
break|break;
case|case
name|FormulaRecord
operator|.
name|sid
case|:
comment|// Cell value from a formula
name|FormulaRecord
name|formula
init|=
operator|(
name|FormulaRecord
operator|)
name|record
decl_stmt|;
if|if
condition|(
name|formula
operator|.
name|hasCachedResultString
argument_list|()
condition|)
block|{
comment|// The String itself should be the next record
name|stringFormulaRecord
operator|=
name|formula
expr_stmt|;
block|}
else|else
block|{
name|addTextCell
argument_list|(
name|record
argument_list|,
name|formatListener
operator|.
name|formatNumberDateCell
argument_list|(
name|formula
argument_list|)
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|StringRecord
operator|.
name|sid
case|:
if|if
condition|(
name|previousSid
operator|==
name|FormulaRecord
operator|.
name|sid
condition|)
block|{
comment|// Cached string value of a string formula
name|StringRecord
name|sr
init|=
operator|(
name|StringRecord
operator|)
name|record
decl_stmt|;
name|addTextCell
argument_list|(
name|stringFormulaRecord
argument_list|,
name|sr
operator|.
name|getString
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Some other string not associated with a cell, skip
block|}
break|break;
case|case
name|LabelRecord
operator|.
name|sid
case|:
comment|// strings stored directly in the cell
name|LabelRecord
name|label
init|=
operator|(
name|LabelRecord
operator|)
name|record
decl_stmt|;
name|addTextCell
argument_list|(
name|record
argument_list|,
name|label
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|LabelSSTRecord
operator|.
name|sid
case|:
comment|// Ref. a string in the shared string table
name|LabelSSTRecord
name|sst
init|=
operator|(
name|LabelSSTRecord
operator|)
name|record
decl_stmt|;
name|UnicodeString
name|unicode
init|=
name|sstRecord
operator|.
name|getString
argument_list|(
name|sst
operator|.
name|getSSTIndex
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|cellString
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|officeParserConfig
operator|.
name|getConcatenatePhoneticRuns
argument_list|()
condition|)
block|{
name|String
name|phonetic
init|=
operator|(
name|unicode
operator|!=
literal|null
operator|&&
name|unicode
operator|.
name|getExtendedRst
argument_list|()
operator|!=
literal|null
operator|&&
name|unicode
operator|.
name|getExtendedRst
argument_list|()
operator|.
name|getPhoneticText
argument_list|()
operator|!=
literal|null
operator|&&
name|unicode
operator|.
name|getExtendedRst
argument_list|()
operator|.
name|getPhoneticText
argument_list|()
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|>
literal|0
operator|)
condition|?
name|unicode
operator|.
name|getExtendedRst
argument_list|()
operator|.
name|getPhoneticText
argument_list|()
else|:
literal|""
decl_stmt|;
name|cellString
operator|=
name|unicode
operator|.
name|getString
argument_list|()
operator|+
literal|" "
operator|+
name|phonetic
expr_stmt|;
block|}
else|else
block|{
name|cellString
operator|=
name|unicode
operator|.
name|getString
argument_list|()
expr_stmt|;
block|}
name|addTextCell
argument_list|(
name|record
argument_list|,
name|cellString
argument_list|)
expr_stmt|;
break|break;
case|case
name|NumberRecord
operator|.
name|sid
case|:
comment|// Contains a numeric cell value
name|NumberRecord
name|number
init|=
operator|(
name|NumberRecord
operator|)
name|record
decl_stmt|;
name|addTextCell
argument_list|(
name|record
argument_list|,
name|formatListener
operator|.
name|formatNumberDateCell
argument_list|(
name|number
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|RKRecord
operator|.
name|sid
case|:
comment|// Excel internal number record
name|RKRecord
name|rk
init|=
operator|(
name|RKRecord
operator|)
name|record
decl_stmt|;
name|addCell
argument_list|(
name|record
argument_list|,
operator|new
name|NumberCell
argument_list|(
name|rk
operator|.
name|getRKNumber
argument_list|()
argument_list|,
name|format
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|HyperlinkRecord
operator|.
name|sid
case|:
comment|// holds a URL associated with a cell
if|if
condition|(
name|currentSheet
operator|!=
literal|null
condition|)
block|{
name|HyperlinkRecord
name|link
init|=
operator|(
name|HyperlinkRecord
operator|)
name|record
decl_stmt|;
name|Point
name|point
init|=
operator|new
name|Point
argument_list|(
name|link
operator|.
name|getFirstColumn
argument_list|()
argument_list|,
name|link
operator|.
name|getFirstRow
argument_list|()
argument_list|)
decl_stmt|;
name|Cell
name|cell
init|=
name|currentSheet
operator|.
name|get
argument_list|(
name|point
argument_list|)
decl_stmt|;
if|if
condition|(
name|cell
operator|!=
literal|null
condition|)
block|{
name|String
name|address
init|=
name|link
operator|.
name|getAddress
argument_list|()
decl_stmt|;
if|if
condition|(
name|address
operator|!=
literal|null
condition|)
block|{
name|addCell
argument_list|(
name|record
argument_list|,
operator|new
name|LinkedCell
argument_list|(
name|cell
argument_list|,
name|address
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|addCell
argument_list|(
name|record
argument_list|,
name|cell
argument_list|)
expr_stmt|;
block|}
block|}
block|}
break|break;
case|case
name|TextObjectRecord
operator|.
name|sid
case|:
if|if
condition|(
name|extractor
operator|.
name|officeParserConfig
operator|.
name|getIncludeShapeBasedContent
argument_list|()
condition|)
block|{
name|TextObjectRecord
name|tor
init|=
operator|(
name|TextObjectRecord
operator|)
name|record
decl_stmt|;
name|addTextCell
argument_list|(
name|record
argument_list|,
name|tor
operator|.
name|getStr
argument_list|()
operator|.
name|getString
argument_list|()
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|SeriesTextRecord
operator|.
name|sid
case|:
comment|// Chart label or title
name|SeriesTextRecord
name|str
init|=
operator|(
name|SeriesTextRecord
operator|)
name|record
decl_stmt|;
name|addTextCell
argument_list|(
name|record
argument_list|,
name|str
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|DrawingGroupRecord
operator|.
name|sid
case|:
comment|// Collect this now, we'll process later when all
comment|//  the continue records are in
name|drawingGroups
operator|.
name|add
argument_list|(
operator|(
name|DrawingGroupRecord
operator|)
name|record
argument_list|)
expr_stmt|;
break|break;
case|case
name|HeaderRecord
operator|.
name|sid
case|:
if|if
condition|(
name|extractor
operator|.
name|officeParserConfig
operator|.
name|getIncludeHeadersAndFooters
argument_list|()
condition|)
block|{
name|HeaderRecord
name|headerRecord
init|=
operator|(
name|HeaderRecord
operator|)
name|record
decl_stmt|;
name|addTextCell
argument_list|(
name|record
argument_list|,
name|headerRecord
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|FooterRecord
operator|.
name|sid
case|:
if|if
condition|(
name|extractor
operator|.
name|officeParserConfig
operator|.
name|getIncludeHeadersAndFooters
argument_list|()
condition|)
block|{
name|FooterRecord
name|footerRecord
init|=
operator|(
name|FooterRecord
operator|)
name|record
decl_stmt|;
name|addTextCell
argument_list|(
name|record
argument_list|,
name|footerRecord
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
name|previousSid
operator|=
name|record
operator|.
name|getSid
argument_list|()
expr_stmt|;
if|if
condition|(
name|stringFormulaRecord
operator|!=
name|record
condition|)
block|{
name|stringFormulaRecord
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|processExtraText
parameter_list|()
throws|throws
name|SAXException
block|{
if|if
condition|(
name|extraTextCells
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|Cell
name|cell
range|:
name|extraTextCells
control|)
block|{
name|handler
operator|.
name|startElement
argument_list|(
literal|"div"
argument_list|,
literal|"class"
argument_list|,
literal|"outside"
argument_list|)
expr_stmt|;
name|cell
operator|.
name|render
argument_list|(
name|handler
argument_list|)
expr_stmt|;
name|handler
operator|.
name|endElement
argument_list|(
literal|"div"
argument_list|)
expr_stmt|;
block|}
comment|// Reset
name|extraTextCells
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**          * Adds the given cell (unless<code>null</code>) to the current          * worksheet (if any) at the position (if any) of the given record.          *          * @param record record that holds the cell value          * @param cell   cell value (or<code>null</code>)          */
specifier|private
name|void
name|addCell
parameter_list|(
name|Record
name|record
parameter_list|,
name|Cell
name|cell
parameter_list|)
throws|throws
name|SAXException
block|{
if|if
condition|(
name|cell
operator|==
literal|null
condition|)
block|{
comment|// Ignore empty cells
block|}
elseif|else
if|if
condition|(
name|currentSheet
operator|!=
literal|null
operator|&&
name|record
operator|instanceof
name|CellValueRecordInterface
condition|)
block|{
comment|// Normal cell inside a worksheet
name|CellValueRecordInterface
name|value
init|=
operator|(
name|CellValueRecordInterface
operator|)
name|record
decl_stmt|;
name|Point
name|point
init|=
operator|new
name|Point
argument_list|(
name|value
operator|.
name|getColumn
argument_list|()
argument_list|,
name|value
operator|.
name|getRow
argument_list|()
argument_list|)
decl_stmt|;
name|currentSheet
operator|.
name|put
argument_list|(
name|point
argument_list|,
name|cell
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Cell outside the worksheets
name|extraTextCells
operator|.
name|add
argument_list|(
name|cell
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**          * Adds a text cell with the given text comment. The given text          * is trimmed, and ignored if<code>null</code> or empty.          *          * @param record record that holds the text value          * @param text   text content, may be<code>null</code>          * @throws SAXException          */
specifier|private
name|void
name|addTextCell
parameter_list|(
name|Record
name|record
parameter_list|,
name|String
name|text
parameter_list|)
throws|throws
name|SAXException
block|{
if|if
condition|(
name|text
operator|!=
literal|null
condition|)
block|{
name|text
operator|=
name|text
operator|.
name|trim
argument_list|()
expr_stmt|;
if|if
condition|(
name|text
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|addCell
argument_list|(
name|record
argument_list|,
operator|new
name|TextCell
argument_list|(
name|text
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|newSheet
parameter_list|()
block|{
name|currentSheetIndex
operator|++
expr_stmt|;
name|currentSheet
operator|=
operator|new
name|TreeMap
argument_list|<
name|Point
argument_list|,
name|Cell
argument_list|>
argument_list|(
operator|new
name|PointComparator
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**          * Process an excel sheet.          *          * @throws SAXException if an error occurs          */
specifier|private
name|void
name|processSheet
parameter_list|()
throws|throws
name|SAXException
block|{
comment|// Sheet Start
name|handler
operator|.
name|startElement
argument_list|(
literal|"div"
argument_list|,
literal|"class"
argument_list|,
literal|"page"
argument_list|)
expr_stmt|;
if|if
condition|(
name|currentSheetIndex
operator|<
name|sheetNames
operator|.
name|size
argument_list|()
condition|)
block|{
name|handler
operator|.
name|element
argument_list|(
literal|"h1"
argument_list|,
name|sheetNames
operator|.
name|get
argument_list|(
name|currentSheetIndex
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|handler
operator|.
name|startElement
argument_list|(
literal|"table"
argument_list|)
expr_stmt|;
name|handler
operator|.
name|startElement
argument_list|(
literal|"tbody"
argument_list|)
expr_stmt|;
comment|// Process Rows
name|int
name|currentRow
init|=
literal|0
decl_stmt|;
name|int
name|currentColumn
init|=
literal|0
decl_stmt|;
name|handler
operator|.
name|startElement
argument_list|(
literal|"tr"
argument_list|)
expr_stmt|;
name|handler
operator|.
name|startElement
argument_list|(
literal|"td"
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Point
argument_list|,
name|Cell
argument_list|>
name|entry
range|:
name|currentSheet
operator|.
name|entrySet
argument_list|()
control|)
block|{
while|while
condition|(
name|currentRow
operator|<
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|y
condition|)
block|{
name|handler
operator|.
name|endElement
argument_list|(
literal|"td"
argument_list|)
expr_stmt|;
name|handler
operator|.
name|endElement
argument_list|(
literal|"tr"
argument_list|)
expr_stmt|;
name|handler
operator|.
name|startElement
argument_list|(
literal|"tr"
argument_list|)
expr_stmt|;
name|handler
operator|.
name|startElement
argument_list|(
literal|"td"
argument_list|)
expr_stmt|;
name|currentRow
operator|++
expr_stmt|;
name|currentColumn
operator|=
literal|0
expr_stmt|;
block|}
while|while
condition|(
name|currentColumn
operator|<
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|x
condition|)
block|{
name|handler
operator|.
name|endElement
argument_list|(
literal|"td"
argument_list|)
expr_stmt|;
name|handler
operator|.
name|startElement
argument_list|(
literal|"td"
argument_list|)
expr_stmt|;
name|currentColumn
operator|++
expr_stmt|;
block|}
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|render
argument_list|(
name|handler
argument_list|)
expr_stmt|;
block|}
name|handler
operator|.
name|endElement
argument_list|(
literal|"td"
argument_list|)
expr_stmt|;
name|handler
operator|.
name|endElement
argument_list|(
literal|"tr"
argument_list|)
expr_stmt|;
comment|// Sheet End
name|handler
operator|.
name|endElement
argument_list|(
literal|"tbody"
argument_list|)
expr_stmt|;
name|handler
operator|.
name|endElement
argument_list|(
literal|"table"
argument_list|)
expr_stmt|;
comment|// Finish up
name|processExtraText
argument_list|()
expr_stmt|;
name|handler
operator|.
name|endElement
argument_list|(
literal|"div"
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|findPictures
parameter_list|(
name|List
argument_list|<
name|EscherRecord
argument_list|>
name|records
parameter_list|)
throws|throws
name|IOException
throws|,
name|SAXException
throws|,
name|TikaException
block|{
for|for
control|(
name|EscherRecord
name|escherRecord
range|:
name|records
control|)
block|{
if|if
condition|(
name|escherRecord
operator|instanceof
name|EscherBSERecord
condition|)
block|{
name|EscherBlipRecord
name|blip
init|=
operator|(
operator|(
name|EscherBSERecord
operator|)
name|escherRecord
operator|)
operator|.
name|getBlipRecord
argument_list|()
decl_stmt|;
if|if
condition|(
name|blip
operator|!=
literal|null
condition|)
block|{
name|HSSFPictureData
name|picture
init|=
operator|new
name|HSSFPictureData
argument_list|(
name|blip
argument_list|)
decl_stmt|;
name|String
name|mimeType
init|=
name|picture
operator|.
name|getMimeType
argument_list|()
decl_stmt|;
name|TikaInputStream
name|stream
init|=
name|TikaInputStream
operator|.
name|get
argument_list|(
name|picture
operator|.
name|getData
argument_list|()
argument_list|)
decl_stmt|;
comment|// Handle the embeded resource
name|extractor
operator|.
name|handleEmbeddedResource
argument_list|(
name|stream
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|mimeType
argument_list|,
name|handler
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Recursive call.
name|findPictures
argument_list|(
name|escherRecord
operator|.
name|getChildRecords
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
class|class
name|TikaFormatTrackingHSSFListener
extends|extends
name|FormatTrackingHSSFListener
block|{
comment|//TIKA-2025 -- use this to preserve large numbers in "General" format
comment|//against the MS spec.
specifier|final
name|TikaExcelGeneralFormat
name|generalFormat
decl_stmt|;
specifier|public
name|TikaFormatTrackingHSSFListener
parameter_list|(
name|HSSFListener
name|childListener
parameter_list|,
name|Locale
name|locale
parameter_list|)
block|{
name|super
argument_list|(
name|childListener
argument_list|,
name|locale
argument_list|)
expr_stmt|;
name|generalFormat
operator|=
operator|new
name|TikaExcelGeneralFormat
argument_list|(
name|locale
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|formatNumberDateCell
parameter_list|(
name|CellValueRecordInterface
name|cell
parameter_list|)
block|{
name|String
name|formatString
init|=
name|this
operator|.
name|getFormatString
argument_list|(
name|cell
argument_list|)
decl_stmt|;
if|if
condition|(
name|formatString
operator|!=
literal|null
operator|&&
operator|!
name|formatString
operator|.
name|equals
argument_list|(
literal|"General"
argument_list|)
condition|)
block|{
return|return
name|super
operator|.
name|formatNumberDateCell
argument_list|(
name|cell
argument_list|)
return|;
block|}
name|double
name|value
decl_stmt|;
if|if
condition|(
name|cell
operator|instanceof
name|NumberRecord
condition|)
block|{
name|value
operator|=
operator|(
operator|(
name|NumberRecord
operator|)
name|cell
operator|)
operator|.
name|getValue
argument_list|()
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
operator|!
operator|(
name|cell
operator|instanceof
name|FormulaRecord
operator|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unsupported CellValue Record passed in "
operator|+
name|cell
argument_list|)
throw|;
block|}
name|value
operator|=
operator|(
operator|(
name|FormulaRecord
operator|)
name|cell
operator|)
operator|.
name|getValue
argument_list|()
expr_stmt|;
block|}
return|return
name|generalFormat
operator|.
name|format
argument_list|(
name|value
argument_list|)
return|;
block|}
block|}
block|}
comment|/**      * Utility comparator for points.      */
specifier|private
specifier|static
class|class
name|PointComparator
implements|implements
name|Comparator
argument_list|<
name|Point
argument_list|>
block|{
specifier|public
name|int
name|compare
parameter_list|(
name|Point
name|a
parameter_list|,
name|Point
name|b
parameter_list|)
block|{
name|int
name|diff
init|=
name|a
operator|.
name|y
operator|-
name|b
operator|.
name|y
decl_stmt|;
if|if
condition|(
name|diff
operator|==
literal|0
condition|)
block|{
name|diff
operator|=
name|a
operator|.
name|x
operator|-
name|b
operator|.
name|x
expr_stmt|;
block|}
return|return
name|diff
return|;
block|}
block|}
block|}
end_class

end_unit

