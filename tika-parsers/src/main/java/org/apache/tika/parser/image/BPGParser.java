begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|image
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|util
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|exception
operator|.
name|TikaException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|io
operator|.
name|EndianUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|metadata
operator|.
name|Metadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|metadata
operator|.
name|Photoshop
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|metadata
operator|.
name|TIFF
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|mime
operator|.
name|MediaType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|AbstractParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|ParseContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|sax
operator|.
name|XHTMLContentHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|ContentHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_comment
comment|/**  * Parser for the Better Portable Graphics )BPG) File Format.  *   * Documentation on the file format is available from  * http://bellard.org/bpg/bpg_spec.txt  */
end_comment

begin_class
specifier|public
class|class
name|BPGParser
extends|extends
name|AbstractParser
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
operator|-
literal|161736541253892772L
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Set
argument_list|<
name|MediaType
argument_list|>
name|SUPPORTED_TYPES
init|=
name|Collections
operator|.
name|unmodifiableSet
argument_list|(
operator|new
name|HashSet
argument_list|<
name|MediaType
argument_list|>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|MediaType
operator|.
name|image
argument_list|(
literal|"x-bpg"
argument_list|)
argument_list|,
name|MediaType
operator|.
name|image
argument_list|(
literal|"bpg"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
specifier|public
name|Set
argument_list|<
name|MediaType
argument_list|>
name|getSupportedTypes
parameter_list|(
name|ParseContext
name|context
parameter_list|)
block|{
return|return
name|SUPPORTED_TYPES
return|;
block|}
specifier|protected
specifier|static
specifier|final
name|int
name|EXTENSION_TAG_EXIF
init|=
literal|1
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|int
name|EXTENSION_TAG_ICC_PROFILE
init|=
literal|2
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|int
name|EXTENSION_TAG_XMP
init|=
literal|3
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|int
name|EXTENSION_TAG_THUMBNAIL
init|=
literal|4
decl_stmt|;
specifier|public
name|void
name|parse
parameter_list|(
name|InputStream
name|stream
parameter_list|,
name|ContentHandler
name|handler
parameter_list|,
name|Metadata
name|metadata
parameter_list|,
name|ParseContext
name|context
parameter_list|)
throws|throws
name|IOException
throws|,
name|SAXException
throws|,
name|TikaException
block|{
comment|// Check for the magic header signature
name|byte
index|[]
name|signature
init|=
operator|new
name|byte
index|[
literal|4
index|]
decl_stmt|;
name|IOUtils
operator|.
name|readFully
argument_list|(
name|stream
argument_list|,
name|signature
argument_list|)
expr_stmt|;
if|if
condition|(
name|signature
index|[
literal|0
index|]
operator|==
operator|(
name|byte
operator|)
literal|'B'
operator|&&
name|signature
index|[
literal|1
index|]
operator|==
operator|(
name|byte
operator|)
literal|'P'
operator|&&
name|signature
index|[
literal|2
index|]
operator|==
operator|(
name|byte
operator|)
literal|'G'
operator|&&
name|signature
index|[
literal|3
index|]
operator|==
operator|(
name|byte
operator|)
literal|0xfb
condition|)
block|{
comment|// Good, signature found
block|}
else|else
block|{
throw|throw
operator|new
name|TikaException
argument_list|(
literal|"BPG magic signature invalid"
argument_list|)
throw|;
block|}
comment|// Grab and decode the first byte
name|int
name|pdf
init|=
name|stream
operator|.
name|read
argument_list|()
decl_stmt|;
comment|// Pixel format: Greyscale / 4:2:0 / 4:2:2 / 4:4:4
name|int
name|pixelFormat
init|=
name|pdf
operator|&
literal|0x7
decl_stmt|;
comment|// TODO Identify a suitable metadata key for this
comment|// Is there an alpha plane as well as a colour plane?
name|boolean
name|hasAlphaPlane1
init|=
operator|(
name|pdf
operator|&
literal|0x8
operator|)
operator|==
literal|0x8
decl_stmt|;
comment|// TODO Identify a suitable metadata key for this+hasAlphaPlane2
comment|// Bit depth minus 8
name|int
name|bitDepth
init|=
operator|(
name|pdf
operator|>>
literal|4
operator|)
operator|+
literal|8
decl_stmt|;
name|metadata
operator|.
name|set
argument_list|(
name|TIFF
operator|.
name|BITS_PER_SAMPLE
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|bitDepth
argument_list|)
argument_list|)
expr_stmt|;
comment|// Grab and decode the second byte
name|int
name|cer
init|=
name|stream
operator|.
name|read
argument_list|()
decl_stmt|;
comment|// Colour Space: YCbCr / RGB / YCgCo / YCbCrK / CMYK
name|int
name|colourSpace
init|=
name|cer
operator|&
literal|0x15
decl_stmt|;
switch|switch
condition|(
name|colourSpace
condition|)
block|{
case|case
literal|0
case|:
name|metadata
operator|.
name|set
argument_list|(
name|Photoshop
operator|.
name|COLOR_MODE
argument_list|,
literal|"YCbCr Colour"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|1
case|:
name|metadata
operator|.
name|set
argument_list|(
name|Photoshop
operator|.
name|COLOR_MODE
argument_list|,
literal|"RGB Colour"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|2
case|:
name|metadata
operator|.
name|set
argument_list|(
name|Photoshop
operator|.
name|COLOR_MODE
argument_list|,
literal|"YCgCo Colour"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|3
case|:
name|metadata
operator|.
name|set
argument_list|(
name|Photoshop
operator|.
name|COLOR_MODE
argument_list|,
literal|"YCbCrK Colour"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|4
case|:
name|metadata
operator|.
name|set
argument_list|(
name|Photoshop
operator|.
name|COLOR_MODE
argument_list|,
literal|"CMYK Colour"
argument_list|)
expr_stmt|;
break|break;
block|}
comment|// Are there extensions or not?
name|boolean
name|hasExtensions
init|=
operator|(
name|cer
operator|&
literal|16
operator|)
operator|==
literal|16
decl_stmt|;
comment|// Is the Alpha Plane 2 flag set?
name|boolean
name|hasAlphaPlane2
init|=
operator|(
name|cer
operator|&
literal|32
operator|)
operator|==
literal|32
decl_stmt|;
comment|// cer then holds 2 more booleans - limited range, reserved
comment|// Width and height next
name|int
name|width
init|=
operator|(
name|int
operator|)
name|EndianUtils
operator|.
name|readUE7
argument_list|(
name|stream
argument_list|)
decl_stmt|;
name|int
name|height
init|=
operator|(
name|int
operator|)
name|EndianUtils
operator|.
name|readUE7
argument_list|(
name|stream
argument_list|)
decl_stmt|;
name|metadata
operator|.
name|set
argument_list|(
name|TIFF
operator|.
name|IMAGE_LENGTH
argument_list|,
name|height
argument_list|)
expr_stmt|;
name|metadata
operator|.
name|set
argument_list|(
name|TIFF
operator|.
name|IMAGE_WIDTH
argument_list|,
name|width
argument_list|)
expr_stmt|;
comment|// Picture Data length
name|EndianUtils
operator|.
name|readUE7
argument_list|(
name|stream
argument_list|)
expr_stmt|;
comment|// Extension Data Length, if extensions present
name|long
name|extensionDataLength
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|hasExtensions
condition|)
name|extensionDataLength
operator|=
name|EndianUtils
operator|.
name|readUE7
argument_list|(
name|stream
argument_list|)
expr_stmt|;
comment|// Alpha Data Length, if alpha used
name|long
name|alphaDataLength
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|hasAlphaPlane1
operator|||
name|hasAlphaPlane2
condition|)
name|alphaDataLength
operator|=
name|EndianUtils
operator|.
name|readUE7
argument_list|(
name|stream
argument_list|)
expr_stmt|;
comment|// Extension Data
if|if
condition|(
name|hasExtensions
condition|)
block|{
name|long
name|extensionsDataSeen
init|=
literal|0
decl_stmt|;
name|ImageMetadataExtractor
name|metadataExtractor
init|=
operator|new
name|ImageMetadataExtractor
argument_list|(
name|metadata
argument_list|)
decl_stmt|;
while|while
condition|(
name|extensionsDataSeen
operator|<
name|extensionDataLength
condition|)
block|{
name|int
name|extensionType
init|=
operator|(
name|int
operator|)
name|EndianUtils
operator|.
name|readUE7
argument_list|(
name|stream
argument_list|)
decl_stmt|;
name|int
name|extensionLength
init|=
operator|(
name|int
operator|)
name|EndianUtils
operator|.
name|readUE7
argument_list|(
name|stream
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|extensionType
condition|)
block|{
case|case
name|EXTENSION_TAG_EXIF
case|:
name|metadataExtractor
operator|.
name|parseRawExif
argument_list|(
name|stream
argument_list|,
name|extensionLength
argument_list|,
literal|true
argument_list|)
expr_stmt|;
break|break;
case|case
name|EXTENSION_TAG_XMP
case|:
name|handleXMP
argument_list|(
name|stream
argument_list|,
name|extensionLength
argument_list|,
name|metadataExtractor
argument_list|)
expr_stmt|;
break|break;
default|default:
name|stream
operator|.
name|skip
argument_list|(
name|extensionLength
argument_list|)
expr_stmt|;
block|}
name|extensionsDataSeen
operator|+=
name|extensionLength
expr_stmt|;
block|}
block|}
comment|// HEVC Header + Data
comment|// Alpha HEVC Header + Data
comment|// We can't do anything with these parts
comment|// We don't have any helpful text, sorry...
name|XHTMLContentHandler
name|xhtml
init|=
operator|new
name|XHTMLContentHandler
argument_list|(
name|handler
argument_list|,
name|metadata
argument_list|)
decl_stmt|;
name|xhtml
operator|.
name|startDocument
argument_list|()
expr_stmt|;
name|xhtml
operator|.
name|endDocument
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|void
name|handleXMP
parameter_list|(
name|InputStream
name|stream
parameter_list|,
name|int
name|xmpLength
parameter_list|,
name|ImageMetadataExtractor
name|extractor
parameter_list|)
throws|throws
name|IOException
throws|,
name|TikaException
throws|,
name|SAXException
block|{
name|byte
index|[]
name|xmp
init|=
operator|new
name|byte
index|[
name|xmpLength
index|]
decl_stmt|;
name|IOUtils
operator|.
name|readFully
argument_list|(
name|stream
argument_list|,
name|xmp
argument_list|)
expr_stmt|;
name|extractor
operator|.
name|parseRawXMP
argument_list|(
name|xmp
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

