begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|pdf
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Calendar
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|input
operator|.
name|CloseShieldInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jempbox
operator|.
name|xmp
operator|.
name|XMPSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jempbox
operator|.
name|xmp
operator|.
name|XMPSchemaDublinCore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jempbox
operator|.
name|xmp
operator|.
name|pdfa
operator|.
name|XMPSchemaPDFAId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSArray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSDictionary
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSString
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|exceptions
operator|.
name|CryptographyException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|io
operator|.
name|RandomAccess
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|io
operator|.
name|RandomAccessBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|io
operator|.
name|RandomAccessFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|PDDocument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|PDDocumentInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|encryption
operator|.
name|AccessPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|font
operator|.
name|PDFont
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|exception
operator|.
name|EncryptedDocumentException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|exception
operator|.
name|TikaException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|extractor
operator|.
name|EmbeddedDocumentExtractor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|io
operator|.
name|TemporaryResources
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|io
operator|.
name|TikaInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|metadata
operator|.
name|AccessPermissions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|metadata
operator|.
name|Metadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|metadata
operator|.
name|PagedText
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|metadata
operator|.
name|Property
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|metadata
operator|.
name|TikaCoreProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|mime
operator|.
name|MediaType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|AbstractParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|ParseContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|PasswordProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|ContentHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_comment
comment|/**  * PDF parser.  *<p/>  * This parser can process also encrypted PDF documents if the required  * password is given as a part of the input metadata associated with a  * document. If no password is given, then this parser will try decrypting  * the document using the empty password that's often used with PDFs. If  * the PDF contains any embedded documents (for example as part of a PDF  * package) then this parser will use the {@link EmbeddedDocumentExtractor}  * to handle them.  *<p/>  * As of Tika 1.6, it is possible to extract inline images with  * the {@link EmbeddedDocumentExtractor} as if they were regular  * attachments.  By default, this feature is turned off because of  * the potentially enormous number and size of inline images.  To  * turn this feature on, see  * {@link PDFParserConfig#setExtractInlineImages(boolean)}.  */
end_comment

begin_class
specifier|public
class|class
name|PDFParser
extends|extends
name|AbstractParser
block|{
comment|/**      * Metadata key for giving the document password to the parser.      *      * @since Apache Tika 0.5      * @deprecated Supply a {@link PasswordProvider} on the {@link ParseContext} instead      */
specifier|public
specifier|static
specifier|final
name|String
name|PASSWORD
init|=
literal|"org.apache.tika.parser.pdf.password"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|MediaType
name|MEDIA_TYPE
init|=
name|MediaType
operator|.
name|application
argument_list|(
literal|"pdf"
argument_list|)
decl_stmt|;
comment|/**      * Serial version UID      */
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
operator|-
literal|752276948656079347L
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Set
argument_list|<
name|MediaType
argument_list|>
name|SUPPORTED_TYPES
init|=
name|Collections
operator|.
name|singleton
argument_list|(
name|MEDIA_TYPE
argument_list|)
decl_stmt|;
specifier|private
name|PDFParserConfig
name|defaultConfig
init|=
operator|new
name|PDFParserConfig
argument_list|()
decl_stmt|;
specifier|public
name|Set
argument_list|<
name|MediaType
argument_list|>
name|getSupportedTypes
parameter_list|(
name|ParseContext
name|context
parameter_list|)
block|{
return|return
name|SUPPORTED_TYPES
return|;
block|}
specifier|public
name|void
name|parse
parameter_list|(
name|InputStream
name|stream
parameter_list|,
name|ContentHandler
name|handler
parameter_list|,
name|Metadata
name|metadata
parameter_list|,
name|ParseContext
name|context
parameter_list|)
throws|throws
name|IOException
throws|,
name|SAXException
throws|,
name|TikaException
block|{
name|PDDocument
name|pdfDocument
init|=
literal|null
decl_stmt|;
name|TemporaryResources
name|tmp
init|=
operator|new
name|TemporaryResources
argument_list|()
decl_stmt|;
comment|//config from context, or default if not set via context
name|PDFParserConfig
name|localConfig
init|=
name|context
operator|.
name|get
argument_list|(
name|PDFParserConfig
operator|.
name|class
argument_list|,
name|defaultConfig
argument_list|)
decl_stmt|;
name|String
name|password
init|=
literal|""
decl_stmt|;
try|try
block|{
comment|// PDFBox can process entirely in memory, or can use a temp file
comment|//  for unpacked / processed resources
comment|// Decide which to do based on if we're reading from a file or not already
name|TikaInputStream
name|tstream
init|=
name|TikaInputStream
operator|.
name|cast
argument_list|(
name|stream
argument_list|)
decl_stmt|;
name|password
operator|=
name|getPassword
argument_list|(
name|metadata
argument_list|,
name|context
argument_list|)
expr_stmt|;
if|if
condition|(
name|tstream
operator|!=
literal|null
operator|&&
name|tstream
operator|.
name|hasFile
argument_list|()
condition|)
block|{
comment|// File based, take that as a cue to use a temporary file
name|RandomAccess
name|scratchFile
init|=
operator|new
name|RandomAccessFile
argument_list|(
name|tmp
operator|.
name|createTemporaryFile
argument_list|()
argument_list|,
literal|"rw"
argument_list|)
decl_stmt|;
if|if
condition|(
name|localConfig
operator|.
name|getUseNonSequentialParser
argument_list|()
operator|==
literal|true
condition|)
block|{
name|pdfDocument
operator|=
name|PDDocument
operator|.
name|loadNonSeq
argument_list|(
operator|new
name|CloseShieldInputStream
argument_list|(
name|stream
argument_list|)
argument_list|,
name|scratchFile
argument_list|,
name|password
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|pdfDocument
operator|=
name|PDDocument
operator|.
name|load
argument_list|(
operator|new
name|CloseShieldInputStream
argument_list|(
name|stream
argument_list|)
argument_list|,
name|scratchFile
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// Go for the normal, stream based in-memory parsing
if|if
condition|(
name|localConfig
operator|.
name|getUseNonSequentialParser
argument_list|()
operator|==
literal|true
condition|)
block|{
name|pdfDocument
operator|=
name|PDDocument
operator|.
name|loadNonSeq
argument_list|(
operator|new
name|CloseShieldInputStream
argument_list|(
name|stream
argument_list|)
argument_list|,
operator|new
name|RandomAccessBuffer
argument_list|()
argument_list|,
name|password
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|pdfDocument
operator|=
name|PDDocument
operator|.
name|load
argument_list|(
operator|new
name|CloseShieldInputStream
argument_list|(
name|stream
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
name|metadata
operator|.
name|set
argument_list|(
literal|"pdf:encrypted"
argument_list|,
name|Boolean
operator|.
name|toString
argument_list|(
name|pdfDocument
operator|.
name|isEncrypted
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|//if using the classic parser and the doc is encrypted, we must manually decrypt
if|if
condition|(
operator|!
name|localConfig
operator|.
name|getUseNonSequentialParser
argument_list|()
operator|&&
name|pdfDocument
operator|.
name|isEncrypted
argument_list|()
condition|)
block|{
name|pdfDocument
operator|.
name|decrypt
argument_list|(
name|password
argument_list|)
expr_stmt|;
block|}
name|metadata
operator|.
name|set
argument_list|(
name|Metadata
operator|.
name|CONTENT_TYPE
argument_list|,
literal|"application/pdf"
argument_list|)
expr_stmt|;
name|extractMetadata
argument_list|(
name|pdfDocument
argument_list|,
name|metadata
argument_list|)
expr_stmt|;
name|AccessChecker
name|checker
init|=
name|localConfig
operator|.
name|getAccessChecker
argument_list|()
decl_stmt|;
name|checker
operator|.
name|check
argument_list|(
name|metadata
argument_list|)
expr_stmt|;
if|if
condition|(
name|handler
operator|!=
literal|null
condition|)
block|{
name|PDF2XHTML
operator|.
name|process
argument_list|(
name|pdfDocument
argument_list|,
name|handler
argument_list|,
name|context
argument_list|,
name|metadata
argument_list|,
name|localConfig
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|CryptographyException
name|e
parameter_list|)
block|{
comment|//seq parser throws CryptographyException for bad password
throw|throw
operator|new
name|EncryptedDocumentException
argument_list|(
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|//nonseq parser throws IOException for bad password
comment|//At the Tika level, we want the same exception to be thrown
if|if
condition|(
name|e
operator|.
name|getMessage
argument_list|()
operator|!=
literal|null
operator|&&
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Error (CryptographyException)"
argument_list|)
condition|)
block|{
name|metadata
operator|.
name|set
argument_list|(
literal|"pdf:encrypted"
argument_list|,
name|Boolean
operator|.
name|toString
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|EncryptedDocumentException
argument_list|(
name|e
argument_list|)
throw|;
block|}
comment|//rethrow any other IOExceptions
throw|throw
name|e
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|pdfDocument
operator|!=
literal|null
condition|)
block|{
name|pdfDocument
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|tmp
operator|.
name|dispose
argument_list|()
expr_stmt|;
comment|//TODO: once we migrate to PDFBox 2.0, remove this (PDFBOX-2200)
name|PDFont
operator|.
name|clearResources
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|String
name|getPassword
parameter_list|(
name|Metadata
name|metadata
parameter_list|,
name|ParseContext
name|context
parameter_list|)
block|{
name|String
name|password
init|=
literal|null
decl_stmt|;
comment|// Did they supply a new style Password Provider?
name|PasswordProvider
name|passwordProvider
init|=
name|context
operator|.
name|get
argument_list|(
name|PasswordProvider
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|passwordProvider
operator|!=
literal|null
condition|)
block|{
name|password
operator|=
name|passwordProvider
operator|.
name|getPassword
argument_list|(
name|metadata
argument_list|)
expr_stmt|;
block|}
comment|// Fall back on the old style metadata if set
if|if
condition|(
name|password
operator|==
literal|null
operator|&&
name|metadata
operator|.
name|get
argument_list|(
name|PASSWORD
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|password
operator|=
name|metadata
operator|.
name|get
argument_list|(
name|PASSWORD
argument_list|)
expr_stmt|;
block|}
comment|// If no password is given, use an empty string as the default
if|if
condition|(
name|password
operator|==
literal|null
condition|)
block|{
name|password
operator|=
literal|""
expr_stmt|;
block|}
return|return
name|password
return|;
block|}
specifier|private
name|void
name|extractMetadata
parameter_list|(
name|PDDocument
name|document
parameter_list|,
name|Metadata
name|metadata
parameter_list|)
throws|throws
name|TikaException
block|{
comment|//first extract AccessPermissions
name|AccessPermission
name|ap
init|=
name|document
operator|.
name|getCurrentAccessPermission
argument_list|()
decl_stmt|;
name|metadata
operator|.
name|set
argument_list|(
name|AccessPermissions
operator|.
name|EXTRACT_FOR_ACCESSIBILITY
argument_list|,
name|Boolean
operator|.
name|toString
argument_list|(
name|ap
operator|.
name|canExtractForAccessibility
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|metadata
operator|.
name|set
argument_list|(
name|AccessPermissions
operator|.
name|EXTRACT_CONTENT
argument_list|,
name|Boolean
operator|.
name|toString
argument_list|(
name|ap
operator|.
name|canExtractContent
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|metadata
operator|.
name|set
argument_list|(
name|AccessPermissions
operator|.
name|ASSEMBLE_DOCUMENT
argument_list|,
name|Boolean
operator|.
name|toString
argument_list|(
name|ap
operator|.
name|canAssembleDocument
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|metadata
operator|.
name|set
argument_list|(
name|AccessPermissions
operator|.
name|FILL_IN_FORM
argument_list|,
name|Boolean
operator|.
name|toString
argument_list|(
name|ap
operator|.
name|canFillInForm
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|metadata
operator|.
name|set
argument_list|(
name|AccessPermissions
operator|.
name|CAN_MODIFY
argument_list|,
name|Boolean
operator|.
name|toString
argument_list|(
name|ap
operator|.
name|canModify
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|metadata
operator|.
name|set
argument_list|(
name|AccessPermissions
operator|.
name|CAN_MODIFY_ANNOTATIONS
argument_list|,
name|Boolean
operator|.
name|toString
argument_list|(
name|ap
operator|.
name|canModifyAnnotations
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|metadata
operator|.
name|set
argument_list|(
name|AccessPermissions
operator|.
name|CAN_PRINT
argument_list|,
name|Boolean
operator|.
name|toString
argument_list|(
name|ap
operator|.
name|canPrint
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|metadata
operator|.
name|set
argument_list|(
name|AccessPermissions
operator|.
name|CAN_PRINT_DEGRADED
argument_list|,
name|Boolean
operator|.
name|toString
argument_list|(
name|ap
operator|.
name|canPrintDegraded
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|//now go for the XMP stuff
name|org
operator|.
name|apache
operator|.
name|jempbox
operator|.
name|xmp
operator|.
name|XMPMetadata
name|xmp
init|=
literal|null
decl_stmt|;
name|XMPSchemaDublinCore
name|dcSchema
init|=
literal|null
decl_stmt|;
try|try
block|{
if|if
condition|(
name|document
operator|.
name|getDocumentCatalog
argument_list|()
operator|.
name|getMetadata
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|xmp
operator|=
name|document
operator|.
name|getDocumentCatalog
argument_list|()
operator|.
name|getMetadata
argument_list|()
operator|.
name|exportXMPMetadata
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|xmp
operator|!=
literal|null
condition|)
block|{
name|dcSchema
operator|=
name|xmp
operator|.
name|getDublinCoreSchema
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|//swallow
block|}
name|PDDocumentInformation
name|info
init|=
name|document
operator|.
name|getDocumentInformation
argument_list|()
decl_stmt|;
name|metadata
operator|.
name|set
argument_list|(
name|PagedText
operator|.
name|N_PAGES
argument_list|,
name|document
operator|.
name|getNumberOfPages
argument_list|()
argument_list|)
expr_stmt|;
name|extractMultilingualItems
argument_list|(
name|metadata
argument_list|,
name|TikaCoreProperties
operator|.
name|TITLE
argument_list|,
name|info
operator|.
name|getTitle
argument_list|()
argument_list|,
name|dcSchema
argument_list|)
expr_stmt|;
name|extractDublinCoreListItems
argument_list|(
name|metadata
argument_list|,
name|TikaCoreProperties
operator|.
name|CREATOR
argument_list|,
name|info
operator|.
name|getAuthor
argument_list|()
argument_list|,
name|dcSchema
argument_list|)
expr_stmt|;
name|extractDublinCoreListItems
argument_list|(
name|metadata
argument_list|,
name|TikaCoreProperties
operator|.
name|CONTRIBUTOR
argument_list|,
literal|null
argument_list|,
name|dcSchema
argument_list|)
expr_stmt|;
name|addMetadata
argument_list|(
name|metadata
argument_list|,
name|TikaCoreProperties
operator|.
name|CREATOR_TOOL
argument_list|,
name|info
operator|.
name|getCreator
argument_list|()
argument_list|)
expr_stmt|;
name|addMetadata
argument_list|(
name|metadata
argument_list|,
name|TikaCoreProperties
operator|.
name|KEYWORDS
argument_list|,
name|info
operator|.
name|getKeywords
argument_list|()
argument_list|)
expr_stmt|;
name|addMetadata
argument_list|(
name|metadata
argument_list|,
literal|"producer"
argument_list|,
name|info
operator|.
name|getProducer
argument_list|()
argument_list|)
expr_stmt|;
name|extractMultilingualItems
argument_list|(
name|metadata
argument_list|,
name|TikaCoreProperties
operator|.
name|DESCRIPTION
argument_list|,
literal|null
argument_list|,
name|dcSchema
argument_list|)
expr_stmt|;
comment|// TODO: Move to description in Tika 2.0
name|addMetadata
argument_list|(
name|metadata
argument_list|,
name|TikaCoreProperties
operator|.
name|TRANSITION_SUBJECT_TO_OO_SUBJECT
argument_list|,
name|info
operator|.
name|getSubject
argument_list|()
argument_list|)
expr_stmt|;
name|addMetadata
argument_list|(
name|metadata
argument_list|,
literal|"trapped"
argument_list|,
name|info
operator|.
name|getTrapped
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
comment|// TODO Remove these in Tika 2.0
name|addMetadata
argument_list|(
name|metadata
argument_list|,
literal|"created"
argument_list|,
name|info
operator|.
name|getCreationDate
argument_list|()
argument_list|)
expr_stmt|;
name|addMetadata
argument_list|(
name|metadata
argument_list|,
name|TikaCoreProperties
operator|.
name|CREATED
argument_list|,
name|info
operator|.
name|getCreationDate
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// Invalid date format, just ignore
block|}
try|try
block|{
name|Calendar
name|modified
init|=
name|info
operator|.
name|getModificationDate
argument_list|()
decl_stmt|;
name|addMetadata
argument_list|(
name|metadata
argument_list|,
name|Metadata
operator|.
name|LAST_MODIFIED
argument_list|,
name|modified
argument_list|)
expr_stmt|;
name|addMetadata
argument_list|(
name|metadata
argument_list|,
name|TikaCoreProperties
operator|.
name|MODIFIED
argument_list|,
name|modified
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// Invalid date format, just ignore
block|}
comment|// All remaining metadata is custom
comment|// Copy this over as-is
name|List
argument_list|<
name|String
argument_list|>
name|handledMetadata
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|"Author"
argument_list|,
literal|"Creator"
argument_list|,
literal|"CreationDate"
argument_list|,
literal|"ModDate"
argument_list|,
literal|"Keywords"
argument_list|,
literal|"Producer"
argument_list|,
literal|"Subject"
argument_list|,
literal|"Title"
argument_list|,
literal|"Trapped"
argument_list|)
decl_stmt|;
for|for
control|(
name|COSName
name|key
range|:
name|info
operator|.
name|getDictionary
argument_list|()
operator|.
name|keySet
argument_list|()
control|)
block|{
name|String
name|name
init|=
name|key
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|handledMetadata
operator|.
name|contains
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|addMetadata
argument_list|(
name|metadata
argument_list|,
name|name
argument_list|,
name|info
operator|.
name|getDictionary
argument_list|()
operator|.
name|getDictionaryObject
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|//try to get the various versions
comment|//Caveats:
comment|//    there is currently a fair amount of redundancy
comment|//    TikaCoreProperties.FORMAT can be multivalued
comment|//    There are also three potential pdf specific version keys: pdf:PDFVersion, pdfa:PDFVersion, pdf:PDFExtensionVersion
name|metadata
operator|.
name|set
argument_list|(
literal|"pdf:PDFVersion"
argument_list|,
name|Float
operator|.
name|toString
argument_list|(
name|document
operator|.
name|getDocument
argument_list|()
operator|.
name|getVersion
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|metadata
operator|.
name|add
argument_list|(
name|TikaCoreProperties
operator|.
name|FORMAT
operator|.
name|getName
argument_list|()
argument_list|,
name|MEDIA_TYPE
operator|.
name|toString
argument_list|()
operator|+
literal|"; version="
operator|+
name|Float
operator|.
name|toString
argument_list|(
name|document
operator|.
name|getDocument
argument_list|()
operator|.
name|getVersion
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
if|if
condition|(
name|xmp
operator|!=
literal|null
condition|)
block|{
name|xmp
operator|.
name|addXMLNSMapping
argument_list|(
name|XMPSchemaPDFAId
operator|.
name|NAMESPACE
argument_list|,
name|XMPSchemaPDFAId
operator|.
name|class
argument_list|)
expr_stmt|;
name|XMPSchemaPDFAId
name|pdfaxmp
init|=
operator|(
name|XMPSchemaPDFAId
operator|)
name|xmp
operator|.
name|getSchemaByClass
argument_list|(
name|XMPSchemaPDFAId
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|pdfaxmp
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|pdfaxmp
operator|.
name|getPart
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|metadata
operator|.
name|set
argument_list|(
literal|"pdfaid:part"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|pdfaxmp
operator|.
name|getPart
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|pdfaxmp
operator|.
name|getConformance
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|metadata
operator|.
name|set
argument_list|(
literal|"pdfaid:conformance"
argument_list|,
name|pdfaxmp
operator|.
name|getConformance
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|version
init|=
literal|"A-"
operator|+
name|pdfaxmp
operator|.
name|getPart
argument_list|()
operator|+
name|pdfaxmp
operator|.
name|getConformance
argument_list|()
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|)
decl_stmt|;
name|metadata
operator|.
name|set
argument_list|(
literal|"pdfa:PDFVersion"
argument_list|,
name|version
argument_list|)
expr_stmt|;
name|metadata
operator|.
name|add
argument_list|(
name|TikaCoreProperties
operator|.
name|FORMAT
operator|.
name|getName
argument_list|()
argument_list|,
name|MEDIA_TYPE
operator|.
name|toString
argument_list|()
operator|+
literal|"; version=\""
operator|+
name|version
operator|+
literal|"\""
argument_list|)
expr_stmt|;
block|}
block|}
comment|// TODO WARN if this XMP version is inconsistent with document header version?
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|metadata
operator|.
name|set
argument_list|(
name|TikaCoreProperties
operator|.
name|TIKA_META_PREFIX
operator|+
literal|"pdf:metadata-xmp-parse-failed"
argument_list|,
literal|""
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
comment|//TODO: Let's try to move this into PDFBox.
comment|//Attempt to determine Adobe extension level, if present:
name|COSDictionary
name|root
init|=
name|document
operator|.
name|getDocumentCatalog
argument_list|()
operator|.
name|getCOSDictionary
argument_list|()
decl_stmt|;
name|COSDictionary
name|extensions
init|=
operator|(
name|COSDictionary
operator|)
name|root
operator|.
name|getDictionaryObject
argument_list|(
name|COSName
operator|.
name|getPDFName
argument_list|(
literal|"Extensions"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|extensions
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|COSName
name|extName
range|:
name|extensions
operator|.
name|keySet
argument_list|()
control|)
block|{
comment|// If it's an Adobe one, interpret it to determine the extension level:
if|if
condition|(
name|extName
operator|.
name|equals
argument_list|(
name|COSName
operator|.
name|getPDFName
argument_list|(
literal|"ADBE"
argument_list|)
argument_list|)
condition|)
block|{
name|COSDictionary
name|adobeExt
init|=
operator|(
name|COSDictionary
operator|)
name|extensions
operator|.
name|getDictionaryObject
argument_list|(
name|extName
argument_list|)
decl_stmt|;
if|if
condition|(
name|adobeExt
operator|!=
literal|null
condition|)
block|{
name|String
name|baseVersion
init|=
name|adobeExt
operator|.
name|getNameAsString
argument_list|(
name|COSName
operator|.
name|getPDFName
argument_list|(
literal|"BaseVersion"
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|el
init|=
name|adobeExt
operator|.
name|getInt
argument_list|(
name|COSName
operator|.
name|getPDFName
argument_list|(
literal|"ExtensionLevel"
argument_list|)
argument_list|)
decl_stmt|;
comment|//-1 is sentinel value that something went wrong in getInt
if|if
condition|(
name|el
operator|!=
operator|-
literal|1
condition|)
block|{
name|metadata
operator|.
name|set
argument_list|(
literal|"pdf:PDFExtensionVersion"
argument_list|,
name|baseVersion
operator|+
literal|" Adobe Extension Level "
operator|+
name|el
argument_list|)
expr_stmt|;
name|metadata
operator|.
name|add
argument_list|(
name|TikaCoreProperties
operator|.
name|FORMAT
operator|.
name|getName
argument_list|()
argument_list|,
name|MEDIA_TYPE
operator|.
name|toString
argument_list|()
operator|+
literal|"; version=\""
operator|+
name|baseVersion
operator|+
literal|" Adobe Extension Level "
operator|+
name|el
operator|+
literal|"\""
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
comment|// WARN that there is an Extension, but it's not Adobe's, and so is a 'new' format'.
name|metadata
operator|.
name|set
argument_list|(
literal|"pdf:foundNonAdobeExtensionName"
argument_list|,
name|extName
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/**      * Try to extract all multilingual items from the XMPSchema      *<p/>      * This relies on the property having a valid xmp getName()      *<p/>      * For now, this only extracts the first language if the property does not allow multiple values (see TIKA-1295)      *      * @param metadata      * @param property      * @param pdfBoxBaseline      * @param schema      */
specifier|private
name|void
name|extractMultilingualItems
parameter_list|(
name|Metadata
name|metadata
parameter_list|,
name|Property
name|property
parameter_list|,
name|String
name|pdfBoxBaseline
parameter_list|,
name|XMPSchema
name|schema
parameter_list|)
block|{
comment|//if schema is null, just go with pdfBoxBaseline
if|if
condition|(
name|schema
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|pdfBoxBaseline
operator|!=
literal|null
operator|&&
name|pdfBoxBaseline
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|addMetadata
argument_list|(
name|metadata
argument_list|,
name|property
argument_list|,
name|pdfBoxBaseline
argument_list|)
expr_stmt|;
block|}
return|return;
block|}
for|for
control|(
name|String
name|lang
range|:
name|schema
operator|.
name|getLanguagePropertyLanguages
argument_list|(
name|property
operator|.
name|getName
argument_list|()
argument_list|)
control|)
block|{
name|String
name|value
init|=
name|schema
operator|.
name|getLanguageProperty
argument_list|(
name|property
operator|.
name|getName
argument_list|()
argument_list|,
name|lang
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
operator|&&
name|value
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
comment|//if you're going to add it below in the baseline addition, don't add it now
if|if
condition|(
name|pdfBoxBaseline
operator|!=
literal|null
operator|&&
name|value
operator|.
name|equals
argument_list|(
name|pdfBoxBaseline
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|addMetadata
argument_list|(
name|metadata
argument_list|,
name|property
argument_list|,
name|value
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|property
operator|.
name|isMultiValuePermitted
argument_list|()
condition|)
block|{
return|return;
block|}
block|}
block|}
if|if
condition|(
name|pdfBoxBaseline
operator|!=
literal|null
operator|&&
name|pdfBoxBaseline
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
comment|//if we've already added something above and multivalue is not permitted
comment|//return.
if|if
condition|(
operator|!
name|property
operator|.
name|isMultiValuePermitted
argument_list|()
condition|)
block|{
if|if
condition|(
name|metadata
operator|.
name|get
argument_list|(
name|property
argument_list|)
operator|!=
literal|null
condition|)
block|{
return|return;
block|}
block|}
name|addMetadata
argument_list|(
name|metadata
argument_list|,
name|property
argument_list|,
name|pdfBoxBaseline
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * This tries to read a list from a particular property in      * XMPSchemaDublinCore.      * If it can't find the information, it falls back to the      * pdfboxBaseline.  The pdfboxBaseline should be the value      * that pdfbox returns from its PDDocumentInformation object      * (e.g. getAuthor()) This method is designed include the pdfboxBaseline,      * and it should not duplicate the pdfboxBaseline.      *<p/>      * Until PDFBOX-1803/TIKA-1233 are fixed, do not call this      * on dates!      *<p/>      * This relies on the property having a DublinCore compliant getName()      *      * @param property      * @param pdfBoxBaseline      * @param dc      * @param metadata      */
specifier|private
name|void
name|extractDublinCoreListItems
parameter_list|(
name|Metadata
name|metadata
parameter_list|,
name|Property
name|property
parameter_list|,
name|String
name|pdfBoxBaseline
parameter_list|,
name|XMPSchemaDublinCore
name|dc
parameter_list|)
block|{
comment|//if no dc, add baseline and return
if|if
condition|(
name|dc
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|pdfBoxBaseline
operator|!=
literal|null
operator|&&
name|pdfBoxBaseline
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|addMetadata
argument_list|(
name|metadata
argument_list|,
name|property
argument_list|,
name|pdfBoxBaseline
argument_list|)
expr_stmt|;
block|}
return|return;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|items
init|=
name|getXMPBagOrSeqList
argument_list|(
name|dc
argument_list|,
name|property
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|items
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|pdfBoxBaseline
operator|!=
literal|null
operator|&&
name|pdfBoxBaseline
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|addMetadata
argument_list|(
name|metadata
argument_list|,
name|property
argument_list|,
name|pdfBoxBaseline
argument_list|)
expr_stmt|;
block|}
return|return;
block|}
for|for
control|(
name|String
name|item
range|:
name|items
control|)
block|{
if|if
condition|(
name|pdfBoxBaseline
operator|!=
literal|null
operator|&&
operator|!
name|item
operator|.
name|equals
argument_list|(
name|pdfBoxBaseline
argument_list|)
condition|)
block|{
name|addMetadata
argument_list|(
name|metadata
argument_list|,
name|property
argument_list|,
name|item
argument_list|)
expr_stmt|;
block|}
block|}
comment|//finally, add the baseline
if|if
condition|(
name|pdfBoxBaseline
operator|!=
literal|null
operator|&&
name|pdfBoxBaseline
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|addMetadata
argument_list|(
name|metadata
argument_list|,
name|property
argument_list|,
name|pdfBoxBaseline
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * As of this writing, XMPSchema can contain bags or sequence lists      * for some attributes...despite standards documentation.      * JempBox expects one or the other for specific attributes.      * Until more flexibility is added to JempBox, Tika will have to handle both.      *      * @param schema      * @param name      * @return list of values or null      */
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|getXMPBagOrSeqList
parameter_list|(
name|XMPSchema
name|schema
parameter_list|,
name|String
name|name
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|ret
init|=
name|schema
operator|.
name|getBagList
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|ret
operator|==
literal|null
condition|)
block|{
name|ret
operator|=
name|schema
operator|.
name|getSequenceList
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
specifier|private
name|void
name|addMetadata
parameter_list|(
name|Metadata
name|metadata
parameter_list|,
name|Property
name|property
parameter_list|,
name|String
name|value
parameter_list|)
block|{
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
name|String
name|decoded
init|=
name|decode
argument_list|(
name|value
argument_list|)
decl_stmt|;
if|if
condition|(
name|property
operator|.
name|isMultiValuePermitted
argument_list|()
operator|||
name|metadata
operator|.
name|get
argument_list|(
name|property
argument_list|)
operator|==
literal|null
condition|)
block|{
name|metadata
operator|.
name|add
argument_list|(
name|property
argument_list|,
name|decoded
argument_list|)
expr_stmt|;
block|}
comment|//silently skip adding property that already exists if multiple values are not permitted
block|}
block|}
specifier|private
name|void
name|addMetadata
parameter_list|(
name|Metadata
name|metadata
parameter_list|,
name|String
name|name
parameter_list|,
name|String
name|value
parameter_list|)
block|{
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
name|metadata
operator|.
name|add
argument_list|(
name|name
argument_list|,
name|decode
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|String
name|decode
parameter_list|(
name|String
name|value
parameter_list|)
block|{
if|if
condition|(
name|PDFEncodedStringDecoder
operator|.
name|shouldDecode
argument_list|(
name|value
argument_list|)
condition|)
block|{
name|PDFEncodedStringDecoder
name|d
init|=
operator|new
name|PDFEncodedStringDecoder
argument_list|()
decl_stmt|;
return|return
name|d
operator|.
name|decode
argument_list|(
name|value
argument_list|)
return|;
block|}
return|return
name|value
return|;
block|}
specifier|private
name|void
name|addMetadata
parameter_list|(
name|Metadata
name|metadata
parameter_list|,
name|String
name|name
parameter_list|,
name|Calendar
name|value
parameter_list|)
block|{
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
name|metadata
operator|.
name|set
argument_list|(
name|name
argument_list|,
name|value
operator|.
name|getTime
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|addMetadata
parameter_list|(
name|Metadata
name|metadata
parameter_list|,
name|Property
name|property
parameter_list|,
name|Calendar
name|value
parameter_list|)
block|{
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
name|metadata
operator|.
name|set
argument_list|(
name|property
argument_list|,
name|value
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Used when processing custom metadata entries, as PDFBox won't do      * the conversion for us in the way it does for the standard ones      */
specifier|private
name|void
name|addMetadata
parameter_list|(
name|Metadata
name|metadata
parameter_list|,
name|String
name|name
parameter_list|,
name|COSBase
name|value
parameter_list|)
block|{
if|if
condition|(
name|value
operator|instanceof
name|COSArray
condition|)
block|{
for|for
control|(
name|Object
name|v
range|:
operator|(
operator|(
name|COSArray
operator|)
name|value
operator|)
operator|.
name|toList
argument_list|()
control|)
block|{
name|addMetadata
argument_list|(
name|metadata
argument_list|,
name|name
argument_list|,
operator|(
operator|(
name|COSBase
operator|)
name|v
operator|)
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|value
operator|instanceof
name|COSString
condition|)
block|{
name|addMetadata
argument_list|(
name|metadata
argument_list|,
name|name
argument_list|,
operator|(
operator|(
name|COSString
operator|)
name|value
operator|)
operator|.
name|getString
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Avoid calling COSDictionary#toString, since it can lead to infinite
comment|// recursion. See TIKA-1038 and PDFBOX-1835.
elseif|else
if|if
condition|(
name|value
operator|!=
literal|null
operator|&&
operator|!
operator|(
name|value
operator|instanceof
name|COSDictionary
operator|)
condition|)
block|{
name|addMetadata
argument_list|(
name|metadata
argument_list|,
name|name
argument_list|,
name|value
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|PDFParserConfig
name|getPDFParserConfig
parameter_list|()
block|{
return|return
name|defaultConfig
return|;
block|}
specifier|public
name|void
name|setPDFParserConfig
parameter_list|(
name|PDFParserConfig
name|config
parameter_list|)
block|{
name|this
operator|.
name|defaultConfig
operator|=
name|config
expr_stmt|;
block|}
comment|/**      * @see #setUseNonSequentialParser(boolean)      * @deprecated use {@link #getPDFParserConfig()}      */
specifier|public
name|boolean
name|getUseNonSequentialParser
parameter_list|()
block|{
return|return
name|defaultConfig
operator|.
name|getUseNonSequentialParser
argument_list|()
return|;
block|}
comment|/**      * If true, the parser will use the NonSequentialParser.  This may      * be faster than the full doc parser.      * If false (default), this will use the full doc parser.      *      * @deprecated use {@link #setPDFParserConfig(PDFParserConfig)}      */
specifier|public
name|void
name|setUseNonSequentialParser
parameter_list|(
name|boolean
name|v
parameter_list|)
block|{
name|defaultConfig
operator|.
name|setUseNonSequentialParser
argument_list|(
name|v
argument_list|)
expr_stmt|;
block|}
comment|/**      * @see #setEnableAutoSpace(boolean)      * @deprecated use {@link #getPDFParserConfig()}      */
specifier|public
name|boolean
name|getEnableAutoSpace
parameter_list|()
block|{
return|return
name|defaultConfig
operator|.
name|getEnableAutoSpace
argument_list|()
return|;
block|}
comment|/**      * If true (the default), the parser should estimate      * where spaces should be inserted between words.  For      * many PDFs this is necessary as they do not include      * explicit whitespace characters.      *      * @deprecated use {@link #setPDFParserConfig(PDFParserConfig)}      */
specifier|public
name|void
name|setEnableAutoSpace
parameter_list|(
name|boolean
name|v
parameter_list|)
block|{
name|defaultConfig
operator|.
name|setEnableAutoSpace
argument_list|(
name|v
argument_list|)
expr_stmt|;
block|}
comment|/**      * If true, text in annotations will be extracted.      *      * @deprecated use {@link #getPDFParserConfig()}      */
specifier|public
name|boolean
name|getExtractAnnotationText
parameter_list|()
block|{
return|return
name|defaultConfig
operator|.
name|getExtractAnnotationText
argument_list|()
return|;
block|}
comment|/**      * If true (the default), text in annotations will be      * extracted.      *      * @deprecated use {@link #setPDFParserConfig(PDFParserConfig)}      */
specifier|public
name|void
name|setExtractAnnotationText
parameter_list|(
name|boolean
name|v
parameter_list|)
block|{
name|defaultConfig
operator|.
name|setExtractAnnotationText
argument_list|(
name|v
argument_list|)
expr_stmt|;
block|}
comment|/**      * @see #setSuppressDuplicateOverlappingText(boolean)      * @deprecated use {@link #getPDFParserConfig()}      */
specifier|public
name|boolean
name|getSuppressDuplicateOverlappingText
parameter_list|()
block|{
return|return
name|defaultConfig
operator|.
name|getSuppressDuplicateOverlappingText
argument_list|()
return|;
block|}
comment|/**      * If true, the parser should try to remove duplicated      * text over the same region.  This is needed for some      * PDFs that achieve bolding by re-writing the same      * text in the same area.  Note that this can      * slow down extraction substantially (PDFBOX-956) and      * sometimes remove characters that were not in fact      * duplicated (PDFBOX-1155).  By default this is disabled.      *      * @deprecated use {@link #setPDFParserConfig(PDFParserConfig)}      */
specifier|public
name|void
name|setSuppressDuplicateOverlappingText
parameter_list|(
name|boolean
name|v
parameter_list|)
block|{
name|defaultConfig
operator|.
name|setSuppressDuplicateOverlappingText
argument_list|(
name|v
argument_list|)
expr_stmt|;
block|}
comment|/**      * @see #setSortByPosition(boolean)      * @deprecated use {@link #getPDFParserConfig()}      */
specifier|public
name|boolean
name|getSortByPosition
parameter_list|()
block|{
return|return
name|defaultConfig
operator|.
name|getSortByPosition
argument_list|()
return|;
block|}
comment|/**      * If true, sort text tokens by their x/y position      * before extracting text.  This may be necessary for      * some PDFs (if the text tokens are not rendered "in      * order"), while for other PDFs it can produce the      * wrong result (for example if there are 2 columns,      * the text will be interleaved).  Default is false.      *      * @deprecated use {@link #setPDFParserConfig(PDFParserConfig)}      */
specifier|public
name|void
name|setSortByPosition
parameter_list|(
name|boolean
name|v
parameter_list|)
block|{
name|defaultConfig
operator|.
name|setSortByPosition
argument_list|(
name|v
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

