begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|pdf
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Calendar
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|exception
operator|.
name|TikaException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|metadata
operator|.
name|Metadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|Parser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|PDDocument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|PDDocumentInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|ContentHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_comment
comment|/**  * PDF parser.  *<p>  * This parser can process also encrypted PDF documents if the required  * password is given as a part of the input metadata associated with a  * document. If no password is given, then this parser will try decrypting  * the document using the empty password that's often used with PDFs.  */
end_comment

begin_class
specifier|public
class|class
name|PDFParser
implements|implements
name|Parser
block|{
comment|/**      * Metadata key for giving the document password to the parser.      *      * @since Apache Tika 0.5      */
specifier|public
specifier|static
specifier|final
name|String
name|PASSWORD
init|=
literal|"org.apache.tika.parser.pdf.password"
decl_stmt|;
specifier|public
name|void
name|parse
parameter_list|(
name|InputStream
name|stream
parameter_list|,
name|ContentHandler
name|handler
parameter_list|,
name|Metadata
name|metadata
parameter_list|)
throws|throws
name|IOException
throws|,
name|SAXException
throws|,
name|TikaException
block|{
name|PDDocument
name|pdfDocument
init|=
name|PDDocument
operator|.
name|load
argument_list|(
name|stream
argument_list|)
decl_stmt|;
try|try
block|{
if|if
condition|(
name|pdfDocument
operator|.
name|isEncrypted
argument_list|()
operator|&&
operator|!
name|pdfDocument
operator|.
name|getCurrentAccessPermission
argument_list|()
operator|.
name|canExtractContent
argument_list|()
condition|)
block|{
try|try
block|{
name|String
name|password
init|=
name|metadata
operator|.
name|get
argument_list|(
name|PASSWORD
argument_list|)
decl_stmt|;
if|if
condition|(
name|password
operator|==
literal|null
condition|)
block|{
name|password
operator|=
literal|""
expr_stmt|;
block|}
name|pdfDocument
operator|.
name|decrypt
argument_list|(
name|password
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// Ignore
block|}
block|}
name|metadata
operator|.
name|set
argument_list|(
name|Metadata
operator|.
name|CONTENT_TYPE
argument_list|,
literal|"application/pdf"
argument_list|)
expr_stmt|;
name|extractMetadata
argument_list|(
name|pdfDocument
argument_list|,
name|metadata
argument_list|)
expr_stmt|;
name|PDF2XHTML
operator|.
name|process
argument_list|(
name|pdfDocument
argument_list|,
name|handler
argument_list|,
name|metadata
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|pdfDocument
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|extractMetadata
parameter_list|(
name|PDDocument
name|document
parameter_list|,
name|Metadata
name|metadata
parameter_list|)
throws|throws
name|TikaException
block|{
name|PDDocumentInformation
name|info
init|=
name|document
operator|.
name|getDocumentInformation
argument_list|()
decl_stmt|;
name|addMetadata
argument_list|(
name|metadata
argument_list|,
name|Metadata
operator|.
name|TITLE
argument_list|,
name|info
operator|.
name|getTitle
argument_list|()
argument_list|)
expr_stmt|;
name|addMetadata
argument_list|(
name|metadata
argument_list|,
name|Metadata
operator|.
name|AUTHOR
argument_list|,
name|info
operator|.
name|getAuthor
argument_list|()
argument_list|)
expr_stmt|;
name|addMetadata
argument_list|(
name|metadata
argument_list|,
name|Metadata
operator|.
name|CREATOR
argument_list|,
name|info
operator|.
name|getCreator
argument_list|()
argument_list|)
expr_stmt|;
name|addMetadata
argument_list|(
name|metadata
argument_list|,
name|Metadata
operator|.
name|KEYWORDS
argument_list|,
name|info
operator|.
name|getKeywords
argument_list|()
argument_list|)
expr_stmt|;
name|addMetadata
argument_list|(
name|metadata
argument_list|,
literal|"producer"
argument_list|,
name|info
operator|.
name|getProducer
argument_list|()
argument_list|)
expr_stmt|;
name|addMetadata
argument_list|(
name|metadata
argument_list|,
name|Metadata
operator|.
name|SUBJECT
argument_list|,
name|info
operator|.
name|getSubject
argument_list|()
argument_list|)
expr_stmt|;
name|addMetadata
argument_list|(
name|metadata
argument_list|,
literal|"trapped"
argument_list|,
name|info
operator|.
name|getTrapped
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|addMetadata
argument_list|(
name|metadata
argument_list|,
literal|"created"
argument_list|,
name|info
operator|.
name|getCreationDate
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// Invalid date format, just ignore
block|}
try|try
block|{
name|Calendar
name|modified
init|=
name|info
operator|.
name|getModificationDate
argument_list|()
decl_stmt|;
name|addMetadata
argument_list|(
name|metadata
argument_list|,
name|Metadata
operator|.
name|LAST_MODIFIED
argument_list|,
name|modified
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// Invalid date format, just ignore
block|}
block|}
specifier|private
name|void
name|addMetadata
parameter_list|(
name|Metadata
name|metadata
parameter_list|,
name|String
name|name
parameter_list|,
name|String
name|value
parameter_list|)
block|{
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
name|metadata
operator|.
name|add
argument_list|(
name|name
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|addMetadata
parameter_list|(
name|Metadata
name|metadata
parameter_list|,
name|String
name|name
parameter_list|,
name|Calendar
name|value
parameter_list|)
block|{
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
name|metadata
operator|.
name|set
argument_list|(
name|name
argument_list|,
name|value
operator|.
name|getTime
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

