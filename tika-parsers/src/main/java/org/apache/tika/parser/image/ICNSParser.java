begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright 2016 The Apache Software Foundation.  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|image
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|util
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|exception
operator|.
name|TikaException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|metadata
operator|.
name|Metadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|mime
operator|.
name|MediaType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|ParseContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|AbstractParser
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|image
operator|.
name|ICNSType
operator|.
name|findIconType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|sax
operator|.
name|XHTMLContentHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|ContentHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_comment
comment|/**  *  * @author Manisha Kampasi  */
end_comment

begin_comment
comment|//Create a basic parser class to parse ICNS files
end_comment

begin_class
specifier|public
class|class
name|ICNSParser
extends|extends
name|AbstractParser
block|{
comment|//private static final long serialVersionUID = 261736541253892772L;
specifier|private
specifier|static
specifier|final
name|Set
argument_list|<
name|MediaType
argument_list|>
name|SUPPORTED_TYPES
init|=
name|Collections
operator|.
name|singleton
argument_list|(
name|MediaType
operator|.
name|image
argument_list|(
literal|"icns"
argument_list|)
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|ICNS_MIME_TYPE
init|=
literal|"image/icns"
decl_stmt|;
specifier|public
name|Set
argument_list|<
name|MediaType
argument_list|>
name|getSupportedTypes
parameter_list|(
name|ParseContext
name|context
parameter_list|)
block|{
return|return
name|SUPPORTED_TYPES
return|;
block|}
specifier|public
name|void
name|parse
parameter_list|(
name|InputStream
name|stream
parameter_list|,
name|ContentHandler
name|handler
parameter_list|,
name|Metadata
name|metadata
parameter_list|,
name|ParseContext
name|context
parameter_list|)
throws|throws
name|IOException
throws|,
name|SAXException
throws|,
name|TikaException
block|{
name|byte
index|[]
name|header
init|=
operator|new
name|byte
index|[
literal|4
index|]
decl_stmt|;
name|IOUtils
operator|.
name|readFully
argument_list|(
name|stream
argument_list|,
name|header
argument_list|,
literal|0
argument_list|,
literal|4
argument_list|)
expr_stmt|;
comment|// Extract magic byte
if|if
condition|(
name|header
index|[
literal|0
index|]
operator|==
operator|(
name|byte
operator|)
literal|'i'
operator|&&
name|header
index|[
literal|1
index|]
operator|==
operator|(
name|byte
operator|)
literal|'c'
operator|&&
name|header
index|[
literal|2
index|]
operator|==
operator|(
name|byte
operator|)
literal|'n'
operator|&&
name|header
index|[
literal|3
index|]
operator|==
operator|(
name|byte
operator|)
literal|'s'
condition|)
block|{
comment|// Good, signature found
block|}
else|else
block|{
throw|throw
operator|new
name|TikaException
argument_list|(
literal|"ICNS magic signature invalid"
argument_list|)
throw|;
block|}
name|IOUtils
operator|.
name|readFully
argument_list|(
name|stream
argument_list|,
name|header
argument_list|,
literal|0
argument_list|,
literal|4
argument_list|)
expr_stmt|;
comment|//Extract image size/length of bytes in file
name|int
name|image_length
init|=
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|header
argument_list|)
operator|.
name|getInt
argument_list|()
decl_stmt|;
name|byte
index|[]
name|full_file
init|=
operator|new
name|byte
index|[
name|image_length
index|]
decl_stmt|;
name|IOUtils
operator|.
name|readFully
argument_list|(
name|stream
argument_list|,
name|full_file
argument_list|)
expr_stmt|;
name|ArrayList
argument_list|<
name|ICNSType
argument_list|>
name|icons
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|ArrayList
argument_list|<
name|ICNSType
argument_list|>
name|icon_masks
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|byte
index|[]
name|tempByteArray
init|=
operator|new
name|byte
index|[
literal|4
index|]
decl_stmt|;
for|for
control|(
name|int
name|offset
init|=
literal|0
init|;
name|offset
operator|<
name|image_length
operator|-
literal|8
condition|;
control|)
block|{
comment|//Read the ResType/OSTYpe identifier for sub-icon
name|tempByteArray
index|[
literal|0
index|]
operator|=
name|full_file
index|[
name|offset
index|]
expr_stmt|;
name|tempByteArray
index|[
literal|1
index|]
operator|=
name|full_file
index|[
name|offset
operator|+
literal|1
index|]
expr_stmt|;
name|tempByteArray
index|[
literal|2
index|]
operator|=
name|full_file
index|[
name|offset
operator|+
literal|2
index|]
expr_stmt|;
name|tempByteArray
index|[
literal|3
index|]
operator|=
name|full_file
index|[
name|offset
operator|+
literal|3
index|]
expr_stmt|;
name|ICNSType
name|icnstype
init|=
name|findIconType
argument_list|(
name|tempByteArray
argument_list|)
decl_stmt|;
if|if
condition|(
name|icnstype
operator|==
literal|null
condition|)
block|{
comment|//exit out of loop
comment|//No more icons left
name|offset
operator|=
name|image_length
operator|-
literal|8
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|icnstype
operator|.
name|hasMask
argument_list|()
operator|==
literal|true
condition|)
block|{
name|icon_masks
operator|.
name|add
argument_list|(
name|findIconType
argument_list|(
name|tempByteArray
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|icons
operator|.
name|add
argument_list|(
name|findIconType
argument_list|(
name|tempByteArray
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|//Read the sub-icon length
name|tempByteArray
index|[
literal|0
index|]
operator|=
name|full_file
index|[
name|offset
operator|+
literal|4
index|]
expr_stmt|;
name|tempByteArray
index|[
literal|1
index|]
operator|=
name|full_file
index|[
name|offset
operator|+
literal|5
index|]
expr_stmt|;
name|tempByteArray
index|[
literal|2
index|]
operator|=
name|full_file
index|[
name|offset
operator|+
literal|6
index|]
expr_stmt|;
name|tempByteArray
index|[
literal|3
index|]
operator|=
name|full_file
index|[
name|offset
operator|+
literal|7
index|]
expr_stmt|;
name|int
name|icon_length
init|=
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|tempByteArray
argument_list|)
operator|.
name|getInt
argument_list|()
decl_stmt|;
name|offset
operator|=
name|offset
operator|+
name|icon_length
expr_stmt|;
block|}
name|String
name|icon_details
init|=
literal|""
decl_stmt|,
name|iconmask_details
init|=
literal|""
decl_stmt|,
name|bitsPerPixel
decl_stmt|,
name|dimensions
decl_stmt|;
for|for
control|(
name|ICNSType
name|icon
range|:
name|icons
control|)
block|{
name|bitsPerPixel
operator|=
operator|(
name|icon
operator|.
name|getBitsPerPixel
argument_list|()
operator|!=
literal|0
operator|)
condition|?
name|icon
operator|.
name|getBitsPerPixel
argument_list|()
operator|+
literal|" bpp"
else|:
literal|"JPEG 2000 or PNG format"
expr_stmt|;
name|dimensions
operator|=
operator|(
operator|!
name|icon
operator|.
name|hasRetinaDisplay
argument_list|()
operator|)
condition|?
operator|(
name|icon
operator|.
name|getHeight
argument_list|()
operator|+
literal|"x"
operator|+
name|icon
operator|.
name|getWidth
argument_list|()
operator|)
else|:
operator|(
name|icon
operator|.
name|getHeight
argument_list|()
operator|+
literal|"x"
operator|+
name|icon
operator|.
name|getWidth
argument_list|()
operator|+
literal|"@2X"
operator|)
expr_stmt|;
name|icon_details
operator|=
name|icon_details
operator|+
literal|", "
operator|+
name|dimensions
operator|+
literal|" ("
operator|+
name|bitsPerPixel
operator|+
literal|")"
expr_stmt|;
block|}
for|for
control|(
name|ICNSType
name|icon
range|:
name|icon_masks
control|)
block|{
name|iconmask_details
operator|=
name|iconmask_details
operator|+
literal|", "
operator|+
name|icon
operator|.
name|getHeight
argument_list|()
operator|+
literal|"x"
operator|+
name|icon
operator|.
name|getWidth
argument_list|()
operator|+
literal|" ("
operator|+
name|icon
operator|.
name|getBitsPerPixel
argument_list|()
operator|+
literal|" bpp"
operator|+
literal|")"
expr_stmt|;
block|}
name|metadata
operator|.
name|set
argument_list|(
name|Metadata
operator|.
name|CONTENT_TYPE
argument_list|,
name|ICNS_MIME_TYPE
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|icon_details
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|)
block|{
name|metadata
operator|.
name|set
argument_list|(
literal|"Icon count"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|icons
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|icon_details
operator|=
name|icon_details
operator|.
name|substring
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|metadata
operator|.
name|set
argument_list|(
literal|"Icon details"
argument_list|,
name|icon_details
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|iconmask_details
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|)
block|{
name|metadata
operator|.
name|set
argument_list|(
literal|"Masked icon count"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|icon_masks
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|iconmask_details
operator|=
name|iconmask_details
operator|.
name|substring
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|metadata
operator|.
name|set
argument_list|(
literal|"Masked icon details"
argument_list|,
name|iconmask_details
argument_list|)
expr_stmt|;
block|}
name|XHTMLContentHandler
name|xhtml
init|=
operator|new
name|XHTMLContentHandler
argument_list|(
name|handler
argument_list|,
name|metadata
argument_list|)
decl_stmt|;
name|xhtml
operator|.
name|startDocument
argument_list|()
expr_stmt|;
name|xhtml
operator|.
name|endDocument
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

