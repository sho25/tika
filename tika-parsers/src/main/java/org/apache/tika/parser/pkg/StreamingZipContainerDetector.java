begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|pkg
package|;
end_package

begin_import
import|import static
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
operator|.
name|UTF_8
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|compress
operator|.
name|archivers
operator|.
name|zip
operator|.
name|ZipArchiveEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|compress
operator|.
name|archivers
operator|.
name|zip
operator|.
name|ZipArchiveInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|xdgf
operator|.
name|usermodel
operator|.
name|XDGFRelation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|xslf
operator|.
name|usermodel
operator|.
name|XSLFRelation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|xssf
operator|.
name|usermodel
operator|.
name|XSSFRelation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|xwpf
operator|.
name|usermodel
operator|.
name|XWPFRelation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|detect
operator|.
name|Detector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|io
operator|.
name|CloseShieldInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|metadata
operator|.
name|Metadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|mime
operator|.
name|MediaType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|ParseContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|iwork
operator|.
name|IWorkPackageParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|utils
operator|.
name|XMLReaderUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|Attributes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|helpers
operator|.
name|DefaultHandler
import|;
end_import

begin_class
specifier|public
class|class
name|StreamingZipContainerDetector
extends|extends
name|ZipContainerDetectorBase
implements|implements
name|Detector
block|{
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|MediaType
argument_list|>
name|OOXML_CONTENT_TYPES
init|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
decl_stmt|;
static|static
block|{
name|OOXML_CONTENT_TYPES
operator|.
name|put
argument_list|(
name|XWPFRelation
operator|.
name|DOCUMENT
operator|.
name|getContentType
argument_list|()
argument_list|,
name|DOCX
argument_list|)
expr_stmt|;
name|OOXML_CONTENT_TYPES
operator|.
name|put
argument_list|(
name|XWPFRelation
operator|.
name|MACRO_DOCUMENT
operator|.
name|getContentType
argument_list|()
argument_list|,
name|DOCM
argument_list|)
expr_stmt|;
name|OOXML_CONTENT_TYPES
operator|.
name|put
argument_list|(
name|XWPFRelation
operator|.
name|MACRO_TEMPLATE_DOCUMENT
operator|.
name|getContentType
argument_list|()
argument_list|,
name|DOTM
argument_list|)
expr_stmt|;
name|OOXML_CONTENT_TYPES
operator|.
name|put
argument_list|(
name|XWPFRelation
operator|.
name|TEMPLATE
operator|.
name|getContentType
argument_list|()
argument_list|,
name|DOTX
argument_list|)
expr_stmt|;
name|OOXML_CONTENT_TYPES
operator|.
name|put
argument_list|(
name|XSSFRelation
operator|.
name|WORKBOOK
operator|.
name|getContentType
argument_list|()
argument_list|,
name|XLSX
argument_list|)
expr_stmt|;
name|OOXML_CONTENT_TYPES
operator|.
name|put
argument_list|(
name|XSSFRelation
operator|.
name|MACROS_WORKBOOK
operator|.
name|getContentType
argument_list|()
argument_list|,
name|XLSM
argument_list|)
expr_stmt|;
name|OOXML_CONTENT_TYPES
operator|.
name|put
argument_list|(
name|XSSFRelation
operator|.
name|XLSB_BINARY_WORKBOOK
operator|.
name|getContentType
argument_list|()
argument_list|,
name|XLSB
argument_list|)
expr_stmt|;
name|OOXML_CONTENT_TYPES
operator|.
name|put
argument_list|(
name|XSSFRelation
operator|.
name|TEMPLATE_WORKBOOK
operator|.
name|getContentType
argument_list|()
argument_list|,
name|XLTX
argument_list|)
expr_stmt|;
name|OOXML_CONTENT_TYPES
operator|.
name|put
argument_list|(
name|XSSFRelation
operator|.
name|MACRO_TEMPLATE_WORKBOOK
operator|.
name|getContentType
argument_list|()
argument_list|,
name|XLTM
argument_list|)
expr_stmt|;
name|OOXML_CONTENT_TYPES
operator|.
name|put
argument_list|(
name|XSLFRelation
operator|.
name|MAIN
operator|.
name|getContentType
argument_list|()
argument_list|,
name|PPTX
argument_list|)
expr_stmt|;
name|OOXML_CONTENT_TYPES
operator|.
name|put
argument_list|(
name|XSLFRelation
operator|.
name|MACRO
operator|.
name|getContentType
argument_list|()
argument_list|,
name|PPSM
argument_list|)
expr_stmt|;
name|OOXML_CONTENT_TYPES
operator|.
name|put
argument_list|(
name|XSLFRelation
operator|.
name|MACRO_TEMPLATE
operator|.
name|getContentType
argument_list|()
argument_list|,
name|POTM
argument_list|)
expr_stmt|;
name|OOXML_CONTENT_TYPES
operator|.
name|put
argument_list|(
name|XSLFRelation
operator|.
name|PRESENTATIONML_TEMPLATE
operator|.
name|getContentType
argument_list|()
argument_list|,
name|PPTM
argument_list|)
expr_stmt|;
name|OOXML_CONTENT_TYPES
operator|.
name|put
argument_list|(
name|XSLFRelation
operator|.
name|PRESENTATIONML
operator|.
name|getContentType
argument_list|()
argument_list|,
name|PPSX
argument_list|)
expr_stmt|;
name|OOXML_CONTENT_TYPES
operator|.
name|put
argument_list|(
name|XSLFRelation
operator|.
name|PRESENTATION_MACRO
operator|.
name|getContentType
argument_list|()
argument_list|,
name|PPTM
argument_list|)
expr_stmt|;
name|OOXML_CONTENT_TYPES
operator|.
name|put
argument_list|(
name|XSLFRelation
operator|.
name|PRESENTATIONML_TEMPLATE
operator|.
name|getContentType
argument_list|()
argument_list|,
name|POTX
argument_list|)
expr_stmt|;
name|OOXML_CONTENT_TYPES
operator|.
name|put
argument_list|(
name|XSLFRelation
operator|.
name|THEME_MANAGER
operator|.
name|getContentType
argument_list|()
argument_list|,
name|THMX
argument_list|)
expr_stmt|;
name|OOXML_CONTENT_TYPES
operator|.
name|put
argument_list|(
literal|"application/vnd.ms-visio.drawing.macroEnabled.main+xml"
argument_list|,
name|MediaType
operator|.
name|application
argument_list|(
literal|"vnd.ms-visio.drawing.macroEnabled.12"
argument_list|)
argument_list|)
expr_stmt|;
name|OOXML_CONTENT_TYPES
operator|.
name|put
argument_list|(
name|XDGFRelation
operator|.
name|DOCUMENT
operator|.
name|getContentType
argument_list|()
argument_list|,
name|MediaType
operator|.
name|application
argument_list|(
literal|"vnd.ms-visio.drawing"
argument_list|)
argument_list|)
expr_stmt|;
name|OOXML_CONTENT_TYPES
operator|.
name|put
argument_list|(
literal|"application/vnd.ms-visio.stencil.macroEnabled.main+xml"
argument_list|,
name|MediaType
operator|.
name|application
argument_list|(
literal|"vnd.ms-visio.stencil.macroenabled.12"
argument_list|)
argument_list|)
expr_stmt|;
name|OOXML_CONTENT_TYPES
operator|.
name|put
argument_list|(
literal|"application/vnd.ms-visio.stencil.main+xml"
argument_list|,
name|MediaType
operator|.
name|application
argument_list|(
literal|"vnd.ms-visio.stencil"
argument_list|)
argument_list|)
expr_stmt|;
name|OOXML_CONTENT_TYPES
operator|.
name|put
argument_list|(
literal|"application/vnd.ms-visio.template.macroEnabled.main+xml"
argument_list|,
name|MediaType
operator|.
name|application
argument_list|(
literal|"vnd.ms-visio.template.macroenabled.12"
argument_list|)
argument_list|)
expr_stmt|;
name|OOXML_CONTENT_TYPES
operator|.
name|put
argument_list|(
literal|"application/vnd.ms-visio.template.main+xml"
argument_list|,
name|MediaType
operator|.
name|application
argument_list|(
literal|"vnd.ms-visio.template"
argument_list|)
argument_list|)
expr_stmt|;
name|OOXML_CONTENT_TYPES
operator|.
name|put
argument_list|(
literal|"application/vnd.ms-package.xps-fixeddocumentsequence+xml"
argument_list|,
name|XPS
argument_list|)
expr_stmt|;
block|}
comment|/**      *      * @param is inputstream to read from. Callers must mark/reset the stream      *           before/after this call to detect.  This call does not close the stream!      *           Depending on the file type, this call to detect may read the entire stream.      *           Make sure to use a {@link org.apache.tika.io.BoundedInputStream} or similar      *           if you want to protect against reading the entire stream.      * @return      */
annotation|@
name|Override
specifier|public
name|MediaType
name|detect
parameter_list|(
name|InputStream
name|is
parameter_list|,
name|Metadata
name|metadata
parameter_list|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|fileNames
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|directoryNames
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
try|try
init|(
name|ZipArchiveInputStream
name|zipArchiveInputStream
init|=
operator|new
name|ZipArchiveInputStream
argument_list|(
operator|new
name|CloseShieldInputStream
argument_list|(
name|is
argument_list|)
argument_list|)
init|)
block|{
name|ZipArchiveEntry
name|zae
init|=
name|zipArchiveInputStream
operator|.
name|getNextZipEntry
argument_list|()
decl_stmt|;
while|while
condition|(
name|zae
operator|!=
literal|null
condition|)
block|{
name|String
name|name
init|=
name|zae
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|zae
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|directoryNames
operator|.
name|add
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|zae
operator|=
name|zipArchiveInputStream
operator|.
name|getNextZipEntry
argument_list|()
expr_stmt|;
continue|continue;
block|}
name|fileNames
operator|.
name|add
argument_list|(
name|name
argument_list|)
expr_stmt|;
comment|//we could also parse _rel/.rels, but if
comment|// there isn't a valid content_types, then POI
comment|//will throw an exception...Better to backoff to PKG
comment|//than correctly identify a truncated
if|if
condition|(
name|name
operator|.
name|equals
argument_list|(
literal|"[Content_Types].xml"
argument_list|)
condition|)
block|{
name|MediaType
name|mt
init|=
name|parseOOXMLContentTypes
argument_list|(
name|zipArchiveInputStream
argument_list|)
decl_stmt|;
if|if
condition|(
name|mt
operator|!=
literal|null
condition|)
block|{
return|return
name|mt
return|;
block|}
return|return
name|TIKA_OOXML
return|;
block|}
elseif|else
if|if
condition|(
name|IWorkPackageParser
operator|.
name|IWORK_CONTENT_ENTRIES
operator|.
name|contains
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|IWorkPackageParser
operator|.
name|IWORKDocumentType
name|type
init|=
name|IWorkPackageParser
operator|.
name|IWORKDocumentType
operator|.
name|detectType
argument_list|(
name|zipArchiveInputStream
argument_list|)
decl_stmt|;
if|if
condition|(
name|type
operator|!=
literal|null
condition|)
block|{
return|return
name|type
operator|.
name|getType
argument_list|()
return|;
block|}
block|}
elseif|else
if|if
condition|(
name|name
operator|.
name|equals
argument_list|(
literal|"mimetype"
argument_list|)
condition|)
block|{
comment|//odt -- TODO -- bound the read and check that the results are
comment|//valid
return|return
name|MediaType
operator|.
name|parse
argument_list|(
name|IOUtils
operator|.
name|toString
argument_list|(
name|zipArchiveInputStream
argument_list|,
name|UTF_8
argument_list|)
argument_list|)
return|;
block|}
name|zae
operator|=
name|zipArchiveInputStream
operator|.
name|getNextZipEntry
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|SecurityException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|//swallow
block|}
comment|//entrynames is the union of directory names and file names
name|Set
argument_list|<
name|String
argument_list|>
name|entryNames
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|fileNames
argument_list|)
decl_stmt|;
name|entryNames
operator|.
name|addAll
argument_list|(
name|directoryNames
argument_list|)
expr_stmt|;
name|MediaType
name|mt
init|=
name|detectKmz
argument_list|(
name|fileNames
argument_list|)
decl_stmt|;
if|if
condition|(
name|mt
operator|!=
literal|null
condition|)
block|{
return|return
name|mt
return|;
block|}
name|mt
operator|=
name|detectJar
argument_list|(
name|entryNames
argument_list|)
expr_stmt|;
if|if
condition|(
name|mt
operator|!=
literal|null
condition|)
block|{
return|return
name|mt
return|;
block|}
name|mt
operator|=
name|detectIpa
argument_list|(
name|entryNames
argument_list|)
expr_stmt|;
if|if
condition|(
name|mt
operator|!=
literal|null
condition|)
block|{
return|return
name|mt
return|;
block|}
name|mt
operator|=
name|detectIWorks
argument_list|(
name|entryNames
argument_list|)
expr_stmt|;
if|if
condition|(
name|mt
operator|!=
literal|null
condition|)
block|{
return|return
name|mt
return|;
block|}
name|int
name|hits
init|=
literal|0
decl_stmt|;
for|for
control|(
name|String
name|s
range|:
name|OOXML_HINTS
control|)
block|{
if|if
condition|(
name|entryNames
operator|.
name|contains
argument_list|(
name|s
argument_list|)
condition|)
block|{
if|if
condition|(
operator|++
name|hits
operator|>
literal|2
condition|)
block|{
return|return
name|TIKA_OOXML
return|;
block|}
block|}
block|}
return|return
name|MediaType
operator|.
name|APPLICATION_ZIP
return|;
block|}
specifier|private
specifier|static
name|MediaType
name|detectIWorks
parameter_list|(
name|Set
argument_list|<
name|String
argument_list|>
name|entryNames
parameter_list|)
block|{
comment|//general iworks
if|if
condition|(
name|entryNames
operator|.
name|contains
argument_list|(
name|IWorkPackageParser
operator|.
name|IWORK_COMMON_ENTRY
argument_list|)
condition|)
block|{
return|return
name|MediaType
operator|.
name|application
argument_list|(
literal|"vnd.apple.iwork"
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|public
specifier|static
name|Set
argument_list|<
name|String
argument_list|>
name|parseOOXMLRels
parameter_list|(
name|InputStream
name|is
parameter_list|)
block|{
name|RelsHandler
name|relsHandler
init|=
operator|new
name|RelsHandler
argument_list|()
decl_stmt|;
try|try
block|{
name|XMLReaderUtils
operator|.
name|parseSAX
argument_list|(
name|is
argument_list|,
name|relsHandler
argument_list|,
operator|new
name|ParseContext
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SecurityException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{          }
return|return
name|relsHandler
operator|.
name|rels
return|;
block|}
specifier|private
specifier|static
class|class
name|RelsHandler
extends|extends
name|DefaultHandler
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|rels
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
name|MediaType
name|mediaType
init|=
literal|null
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|startElement
parameter_list|(
name|String
name|uri
parameter_list|,
name|String
name|localName
parameter_list|,
name|String
name|name
parameter_list|,
name|Attributes
name|attrs
parameter_list|)
throws|throws
name|SAXException
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|attrs
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|String
name|attrName
init|=
name|attrs
operator|.
name|getLocalName
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|attrName
operator|.
name|equals
argument_list|(
literal|"Type"
argument_list|)
condition|)
block|{
name|String
name|contentType
init|=
name|attrs
operator|.
name|getValue
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|rels
operator|.
name|add
argument_list|(
name|contentType
argument_list|)
expr_stmt|;
if|if
condition|(
name|OOXML_CONTENT_TYPES
operator|.
name|containsKey
argument_list|(
name|contentType
argument_list|)
condition|)
block|{
name|mediaType
operator|=
name|OOXML_CONTENT_TYPES
operator|.
name|get
argument_list|(
name|contentType
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
specifier|public
specifier|static
name|MediaType
name|parseOOXMLContentTypes
parameter_list|(
name|InputStream
name|is
parameter_list|)
block|{
name|ContentTypeHandler
name|contentTypeHandler
init|=
operator|new
name|ContentTypeHandler
argument_list|()
decl_stmt|;
try|try
block|{
name|XMLReaderUtils
operator|.
name|parseSAX
argument_list|(
name|is
argument_list|,
name|contentTypeHandler
argument_list|,
operator|new
name|ParseContext
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SecurityException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{          }
return|return
name|contentTypeHandler
operator|.
name|mediaType
return|;
block|}
specifier|private
specifier|static
class|class
name|ContentTypeHandler
extends|extends
name|DefaultHandler
block|{
specifier|private
name|MediaType
name|mediaType
init|=
literal|null
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|startElement
parameter_list|(
name|String
name|uri
parameter_list|,
name|String
name|localName
parameter_list|,
name|String
name|name
parameter_list|,
name|Attributes
name|attrs
parameter_list|)
throws|throws
name|SAXException
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|attrs
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|String
name|attrName
init|=
name|attrs
operator|.
name|getLocalName
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|attrName
operator|.
name|equals
argument_list|(
literal|"ContentType"
argument_list|)
condition|)
block|{
name|String
name|contentType
init|=
name|attrs
operator|.
name|getValue
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|OOXML_CONTENT_TYPES
operator|.
name|containsKey
argument_list|(
name|contentType
argument_list|)
condition|)
block|{
name|mediaType
operator|=
name|OOXML_CONTENT_TYPES
operator|.
name|get
argument_list|(
name|contentType
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|StoppingEarlyException
argument_list|()
throw|;
block|}
block|}
block|}
block|}
block|}
specifier|private
specifier|static
class|class
name|StoppingEarlyException
extends|extends
name|SAXException
block|{      }
block|}
end_class

end_unit

