begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|audio
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|sound
operator|.
name|sampled
operator|.
name|AudioFileFormat
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|sound
operator|.
name|sampled
operator|.
name|AudioFormat
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|sound
operator|.
name|sampled
operator|.
name|AudioSystem
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|sound
operator|.
name|sampled
operator|.
name|UnsupportedAudioFileException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|sound
operator|.
name|sampled
operator|.
name|AudioFileFormat
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|exception
operator|.
name|TikaException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|metadata
operator|.
name|Metadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|metadata
operator|.
name|XMPDM
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|mime
operator|.
name|MediaType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|AbstractParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|ParseContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|Parser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|sax
operator|.
name|XHTMLContentHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|ContentHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_class
annotation|@
name|Component
annotation|@
name|Service
argument_list|(
name|Parser
operator|.
name|class
argument_list|)
specifier|public
class|class
name|AudioParser
extends|extends
name|AbstractParser
block|{
specifier|private
specifier|static
specifier|final
name|Set
argument_list|<
name|MediaType
argument_list|>
name|SUPPORTED_TYPES
init|=
name|Collections
operator|.
name|unmodifiableSet
argument_list|(
operator|new
name|HashSet
argument_list|<
name|MediaType
argument_list|>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|MediaType
operator|.
name|audio
argument_list|(
literal|"basic"
argument_list|)
argument_list|,
name|MediaType
operator|.
name|audio
argument_list|(
literal|"x-wav"
argument_list|)
argument_list|,
name|MediaType
operator|.
name|audio
argument_list|(
literal|"x-aiff"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
specifier|public
name|Set
argument_list|<
name|MediaType
argument_list|>
name|getSupportedTypes
parameter_list|(
name|ParseContext
name|context
parameter_list|)
block|{
return|return
name|SUPPORTED_TYPES
return|;
block|}
specifier|public
name|void
name|parse
parameter_list|(
name|InputStream
name|stream
parameter_list|,
name|ContentHandler
name|handler
parameter_list|,
name|Metadata
name|metadata
parameter_list|,
name|ParseContext
name|context
parameter_list|)
throws|throws
name|IOException
throws|,
name|SAXException
throws|,
name|TikaException
block|{
comment|// AudioSystem expects the stream to support the mark feature
if|if
condition|(
operator|!
name|stream
operator|.
name|markSupported
argument_list|()
condition|)
block|{
name|stream
operator|=
operator|new
name|BufferedInputStream
argument_list|(
name|stream
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|AudioFileFormat
name|fileFormat
init|=
name|AudioSystem
operator|.
name|getAudioFileFormat
argument_list|(
name|stream
argument_list|)
decl_stmt|;
name|Type
name|type
init|=
name|fileFormat
operator|.
name|getType
argument_list|()
decl_stmt|;
if|if
condition|(
name|type
operator|==
name|Type
operator|.
name|AIFC
operator|||
name|type
operator|==
name|Type
operator|.
name|AIFF
condition|)
block|{
name|metadata
operator|.
name|set
argument_list|(
name|Metadata
operator|.
name|CONTENT_TYPE
argument_list|,
literal|"audio/x-aiff"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|type
operator|==
name|Type
operator|.
name|AU
operator|||
name|type
operator|==
name|Type
operator|.
name|SND
condition|)
block|{
name|metadata
operator|.
name|set
argument_list|(
name|Metadata
operator|.
name|CONTENT_TYPE
argument_list|,
literal|"audio/basic"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|type
operator|==
name|Type
operator|.
name|WAVE
condition|)
block|{
name|metadata
operator|.
name|set
argument_list|(
name|Metadata
operator|.
name|CONTENT_TYPE
argument_list|,
literal|"audio/x-wav"
argument_list|)
expr_stmt|;
block|}
name|AudioFormat
name|audioFormat
init|=
name|fileFormat
operator|.
name|getFormat
argument_list|()
decl_stmt|;
name|int
name|channels
init|=
name|audioFormat
operator|.
name|getChannels
argument_list|()
decl_stmt|;
if|if
condition|(
name|channels
operator|!=
name|AudioSystem
operator|.
name|NOT_SPECIFIED
condition|)
block|{
name|metadata
operator|.
name|set
argument_list|(
literal|"channels"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|channels
argument_list|)
argument_list|)
expr_stmt|;
comment|// TODO: Use XMPDM.TRACKS? (see also frame rate in AudioFormat)
block|}
name|float
name|rate
init|=
name|audioFormat
operator|.
name|getSampleRate
argument_list|()
decl_stmt|;
if|if
condition|(
name|rate
operator|!=
name|AudioSystem
operator|.
name|NOT_SPECIFIED
condition|)
block|{
name|metadata
operator|.
name|set
argument_list|(
literal|"samplerate"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|rate
argument_list|)
argument_list|)
expr_stmt|;
name|metadata
operator|.
name|set
argument_list|(
name|XMPDM
operator|.
name|AUDIO_SAMPLE_RATE
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
operator|(
name|int
operator|)
name|rate
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|int
name|bits
init|=
name|audioFormat
operator|.
name|getSampleSizeInBits
argument_list|()
decl_stmt|;
if|if
condition|(
name|bits
operator|!=
name|AudioSystem
operator|.
name|NOT_SPECIFIED
condition|)
block|{
name|metadata
operator|.
name|set
argument_list|(
literal|"bits"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|bits
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|bits
operator|==
literal|8
condition|)
block|{
name|metadata
operator|.
name|set
argument_list|(
name|XMPDM
operator|.
name|AUDIO_SAMPLE_TYPE
argument_list|,
literal|"8Int"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|bits
operator|==
literal|16
condition|)
block|{
name|metadata
operator|.
name|set
argument_list|(
name|XMPDM
operator|.
name|AUDIO_SAMPLE_TYPE
argument_list|,
literal|"16Int"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|bits
operator|==
literal|32
condition|)
block|{
name|metadata
operator|.
name|set
argument_list|(
name|XMPDM
operator|.
name|AUDIO_SAMPLE_TYPE
argument_list|,
literal|"32Int"
argument_list|)
expr_stmt|;
block|}
block|}
name|metadata
operator|.
name|set
argument_list|(
literal|"encoding"
argument_list|,
name|audioFormat
operator|.
name|getEncoding
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// Javadoc suggests that some of the following properties might
comment|// be available, but I had no success in finding any:
comment|// "duration" Long playback duration of the file in microseconds
comment|// "author" String name of the author of this file
comment|// "title" String title of this file
comment|// "copyright" String copyright message
comment|// "date" Date date of the recording or release
comment|// "comment" String an arbitrary text
name|addMetadata
argument_list|(
name|metadata
argument_list|,
name|fileFormat
operator|.
name|properties
argument_list|()
argument_list|)
expr_stmt|;
name|addMetadata
argument_list|(
name|metadata
argument_list|,
name|audioFormat
operator|.
name|properties
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedAudioFileException
name|e
parameter_list|)
block|{
comment|// There is no way to know whether this exception was
comment|// caused by the document being corrupted or by the format
comment|// just being unsupported. So we do nothing.
block|}
name|XHTMLContentHandler
name|xhtml
init|=
operator|new
name|XHTMLContentHandler
argument_list|(
name|handler
argument_list|,
name|metadata
argument_list|)
decl_stmt|;
name|xhtml
operator|.
name|startDocument
argument_list|()
expr_stmt|;
name|xhtml
operator|.
name|endDocument
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|addMetadata
parameter_list|(
name|Metadata
name|metadata
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|properties
parameter_list|)
block|{
if|if
condition|(
name|properties
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|entry
range|:
name|properties
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|Object
name|value
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
name|metadata
operator|.
name|set
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|value
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
end_class

end_unit

