begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|hdf
package|;
end_package

begin_comment
comment|//JDK imports
end_comment

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_comment
comment|//TIKA imports
end_comment

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|exception
operator|.
name|TikaException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|metadata
operator|.
name|Metadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|mime
operator|.
name|MediaType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|ParseContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|Parser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|netcdf
operator|.
name|NetCDFParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|ContentHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_comment
comment|//NetCDF imports
end_comment

begin_import
import|import
name|ucar
operator|.
name|nc2
operator|.
name|Attribute
import|;
end_import

begin_import
import|import
name|ucar
operator|.
name|nc2
operator|.
name|Group
import|;
end_import

begin_import
import|import
name|ucar
operator|.
name|nc2
operator|.
name|NetcdfFile
import|;
end_import

begin_comment
comment|/**  *   * Since the {@link NetCDFParser} depends on the<a  * href="http://www.unidata.ucar.edu/software/netcdf-java">NetCDF-Java</a> API,  * we are able to use it to parse HDF files as well. See<a href=  * "http://www.unidata.ucar.edu/software/netcdf-java/formats/FileTypes.html"  *>this link</a> for more information.  *   */
end_comment

begin_class
specifier|public
class|class
name|HDFParser
implements|implements
name|Parser
block|{
specifier|private
specifier|static
specifier|final
name|Set
argument_list|<
name|MediaType
argument_list|>
name|SUPPORTED_TYPES
init|=
name|Collections
operator|.
name|singleton
argument_list|(
name|MediaType
operator|.
name|application
argument_list|(
literal|"application/x-hdf"
argument_list|)
argument_list|)
decl_stmt|;
comment|/*      * (non-Javadoc)      *       * @see      * org.apache.tika.parser.netcdf.NetCDFParser#getSupportedTypes(org.apache      * .tika.parser.ParseContext)      */
specifier|public
name|Set
argument_list|<
name|MediaType
argument_list|>
name|getSupportedTypes
parameter_list|(
name|ParseContext
name|context
parameter_list|)
block|{
return|return
name|SUPPORTED_TYPES
return|;
block|}
comment|/*      * (non-Javadoc)      *       * @see      * org.apache.tika.parser.netcdf.NetCDFParser#parse(java.io.InputStream,      * org.xml.sax.ContentHandler, org.apache.tika.metadata.Metadata,      * org.apache.tika.parser.ParseContext)      */
specifier|public
name|void
name|parse
parameter_list|(
name|InputStream
name|stream
parameter_list|,
name|ContentHandler
name|handler
parameter_list|,
name|Metadata
name|metadata
parameter_list|,
name|ParseContext
name|context
parameter_list|)
throws|throws
name|IOException
throws|,
name|SAXException
throws|,
name|TikaException
block|{
name|ByteArrayOutputStream
name|os
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|this
operator|.
name|writeStreamToMemory
argument_list|(
name|stream
argument_list|,
name|os
argument_list|)
expr_stmt|;
name|NetcdfFile
name|ncFile
init|=
name|NetcdfFile
operator|.
name|openInMemory
argument_list|(
literal|""
argument_list|,
name|os
operator|.
name|toByteArray
argument_list|()
argument_list|)
decl_stmt|;
name|this
operator|.
name|unravelStringMet
argument_list|(
name|ncFile
argument_list|,
literal|null
argument_list|,
name|metadata
argument_list|)
expr_stmt|;
block|}
comment|/*      * (non-Javadoc)      *       * @see      * org.apache.tika.parser.netcdf.NetCDFParser#parse(java.io.InputStream,      * org.xml.sax.ContentHandler, org.apache.tika.metadata.Metadata)      */
specifier|public
name|void
name|parse
parameter_list|(
name|InputStream
name|stream
parameter_list|,
name|ContentHandler
name|handler
parameter_list|,
name|Metadata
name|metadata
parameter_list|)
throws|throws
name|IOException
throws|,
name|SAXException
throws|,
name|TikaException
block|{
name|this
operator|.
name|parse
argument_list|(
name|stream
argument_list|,
name|handler
argument_list|,
name|metadata
argument_list|,
operator|new
name|ParseContext
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|unravelStringMet
parameter_list|(
name|NetcdfFile
name|ncFile
parameter_list|,
name|Group
name|group
parameter_list|,
name|Metadata
name|met
parameter_list|)
block|{
if|if
condition|(
name|group
operator|==
literal|null
condition|)
block|{
name|group
operator|=
name|ncFile
operator|.
name|getRootGroup
argument_list|()
expr_stmt|;
block|}
comment|// unravel its string attrs
for|for
control|(
name|Attribute
name|attribute
range|:
name|group
operator|.
name|getAttributes
argument_list|()
control|)
block|{
if|if
condition|(
name|attribute
operator|.
name|isString
argument_list|()
condition|)
block|{
name|met
operator|.
name|add
argument_list|(
name|attribute
operator|.
name|getName
argument_list|()
argument_list|,
name|attribute
operator|.
name|getStringValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// try and cast its value to a string
name|met
operator|.
name|add
argument_list|(
name|attribute
operator|.
name|getName
argument_list|()
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|attribute
operator|.
name|getNumericValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|Group
name|g
range|:
name|group
operator|.
name|getGroups
argument_list|()
control|)
block|{
name|unravelStringMet
argument_list|(
name|ncFile
argument_list|,
name|g
argument_list|,
name|met
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|writeStreamToMemory
parameter_list|(
name|InputStream
name|is
parameter_list|,
name|ByteArrayOutputStream
name|os
parameter_list|)
throws|throws
name|TikaException
block|{
name|byte
index|[]
name|buf
init|=
operator|new
name|byte
index|[
literal|512
index|]
decl_stmt|;
try|try
block|{
while|while
condition|(
operator|(
name|is
operator|.
name|read
argument_list|(
name|buf
argument_list|,
literal|0
argument_list|,
literal|512
argument_list|)
operator|)
operator|!=
operator|-
literal|1
condition|)
block|{
name|os
operator|.
name|write
argument_list|(
name|buf
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|TikaException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

