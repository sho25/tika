begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|microsoft
operator|.
name|onenote
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|exception
operator|.
name|TikaMemoryLimitException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_comment
comment|/**  * A FileNode structure is the basic unit for holding and referencing data in the file.  * FileNode structures are organized into file node lists  *<p>  * A FileNode structure is divided into header fields and a data field, fnd. The header fields specify what type of FileNode structure it  * is,  * and what format the fnd field is in.  *<p>  * The fnd field can be empty, or it can contain data directly, or it can contain a reference to another block of the file by  * byte position and byte count, or it can contain both data and a reference.  */
end_comment

begin_class
class|class
name|FileNode
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|FileNode
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**      * An unsigned integer that specifies the type of this FileNode structure. The meaning of this value is specified by the fnd field.      */
name|long
name|id
decl_stmt|;
name|long
name|size
decl_stmt|;
comment|/**      * An unsigned integer that specifies whether the structure specified by fnd contains a FileNodeChunkReference structure.      * 0 - This FileNode structure does not reference other data. The data structure specified by fnd MUST NOT contain a      * FileNodeChunkReference structure. The StpFormat and CbFormat fields MUST be ignored.      * 1 - This FileNode structure contains a reference to data. The first field in the data structure specified by an fnd field MUST be a      * FileNodeChunkReference structure that specifies the location and size of the referenced data.      * The type of the FileNodeChunkReference structure is specified by the StpFormat and CbFormat fields.      * 2 - This FileNode structure contains a reference to a file node list.      * The first field in the data structure specified by the fnd field MUST be a FileNodeChunkReference structure that specifies the      * location and size of a file node list. The type of the FileNodeChunkReference is specified by the StpFormat and CbFormat fields.      */
name|long
name|baseType
decl_stmt|;
comment|/**      * The ExtendedGUID for this FileNode.      * Specified for ObjectSpaceManifestRoot      * ObjectSpaceManifestStart      * ObjectSpaceManifestList      * RevisionManifestListStart      * ObjectGroupStartFND      * ObjectGroupID      * ObjectGroupListReferenceFND      *<p>      * RID for RevisionManifestStart4FND      * DataSignatureGroup for RevisionManifestEndFND      */
name|ExtendedGUID
name|gosid
decl_stmt|;
comment|// only present for RevisionManfiest7FND and RevisionRoleAndContextDeclaration
name|ExtendedGUID
name|gctxid
decl_stmt|;
name|GUID
name|fileDataStoreReference
decl_stmt|;
name|FileChunkReference
name|ref
decl_stmt|;
name|PropertySet
name|propertySet
decl_stmt|;
name|boolean
name|isFileData
decl_stmt|;
comment|/**      * For ObjectGroupListReference, the children.      */
name|FileNodeList
name|childFileNodeList
init|=
operator|new
name|FileNodeList
argument_list|()
decl_stmt|;
name|FileNodeUnion
name|subType
init|=
operator|new
name|FileNodeUnion
argument_list|()
decl_stmt|;
name|String
name|idDesc
decl_stmt|;
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|o
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|o
operator|==
literal|null
operator|||
name|getClass
argument_list|()
operator|!=
name|o
operator|.
name|getClass
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
name|FileNode
name|fileNode
init|=
operator|(
name|FileNode
operator|)
name|o
decl_stmt|;
return|return
name|id
operator|==
name|fileNode
operator|.
name|id
operator|&&
name|size
operator|==
name|fileNode
operator|.
name|size
operator|&&
name|baseType
operator|==
name|fileNode
operator|.
name|baseType
operator|&&
name|isFileData
operator|==
name|fileNode
operator|.
name|isFileData
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|gosid
argument_list|,
name|fileNode
operator|.
name|gosid
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|gctxid
argument_list|,
name|fileNode
operator|.
name|gctxid
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|fileDataStoreReference
argument_list|,
name|fileNode
operator|.
name|fileDataStoreReference
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|ref
argument_list|,
name|fileNode
operator|.
name|ref
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|propertySet
argument_list|,
name|fileNode
operator|.
name|propertySet
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|childFileNodeList
argument_list|,
name|fileNode
operator|.
name|childFileNodeList
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|subType
argument_list|,
name|fileNode
operator|.
name|subType
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|Objects
operator|.
name|hash
argument_list|(
name|id
argument_list|,
name|size
argument_list|,
name|baseType
argument_list|,
name|gosid
argument_list|,
name|gctxid
argument_list|,
name|fileDataStoreReference
argument_list|,
name|ref
argument_list|,
name|propertySet
argument_list|,
name|isFileData
argument_list|,
name|childFileNodeList
argument_list|,
name|subType
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|hasGctxid
parameter_list|()
block|{
return|return
name|id
operator|==
name|FndStructureConstants
operator|.
name|RevisionRoleAndContextDeclarationFND
operator|||
name|id
operator|==
name|FndStructureConstants
operator|.
name|RevisionManifestStart7FND
return|;
block|}
specifier|public
name|long
name|getId
parameter_list|()
block|{
return|return
name|id
return|;
block|}
specifier|public
name|FileNode
name|setId
parameter_list|(
name|long
name|id
parameter_list|)
block|{
name|this
operator|.
name|id
operator|=
name|id
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|long
name|getSize
parameter_list|()
block|{
return|return
name|size
return|;
block|}
specifier|public
name|FileNode
name|setSize
parameter_list|(
name|long
name|size
parameter_list|)
block|{
name|this
operator|.
name|size
operator|=
name|size
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|long
name|getBaseType
parameter_list|()
block|{
return|return
name|baseType
return|;
block|}
specifier|public
name|FileNode
name|setBaseType
parameter_list|(
name|long
name|baseType
parameter_list|)
block|{
name|this
operator|.
name|baseType
operator|=
name|baseType
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|ExtendedGUID
name|getGosid
parameter_list|()
block|{
return|return
name|gosid
return|;
block|}
specifier|public
name|FileNode
name|setGosid
parameter_list|(
name|ExtendedGUID
name|gosid
parameter_list|)
block|{
name|this
operator|.
name|gosid
operator|=
name|gosid
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|ExtendedGUID
name|getGctxid
parameter_list|()
block|{
return|return
name|gctxid
return|;
block|}
specifier|public
name|FileNode
name|setGctxid
parameter_list|(
name|ExtendedGUID
name|gctxid
parameter_list|)
block|{
name|this
operator|.
name|gctxid
operator|=
name|gctxid
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|GUID
name|getFileDataStoreReference
parameter_list|()
block|{
return|return
name|fileDataStoreReference
return|;
block|}
specifier|public
name|FileNode
name|setFileDataStoreReference
parameter_list|(
name|GUID
name|fileDataStoreReference
parameter_list|)
block|{
name|this
operator|.
name|fileDataStoreReference
operator|=
name|fileDataStoreReference
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|FileChunkReference
name|getRef
parameter_list|()
block|{
return|return
name|ref
return|;
block|}
specifier|public
name|FileNode
name|setRef
parameter_list|(
name|FileChunkReference
name|ref
parameter_list|)
block|{
name|this
operator|.
name|ref
operator|=
name|ref
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|PropertySet
name|getPropertySet
parameter_list|()
block|{
return|return
name|propertySet
return|;
block|}
specifier|public
name|FileNode
name|setPropertySet
parameter_list|(
name|PropertySet
name|propertySet
parameter_list|)
block|{
name|this
operator|.
name|propertySet
operator|=
name|propertySet
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|boolean
name|isFileData
parameter_list|()
block|{
return|return
name|isFileData
return|;
block|}
specifier|public
name|FileNode
name|setFileData
parameter_list|(
name|boolean
name|fileData
parameter_list|)
block|{
name|isFileData
operator|=
name|fileData
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|FileNodeList
name|getChildFileNodeList
parameter_list|()
block|{
return|return
name|childFileNodeList
return|;
block|}
specifier|public
name|FileNode
name|setChildFileNodeList
parameter_list|(
name|FileNodeList
name|childFileNodeList
parameter_list|)
block|{
name|this
operator|.
name|childFileNodeList
operator|=
name|childFileNodeList
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|FileNodeUnion
name|getSubType
parameter_list|()
block|{
return|return
name|subType
return|;
block|}
specifier|public
name|FileNode
name|setSubType
parameter_list|(
name|FileNodeUnion
name|subType
parameter_list|)
block|{
name|this
operator|.
name|subType
operator|=
name|subType
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|print
parameter_list|(
name|OneNoteDocument
name|document
parameter_list|,
name|OneNotePtr
name|pointer
parameter_list|,
name|int
name|indentLevel
parameter_list|)
throws|throws
name|IOException
throws|,
name|TikaMemoryLimitException
block|{
name|boolean
name|shouldPrintHeader
init|=
name|FndStructureConstants
operator|.
name|nameOf
argument_list|(
name|id
argument_list|)
operator|.
name|contains
argument_list|(
literal|"ObjectDec"
argument_list|)
decl_stmt|;
if|if
condition|(
name|gosid
operator|.
name|equals
argument_list|(
name|ExtendedGUID
operator|.
name|nil
argument_list|()
argument_list|)
operator|&&
name|shouldPrintHeader
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"{}[beg {}]:{}"
argument_list|,
name|IndentUtil
operator|.
name|getIndent
argument_list|(
name|indentLevel
operator|+
literal|1
argument_list|)
argument_list|,
name|FndStructureConstants
operator|.
name|nameOf
argument_list|(
name|id
argument_list|)
argument_list|,
name|gosid
argument_list|)
expr_stmt|;
block|}
name|propertySet
operator|.
name|print
argument_list|(
name|document
argument_list|,
name|pointer
argument_list|,
name|indentLevel
operator|+
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|childFileNodeList
operator|.
name|children
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|shouldPrintHeader
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"{}children"
argument_list|,
name|IndentUtil
operator|.
name|getIndent
argument_list|(
name|indentLevel
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|FileNode
name|child
range|:
name|childFileNodeList
operator|.
name|children
control|)
block|{
name|child
operator|.
name|print
argument_list|(
name|document
argument_list|,
name|pointer
argument_list|,
name|indentLevel
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|id
operator|==
name|FndStructureConstants
operator|.
name|RevisionRoleDeclarationFND
operator|||
name|id
operator|==
name|FndStructureConstants
operator|.
name|RevisionRoleAndContextDeclarationFND
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"{}[Revision Role {}]"
argument_list|,
name|IndentUtil
operator|.
name|getIndent
argument_list|(
name|indentLevel
operator|+
literal|1
argument_list|)
argument_list|,
name|subType
operator|.
name|revisionRoleDeclaration
operator|.
name|revisionRole
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|id
operator|==
name|FndStructureConstants
operator|.
name|RevisionManifestStart4FND
operator|||
name|id
operator|==
name|FndStructureConstants
operator|.
name|RevisionManifestStart6FND
operator|||
name|id
operator|==
name|FndStructureConstants
operator|.
name|RevisionManifestStart7FND
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"{}[revisionRole {}]"
argument_list|,
name|IndentUtil
operator|.
name|getIndent
argument_list|(
name|indentLevel
operator|+
literal|1
argument_list|)
argument_list|,
name|subType
operator|.
name|revisionManifest
operator|.
name|revisionRole
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|(
name|gctxid
operator|!=
name|ExtendedGUID
operator|.
name|nil
argument_list|()
operator|||
name|id
operator|==
name|FndStructureConstants
operator|.
name|RevisionManifestStart7FND
operator|)
operator|&&
name|shouldPrintHeader
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"{}[gctxid {}]"
argument_list|,
name|IndentUtil
operator|.
name|getIndent
argument_list|(
name|indentLevel
operator|+
literal|1
argument_list|)
argument_list|,
name|gctxid
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|gosid
operator|!=
name|ExtendedGUID
operator|.
name|nil
argument_list|()
operator|&&
name|shouldPrintHeader
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"{}[end {}]:{}"
argument_list|,
name|IndentUtil
operator|.
name|getIndent
argument_list|(
name|indentLevel
operator|+
literal|1
argument_list|)
argument_list|,
name|FndStructureConstants
operator|.
name|nameOf
argument_list|(
name|id
argument_list|)
argument_list|,
name|gosid
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * A description of what this GUID id means in this context.      *      * @return A description of what this GUID id means in this context.      */
specifier|public
name|String
name|getIdDesc
parameter_list|()
block|{
return|return
name|idDesc
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
operator|new
name|StringBuilder
argument_list|()
operator|.
name|append
argument_list|(
literal|"FileNodeID=0x"
argument_list|)
operator|.
name|append
argument_list|(
name|Long
operator|.
name|toHexString
argument_list|(
name|id
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|", gosid="
argument_list|)
operator|.
name|append
argument_list|(
name|gosid
argument_list|)
operator|.
name|append
argument_list|(
literal|", baseType=0x"
argument_list|)
operator|.
name|append
argument_list|(
name|Long
operator|.
name|toHexString
argument_list|(
name|baseType
argument_list|)
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

