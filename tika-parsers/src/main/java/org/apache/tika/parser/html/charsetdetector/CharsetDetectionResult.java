begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|html
operator|.
name|charsetdetector
package|;
end_package

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|Charset
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * A detection may either not find a charset, find an invalid charset, or find a valid charset  */
end_comment

begin_class
class|class
name|CharsetDetectionResult
block|{
specifier|private
name|boolean
name|found
init|=
literal|false
decl_stmt|;
specifier|private
name|Charset
name|charset
init|=
literal|null
decl_stmt|;
specifier|private
name|CharsetDetectionResult
parameter_list|()
block|{
comment|/* default result: not found */
block|}
specifier|static
name|CharsetDetectionResult
name|notFound
parameter_list|()
block|{
return|return
operator|new
name|CharsetDetectionResult
argument_list|()
return|;
block|}
specifier|public
name|boolean
name|isFound
parameter_list|()
block|{
return|return
name|found
return|;
block|}
specifier|public
name|void
name|find
parameter_list|(
name|String
name|charsetName
parameter_list|)
block|{
name|this
operator|.
name|found
operator|=
literal|true
expr_stmt|;
name|charsetName
operator|=
name|charsetName
operator|.
name|trim
argument_list|()
expr_stmt|;
if|if
condition|(
literal|"x-user-defined"
operator|.
name|equals
argument_list|(
name|charsetName
argument_list|)
condition|)
name|charsetName
operator|=
literal|"windows-1252"
expr_stmt|;
name|this
operator|.
name|charset
operator|=
name|CharsetAliases
operator|.
name|getCharsetByLabel
argument_list|(
name|charsetName
argument_list|)
expr_stmt|;
comment|// The specification states: If charset is a UTF-16 encoding, then set charset to UTF-8.
if|if
condition|(
name|UTF_16LE
operator|.
name|equals
argument_list|(
name|charset
argument_list|)
operator|||
name|UTF_16BE
operator|.
name|equals
argument_list|(
name|charset
argument_list|)
condition|)
name|charset
operator|=
name|UTF_8
expr_stmt|;
block|}
specifier|public
name|Charset
name|getCharset
parameter_list|()
block|{
comment|// the result may be null even if found is true, in the case there is a charset specified,
comment|// but it is invalid
return|return
name|charset
return|;
block|}
specifier|public
name|void
name|setCharset
parameter_list|(
name|Charset
name|charset
parameter_list|)
block|{
name|this
operator|.
name|found
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|charset
operator|=
name|charset
expr_stmt|;
block|}
block|}
end_class

end_unit

