begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|jdbc
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|ResultSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Statement
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|IOExceptionWithCause
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|io
operator|.
name|TikaInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|metadata
operator|.
name|Metadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|mime
operator|.
name|MediaType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|ParseContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|sqlite
operator|.
name|SQLiteConfig
import|;
end_import

begin_comment
comment|/**  * This is the implementation of the db parser for SQLite.  *<p/>  * This parser is internal only; it should not be registered in the services  * file or configured in the TikaConfig xml file.  */
end_comment

begin_class
class|class
name|SQLite3DBParser
extends|extends
name|AbstractDBParser
block|{
specifier|protected
specifier|static
specifier|final
name|String
name|SQLITE_CLASS_NAME
init|=
literal|"org.sqlite.JDBC"
decl_stmt|;
comment|/**      * @param context context      * @return null (always)      */
annotation|@
name|Override
specifier|public
name|Set
argument_list|<
name|MediaType
argument_list|>
name|getSupportedTypes
parameter_list|(
name|ParseContext
name|context
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|protected
name|Connection
name|getConnection
parameter_list|(
name|InputStream
name|stream
parameter_list|,
name|Metadata
name|metadata
parameter_list|,
name|ParseContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|connectionString
init|=
name|getConnectionString
argument_list|(
name|stream
argument_list|,
name|metadata
argument_list|,
name|context
argument_list|)
decl_stmt|;
name|Connection
name|connection
init|=
literal|null
decl_stmt|;
try|try
block|{
name|Class
operator|.
name|forName
argument_list|(
name|getJDBCClassName
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOExceptionWithCause
argument_list|(
name|e
argument_list|)
throw|;
block|}
try|try
block|{
name|SQLiteConfig
name|config
init|=
operator|new
name|SQLiteConfig
argument_list|()
decl_stmt|;
comment|//good habit, but effectively meaningless here
name|config
operator|.
name|setReadOnly
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|connection
operator|=
name|config
operator|.
name|createConnection
argument_list|(
name|connectionString
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
return|return
name|connection
return|;
block|}
annotation|@
name|Override
specifier|protected
name|String
name|getConnectionString
parameter_list|(
name|InputStream
name|is
parameter_list|,
name|Metadata
name|metadata
parameter_list|,
name|ParseContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|File
name|dbFile
init|=
name|TikaInputStream
operator|.
name|get
argument_list|(
name|is
argument_list|)
operator|.
name|getFile
argument_list|()
decl_stmt|;
return|return
literal|"jdbc:sqlite:"
operator|+
name|dbFile
operator|.
name|getAbsolutePath
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|protected
name|String
name|getJDBCClassName
parameter_list|()
block|{
return|return
name|SQLITE_CLASS_NAME
return|;
block|}
annotation|@
name|Override
specifier|protected
name|List
argument_list|<
name|String
argument_list|>
name|getTableNames
parameter_list|(
name|Connection
name|connection
parameter_list|,
name|Metadata
name|metadata
parameter_list|,
name|ParseContext
name|context
parameter_list|)
throws|throws
name|SQLException
block|{
name|List
argument_list|<
name|String
argument_list|>
name|tableNames
init|=
operator|new
name|LinkedList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
try|try
init|(
name|Statement
name|st
init|=
name|connection
operator|.
name|createStatement
argument_list|()
init|)
block|{
name|String
name|sql
init|=
literal|"SELECT name FROM sqlite_master WHERE type='table'"
decl_stmt|;
name|ResultSet
name|rs
init|=
name|st
operator|.
name|executeQuery
argument_list|(
name|sql
argument_list|)
decl_stmt|;
while|while
condition|(
name|rs
operator|.
name|next
argument_list|()
condition|)
block|{
name|tableNames
operator|.
name|add
argument_list|(
name|rs
operator|.
name|getString
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|tableNames
return|;
block|}
annotation|@
name|Override
specifier|public
name|JDBCTableReader
name|getTableReader
parameter_list|(
name|Connection
name|connection
parameter_list|,
name|String
name|tableName
parameter_list|,
name|ParseContext
name|context
parameter_list|)
block|{
return|return
operator|new
name|SQLite3TableReader
argument_list|(
name|connection
argument_list|,
name|tableName
argument_list|,
name|context
argument_list|)
return|;
block|}
block|}
end_class

end_unit

