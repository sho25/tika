begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|chm
operator|.
name|lzx
package|;
end_package

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigInteger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|exception
operator|.
name|TikaException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|chm
operator|.
name|core
operator|.
name|ChmCommons
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|chm
operator|.
name|core
operator|.
name|ChmCommons
operator|.
name|IntelState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|chm
operator|.
name|core
operator|.
name|ChmCommons
operator|.
name|LzxState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|chm
operator|.
name|core
operator|.
name|ChmConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|chm
operator|.
name|exception
operator|.
name|ChmParsingException
import|;
end_import

begin_comment
comment|/**  * Decompresses a chm block. Depending on chm block type chooses most relevant  * decompressing method. A chm block type can be as follows:</br><li>UNDEFINED  * - no action taken, i.e. skipping the block<li>VERBATIM<li>ALIGNED_OFFSET  *<li>UNCOMPRESSED the most simplest In addition there are unknown types (4-7).  * Currently relying on previous chm block these types changing according to the  * previous chm block type. We need to invent more appropriate way to handle  * such types.  *   */
end_comment

begin_class
specifier|public
class|class
name|ChmLzxBlock
block|{
specifier|private
name|int
name|block_number
decl_stmt|;
specifier|private
name|long
name|block_length
decl_stmt|;
specifier|private
name|ChmLzxState
name|state
decl_stmt|;
specifier|private
name|byte
index|[]
name|content
init|=
literal|null
decl_stmt|;
specifier|private
name|ChmSection
name|chmSection
init|=
literal|null
decl_stmt|;
specifier|private
name|int
name|contentLength
init|=
literal|0
decl_stmt|;
comment|// trying to find solution for bad blocks ...
specifier|private
name|int
name|previousBlockType
init|=
operator|-
literal|1
decl_stmt|;
specifier|public
name|ChmLzxBlock
parameter_list|(
name|int
name|blockNumber
parameter_list|,
name|byte
index|[]
name|dataSegment
parameter_list|,
name|long
name|blockLength
parameter_list|,
name|ChmLzxBlock
name|prevBlock
parameter_list|)
block|{
try|try
block|{
if|if
condition|(
name|validateConstructorParams
argument_list|(
name|blockNumber
argument_list|,
name|dataSegment
argument_list|,
name|blockLength
argument_list|)
condition|)
block|{
name|setBlockNumber
argument_list|(
name|blockNumber
argument_list|)
expr_stmt|;
if|if
condition|(
name|prevBlock
operator|!=
literal|null
operator|&&
name|prevBlock
operator|.
name|getState
argument_list|()
operator|.
name|getBlockLength
argument_list|()
operator|>
name|prevBlock
operator|.
name|getState
argument_list|()
operator|.
name|getBlockRemaining
argument_list|()
condition|)
name|setChmSection
argument_list|(
operator|new
name|ChmSection
argument_list|(
name|prevBlock
operator|.
name|getContent
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|setChmSection
argument_list|(
operator|new
name|ChmSection
argument_list|(
name|dataSegment
argument_list|)
argument_list|)
expr_stmt|;
name|setBlockLength
argument_list|(
name|blockLength
argument_list|)
expr_stmt|;
comment|// ============================================
comment|// we need to take care of previous context
comment|// ============================================
name|checkLzxBlock
argument_list|(
name|prevBlock
argument_list|)
expr_stmt|;
name|setContent
argument_list|(
operator|(
name|int
operator|)
name|blockLength
argument_list|)
expr_stmt|;
if|if
condition|(
name|prevBlock
operator|==
literal|null
operator|||
name|getContent
argument_list|()
operator|.
name|length
operator|<
operator|(
name|int
operator|)
name|getBlockLength
argument_list|()
condition|)
block|{
name|setContent
argument_list|(
operator|(
name|int
operator|)
name|getBlockLength
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|prevBlock
operator|!=
literal|null
operator|&&
name|prevBlock
operator|.
name|getState
argument_list|()
operator|!=
literal|null
condition|)
name|previousBlockType
operator|=
name|prevBlock
operator|.
name|getState
argument_list|()
operator|.
name|getBlockType
argument_list|()
expr_stmt|;
name|extractContent
argument_list|()
expr_stmt|;
block|}
else|else
throw|throw
operator|new
name|TikaException
argument_list|(
literal|"Check your chm lzx block parameters"
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// TODO: handle exception
block|}
block|}
specifier|protected
name|int
name|getContentLength
parameter_list|()
block|{
return|return
name|contentLength
return|;
block|}
specifier|protected
name|void
name|setContentLength
parameter_list|(
name|int
name|contentLength
parameter_list|)
block|{
name|this
operator|.
name|contentLength
operator|=
name|contentLength
expr_stmt|;
block|}
specifier|private
name|ChmSection
name|getChmSection
parameter_list|()
block|{
return|return
name|chmSection
return|;
block|}
specifier|private
name|void
name|setChmSection
parameter_list|(
name|ChmSection
name|chmSection
parameter_list|)
block|{
name|this
operator|.
name|chmSection
operator|=
name|chmSection
expr_stmt|;
block|}
specifier|private
name|void
name|assertStateNotNull
parameter_list|()
throws|throws
name|TikaException
block|{
if|if
condition|(
name|getState
argument_list|()
operator|==
literal|null
condition|)
throw|throw
operator|new
name|ChmParsingException
argument_list|(
literal|"state is null"
argument_list|)
throw|;
block|}
specifier|private
name|void
name|extractContent
parameter_list|()
throws|throws
name|TikaException
block|{
name|assertStateNotNull
argument_list|()
expr_stmt|;
if|if
condition|(
name|getChmSection
argument_list|()
operator|.
name|getData
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|boolean
name|continueLoop
init|=
literal|true
decl_stmt|;
while|while
condition|(
name|continueLoop
operator|&&
name|getContentLength
argument_list|()
operator|<
name|getBlockLength
argument_list|()
condition|)
block|{
if|if
condition|(
name|getState
argument_list|()
operator|!=
literal|null
operator|&&
name|getState
argument_list|()
operator|.
name|getBlockRemaining
argument_list|()
operator|==
literal|0
condition|)
block|{
if|if
condition|(
name|getState
argument_list|()
operator|.
name|getHadStarted
argument_list|()
operator|==
name|LzxState
operator|.
name|NOT_STARTED_DECODING
condition|)
block|{
name|getState
argument_list|()
operator|.
name|setHadStarted
argument_list|(
name|LzxState
operator|.
name|STARTED_DECODING
argument_list|)
expr_stmt|;
if|if
condition|(
name|getChmSection
argument_list|()
operator|.
name|getSyncBits
argument_list|(
literal|1
argument_list|)
operator|==
literal|1
condition|)
block|{
name|int
name|intelSizeTemp
init|=
operator|(
name|getChmSection
argument_list|()
operator|.
name|getSyncBits
argument_list|(
literal|16
argument_list|)
operator|<<
literal|16
operator|)
operator|+
name|getChmSection
argument_list|()
operator|.
name|getSyncBits
argument_list|(
literal|16
argument_list|)
decl_stmt|;
if|if
condition|(
name|intelSizeTemp
operator|>=
literal|0
condition|)
name|getState
argument_list|()
operator|.
name|setIntelFileSize
argument_list|(
name|intelSizeTemp
argument_list|)
expr_stmt|;
else|else
name|getState
argument_list|()
operator|.
name|setIntelFileSize
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
name|getState
argument_list|()
operator|.
name|setBlockType
argument_list|(
name|getChmSection
argument_list|()
operator|.
name|getSyncBits
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|getState
argument_list|()
operator|.
name|setBlockLength
argument_list|(
operator|(
name|getChmSection
argument_list|()
operator|.
name|getSyncBits
argument_list|(
literal|16
argument_list|)
operator|<<
literal|8
operator|)
operator|+
name|getChmSection
argument_list|()
operator|.
name|getSyncBits
argument_list|(
literal|8
argument_list|)
argument_list|)
expr_stmt|;
name|getState
argument_list|()
operator|.
name|setBlockRemaining
argument_list|(
name|getState
argument_list|()
operator|.
name|getBlockLength
argument_list|()
argument_list|)
expr_stmt|;
comment|// ----------------------------------------
comment|// Trying to handle 3 - 7 block types
comment|// ----------------------------------------
if|if
condition|(
name|getState
argument_list|()
operator|.
name|getBlockType
argument_list|()
operator|>
literal|3
condition|)
block|{
if|if
condition|(
name|previousBlockType
operator|>=
literal|0
operator|&&
name|previousBlockType
operator|<
literal|3
condition|)
name|getState
argument_list|()
operator|.
name|setBlockType
argument_list|(
name|previousBlockType
argument_list|)
expr_stmt|;
block|}
switch|switch
condition|(
name|getState
argument_list|()
operator|.
name|getBlockType
argument_list|()
condition|)
block|{
case|case
name|ChmCommons
operator|.
name|ALIGNED_OFFSET
case|:
name|createAlignedTreeTable
argument_list|()
expr_stmt|;
case|case
name|ChmCommons
operator|.
name|VERBATIM
case|:
comment|/* Creates mainTreeTable */
name|createMainTreeTable
argument_list|()
expr_stmt|;
name|createLengthTreeTable
argument_list|()
expr_stmt|;
if|if
condition|(
name|getState
argument_list|()
operator|.
name|getMainTreeLengtsTable
argument_list|()
index|[
literal|0xe8
index|]
operator|!=
literal|0
condition|)
name|getState
argument_list|()
operator|.
name|setIntelState
argument_list|(
name|IntelState
operator|.
name|STARTED
argument_list|)
expr_stmt|;
break|break;
case|case
name|ChmCommons
operator|.
name|UNCOMPRESSED
case|:
name|getState
argument_list|()
operator|.
name|setIntelState
argument_list|(
name|IntelState
operator|.
name|STARTED
argument_list|)
expr_stmt|;
if|if
condition|(
name|getChmSection
argument_list|()
operator|.
name|getTotal
argument_list|()
operator|>
literal|16
condition|)
name|getChmSection
argument_list|()
operator|.
name|setSwath
argument_list|(
name|getChmSection
argument_list|()
operator|.
name|getSwath
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
name|getState
argument_list|()
operator|.
name|setR0
argument_list|(
operator|(
operator|new
name|BigInteger
argument_list|(
name|getChmSection
argument_list|()
operator|.
name|reverseByteOrder
argument_list|(
name|getChmSection
argument_list|()
operator|.
name|unmarshalBytes
argument_list|(
literal|4
argument_list|)
argument_list|)
argument_list|)
operator|.
name|longValue
argument_list|()
operator|)
argument_list|)
expr_stmt|;
name|getState
argument_list|()
operator|.
name|setR1
argument_list|(
operator|(
operator|new
name|BigInteger
argument_list|(
name|getChmSection
argument_list|()
operator|.
name|reverseByteOrder
argument_list|(
name|getChmSection
argument_list|()
operator|.
name|unmarshalBytes
argument_list|(
literal|4
argument_list|)
argument_list|)
argument_list|)
operator|.
name|longValue
argument_list|()
operator|)
argument_list|)
expr_stmt|;
name|getState
argument_list|()
operator|.
name|setR2
argument_list|(
operator|(
operator|new
name|BigInteger
argument_list|(
name|getChmSection
argument_list|()
operator|.
name|reverseByteOrder
argument_list|(
name|getChmSection
argument_list|()
operator|.
name|unmarshalBytes
argument_list|(
literal|4
argument_list|)
argument_list|)
argument_list|)
operator|.
name|longValue
argument_list|()
operator|)
argument_list|)
expr_stmt|;
break|break;
default|default:
break|break;
block|}
block|}
name|int
name|tempLen
decl_stmt|;
if|if
condition|(
name|getContentLength
argument_list|()
operator|+
name|getState
argument_list|()
operator|.
name|getBlockRemaining
argument_list|()
operator|>
name|getBlockLength
argument_list|()
condition|)
block|{
name|getState
argument_list|()
operator|.
name|setBlockRemaining
argument_list|(
name|getContentLength
argument_list|()
operator|+
name|getState
argument_list|()
operator|.
name|getBlockRemaining
argument_list|()
operator|-
operator|(
name|int
operator|)
name|getBlockLength
argument_list|()
argument_list|)
expr_stmt|;
name|tempLen
operator|=
operator|(
name|int
operator|)
name|getBlockLength
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|tempLen
operator|=
name|getContentLength
argument_list|()
operator|+
name|getState
argument_list|()
operator|.
name|getBlockRemaining
argument_list|()
expr_stmt|;
name|getState
argument_list|()
operator|.
name|setBlockRemaining
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
name|int
name|lastLength
init|=
name|getContentLength
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|getState
argument_list|()
operator|.
name|getBlockType
argument_list|()
condition|)
block|{
case|case
name|ChmCommons
operator|.
name|ALIGNED_OFFSET
case|:
comment|// if(prevblock.lzxState.length>prevblock.lzxState.remaining)
name|decompressAlignedBlock
argument_list|(
name|tempLen
argument_list|,
name|getChmSection
argument_list|()
operator|.
name|getData
argument_list|()
argument_list|)
expr_stmt|;
comment|// prevcontext
break|break;
case|case
name|ChmCommons
operator|.
name|VERBATIM
case|:
name|decompressVerbatimBlock
argument_list|(
name|tempLen
argument_list|,
name|getChmSection
argument_list|()
operator|.
name|getData
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|ChmCommons
operator|.
name|UNCOMPRESSED
case|:
name|decompressUncompressedBlock
argument_list|(
name|tempLen
argument_list|,
name|getChmSection
argument_list|()
operator|.
name|getData
argument_list|()
argument_list|)
expr_stmt|;
break|break;
block|}
name|getState
argument_list|()
operator|.
name|increaseFramesRead
argument_list|()
expr_stmt|;
if|if
condition|(
operator|(
name|getState
argument_list|()
operator|.
name|getFramesRead
argument_list|()
operator|<
literal|32768
operator|)
operator|&&
name|getState
argument_list|()
operator|.
name|getIntelFileSize
argument_list|()
operator|!=
literal|0
condition|)
name|intelE8Decoding
argument_list|()
expr_stmt|;
name|continueLoop
operator|=
name|getContentLength
argument_list|()
operator|>
name|lastLength
expr_stmt|;
block|}
block|}
block|}
specifier|protected
name|void
name|intelE8Decoding
parameter_list|()
block|{
if|if
condition|(
name|getBlockLength
argument_list|()
operator|<=
name|ChmConstants
operator|.
name|LZX_PRETREE_TABLEBITS
operator|||
operator|(
name|getState
argument_list|()
operator|.
name|getIntelState
argument_list|()
operator|==
name|IntelState
operator|.
name|NOT_STARTED
operator|)
condition|)
block|{
name|getState
argument_list|()
operator|.
name|setBlockRemaining
argument_list|(
name|getState
argument_list|()
operator|.
name|getBlockRemaining
argument_list|()
operator|-
operator|(
name|int
operator|)
name|getBlockLength
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|long
name|curpos
init|=
name|getState
argument_list|()
operator|.
name|getBlockRemaining
argument_list|()
decl_stmt|;
name|getState
argument_list|()
operator|.
name|setBlockRemaining
argument_list|(
name|getState
argument_list|()
operator|.
name|getBlockRemaining
argument_list|()
operator|-
operator|(
name|int
operator|)
name|getBlockLength
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|i
operator|<
name|getBlockLength
argument_list|()
operator|-
literal|10
condition|)
block|{
if|if
condition|(
name|content
index|[
name|i
index|]
operator|!=
literal|0xe8
condition|)
block|{
name|i
operator|++
expr_stmt|;
continue|continue;
block|}
name|byte
index|[]
name|b
init|=
operator|new
name|byte
index|[
literal|4
index|]
decl_stmt|;
name|b
index|[
literal|0
index|]
operator|=
name|getContent
argument_list|()
index|[
name|i
operator|+
literal|3
index|]
expr_stmt|;
name|b
index|[
literal|1
index|]
operator|=
name|getContent
argument_list|()
index|[
name|i
operator|+
literal|2
index|]
expr_stmt|;
name|b
index|[
literal|2
index|]
operator|=
name|getContent
argument_list|()
index|[
name|i
operator|+
literal|1
index|]
expr_stmt|;
name|b
index|[
literal|3
index|]
operator|=
name|getContent
argument_list|()
index|[
name|i
operator|+
literal|0
index|]
expr_stmt|;
name|long
name|absoff
init|=
operator|(
operator|new
name|BigInteger
argument_list|(
name|b
argument_list|)
operator|)
operator|.
name|longValue
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
name|absoff
operator|>=
operator|-
name|curpos
operator|)
operator|&&
operator|(
name|absoff
operator|<
name|getState
argument_list|()
operator|.
name|getIntelFileSize
argument_list|()
operator|)
condition|)
block|{
name|long
name|reloff
init|=
operator|(
name|absoff
operator|>=
literal|0
operator|)
condition|?
name|absoff
operator|-
name|curpos
else|:
name|absoff
operator|+
name|getState
argument_list|()
operator|.
name|getIntelFileSize
argument_list|()
decl_stmt|;
name|getContent
argument_list|()
index|[
name|i
operator|+
literal|0
index|]
operator|=
operator|(
name|byte
operator|)
name|reloff
expr_stmt|;
name|getContent
argument_list|()
index|[
name|i
operator|+
literal|1
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
name|reloff
operator|>>>
literal|8
argument_list|)
expr_stmt|;
name|getContent
argument_list|()
index|[
name|i
operator|+
literal|2
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
name|reloff
operator|>>>
literal|16
argument_list|)
expr_stmt|;
name|getContent
argument_list|()
index|[
name|i
operator|+
literal|3
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
name|reloff
operator|>>>
literal|24
argument_list|)
expr_stmt|;
block|}
name|i
operator|+=
literal|4
expr_stmt|;
name|curpos
operator|+=
literal|5
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|short
index|[]
name|createPreLenTable
parameter_list|()
block|{
name|short
index|[]
name|tmp
init|=
operator|new
name|short
index|[
name|ChmConstants
operator|.
name|LZX_PRETREE_MAXSYMBOLS
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|ChmConstants
operator|.
name|LZX_PRETREE_MAXSYMBOLS
condition|;
name|i
operator|++
control|)
block|{
name|tmp
index|[
name|i
index|]
operator|=
operator|(
name|short
operator|)
name|getChmSection
argument_list|()
operator|.
name|getSyncBits
argument_list|(
name|ChmConstants
operator|.
name|LZX_PRETREE_NUM_ELEMENTS_BITS
argument_list|)
expr_stmt|;
block|}
return|return
name|tmp
return|;
block|}
specifier|private
name|void
name|createLengthTreeTable
parameter_list|()
throws|throws
name|TikaException
block|{
name|short
index|[]
name|prelentable
init|=
name|createPreLenTable
argument_list|()
decl_stmt|;
if|if
condition|(
name|prelentable
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ChmParsingException
argument_list|(
literal|"pretreetable is null"
argument_list|)
throw|;
block|}
name|short
index|[]
name|pretreetable
init|=
name|createTreeTable2
argument_list|(
name|prelentable
argument_list|,
operator|(
literal|1
operator|<<
name|ChmConstants
operator|.
name|LZX_PRETREE_TABLEBITS
operator|)
operator|+
operator|(
name|ChmConstants
operator|.
name|LZX_PRETREE_MAXSYMBOLS
operator|<<
literal|1
operator|)
argument_list|,
name|ChmConstants
operator|.
name|LZX_PRETREE_TABLEBITS
argument_list|,
name|ChmConstants
operator|.
name|LZX_PRETREE_MAXSYMBOLS
argument_list|)
decl_stmt|;
if|if
condition|(
name|pretreetable
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ChmParsingException
argument_list|(
literal|"pretreetable is null"
argument_list|)
throw|;
block|}
name|createLengthTreeLenTable
argument_list|(
literal|0
argument_list|,
name|ChmConstants
operator|.
name|LZX_NUM_SECONDARY_LENGTHS
argument_list|,
name|pretreetable
argument_list|,
name|prelentable
argument_list|)
expr_stmt|;
name|getState
argument_list|()
operator|.
name|setLengthTreeTable
argument_list|(
name|createTreeTable2
argument_list|(
name|getState
argument_list|()
operator|.
name|getLengthTreeLengtsTable
argument_list|()
argument_list|,
operator|(
literal|1
operator|<<
name|ChmConstants
operator|.
name|LZX_MAINTREE_TABLEBITS
operator|)
operator|+
operator|(
name|ChmConstants
operator|.
name|LZX_LENGTH_MAXSYMBOLS
operator|<<
literal|1
operator|)
argument_list|,
name|ChmConstants
operator|.
name|LZX_MAINTREE_TABLEBITS
argument_list|,
name|ChmConstants
operator|.
name|LZX_NUM_SECONDARY_LENGTHS
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|decompressUncompressedBlock
parameter_list|(
name|int
name|len
parameter_list|,
name|byte
index|[]
name|prevcontent
parameter_list|)
block|{
if|if
condition|(
name|getContentLength
argument_list|()
operator|+
name|getState
argument_list|()
operator|.
name|getBlockRemaining
argument_list|()
operator|<=
name|getBlockLength
argument_list|()
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
name|getContentLength
argument_list|()
init|;
name|i
operator|<
operator|(
name|getContentLength
argument_list|()
operator|+
name|getState
argument_list|()
operator|.
name|getBlockRemaining
argument_list|()
operator|)
condition|;
name|i
operator|++
control|)
name|content
index|[
name|i
index|]
operator|=
name|getChmSection
argument_list|()
operator|.
name|getByte
argument_list|()
expr_stmt|;
name|setContentLength
argument_list|(
name|getContentLength
argument_list|()
operator|+
name|getState
argument_list|()
operator|.
name|getBlockRemaining
argument_list|()
argument_list|)
expr_stmt|;
name|getState
argument_list|()
operator|.
name|setBlockRemaining
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|int
name|i
init|=
name|getContentLength
argument_list|()
init|;
name|i
operator|<
name|getBlockLength
argument_list|()
condition|;
name|i
operator|++
control|)
name|content
index|[
name|i
index|]
operator|=
name|getChmSection
argument_list|()
operator|.
name|getByte
argument_list|()
expr_stmt|;
name|getState
argument_list|()
operator|.
name|setBlockRemaining
argument_list|(
operator|(
name|int
operator|)
name|getBlockLength
argument_list|()
operator|-
name|getContentLength
argument_list|()
argument_list|)
expr_stmt|;
comment|// = blockLen -
comment|// contentlen;
name|setContentLength
argument_list|(
operator|(
name|int
operator|)
name|getBlockLength
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|decompressAlignedBlock
parameter_list|(
name|int
name|len
parameter_list|,
name|byte
index|[]
name|prevcontent
parameter_list|)
throws|throws
name|TikaException
block|{
if|if
condition|(
operator|(
name|getChmSection
argument_list|()
operator|==
literal|null
operator|)
operator|||
operator|(
name|getState
argument_list|()
operator|==
literal|null
operator|)
operator|||
operator|(
name|getState
argument_list|()
operator|.
name|getMainTreeTable
argument_list|()
operator|==
literal|null
operator|)
condition|)
throw|throw
operator|new
name|ChmParsingException
argument_list|(
literal|"chm section is null"
argument_list|)
throw|;
name|short
name|s
decl_stmt|;
name|int
name|x
decl_stmt|,
name|i
decl_stmt|,
name|border
decl_stmt|;
name|int
name|matchlen
init|=
literal|0
decl_stmt|,
name|matchfooter
init|=
literal|0
decl_stmt|,
name|extra
decl_stmt|,
name|rundest
decl_stmt|,
name|runsrc
decl_stmt|;
name|int
name|matchoffset
init|=
literal|0
decl_stmt|;
for|for
control|(
name|i
operator|=
name|getContentLength
argument_list|()
init|;
name|i
operator|<
name|len
condition|;
name|i
operator|++
control|)
block|{
comment|/* new code */
name|border
operator|=
name|getChmSection
argument_list|()
operator|.
name|getDesyncBits
argument_list|(
name|ChmConstants
operator|.
name|LZX_MAINTREE_TABLEBITS
argument_list|,
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|border
operator|>=
name|getState
argument_list|()
operator|.
name|mainTreeTable
operator|.
name|length
condition|)
break|break;
comment|/* end new code */
name|s
operator|=
name|getState
argument_list|()
operator|.
name|mainTreeTable
index|[
name|getChmSection
argument_list|()
operator|.
name|getDesyncBits
argument_list|(
name|ChmConstants
operator|.
name|LZX_MAINTREE_TABLEBITS
argument_list|,
literal|0
argument_list|)
index|]
expr_stmt|;
if|if
condition|(
name|s
operator|>=
name|getState
argument_list|()
operator|.
name|getMainTreeElements
argument_list|()
condition|)
block|{
name|x
operator|=
name|ChmConstants
operator|.
name|LZX_MAINTREE_TABLEBITS
expr_stmt|;
do|do
block|{
name|x
operator|++
expr_stmt|;
name|s
operator|<<=
literal|1
expr_stmt|;
name|s
operator|+=
name|getChmSection
argument_list|()
operator|.
name|checkBit
argument_list|(
name|x
argument_list|)
expr_stmt|;
block|}
do|while
condition|(
operator|(
name|s
operator|=
name|getState
argument_list|()
operator|.
name|mainTreeTable
index|[
name|s
index|]
operator|)
operator|>=
name|getState
argument_list|()
operator|.
name|getMainTreeElements
argument_list|()
condition|)
do|;
block|}
name|getChmSection
argument_list|()
operator|.
name|getSyncBits
argument_list|(
name|getState
argument_list|()
operator|.
name|mainTreeTable
index|[
name|s
index|]
argument_list|)
expr_stmt|;
if|if
condition|(
name|s
operator|<
name|ChmConstants
operator|.
name|LZX_NUM_CHARS
condition|)
block|{
name|content
index|[
name|i
index|]
operator|=
operator|(
name|byte
operator|)
name|s
expr_stmt|;
block|}
else|else
block|{
name|s
operator|-=
name|ChmConstants
operator|.
name|LZX_NUM_CHARS
expr_stmt|;
name|matchlen
operator|=
name|s
operator|&
name|ChmConstants
operator|.
name|LZX_NUM_PRIMARY_LENGTHS
expr_stmt|;
if|if
condition|(
name|matchlen
operator|==
name|ChmConstants
operator|.
name|LZX_NUM_PRIMARY_LENGTHS
condition|)
block|{
name|matchfooter
operator|=
name|getState
argument_list|()
operator|.
name|lengthTreeTable
index|[
name|getChmSection
argument_list|()
operator|.
name|getDesyncBits
argument_list|(
name|ChmConstants
operator|.
name|LZX_MAINTREE_TABLEBITS
argument_list|,
literal|0
argument_list|)
index|]
expr_stmt|;
if|if
condition|(
name|matchfooter
operator|>=
name|ChmConstants
operator|.
name|LZX_MAINTREE_TABLEBITS
condition|)
block|{
name|x
operator|=
name|ChmConstants
operator|.
name|LZX_MAINTREE_TABLEBITS
expr_stmt|;
do|do
block|{
name|x
operator|++
expr_stmt|;
name|matchfooter
operator|<<=
literal|1
expr_stmt|;
name|matchfooter
operator|+=
name|getChmSection
argument_list|()
operator|.
name|checkBit
argument_list|(
name|x
argument_list|)
expr_stmt|;
block|}
do|while
condition|(
operator|(
name|matchfooter
operator|=
name|getState
argument_list|()
operator|.
name|lengthTreeTable
index|[
name|matchfooter
index|]
operator|)
operator|>=
name|ChmConstants
operator|.
name|LZX_NUM_SECONDARY_LENGTHS
condition|)
do|;
block|}
name|getChmSection
argument_list|()
operator|.
name|getSyncBits
argument_list|(
name|getState
argument_list|()
operator|.
name|lengthTreeLengtsTable
index|[
name|matchfooter
index|]
argument_list|)
expr_stmt|;
name|matchlen
operator|+=
name|matchfooter
expr_stmt|;
block|}
name|matchlen
operator|+=
name|ChmConstants
operator|.
name|LZX_MIN_MATCH
expr_stmt|;
name|matchoffset
operator|=
name|s
operator|>>>
literal|3
expr_stmt|;
if|if
condition|(
name|matchoffset
operator|>
literal|2
condition|)
block|{
name|extra
operator|=
name|ChmConstants
operator|.
name|EXTRA_BITS
index|[
name|matchoffset
index|]
expr_stmt|;
name|matchoffset
operator|=
operator|(
name|ChmConstants
operator|.
name|POSITION_BASE
index|[
name|matchoffset
index|]
operator|-
literal|2
operator|)
expr_stmt|;
if|if
condition|(
name|extra
operator|>
literal|3
condition|)
block|{
name|extra
operator|-=
literal|3
expr_stmt|;
name|long
name|l
init|=
name|getChmSection
argument_list|()
operator|.
name|getSyncBits
argument_list|(
name|extra
argument_list|)
decl_stmt|;
name|matchoffset
operator|+=
operator|(
name|l
operator|<<
literal|3
operator|)
expr_stmt|;
name|int
name|g
init|=
name|getChmSection
argument_list|()
operator|.
name|getDesyncBits
argument_list|(
name|ChmConstants
operator|.
name|LZX_NUM_PRIMARY_LENGTHS
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|int
name|t
init|=
name|getState
argument_list|()
operator|.
name|getAlignedTreeTable
argument_list|()
index|[
name|g
index|]
decl_stmt|;
if|if
condition|(
name|t
operator|>=
name|getState
argument_list|()
operator|.
name|getMainTreeElements
argument_list|()
condition|)
block|{
name|x
operator|=
name|ChmConstants
operator|.
name|LZX_MAINTREE_TABLEBITS
expr_stmt|;
do|do
block|{
name|x
operator|++
expr_stmt|;
name|t
operator|<<=
literal|1
expr_stmt|;
name|t
operator|+=
name|getChmSection
argument_list|()
operator|.
name|checkBit
argument_list|(
name|x
argument_list|)
expr_stmt|;
block|}
do|while
condition|(
operator|(
name|t
operator|=
name|getState
argument_list|()
operator|.
name|getAlignedTreeTable
argument_list|()
index|[
name|t
index|]
operator|)
operator|>=
name|getState
argument_list|()
operator|.
name|getMainTreeElements
argument_list|()
condition|)
do|;
block|}
name|getChmSection
argument_list|()
operator|.
name|getSyncBits
argument_list|(
name|getState
argument_list|()
operator|.
name|getAlignedTreeTable
argument_list|()
index|[
name|t
index|]
argument_list|)
expr_stmt|;
name|matchoffset
operator|+=
name|t
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|extra
operator|==
literal|3
condition|)
block|{
name|int
name|g
init|=
name|getChmSection
argument_list|()
operator|.
name|getDesyncBits
argument_list|(
name|ChmConstants
operator|.
name|LZX_NUM_PRIMARY_LENGTHS
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|int
name|t
init|=
name|getState
argument_list|()
operator|.
name|getAlignedTreeTable
argument_list|()
index|[
name|g
index|]
decl_stmt|;
if|if
condition|(
name|t
operator|>=
name|getState
argument_list|()
operator|.
name|getMainTreeElements
argument_list|()
condition|)
block|{
name|x
operator|=
name|ChmConstants
operator|.
name|LZX_MAINTREE_TABLEBITS
expr_stmt|;
do|do
block|{
name|x
operator|++
expr_stmt|;
name|t
operator|<<=
literal|1
expr_stmt|;
name|t
operator|+=
name|getChmSection
argument_list|()
operator|.
name|checkBit
argument_list|(
name|x
argument_list|)
expr_stmt|;
block|}
do|while
condition|(
operator|(
name|t
operator|=
name|getState
argument_list|()
operator|.
name|getAlignedTreeTable
argument_list|()
index|[
name|t
index|]
operator|)
operator|>=
name|getState
argument_list|()
operator|.
name|getMainTreeElements
argument_list|()
condition|)
do|;
block|}
name|getChmSection
argument_list|()
operator|.
name|getSyncBits
argument_list|(
name|getState
argument_list|()
operator|.
name|getAlignedTreeTable
argument_list|()
index|[
name|t
index|]
argument_list|)
expr_stmt|;
name|matchoffset
operator|+=
name|t
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|extra
operator|>
literal|0
condition|)
block|{
name|long
name|l
init|=
name|getChmSection
argument_list|()
operator|.
name|getSyncBits
argument_list|(
name|extra
argument_list|)
decl_stmt|;
name|matchoffset
operator|+=
name|l
expr_stmt|;
block|}
else|else
name|matchoffset
operator|=
literal|1
expr_stmt|;
name|getState
argument_list|()
operator|.
name|setR2
argument_list|(
name|getState
argument_list|()
operator|.
name|getR1
argument_list|()
argument_list|)
expr_stmt|;
name|getState
argument_list|()
operator|.
name|setR1
argument_list|(
name|getState
argument_list|()
operator|.
name|getR0
argument_list|()
argument_list|)
expr_stmt|;
name|getState
argument_list|()
operator|.
name|setR0
argument_list|(
name|matchoffset
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|matchoffset
operator|==
literal|0
condition|)
block|{
name|matchoffset
operator|=
operator|(
name|int
operator|)
name|getState
argument_list|()
operator|.
name|getR0
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|matchoffset
operator|==
literal|1
condition|)
block|{
name|matchoffset
operator|=
operator|(
name|int
operator|)
name|getState
argument_list|()
operator|.
name|getR1
argument_list|()
expr_stmt|;
name|getState
argument_list|()
operator|.
name|setR1
argument_list|(
name|getState
argument_list|()
operator|.
name|getR0
argument_list|()
argument_list|)
expr_stmt|;
name|getState
argument_list|()
operator|.
name|setR0
argument_list|(
name|matchoffset
argument_list|)
expr_stmt|;
block|}
else|else
comment|/** match_offset == 2 */
block|{
name|matchoffset
operator|=
operator|(
name|int
operator|)
name|getState
argument_list|()
operator|.
name|getR2
argument_list|()
expr_stmt|;
name|getState
argument_list|()
operator|.
name|setR2
argument_list|(
name|getState
argument_list|()
operator|.
name|getR0
argument_list|()
argument_list|)
expr_stmt|;
name|getState
argument_list|()
operator|.
name|setR0
argument_list|(
name|matchoffset
argument_list|)
expr_stmt|;
block|}
name|rundest
operator|=
name|i
expr_stmt|;
name|runsrc
operator|=
name|rundest
operator|-
name|matchoffset
expr_stmt|;
name|i
operator|+=
operator|(
name|matchlen
operator|-
literal|1
operator|)
expr_stmt|;
if|if
condition|(
name|i
operator|>
name|len
condition|)
break|break;
if|if
condition|(
name|runsrc
operator|<
literal|0
condition|)
block|{
if|if
condition|(
name|matchlen
operator|+
name|runsrc
operator|<=
literal|0
condition|)
block|{
name|runsrc
operator|=
name|prevcontent
operator|.
name|length
operator|+
name|runsrc
expr_stmt|;
while|while
condition|(
name|matchlen
operator|--
operator|>
literal|0
condition|)
name|content
index|[
name|rundest
operator|++
index|]
operator|=
name|prevcontent
index|[
name|runsrc
operator|++
index|]
expr_stmt|;
block|}
else|else
block|{
name|runsrc
operator|=
name|prevcontent
operator|.
name|length
operator|+
name|runsrc
expr_stmt|;
while|while
condition|(
name|runsrc
operator|<
name|prevcontent
operator|.
name|length
condition|)
name|content
index|[
name|rundest
operator|++
index|]
operator|=
name|prevcontent
index|[
name|runsrc
operator|++
index|]
expr_stmt|;
name|matchlen
operator|=
name|matchlen
operator|+
name|runsrc
operator|-
name|prevcontent
operator|.
name|length
expr_stmt|;
name|runsrc
operator|=
literal|0
expr_stmt|;
while|while
condition|(
name|matchlen
operator|--
operator|>
literal|0
condition|)
name|content
index|[
name|rundest
operator|++
index|]
operator|=
name|content
index|[
name|runsrc
operator|++
index|]
expr_stmt|;
block|}
block|}
else|else
block|{
comment|/* copies any wrappes around source data */
while|while
condition|(
operator|(
name|runsrc
operator|<
literal|0
operator|)
operator|&&
operator|(
name|matchlen
operator|--
operator|>
literal|0
operator|)
condition|)
block|{
name|content
index|[
name|rundest
operator|++
index|]
operator|=
name|content
index|[
call|(
name|int
call|)
argument_list|(
name|runsrc
operator|+
name|getBlockLength
argument_list|()
argument_list|)
index|]
expr_stmt|;
name|runsrc
operator|++
expr_stmt|;
block|}
comment|/* copies match data - no worries about destination wraps */
while|while
condition|(
name|matchlen
operator|--
operator|>
literal|0
condition|)
name|content
index|[
name|rundest
operator|++
index|]
operator|=
name|content
index|[
name|runsrc
operator|++
index|]
expr_stmt|;
block|}
block|}
block|}
name|setContentLength
argument_list|(
name|len
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|assertShortArrayNotNull
parameter_list|(
name|short
index|[]
name|array
parameter_list|)
throws|throws
name|TikaException
block|{
if|if
condition|(
name|array
operator|==
literal|null
condition|)
throw|throw
operator|new
name|ChmParsingException
argument_list|(
literal|"short[] is null"
argument_list|)
throw|;
block|}
specifier|private
name|void
name|decompressVerbatimBlock
parameter_list|(
name|int
name|len
parameter_list|,
name|byte
index|[]
name|prevcontent
parameter_list|)
throws|throws
name|TikaException
block|{
name|short
name|s
decl_stmt|;
name|int
name|x
decl_stmt|,
name|i
decl_stmt|;
name|int
name|matchlen
init|=
literal|0
decl_stmt|,
name|matchfooter
init|=
literal|0
decl_stmt|,
name|extra
decl_stmt|,
name|rundest
decl_stmt|,
name|runsrc
decl_stmt|;
name|int
name|matchoffset
init|=
literal|0
decl_stmt|;
for|for
control|(
name|i
operator|=
name|getContentLength
argument_list|()
init|;
name|i
operator|<
name|len
condition|;
name|i
operator|++
control|)
block|{
name|int
name|f
init|=
name|getChmSection
argument_list|()
operator|.
name|getDesyncBits
argument_list|(
name|ChmConstants
operator|.
name|LZX_MAINTREE_TABLEBITS
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|assertShortArrayNotNull
argument_list|(
name|getState
argument_list|()
operator|.
name|getMainTreeTable
argument_list|()
argument_list|)
expr_stmt|;
name|s
operator|=
name|getState
argument_list|()
operator|.
name|getMainTreeTable
argument_list|()
index|[
name|f
index|]
expr_stmt|;
if|if
condition|(
name|s
operator|>=
name|ChmConstants
operator|.
name|LZX_MAIN_MAXSYMBOLS
condition|)
block|{
name|x
operator|=
name|ChmConstants
operator|.
name|LZX_MAINTREE_TABLEBITS
expr_stmt|;
do|do
block|{
name|x
operator|++
expr_stmt|;
name|s
operator|<<=
literal|1
expr_stmt|;
name|s
operator|+=
name|getChmSection
argument_list|()
operator|.
name|checkBit
argument_list|(
name|x
argument_list|)
expr_stmt|;
block|}
do|while
condition|(
operator|(
name|s
operator|=
name|getState
argument_list|()
operator|.
name|getMainTreeTable
argument_list|()
index|[
name|s
index|]
operator|)
operator|>=
name|ChmConstants
operator|.
name|LZX_MAIN_MAXSYMBOLS
condition|)
do|;
block|}
name|getChmSection
argument_list|()
operator|.
name|getSyncBits
argument_list|(
name|getState
argument_list|()
operator|.
name|getMainTreeLengtsTable
argument_list|()
index|[
name|s
index|]
argument_list|)
expr_stmt|;
if|if
condition|(
name|s
operator|<
name|ChmConstants
operator|.
name|LZX_NUM_CHARS
condition|)
block|{
name|content
index|[
name|i
index|]
operator|=
operator|(
name|byte
operator|)
name|s
expr_stmt|;
block|}
else|else
block|{
name|s
operator|-=
name|ChmConstants
operator|.
name|LZX_NUM_CHARS
expr_stmt|;
name|matchlen
operator|=
name|s
operator|&
name|ChmConstants
operator|.
name|LZX_NUM_PRIMARY_LENGTHS
expr_stmt|;
if|if
condition|(
name|matchlen
operator|==
name|ChmConstants
operator|.
name|LZX_NUM_PRIMARY_LENGTHS
condition|)
block|{
name|matchfooter
operator|=
name|getState
argument_list|()
operator|.
name|getLengthTreeTable
argument_list|()
index|[
name|getChmSection
argument_list|()
operator|.
name|getDesyncBits
argument_list|(
name|ChmConstants
operator|.
name|LZX_LENGTH_TABLEBITS
argument_list|,
literal|0
argument_list|)
index|]
expr_stmt|;
if|if
condition|(
name|matchfooter
operator|>=
name|ChmConstants
operator|.
name|LZX_NUM_SECONDARY_LENGTHS
condition|)
block|{
name|x
operator|=
name|ChmConstants
operator|.
name|LZX_LENGTH_TABLEBITS
expr_stmt|;
do|do
block|{
name|x
operator|++
expr_stmt|;
name|matchfooter
operator|<<=
literal|1
expr_stmt|;
name|matchfooter
operator|+=
name|getChmSection
argument_list|()
operator|.
name|checkBit
argument_list|(
name|x
argument_list|)
expr_stmt|;
block|}
do|while
condition|(
operator|(
name|matchfooter
operator|=
name|getState
argument_list|()
operator|.
name|getLengthTreeTable
argument_list|()
index|[
name|matchfooter
index|]
operator|)
operator|>=
name|ChmConstants
operator|.
name|LZX_NUM_SECONDARY_LENGTHS
condition|)
do|;
block|}
name|getChmSection
argument_list|()
operator|.
name|getSyncBits
argument_list|(
name|getState
argument_list|()
operator|.
name|getLengthTreeLengtsTable
argument_list|()
index|[
name|matchfooter
index|]
argument_list|)
expr_stmt|;
name|matchlen
operator|+=
name|matchfooter
expr_stmt|;
block|}
name|matchlen
operator|+=
name|ChmConstants
operator|.
name|LZX_MIN_MATCH
expr_stmt|;
comment|// shorter than 2
name|matchoffset
operator|=
name|s
operator|>>>
literal|3
expr_stmt|;
if|if
condition|(
name|matchoffset
operator|>
literal|2
condition|)
block|{
if|if
condition|(
name|matchoffset
operator|!=
literal|3
condition|)
block|{
comment|// should get other bits to retrieve
comment|// offset
name|extra
operator|=
name|ChmConstants
operator|.
name|EXTRA_BITS
index|[
name|matchoffset
index|]
expr_stmt|;
name|long
name|l
init|=
name|getChmSection
argument_list|()
operator|.
name|getSyncBits
argument_list|(
name|extra
argument_list|)
decl_stmt|;
name|matchoffset
operator|=
call|(
name|int
call|)
argument_list|(
name|ChmConstants
operator|.
name|POSITION_BASE
index|[
name|matchoffset
index|]
operator|-
literal|2
operator|+
name|l
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|matchoffset
operator|=
literal|1
expr_stmt|;
block|}
name|getState
argument_list|()
operator|.
name|setR2
argument_list|(
name|getState
argument_list|()
operator|.
name|getR1
argument_list|()
argument_list|)
expr_stmt|;
name|getState
argument_list|()
operator|.
name|setR1
argument_list|(
name|getState
argument_list|()
operator|.
name|getR0
argument_list|()
argument_list|)
expr_stmt|;
name|getState
argument_list|()
operator|.
name|setR0
argument_list|(
name|matchoffset
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|matchoffset
operator|==
literal|0
condition|)
block|{
name|matchoffset
operator|=
operator|(
name|int
operator|)
name|getState
argument_list|()
operator|.
name|getR0
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|matchoffset
operator|==
literal|1
condition|)
block|{
name|matchoffset
operator|=
operator|(
name|int
operator|)
name|getState
argument_list|()
operator|.
name|getR1
argument_list|()
expr_stmt|;
name|getState
argument_list|()
operator|.
name|setR1
argument_list|(
name|getState
argument_list|()
operator|.
name|getR0
argument_list|()
argument_list|)
expr_stmt|;
name|getState
argument_list|()
operator|.
name|setR0
argument_list|(
name|matchoffset
argument_list|)
expr_stmt|;
block|}
else|else
comment|/* match_offset == 2 */
block|{
name|matchoffset
operator|=
operator|(
name|int
operator|)
name|getState
argument_list|()
operator|.
name|getR2
argument_list|()
expr_stmt|;
name|getState
argument_list|()
operator|.
name|setR2
argument_list|(
name|getState
argument_list|()
operator|.
name|getR0
argument_list|()
argument_list|)
expr_stmt|;
name|getState
argument_list|()
operator|.
name|setR0
argument_list|(
name|matchoffset
argument_list|)
expr_stmt|;
block|}
name|rundest
operator|=
name|i
expr_stmt|;
name|runsrc
operator|=
name|rundest
operator|-
name|matchoffset
expr_stmt|;
name|i
operator|+=
operator|(
name|matchlen
operator|-
literal|1
operator|)
expr_stmt|;
if|if
condition|(
name|i
operator|>
name|len
condition|)
break|break;
if|if
condition|(
name|runsrc
operator|<
literal|0
condition|)
block|{
if|if
condition|(
name|matchlen
operator|+
name|runsrc
operator|<=
literal|0
condition|)
block|{
name|runsrc
operator|=
name|prevcontent
operator|.
name|length
operator|+
name|runsrc
expr_stmt|;
while|while
condition|(
operator|(
name|matchlen
operator|--
operator|>
literal|0
operator|)
operator|&&
operator|(
name|prevcontent
operator|!=
literal|null
operator|)
operator|&&
operator|(
operator|(
name|runsrc
operator|+
literal|1
operator|)
operator|>
literal|0
operator|)
condition|)
if|if
condition|(
operator|(
name|rundest
operator|<
name|content
operator|.
name|length
operator|)
operator|&&
operator|(
name|runsrc
operator|<
name|content
operator|.
name|length
operator|)
condition|)
name|content
index|[
name|rundest
operator|++
index|]
operator|=
name|prevcontent
index|[
name|runsrc
operator|++
index|]
expr_stmt|;
block|}
else|else
block|{
name|runsrc
operator|=
name|prevcontent
operator|.
name|length
operator|+
name|runsrc
expr_stmt|;
while|while
condition|(
name|runsrc
operator|<
name|prevcontent
operator|.
name|length
condition|)
if|if
condition|(
operator|(
name|rundest
operator|<
name|content
operator|.
name|length
operator|)
operator|&&
operator|(
name|runsrc
operator|<
name|content
operator|.
name|length
operator|)
condition|)
name|content
index|[
name|rundest
operator|++
index|]
operator|=
name|prevcontent
index|[
name|runsrc
operator|++
index|]
expr_stmt|;
name|matchlen
operator|=
name|matchlen
operator|+
name|runsrc
operator|-
name|prevcontent
operator|.
name|length
expr_stmt|;
name|runsrc
operator|=
literal|0
expr_stmt|;
while|while
condition|(
name|matchlen
operator|--
operator|>
literal|0
condition|)
name|content
index|[
name|rundest
operator|++
index|]
operator|=
name|content
index|[
name|runsrc
operator|++
index|]
expr_stmt|;
block|}
block|}
else|else
block|{
comment|/* copies any wrapped source data */
while|while
condition|(
operator|(
name|runsrc
operator|<
literal|0
operator|)
operator|&&
operator|(
name|matchlen
operator|--
operator|>
literal|0
operator|)
condition|)
block|{
name|content
index|[
name|rundest
operator|++
index|]
operator|=
name|content
index|[
call|(
name|int
call|)
argument_list|(
name|runsrc
operator|+
name|getBlockLength
argument_list|()
argument_list|)
index|]
expr_stmt|;
name|runsrc
operator|++
expr_stmt|;
block|}
comment|/* copies match data - no worries about destination wraps */
while|while
condition|(
name|matchlen
operator|--
operator|>
literal|0
condition|)
block|{
if|if
condition|(
operator|(
name|rundest
operator|<
name|content
operator|.
name|length
operator|)
operator|&&
operator|(
name|runsrc
operator|<
name|content
operator|.
name|length
operator|)
condition|)
name|content
index|[
name|rundest
operator|++
index|]
operator|=
name|content
index|[
name|runsrc
operator|++
index|]
expr_stmt|;
block|}
block|}
block|}
block|}
name|setContentLength
argument_list|(
name|len
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|createLengthTreeLenTable
parameter_list|(
name|int
name|offset
parameter_list|,
name|int
name|tablelen
parameter_list|,
name|short
index|[]
name|pretreetable
parameter_list|,
name|short
index|[]
name|prelentable
parameter_list|)
throws|throws
name|TikaException
block|{
if|if
condition|(
name|prelentable
operator|==
literal|null
operator|||
name|getChmSection
argument_list|()
operator|==
literal|null
operator|||
name|pretreetable
operator|==
literal|null
operator|||
name|prelentable
operator|==
literal|null
condition|)
throw|throw
operator|new
name|ChmParsingException
argument_list|(
literal|"is null"
argument_list|)
throw|;
name|int
name|i
init|=
name|offset
decl_stmt|;
comment|// represents offset
name|int
name|z
decl_stmt|,
name|y
decl_stmt|,
name|x
decl_stmt|;
comment|// local counters
while|while
condition|(
name|i
operator|<
name|tablelen
condition|)
block|{
name|z
operator|=
name|pretreetable
index|[
name|getChmSection
argument_list|()
operator|.
name|getDesyncBits
argument_list|(
name|ChmConstants
operator|.
name|LZX_PRETREE_TABLEBITS
argument_list|,
literal|0
argument_list|)
index|]
expr_stmt|;
if|if
condition|(
name|z
operator|>=
name|ChmConstants
operator|.
name|LZX_PRETREE_NUM_ELEMENTS
condition|)
block|{
comment|// 1 bug, should be
comment|// 20
name|x
operator|=
name|ChmConstants
operator|.
name|LZX_PRETREE_TABLEBITS
expr_stmt|;
do|do
block|{
name|x
operator|++
expr_stmt|;
name|z
operator|<<=
literal|1
expr_stmt|;
name|z
operator|+=
name|getChmSection
argument_list|()
operator|.
name|checkBit
argument_list|(
name|x
argument_list|)
expr_stmt|;
block|}
do|while
condition|(
operator|(
name|z
operator|=
name|pretreetable
index|[
name|z
index|]
operator|)
operator|>=
name|ChmConstants
operator|.
name|LZX_PRETREE_NUM_ELEMENTS
condition|)
do|;
block|}
name|getChmSection
argument_list|()
operator|.
name|getSyncBits
argument_list|(
name|prelentable
index|[
name|z
index|]
argument_list|)
expr_stmt|;
if|if
condition|(
name|z
operator|<
literal|17
condition|)
block|{
name|z
operator|=
name|getState
argument_list|()
operator|.
name|getLengthTreeLengtsTable
argument_list|()
index|[
name|i
index|]
operator|-
name|z
expr_stmt|;
if|if
condition|(
name|z
operator|<
literal|0
condition|)
name|z
operator|=
name|z
operator|+
literal|17
expr_stmt|;
name|getState
argument_list|()
operator|.
name|getLengthTreeLengtsTable
argument_list|()
index|[
name|i
index|]
operator|=
operator|(
name|short
operator|)
name|z
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|z
operator|==
literal|17
condition|)
block|{
name|y
operator|=
name|getChmSection
argument_list|()
operator|.
name|getSyncBits
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|y
operator|+=
literal|4
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|y
condition|;
name|j
operator|++
control|)
if|if
condition|(
name|i
operator|<
name|getState
argument_list|()
operator|.
name|getLengthTreeLengtsTable
argument_list|()
operator|.
name|length
condition|)
name|getState
argument_list|()
operator|.
name|getLengthTreeLengtsTable
argument_list|()
index|[
name|i
operator|++
index|]
operator|=
literal|0
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|z
operator|==
literal|18
condition|)
block|{
name|y
operator|=
name|getChmSection
argument_list|()
operator|.
name|getSyncBits
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|y
operator|+=
literal|20
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|y
condition|;
name|j
operator|++
control|)
if|if
condition|(
name|i
operator|<
name|getState
argument_list|()
operator|.
name|getLengthTreeLengtsTable
argument_list|()
operator|.
name|length
condition|)
name|getState
argument_list|()
operator|.
name|getLengthTreeLengtsTable
argument_list|()
index|[
name|i
operator|++
index|]
operator|=
literal|0
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|z
operator|==
literal|19
condition|)
block|{
name|y
operator|=
name|getChmSection
argument_list|()
operator|.
name|getSyncBits
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|y
operator|+=
literal|4
expr_stmt|;
name|z
operator|=
name|pretreetable
index|[
name|getChmSection
argument_list|()
operator|.
name|getDesyncBits
argument_list|(
name|ChmConstants
operator|.
name|LZX_PRETREE_TABLEBITS
argument_list|,
literal|0
argument_list|)
index|]
expr_stmt|;
if|if
condition|(
name|z
operator|>=
name|ChmConstants
operator|.
name|LZX_PRETREE_NUM_ELEMENTS
condition|)
block|{
comment|// 20
name|x
operator|=
name|ChmConstants
operator|.
name|LZX_PRETREE_TABLEBITS
expr_stmt|;
comment|// 6
do|do
block|{
name|x
operator|++
expr_stmt|;
name|z
operator|<<=
literal|1
expr_stmt|;
name|z
operator|+=
name|getChmSection
argument_list|()
operator|.
name|checkBit
argument_list|(
name|x
argument_list|)
expr_stmt|;
block|}
do|while
condition|(
operator|(
name|z
operator|=
name|pretreetable
index|[
name|z
index|]
operator|)
operator|>=
name|ChmConstants
operator|.
name|LZX_MAINTREE_TABLEBITS
condition|)
do|;
block|}
name|getChmSection
argument_list|()
operator|.
name|getSyncBits
argument_list|(
name|prelentable
index|[
name|z
index|]
argument_list|)
expr_stmt|;
name|z
operator|=
name|getState
argument_list|()
operator|.
name|getLengthTreeLengtsTable
argument_list|()
index|[
name|i
index|]
operator|-
name|z
expr_stmt|;
if|if
condition|(
name|z
operator|<
literal|0
condition|)
name|z
operator|=
name|z
operator|+
literal|17
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|y
condition|;
name|j
operator|++
control|)
name|getState
argument_list|()
operator|.
name|getLengthTreeLengtsTable
argument_list|()
index|[
name|i
operator|++
index|]
operator|=
operator|(
name|short
operator|)
name|z
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|createMainTreeTable
parameter_list|()
throws|throws
name|TikaException
block|{
name|short
index|[]
name|prelentable
init|=
name|createPreLenTable
argument_list|()
decl_stmt|;
name|short
index|[]
name|pretreetable
init|=
name|createTreeTable2
argument_list|(
name|prelentable
argument_list|,
operator|(
literal|1
operator|<<
name|ChmConstants
operator|.
name|LZX_PRETREE_TABLEBITS
operator|)
operator|+
operator|(
name|ChmConstants
operator|.
name|LZX_PRETREE_MAXSYMBOLS
operator|<<
literal|1
operator|)
argument_list|,
name|ChmConstants
operator|.
name|LZX_PRETREE_TABLEBITS
argument_list|,
name|ChmConstants
operator|.
name|LZX_PRETREE_MAXSYMBOLS
argument_list|)
decl_stmt|;
name|createMainTreeLenTable
argument_list|(
literal|0
argument_list|,
name|ChmConstants
operator|.
name|LZX_NUM_CHARS
argument_list|,
name|pretreetable
argument_list|,
name|prelentable
argument_list|)
expr_stmt|;
name|prelentable
operator|=
name|createPreLenTable
argument_list|()
expr_stmt|;
name|pretreetable
operator|=
name|createTreeTable2
argument_list|(
name|prelentable
argument_list|,
operator|(
literal|1
operator|<<
name|ChmConstants
operator|.
name|LZX_PRETREE_TABLEBITS
operator|)
operator|+
operator|(
name|ChmConstants
operator|.
name|LZX_PRETREE_MAXSYMBOLS
operator|<<
literal|1
operator|)
argument_list|,
name|ChmConstants
operator|.
name|LZX_PRETREE_TABLEBITS
argument_list|,
name|ChmConstants
operator|.
name|LZX_PRETREE_MAXSYMBOLS
argument_list|)
expr_stmt|;
name|createMainTreeLenTable
argument_list|(
name|ChmConstants
operator|.
name|LZX_NUM_CHARS
argument_list|,
name|getState
argument_list|()
operator|.
name|mainTreeLengtsTable
operator|.
name|length
argument_list|,
name|pretreetable
argument_list|,
name|prelentable
argument_list|)
expr_stmt|;
name|getState
argument_list|()
operator|.
name|setMainTreeTable
argument_list|(
name|createTreeTable2
argument_list|(
name|getState
argument_list|()
operator|.
name|mainTreeLengtsTable
argument_list|,
operator|(
literal|1
operator|<<
name|ChmConstants
operator|.
name|LZX_MAINTREE_TABLEBITS
operator|)
operator|+
operator|(
name|ChmConstants
operator|.
name|LZX_MAINTREE_MAXSYMBOLS
operator|<<
literal|1
operator|)
argument_list|,
name|ChmConstants
operator|.
name|LZX_MAINTREE_TABLEBITS
argument_list|,
name|getState
argument_list|()
operator|.
name|getMainTreeElements
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|createMainTreeLenTable
parameter_list|(
name|int
name|offset
parameter_list|,
name|int
name|tablelen
parameter_list|,
name|short
index|[]
name|pretreetable
parameter_list|,
name|short
index|[]
name|prelentable
parameter_list|)
throws|throws
name|TikaException
block|{
if|if
condition|(
name|pretreetable
operator|==
literal|null
condition|)
throw|throw
operator|new
name|ChmParsingException
argument_list|(
literal|"pretreetable is null"
argument_list|)
throw|;
name|int
name|i
init|=
name|offset
decl_stmt|;
name|int
name|z
decl_stmt|,
name|y
decl_stmt|,
name|x
decl_stmt|;
while|while
condition|(
name|i
operator|<
name|tablelen
condition|)
block|{
name|int
name|f
init|=
name|getChmSection
argument_list|()
operator|.
name|getDesyncBits
argument_list|(
name|ChmConstants
operator|.
name|LZX_PRETREE_TABLEBITS
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|z
operator|=
name|pretreetable
index|[
name|f
index|]
expr_stmt|;
if|if
condition|(
name|z
operator|>=
name|ChmConstants
operator|.
name|LZX_PRETREE_MAXSYMBOLS
condition|)
block|{
name|x
operator|=
name|ChmConstants
operator|.
name|LZX_PRETREE_TABLEBITS
expr_stmt|;
do|do
block|{
name|x
operator|++
expr_stmt|;
name|z
operator|<<=
literal|1
expr_stmt|;
name|z
operator|+=
name|getChmSection
argument_list|()
operator|.
name|checkBit
argument_list|(
name|x
argument_list|)
expr_stmt|;
block|}
do|while
condition|(
operator|(
name|z
operator|=
name|pretreetable
index|[
name|z
index|]
operator|)
operator|>=
name|ChmConstants
operator|.
name|LZX_PRETREE_MAXSYMBOLS
condition|)
do|;
block|}
name|getChmSection
argument_list|()
operator|.
name|getSyncBits
argument_list|(
name|prelentable
index|[
name|z
index|]
argument_list|)
expr_stmt|;
if|if
condition|(
name|z
operator|<
literal|17
condition|)
block|{
name|z
operator|=
name|getState
argument_list|()
operator|.
name|getMainTreeLengtsTable
argument_list|()
index|[
name|i
index|]
operator|-
name|z
expr_stmt|;
if|if
condition|(
name|z
operator|<
literal|0
condition|)
name|z
operator|=
name|z
operator|+
literal|17
expr_stmt|;
name|getState
argument_list|()
operator|.
name|mainTreeLengtsTable
index|[
name|i
index|]
operator|=
operator|(
name|short
operator|)
name|z
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|z
operator|==
literal|17
condition|)
block|{
name|y
operator|=
name|getChmSection
argument_list|()
operator|.
name|getSyncBits
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|y
operator|+=
literal|4
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|y
condition|;
name|j
operator|++
control|)
block|{
name|assertInRange
argument_list|(
name|getState
argument_list|()
operator|.
name|getMainTreeLengtsTable
argument_list|()
argument_list|,
name|i
argument_list|)
expr_stmt|;
name|getState
argument_list|()
operator|.
name|mainTreeLengtsTable
index|[
name|i
operator|++
index|]
operator|=
literal|0
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|z
operator|==
literal|18
condition|)
block|{
name|y
operator|=
name|getChmSection
argument_list|()
operator|.
name|getSyncBits
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|y
operator|+=
literal|20
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|y
condition|;
name|j
operator|++
control|)
block|{
name|assertInRange
argument_list|(
name|getState
argument_list|()
operator|.
name|getMainTreeLengtsTable
argument_list|()
argument_list|,
name|i
argument_list|)
expr_stmt|;
name|getState
argument_list|()
operator|.
name|mainTreeLengtsTable
index|[
name|i
operator|++
index|]
operator|=
literal|0
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|z
operator|==
literal|19
condition|)
block|{
name|y
operator|=
name|getChmSection
argument_list|()
operator|.
name|getSyncBits
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|y
operator|+=
literal|4
expr_stmt|;
name|z
operator|=
name|pretreetable
index|[
name|getChmSection
argument_list|()
operator|.
name|getDesyncBits
argument_list|(
name|ChmConstants
operator|.
name|LZX_PRETREE_TABLEBITS
argument_list|,
literal|0
argument_list|)
index|]
expr_stmt|;
if|if
condition|(
name|z
operator|>=
name|ChmConstants
operator|.
name|LZX_PRETREE_MAXSYMBOLS
condition|)
block|{
name|x
operator|=
name|ChmConstants
operator|.
name|LZX_PRETREE_TABLEBITS
expr_stmt|;
do|do
block|{
name|x
operator|++
expr_stmt|;
name|z
operator|<<=
literal|1
expr_stmt|;
name|z
operator|+=
name|getChmSection
argument_list|()
operator|.
name|checkBit
argument_list|(
name|x
argument_list|)
expr_stmt|;
block|}
do|while
condition|(
operator|(
name|z
operator|=
name|pretreetable
index|[
name|z
index|]
operator|)
operator|>=
name|ChmConstants
operator|.
name|LZX_PRETREE_MAXSYMBOLS
condition|)
do|;
block|}
name|getChmSection
argument_list|()
operator|.
name|getSyncBits
argument_list|(
name|prelentable
index|[
name|z
index|]
argument_list|)
expr_stmt|;
name|z
operator|=
name|getState
argument_list|()
operator|.
name|mainTreeLengtsTable
index|[
name|i
index|]
operator|-
name|z
expr_stmt|;
if|if
condition|(
name|z
operator|<
literal|0
condition|)
name|z
operator|=
name|z
operator|+
literal|17
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|y
condition|;
name|j
operator|++
control|)
if|if
condition|(
name|i
operator|<
name|getState
argument_list|()
operator|.
name|getMainTreeLengtsTable
argument_list|()
operator|.
name|length
condition|)
name|getState
argument_list|()
operator|.
name|mainTreeLengtsTable
index|[
name|i
operator|++
index|]
operator|=
operator|(
name|short
operator|)
name|z
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|assertInRange
parameter_list|(
name|short
index|[]
name|array
parameter_list|,
name|int
name|index
parameter_list|)
throws|throws
name|ChmParsingException
block|{
if|if
condition|(
name|index
operator|>=
name|array
operator|.
name|length
condition|)
throw|throw
operator|new
name|ChmParsingException
argument_list|(
name|index
operator|+
literal|" is bigger than "
operator|+
name|array
operator|.
name|length
argument_list|)
throw|;
block|}
specifier|private
name|short
index|[]
name|createAlignedLenTable
parameter_list|()
block|{
name|int
name|tablelen
init|=
name|ChmConstants
operator|.
name|LZX_BLOCKTYPE_UNCOMPRESSED
decl_stmt|;
name|int
name|bits
init|=
name|ChmConstants
operator|.
name|LZX_BLOCKTYPE_UNCOMPRESSED
decl_stmt|;
name|short
index|[]
name|tmp
init|=
operator|new
name|short
index|[
name|tablelen
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|tablelen
condition|;
name|i
operator|++
control|)
block|{
name|tmp
index|[
name|i
index|]
operator|=
operator|(
name|short
operator|)
name|getChmSection
argument_list|()
operator|.
name|getSyncBits
argument_list|(
name|bits
argument_list|)
expr_stmt|;
block|}
return|return
name|tmp
return|;
block|}
specifier|private
name|void
name|createAlignedTreeTable
parameter_list|()
block|{
name|getState
argument_list|()
operator|.
name|setAlignedLenTable
argument_list|(
name|createAlignedLenTable
argument_list|()
argument_list|)
expr_stmt|;
name|getState
argument_list|()
operator|.
name|setAlignedLenTable
argument_list|(
name|createTreeTable2
argument_list|(
name|getState
argument_list|()
operator|.
name|getAlignedLenTable
argument_list|()
argument_list|,
operator|(
literal|1
operator|<<
name|ChmConstants
operator|.
name|LZX_NUM_PRIMARY_LENGTHS
operator|)
operator|+
operator|(
name|ChmConstants
operator|.
name|LZX_ALIGNED_MAXSYMBOLS
operator|<<
literal|1
operator|)
argument_list|,
name|ChmConstants
operator|.
name|LZX_NUM_PRIMARY_LENGTHS
argument_list|,
name|ChmConstants
operator|.
name|LZX_ALIGNED_MAXSYMBOLS
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|short
index|[]
name|createTreeTable2
parameter_list|(
name|short
index|[]
name|lentable
parameter_list|,
name|int
name|tablelen
parameter_list|,
name|int
name|bits
parameter_list|,
name|int
name|maxsymbol
parameter_list|)
block|{
name|short
index|[]
name|tmp
init|=
operator|new
name|short
index|[
name|tablelen
index|]
decl_stmt|;
name|short
name|sym
decl_stmt|;
name|int
name|leaf
decl_stmt|;
name|int
name|bit_num
init|=
literal|1
decl_stmt|;
name|long
name|fill
decl_stmt|;
name|int
name|pos
init|=
literal|0
decl_stmt|;
comment|/* the current position in the decode table */
name|long
name|table_mask
init|=
operator|(
literal|1
operator|<<
name|bits
operator|)
decl_stmt|;
name|long
name|bit_mask
init|=
operator|(
name|table_mask
operator|>>
literal|1
operator|)
decl_stmt|;
name|long
name|next_symbol
init|=
name|bit_mask
decl_stmt|;
comment|/* fills entries for short codes for a direct mapping */
while|while
condition|(
name|bit_num
operator|<=
name|bits
condition|)
block|{
for|for
control|(
name|sym
operator|=
literal|0
init|;
name|sym
operator|<
name|maxsymbol
condition|;
name|sym
operator|++
control|)
block|{
if|if
condition|(
name|lentable
operator|.
name|length
operator|>
name|sym
operator|&&
name|lentable
index|[
name|sym
index|]
operator|==
name|bit_num
condition|)
block|{
name|leaf
operator|=
name|pos
expr_stmt|;
comment|// pos=0
if|if
condition|(
operator|(
name|pos
operator|+=
name|bit_mask
operator|)
operator|>
name|table_mask
condition|)
return|return
literal|null
return|;
name|fill
operator|=
name|bit_mask
expr_stmt|;
while|while
condition|(
name|fill
operator|--
operator|>
literal|0
condition|)
name|tmp
index|[
name|leaf
operator|++
index|]
operator|=
name|sym
expr_stmt|;
block|}
block|}
name|bit_mask
operator|>>=
literal|1
expr_stmt|;
name|bit_num
operator|++
expr_stmt|;
block|}
comment|/* if there are any codes longer than nbits */
if|if
condition|(
name|pos
operator|!=
name|table_mask
condition|)
block|{
comment|/* clears the remainder of the table */
for|for
control|(
name|leaf
operator|=
name|pos
init|;
name|leaf
operator|<
name|table_mask
condition|;
name|leaf
operator|++
control|)
name|tmp
index|[
name|leaf
index|]
operator|=
literal|0
expr_stmt|;
comment|/* gives ourselves room for codes to grow by up to 16 more bits */
name|pos
operator|<<=
literal|16
expr_stmt|;
name|table_mask
operator|<<=
literal|16
expr_stmt|;
name|bit_mask
operator|=
literal|1
operator|<<
literal|15
expr_stmt|;
while|while
condition|(
name|bit_num
operator|<=
literal|16
condition|)
block|{
for|for
control|(
name|sym
operator|=
literal|0
init|;
name|sym
operator|<
name|maxsymbol
condition|;
name|sym
operator|++
control|)
block|{
if|if
condition|(
operator|(
name|lentable
operator|.
name|length
operator|>
name|sym
operator|)
operator|&&
operator|(
name|lentable
index|[
name|sym
index|]
operator|==
name|bit_num
operator|)
condition|)
block|{
name|leaf
operator|=
name|pos
operator|>>
literal|16
expr_stmt|;
for|for
control|(
name|fill
operator|=
literal|0
init|;
name|fill
operator|<
name|bit_num
operator|-
name|bits
condition|;
name|fill
operator|++
control|)
block|{
comment|/*                              * if this path hasn't been taken yet, 'allocate'                              * two entries                              */
if|if
condition|(
name|tmp
index|[
name|leaf
index|]
operator|==
literal|0
condition|)
block|{
if|if
condition|(
operator|(
operator|(
name|next_symbol
operator|<<
literal|1
operator|)
operator|+
literal|1
operator|)
operator|<
name|tmp
operator|.
name|length
condition|)
block|{
name|tmp
index|[
call|(
name|int
call|)
argument_list|(
name|next_symbol
operator|<<
literal|1
argument_list|)
index|]
operator|=
literal|0
expr_stmt|;
name|tmp
index|[
call|(
name|int
call|)
argument_list|(
name|next_symbol
operator|<<
literal|1
argument_list|)
operator|+
literal|1
index|]
operator|=
literal|0
expr_stmt|;
name|tmp
index|[
name|leaf
index|]
operator|=
operator|(
name|short
operator|)
name|next_symbol
operator|++
expr_stmt|;
block|}
block|}
comment|/*                              * follows the path and select either left or right                              * for next bit                              */
name|leaf
operator|=
name|tmp
index|[
name|leaf
index|]
operator|<<
literal|1
expr_stmt|;
if|if
condition|(
operator|(
operator|(
name|pos
operator|>>
operator|(
literal|15
operator|-
name|fill
operator|)
operator|)
operator|&
literal|1
operator|)
operator|!=
literal|0
condition|)
name|leaf
operator|++
expr_stmt|;
block|}
name|tmp
index|[
name|leaf
index|]
operator|=
name|sym
expr_stmt|;
if|if
condition|(
operator|(
name|pos
operator|+=
name|bit_mask
operator|)
operator|>
name|table_mask
condition|)
return|return
literal|null
return|;
comment|/* table overflow */
block|}
else|else
block|{
comment|// return null;
block|}
block|}
name|bit_mask
operator|>>=
literal|1
expr_stmt|;
name|bit_num
operator|++
expr_stmt|;
block|}
block|}
comment|/* is it full table? */
if|if
condition|(
name|pos
operator|==
name|table_mask
condition|)
return|return
name|tmp
return|;
return|return
name|tmp
return|;
block|}
specifier|public
name|byte
index|[]
name|getContent
parameter_list|()
block|{
return|return
name|content
return|;
block|}
specifier|public
name|byte
index|[]
name|getContent
parameter_list|(
name|int
name|startOffset
parameter_list|,
name|int
name|endOffset
parameter_list|)
block|{
name|int
name|length
init|=
name|endOffset
operator|-
name|startOffset
decl_stmt|;
comment|// return (getContent() != null) ? Arrays.copyOfRange(getContent(),
comment|// startOffset, (startOffset + length)) : new byte[1];
return|return
operator|(
name|getContent
argument_list|()
operator|!=
literal|null
operator|)
condition|?
name|ChmCommons
operator|.
name|copyOfRange
argument_list|(
name|getContent
argument_list|()
argument_list|,
name|startOffset
argument_list|,
operator|(
name|startOffset
operator|+
name|length
operator|)
argument_list|)
else|:
operator|new
name|byte
index|[
literal|1
index|]
return|;
block|}
specifier|public
name|byte
index|[]
name|getContent
parameter_list|(
name|int
name|start
parameter_list|)
block|{
comment|// return (getContent() != null) ? Arrays.copyOfRange(getContent(),
comment|// start, (getContent().length + start)) : new byte[1];
return|return
operator|(
name|getContent
argument_list|()
operator|!=
literal|null
operator|)
condition|?
name|ChmCommons
operator|.
name|copyOfRange
argument_list|(
name|getContent
argument_list|()
argument_list|,
name|start
argument_list|,
operator|(
name|getContent
argument_list|()
operator|.
name|length
operator|+
name|start
operator|)
argument_list|)
else|:
operator|new
name|byte
index|[
literal|1
index|]
return|;
block|}
specifier|private
name|void
name|setContent
parameter_list|(
name|int
name|contentLength
parameter_list|)
block|{
name|this
operator|.
name|content
operator|=
operator|new
name|byte
index|[
name|contentLength
index|]
expr_stmt|;
block|}
specifier|private
name|void
name|checkLzxBlock
parameter_list|(
name|ChmLzxBlock
name|chmPrevLzxBlock
parameter_list|)
throws|throws
name|TikaException
block|{
if|if
condition|(
name|chmPrevLzxBlock
operator|==
literal|null
operator|&&
name|getBlockLength
argument_list|()
operator|<
name|Integer
operator|.
name|MAX_VALUE
condition|)
name|setState
argument_list|(
operator|new
name|ChmLzxState
argument_list|(
operator|(
name|int
operator|)
name|getBlockLength
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|setState
argument_list|(
name|chmPrevLzxBlock
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|boolean
name|validateConstructorParams
parameter_list|(
name|int
name|blockNumber
parameter_list|,
name|byte
index|[]
name|dataSegment
parameter_list|,
name|long
name|blockLength
parameter_list|)
throws|throws
name|TikaException
block|{
name|int
name|goodParameter
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|blockNumber
operator|>=
literal|0
condition|)
operator|++
name|goodParameter
expr_stmt|;
else|else
throw|throw
operator|new
name|ChmParsingException
argument_list|(
literal|"block number should be possitive"
argument_list|)
throw|;
if|if
condition|(
name|dataSegment
operator|!=
literal|null
operator|&&
name|dataSegment
operator|.
name|length
operator|>
literal|0
condition|)
operator|++
name|goodParameter
expr_stmt|;
else|else
throw|throw
operator|new
name|ChmParsingException
argument_list|(
literal|"data segment should not be null"
argument_list|)
throw|;
if|if
condition|(
name|blockLength
operator|>
literal|0
condition|)
operator|++
name|goodParameter
expr_stmt|;
else|else
throw|throw
operator|new
name|ChmParsingException
argument_list|(
literal|"block length should be more than zero"
argument_list|)
throw|;
return|return
operator|(
name|goodParameter
operator|==
literal|3
operator|)
return|;
block|}
specifier|public
name|int
name|getBlockNumber
parameter_list|()
block|{
return|return
name|block_number
return|;
block|}
specifier|private
name|void
name|setBlockNumber
parameter_list|(
name|int
name|block_number
parameter_list|)
block|{
name|this
operator|.
name|block_number
operator|=
name|block_number
expr_stmt|;
block|}
specifier|private
name|long
name|getBlockLength
parameter_list|()
block|{
return|return
name|block_length
return|;
block|}
specifier|private
name|void
name|setBlockLength
parameter_list|(
name|long
name|block_length
parameter_list|)
block|{
name|this
operator|.
name|block_length
operator|=
name|block_length
expr_stmt|;
block|}
specifier|public
name|ChmLzxState
name|getState
parameter_list|()
block|{
return|return
name|state
return|;
block|}
specifier|private
name|void
name|setState
parameter_list|(
name|ChmLzxState
name|state
parameter_list|)
block|{
name|this
operator|.
name|state
operator|=
name|state
expr_stmt|;
block|}
comment|/**      * @param args      */
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
comment|// TODO Auto-generated method stub
block|}
block|}
end_class

end_unit

