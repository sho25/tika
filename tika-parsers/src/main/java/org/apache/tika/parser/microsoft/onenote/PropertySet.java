begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|microsoft
operator|.
name|onenote
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|exception
operator|.
name|TikaMemoryLimitException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_comment
comment|/**  * A property set is a collection of properties that specify the attributes of an object (section 2.1.5).  *<p>  * The PropertySet structure specifies the format of a property set and is contained by an ObjectSpaceObjectPropSet structure  * (section 2.6.1). The meaning of each property in the set is specified in [MS-ONE] section 2.1.12.  *<p>  * A PropertySet structure can contain references to other objects.  *<p>  * The data for a property that is not an object reference is contained in the PropertySet.rgData stream field. The rgData stream is read  * sequentially beginning with the first property in a PropertySet.rgPrids array until every property has been read.  *<p>  * The number of bytes read for each property is specified by the PropertyID.type field.  *<p>  * The data for a property that is a reference to one or more objects (section 2.1.5) is contained in the streams within an  * ObjectSpaceObjectPropSet structure (OIDs.body, OSIDs.body, ContextIDs.body).  *<p>  * The streams are read sequentially beginning with the first property in a PropertySet.rgPrids array.  *<p>  * If the PropertyID.type field specifies a single object (0x8, 0xA, 0xC), a single CompactID (4 bytes) is read from the corresponding  * stream in the ObjectSpaceObjectPropSet structure.  *<p>  * If the PropertyID.type field specifies an array of objects (0x9, 0xB, 0xD), an unsigned integer (4 bytes) is read from the  * PropertySet.rgDatastream and specifies the number of CompactID structures (section 2.2.2) to read from the corresponding stream in the  * ObjectSpaceObjectPropSet structure.  *<p>  * The streams for each PropertyID.type field are given by the following table.  *<p>  * 0x8 (ObjectID, section 2.6.6) - ObjectSpaceObjectPropSet.OIDs.body  * 0x9 (ArrayOfObjectIDs, section 2.6.6) - ObjectSpaceObjectPropSet.OIDs.body  * 0xA (ObjectSpaceID, section 2.6.6) - ObjectSpaceObjectPropSet.OSIDs.body  * 0xB (ArrayOfObjectSpaceIDs, section 2.6.6) - ObjectSpaceObjectPropSet.OSIDs.body  * 0xC (ContextID, section 2.6.6) - ObjectSpaceObjectPropSet.ContextIDs.body  * 0xD (ArrayOfContextIDs, section 2.6.6) - ObjectSpaceObjectPropSet.ContextIDs.body  */
end_comment

begin_class
class|class
name|PropertySet
block|{
name|List
argument_list|<
name|PropertyValue
argument_list|>
name|rgPridsData
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|public
name|void
name|print
parameter_list|(
name|OneNoteDocument
name|document
parameter_list|,
name|OneNotePtr
name|pointer
parameter_list|,
name|int
name|indentLevel
parameter_list|)
throws|throws
name|IOException
throws|,
name|TikaMemoryLimitException
block|{
for|for
control|(
name|PropertyValue
name|child
range|:
name|rgPridsData
control|)
block|{
name|child
operator|.
name|print
argument_list|(
name|document
argument_list|,
name|pointer
argument_list|,
name|indentLevel
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|o
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|o
operator|==
literal|null
operator|||
name|getClass
argument_list|()
operator|!=
name|o
operator|.
name|getClass
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
name|PropertySet
name|that
init|=
operator|(
name|PropertySet
operator|)
name|o
decl_stmt|;
return|return
name|Objects
operator|.
name|equals
argument_list|(
name|rgPridsData
argument_list|,
name|that
operator|.
name|rgPridsData
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|Objects
operator|.
name|hash
argument_list|(
name|rgPridsData
argument_list|)
return|;
block|}
specifier|public
name|List
argument_list|<
name|PropertyValue
argument_list|>
name|getRgPridsData
parameter_list|()
block|{
return|return
name|rgPridsData
return|;
block|}
specifier|public
name|PropertySet
name|setRgPridsData
parameter_list|(
name|List
argument_list|<
name|PropertyValue
argument_list|>
name|rgPridsData
parameter_list|)
block|{
name|this
operator|.
name|rgPridsData
operator|=
name|rgPridsData
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
end_class

end_unit

