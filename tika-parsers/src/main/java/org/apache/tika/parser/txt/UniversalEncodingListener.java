begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|txt
package|;
end_package

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|Charset
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|metadata
operator|.
name|Metadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|mime
operator|.
name|MediaType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|utils
operator|.
name|CharsetUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mozilla
operator|.
name|universalchardet
operator|.
name|CharsetListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mozilla
operator|.
name|universalchardet
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mozilla
operator|.
name|universalchardet
operator|.
name|UniversalDetector
import|;
end_import

begin_comment
comment|/**  * Helper class used by {@link UniversalEncodingDetector} to access the  *<code>juniversalchardet</code> detection logic.  */
end_comment

begin_class
class|class
name|UniversalEncodingListener
implements|implements
name|CharsetListener
block|{
specifier|private
specifier|static
specifier|final
name|String
name|CHARSET_ISO_8859_1
init|=
literal|"ISO-8859-1"
decl_stmt|;
specifier|private
specifier|final
name|UniversalDetector
name|detector
init|=
operator|new
name|UniversalDetector
argument_list|(
name|this
argument_list|)
decl_stmt|;
specifier|private
name|String
name|hint
init|=
literal|null
decl_stmt|;
specifier|private
name|Charset
name|charset
init|=
literal|null
decl_stmt|;
specifier|private
name|boolean
name|hasCR
init|=
literal|false
decl_stmt|;
specifier|public
name|UniversalEncodingListener
parameter_list|(
name|Metadata
name|metadata
parameter_list|)
block|{
name|MediaType
name|type
init|=
name|MediaType
operator|.
name|parse
argument_list|(
name|metadata
operator|.
name|get
argument_list|(
name|Metadata
operator|.
name|CONTENT_TYPE
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|type
operator|!=
literal|null
condition|)
block|{
name|hint
operator|=
name|type
operator|.
name|getParameters
argument_list|()
operator|.
name|get
argument_list|(
literal|"charset"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|hint
operator|==
literal|null
condition|)
block|{
name|hint
operator|=
name|metadata
operator|.
name|get
argument_list|(
name|Metadata
operator|.
name|CONTENT_ENCODING
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|report
parameter_list|(
name|String
name|name
parameter_list|)
block|{
if|if
condition|(
name|Constants
operator|.
name|CHARSET_WINDOWS_1252
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
if|if
condition|(
name|hint
operator|!=
literal|null
condition|)
block|{
comment|// Use the encoding hint to distinguish between latin charsets
name|name
operator|=
name|hint
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|hasCR
condition|)
block|{
comment|// If there are no CRLFs, it's more likely to be ISO-8859-1
name|name
operator|=
name|CHARSET_ISO_8859_1
expr_stmt|;
block|}
block|}
try|try
block|{
name|this
operator|.
name|charset
operator|=
name|CharsetUtils
operator|.
name|forName
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// ignore
block|}
block|}
specifier|public
name|boolean
name|isDone
parameter_list|()
block|{
return|return
name|detector
operator|.
name|isDone
argument_list|()
return|;
block|}
specifier|public
name|void
name|handleData
parameter_list|(
name|byte
index|[]
name|buf
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
operator|!
name|hasCR
operator|&&
name|i
operator|<
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|buf
index|[
name|offset
operator|+
name|i
index|]
operator|==
literal|'\r'
condition|)
block|{
name|hasCR
operator|=
literal|true
expr_stmt|;
block|}
block|}
name|detector
operator|.
name|handleData
argument_list|(
name|buf
argument_list|,
name|offset
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Charset
name|dataEnd
parameter_list|()
block|{
name|detector
operator|.
name|dataEnd
argument_list|()
expr_stmt|;
return|return
name|charset
return|;
block|}
block|}
end_class

end_unit

