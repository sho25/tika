begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *******************************************************************************  * Copyright (C) 1996-2007, International Business Machines Corporation and    *  * others. All Rights Reserved.                                                *  *******************************************************************************  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|txt
package|;
end_package

begin_comment
comment|/**  * This class matches UTF-16 and UTF-32, both big- and little-endian. The  * BOM will be used if it is present.  *  * @internal  */
end_comment

begin_class
specifier|abstract
class|class
name|CharsetRecog_Unicode
extends|extends
name|CharsetRecognizer
block|{
comment|/* (non-Javadoc)      * @see com.ibm.icu.text.CharsetRecognizer#getName()      */
specifier|abstract
name|String
name|getName
parameter_list|()
function_decl|;
comment|/* (non-Javadoc)      * @see com.ibm.icu.text.CharsetRecognizer#match(com.ibm.icu.text.CharsetDetector)      */
specifier|abstract
name|int
name|match
parameter_list|(
name|CharsetDetector
name|det
parameter_list|)
function_decl|;
specifier|static
class|class
name|CharsetRecog_UTF_16_BE
extends|extends
name|CharsetRecog_Unicode
block|{
name|String
name|getName
parameter_list|()
block|{
return|return
literal|"UTF-16BE"
return|;
block|}
name|int
name|match
parameter_list|(
name|CharsetDetector
name|det
parameter_list|)
block|{
name|byte
index|[]
name|input
init|=
name|det
operator|.
name|fRawInput
decl_stmt|;
if|if
condition|(
name|input
operator|.
name|length
operator|>=
literal|2
operator|&&
operator|(
operator|(
name|input
index|[
literal|0
index|]
operator|&
literal|0xFF
operator|)
operator|==
literal|0xFE
operator|&&
operator|(
name|input
index|[
literal|1
index|]
operator|&
literal|0xFF
operator|)
operator|==
literal|0xFF
operator|)
condition|)
block|{
return|return
literal|100
return|;
block|}
comment|// TODO: Do some statistics to check for unsigned UTF-16BE
return|return
literal|0
return|;
block|}
block|}
specifier|static
class|class
name|CharsetRecog_UTF_16_LE
extends|extends
name|CharsetRecog_Unicode
block|{
name|String
name|getName
parameter_list|()
block|{
return|return
literal|"UTF-16LE"
return|;
block|}
name|int
name|match
parameter_list|(
name|CharsetDetector
name|det
parameter_list|)
block|{
name|byte
index|[]
name|input
init|=
name|det
operator|.
name|fRawInput
decl_stmt|;
if|if
condition|(
name|input
operator|.
name|length
operator|>=
literal|2
operator|&&
operator|(
operator|(
name|input
index|[
literal|0
index|]
operator|&
literal|0xFF
operator|)
operator|==
literal|0xFF
operator|&&
operator|(
name|input
index|[
literal|1
index|]
operator|&
literal|0xFF
operator|)
operator|==
literal|0xFE
operator|)
condition|)
block|{
comment|// An LE BOM is present.
if|if
condition|(
name|input
operator|.
name|length
operator|>=
literal|4
operator|&&
name|input
index|[
literal|2
index|]
operator|==
literal|0x00
operator|&&
name|input
index|[
literal|3
index|]
operator|==
literal|0x00
condition|)
block|{
comment|// It is probably UTF-32 LE, not UTF-16
return|return
literal|0
return|;
block|}
return|return
literal|100
return|;
block|}
comment|// TODO: Do some statistics to check for unsigned UTF-16LE
return|return
literal|0
return|;
block|}
block|}
specifier|static
specifier|abstract
class|class
name|CharsetRecog_UTF_32
extends|extends
name|CharsetRecog_Unicode
block|{
specifier|abstract
name|int
name|getChar
parameter_list|(
name|byte
index|[]
name|input
parameter_list|,
name|int
name|index
parameter_list|)
function_decl|;
specifier|abstract
name|String
name|getName
parameter_list|()
function_decl|;
name|int
name|match
parameter_list|(
name|CharsetDetector
name|det
parameter_list|)
block|{
name|byte
index|[]
name|input
init|=
name|det
operator|.
name|fRawInput
decl_stmt|;
name|int
name|limit
init|=
operator|(
name|det
operator|.
name|fRawLength
operator|/
literal|4
operator|)
operator|*
literal|4
decl_stmt|;
name|int
name|numValid
init|=
literal|0
decl_stmt|;
name|int
name|numInvalid
init|=
literal|0
decl_stmt|;
name|boolean
name|hasBOM
init|=
literal|false
decl_stmt|;
name|int
name|confidence
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|limit
operator|==
literal|0
condition|)
block|{
return|return
literal|0
return|;
block|}
if|if
condition|(
name|getChar
argument_list|(
name|input
argument_list|,
literal|0
argument_list|)
operator|==
literal|0x0000FEFF
condition|)
block|{
name|hasBOM
operator|=
literal|true
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|limit
condition|;
name|i
operator|+=
literal|4
control|)
block|{
name|int
name|ch
init|=
name|getChar
argument_list|(
name|input
argument_list|,
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|ch
operator|<
literal|0
operator|||
name|ch
operator|>=
literal|0x10FFFF
operator|||
operator|(
name|ch
operator|>=
literal|0xD800
operator|&&
name|ch
operator|<=
literal|0xDFFF
operator|)
condition|)
block|{
name|numInvalid
operator|+=
literal|1
expr_stmt|;
block|}
else|else
block|{
name|numValid
operator|+=
literal|1
expr_stmt|;
block|}
block|}
comment|// Cook up some sort of confidence score, based on presence of a BOM
comment|//    and the existence of valid and/or invalid multi-byte sequences.
if|if
condition|(
name|hasBOM
operator|&&
name|numInvalid
operator|==
literal|0
condition|)
block|{
name|confidence
operator|=
literal|100
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|hasBOM
operator|&&
name|numValid
operator|>
name|numInvalid
operator|*
literal|10
condition|)
block|{
name|confidence
operator|=
literal|80
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|numValid
operator|>
literal|3
operator|&&
name|numInvalid
operator|==
literal|0
condition|)
block|{
name|confidence
operator|=
literal|100
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|numValid
operator|>
literal|0
operator|&&
name|numInvalid
operator|==
literal|0
condition|)
block|{
name|confidence
operator|=
literal|80
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|numValid
operator|>
name|numInvalid
operator|*
literal|10
condition|)
block|{
comment|// Probably corrupt UTF-32BE data.  Valid sequences aren't likely by chance.
name|confidence
operator|=
literal|25
expr_stmt|;
block|}
return|return
name|confidence
return|;
block|}
block|}
specifier|static
class|class
name|CharsetRecog_UTF_32_BE
extends|extends
name|CharsetRecog_UTF_32
block|{
name|int
name|getChar
parameter_list|(
name|byte
index|[]
name|input
parameter_list|,
name|int
name|index
parameter_list|)
block|{
return|return
operator|(
name|input
index|[
name|index
operator|+
literal|0
index|]
operator|&
literal|0xFF
operator|)
operator|<<
literal|24
operator||
operator|(
name|input
index|[
name|index
operator|+
literal|1
index|]
operator|&
literal|0xFF
operator|)
operator|<<
literal|16
operator||
operator|(
name|input
index|[
name|index
operator|+
literal|2
index|]
operator|&
literal|0xFF
operator|)
operator|<<
literal|8
operator||
operator|(
name|input
index|[
name|index
operator|+
literal|3
index|]
operator|&
literal|0xFF
operator|)
return|;
block|}
name|String
name|getName
parameter_list|()
block|{
return|return
literal|"UTF-32BE"
return|;
block|}
block|}
specifier|static
class|class
name|CharsetRecog_UTF_32_LE
extends|extends
name|CharsetRecog_UTF_32
block|{
name|int
name|getChar
parameter_list|(
name|byte
index|[]
name|input
parameter_list|,
name|int
name|index
parameter_list|)
block|{
return|return
operator|(
name|input
index|[
name|index
operator|+
literal|3
index|]
operator|&
literal|0xFF
operator|)
operator|<<
literal|24
operator||
operator|(
name|input
index|[
name|index
operator|+
literal|2
index|]
operator|&
literal|0xFF
operator|)
operator|<<
literal|16
operator||
operator|(
name|input
index|[
name|index
operator|+
literal|1
index|]
operator|&
literal|0xFF
operator|)
operator|<<
literal|8
operator||
operator|(
name|input
index|[
name|index
operator|+
literal|0
index|]
operator|&
literal|0xFF
operator|)
return|;
block|}
name|String
name|getName
parameter_list|()
block|{
return|return
literal|"UTF-32LE"
return|;
block|}
block|}
block|}
end_class

end_unit

