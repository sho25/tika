begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|csv
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|mime
operator|.
name|MediaType
import|;
end_import

begin_class
specifier|public
class|class
name|CSVResult
implements|implements
name|Comparable
argument_list|<
name|CSVResult
argument_list|>
block|{
specifier|static
name|CSVResult
name|TEXT
init|=
operator|new
name|CSVResult
argument_list|(
literal|1.0
argument_list|,
name|MediaType
operator|.
name|TEXT_PLAIN
argument_list|,
literal|null
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|double
name|confidence
decl_stmt|;
specifier|private
specifier|final
name|MediaType
name|mediaType
decl_stmt|;
specifier|private
specifier|final
name|Character
name|delimiter
decl_stmt|;
specifier|public
name|CSVResult
parameter_list|(
name|double
name|confidence
parameter_list|,
name|MediaType
name|mediaType
parameter_list|,
name|Character
name|delimiter
parameter_list|)
block|{
name|this
operator|.
name|confidence
operator|=
name|confidence
expr_stmt|;
name|this
operator|.
name|mediaType
operator|=
name|mediaType
expr_stmt|;
name|this
operator|.
name|delimiter
operator|=
name|delimiter
expr_stmt|;
block|}
specifier|public
name|MediaType
name|getMediaType
parameter_list|()
block|{
return|return
name|mediaType
return|;
block|}
comment|/**      *      * @return returns the delimiter or<code>null</code> if the mediatype=text/plain      */
specifier|public
name|Character
name|getDelimiter
parameter_list|()
block|{
return|return
name|delimiter
return|;
block|}
comment|/**      * Sorts in descending order of confidence      * @param o      * @return      */
annotation|@
name|Override
specifier|public
name|int
name|compareTo
parameter_list|(
name|CSVResult
name|o
parameter_list|)
block|{
return|return
name|Double
operator|.
name|compare
argument_list|(
name|o
operator|.
name|confidence
argument_list|,
name|this
operator|.
name|confidence
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|o
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|o
operator|==
literal|null
operator|||
name|getClass
argument_list|()
operator|!=
name|o
operator|.
name|getClass
argument_list|()
condition|)
return|return
literal|false
return|;
name|CSVResult
name|csvResult
init|=
operator|(
name|CSVResult
operator|)
name|o
decl_stmt|;
return|return
name|Double
operator|.
name|compare
argument_list|(
name|csvResult
operator|.
name|confidence
argument_list|,
name|confidence
argument_list|)
operator|==
literal|0
operator|&&
name|mediaType
operator|.
name|equals
argument_list|(
name|csvResult
operator|.
name|mediaType
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|delimiter
argument_list|,
name|csvResult
operator|.
name|delimiter
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|Objects
operator|.
name|hash
argument_list|(
name|confidence
argument_list|,
name|mediaType
argument_list|,
name|delimiter
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"CSVResult{"
operator|+
literal|"confidence="
operator|+
name|confidence
operator|+
literal|", mediaType="
operator|+
name|mediaType
operator|+
literal|", delimiter="
operator|+
name|delimiter
operator|+
literal|'}'
return|;
block|}
specifier|public
name|double
name|getConfidence
parameter_list|()
block|{
return|return
name|confidence
return|;
block|}
block|}
end_class

end_unit

