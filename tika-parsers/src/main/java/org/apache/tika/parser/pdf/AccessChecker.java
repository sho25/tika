begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|pdf
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|exception
operator|.
name|AccessPermissionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|metadata
operator|.
name|AccessPermissions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|metadata
operator|.
name|Metadata
import|;
end_import

begin_comment
comment|/**  * Checks whether or not a document allows extraction generally  * or extraction for accessibility only.  */
end_comment

begin_class
specifier|public
class|class
name|AccessChecker
implements|implements
name|Serializable
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|6492570218190936986L
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|needToCheck
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|allowAccessibility
decl_stmt|;
comment|/**      * This constructs an {@link AccessChecker} that      * will not perform any checking and will always return without      * throwing an exception.      *<p/>      * This constructor is available to allow for Tika's legacy (<= v1.7) behavior.      */
specifier|public
name|AccessChecker
parameter_list|()
block|{
name|needToCheck
operator|=
literal|false
expr_stmt|;
name|allowAccessibility
operator|=
literal|true
expr_stmt|;
block|}
comment|/**      * This constructs an {@link AccessChecker} that will check      * for whether or not content should be extracted from a document.      *      * @param allowExtractionForAccessibility if general extraction is not allowed, is extraction for accessibility allowed      */
specifier|public
name|AccessChecker
parameter_list|(
name|boolean
name|allowExtractionForAccessibility
parameter_list|)
block|{
name|needToCheck
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|allowAccessibility
operator|=
name|allowExtractionForAccessibility
expr_stmt|;
block|}
comment|/**      * Checks to see if a document's content should be extracted based      * on metadata values and the value of {@link #allowAccessibility} in the constructor.      *      * @param metadata      * @throws AccessPermissionException if access is not permitted      */
specifier|public
name|void
name|check
parameter_list|(
name|Metadata
name|metadata
parameter_list|)
throws|throws
name|AccessPermissionException
block|{
if|if
condition|(
operator|!
name|needToCheck
condition|)
block|{
return|return;
block|}
if|if
condition|(
literal|"false"
operator|.
name|equals
argument_list|(
name|metadata
operator|.
name|get
argument_list|(
name|AccessPermissions
operator|.
name|EXTRACT_CONTENT
argument_list|)
argument_list|)
condition|)
block|{
if|if
condition|(
name|allowAccessibility
condition|)
block|{
if|if
condition|(
literal|"true"
operator|.
name|equals
argument_list|(
name|metadata
operator|.
name|get
argument_list|(
name|AccessPermissions
operator|.
name|EXTRACT_FOR_ACCESSIBILITY
argument_list|)
argument_list|)
condition|)
block|{
return|return;
block|}
throw|throw
operator|new
name|AccessPermissionException
argument_list|(
literal|"Content extraction for accessibility is not allowed."
argument_list|)
throw|;
block|}
throw|throw
operator|new
name|AccessPermissionException
argument_list|(
literal|"Content extraction is not allowed."
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|o
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|o
operator|==
literal|null
operator|||
name|getClass
argument_list|()
operator|!=
name|o
operator|.
name|getClass
argument_list|()
condition|)
return|return
literal|false
return|;
name|AccessChecker
name|checker
init|=
operator|(
name|AccessChecker
operator|)
name|o
decl_stmt|;
if|if
condition|(
name|needToCheck
operator|!=
name|checker
operator|.
name|needToCheck
condition|)
return|return
literal|false
return|;
return|return
name|allowAccessibility
operator|==
name|checker
operator|.
name|allowAccessibility
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
name|int
name|result
init|=
operator|(
name|needToCheck
condition|?
literal|1
else|:
literal|0
operator|)
decl_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
operator|(
name|allowAccessibility
condition|?
literal|1
else|:
literal|0
operator|)
expr_stmt|;
return|return
name|result
return|;
block|}
block|}
end_class

end_unit

