begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|pdf
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSArray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSDictionary
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSInteger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|PDDocument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|PDPage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|PDPageTree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|documentinterchange
operator|.
name|logicalstructure
operator|.
name|PDStructureTreeRoot
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|documentinterchange
operator|.
name|markedcontent
operator|.
name|PDMarkedContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|text
operator|.
name|PDFMarkedContentExtractor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|text
operator|.
name|TextPosition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|exception
operator|.
name|TikaException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|io
operator|.
name|IOExceptionWithCause
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|metadata
operator|.
name|Metadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|ParseContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|ContentHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Writer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_comment
comment|/**  *<p>This was added in Tika 1.24 as an alpha version of a text extractor  * that builds the text from the marked text tree and includes/normalizes  * some of the structural tags.  *</p>  *  * @since 1.24  */
end_comment

begin_class
specifier|public
class|class
name|PDFMarkedContent2XHTML
extends|extends
name|PDF2XHTML
block|{
specifier|private
specifier|static
specifier|final
name|int
name|MAX_RECURSION_DEPTH
init|=
literal|1000
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|DIV
init|=
literal|"div"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|HtmlTag
argument_list|>
name|COMMON_TAG_MAP
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
static|static
block|{
comment|//code requires these to be all lower case
name|COMMON_TAG_MAP
operator|.
name|put
argument_list|(
literal|"document"
argument_list|,
operator|new
name|HtmlTag
argument_list|(
literal|"body"
argument_list|)
argument_list|)
expr_stmt|;
name|COMMON_TAG_MAP
operator|.
name|put
argument_list|(
literal|"div"
argument_list|,
operator|new
name|HtmlTag
argument_list|(
literal|"div"
argument_list|)
argument_list|)
expr_stmt|;
name|COMMON_TAG_MAP
operator|.
name|put
argument_list|(
literal|"p"
argument_list|,
operator|new
name|HtmlTag
argument_list|(
literal|"p"
argument_list|)
argument_list|)
expr_stmt|;
name|COMMON_TAG_MAP
operator|.
name|put
argument_list|(
literal|"span"
argument_list|,
operator|new
name|HtmlTag
argument_list|(
literal|"span"
argument_list|)
argument_list|)
expr_stmt|;
name|COMMON_TAG_MAP
operator|.
name|put
argument_list|(
literal|"table"
argument_list|,
operator|new
name|HtmlTag
argument_list|(
literal|"table"
argument_list|)
argument_list|)
expr_stmt|;
name|COMMON_TAG_MAP
operator|.
name|put
argument_list|(
literal|"thead"
argument_list|,
operator|new
name|HtmlTag
argument_list|(
literal|"thead"
argument_list|)
argument_list|)
expr_stmt|;
name|COMMON_TAG_MAP
operator|.
name|put
argument_list|(
literal|"tbody"
argument_list|,
operator|new
name|HtmlTag
argument_list|(
literal|"tbody"
argument_list|)
argument_list|)
expr_stmt|;
name|COMMON_TAG_MAP
operator|.
name|put
argument_list|(
literal|"tr"
argument_list|,
operator|new
name|HtmlTag
argument_list|(
literal|"tr"
argument_list|)
argument_list|)
expr_stmt|;
name|COMMON_TAG_MAP
operator|.
name|put
argument_list|(
literal|"th"
argument_list|,
operator|new
name|HtmlTag
argument_list|(
literal|"th"
argument_list|)
argument_list|)
expr_stmt|;
name|COMMON_TAG_MAP
operator|.
name|put
argument_list|(
literal|"td"
argument_list|,
operator|new
name|HtmlTag
argument_list|(
literal|"td"
argument_list|)
argument_list|)
expr_stmt|;
comment|//TODO -- convert to th if in thead?
name|COMMON_TAG_MAP
operator|.
name|put
argument_list|(
literal|"l"
argument_list|,
operator|new
name|HtmlTag
argument_list|(
literal|"ul"
argument_list|)
argument_list|)
expr_stmt|;
name|COMMON_TAG_MAP
operator|.
name|put
argument_list|(
literal|"li"
argument_list|,
operator|new
name|HtmlTag
argument_list|(
literal|"li"
argument_list|)
argument_list|)
expr_stmt|;
name|COMMON_TAG_MAP
operator|.
name|put
argument_list|(
literal|"h1"
argument_list|,
operator|new
name|HtmlTag
argument_list|(
literal|"h1"
argument_list|)
argument_list|)
expr_stmt|;
name|COMMON_TAG_MAP
operator|.
name|put
argument_list|(
literal|"h2"
argument_list|,
operator|new
name|HtmlTag
argument_list|(
literal|"h2"
argument_list|)
argument_list|)
expr_stmt|;
name|COMMON_TAG_MAP
operator|.
name|put
argument_list|(
literal|"h3"
argument_list|,
operator|new
name|HtmlTag
argument_list|(
literal|"h3"
argument_list|)
argument_list|)
expr_stmt|;
name|COMMON_TAG_MAP
operator|.
name|put
argument_list|(
literal|"h4"
argument_list|,
operator|new
name|HtmlTag
argument_list|(
literal|"h4"
argument_list|)
argument_list|)
expr_stmt|;
name|COMMON_TAG_MAP
operator|.
name|put
argument_list|(
literal|"h5"
argument_list|,
operator|new
name|HtmlTag
argument_list|(
literal|"h5"
argument_list|)
argument_list|)
expr_stmt|;
name|COMMON_TAG_MAP
operator|.
name|put
argument_list|(
literal|"h6"
argument_list|,
operator|new
name|HtmlTag
argument_list|(
literal|"h6"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|//this stores state as we recurse through the structure tag tree
specifier|private
name|State
name|state
init|=
operator|new
name|State
argument_list|()
decl_stmt|;
specifier|private
name|PDFMarkedContent2XHTML
parameter_list|(
name|PDDocument
name|document
parameter_list|,
name|ContentHandler
name|handler
parameter_list|,
name|ParseContext
name|context
parameter_list|,
name|Metadata
name|metadata
parameter_list|,
name|PDFParserConfig
name|config
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|document
argument_list|,
name|handler
argument_list|,
name|context
argument_list|,
name|metadata
argument_list|,
name|config
argument_list|)
expr_stmt|;
block|}
comment|/**      * Converts the given PDF document (and related metadata) to a stream      * of XHTML SAX events sent to the given content handler.      *      * @param pdDocument PDF document      * @param handler    SAX content handler      * @param metadata   PDF metadata      * @throws SAXException  if the content handler fails to process SAX events      * @throws TikaException if there was an exception outside of per page processing      */
specifier|public
specifier|static
name|void
name|process
parameter_list|(
name|PDDocument
name|pdDocument
parameter_list|,
name|ContentHandler
name|handler
parameter_list|,
name|ParseContext
name|context
parameter_list|,
name|Metadata
name|metadata
parameter_list|,
name|PDFParserConfig
name|config
parameter_list|)
throws|throws
name|SAXException
throws|,
name|TikaException
block|{
name|PDFMarkedContent2XHTML
name|pdfMarkedContent2XHTML
init|=
literal|null
decl_stmt|;
try|try
block|{
name|pdfMarkedContent2XHTML
operator|=
operator|new
name|PDFMarkedContent2XHTML
argument_list|(
name|pdDocument
argument_list|,
name|handler
argument_list|,
name|context
argument_list|,
name|metadata
argument_list|,
name|config
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|TikaException
argument_list|(
literal|"couldn't initialize PDFMarkedContent2XHTML"
argument_list|,
name|e
argument_list|)
throw|;
block|}
try|try
block|{
name|pdfMarkedContent2XHTML
operator|.
name|writeText
argument_list|(
name|pdDocument
argument_list|,
operator|new
name|Writer
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|char
index|[]
name|cbuf
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|)
block|{                 }
annotation|@
name|Override
specifier|public
name|void
name|flush
parameter_list|()
block|{                 }
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
block|{                 }
block|}
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|.
name|getCause
argument_list|()
operator|instanceof
name|SAXException
condition|)
block|{
throw|throw
operator|(
name|SAXException
operator|)
name|e
operator|.
name|getCause
argument_list|()
throw|;
block|}
else|else
block|{
throw|throw
operator|new
name|TikaException
argument_list|(
literal|"Unable to extract PDF content"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|pdfMarkedContent2XHTML
operator|.
name|exceptions
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
comment|//throw the first
throw|throw
operator|new
name|TikaException
argument_list|(
literal|"Unable to extract PDF content"
argument_list|,
name|pdfMarkedContent2XHTML
operator|.
name|exceptions
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|protected
name|void
name|processPages
parameter_list|(
name|PDPageTree
name|pages
parameter_list|)
throws|throws
name|IOException
block|{
comment|//this is a 0-indexed list of object refs for each page
comment|//we need this to map the mcids later...
comment|//TODO: is there a better way of getting these/doing the mapping?
name|List
argument_list|<
name|ObjectRef
argument_list|>
name|pageRefs
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
comment|//STEP 1: get the page refs
name|findPages
argument_list|(
name|pdDocument
operator|.
name|getPages
argument_list|()
operator|.
name|getCOSObject
argument_list|()
operator|.
name|getItem
argument_list|(
name|COSName
operator|.
name|KIDS
argument_list|)
argument_list|,
name|pageRefs
argument_list|)
expr_stmt|;
comment|//confirm the right number of pages was found
if|if
condition|(
name|pageRefs
operator|.
name|size
argument_list|()
operator|!=
name|pdDocument
operator|.
name|getNumberOfPages
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOExceptionWithCause
argument_list|(
operator|new
name|TikaException
argument_list|(
literal|"Couldn't find the right number of page refs ("
operator|+
name|pageRefs
operator|.
name|size
argument_list|()
operator|+
literal|") for pages ("
operator|+
name|pdDocument
operator|.
name|getNumberOfPages
argument_list|()
operator|+
literal|")"
argument_list|)
argument_list|)
throw|;
block|}
name|PDStructureTreeRoot
name|structureTreeRoot
init|=
name|pdDocument
operator|.
name|getDocumentCatalog
argument_list|()
operator|.
name|getStructureTreeRoot
argument_list|()
decl_stmt|;
comment|//STEP 2: load the roleMap
name|Map
argument_list|<
name|String
argument_list|,
name|HtmlTag
argument_list|>
name|roleMap
init|=
name|loadRoleMap
argument_list|(
name|structureTreeRoot
operator|.
name|getRoleMap
argument_list|()
argument_list|)
decl_stmt|;
comment|//STEP 3: load all of the text, mapped to MCIDs
name|Map
argument_list|<
name|MCID
argument_list|,
name|String
argument_list|>
name|paragraphs
init|=
name|loadTextByMCID
argument_list|(
name|pageRefs
argument_list|)
decl_stmt|;
comment|//STEP 4: now recurse the the structure tree root and output the structure
comment|//and the text bits from paragraphs
try|try
block|{
name|recurse
argument_list|(
name|structureTreeRoot
operator|.
name|getK
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|0
argument_list|,
name|paragraphs
argument_list|,
name|roleMap
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SAXException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOExceptionWithCause
argument_list|(
name|e
argument_list|)
throw|;
block|}
comment|//STEP 5: handle all the potentially unprocessed bits
try|try
block|{
if|if
condition|(
name|state
operator|.
name|hrefAnchorBuilder
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|xhtml
operator|.
name|startElement
argument_list|(
literal|"p"
argument_list|)
expr_stmt|;
name|writeString
argument_list|(
name|state
operator|.
name|hrefAnchorBuilder
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|xhtml
operator|.
name|endElement
argument_list|(
literal|"p"
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|MCID
name|mcid
range|:
name|paragraphs
operator|.
name|keySet
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|state
operator|.
name|processedMCIDs
operator|.
name|contains
argument_list|(
name|mcid
argument_list|)
condition|)
block|{
if|if
condition|(
name|mcid
operator|.
name|mcid
operator|>
operator|-
literal|1
condition|)
block|{
comment|//TODO: LOG! piece of text that wasn't referenced  in the marked content tree
comment|// but should have been.  If mcid == -1, this was a known item not part of
comment|// content tree.
block|}
name|xhtml
operator|.
name|startElement
argument_list|(
literal|"p"
argument_list|)
expr_stmt|;
name|writeString
argument_list|(
name|paragraphs
operator|.
name|get
argument_list|(
name|mcid
argument_list|)
argument_list|)
expr_stmt|;
name|xhtml
operator|.
name|endElement
argument_list|(
literal|"p"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|SAXException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOExceptionWithCause
argument_list|(
name|e
argument_list|)
throw|;
block|}
comment|//Step 6: for now, iterate through the pages again and do all the other handling
comment|//TODO: figure out when we're crossing page boundaries during the recursion
comment|// step above and do the page by page processing then...rather than dumping this
comment|// all here.
for|for
control|(
name|PDPage
name|page
range|:
name|pdDocument
operator|.
name|getPages
argument_list|()
control|)
block|{
name|startPage
argument_list|(
name|page
argument_list|)
expr_stmt|;
name|endPage
argument_list|(
name|page
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|recurse
parameter_list|(
name|COSBase
name|kids
parameter_list|,
name|ObjectRef
name|currentPageRef
parameter_list|,
name|int
name|depth
parameter_list|,
name|Map
argument_list|<
name|MCID
argument_list|,
name|String
argument_list|>
name|paragraphs
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|HtmlTag
argument_list|>
name|roleMap
parameter_list|)
throws|throws
name|IOException
throws|,
name|SAXException
block|{
if|if
condition|(
name|depth
operator|>
name|MAX_RECURSION_DEPTH
condition|)
block|{
throw|throw
operator|new
name|IOExceptionWithCause
argument_list|(
operator|new
name|TikaException
argument_list|(
literal|"Exceeded max recursion depth "
operator|+
name|MAX_RECURSION_DEPTH
argument_list|)
argument_list|)
throw|;
block|}
if|if
condition|(
name|kids
operator|instanceof
name|COSArray
condition|)
block|{
for|for
control|(
name|COSBase
name|k
range|:
operator|(
operator|(
name|COSArray
operator|)
name|kids
operator|)
control|)
block|{
name|recurse
argument_list|(
name|k
argument_list|,
name|currentPageRef
argument_list|,
name|depth
argument_list|,
name|paragraphs
argument_list|,
name|roleMap
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|kids
operator|instanceof
name|COSObject
condition|)
block|{
name|COSBase
name|cosType
init|=
operator|(
operator|(
name|COSObject
operator|)
name|kids
operator|)
operator|.
name|getItem
argument_list|(
name|COSName
operator|.
name|TYPE
argument_list|)
decl_stmt|;
if|if
condition|(
name|cosType
operator|!=
literal|null
operator|&&
name|cosType
operator|instanceof
name|COSName
condition|)
block|{
if|if
condition|(
literal|"OBJR"
operator|.
name|equals
argument_list|(
operator|(
operator|(
name|COSName
operator|)
name|cosType
operator|)
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|recurse
argument_list|(
operator|(
operator|(
name|COSObject
operator|)
name|kids
operator|)
operator|.
name|getDictionaryObject
argument_list|(
name|COSName
operator|.
name|OBJ
argument_list|)
argument_list|,
name|currentPageRef
argument_list|,
name|depth
operator|+
literal|1
argument_list|,
name|paragraphs
argument_list|,
name|roleMap
argument_list|)
expr_stmt|;
block|}
block|}
name|COSBase
name|n
init|=
operator|(
operator|(
name|COSObject
operator|)
name|kids
operator|)
operator|.
name|getItem
argument_list|(
name|COSName
operator|.
name|S
argument_list|)
decl_stmt|;
name|String
name|name
init|=
literal|""
decl_stmt|;
if|if
condition|(
name|n
operator|instanceof
name|COSName
condition|)
block|{
name|name
operator|=
operator|(
operator|(
name|COSName
operator|)
name|n
operator|)
operator|.
name|getName
argument_list|()
expr_stmt|;
block|}
name|COSBase
name|grandkids
init|=
operator|(
operator|(
name|COSObject
operator|)
name|kids
operator|)
operator|.
name|getItem
argument_list|(
name|COSName
operator|.
name|K
argument_list|)
decl_stmt|;
if|if
condition|(
name|grandkids
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|COSBase
name|pageBase
init|=
operator|(
operator|(
name|COSObject
operator|)
name|kids
operator|)
operator|.
name|getItem
argument_list|(
name|COSName
operator|.
name|PG
argument_list|)
decl_stmt|;
if|if
condition|(
name|pageBase
operator|!=
literal|null
operator|&&
name|pageBase
operator|instanceof
name|COSObject
condition|)
block|{
name|currentPageRef
operator|=
operator|new
name|ObjectRef
argument_list|(
operator|(
operator|(
name|COSObject
operator|)
name|pageBase
operator|)
operator|.
name|getObjectNumber
argument_list|()
argument_list|,
operator|(
operator|(
name|COSObject
operator|)
name|pageBase
operator|)
operator|.
name|getGenerationNumber
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|HtmlTag
name|tag
init|=
name|getTag
argument_list|(
name|name
argument_list|,
name|roleMap
argument_list|)
decl_stmt|;
name|boolean
name|startedLink
init|=
literal|false
decl_stmt|;
name|boolean
name|ignoreTag
init|=
literal|false
decl_stmt|;
if|if
condition|(
literal|"link"
operator|.
name|equals
argument_list|(
name|tag
operator|.
name|clazz
argument_list|)
condition|)
block|{
name|state
operator|.
name|inLink
operator|=
literal|true
expr_stmt|;
name|startedLink
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|state
operator|.
name|inLink
condition|)
block|{
comment|//TODO: currently suppressing span and lbody...
comment|// is this what we want to do?  What else should we suppress?
if|if
condition|(
literal|"span"
operator|.
name|equals
argument_list|(
name|tag
operator|.
name|tag
argument_list|)
condition|)
block|{
name|ignoreTag
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"lbody"
operator|.
name|equals
argument_list|(
name|tag
operator|.
name|clazz
argument_list|)
condition|)
block|{
name|ignoreTag
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|ignoreTag
condition|)
block|{
if|if
condition|(
operator|!
name|StringUtils
operator|.
name|isAllBlank
argument_list|(
name|tag
operator|.
name|clazz
argument_list|)
condition|)
block|{
name|xhtml
operator|.
name|startElement
argument_list|(
name|tag
operator|.
name|tag
argument_list|,
literal|"class"
argument_list|,
name|tag
operator|.
name|clazz
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|xhtml
operator|.
name|startElement
argument_list|(
name|tag
operator|.
name|tag
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|recurse
argument_list|(
name|grandkids
argument_list|,
name|currentPageRef
argument_list|,
name|depth
operator|+
literal|1
argument_list|,
name|paragraphs
argument_list|,
name|roleMap
argument_list|)
expr_stmt|;
if|if
condition|(
name|startedLink
condition|)
block|{
name|writeLink
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|state
operator|.
name|inLink
operator|&&
operator|!
name|startedLink
operator|&&
operator|!
name|ignoreTag
condition|)
block|{
name|xhtml
operator|.
name|endElement
argument_list|(
name|tag
operator|.
name|tag
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|kids
operator|instanceof
name|COSInteger
condition|)
block|{
name|int
name|mcidInt
init|=
operator|(
operator|(
name|COSInteger
operator|)
name|kids
operator|)
operator|.
name|intValue
argument_list|()
decl_stmt|;
name|MCID
name|mcid
init|=
operator|new
name|MCID
argument_list|(
name|currentPageRef
argument_list|,
name|mcidInt
argument_list|)
decl_stmt|;
if|if
condition|(
name|paragraphs
operator|.
name|containsKey
argument_list|(
name|mcid
argument_list|)
condition|)
block|{
if|if
condition|(
name|state
operator|.
name|inLink
condition|)
block|{
name|state
operator|.
name|hrefAnchorBuilder
operator|.
name|append
argument_list|(
name|paragraphs
operator|.
name|get
argument_list|(
name|mcid
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
try|try
block|{
comment|//if it isn't a uri, output this anyhow
name|writeString
argument_list|(
name|paragraphs
operator|.
name|get
argument_list|(
name|mcid
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|handleCatchableIOE
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
name|state
operator|.
name|processedMCIDs
operator|.
name|add
argument_list|(
name|mcid
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|//TODO: log can't find mcid
block|}
block|}
elseif|else
if|if
condition|(
name|kids
operator|instanceof
name|COSDictionary
condition|)
block|{
comment|//TODO: check for other types of dictionary?
name|COSDictionary
name|dict
init|=
operator|(
name|COSDictionary
operator|)
name|kids
decl_stmt|;
name|COSDictionary
name|anchor
init|=
name|dict
operator|.
name|getCOSDictionary
argument_list|(
name|COSName
operator|.
name|A
argument_list|)
decl_stmt|;
comment|//check for subtype /Link ?
comment|//COSName subtype = obj.getCOSName(COSName.SUBTYPE);
if|if
condition|(
name|anchor
operator|!=
literal|null
condition|)
block|{
name|state
operator|.
name|uri
operator|=
name|anchor
operator|.
name|getString
argument_list|(
name|COSName
operator|.
name|URI
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|dict
operator|.
name|containsKey
argument_list|(
name|COSName
operator|.
name|K
argument_list|)
condition|)
block|{
name|recurse
argument_list|(
name|dict
operator|.
name|getDictionaryObject
argument_list|(
name|COSName
operator|.
name|K
argument_list|)
argument_list|,
name|currentPageRef
argument_list|,
name|depth
operator|+
literal|1
argument_list|,
name|paragraphs
argument_list|,
name|roleMap
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|dict
operator|.
name|containsKey
argument_list|(
name|COSName
operator|.
name|OBJ
argument_list|)
condition|)
block|{
name|recurse
argument_list|(
name|dict
operator|.
name|getDictionaryObject
argument_list|(
name|COSName
operator|.
name|OBJ
argument_list|)
argument_list|,
name|currentPageRef
argument_list|,
name|depth
operator|+
literal|1
argument_list|,
name|paragraphs
argument_list|,
name|roleMap
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
comment|//TODO: handle a different object?
block|}
block|}
specifier|private
name|void
name|writeLink
parameter_list|()
throws|throws
name|SAXException
throws|,
name|IOException
block|{
comment|//This is only for uris, obv.
comment|//If we want to catch within doc references (GOTO, we need to cache those in state.
comment|//See testPDF_childAttachments.pdf for examples
if|if
condition|(
operator|!
name|StringUtils
operator|.
name|isAllBlank
argument_list|(
name|state
operator|.
name|uri
argument_list|)
condition|)
block|{
name|xhtml
operator|.
name|startElement
argument_list|(
literal|"a"
argument_list|,
literal|"href"
argument_list|,
name|state
operator|.
name|uri
argument_list|)
expr_stmt|;
name|xhtml
operator|.
name|characters
argument_list|(
name|state
operator|.
name|hrefAnchorBuilder
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|xhtml
operator|.
name|endElement
argument_list|(
literal|"a"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
try|try
block|{
comment|//if it isn't a uri, output this anyhow
name|writeString
argument_list|(
name|state
operator|.
name|hrefAnchorBuilder
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|handleCatchableIOE
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
name|state
operator|.
name|hrefAnchorBuilder
operator|.
name|setLength
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|state
operator|.
name|inLink
operator|=
literal|false
expr_stmt|;
name|state
operator|.
name|uri
operator|=
literal|null
expr_stmt|;
block|}
specifier|private
name|HtmlTag
name|getTag
parameter_list|(
name|String
name|name
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|HtmlTag
argument_list|>
name|roleMap
parameter_list|)
block|{
if|if
condition|(
name|roleMap
operator|.
name|containsKey
argument_list|(
name|name
argument_list|)
condition|)
block|{
return|return
name|roleMap
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
name|String
name|lc
init|=
name|name
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|US
argument_list|)
decl_stmt|;
if|if
condition|(
name|COMMON_TAG_MAP
operator|.
name|containsKey
argument_list|(
name|lc
argument_list|)
condition|)
block|{
return|return
name|COMMON_TAG_MAP
operator|.
name|get
argument_list|(
name|lc
argument_list|)
return|;
block|}
name|roleMap
operator|.
name|put
argument_list|(
name|name
argument_list|,
operator|new
name|HtmlTag
argument_list|(
name|DIV
argument_list|,
name|name
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|US
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|roleMap
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|HtmlTag
argument_list|>
name|loadRoleMap
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|roleMap
parameter_list|)
block|{
if|if
condition|(
name|roleMap
operator|==
literal|null
condition|)
block|{
return|return
name|Collections
operator|.
name|EMPTY_MAP
return|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|HtmlTag
argument_list|>
name|tags
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|e
range|:
name|roleMap
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|k
init|=
name|e
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|Object
name|obj
init|=
name|e
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|obj
operator|instanceof
name|String
condition|)
block|{
name|String
name|v
init|=
operator|(
name|String
operator|)
name|obj
decl_stmt|;
name|String
name|lc
init|=
name|v
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|US
argument_list|)
decl_stmt|;
if|if
condition|(
name|COMMON_TAG_MAP
operator|.
name|containsValue
argument_list|(
operator|new
name|HtmlTag
argument_list|(
name|lc
argument_list|)
argument_list|)
condition|)
block|{
name|tags
operator|.
name|put
argument_list|(
name|k
argument_list|,
operator|new
name|HtmlTag
argument_list|(
name|lc
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|tags
operator|.
name|put
argument_list|(
name|k
argument_list|,
operator|new
name|HtmlTag
argument_list|(
name|DIV
argument_list|,
name|lc
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|tags
return|;
block|}
specifier|private
name|Map
argument_list|<
name|MCID
argument_list|,
name|String
argument_list|>
name|loadTextByMCID
parameter_list|(
name|List
argument_list|<
name|ObjectRef
argument_list|>
name|pageRefs
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|pageCount
init|=
literal|1
decl_stmt|;
name|Map
argument_list|<
name|MCID
argument_list|,
name|String
argument_list|>
name|paragraphs
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|PDPage
name|page
range|:
name|pdDocument
operator|.
name|getPages
argument_list|()
control|)
block|{
name|ObjectRef
name|pageRef
init|=
name|pageRefs
operator|.
name|get
argument_list|(
name|pageCount
operator|-
literal|1
argument_list|)
decl_stmt|;
name|PDFMarkedContentExtractor
name|ex
init|=
operator|new
name|PDFMarkedContentExtractor
argument_list|()
decl_stmt|;
try|try
block|{
name|ex
operator|.
name|processPage
argument_list|(
name|page
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|handleCatchableIOE
argument_list|(
name|e
argument_list|)
expr_stmt|;
continue|continue;
block|}
for|for
control|(
name|PDMarkedContent
name|c
range|:
name|ex
operator|.
name|getMarkedContents
argument_list|()
control|)
block|{
comment|//TODO: at some point also handle
comment|// 1. c.getActualText()
comment|// 2. c.getExpandedForm()
comment|// 3. c.getAlternateDescription()
comment|// 4. c.getLanguage()
name|List
argument_list|<
name|Object
argument_list|>
name|objects
init|=
name|c
operator|.
name|getContents
argument_list|()
decl_stmt|;
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
comment|//TODO: sort text positions? Figure out when to add/remove a newline and/or space?
for|for
control|(
name|Object
name|o
range|:
name|objects
control|)
block|{
if|if
condition|(
name|o
operator|instanceof
name|TextPosition
condition|)
block|{
name|String
name|unicode
init|=
operator|(
operator|(
name|TextPosition
operator|)
name|o
operator|)
operator|.
name|getUnicode
argument_list|()
decl_stmt|;
if|if
condition|(
name|unicode
operator|!=
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|unicode
argument_list|)
expr_stmt|;
block|}
block|}
comment|/*                     TODO: do we want to do anything with these?                     TODO: Are there other types of objects we need to handle here?                     else if (o instanceof PDImageXObject) {                      } else if (o instanceof PDTransparencyGroup) {                      } else if (o instanceof PDMarkedContent) {                      } else if (o instanceof PDFormXObject) {                      } else {                         throw new RuntimeException("can't handle "+o.getClass());                     }*/
block|}
name|int
name|mcidInt
init|=
name|c
operator|.
name|getMCID
argument_list|()
decl_stmt|;
name|MCID
name|mcid
init|=
operator|new
name|MCID
argument_list|(
name|pageRef
argument_list|,
name|mcidInt
argument_list|)
decl_stmt|;
name|String
name|p
init|=
name|sb
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
name|c
operator|.
name|getTag
argument_list|()
operator|.
name|equals
argument_list|(
literal|"P"
argument_list|)
condition|)
block|{
name|p
operator|=
name|p
operator|.
name|trim
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|mcidInt
operator|<
literal|0
condition|)
block|{
comment|//mcidInt == -1 for text bits that do not have an actual
comment|//mcid -- concatenate these bits
if|if
condition|(
name|paragraphs
operator|.
name|containsKey
argument_list|(
name|mcid
argument_list|)
condition|)
block|{
name|p
operator|=
name|paragraphs
operator|.
name|get
argument_list|(
name|mcid
argument_list|)
operator|+
literal|"\n"
operator|+
name|p
expr_stmt|;
block|}
block|}
name|paragraphs
operator|.
name|put
argument_list|(
name|mcid
argument_list|,
name|p
argument_list|)
expr_stmt|;
block|}
name|pageCount
operator|++
expr_stmt|;
block|}
return|return
name|paragraphs
return|;
block|}
specifier|private
specifier|static
name|void
name|findPages
parameter_list|(
name|COSBase
name|kidsObj
parameter_list|,
name|List
argument_list|<
name|ObjectRef
argument_list|>
name|pageRefs
parameter_list|)
block|{
if|if
condition|(
name|kidsObj
operator|==
literal|null
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|kidsObj
operator|instanceof
name|COSArray
condition|)
block|{
for|for
control|(
name|COSBase
name|kid
range|:
operator|(
operator|(
name|COSArray
operator|)
name|kidsObj
operator|)
control|)
block|{
if|if
condition|(
name|kid
operator|instanceof
name|COSObject
condition|)
block|{
name|COSBase
name|kidbase
init|=
operator|(
operator|(
name|COSObject
operator|)
name|kid
operator|)
operator|.
name|getObject
argument_list|()
decl_stmt|;
if|if
condition|(
name|kidbase
operator|instanceof
name|COSDictionary
condition|)
block|{
name|COSDictionary
name|dict
init|=
operator|(
name|COSDictionary
operator|)
name|kidbase
decl_stmt|;
if|if
condition|(
name|dict
operator|.
name|containsKey
argument_list|(
name|COSName
operator|.
name|TYPE
argument_list|)
operator|&&
name|COSName
operator|.
name|PAGE
operator|.
name|equals
argument_list|(
name|dict
operator|.
name|getCOSName
argument_list|(
name|COSName
operator|.
name|TYPE
argument_list|)
argument_list|)
condition|)
block|{
name|pageRefs
operator|.
name|add
argument_list|(
operator|new
name|ObjectRef
argument_list|(
operator|(
operator|(
name|COSObject
operator|)
name|kid
operator|)
operator|.
name|getObjectNumber
argument_list|()
argument_list|,
operator|(
operator|(
name|COSObject
operator|)
name|kid
operator|)
operator|.
name|getGenerationNumber
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
operator|(
operator|(
name|COSDictionary
operator|)
name|kidbase
operator|)
operator|.
name|containsKey
argument_list|(
name|COSName
operator|.
name|KIDS
argument_list|)
condition|)
block|{
name|findPages
argument_list|(
operator|(
operator|(
name|COSDictionary
operator|)
name|kidbase
operator|)
operator|.
name|getItem
argument_list|(
name|COSName
operator|.
name|KIDS
argument_list|)
argument_list|,
name|pageRefs
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
block|}
specifier|private
specifier|static
class|class
name|State
block|{
name|Set
argument_list|<
name|MCID
argument_list|>
name|processedMCIDs
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|boolean
name|inLink
init|=
literal|false
decl_stmt|;
specifier|private
name|StringBuilder
name|hrefAnchorBuilder
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
specifier|private
name|String
name|uri
init|=
literal|null
decl_stmt|;
specifier|private
name|int
name|tdDepth
init|=
literal|0
decl_stmt|;
name|int
name|tableDepth
init|=
literal|0
decl_stmt|;
block|}
specifier|private
specifier|static
class|class
name|HtmlTag
block|{
specifier|private
specifier|final
name|String
name|tag
decl_stmt|;
specifier|private
specifier|final
name|String
name|clazz
decl_stmt|;
name|HtmlTag
parameter_list|()
block|{
name|this
argument_list|(
literal|""
argument_list|)
expr_stmt|;
block|}
name|HtmlTag
parameter_list|(
name|String
name|tag
parameter_list|)
block|{
name|this
argument_list|(
name|tag
argument_list|,
literal|""
argument_list|)
expr_stmt|;
block|}
name|HtmlTag
parameter_list|(
name|String
name|tag
parameter_list|,
name|String
name|clazz
parameter_list|)
block|{
name|this
operator|.
name|tag
operator|=
name|tag
expr_stmt|;
name|this
operator|.
name|clazz
operator|=
name|clazz
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|o
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|o
operator|==
literal|null
operator|||
name|getClass
argument_list|()
operator|!=
name|o
operator|.
name|getClass
argument_list|()
condition|)
return|return
literal|false
return|;
name|HtmlTag
name|htmlTag
init|=
operator|(
name|HtmlTag
operator|)
name|o
decl_stmt|;
if|if
condition|(
name|tag
operator|!=
literal|null
condition|?
operator|!
name|tag
operator|.
name|equals
argument_list|(
name|htmlTag
operator|.
name|tag
argument_list|)
else|:
name|htmlTag
operator|.
name|tag
operator|!=
literal|null
condition|)
return|return
literal|false
return|;
return|return
name|clazz
operator|!=
literal|null
condition|?
name|clazz
operator|.
name|equals
argument_list|(
name|htmlTag
operator|.
name|clazz
argument_list|)
else|:
name|htmlTag
operator|.
name|clazz
operator|==
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
name|int
name|result
init|=
name|tag
operator|!=
literal|null
condition|?
name|tag
operator|.
name|hashCode
argument_list|()
else|:
literal|0
decl_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
operator|(
name|clazz
operator|!=
literal|null
condition|?
name|clazz
operator|.
name|hashCode
argument_list|()
else|:
literal|0
operator|)
expr_stmt|;
return|return
name|result
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|ObjectRef
block|{
specifier|private
specifier|final
name|long
name|objId
decl_stmt|;
specifier|private
specifier|final
name|int
name|version
decl_stmt|;
specifier|public
name|ObjectRef
parameter_list|(
name|long
name|objId
parameter_list|,
name|int
name|version
parameter_list|)
block|{
name|this
operator|.
name|objId
operator|=
name|objId
expr_stmt|;
name|this
operator|.
name|version
operator|=
name|version
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|o
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|o
operator|==
literal|null
operator|||
name|getClass
argument_list|()
operator|!=
name|o
operator|.
name|getClass
argument_list|()
condition|)
return|return
literal|false
return|;
name|ObjectRef
name|objectRef
init|=
operator|(
name|ObjectRef
operator|)
name|o
decl_stmt|;
return|return
name|objId
operator|==
name|objectRef
operator|.
name|objId
operator|&&
name|version
operator|==
name|objectRef
operator|.
name|version
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|Objects
operator|.
name|hash
argument_list|(
name|objId
argument_list|,
name|version
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"ObjectRef{"
operator|+
literal|"objId="
operator|+
name|objId
operator|+
literal|", version="
operator|+
name|version
operator|+
literal|'}'
return|;
block|}
block|}
comment|/**      * In PDF land, MCID are integers that should be unique _per page_.      * This class includes the object ref to the page and the mcid      * so that this should be a cross-document unique key to      * given content.      *<p>      * If the mcid integer == -1, that means that there is text on the page      * not assigned to any marked content.      */
specifier|private
specifier|static
class|class
name|MCID
block|{
comment|//this is the object ref to the particular page
specifier|private
specifier|final
name|ObjectRef
name|objectRef
decl_stmt|;
specifier|private
specifier|final
name|int
name|mcid
decl_stmt|;
specifier|public
name|MCID
parameter_list|(
name|ObjectRef
name|objectRef
parameter_list|,
name|int
name|mcid
parameter_list|)
block|{
name|this
operator|.
name|objectRef
operator|=
name|objectRef
expr_stmt|;
name|this
operator|.
name|mcid
operator|=
name|mcid
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|o
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|o
operator|==
literal|null
operator|||
name|getClass
argument_list|()
operator|!=
name|o
operator|.
name|getClass
argument_list|()
condition|)
return|return
literal|false
return|;
name|MCID
name|mcid1
init|=
operator|(
name|MCID
operator|)
name|o
decl_stmt|;
return|return
name|mcid
operator|==
name|mcid1
operator|.
name|mcid
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|objectRef
argument_list|,
name|mcid1
operator|.
name|objectRef
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|Objects
operator|.
name|hash
argument_list|(
name|objectRef
argument_list|,
name|mcid
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"MCID{"
operator|+
literal|"objectRef="
operator|+
name|objectRef
operator|+
literal|", mcid="
operator|+
name|mcid
operator|+
literal|'}'
return|;
block|}
block|}
block|}
end_class

end_unit

