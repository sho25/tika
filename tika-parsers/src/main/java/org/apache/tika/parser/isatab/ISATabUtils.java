begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|isatab
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Reader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|csv
operator|.
name|CSVFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|csv
operator|.
name|CSVParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|csv
operator|.
name|CSVRecord
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|input
operator|.
name|CloseShieldInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|config
operator|.
name|ServiceLoader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|detect
operator|.
name|AutoDetectReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|exception
operator|.
name|TikaException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|io
operator|.
name|TikaInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|metadata
operator|.
name|Metadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|ParseContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|sax
operator|.
name|XHTMLContentHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_class
specifier|public
class|class
name|ISATabUtils
block|{
specifier|private
specifier|static
specifier|final
name|ServiceLoader
name|LOADER
init|=
operator|new
name|ServiceLoader
argument_list|(
name|ISATabUtils
operator|.
name|class
operator|.
name|getClassLoader
argument_list|()
argument_list|)
decl_stmt|;
comment|/** 	 * INVESTIGATION 	 */
comment|// Investigation section.
specifier|private
specifier|static
specifier|final
name|String
index|[]
name|sections
init|=
block|{
literal|"ONTOLOGY SOURCE REFERENCE"
block|,
literal|"INVESTIGATION"
block|,
literal|"INVESTIGATION PUBLICATIONS"
block|,
literal|"INVESTIGATION CONTACTS"
block|}
decl_stmt|;
comment|// STUDY section (inside the Study section)
specifier|private
specifier|static
specifier|final
name|String
name|studySectionField
init|=
literal|"STUDY"
decl_stmt|;
comment|// Study File Name (inside the STUDY section)
specifier|private
specifier|static
specifier|final
name|String
name|studyFileNameField
init|=
literal|"Study File Name"
decl_stmt|;
specifier|public
specifier|static
name|void
name|parseInvestigation
parameter_list|(
name|InputStream
name|stream
parameter_list|,
name|XHTMLContentHandler
name|handler
parameter_list|,
name|Metadata
name|metadata
parameter_list|,
name|ParseContext
name|context
parameter_list|,
name|String
name|studyFileName
parameter_list|)
throws|throws
name|IOException
throws|,
name|TikaException
throws|,
name|SAXException
block|{
comment|// Automatically detect the character encoding
try|try
init|(
name|AutoDetectReader
name|reader
init|=
operator|new
name|AutoDetectReader
argument_list|(
operator|new
name|CloseShieldInputStream
argument_list|(
name|stream
argument_list|)
argument_list|,
name|metadata
argument_list|,
name|context
operator|.
name|get
argument_list|(
name|ServiceLoader
operator|.
name|class
argument_list|,
name|LOADER
argument_list|)
argument_list|)
init|)
block|{
name|extractMetadata
argument_list|(
name|reader
argument_list|,
name|metadata
argument_list|,
name|studyFileName
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
name|void
name|parseInvestigation
parameter_list|(
name|InputStream
name|stream
parameter_list|,
name|XHTMLContentHandler
name|handler
parameter_list|,
name|Metadata
name|metadata
parameter_list|,
name|ParseContext
name|context
parameter_list|)
throws|throws
name|IOException
throws|,
name|TikaException
throws|,
name|SAXException
block|{
name|parseInvestigation
argument_list|(
name|stream
argument_list|,
name|handler
argument_list|,
name|metadata
argument_list|,
name|context
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|parseStudy
parameter_list|(
name|InputStream
name|stream
parameter_list|,
name|XHTMLContentHandler
name|xhtml
parameter_list|,
name|Metadata
name|metadata
parameter_list|,
name|ParseContext
name|context
parameter_list|)
throws|throws
name|IOException
throws|,
name|TikaException
throws|,
name|SAXException
block|{
name|TikaInputStream
name|tis
init|=
name|TikaInputStream
operator|.
name|get
argument_list|(
name|stream
argument_list|)
decl_stmt|;
comment|// Automatically detect the character encoding
try|try
init|(
name|AutoDetectReader
name|reader
init|=
operator|new
name|AutoDetectReader
argument_list|(
operator|new
name|CloseShieldInputStream
argument_list|(
name|tis
argument_list|)
argument_list|,
name|metadata
argument_list|,
name|context
operator|.
name|get
argument_list|(
name|ServiceLoader
operator|.
name|class
argument_list|,
name|LOADER
argument_list|)
argument_list|)
init|;
name|CSVParser
name|csvParser
operator|=
operator|new
name|CSVParser
argument_list|(
name|reader
argument_list|,
name|CSVFormat
operator|.
name|TDF
argument_list|)
init|)
block|{
name|Iterator
argument_list|<
name|CSVRecord
argument_list|>
name|iterator
init|=
name|csvParser
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|xhtml
operator|.
name|startElement
argument_list|(
literal|"table"
argument_list|)
expr_stmt|;
name|xhtml
operator|.
name|startElement
argument_list|(
literal|"thead"
argument_list|)
expr_stmt|;
if|if
condition|(
name|iterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|CSVRecord
name|record
init|=
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|record
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|xhtml
operator|.
name|startElement
argument_list|(
literal|"th"
argument_list|)
expr_stmt|;
name|xhtml
operator|.
name|characters
argument_list|(
name|record
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|xhtml
operator|.
name|endElement
argument_list|(
literal|"th"
argument_list|)
expr_stmt|;
block|}
block|}
name|xhtml
operator|.
name|endElement
argument_list|(
literal|"thead"
argument_list|)
expr_stmt|;
name|xhtml
operator|.
name|startElement
argument_list|(
literal|"tbody"
argument_list|)
expr_stmt|;
while|while
condition|(
name|iterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|CSVRecord
name|record
init|=
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
name|xhtml
operator|.
name|startElement
argument_list|(
literal|"tr"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|record
operator|.
name|size
argument_list|()
condition|;
name|j
operator|++
control|)
block|{
name|xhtml
operator|.
name|startElement
argument_list|(
literal|"td"
argument_list|)
expr_stmt|;
name|xhtml
operator|.
name|characters
argument_list|(
name|record
operator|.
name|get
argument_list|(
name|j
argument_list|)
argument_list|)
expr_stmt|;
name|xhtml
operator|.
name|endElement
argument_list|(
literal|"td"
argument_list|)
expr_stmt|;
block|}
name|xhtml
operator|.
name|endElement
argument_list|(
literal|"tr"
argument_list|)
expr_stmt|;
block|}
name|xhtml
operator|.
name|endElement
argument_list|(
literal|"tbody"
argument_list|)
expr_stmt|;
name|xhtml
operator|.
name|endElement
argument_list|(
literal|"table"
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
name|void
name|parseAssay
parameter_list|(
name|InputStream
name|stream
parameter_list|,
name|XHTMLContentHandler
name|xhtml
parameter_list|,
name|Metadata
name|metadata
parameter_list|,
name|ParseContext
name|context
parameter_list|)
throws|throws
name|IOException
throws|,
name|TikaException
throws|,
name|SAXException
block|{
name|TikaInputStream
name|tis
init|=
name|TikaInputStream
operator|.
name|get
argument_list|(
name|stream
argument_list|)
decl_stmt|;
comment|// Automatically detect the character encoding
try|try
init|(
name|AutoDetectReader
name|reader
init|=
operator|new
name|AutoDetectReader
argument_list|(
operator|new
name|CloseShieldInputStream
argument_list|(
name|tis
argument_list|)
argument_list|,
name|metadata
argument_list|,
name|context
operator|.
name|get
argument_list|(
name|ServiceLoader
operator|.
name|class
argument_list|,
name|LOADER
argument_list|)
argument_list|)
init|;
name|CSVParser
name|csvParser
operator|=
operator|new
name|CSVParser
argument_list|(
name|reader
argument_list|,
name|CSVFormat
operator|.
name|TDF
argument_list|)
init|)
block|{
name|xhtml
operator|.
name|startElement
argument_list|(
literal|"table"
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|CSVRecord
argument_list|>
name|iterator
init|=
name|csvParser
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|xhtml
operator|.
name|startElement
argument_list|(
literal|"thead"
argument_list|)
expr_stmt|;
if|if
condition|(
name|iterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|CSVRecord
name|record
init|=
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|record
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|xhtml
operator|.
name|startElement
argument_list|(
literal|"th"
argument_list|)
expr_stmt|;
name|xhtml
operator|.
name|characters
argument_list|(
name|record
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|xhtml
operator|.
name|endElement
argument_list|(
literal|"th"
argument_list|)
expr_stmt|;
block|}
block|}
name|xhtml
operator|.
name|endElement
argument_list|(
literal|"thead"
argument_list|)
expr_stmt|;
name|xhtml
operator|.
name|startElement
argument_list|(
literal|"tbody"
argument_list|)
expr_stmt|;
while|while
condition|(
name|iterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|CSVRecord
name|record
init|=
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
name|xhtml
operator|.
name|startElement
argument_list|(
literal|"tr"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|record
operator|.
name|size
argument_list|()
condition|;
name|j
operator|++
control|)
block|{
name|xhtml
operator|.
name|startElement
argument_list|(
literal|"td"
argument_list|)
expr_stmt|;
name|xhtml
operator|.
name|characters
argument_list|(
name|record
operator|.
name|get
argument_list|(
name|j
argument_list|)
argument_list|)
expr_stmt|;
name|xhtml
operator|.
name|endElement
argument_list|(
literal|"td"
argument_list|)
expr_stmt|;
block|}
name|xhtml
operator|.
name|endElement
argument_list|(
literal|"tr"
argument_list|)
expr_stmt|;
block|}
name|xhtml
operator|.
name|endElement
argument_list|(
literal|"tbody"
argument_list|)
expr_stmt|;
name|xhtml
operator|.
name|endElement
argument_list|(
literal|"table"
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|void
name|extractMetadata
parameter_list|(
name|Reader
name|reader
parameter_list|,
name|Metadata
name|metadata
parameter_list|,
name|String
name|studyFileName
parameter_list|)
throws|throws
name|IOException
block|{
name|boolean
name|investigationSection
init|=
literal|false
decl_stmt|;
name|boolean
name|studySection
init|=
literal|false
decl_stmt|;
name|boolean
name|studyTarget
init|=
literal|false
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
try|try
init|(
name|CSVParser
name|csvParser
init|=
operator|new
name|CSVParser
argument_list|(
name|reader
argument_list|,
name|CSVFormat
operator|.
name|TDF
argument_list|)
init|)
block|{
name|Iterator
argument_list|<
name|CSVRecord
argument_list|>
name|iterator
init|=
name|csvParser
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|iterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|CSVRecord
name|record
init|=
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|field
init|=
name|record
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|field
operator|.
name|toUpperCase
argument_list|(
name|Locale
operator|.
name|ENGLISH
argument_list|)
operator|.
name|equals
argument_list|(
name|field
argument_list|)
operator|)
operator|&&
operator|(
name|record
operator|.
name|size
argument_list|()
operator|==
literal|1
operator|)
condition|)
block|{
name|investigationSection
operator|=
name|Arrays
operator|.
name|asList
argument_list|(
name|sections
argument_list|)
operator|.
name|contains
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|studySection
operator|=
operator|(
name|studyFileName
operator|!=
literal|null
operator|)
operator|&&
operator|(
name|field
operator|.
name|equals
argument_list|(
name|studySectionField
argument_list|)
operator|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|investigationSection
condition|)
block|{
name|addMetadata
argument_list|(
name|field
argument_list|,
name|record
argument_list|,
name|metadata
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|studySection
condition|)
block|{
if|if
condition|(
name|studyTarget
condition|)
block|{
break|break;
block|}
name|String
name|value
init|=
name|record
operator|.
name|get
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
name|field
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|studyTarget
operator|=
operator|(
name|field
operator|.
name|equals
argument_list|(
name|studyFileNameField
argument_list|)
operator|)
operator|&&
operator|(
name|value
operator|.
name|equals
argument_list|(
name|studyFileName
argument_list|)
operator|)
expr_stmt|;
if|if
condition|(
name|studyTarget
condition|)
block|{
name|mapStudyToMetadata
argument_list|(
name|map
argument_list|,
name|metadata
argument_list|)
expr_stmt|;
name|studySection
operator|=
literal|false
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|studyTarget
condition|)
block|{
name|addMetadata
argument_list|(
name|field
argument_list|,
name|record
argument_list|,
name|metadata
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
throw|throw
name|ioe
throw|;
block|}
block|}
specifier|private
specifier|static
name|void
name|addMetadata
parameter_list|(
name|String
name|field
parameter_list|,
name|CSVRecord
name|record
parameter_list|,
name|Metadata
name|metadata
parameter_list|)
block|{
if|if
condition|(
operator|(
name|record
operator|==
literal|null
operator|)
operator|||
operator|(
name|record
operator|.
name|size
argument_list|()
operator|<=
literal|1
operator|)
condition|)
block|{
return|return;
block|}
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|record
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|metadata
operator|.
name|add
argument_list|(
name|field
argument_list|,
name|record
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|void
name|mapStudyToMetadata
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map
parameter_list|,
name|Metadata
name|metadata
parameter_list|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|map
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|metadata
operator|.
name|add
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

