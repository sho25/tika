begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|rtf
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|exception
operator|.
name|TikaException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|metadata
operator|.
name|Metadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|mime
operator|.
name|MediaType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|ParseContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|Parser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|sax
operator|.
name|XHTMLContentHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|ContentHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|text
operator|.
name|*
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|text
operator|.
name|rtf
operator|.
name|RTFEditorKit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_comment
comment|/**  * RTF parser  */
end_comment

begin_class
specifier|public
class|class
name|RTFParser
implements|implements
name|Parser
block|{
specifier|private
specifier|static
specifier|final
name|Set
argument_list|<
name|MediaType
argument_list|>
name|SUPPORTED_TYPES
init|=
name|Collections
operator|.
name|singleton
argument_list|(
name|MediaType
operator|.
name|application
argument_list|(
literal|"rtf"
argument_list|)
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Pattern
name|F_PATTERN
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"\\\\a?f([0-9]+)"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Pattern
name|FCHARSET_PATTERN
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"\\\\fcharset[0-9]+"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Pattern
name|ANSICPG_PATTERN
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"\\\\ansicpg[0-9]+"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Pattern
name|DEFAULT_FONT_PATTERN
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"\\\\deff(0-9)+"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Pattern
name|FONT_FAMILY_PATTERN
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"\\\\f(nil|roman|swiss|modern|script|decor|tech|bidi)"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|Map
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|FONTSET_MAP
init|=
operator|new
name|HashMap
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
name|FONTSET_MAP
operator|.
name|put
argument_list|(
literal|0
argument_list|,
literal|"windows-1251"
argument_list|)
expr_stmt|;
comment|// ANSI
comment|// charset 1 is Default
comment|// charset 2 is Symbol
name|FONTSET_MAP
operator|.
name|put
argument_list|(
literal|77
argument_list|,
literal|"MacRoman"
argument_list|)
expr_stmt|;
comment|// Mac Roman
name|FONTSET_MAP
operator|.
name|put
argument_list|(
literal|78
argument_list|,
literal|"Shift_JIS"
argument_list|)
expr_stmt|;
comment|// Mac Shift Jis
name|FONTSET_MAP
operator|.
name|put
argument_list|(
literal|79
argument_list|,
literal|"ms949"
argument_list|)
expr_stmt|;
comment|// Mac Hangul
name|FONTSET_MAP
operator|.
name|put
argument_list|(
literal|80
argument_list|,
literal|"GB2312"
argument_list|)
expr_stmt|;
comment|// Mac GB2312
name|FONTSET_MAP
operator|.
name|put
argument_list|(
literal|81
argument_list|,
literal|"Big5"
argument_list|)
expr_stmt|;
comment|// Mac Big5
name|FONTSET_MAP
operator|.
name|put
argument_list|(
literal|82
argument_list|,
literal|"johab"
argument_list|)
expr_stmt|;
comment|// Mac Johab (old)
name|FONTSET_MAP
operator|.
name|put
argument_list|(
literal|83
argument_list|,
literal|"MacHebrew"
argument_list|)
expr_stmt|;
comment|// Mac Hebrew
name|FONTSET_MAP
operator|.
name|put
argument_list|(
literal|84
argument_list|,
literal|"MacArabic"
argument_list|)
expr_stmt|;
comment|// Mac Arabic
name|FONTSET_MAP
operator|.
name|put
argument_list|(
literal|85
argument_list|,
literal|"MacGreek"
argument_list|)
expr_stmt|;
comment|// Mac Greek
name|FONTSET_MAP
operator|.
name|put
argument_list|(
literal|86
argument_list|,
literal|"MacTurkish"
argument_list|)
expr_stmt|;
comment|// Mac Turkish
name|FONTSET_MAP
operator|.
name|put
argument_list|(
literal|87
argument_list|,
literal|"MacThai"
argument_list|)
expr_stmt|;
comment|// Mac Thai
name|FONTSET_MAP
operator|.
name|put
argument_list|(
literal|88
argument_list|,
literal|"cp1250"
argument_list|)
expr_stmt|;
comment|// Mac East Europe
name|FONTSET_MAP
operator|.
name|put
argument_list|(
literal|89
argument_list|,
literal|"cp1251"
argument_list|)
expr_stmt|;
comment|// Mac Russian
name|FONTSET_MAP
operator|.
name|put
argument_list|(
literal|128
argument_list|,
literal|"MS932"
argument_list|)
expr_stmt|;
comment|// Shift JIS
name|FONTSET_MAP
operator|.
name|put
argument_list|(
literal|129
argument_list|,
literal|"ms949"
argument_list|)
expr_stmt|;
comment|// Hangul
name|FONTSET_MAP
operator|.
name|put
argument_list|(
literal|130
argument_list|,
literal|"ms1361"
argument_list|)
expr_stmt|;
comment|// Johab
name|FONTSET_MAP
operator|.
name|put
argument_list|(
literal|134
argument_list|,
literal|"ms936"
argument_list|)
expr_stmt|;
comment|// GB2312
name|FONTSET_MAP
operator|.
name|put
argument_list|(
literal|136
argument_list|,
literal|"ms950"
argument_list|)
expr_stmt|;
comment|// Big5
name|FONTSET_MAP
operator|.
name|put
argument_list|(
literal|161
argument_list|,
literal|"cp1253"
argument_list|)
expr_stmt|;
comment|// Greek
name|FONTSET_MAP
operator|.
name|put
argument_list|(
literal|162
argument_list|,
literal|"cp1254"
argument_list|)
expr_stmt|;
comment|// Turkish
name|FONTSET_MAP
operator|.
name|put
argument_list|(
literal|163
argument_list|,
literal|"cp1258"
argument_list|)
expr_stmt|;
comment|// Vietnamese
name|FONTSET_MAP
operator|.
name|put
argument_list|(
literal|177
argument_list|,
literal|"cp1255"
argument_list|)
expr_stmt|;
comment|// Hebrew
name|FONTSET_MAP
operator|.
name|put
argument_list|(
literal|178
argument_list|,
literal|"cp1256"
argument_list|)
expr_stmt|;
comment|// Arabic
comment|// FONTSET_MAP.put( 179, "" ); // Arabic Traditional
comment|// FONTSET_MAP.put( 180, "" ); // Arabic user
comment|// FONTSET_MAP.put( 181, "" ); // Hebrew user
name|FONTSET_MAP
operator|.
name|put
argument_list|(
literal|186
argument_list|,
literal|"cp1257"
argument_list|)
expr_stmt|;
comment|// Baltic
name|FONTSET_MAP
operator|.
name|put
argument_list|(
literal|204
argument_list|,
literal|"cp1251"
argument_list|)
expr_stmt|;
comment|// Russian
name|FONTSET_MAP
operator|.
name|put
argument_list|(
literal|222
argument_list|,
literal|"ms874"
argument_list|)
expr_stmt|;
comment|// Thai
name|FONTSET_MAP
operator|.
name|put
argument_list|(
literal|238
argument_list|,
literal|"cp1250"
argument_list|)
expr_stmt|;
comment|// Eastern European
name|FONTSET_MAP
operator|.
name|put
argument_list|(
literal|254
argument_list|,
literal|"cp437"
argument_list|)
expr_stmt|;
comment|// PC 437
name|FONTSET_MAP
operator|.
name|put
argument_list|(
literal|255
argument_list|,
literal|"cp850"
argument_list|)
expr_stmt|;
comment|// OEM
block|}
specifier|public
name|Set
argument_list|<
name|MediaType
argument_list|>
name|getSupportedTypes
parameter_list|(
name|ParseContext
name|context
parameter_list|)
block|{
return|return
name|SUPPORTED_TYPES
return|;
block|}
specifier|public
name|void
name|parse
parameter_list|(
name|InputStream
name|stream
parameter_list|,
name|ContentHandler
name|handler
parameter_list|,
name|Metadata
name|metadata
parameter_list|,
name|ParseContext
name|context
parameter_list|)
throws|throws
name|IOException
throws|,
name|SAXException
throws|,
name|TikaException
block|{
name|File
name|tempFile
init|=
literal|null
decl_stmt|;
name|InputStream
name|in
init|=
literal|null
decl_stmt|;
try|try
block|{
name|tempFile
operator|=
name|createUnicodeRtfTempFile
argument_list|(
name|stream
argument_list|)
expr_stmt|;
name|in
operator|=
operator|new
name|FileInputStream
argument_list|(
name|tempFile
argument_list|)
expr_stmt|;
name|Document
name|sd
init|=
operator|new
name|CustomStyledDocument
argument_list|()
decl_stmt|;
operator|new
name|RTFEditorKit
argument_list|()
operator|.
name|read
argument_list|(
name|in
argument_list|,
name|sd
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|XHTMLContentHandler
name|xhtml
init|=
operator|new
name|XHTMLContentHandler
argument_list|(
name|handler
argument_list|,
name|metadata
argument_list|)
decl_stmt|;
name|xhtml
operator|.
name|startDocument
argument_list|()
expr_stmt|;
name|xhtml
operator|.
name|element
argument_list|(
literal|"p"
argument_list|,
name|sd
operator|.
name|getText
argument_list|(
literal|0
argument_list|,
name|sd
operator|.
name|getLength
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|xhtml
operator|.
name|endDocument
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|BadLocationException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|TikaException
argument_list|(
literal|"Error parsing an RTF document"
argument_list|,
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|closeQuietly
argument_list|(
name|in
argument_list|)
expr_stmt|;
if|if
condition|(
name|tempFile
operator|!=
literal|null
condition|)
block|{
name|tempFile
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/**      * @deprecated This method will be removed in Apache Tika 1.0.      */
specifier|public
name|void
name|parse
parameter_list|(
name|InputStream
name|stream
parameter_list|,
name|ContentHandler
name|handler
parameter_list|,
name|Metadata
name|metadata
parameter_list|)
throws|throws
name|IOException
throws|,
name|SAXException
throws|,
name|TikaException
block|{
name|parse
argument_list|(
name|stream
argument_list|,
name|handler
argument_list|,
name|metadata
argument_list|,
operator|new
name|ParseContext
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|String
name|escapeByUnicode
parameter_list|(
name|String
name|data
parameter_list|,
name|String
name|enc
parameter_list|)
block|{
name|StringBuilder
name|dataBuf
init|=
operator|new
name|StringBuilder
argument_list|(
name|data
operator|.
name|length
argument_list|()
operator|+
literal|16
argument_list|)
decl_stmt|;
name|StringBuilder
name|keywordBuf
init|=
operator|new
name|StringBuilder
argument_list|(
literal|4
argument_list|)
decl_stmt|;
name|StringBuilder
name|origDataBuf
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|ByteArrayOutputStream
name|baos
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|data
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|char
name|c1
init|=
name|data
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|keywordBuf
operator|.
name|append
argument_list|(
name|c1
argument_list|)
expr_stmt|;
if|if
condition|(
name|c1
operator|==
literal|'\\'
operator|&&
name|data
operator|.
name|length
argument_list|()
operator|>
name|i
operator|+
literal|1
condition|)
block|{
name|i
operator|++
expr_stmt|;
name|char
name|c2
init|=
name|data
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|keywordBuf
operator|.
name|append
argument_list|(
name|c2
argument_list|)
expr_stmt|;
if|if
condition|(
name|c2
operator|==
literal|'\''
condition|)
block|{
name|i
operator|++
expr_stmt|;
name|char
name|c3
init|=
name|data
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|keywordBuf
operator|.
name|append
argument_list|(
name|c3
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|c3
operator|>=
literal|'0'
operator|&&
name|c3
operator|<=
literal|'9'
operator|)
operator|||
operator|(
name|c3
operator|>=
literal|'a'
operator|&&
name|c3
operator|<=
literal|'f'
operator|)
operator|||
operator|(
name|c3
operator|>=
literal|'A'
operator|&&
name|c3
operator|<=
literal|'F'
operator|)
condition|)
block|{
name|i
operator|++
expr_stmt|;
name|char
name|c4
init|=
name|data
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|keywordBuf
operator|.
name|append
argument_list|(
name|c4
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|c4
operator|>=
literal|'0'
operator|&&
name|c4
operator|<=
literal|'9'
operator|)
operator|||
operator|(
name|c4
operator|>=
literal|'a'
operator|&&
name|c4
operator|<=
literal|'f'
operator|)
operator|||
operator|(
name|c4
operator|>=
literal|'A'
operator|&&
name|c4
operator|<=
literal|'F'
operator|)
condition|)
block|{
name|int
name|value
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
operator|new
name|char
index|[]
block|{
name|c3
block|,
name|c4
block|}
argument_list|)
argument_list|,
literal|16
argument_list|)
decl_stmt|;
name|baos
operator|.
name|write
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|origDataBuf
operator|.
name|append
argument_list|(
name|keywordBuf
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|keywordBuf
operator|.
name|delete
argument_list|(
literal|0
argument_list|,
literal|4
argument_list|)
expr_stmt|;
continue|continue;
block|}
block|}
block|}
block|}
if|if
condition|(
name|baos
operator|.
name|size
argument_list|()
operator|!=
literal|0
condition|)
block|{
try|try
block|{
name|appendUnicodeStr
argument_list|(
name|dataBuf
argument_list|,
operator|new
name|String
argument_list|(
name|baos
operator|.
name|toByteArray
argument_list|()
argument_list|,
name|enc
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedEncodingException
name|e
parameter_list|)
block|{
name|dataBuf
operator|.
name|append
argument_list|(
name|origDataBuf
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|origDataBuf
operator|.
name|delete
argument_list|(
literal|0
argument_list|,
name|origDataBuf
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|baos
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
name|dataBuf
operator|.
name|append
argument_list|(
name|keywordBuf
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|keywordBuf
operator|.
name|delete
argument_list|(
literal|0
argument_list|,
literal|4
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|baos
operator|.
name|size
argument_list|()
operator|!=
literal|0
condition|)
block|{
try|try
block|{
name|appendUnicodeStr
argument_list|(
name|dataBuf
argument_list|,
operator|new
name|String
argument_list|(
name|baos
operator|.
name|toByteArray
argument_list|()
argument_list|,
name|enc
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedEncodingException
name|e
parameter_list|)
block|{
name|dataBuf
operator|.
name|append
argument_list|(
name|origDataBuf
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|dataBuf
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|private
name|void
name|appendUnicodeStr
parameter_list|(
name|StringBuilder
name|dataBuf
parameter_list|,
name|String
name|value
parameter_list|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|value
operator|.
name|length
argument_list|()
condition|;
name|j
operator|++
control|)
block|{
name|char
name|ch
init|=
name|value
operator|.
name|charAt
argument_list|(
name|j
argument_list|)
decl_stmt|;
if|if
condition|(
name|ch
operator|>=
literal|20
operator|&&
name|ch
operator|<
literal|80
condition|)
block|{
name|dataBuf
operator|.
name|append
argument_list|(
name|ch
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|dataBuf
operator|.
name|append
argument_list|(
literal|"{\\u"
argument_list|)
expr_stmt|;
name|dataBuf
operator|.
name|append
argument_list|(
operator|(
name|int
operator|)
name|ch
argument_list|)
expr_stmt|;
name|dataBuf
operator|.
name|append
argument_list|(
literal|'}'
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|File
name|createUnicodeRtfTempFile
parameter_list|(
name|InputStream
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|boolean
name|isDelete
init|=
literal|false
decl_stmt|;
name|File
name|tempFile
init|=
literal|null
decl_stmt|;
name|BufferedOutputStream
name|out
init|=
literal|null
decl_stmt|;
try|try
block|{
name|tempFile
operator|=
name|File
operator|.
name|createTempFile
argument_list|(
literal|"temp"
argument_list|,
literal|".rtf"
argument_list|)
expr_stmt|;
name|out
operator|=
operator|new
name|BufferedOutputStream
argument_list|(
operator|new
name|FileOutputStream
argument_list|(
name|tempFile
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|defaultCharset
init|=
literal|"windows-1251"
decl_stmt|;
comment|// ansi
name|String
name|defaultFont
init|=
literal|"0"
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|fontTableMap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|StringBuilder
name|dataBuf
init|=
operator|new
name|StringBuilder
argument_list|(
literal|255
argument_list|)
decl_stmt|;
name|int
name|ch
decl_stmt|;
name|LinkedList
argument_list|<
name|String
argument_list|>
name|charsetQueue
init|=
operator|new
name|LinkedList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|int
name|depth
init|=
literal|0
decl_stmt|;
name|String
name|prevFt
init|=
literal|null
decl_stmt|;
name|int
name|prevCh
init|=
operator|-
literal|1
decl_stmt|;
while|while
condition|(
operator|(
name|ch
operator|=
name|in
operator|.
name|read
argument_list|()
operator|)
operator|!=
operator|-
literal|1
condition|)
block|{
if|if
condition|(
operator|(
operator|(
name|ch
operator|==
literal|'{'
operator|||
name|ch
operator|==
literal|'}'
operator|)
operator|&&
name|prevCh
operator|!=
literal|'\\'
operator|)
operator|||
operator|(
name|ch
operator|==
literal|' '
operator|&&
operator|(
operator|!
name|FONT_FAMILY_PATTERN
operator|.
name|matcher
argument_list|(
name|dataBuf
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|find
argument_list|()
operator|)
operator|)
condition|)
block|{
if|if
condition|(
name|charsetQueue
operator|.
name|size
argument_list|()
operator|>
name|depth
operator|+
literal|1
condition|)
block|{
name|charsetQueue
operator|.
name|removeLast
argument_list|()
expr_stmt|;
block|}
name|String
name|data
init|=
name|dataBuf
operator|.
name|toString
argument_list|()
decl_stmt|;
name|data
operator|=
name|data
operator|.
name|replace
argument_list|(
literal|"\\cell"
argument_list|,
literal|"\\u0020\\cell"
argument_list|)
expr_stmt|;
if|if
condition|(
name|data
operator|.
name|indexOf
argument_list|(
literal|"\\colortbl"
argument_list|)
operator|!=
operator|-
literal|1
condition|)
block|{
comment|// End of font table, clear last/previous font encountered.
name|prevFt
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|depth
operator|==
literal|1
condition|)
block|{
comment|// check control words for a default charset
name|String
name|cset
init|=
name|loadAnsiCpg
argument_list|(
name|data
argument_list|)
decl_stmt|;
if|if
condition|(
name|cset
operator|!=
literal|null
condition|)
block|{
name|defaultCharset
operator|=
name|cset
expr_stmt|;
block|}
name|Matcher
name|matcher
init|=
name|DEFAULT_FONT_PATTERN
operator|.
name|matcher
argument_list|(
name|data
argument_list|)
decl_stmt|;
if|if
condition|(
name|matcher
operator|.
name|find
argument_list|()
condition|)
block|{
name|defaultFont
operator|=
name|matcher
operator|.
name|group
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
name|String
name|ft
init|=
name|loadFontTable
argument_list|(
name|data
argument_list|)
decl_stmt|;
name|String
name|charset
init|=
name|loadCharset
argument_list|(
name|data
argument_list|)
decl_stmt|;
if|if
condition|(
name|ft
operator|!=
literal|null
operator|&&
name|charset
operator|!=
literal|null
condition|)
block|{
name|fontTableMap
operator|.
name|put
argument_list|(
name|ft
argument_list|,
name|charset
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ft
operator|==
literal|null
operator|&&
name|prevCh
operator|==
literal|' '
condition|)
block|{
name|ft
operator|=
name|prevFt
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ft
operator|!=
literal|null
condition|)
block|{
name|prevFt
operator|=
name|ft
expr_stmt|;
block|}
if|if
condition|(
name|ft
operator|==
literal|null
condition|)
block|{
name|ft
operator|=
name|defaultFont
expr_stmt|;
block|}
comment|// set a current charset
if|if
condition|(
name|charset
operator|==
literal|null
operator|&&
name|ft
operator|!=
literal|null
condition|)
block|{
name|charset
operator|=
name|fontTableMap
operator|.
name|get
argument_list|(
name|ft
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|charset
operator|==
literal|null
operator|&&
name|charsetQueue
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|charset
operator|=
name|charsetQueue
operator|.
name|getLast
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|charset
operator|==
literal|null
condition|)
block|{
name|charset
operator|=
name|defaultCharset
expr_stmt|;
block|}
comment|// add the current charset to a queue
if|if
condition|(
name|charsetQueue
operator|.
name|size
argument_list|()
operator|<
name|depth
operator|+
literal|1
condition|)
block|{
name|charsetQueue
operator|.
name|add
argument_list|(
name|charset
argument_list|)
expr_stmt|;
block|}
name|String
name|escapedStr
init|=
literal|"windows-1251"
operator|.
name|equals
argument_list|(
name|charset
argument_list|)
condition|?
name|data
else|:
name|escapeByUnicode
argument_list|(
name|data
argument_list|,
name|charset
argument_list|)
decl_stmt|;
name|out
operator|.
name|write
argument_list|(
name|escapedStr
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
name|ch
argument_list|)
expr_stmt|;
name|dataBuf
operator|.
name|delete
argument_list|(
literal|0
argument_list|,
name|dataBuf
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|prevCh
operator|=
name|ch
expr_stmt|;
comment|// update a depth
if|if
condition|(
name|ch
operator|==
literal|'{'
condition|)
block|{
name|depth
operator|++
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ch
operator|==
literal|'}'
condition|)
block|{
name|depth
operator|--
expr_stmt|;
block|}
block|}
else|else
block|{
name|dataBuf
operator|.
name|append
argument_list|(
operator|(
name|char
operator|)
name|ch
argument_list|)
expr_stmt|;
block|}
block|}
name|out
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|isDelete
operator|=
literal|true
expr_stmt|;
throw|throw
name|e
throw|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|closeQuietly
argument_list|(
name|out
argument_list|)
expr_stmt|;
if|if
condition|(
name|isDelete
operator|&&
name|tempFile
operator|!=
literal|null
condition|)
block|{
name|tempFile
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|tempFile
return|;
block|}
specifier|private
name|String
name|loadFontTable
parameter_list|(
name|String
name|line
parameter_list|)
block|{
name|Matcher
name|m
init|=
name|F_PATTERN
operator|.
name|matcher
argument_list|(
name|line
argument_list|)
decl_stmt|;
name|String
name|font
init|=
literal|null
decl_stmt|;
while|while
condition|(
operator|(
name|m
operator|.
name|find
argument_list|()
operator|)
condition|)
block|{
name|font
operator|=
name|m
operator|.
name|group
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
return|return
name|font
return|;
block|}
specifier|private
name|String
name|loadAnsiCpg
parameter_list|(
name|String
name|line
parameter_list|)
block|{
name|Matcher
name|m
init|=
name|ANSICPG_PATTERN
operator|.
name|matcher
argument_list|(
name|line
argument_list|)
decl_stmt|;
name|String
name|charset
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|m
operator|.
name|find
argument_list|()
condition|)
block|{
name|int
name|encVal
decl_stmt|;
try|try
block|{
name|encVal
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|m
operator|.
name|group
argument_list|()
operator|.
name|substring
argument_list|(
literal|8
argument_list|)
argument_list|)
expr_stmt|;
name|charset
operator|=
name|FONTSET_MAP
operator|.
name|get
argument_list|(
name|encVal
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
comment|// ignore
block|}
block|}
return|return
name|charset
return|;
block|}
specifier|private
name|String
name|loadCharset
parameter_list|(
name|String
name|line
parameter_list|)
block|{
name|Matcher
name|m
init|=
name|FCHARSET_PATTERN
operator|.
name|matcher
argument_list|(
name|line
argument_list|)
decl_stmt|;
name|String
name|charset
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|m
operator|.
name|find
argument_list|()
condition|)
block|{
name|int
name|encVal
decl_stmt|;
try|try
block|{
name|encVal
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|m
operator|.
name|group
argument_list|()
operator|.
name|substring
argument_list|(
literal|9
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
name|encVal
operator|=
literal|0
expr_stmt|;
block|}
name|charset
operator|=
name|FONTSET_MAP
operator|.
name|get
argument_list|(
name|encVal
argument_list|)
expr_stmt|;
block|}
return|return
name|charset
return|;
block|}
comment|/**      * Customized version of {@link DefaultStyledDocument}. Adds whitespace      * to places where words otherwise could have run together (see      *<a href="https://issues.apache.org/jira/browse/TIKA-392">TIKA-392</a>),      * and works around the problem of Swing expecting a GUI environment (see      *<a href="https://issues.apache.org/jira/browse/TIKA-282">TIKA-282</a>).      */
specifier|private
specifier|static
class|class
name|CustomStyledDocument
extends|extends
name|DefaultStyledDocument
block|{
specifier|private
name|boolean
name|isPrevUnicode
init|=
literal|false
decl_stmt|;
specifier|public
name|CustomStyledDocument
parameter_list|()
block|{
name|super
argument_list|(
operator|new
name|NoReclaimStyleContext
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|insertString
parameter_list|(
name|int
name|offs
parameter_list|,
name|String
name|str
parameter_list|,
name|AttributeSet
name|a
parameter_list|)
throws|throws
name|BadLocationException
block|{
name|boolean
name|isUnicode
init|=
name|str
operator|.
name|length
argument_list|()
operator|==
literal|1
operator|&&
name|str
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|>
literal|127
decl_stmt|;
if|if
condition|(
name|offs
operator|>
literal|0
operator|&&
name|offs
operator|==
name|getLength
argument_list|()
operator|&&
operator|!
name|isPrevUnicode
operator|&&
operator|!
name|isUnicode
condition|)
block|{
name|super
operator|.
name|insertString
argument_list|(
name|offs
argument_list|,
literal|" "
argument_list|,
name|a
argument_list|)
expr_stmt|;
name|super
operator|.
name|insertString
argument_list|(
name|getLength
argument_list|()
argument_list|,
name|str
argument_list|,
name|a
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|super
operator|.
name|insertString
argument_list|(
name|offs
argument_list|,
name|str
argument_list|,
name|a
argument_list|)
expr_stmt|;
block|}
name|isPrevUnicode
operator|=
name|isUnicode
expr_stmt|;
block|}
block|}
comment|/**      * A workaround to      *<a href="https://issues.apache.org/jira/browse/TIKA-282">TIKA-282</a>:      * RTF parser expects a GUI environment. This class simply disables the      * troublesome SwingUtilities.isEventDispatchThread() call that's made in      * the {@link StyleContext#reclaim(AttributeSet)} method.      */
specifier|private
specifier|static
class|class
name|NoReclaimStyleContext
extends|extends
name|StyleContext
block|{
comment|/** Ignored. */
specifier|public
name|void
name|reclaim
parameter_list|(
name|AttributeSet
name|a
parameter_list|)
block|{         }
block|}
block|}
end_class

end_unit

