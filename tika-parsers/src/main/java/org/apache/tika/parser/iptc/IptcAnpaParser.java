begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|iptc
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|ParseException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|SimpleDateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TimeZone
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|exception
operator|.
name|TikaException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|metadata
operator|.
name|Metadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|metadata
operator|.
name|TikaCoreProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|mime
operator|.
name|MediaType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|ParseContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|Parser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|sax
operator|.
name|XHTMLContentHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|ContentHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_comment
comment|/**  * Parser for IPTC ANPA New Wire Feeds  */
end_comment

begin_class
specifier|public
class|class
name|IptcAnpaParser
implements|implements
name|Parser
block|{
comment|/** Serial version UID */
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
operator|-
literal|6062820170212879115L
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|MediaType
name|TYPE
init|=
name|MediaType
operator|.
name|text
argument_list|(
literal|"vnd.iptc.anpa"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Set
argument_list|<
name|MediaType
argument_list|>
name|SUPPORTED_TYPES
init|=
name|Collections
operator|.
name|singleton
argument_list|(
name|TYPE
argument_list|)
decl_stmt|;
specifier|public
name|Set
argument_list|<
name|MediaType
argument_list|>
name|getSupportedTypes
parameter_list|(
name|ParseContext
name|context
parameter_list|)
block|{
return|return
name|SUPPORTED_TYPES
return|;
block|}
specifier|public
name|void
name|parse
parameter_list|(
name|InputStream
name|stream
parameter_list|,
name|ContentHandler
name|handler
parameter_list|,
name|Metadata
name|metadata
parameter_list|,
name|ParseContext
name|context
parameter_list|)
throws|throws
name|IOException
throws|,
name|SAXException
throws|,
name|TikaException
block|{
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|properties
init|=
name|this
operator|.
name|loadProperties
argument_list|(
name|stream
argument_list|)
decl_stmt|;
name|this
operator|.
name|setMetadata
argument_list|(
name|metadata
argument_list|,
name|properties
argument_list|)
expr_stmt|;
name|XHTMLContentHandler
name|xhtml
init|=
operator|new
name|XHTMLContentHandler
argument_list|(
name|handler
argument_list|,
name|metadata
argument_list|)
decl_stmt|;
name|xhtml
operator|.
name|startDocument
argument_list|()
expr_stmt|;
comment|// TODO: put body content here
name|xhtml
operator|.
name|startElement
argument_list|(
literal|"p"
argument_list|)
expr_stmt|;
name|String
name|body
init|=
name|clean
argument_list|(
name|properties
operator|.
name|get
argument_list|(
literal|"body"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|body
operator|!=
literal|null
condition|)
name|xhtml
operator|.
name|characters
argument_list|(
name|body
argument_list|)
expr_stmt|;
name|xhtml
operator|.
name|endElement
argument_list|(
literal|"p"
argument_list|)
expr_stmt|;
name|xhtml
operator|.
name|endDocument
argument_list|()
expr_stmt|;
block|}
comment|/**      * @deprecated This method will be removed in Apache Tika 1.0.      */
specifier|public
name|void
name|parse
parameter_list|(
name|InputStream
name|stream
parameter_list|,
name|ContentHandler
name|handler
parameter_list|,
name|Metadata
name|metadata
parameter_list|)
throws|throws
name|IOException
throws|,
name|SAXException
throws|,
name|TikaException
block|{
name|parse
argument_list|(
name|stream
argument_list|,
name|handler
argument_list|,
name|metadata
argument_list|,
operator|new
name|ParseContext
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|int
name|FMT_ANPA_1312
init|=
literal|0x00
decl_stmt|;
comment|// "NAA 89-3 (ANPA 1312)"
specifier|private
name|int
name|FMT_ANPA_UPI
init|=
literal|0x01
decl_stmt|;
comment|// "United Press International ANPA 1312 variant"
specifier|private
name|int
name|FMT_ANPA_UPI_DL
init|=
literal|0x02
decl_stmt|;
comment|// "United Press International Down-Load Message"
specifier|private
name|int
name|FMT_IPTC_7901
init|=
literal|0x03
decl_stmt|;
comment|// "IPTC7901 Recommended Message Format"
specifier|private
name|int
name|FMT_IPTC_PHOTO
init|=
literal|0x04
decl_stmt|;
comment|// "IPTC-NAA Digital Newsphoto Parameter Record"
specifier|private
name|int
name|FMT_IPTC_CHAR
init|=
literal|0x05
decl_stmt|;
comment|// "IPTC Unstructured Character Oriented File Format (UCOFF)"
specifier|private
name|int
name|FMT_NITF
init|=
literal|0x06
decl_stmt|;
comment|// "News Industry Text Format (NITF)"
specifier|private
name|int
name|FMT_NITF_TT
init|=
literal|0x07
decl_stmt|;
comment|// "Tidningarnas Telegrambyra NITF version (TTNITF DTD)"
specifier|private
name|int
name|FMT_NITF_RB
init|=
literal|0x08
decl_stmt|;
comment|// "Ritzaus Bureau NITF version (RBNITF DTD)"
specifier|private
name|int
name|FMT_IPTC_AP
init|=
literal|0x09
decl_stmt|;
comment|// "Associated Press news wire format"
specifier|private
name|int
name|FMT_IPTC_BLM
init|=
literal|0x0A
decl_stmt|;
comment|// "Bloomberg News news wire format"
specifier|private
name|int
name|FMT_IPTC_NYT
init|=
literal|0x0B
decl_stmt|;
comment|// "New York Times news wire format"
specifier|private
name|int
name|FMT_IPTC_RTR
init|=
literal|0x0C
decl_stmt|;
comment|// "Reuters news wire format"
specifier|private
name|int
name|FORMAT
init|=
name|FMT_ANPA_1312
decl_stmt|;
comment|// assume the default format to be ANPA-1312
specifier|private
specifier|final
specifier|static
name|char
name|SOH
init|=
literal|0x01
decl_stmt|;
comment|// start of header (ctrl-a)
specifier|private
specifier|final
specifier|static
name|char
name|STX
init|=
literal|0x02
decl_stmt|;
comment|// start of text (ctrl-b)
specifier|private
specifier|final
specifier|static
name|char
name|ETX
init|=
literal|0x03
decl_stmt|;
comment|// end of text (ctrl-c)
specifier|private
specifier|final
specifier|static
name|char
name|EOT
init|=
literal|0x04
decl_stmt|;
comment|// the tab character (ctrl-d)
specifier|private
specifier|final
specifier|static
name|char
name|SYN
init|=
literal|0x16
decl_stmt|;
comment|// synchronous idle (ctrl-v)
specifier|private
specifier|final
specifier|static
name|char
name|BS
init|=
literal|0x08
decl_stmt|;
comment|// the backspace character (used for diacriticals)
specifier|private
specifier|final
specifier|static
name|char
name|TB
init|=
literal|0x09
decl_stmt|;
comment|// the tab character
specifier|private
specifier|final
specifier|static
name|char
name|LF
init|=
literal|0x0A
decl_stmt|;
comment|// line feed
specifier|private
specifier|final
specifier|static
name|char
name|FF
init|=
literal|0x0C
decl_stmt|;
comment|// form feed
specifier|private
specifier|final
specifier|static
name|char
name|CR
init|=
literal|0x0D
decl_stmt|;
comment|// carriage return
specifier|private
specifier|final
specifier|static
name|char
name|XQ
init|=
literal|0x11
decl_stmt|;
comment|// device control (ctrl-q)
specifier|private
specifier|final
specifier|static
name|char
name|XS
init|=
literal|0x13
decl_stmt|;
comment|// device control (ctrl-s)
specifier|private
specifier|final
specifier|static
name|char
name|FS
init|=
literal|0x1F
decl_stmt|;
comment|// a field delimiter
specifier|private
specifier|final
specifier|static
name|char
name|HY
init|=
literal|0x2D
decl_stmt|;
comment|// hyphen
specifier|private
specifier|final
specifier|static
name|char
name|SP
init|=
literal|0x20
decl_stmt|;
comment|// the blank space
specifier|private
specifier|final
specifier|static
name|char
name|LT
init|=
literal|0x3C
decl_stmt|;
comment|// less than
specifier|private
specifier|final
specifier|static
name|char
name|EQ
init|=
literal|0x3D
decl_stmt|;
comment|// less than
specifier|private
specifier|final
specifier|static
name|char
name|CT
init|=
literal|0x5E
decl_stmt|;
comment|// carat
specifier|private
specifier|final
specifier|static
name|char
name|SL
init|=
literal|0x91
decl_stmt|;
comment|// single-quote left
specifier|private
specifier|final
specifier|static
name|char
name|SR
init|=
literal|0x92
decl_stmt|;
comment|// single-quote right
specifier|private
specifier|final
specifier|static
name|char
name|DL
init|=
literal|0x93
decl_stmt|;
comment|// double-quote left
specifier|private
specifier|final
specifier|static
name|char
name|DR
init|=
literal|0x94
decl_stmt|;
comment|// double-quote right
comment|/**     * scan the news messsage and store the metadata and data into a map     */
specifier|private
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|loadProperties
parameter_list|(
name|InputStream
name|is
parameter_list|)
block|{
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|properties
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|FORMAT
operator|=
name|this
operator|.
name|scanFormat
argument_list|(
name|is
argument_list|)
expr_stmt|;
name|byte
index|[]
name|residual
init|=
name|this
operator|.
name|getSection
argument_list|(
name|is
argument_list|,
literal|"residual"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|header
init|=
name|this
operator|.
name|getSection
argument_list|(
name|is
argument_list|,
literal|"header"
argument_list|)
decl_stmt|;
name|parseHeader
argument_list|(
name|header
argument_list|,
name|properties
argument_list|)
expr_stmt|;
name|byte
index|[]
name|body
init|=
name|this
operator|.
name|getSection
argument_list|(
name|is
argument_list|,
literal|"body"
argument_list|)
decl_stmt|;
name|parseBody
argument_list|(
name|body
argument_list|,
name|properties
argument_list|)
expr_stmt|;
name|byte
index|[]
name|footer
init|=
name|this
operator|.
name|getSection
argument_list|(
name|is
argument_list|,
literal|"footer"
argument_list|)
decl_stmt|;
name|parseFooter
argument_list|(
name|footer
argument_list|,
name|properties
argument_list|)
expr_stmt|;
return|return
operator|(
name|properties
operator|)
return|;
block|}
specifier|private
name|int
name|scanFormat
parameter_list|(
name|InputStream
name|is
parameter_list|)
block|{
name|int
name|format
init|=
name|this
operator|.
name|FORMAT
decl_stmt|;
name|int
name|maxsize
init|=
literal|524288
decl_stmt|;
comment|//  512K
name|byte
index|[]
name|buf
init|=
operator|new
name|byte
index|[
name|maxsize
index|]
decl_stmt|;
try|try
block|{
if|if
condition|(
name|is
operator|.
name|markSupported
argument_list|()
condition|)
block|{
name|is
operator|.
name|mark
argument_list|(
name|maxsize
argument_list|)
expr_stmt|;
block|}
name|int
name|msgsize
init|=
name|is
operator|.
name|read
argument_list|(
name|buf
argument_list|)
decl_stmt|;
comment|// read in at least the full data
name|String
name|message
init|=
operator|(
operator|new
name|String
argument_list|(
name|buf
argument_list|)
operator|)
operator|.
name|toLowerCase
argument_list|()
decl_stmt|;
comment|// these are not if-then-else, because we want to go from most common
comment|// and fall through to least.  this is imperfect, as these tags could
comment|// show up in other agency stories, but i can't find a spec or any
comment|// explicit codes to identify the wire source in the message itself
if|if
condition|(
name|message
operator|.
name|contains
argument_list|(
literal|"ap-wf"
argument_list|)
condition|)
block|{
name|format
operator|=
name|this
operator|.
name|FMT_IPTC_AP
expr_stmt|;
block|}
if|if
condition|(
name|message
operator|.
name|contains
argument_list|(
literal|"reuters"
argument_list|)
condition|)
block|{
name|format
operator|=
name|this
operator|.
name|FMT_IPTC_RTR
expr_stmt|;
block|}
if|if
condition|(
name|message
operator|.
name|contains
argument_list|(
literal|"new york times"
argument_list|)
condition|)
block|{
name|format
operator|=
name|this
operator|.
name|FMT_IPTC_NYT
expr_stmt|;
block|}
if|if
condition|(
name|message
operator|.
name|contains
argument_list|(
literal|"bloomberg news"
argument_list|)
condition|)
block|{
name|format
operator|=
name|this
operator|.
name|FMT_IPTC_BLM
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|eio
parameter_list|)
block|{
comment|// we are in an unstable state
block|}
try|try
block|{
if|if
condition|(
name|is
operator|.
name|markSupported
argument_list|()
condition|)
block|{
name|is
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|eio
parameter_list|)
block|{
comment|// we are in an unstable state
block|}
return|return
operator|(
name|format
operator|)
return|;
block|}
specifier|private
name|void
name|setFormat
parameter_list|(
name|int
name|format
parameter_list|)
block|{
name|this
operator|.
name|FORMAT
operator|=
name|format
expr_stmt|;
block|}
specifier|private
name|String
name|getFormatName
parameter_list|()
block|{
name|String
name|name
init|=
literal|""
decl_stmt|;
if|if
condition|(
name|FORMAT
operator|==
name|this
operator|.
name|FMT_IPTC_AP
condition|)
block|{
name|name
operator|=
literal|"Associated Press"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|FORMAT
operator|==
name|this
operator|.
name|FMT_IPTC_BLM
condition|)
block|{
name|name
operator|=
literal|"Bloomberg"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|FORMAT
operator|==
name|this
operator|.
name|FMT_IPTC_NYT
condition|)
block|{
name|name
operator|=
literal|"New York Times"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|FORMAT
operator|==
name|this
operator|.
name|FMT_IPTC_RTR
condition|)
block|{
name|name
operator|=
literal|"Reuters"
expr_stmt|;
block|}
return|return
operator|(
name|name
operator|)
return|;
block|}
specifier|private
name|byte
index|[]
name|getSection
parameter_list|(
name|InputStream
name|is
parameter_list|,
name|String
name|name
parameter_list|)
block|{
name|byte
index|[]
name|value
init|=
operator|new
name|byte
index|[
literal|0
index|]
decl_stmt|;
if|if
condition|(
name|name
operator|.
name|equals
argument_list|(
literal|"residual"
argument_list|)
condition|)
block|{
comment|// the header shouldn't be more than 1k, but just being generous here
name|int
name|maxsize
init|=
literal|8192
decl_stmt|;
comment|//  8K
name|byte
name|bstart
init|=
name|SYN
decl_stmt|;
comment|// check for SYN [0x16 : ctrl-v] (may have leftover residue from preceding message)
name|byte
name|bfinish
init|=
name|SOH
decl_stmt|;
comment|// check for SOH [0x01 : ctrl-a] (typically follows a pair of SYN [0x16 : ctrl-v])
name|value
operator|=
name|getSection
argument_list|(
name|is
argument_list|,
name|maxsize
argument_list|,
name|bstart
argument_list|,
name|bfinish
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|name
operator|.
name|equals
argument_list|(
literal|"header"
argument_list|)
condition|)
block|{
comment|// the header shouldn't be more than 1k, but just being generous here
name|int
name|maxsize
init|=
literal|8192
decl_stmt|;
comment|//  8K
name|byte
name|bstart
init|=
name|SOH
decl_stmt|;
comment|// check for SOH [0x01 : ctrl-a] (typically follows a pair of SYN [0x16 : ctrl-v])
name|byte
name|bfinish
init|=
name|STX
decl_stmt|;
comment|// check for STX [0x02 : ctrl-b] (marks end of header, beginning of message)
name|value
operator|=
name|getSection
argument_list|(
name|is
argument_list|,
name|maxsize
argument_list|,
name|bstart
argument_list|,
name|bfinish
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|name
operator|.
name|equals
argument_list|(
literal|"body"
argument_list|)
condition|)
block|{
comment|// the message shouldn't be more than 16k (?), leaving plenty of space
name|int
name|maxsize
init|=
literal|524288
decl_stmt|;
comment|//  512K
name|byte
name|bstart
init|=
name|STX
decl_stmt|;
comment|// check for STX [0x02 : ctrl-b] (marks end of header, beginning of message)
name|byte
name|bfinish
init|=
name|ETX
decl_stmt|;
comment|// check for ETX [0x03 : ctrl-c] (marks end of message, beginning of footer)
name|value
operator|=
name|getSection
argument_list|(
name|is
argument_list|,
name|maxsize
argument_list|,
name|bstart
argument_list|,
name|bfinish
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|name
operator|.
name|equals
argument_list|(
literal|"footer"
argument_list|)
condition|)
block|{
comment|// the footer shouldn't be more than 1k , leaving plenty of space
name|int
name|maxsize
init|=
literal|8192
decl_stmt|;
comment|//  8K
name|byte
name|bstart
init|=
name|ETX
decl_stmt|;
comment|// check for ETX [0x03 : ctrl-c] (marks end of message, beginning of footer)
name|byte
name|bfinish
init|=
name|EOT
decl_stmt|;
comment|// check for EOT [0x04 : ctrl-d] (marks end of transmission)
name|value
operator|=
name|getSection
argument_list|(
name|is
argument_list|,
name|maxsize
argument_list|,
name|bstart
argument_list|,
name|bfinish
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
return|return
operator|(
name|value
operator|)
return|;
block|}
specifier|private
name|byte
index|[]
name|getSection
parameter_list|(
name|InputStream
name|is
parameter_list|,
name|int
name|maxsize
parameter_list|,
name|byte
name|bstart
parameter_list|,
name|byte
name|bfinish
parameter_list|,
name|boolean
name|ifincomplete
parameter_list|)
block|{
name|byte
index|[]
name|value
init|=
operator|new
name|byte
index|[
literal|0
index|]
decl_stmt|;
try|try
block|{
name|boolean
name|started
init|=
literal|false
decl_stmt|;
comment|// check if we have found the start flag
name|boolean
name|finished
init|=
literal|false
decl_stmt|;
comment|// check if we have found the finish flag
name|int
name|read
init|=
literal|0
decl_stmt|;
comment|// the number of bytes we read
name|int
name|start
init|=
literal|0
decl_stmt|;
comment|// the position after the start flag
comment|// TODO: this only pulls back 8K of data on a read, regardless of buffer size
comment|//       more nefariously, it caps at a total 8K, through all sections
name|int
name|streammax
init|=
name|is
operator|.
name|available
argument_list|()
decl_stmt|;
name|maxsize
operator|=
name|Math
operator|.
name|min
argument_list|(
name|maxsize
argument_list|,
name|streammax
argument_list|)
expr_stmt|;
name|is
operator|.
name|mark
argument_list|(
name|maxsize
argument_list|)
expr_stmt|;
name|byte
index|[]
name|buf
init|=
operator|new
name|byte
index|[
name|maxsize
index|]
decl_stmt|;
name|int
name|totsize
init|=
literal|0
decl_stmt|;
name|int
name|remainder
init|=
name|maxsize
operator|-
name|totsize
decl_stmt|;
while|while
condition|(
name|remainder
operator|>
literal|0
condition|)
block|{
name|int
name|msgsize
init|=
name|is
operator|.
name|read
argument_list|(
name|buf
argument_list|,
name|maxsize
operator|-
name|remainder
argument_list|,
name|maxsize
argument_list|)
decl_stmt|;
comment|// read in at least the full data
if|if
condition|(
name|msgsize
operator|==
operator|-
literal|1
condition|)
block|{
name|remainder
operator|=
name|msgsize
operator|=
literal|0
expr_stmt|;
block|}
name|remainder
operator|-=
name|msgsize
expr_stmt|;
name|totsize
operator|+=
name|msgsize
expr_stmt|;
block|}
comment|// scan through the provided input stream
for|for
control|(
name|read
operator|=
literal|0
init|;
name|read
operator|<
name|totsize
condition|;
name|read
operator|++
control|)
block|{
name|byte
name|b
init|=
name|buf
index|[
name|read
index|]
decl_stmt|;
if|if
condition|(
operator|!
name|started
condition|)
block|{
name|started
operator|=
operator|(
name|b
operator|==
name|bstart
operator|)
expr_stmt|;
name|start
operator|=
name|read
operator|+
literal|1
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|finished
operator|=
operator|(
name|b
operator|==
name|bfinish
operator|)
condition|)
block|{
comment|/*                is.reset();                long skipped = is.skip((long)read);                if (skipped != read) {                   // we are in an unstable state                }                is.mark(1);  */
break|break;
block|}
comment|// load from the stream until we run out of characters, or hit the termination byte
continue|continue;
block|}
comment|// move the input stream back to where it was initially
name|is
operator|.
name|reset
argument_list|()
expr_stmt|;
if|if
condition|(
name|finished
condition|)
block|{
comment|// now, we want to reset the stream to be sitting right on top of the finish marker
name|is
operator|.
name|skip
argument_list|(
name|read
argument_list|)
expr_stmt|;
name|value
operator|=
operator|new
name|byte
index|[
name|read
operator|-
name|start
index|]
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|buf
argument_list|,
name|start
argument_list|,
name|value
argument_list|,
literal|0
argument_list|,
name|read
operator|-
name|start
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|ifincomplete
operator|&&
name|started
condition|)
block|{
comment|// the caller wants anything that was read, and we finished the stream or buffer
name|value
operator|=
operator|new
name|byte
index|[
name|read
operator|-
name|start
index|]
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|buf
argument_list|,
name|start
argument_list|,
name|value
argument_list|,
literal|0
argument_list|,
name|read
operator|-
name|start
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|eio
parameter_list|)
block|{
comment|// something invalid occurred, return an empty string
block|}
return|return
operator|(
name|value
operator|)
return|;
block|}
specifier|private
name|boolean
name|parseHeader
parameter_list|(
name|byte
index|[]
name|value
parameter_list|,
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|properties
parameter_list|)
block|{
name|boolean
name|added
init|=
literal|false
decl_stmt|;
name|String
name|env_serviceid
init|=
literal|""
decl_stmt|;
name|String
name|env_category
init|=
literal|""
decl_stmt|;
name|String
name|env_urgency
init|=
literal|""
decl_stmt|;
name|String
name|hdr_edcode
init|=
literal|""
decl_stmt|;
name|String
name|hdr_subject
init|=
literal|""
decl_stmt|;
name|String
name|hdr_date
init|=
literal|""
decl_stmt|;
name|String
name|hdr_time
init|=
literal|""
decl_stmt|;
name|int
name|read
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|read
operator|<
name|value
operator|.
name|length
condition|)
block|{
comment|// pull apart the envelope, getting the service id  (....\x1f)
while|while
condition|(
name|read
operator|<
name|value
operator|.
name|length
condition|)
block|{
name|byte
name|val_next
init|=
name|value
index|[
name|read
operator|++
index|]
decl_stmt|;
if|if
condition|(
name|val_next
operator|!=
name|FS
condition|)
block|{
name|env_serviceid
operator|+=
call|(
name|char
call|)
argument_list|(
name|val_next
operator|&
literal|0xff
argument_list|)
expr_stmt|;
comment|// convert the byte to an unsigned int
block|}
else|else
block|{
break|break;
block|}
block|}
comment|// pull apart the envelope, getting the category  (....\x13\x11)
while|while
condition|(
name|read
operator|<
name|value
operator|.
name|length
condition|)
block|{
name|byte
name|val_next
init|=
name|value
index|[
name|read
operator|++
index|]
decl_stmt|;
if|if
condition|(
name|val_next
operator|!=
name|XS
condition|)
block|{
comment|// the end of the envelope is marked (\x13)
name|env_category
operator|+=
call|(
name|char
call|)
argument_list|(
name|val_next
operator|&
literal|0xff
argument_list|)
expr_stmt|;
comment|// convert the byte to an unsigned int
block|}
else|else
block|{
name|val_next
operator|=
name|value
index|[
name|read
index|]
expr_stmt|;
comment|// get the remaining byte (\x11)
if|if
condition|(
name|val_next
operator|==
name|XQ
condition|)
block|{
name|read
operator|++
expr_stmt|;
block|}
break|break;
block|}
block|}
comment|// pull apart the envelope, getting the subject heading
while|while
condition|(
name|read
operator|<
name|value
operator|.
name|length
condition|)
block|{
name|boolean
name|subject
init|=
literal|true
decl_stmt|;
name|byte
name|val_next
init|=
name|value
index|[
name|read
operator|++
index|]
decl_stmt|;
while|while
condition|(
operator|(
name|subject
operator|)
operator|&&
operator|(
name|val_next
operator|!=
name|SP
operator|)
operator|&&
operator|(
name|val_next
operator|!=
literal|0x00
operator|)
condition|)
block|{
comment|// ignore the envelope subject
name|hdr_subject
operator|+=
call|(
name|char
call|)
argument_list|(
name|val_next
operator|&
literal|0xff
argument_list|)
expr_stmt|;
comment|// convert the byte to an unsigned int
name|val_next
operator|=
operator|(
name|read
operator|<
name|value
operator|.
name|length
operator|)
condition|?
name|value
index|[
name|read
operator|++
index|]
else|:
literal|0x00
expr_stmt|;
while|while
condition|(
name|val_next
operator|==
name|SP
condition|)
block|{
comment|// consume all the spaces
name|subject
operator|=
literal|false
expr_stmt|;
name|val_next
operator|=
operator|(
name|read
operator|<
name|value
operator|.
name|length
operator|)
condition|?
name|value
index|[
name|read
operator|++
index|]
else|:
literal|0x00
expr_stmt|;
if|if
condition|(
name|val_next
operator|!=
name|SP
condition|)
block|{
operator|--
name|read
expr_stmt|;
comment|// otherwise we eat into the next section
block|}
block|}
block|}
if|if
condition|(
operator|!
name|subject
condition|)
block|{
break|break;
block|}
block|}
comment|// pull apart the envelope, getting the date and time
while|while
condition|(
name|read
operator|<
name|value
operator|.
name|length
condition|)
block|{
name|byte
name|val_next
init|=
name|value
index|[
name|read
operator|++
index|]
decl_stmt|;
if|if
condition|(
name|hdr_date
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
while|while
condition|(
operator|(
operator|(
name|val_next
operator|>=
operator|(
name|byte
operator|)
literal|0x30
operator|)
operator|&&
operator|(
name|val_next
operator|<=
operator|(
name|byte
operator|)
literal|0x39
operator|)
operator|)
comment|// consume all numerics and hyphens
operator|||
operator|(
name|val_next
operator|==
name|HY
operator|)
condition|)
block|{
name|hdr_date
operator|+=
call|(
name|char
call|)
argument_list|(
name|val_next
operator|&
literal|0xff
argument_list|)
expr_stmt|;
comment|// convert the byte to an unsigned int
name|val_next
operator|=
operator|(
name|read
operator|<
name|value
operator|.
name|length
operator|)
condition|?
name|value
index|[
name|read
operator|++
index|]
else|:
literal|0x00
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|val_next
operator|==
name|SP
condition|)
block|{
while|while
condition|(
name|val_next
operator|==
name|SP
condition|)
block|{
comment|// consume all the spaces
name|val_next
operator|=
operator|(
name|read
operator|<
name|value
operator|.
name|length
operator|)
condition|?
name|value
index|[
name|read
operator|++
index|]
else|:
literal|0x00
expr_stmt|;
block|}
continue|continue;
block|}
else|else
block|{
while|while
condition|(
operator|(
operator|(
name|val_next
operator|>=
operator|(
name|byte
operator|)
literal|0x30
operator|)
operator|&&
operator|(
name|val_next
operator|<=
operator|(
name|byte
operator|)
literal|0x39
operator|)
operator|)
comment|// consume all numerics and hyphens
operator|||
operator|(
name|val_next
operator|==
name|HY
operator|)
condition|)
block|{
name|hdr_time
operator|+=
call|(
name|char
call|)
argument_list|(
name|val_next
operator|&
literal|0xff
argument_list|)
expr_stmt|;
comment|// convert the byte to an unsigned int
name|val_next
operator|=
operator|(
name|read
operator|<
name|value
operator|.
name|length
operator|)
condition|?
name|value
index|[
name|read
operator|++
index|]
else|:
literal|0x00
expr_stmt|;
block|}
block|}
block|}
break|break;
comment|// don't let this run back through and start thrashing metadata
block|}
comment|// if we were saving any of these values, we would set the properties map here
name|added
operator|=
operator|(
name|env_serviceid
operator|.
name|length
argument_list|()
operator|+
name|env_category
operator|.
name|length
argument_list|()
operator|+
name|hdr_subject
operator|.
name|length
argument_list|()
operator|+
name|hdr_date
operator|.
name|length
argument_list|()
operator|+
name|hdr_time
operator|.
name|length
argument_list|()
operator|)
operator|>
literal|0
expr_stmt|;
return|return
name|added
return|;
block|}
specifier|private
name|boolean
name|parseBody
parameter_list|(
name|byte
index|[]
name|value
parameter_list|,
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|properties
parameter_list|)
block|{
name|boolean
name|added
init|=
literal|false
decl_stmt|;
name|String
name|bdy_heading
init|=
literal|""
decl_stmt|;
name|String
name|bdy_title
init|=
literal|""
decl_stmt|;
name|String
name|bdy_source
init|=
literal|""
decl_stmt|;
name|String
name|bdy_author
init|=
literal|""
decl_stmt|;
name|String
name|bdy_body
init|=
literal|""
decl_stmt|;
name|int
name|read
init|=
literal|0
decl_stmt|;
name|boolean
name|done
init|=
literal|false
decl_stmt|;
while|while
condition|(
operator|!
name|done
operator|&&
operator|(
name|read
operator|<
name|value
operator|.
name|length
operator|)
condition|)
block|{
comment|// pull apart the body, getting the heading (^....\x0d\x0a)
while|while
condition|(
name|read
operator|<
name|value
operator|.
name|length
condition|)
block|{
name|byte
name|val_next
init|=
name|value
index|[
name|read
operator|++
index|]
decl_stmt|;
if|if
condition|(
name|val_next
operator|==
name|CT
condition|)
block|{
comment|//  start of a new section , first is the heading
name|val_next
operator|=
operator|(
name|read
operator|<
name|value
operator|.
name|length
operator|)
condition|?
name|value
index|[
name|read
operator|++
index|]
else|:
literal|0x00
expr_stmt|;
comment|// AP, NYT, and Bloomberg end with< , Reuters with EOL
while|while
condition|(
operator|(
name|val_next
operator|!=
name|LT
operator|)
operator|&&
operator|(
name|val_next
operator|!=
name|CR
operator|)
operator|&&
operator|(
name|val_next
operator|!=
name|LF
operator|)
condition|)
block|{
comment|// less than delimiter (\x3c) and not EOL
name|bdy_heading
operator|+=
call|(
name|char
call|)
argument_list|(
name|val_next
operator|&
literal|0xff
argument_list|)
expr_stmt|;
comment|// convert the byte to an unsigned int
name|val_next
operator|=
operator|(
name|read
operator|<
name|value
operator|.
name|length
operator|)
condition|?
name|value
index|[
name|read
operator|++
index|]
else|:
literal|0x00
expr_stmt|;
if|if
condition|(
name|read
operator|>
name|value
operator|.
name|length
condition|)
block|{
break|break;
block|}
comment|// shouldn't ever hit this, but save a NPE
block|}
if|if
condition|(
name|val_next
operator|==
name|LT
condition|)
block|{
comment|// hit the delimiter, carry on
name|val_next
operator|=
operator|(
name|read
operator|<
name|value
operator|.
name|length
operator|)
condition|?
name|value
index|[
name|read
operator|++
index|]
else|:
literal|0x00
expr_stmt|;
block|}
while|while
condition|(
name|bdy_heading
operator|.
name|length
argument_list|()
operator|>
literal|0
operator|&&
operator|(
operator|(
name|val_next
operator|==
name|CR
operator|)
operator|||
operator|(
name|val_next
operator|==
name|LF
operator|)
operator|)
condition|)
block|{
name|val_next
operator|=
operator|(
name|read
operator|<
name|value
operator|.
name|length
operator|)
condition|?
name|value
index|[
name|read
operator|++
index|]
else|:
literal|0x00
expr_stmt|;
comment|// skip the new lines
if|if
condition|(
operator|(
name|val_next
operator|!=
name|CR
operator|)
operator|&&
operator|(
name|val_next
operator|!=
name|LF
operator|)
condition|)
block|{
operator|--
name|read
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
comment|// this will only be hit on poorly-formed files
comment|// for reuters, the heading does not start with the ^, so we push one back into the stream
if|if
condition|(
name|FORMAT
operator|==
name|this
operator|.
name|FMT_IPTC_RTR
condition|)
block|{
if|if
condition|(
name|val_next
operator|!=
name|CT
condition|)
block|{
comment|// for any non-whitespace, we need to go back an additional step to non destroy the data
if|if
condition|(
operator|(
name|val_next
operator|!=
name|SP
operator|)
operator|&&
operator|(
name|val_next
operator|!=
name|TB
operator|)
operator|&&
operator|(
name|val_next
operator|!=
name|CR
operator|)
operator|&&
operator|(
name|val_next
operator|!=
name|LF
operator|)
condition|)
block|{
comment|// if the very first byte is data, we have to shift the whole array, and stuff in a carat
if|if
condition|(
name|read
operator|==
literal|1
condition|)
block|{
name|byte
index|[]
name|resize
init|=
operator|new
name|byte
index|[
name|value
operator|.
name|length
operator|+
literal|1
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|value
argument_list|,
literal|0
argument_list|,
name|resize
argument_list|,
literal|1
argument_list|,
name|value
operator|.
name|length
argument_list|)
expr_stmt|;
name|value
operator|=
name|resize
expr_stmt|;
block|}
block|}
name|value
index|[
operator|--
name|read
index|]
operator|=
name|CT
expr_stmt|;
continue|continue;
block|}
block|}
block|}
break|break;
block|}
comment|// pull apart the body, getting the title (^....\x0d\x0a)
while|while
condition|(
name|read
operator|<
name|value
operator|.
name|length
condition|)
block|{
name|byte
name|val_next
init|=
name|value
index|[
name|read
operator|++
index|]
decl_stmt|;
if|if
condition|(
name|val_next
operator|==
name|CT
condition|)
block|{
comment|//  start of a new section , first is the heading
name|val_next
operator|=
operator|(
name|read
operator|<
name|value
operator|.
name|length
operator|)
condition|?
name|value
index|[
name|read
operator|++
index|]
else|:
literal|0x00
expr_stmt|;
comment|// AP, NYT, and Bloomberg end with< , Reuters with EOL
while|while
condition|(
operator|(
name|val_next
operator|!=
name|LT
operator|)
operator|&&
operator|(
name|val_next
operator|!=
name|CT
operator|)
operator|&&
operator|(
name|val_next
operator|!=
name|CR
operator|)
operator|&&
operator|(
name|val_next
operator|!=
name|LF
operator|)
condition|)
block|{
comment|// less than delimiter (\x3c), or carat (\x5e) and not EOL
name|bdy_title
operator|+=
call|(
name|char
call|)
argument_list|(
name|val_next
operator|&
literal|0xff
argument_list|)
expr_stmt|;
comment|// convert the byte to an unsigned int
name|val_next
operator|=
operator|(
name|read
operator|<
name|value
operator|.
name|length
operator|)
condition|?
name|value
index|[
name|read
operator|++
index|]
else|:
literal|0x00
expr_stmt|;
if|if
condition|(
name|read
operator|>
name|value
operator|.
name|length
condition|)
block|{
break|break;
block|}
comment|// shouldn't ever hit this, but save a NPE
block|}
if|if
condition|(
name|val_next
operator|==
name|CT
condition|)
block|{
comment|//  start of a new section , when first didn't finish cleanly
operator|--
name|read
expr_stmt|;
block|}
if|if
condition|(
name|val_next
operator|==
name|LT
condition|)
block|{
comment|// hit the delimiter, carry on
name|val_next
operator|=
operator|(
name|read
operator|<
name|value
operator|.
name|length
operator|)
condition|?
name|value
index|[
name|read
operator|++
index|]
else|:
literal|0x00
expr_stmt|;
block|}
while|while
condition|(
name|bdy_title
operator|.
name|length
argument_list|()
operator|>
literal|0
operator|&&
operator|(
operator|(
name|val_next
operator|==
name|CR
operator|)
operator|||
operator|(
name|val_next
operator|==
name|LF
operator|)
operator|)
condition|)
block|{
name|val_next
operator|=
operator|(
name|read
operator|<
name|value
operator|.
name|length
operator|)
condition|?
name|value
index|[
name|read
operator|++
index|]
else|:
literal|0x00
expr_stmt|;
comment|// skip the new lines
if|if
condition|(
operator|(
name|val_next
operator|!=
name|CR
operator|)
operator|&&
operator|(
name|val_next
operator|!=
name|LF
operator|)
condition|)
block|{
operator|--
name|read
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
comment|// this will only be hit on poorly-formed files
comment|// for bloomberg, the title does not start with the ^, so we push one back into the stream
if|if
condition|(
name|FORMAT
operator|==
name|this
operator|.
name|FMT_IPTC_BLM
condition|)
block|{
if|if
condition|(
name|val_next
operator|==
name|TB
condition|)
block|{
name|value
index|[
operator|--
name|read
index|]
operator|=
name|CT
expr_stmt|;
continue|continue;
block|}
block|}
comment|// for reuters, the title does not start with the ^, so we push one back into the stream
if|if
condition|(
name|FORMAT
operator|==
name|this
operator|.
name|FMT_IPTC_RTR
condition|)
block|{
if|if
condition|(
name|val_next
operator|!=
name|CT
condition|)
block|{
comment|// for any non-whitespace, we need to go back an additional step to non destroy the data
if|if
condition|(
operator|(
name|val_next
operator|!=
name|SP
operator|)
operator|&&
operator|(
name|val_next
operator|!=
name|TB
operator|)
operator|&&
operator|(
name|val_next
operator|!=
name|CR
operator|)
operator|&&
operator|(
name|val_next
operator|!=
name|LF
operator|)
condition|)
block|{
operator|--
name|read
expr_stmt|;
block|}
name|value
index|[
operator|--
name|read
index|]
operator|=
name|CT
expr_stmt|;
continue|continue;
block|}
block|}
block|}
break|break;
block|}
comment|// at this point, we have a variable number of metadata lines, with various orders
comment|// we scan the start of each line for the special character, and run to the end character
comment|// pull apart the body, getting the title (^....\x0d\x0a)
name|boolean
name|metastarted
init|=
literal|false
decl_stmt|;
name|String
name|longline
init|=
literal|""
decl_stmt|;
name|String
name|longkey
init|=
literal|""
decl_stmt|;
while|while
condition|(
name|read
operator|<
name|value
operator|.
name|length
condition|)
block|{
name|byte
name|val_next
init|=
name|value
index|[
name|read
operator|++
index|]
decl_stmt|;
comment|// eat up whitespace before committing to the next section
if|if
condition|(
operator|(
name|val_next
operator|==
name|SP
operator|)
operator|||
operator|(
name|val_next
operator|==
name|TB
operator|)
operator|||
operator|(
name|val_next
operator|==
name|CR
operator|)
operator|||
operator|(
name|val_next
operator|==
name|LF
operator|)
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|val_next
operator|==
name|CT
condition|)
block|{
comment|//  start of a new section , could be authors, sources, etc
name|val_next
operator|=
operator|(
name|read
operator|<
name|value
operator|.
name|length
operator|)
condition|?
name|value
index|[
name|read
operator|++
index|]
else|:
literal|0x00
expr_stmt|;
name|String
name|tmp_line
init|=
literal|""
decl_stmt|;
while|while
condition|(
operator|(
name|val_next
operator|!=
name|LT
operator|)
operator|&&
operator|(
name|val_next
operator|!=
name|CT
operator|)
operator|&&
operator|(
name|val_next
operator|!=
name|CR
operator|)
operator|&&
operator|(
name|val_next
operator|!=
name|LF
operator|)
operator|&&
operator|(
name|val_next
operator|!=
literal|0
operator|)
condition|)
block|{
comment|// less than delimiter (\x3c), maybe also badly formed with just new line
name|tmp_line
operator|+=
call|(
name|char
call|)
argument_list|(
name|val_next
operator|&
literal|0xff
argument_list|)
expr_stmt|;
comment|// convert the byte to an unsigned int
name|val_next
operator|=
operator|(
name|read
operator|<
name|value
operator|.
name|length
operator|)
condition|?
name|value
index|[
name|read
operator|++
index|]
else|:
literal|0x00
expr_stmt|;
if|if
condition|(
name|read
operator|>
name|value
operator|.
name|length
condition|)
block|{
break|break;
block|}
comment|// shouldn't ever hit this, but save a NPE
block|}
if|if
condition|(
name|val_next
operator|==
name|CT
condition|)
block|{
comment|//  start of a new section , when first didn't finish cleanly
operator|--
name|read
expr_stmt|;
block|}
if|if
condition|(
name|val_next
operator|==
name|LT
condition|)
block|{
comment|// hit the delimiter, carry on
name|val_next
operator|=
operator|(
name|read
operator|<
name|value
operator|.
name|length
operator|)
condition|?
name|value
index|[
name|read
operator|++
index|]
else|:
literal|0x00
expr_stmt|;
block|}
while|while
condition|(
operator|(
name|val_next
operator|==
name|CR
operator|)
operator|||
operator|(
name|val_next
operator|==
name|LF
operator|)
condition|)
block|{
name|val_next
operator|=
operator|(
name|read
operator|<
name|value
operator|.
name|length
operator|)
condition|?
name|value
index|[
name|read
operator|++
index|]
else|:
literal|0x00
expr_stmt|;
comment|// skip the new lines
if|if
condition|(
operator|(
name|val_next
operator|!=
name|CR
operator|)
operator|&&
operator|(
name|val_next
operator|!=
name|LF
operator|)
condition|)
block|{
operator|--
name|read
expr_stmt|;
block|}
block|}
if|if
condition|(
name|tmp_line
operator|.
name|toLowerCase
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"by"
argument_list|)
operator|||
name|longline
operator|.
name|equals
argument_list|(
literal|"bdy_author"
argument_list|)
condition|)
block|{
name|longkey
operator|=
literal|"bdy_author"
expr_stmt|;
comment|// prepend a space to subsequent line, so it gets parsed consistent with the lead line
name|tmp_line
operator|=
operator|(
name|longline
operator|.
name|equals
argument_list|(
name|longkey
argument_list|)
condition|?
literal|" "
else|:
literal|""
operator|)
operator|+
name|tmp_line
expr_stmt|;
comment|// we have an author candidate
name|int
name|term
init|=
name|tmp_line
operator|.
name|length
argument_list|()
decl_stmt|;
name|term
operator|=
name|Math
operator|.
name|min
argument_list|(
name|term
argument_list|,
operator|(
name|tmp_line
operator|.
name|contains
argument_list|(
literal|"<"
argument_list|)
condition|?
name|tmp_line
operator|.
name|indexOf
argument_list|(
literal|"<"
argument_list|)
else|:
name|term
operator|)
argument_list|)
expr_stmt|;
name|term
operator|=
name|Math
operator|.
name|min
argument_list|(
name|term
argument_list|,
operator|(
name|tmp_line
operator|.
name|contains
argument_list|(
literal|"="
argument_list|)
condition|?
name|tmp_line
operator|.
name|indexOf
argument_list|(
literal|"="
argument_list|)
else|:
name|term
operator|)
argument_list|)
expr_stmt|;
name|term
operator|=
name|Math
operator|.
name|min
argument_list|(
name|term
argument_list|,
operator|(
name|tmp_line
operator|.
name|contains
argument_list|(
literal|"\n"
argument_list|)
condition|?
name|tmp_line
operator|.
name|indexOf
argument_list|(
literal|"\n"
argument_list|)
else|:
name|term
operator|)
argument_list|)
expr_stmt|;
name|term
operator|=
operator|(
name|term
operator|>
literal|0
operator|)
condition|?
name|term
else|:
name|tmp_line
operator|.
name|length
argument_list|()
expr_stmt|;
name|bdy_author
operator|+=
name|tmp_line
operator|.
name|substring
argument_list|(
name|tmp_line
operator|.
name|indexOf
argument_list|(
literal|" "
argument_list|)
argument_list|,
name|term
argument_list|)
expr_stmt|;
name|metastarted
operator|=
literal|true
expr_stmt|;
name|longline
operator|=
operator|(
operator|(
name|tmp_line
operator|.
name|contains
argument_list|(
literal|"="
argument_list|)
operator|)
operator|&&
operator|(
operator|!
name|longline
operator|.
name|equals
argument_list|(
name|longkey
argument_list|)
operator|)
condition|?
name|longkey
else|:
literal|""
operator|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|FORMAT
operator|==
name|this
operator|.
name|FMT_IPTC_BLM
condition|)
block|{
name|String
name|byline
init|=
literal|"   by "
decl_stmt|;
if|if
condition|(
name|tmp_line
operator|.
name|toLowerCase
argument_list|()
operator|.
name|contains
argument_list|(
name|byline
argument_list|)
condition|)
block|{
name|longkey
operator|=
literal|"bdy_author"
expr_stmt|;
name|int
name|term
init|=
name|tmp_line
operator|.
name|length
argument_list|()
decl_stmt|;
name|term
operator|=
name|Math
operator|.
name|min
argument_list|(
name|term
argument_list|,
operator|(
name|tmp_line
operator|.
name|contains
argument_list|(
literal|"<"
argument_list|)
condition|?
name|tmp_line
operator|.
name|indexOf
argument_list|(
literal|"<"
argument_list|)
else|:
name|term
operator|)
argument_list|)
expr_stmt|;
name|term
operator|=
name|Math
operator|.
name|min
argument_list|(
name|term
argument_list|,
operator|(
name|tmp_line
operator|.
name|contains
argument_list|(
literal|"="
argument_list|)
condition|?
name|tmp_line
operator|.
name|indexOf
argument_list|(
literal|"="
argument_list|)
else|:
name|term
operator|)
argument_list|)
expr_stmt|;
name|term
operator|=
name|Math
operator|.
name|min
argument_list|(
name|term
argument_list|,
operator|(
name|tmp_line
operator|.
name|contains
argument_list|(
literal|"\n"
argument_list|)
condition|?
name|tmp_line
operator|.
name|indexOf
argument_list|(
literal|"\n"
argument_list|)
else|:
name|term
operator|)
argument_list|)
expr_stmt|;
name|term
operator|=
operator|(
name|term
operator|>
literal|0
operator|)
condition|?
name|term
else|:
name|tmp_line
operator|.
name|length
argument_list|()
expr_stmt|;
comment|// for bloomberg, the author line sits below their copyright statement
name|bdy_author
operator|+=
name|tmp_line
operator|.
name|substring
argument_list|(
name|tmp_line
operator|.
name|toLowerCase
argument_list|()
operator|.
name|indexOf
argument_list|(
name|byline
argument_list|)
operator|+
name|byline
operator|.
name|length
argument_list|()
argument_list|,
name|term
argument_list|)
operator|+
literal|" "
expr_stmt|;
name|metastarted
operator|=
literal|true
expr_stmt|;
name|longline
operator|=
operator|(
operator|(
name|tmp_line
operator|.
name|contains
argument_list|(
literal|"="
argument_list|)
operator|)
operator|&&
operator|(
operator|!
name|longline
operator|.
name|equals
argument_list|(
name|longkey
argument_list|)
operator|)
condition|?
name|longkey
else|:
literal|""
operator|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|tmp_line
operator|.
name|toLowerCase
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"c."
argument_list|)
condition|)
block|{
comment|// the author line for bloomberg is a multiline starting with c.2011 Bloomberg News
comment|// then containing the author info on the next line
if|if
condition|(
name|val_next
operator|==
name|TB
condition|)
block|{
name|value
index|[
operator|--
name|read
index|]
operator|=
name|CT
expr_stmt|;
continue|continue;
block|}
block|}
elseif|else
if|if
condition|(
name|tmp_line
operator|.
name|toLowerCase
argument_list|()
operator|.
name|trim
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"("
argument_list|)
operator|&&
name|tmp_line
operator|.
name|toLowerCase
argument_list|()
operator|.
name|trim
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|")"
argument_list|)
condition|)
block|{
comment|// the author line may have one or more comment lines between the copyright
comment|// statement, and the By AUTHORNAME line
if|if
condition|(
name|val_next
operator|==
name|TB
condition|)
block|{
name|value
index|[
operator|--
name|read
index|]
operator|=
name|CT
expr_stmt|;
continue|continue;
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|tmp_line
operator|.
name|toLowerCase
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"eds"
argument_list|)
operator|||
name|longline
operator|.
name|equals
argument_list|(
literal|"bdy_source"
argument_list|)
condition|)
block|{
name|longkey
operator|=
literal|"bdy_source"
expr_stmt|;
comment|// prepend a space to subsequent line, so it gets parsed consistent with the lead line
name|tmp_line
operator|=
operator|(
name|longline
operator|.
name|equals
argument_list|(
name|longkey
argument_list|)
condition|?
literal|" "
else|:
literal|""
operator|)
operator|+
name|tmp_line
expr_stmt|;
comment|// we have a source candidate
name|int
name|term
init|=
name|tmp_line
operator|.
name|length
argument_list|()
decl_stmt|;
name|term
operator|=
name|Math
operator|.
name|min
argument_list|(
name|term
argument_list|,
operator|(
name|tmp_line
operator|.
name|contains
argument_list|(
literal|"<"
argument_list|)
condition|?
name|tmp_line
operator|.
name|indexOf
argument_list|(
literal|"<"
argument_list|)
else|:
name|term
operator|)
argument_list|)
expr_stmt|;
name|term
operator|=
name|Math
operator|.
name|min
argument_list|(
name|term
argument_list|,
operator|(
name|tmp_line
operator|.
name|contains
argument_list|(
literal|"="
argument_list|)
condition|?
name|tmp_line
operator|.
name|indexOf
argument_list|(
literal|"="
argument_list|)
else|:
name|term
operator|)
argument_list|)
expr_stmt|;
comment|//                  term = Math.min(term, (tmp_line.indexOf("\n")> -1 ? tmp_line.indexOf("\n") : term));
name|term
operator|=
operator|(
name|term
operator|>
literal|0
operator|)
condition|?
name|term
else|:
name|tmp_line
operator|.
name|length
argument_list|()
expr_stmt|;
name|bdy_source
operator|+=
name|tmp_line
operator|.
name|substring
argument_list|(
name|tmp_line
operator|.
name|indexOf
argument_list|(
literal|" "
argument_list|)
operator|+
literal|1
argument_list|,
name|term
argument_list|)
operator|+
literal|" "
expr_stmt|;
name|metastarted
operator|=
literal|true
expr_stmt|;
name|longline
operator|=
operator|(
operator|!
name|longline
operator|.
name|equals
argument_list|(
name|longkey
argument_list|)
condition|?
name|longkey
else|:
literal|""
operator|)
expr_stmt|;
block|}
else|else
block|{
comment|// this has fallen all the way through.  trap it as part of the subject,
comment|// rather than just losing it
if|if
condition|(
operator|!
name|metastarted
condition|)
block|{
name|bdy_title
operator|+=
literal|" , "
operator|+
name|tmp_line
expr_stmt|;
comment|//  not sure where else to put this but in the title
block|}
else|else
block|{
comment|// what to do with stuff that is metadata, which falls after metadata lines started?
name|bdy_body
operator|+=
literal|" "
operator|+
name|tmp_line
operator|+
literal|" , "
expr_stmt|;
comment|//  not sure where else to put this but in the title
block|}
block|}
block|}
else|else
block|{
comment|// we're on to the main body
while|while
condition|(
operator|(
name|read
operator|<
name|value
operator|.
name|length
operator|)
operator|&&
operator|(
name|val_next
operator|!=
literal|0
operator|)
condition|)
block|{
comment|// read until the train runs out of tracks
name|bdy_body
operator|+=
call|(
name|char
call|)
argument_list|(
name|val_next
operator|&
literal|0xff
argument_list|)
expr_stmt|;
comment|// convert the byte to an unsigned int
name|val_next
operator|=
operator|(
name|read
operator|<
name|value
operator|.
name|length
operator|)
condition|?
name|value
index|[
name|read
operator|++
index|]
else|:
literal|0x00
expr_stmt|;
if|if
condition|(
name|read
operator|>
name|value
operator|.
name|length
condition|)
block|{
break|break;
block|}
comment|// shouldn't ever hit this, but save a NPE
block|}
block|}
comment|// we would normally break here, but just let this read out to the end
block|}
name|done
operator|=
literal|true
expr_stmt|;
comment|// don't let this run back through and start thrashing metadata
block|}
name|properties
operator|.
name|put
argument_list|(
literal|"body"
argument_list|,
name|bdy_body
argument_list|)
expr_stmt|;
name|properties
operator|.
name|put
argument_list|(
literal|"title"
argument_list|,
name|bdy_title
argument_list|)
expr_stmt|;
name|properties
operator|.
name|put
argument_list|(
literal|"subject"
argument_list|,
name|bdy_heading
argument_list|)
expr_stmt|;
name|properties
operator|.
name|put
argument_list|(
literal|"author"
argument_list|,
name|bdy_author
argument_list|)
expr_stmt|;
name|properties
operator|.
name|put
argument_list|(
literal|"source"
argument_list|,
name|bdy_source
argument_list|)
expr_stmt|;
name|added
operator|=
operator|(
name|bdy_body
operator|.
name|length
argument_list|()
operator|+
name|bdy_title
operator|.
name|length
argument_list|()
operator|+
name|bdy_heading
operator|.
name|length
argument_list|()
operator|+
name|bdy_author
operator|.
name|length
argument_list|()
operator|+
name|bdy_source
operator|.
name|length
argument_list|()
operator|)
operator|>
literal|0
expr_stmt|;
return|return
name|added
return|;
block|}
specifier|private
name|boolean
name|parseFooter
parameter_list|(
name|byte
index|[]
name|value
parameter_list|,
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|properties
parameter_list|)
block|{
name|boolean
name|added
init|=
literal|false
decl_stmt|;
name|String
name|ftr_source
init|=
literal|""
decl_stmt|;
name|String
name|ftr_datetime
init|=
literal|""
decl_stmt|;
name|int
name|read
init|=
literal|0
decl_stmt|;
name|boolean
name|done
init|=
literal|false
decl_stmt|;
while|while
condition|(
operator|!
name|done
operator|&&
operator|(
name|read
operator|<
name|value
operator|.
name|length
operator|)
condition|)
block|{
comment|// pull apart the footer, getting the news feed source (^....\x0d\x0a)
name|byte
name|val_next
init|=
name|value
index|[
name|read
operator|++
index|]
decl_stmt|;
name|byte
name|val_peek
init|=
operator|(
name|read
operator|<
name|value
operator|.
name|length
operator|)
condition|?
name|value
index|[
name|read
operator|+
literal|1
index|]
else|:
literal|0x00
decl_stmt|;
comment|// skip the new lines
while|while
condition|(
operator|(
operator|(
name|val_next
operator|<
operator|(
name|byte
operator|)
literal|0x30
operator|)
operator|||
operator|(
name|val_next
operator|>
operator|(
name|byte
operator|)
literal|0x39
operator|)
operator|)
operator|&&
operator|(
name|val_next
operator|!=
literal|0
operator|)
condition|)
block|{
comment|// consume all non-numerics first
name|ftr_source
operator|+=
call|(
name|char
call|)
argument_list|(
name|val_next
operator|&
literal|0xff
argument_list|)
expr_stmt|;
comment|// convert the byte to an unsigned int
name|val_next
operator|=
operator|(
name|read
operator|<
name|value
operator|.
name|length
operator|)
condition|?
name|value
index|[
name|read
index|]
else|:
literal|0x00
expr_stmt|;
comment|// attempt to read until end of stream
name|read
operator|++
expr_stmt|;
if|if
condition|(
name|read
operator|>
name|value
operator|.
name|length
condition|)
block|{
break|break;
block|}
comment|// shouldn't ever hit this, but save a NPE
block|}
while|while
condition|(
operator|(
name|val_next
operator|!=
name|LT
operator|)
operator|&&
operator|(
name|val_next
operator|!=
name|CR
operator|)
operator|&&
operator|(
name|val_next
operator|!=
name|LF
operator|)
operator|&&
operator|(
name|val_next
operator|!=
literal|0
operator|)
condition|)
block|{
comment|// get as much timedate as possible
comment|// this is an american format, so arrives as mm-dd-yy HHiizzz
name|ftr_datetime
operator|+=
call|(
name|char
call|)
argument_list|(
name|val_next
operator|&
literal|0xff
argument_list|)
expr_stmt|;
comment|// convert the byte to an unsigned int
name|val_next
operator|=
operator|(
name|read
operator|<
name|value
operator|.
name|length
operator|)
condition|?
name|value
index|[
name|read
operator|++
index|]
else|:
literal|0x00
expr_stmt|;
comment|// skip the new lines
if|if
condition|(
name|read
operator|>
name|value
operator|.
name|length
condition|)
block|{
break|break;
block|}
comment|// shouldn't ever hit this, but save a NPE
block|}
if|if
condition|(
name|val_next
operator|==
name|LT
condition|)
block|{
comment|// hit the delimiter, carry on
name|val_next
operator|=
operator|(
name|read
operator|<
name|value
operator|.
name|length
operator|)
condition|?
name|value
index|[
name|read
operator|++
index|]
else|:
literal|0x00
expr_stmt|;
block|}
if|if
condition|(
name|ftr_datetime
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
comment|// we want to pass this back in a more friendly format
name|String
name|format_out
init|=
literal|"yyyy-MM-dd'T'HH:mm:ss'Z'"
decl_stmt|;
name|Date
name|dateunix
init|=
operator|new
name|Date
argument_list|()
decl_stmt|;
try|try
block|{
comment|// standard ap format
name|String
name|format_in
init|=
literal|"MM-dd-yy HHmmzzz"
decl_stmt|;
if|if
condition|(
name|FORMAT
operator|==
name|this
operator|.
name|FMT_IPTC_RTR
condition|)
block|{
comment|// standard reuters format
name|format_in
operator|=
literal|"HH:mm MM-dd-yy"
expr_stmt|;
block|}
name|SimpleDateFormat
name|dfi
init|=
operator|new
name|SimpleDateFormat
argument_list|(
name|format_in
argument_list|)
decl_stmt|;
name|dfi
operator|.
name|setTimeZone
argument_list|(
name|TimeZone
operator|.
name|getTimeZone
argument_list|(
literal|"UTC"
argument_list|)
argument_list|)
expr_stmt|;
name|dateunix
operator|=
name|dfi
operator|.
name|parse
argument_list|(
name|ftr_datetime
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|ep
parameter_list|)
block|{
comment|// failed, but this will just fall through to setting the date to now
block|}
name|SimpleDateFormat
name|dfo
init|=
operator|new
name|SimpleDateFormat
argument_list|(
name|format_out
argument_list|)
decl_stmt|;
name|dfo
operator|.
name|setTimeZone
argument_list|(
name|TimeZone
operator|.
name|getTimeZone
argument_list|(
literal|"UTC"
argument_list|)
argument_list|)
expr_stmt|;
name|ftr_datetime
operator|=
name|dfo
operator|.
name|format
argument_list|(
name|dateunix
argument_list|)
expr_stmt|;
block|}
while|while
condition|(
operator|(
name|val_next
operator|==
name|CR
operator|)
operator|||
operator|(
name|val_next
operator|==
name|LF
operator|)
condition|)
block|{
name|val_next
operator|=
operator|(
name|read
operator|<
name|value
operator|.
name|length
operator|)
condition|?
name|value
index|[
name|read
operator|++
index|]
else|:
literal|0x00
expr_stmt|;
comment|// skip the new lines
if|if
condition|(
operator|(
name|val_next
operator|!=
name|CR
operator|)
operator|&&
operator|(
name|val_next
operator|!=
name|LF
operator|)
condition|)
block|{
operator|--
name|read
expr_stmt|;
block|}
block|}
name|done
operator|=
literal|true
expr_stmt|;
comment|// don't let this run back through and start thrashing metadata
block|}
name|properties
operator|.
name|put
argument_list|(
literal|"publisher"
argument_list|,
name|ftr_source
argument_list|)
expr_stmt|;
name|properties
operator|.
name|put
argument_list|(
literal|"created"
argument_list|,
name|ftr_datetime
argument_list|)
expr_stmt|;
name|properties
operator|.
name|put
argument_list|(
literal|"modified"
argument_list|,
name|ftr_datetime
argument_list|)
expr_stmt|;
name|added
operator|=
operator|(
name|ftr_source
operator|.
name|length
argument_list|()
operator|+
name|ftr_datetime
operator|.
name|length
argument_list|()
operator|)
operator|>
literal|0
expr_stmt|;
return|return
name|added
return|;
block|}
specifier|private
name|void
name|setMetadata
parameter_list|(
name|Metadata
name|metadata
parameter_list|,
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|properties
parameter_list|)
block|{
comment|// every property that gets set must be non-null, or it will cause NPE
comment|// in other consuming applications, like Lucene
name|metadata
operator|.
name|set
argument_list|(
name|Metadata
operator|.
name|CONTENT_TYPE
argument_list|,
name|clean
argument_list|(
literal|"text/anpa-1312"
argument_list|)
argument_list|)
expr_stmt|;
name|metadata
operator|.
name|set
argument_list|(
name|TikaCoreProperties
operator|.
name|TITLE
argument_list|,
name|clean
argument_list|(
name|properties
operator|.
name|get
argument_list|(
literal|"title"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|metadata
operator|.
name|set
argument_list|(
name|TikaCoreProperties
operator|.
name|KEYWORDS
argument_list|,
name|clean
argument_list|(
name|properties
operator|.
name|get
argument_list|(
literal|"subject"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|metadata
operator|.
name|set
argument_list|(
name|TikaCoreProperties
operator|.
name|CREATOR
argument_list|,
name|clean
argument_list|(
name|properties
operator|.
name|get
argument_list|(
literal|"author"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|metadata
operator|.
name|set
argument_list|(
name|TikaCoreProperties
operator|.
name|CREATED
argument_list|,
name|clean
argument_list|(
name|properties
operator|.
name|get
argument_list|(
literal|"created"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|metadata
operator|.
name|set
argument_list|(
name|TikaCoreProperties
operator|.
name|MODIFIED
argument_list|,
name|clean
argument_list|(
name|properties
operator|.
name|get
argument_list|(
literal|"modified"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|metadata
operator|.
name|set
argument_list|(
name|TikaCoreProperties
operator|.
name|SOURCE
argument_list|,
name|clean
argument_list|(
name|properties
operator|.
name|get
argument_list|(
literal|"source"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|//      metadata.set(TikaCoreProperties.PUBLISHER,     clean(properties.get("publisher")));
name|metadata
operator|.
name|set
argument_list|(
name|TikaCoreProperties
operator|.
name|PUBLISHER
argument_list|,
name|clean
argument_list|(
name|this
operator|.
name|getFormatName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|/*         metadata.set(TikaCoreProperties.DATE, font.getHeader().getCreated().getTime());         metadata.set(                 Property.internalDate(TikaCoreProperties.MODIFIED),                 font.getHeader().getModified().getTime()); */
block|}
specifier|private
name|String
name|clean
parameter_list|(
name|String
name|value
parameter_list|)
block|{
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|value
operator|=
literal|""
expr_stmt|;
block|}
name|value
operator|=
name|value
operator|.
name|replaceAll
argument_list|(
literal|"``"
argument_list|,
literal|"`"
argument_list|)
expr_stmt|;
name|value
operator|=
name|value
operator|.
name|replaceAll
argument_list|(
literal|"''"
argument_list|,
literal|"'"
argument_list|)
expr_stmt|;
name|value
operator|=
name|value
operator|.
name|replaceAll
argument_list|(
operator|new
name|String
argument_list|(
operator|new
name|char
index|[]
block|{
name|SL
block|}
argument_list|)
argument_list|,
literal|"'"
argument_list|)
expr_stmt|;
name|value
operator|=
name|value
operator|.
name|replaceAll
argument_list|(
operator|new
name|String
argument_list|(
operator|new
name|char
index|[]
block|{
name|SR
block|}
argument_list|)
argument_list|,
literal|"'"
argument_list|)
expr_stmt|;
name|value
operator|=
name|value
operator|.
name|replaceAll
argument_list|(
operator|new
name|String
argument_list|(
operator|new
name|char
index|[]
block|{
name|DL
block|}
argument_list|)
argument_list|,
literal|"\""
argument_list|)
expr_stmt|;
name|value
operator|=
name|value
operator|.
name|replaceAll
argument_list|(
operator|new
name|String
argument_list|(
operator|new
name|char
index|[]
block|{
name|DR
block|}
argument_list|)
argument_list|,
literal|"\""
argument_list|)
expr_stmt|;
name|value
operator|=
name|value
operator|.
name|trim
argument_list|()
expr_stmt|;
return|return
operator|(
name|value
operator|)
return|;
block|}
block|}
end_class

end_unit

