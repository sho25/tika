begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|microsoft
operator|.
name|ooxml
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|xwpf
operator|.
name|extractor
operator|.
name|XWPFWordExtractor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|xwpf
operator|.
name|model
operator|.
name|XWPFCommentsDecorator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|xwpf
operator|.
name|model
operator|.
name|XWPFHeaderFooterPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|xwpf
operator|.
name|model
operator|.
name|XWPFHyperlinkDecorator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|xwpf
operator|.
name|model
operator|.
name|XWPFParagraphDecorator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|xwpf
operator|.
name|usermodel
operator|.
name|XWPFDocument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|xwpf
operator|.
name|usermodel
operator|.
name|XWPFParagraph
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|sax
operator|.
name|XHTMLContentHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xmlbeans
operator|.
name|XmlException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|openxmlformats
operator|.
name|schemas
operator|.
name|wordprocessingml
operator|.
name|x2006
operator|.
name|main
operator|.
name|CTBookmark
import|;
end_import

begin_import
import|import
name|org
operator|.
name|openxmlformats
operator|.
name|schemas
operator|.
name|wordprocessingml
operator|.
name|x2006
operator|.
name|main
operator|.
name|CTP
import|;
end_import

begin_import
import|import
name|org
operator|.
name|openxmlformats
operator|.
name|schemas
operator|.
name|wordprocessingml
operator|.
name|x2006
operator|.
name|main
operator|.
name|CTRow
import|;
end_import

begin_import
import|import
name|org
operator|.
name|openxmlformats
operator|.
name|schemas
operator|.
name|wordprocessingml
operator|.
name|x2006
operator|.
name|main
operator|.
name|CTSectPr
import|;
end_import

begin_import
import|import
name|org
operator|.
name|openxmlformats
operator|.
name|schemas
operator|.
name|wordprocessingml
operator|.
name|x2006
operator|.
name|main
operator|.
name|CTTbl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|openxmlformats
operator|.
name|schemas
operator|.
name|wordprocessingml
operator|.
name|x2006
operator|.
name|main
operator|.
name|CTTc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_class
specifier|public
class|class
name|XWPFWordExtractorDecorator
extends|extends
name|AbstractOOXMLExtractor
block|{
specifier|public
name|XWPFWordExtractorDecorator
parameter_list|(
name|XWPFWordExtractor
name|extractor
parameter_list|)
block|{
name|super
argument_list|(
name|extractor
argument_list|,
literal|"application/vnd.openxmlformats-officedocument.wordprocessingml.document"
argument_list|)
expr_stmt|;
block|}
comment|/**      * @see org.apache.poi.xwpf.extractor.XWPFWordExtractor#getText()      */
annotation|@
name|Override
specifier|protected
name|void
name|buildXHTML
parameter_list|(
name|XHTMLContentHandler
name|xhtml
parameter_list|)
throws|throws
name|SAXException
throws|,
name|XmlException
throws|,
name|IOException
block|{
name|XWPFDocument
name|document
init|=
operator|(
name|XWPFDocument
operator|)
name|extractor
operator|.
name|getDocument
argument_list|()
decl_stmt|;
name|XWPFHeaderFooterPolicy
name|hfPolicy
init|=
name|document
operator|.
name|getHeaderFooterPolicy
argument_list|()
decl_stmt|;
comment|// headers
name|extractHeaders
argument_list|(
name|xhtml
argument_list|,
name|hfPolicy
argument_list|)
expr_stmt|;
comment|// first all paragraphs
name|Iterator
argument_list|<
name|XWPFParagraph
argument_list|>
name|i
init|=
name|document
operator|.
name|getParagraphsIterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|i
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|XWPFParagraph
name|paragraph
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|CTSectPr
name|ctSectPr
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|paragraph
operator|.
name|getCTP
argument_list|()
operator|.
name|getPPr
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|ctSectPr
operator|=
name|paragraph
operator|.
name|getCTP
argument_list|()
operator|.
name|getPPr
argument_list|()
operator|.
name|getSectPr
argument_list|()
expr_stmt|;
block|}
name|XWPFHeaderFooterPolicy
name|headerFooterPolicy
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|ctSectPr
operator|!=
literal|null
condition|)
block|{
name|headerFooterPolicy
operator|=
operator|new
name|XWPFHeaderFooterPolicy
argument_list|(
name|document
argument_list|,
name|ctSectPr
argument_list|)
expr_stmt|;
name|extractHeaders
argument_list|(
name|xhtml
argument_list|,
name|headerFooterPolicy
argument_list|)
expr_stmt|;
block|}
name|XWPFParagraphDecorator
name|decorator
init|=
operator|new
name|XWPFCommentsDecorator
argument_list|(
operator|new
name|XWPFHyperlinkDecorator
argument_list|(
name|paragraph
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
argument_list|)
decl_stmt|;
name|CTBookmark
index|[]
name|bookmarks
init|=
name|paragraph
operator|.
name|getCTP
argument_list|()
operator|.
name|getBookmarkStartArray
argument_list|()
decl_stmt|;
for|for
control|(
name|CTBookmark
name|bookmark
range|:
name|bookmarks
control|)
block|{
name|xhtml
operator|.
name|element
argument_list|(
literal|"p"
argument_list|,
name|bookmark
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|xhtml
operator|.
name|element
argument_list|(
literal|"p"
argument_list|,
name|decorator
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|ctSectPr
operator|!=
literal|null
condition|)
block|{
name|extractFooters
argument_list|(
name|xhtml
argument_list|,
name|headerFooterPolicy
argument_list|)
expr_stmt|;
block|}
block|}
comment|// then all document tables
name|extractTableContent
argument_list|(
name|document
argument_list|,
name|xhtml
argument_list|)
expr_stmt|;
name|extractFooters
argument_list|(
name|xhtml
argument_list|,
name|hfPolicy
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|extractFooters
parameter_list|(
name|XHTMLContentHandler
name|xhtml
parameter_list|,
name|XWPFHeaderFooterPolicy
name|hfPolicy
parameter_list|)
throws|throws
name|SAXException
block|{
comment|// footers
if|if
condition|(
name|hfPolicy
operator|.
name|getFirstPageFooter
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|xhtml
operator|.
name|element
argument_list|(
literal|"p"
argument_list|,
name|hfPolicy
operator|.
name|getFirstPageFooter
argument_list|()
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|hfPolicy
operator|.
name|getEvenPageFooter
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|xhtml
operator|.
name|element
argument_list|(
literal|"p"
argument_list|,
name|hfPolicy
operator|.
name|getEvenPageFooter
argument_list|()
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|hfPolicy
operator|.
name|getDefaultFooter
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|xhtml
operator|.
name|element
argument_list|(
literal|"p"
argument_list|,
name|hfPolicy
operator|.
name|getDefaultFooter
argument_list|()
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|extractHeaders
parameter_list|(
name|XHTMLContentHandler
name|xhtml
parameter_list|,
name|XWPFHeaderFooterPolicy
name|hfPolicy
parameter_list|)
throws|throws
name|SAXException
block|{
if|if
condition|(
name|hfPolicy
operator|.
name|getFirstPageHeader
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|xhtml
operator|.
name|element
argument_list|(
literal|"p"
argument_list|,
name|hfPolicy
operator|.
name|getFirstPageHeader
argument_list|()
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|hfPolicy
operator|.
name|getEvenPageHeader
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|xhtml
operator|.
name|element
argument_list|(
literal|"p"
argument_list|,
name|hfPolicy
operator|.
name|getEvenPageHeader
argument_list|()
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|hfPolicy
operator|.
name|getDefaultHeader
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|xhtml
operator|.
name|element
argument_list|(
literal|"p"
argument_list|,
name|hfPolicy
operator|.
name|getDefaultHeader
argument_list|()
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Low level structured parsing of document tables.      */
specifier|private
name|void
name|extractTableContent
parameter_list|(
name|XWPFDocument
name|doc
parameter_list|,
name|XHTMLContentHandler
name|xhtml
parameter_list|)
throws|throws
name|SAXException
block|{
for|for
control|(
name|CTTbl
name|table
range|:
name|doc
operator|.
name|getDocument
argument_list|()
operator|.
name|getBody
argument_list|()
operator|.
name|getTblArray
argument_list|()
control|)
block|{
name|xhtml
operator|.
name|startElement
argument_list|(
literal|"table"
argument_list|)
expr_stmt|;
name|xhtml
operator|.
name|startElement
argument_list|(
literal|"tbody"
argument_list|)
expr_stmt|;
name|CTRow
index|[]
name|rows
init|=
name|table
operator|.
name|getTrArray
argument_list|()
decl_stmt|;
for|for
control|(
name|CTRow
name|row
range|:
name|rows
control|)
block|{
name|xhtml
operator|.
name|startElement
argument_list|(
literal|"tr"
argument_list|)
expr_stmt|;
name|CTTc
index|[]
name|cells
init|=
name|row
operator|.
name|getTcArray
argument_list|()
decl_stmt|;
for|for
control|(
name|CTTc
name|tc
range|:
name|cells
control|)
block|{
name|xhtml
operator|.
name|startElement
argument_list|(
literal|"td"
argument_list|)
expr_stmt|;
name|CTP
index|[]
name|content
init|=
name|tc
operator|.
name|getPArray
argument_list|()
decl_stmt|;
for|for
control|(
name|CTP
name|ctp
range|:
name|content
control|)
block|{
name|XWPFParagraph
name|p
init|=
operator|new
name|MyXWPFParagraph
argument_list|(
name|ctp
argument_list|,
name|doc
argument_list|)
decl_stmt|;
name|XWPFParagraphDecorator
name|decorator
init|=
operator|new
name|XWPFCommentsDecorator
argument_list|(
operator|new
name|XWPFHyperlinkDecorator
argument_list|(
name|p
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
argument_list|)
decl_stmt|;
name|xhtml
operator|.
name|element
argument_list|(
literal|"p"
argument_list|,
name|decorator
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|xhtml
operator|.
name|endElement
argument_list|(
literal|"td"
argument_list|)
expr_stmt|;
block|}
name|xhtml
operator|.
name|endElement
argument_list|(
literal|"tr"
argument_list|)
expr_stmt|;
block|}
name|xhtml
operator|.
name|endElement
argument_list|(
literal|"tbody"
argument_list|)
expr_stmt|;
name|xhtml
operator|.
name|endElement
argument_list|(
literal|"table"
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Private wrapper class that makes the protected {@link XWPFParagraph}      * constructor available.      */
specifier|private
specifier|static
class|class
name|MyXWPFParagraph
extends|extends
name|XWPFParagraph
block|{
specifier|private
name|MyXWPFParagraph
parameter_list|(
name|CTP
name|ctp
parameter_list|,
name|XWPFDocument
name|xwpfDocument
parameter_list|)
block|{
name|super
argument_list|(
name|ctp
argument_list|,
name|xwpfDocument
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

