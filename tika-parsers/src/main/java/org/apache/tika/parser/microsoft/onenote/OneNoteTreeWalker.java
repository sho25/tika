begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|microsoft
operator|.
name|onenote
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|tuple
operator|.
name|Pair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|exception
operator|.
name|TikaException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|exception
operator|.
name|TikaMemoryLimitException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|extractor
operator|.
name|EmbeddedDocumentExtractor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|extractor
operator|.
name|EmbeddedDocumentUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|io
operator|.
name|TikaInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|metadata
operator|.
name|Metadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|ParseContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|sax
operator|.
name|EmbeddedContentHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|sax
operator|.
name|XHTMLContentHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|helpers
operator|.
name|AttributesImpl
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
import|;
end_import

begin_import
import|import
name|java
operator|.
name|time
operator|.
name|Instant
import|;
end_import

begin_import
import|import
name|java
operator|.
name|time
operator|.
name|LocalDateTime
import|;
end_import

begin_import
import|import
name|java
operator|.
name|time
operator|.
name|Month
import|;
end_import

begin_import
import|import
name|java
operator|.
name|time
operator|.
name|ZoneOffset
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_comment
comment|/**  * Walk the one note tree and create a Map while it goes.  * Also writes user input text to a print writer as it parses.  */
end_comment

begin_class
class|class
name|OneNoteTreeWalker
block|{
specifier|private
specifier|static
specifier|final
name|String
name|P
init|=
literal|"p"
decl_stmt|;
specifier|private
specifier|static
name|Pattern
name|HYPERLINK_PATTERN
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"\uFDDFHYPERLINK\\s+\"([^\"]+)\"([^\"]+)$"
argument_list|)
decl_stmt|;
comment|/**      * See spec MS-ONE - 2.3.1 - TIME32 - epoch of jan 1 1980 UTC.      * So we create this offset used to calculate number of seconds between this and the Instant.EPOCH.      */
specifier|private
specifier|static
specifier|final
name|long
name|TIME32_EPOCH_DIFF_1980
decl_stmt|;
static|static
block|{
name|LocalDateTime
name|time32Epoch1980
init|=
name|LocalDateTime
operator|.
name|of
argument_list|(
literal|1980
argument_list|,
name|Month
operator|.
name|JANUARY
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|Instant
name|instant
init|=
name|time32Epoch1980
operator|.
name|atZone
argument_list|(
name|ZoneOffset
operator|.
name|UTC
argument_list|)
operator|.
name|toInstant
argument_list|()
decl_stmt|;
name|TIME32_EPOCH_DIFF_1980
operator|=
operator|(
name|instant
operator|.
name|toEpochMilli
argument_list|()
operator|-
name|Instant
operator|.
name|EPOCH
operator|.
name|toEpochMilli
argument_list|()
operator|)
operator|/
literal|1000
expr_stmt|;
block|}
comment|/**      * See spec MS-DTYP - 2.3.3 - DATETIME dates are based on epoch of jan 1 1601 UTC.      * So we create this offset used to calculate number of seconds between this and the Instant.EPOCH.      */
specifier|private
specifier|static
specifier|final
name|long
name|DATETIME_EPOCH_DIFF_1601
decl_stmt|;
static|static
block|{
name|LocalDateTime
name|time32Epoch1601
init|=
name|LocalDateTime
operator|.
name|of
argument_list|(
literal|1601
argument_list|,
name|Month
operator|.
name|JANUARY
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|Instant
name|instant
init|=
name|time32Epoch1601
operator|.
name|atZone
argument_list|(
name|ZoneOffset
operator|.
name|UTC
argument_list|)
operator|.
name|toInstant
argument_list|()
decl_stmt|;
name|DATETIME_EPOCH_DIFF_1601
operator|=
operator|(
name|instant
operator|.
name|toEpochMilli
argument_list|()
operator|-
name|Instant
operator|.
name|EPOCH
operator|.
name|toEpochMilli
argument_list|()
operator|)
operator|/
literal|1000
expr_stmt|;
block|}
specifier|private
name|OneNoteTreeWalkerOptions
name|options
decl_stmt|;
specifier|private
name|OneNoteDocument
name|oneNoteDocument
decl_stmt|;
specifier|private
name|OneNoteDirectFileResource
name|dif
decl_stmt|;
specifier|private
name|XHTMLContentHandler
name|xhtml
decl_stmt|;
specifier|private
name|Pair
argument_list|<
name|Long
argument_list|,
name|ExtendedGUID
argument_list|>
name|roleAndContext
decl_stmt|;
specifier|private
specifier|final
name|Metadata
name|parentMetadata
decl_stmt|;
specifier|private
specifier|final
name|EmbeddedDocumentExtractor
name|embeddedDocumentExtractor
decl_stmt|;
specifier|private
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|authors
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|mostRecentAuthors
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|originalAuthors
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
name|Instant
name|lastModifiedTimestamp
init|=
name|Instant
operator|.
name|MIN
decl_stmt|;
specifier|private
name|long
name|creationTimestamp
init|=
name|Long
operator|.
name|MAX_VALUE
decl_stmt|;
specifier|private
name|long
name|lastModified
init|=
name|Long
operator|.
name|MIN_VALUE
decl_stmt|;
specifier|private
name|boolean
name|mostRecentAuthorProp
init|=
literal|false
decl_stmt|;
specifier|private
name|boolean
name|originalAuthorProp
init|=
literal|false
decl_stmt|;
comment|/**      * Create a one tree walker.      *      * @param options         The options for how to walk this tree.      * @param oneNoteDocument The one note document we want to walk.      * @param dif             The random file access structure we read and reposition while extracting the content.      * @param xhtml           The XHTMLContentHandler to populate as you walk the tree.      * @param roleAndContext  The role and context value we want to use when crawling. Set this to null if you are      *                        crawling all root file nodes, and don't care about revisions.      */
specifier|public
name|OneNoteTreeWalker
parameter_list|(
name|OneNoteTreeWalkerOptions
name|options
parameter_list|,
name|OneNoteDocument
name|oneNoteDocument
parameter_list|,
name|OneNoteDirectFileResource
name|dif
parameter_list|,
name|XHTMLContentHandler
name|xhtml
parameter_list|,
name|Metadata
name|parentMetadata
parameter_list|,
name|ParseContext
name|parseContext
parameter_list|,
name|Pair
argument_list|<
name|Long
argument_list|,
name|ExtendedGUID
argument_list|>
name|roleAndContext
parameter_list|)
block|{
name|this
operator|.
name|options
operator|=
name|options
expr_stmt|;
name|this
operator|.
name|oneNoteDocument
operator|=
name|oneNoteDocument
expr_stmt|;
name|this
operator|.
name|dif
operator|=
name|dif
expr_stmt|;
name|this
operator|.
name|roleAndContext
operator|=
name|roleAndContext
expr_stmt|;
name|this
operator|.
name|xhtml
operator|=
name|xhtml
expr_stmt|;
name|this
operator|.
name|parentMetadata
operator|=
name|parentMetadata
expr_stmt|;
name|this
operator|.
name|embeddedDocumentExtractor
operator|=
name|EmbeddedDocumentUtil
operator|.
name|getEmbeddedDocumentExtractor
argument_list|(
name|parseContext
argument_list|)
expr_stmt|;
block|}
comment|/**      * Parse the tree.      *      * @return Map of the fully parsed one note document.      * @throws IOException Can throw these when manipulating the seekable byte channel.      */
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|walkTree
parameter_list|()
throws|throws
name|IOException
throws|,
name|TikaException
throws|,
name|SAXException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|structure
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|structure
operator|.
name|put
argument_list|(
literal|"header"
argument_list|,
name|oneNoteDocument
operator|.
name|header
argument_list|)
expr_stmt|;
name|structure
operator|.
name|put
argument_list|(
literal|"rootFileNodes"
argument_list|,
name|walkRootFileNodes
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|structure
return|;
block|}
comment|/**      * Walk the root file nodes, depending on the options will crawl revisions or the entire revision tree.      *      * @return List of the root file nodes.      * @throws IOException Can throw these when manipulating the seekable byte channel.      */
specifier|public
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|walkRootFileNodes
parameter_list|()
throws|throws
name|IOException
throws|,
name|TikaException
throws|,
name|SAXException
block|{
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|res
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|options
operator|.
name|isCrawlAllFileNodesFromRoot
argument_list|()
condition|)
block|{
name|res
operator|.
name|add
argument_list|(
name|walkFileNodeList
argument_list|(
name|oneNoteDocument
operator|.
name|root
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|ExtendedGUID
name|revisionListGuid
range|:
name|oneNoteDocument
operator|.
name|revisionListOrder
control|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|structure
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|structure
operator|.
name|put
argument_list|(
literal|"oneNoteType"
argument_list|,
literal|"Revision"
argument_list|)
expr_stmt|;
name|structure
operator|.
name|put
argument_list|(
literal|"revisionListGuid"
argument_list|,
name|revisionListGuid
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|FileNodePtr
name|fileNodePtr
init|=
name|oneNoteDocument
operator|.
name|revisionManifestLists
operator|.
name|get
argument_list|(
name|revisionListGuid
argument_list|)
decl_stmt|;
name|structure
operator|.
name|put
argument_list|(
literal|"fileNode"
argument_list|,
name|walkRevision
argument_list|(
name|fileNodePtr
argument_list|)
argument_list|)
expr_stmt|;
name|res
operator|.
name|add
argument_list|(
name|structure
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|res
return|;
block|}
comment|/**      * Does the revision role map have this revision role id.      *      * @param rid          The revision id.      * @param revisionRole The revision role Long,GUID pair.      * @return True if exists, false if not.      */
specifier|private
name|boolean
name|hasRevisionRole
parameter_list|(
name|ExtendedGUID
name|rid
parameter_list|,
name|Pair
argument_list|<
name|Long
argument_list|,
name|ExtendedGUID
argument_list|>
name|revisionRole
parameter_list|)
block|{
name|Pair
argument_list|<
name|Long
argument_list|,
name|ExtendedGUID
argument_list|>
name|where
init|=
name|oneNoteDocument
operator|.
name|revisionRoleMap
operator|.
name|get
argument_list|(
name|rid
argument_list|)
decl_stmt|;
return|return
name|where
operator|!=
literal|null
operator|&&
name|where
operator|.
name|equals
argument_list|(
name|revisionRole
argument_list|)
return|;
block|}
comment|/**      * Walk revisions.      *      * @param fileNodePtr The file node pointer to start with.      * @return A map of the parsed data.      * @throws IOException Can throw these when manipulating the seekable byte channel.      */
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|walkRevision
parameter_list|(
name|FileNodePtr
name|fileNodePtr
parameter_list|)
throws|throws
name|IOException
throws|,
name|TikaException
throws|,
name|SAXException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|structure
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|structure
operator|.
name|put
argument_list|(
literal|"oneNoteType"
argument_list|,
literal|"FileNodePointer"
argument_list|)
expr_stmt|;
name|structure
operator|.
name|put
argument_list|(
literal|"offsets"
argument_list|,
name|fileNodePtr
operator|.
name|nodeListPositions
argument_list|)
expr_stmt|;
name|FileNode
name|revisionFileNode
init|=
name|fileNodePtr
operator|.
name|dereference
argument_list|(
name|oneNoteDocument
argument_list|)
decl_stmt|;
name|structure
operator|.
name|put
argument_list|(
literal|"fileNodeId"
argument_list|,
name|revisionFileNode
operator|.
name|id
argument_list|)
expr_stmt|;
if|if
condition|(
name|revisionFileNode
operator|.
name|gosid
operator|!=
literal|null
condition|)
block|{
name|structure
operator|.
name|put
argument_list|(
literal|"gosid"
argument_list|,
name|revisionFileNode
operator|.
name|gosid
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|structure
operator|.
name|put
argument_list|(
literal|"subType"
argument_list|,
name|revisionFileNode
operator|.
name|subType
argument_list|)
expr_stmt|;
name|structure
operator|.
name|put
argument_list|(
literal|"size"
argument_list|,
name|revisionFileNode
operator|.
name|size
argument_list|)
expr_stmt|;
name|structure
operator|.
name|put
argument_list|(
literal|"isFileData"
argument_list|,
name|revisionFileNode
operator|.
name|isFileData
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|ExtendedGUID
argument_list|>
name|validRevisions
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|revisionFileNode
operator|.
name|childFileNodeList
operator|.
name|children
operator|.
name|size
argument_list|()
operator|-
literal|1
init|;
name|i
operator|>=
literal|0
condition|;
operator|--
name|i
control|)
block|{
name|FileNode
name|child
init|=
name|revisionFileNode
operator|.
name|childFileNodeList
operator|.
name|children
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|roleAndContext
operator|!=
literal|null
operator|&&
name|hasRevisionRole
argument_list|(
name|child
operator|.
name|gosid
argument_list|,
name|roleAndContext
argument_list|)
condition|)
block|{
name|validRevisions
operator|.
name|add
argument_list|(
name|child
operator|.
name|gosid
argument_list|)
expr_stmt|;
if|if
condition|(
name|options
operator|.
name|isOnlyLatestRevision
argument_list|()
condition|)
block|{
break|break;
block|}
block|}
block|}
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|children
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|boolean
name|okGroup
init|=
literal|false
decl_stmt|;
for|for
control|(
name|FileNode
name|child
range|:
name|revisionFileNode
operator|.
name|childFileNodeList
operator|.
name|children
control|)
block|{
if|if
condition|(
name|child
operator|.
name|id
operator|==
name|FndStructureConstants
operator|.
name|RevisionManifestStart4FND
operator|||
name|child
operator|.
name|id
operator|==
name|FndStructureConstants
operator|.
name|RevisionManifestStart6FND
operator|||
name|child
operator|.
name|id
operator|==
name|FndStructureConstants
operator|.
name|RevisionManifestStart7FND
condition|)
block|{
name|okGroup
operator|=
name|validRevisions
operator|.
name|contains
argument_list|(
name|child
operator|.
name|gosid
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|okGroup
condition|)
block|{
if|if
condition|(
operator|(
name|child
operator|.
name|id
operator|==
name|FndStructureConstants
operator|.
name|RootObjectReference2FNDX
operator|||
name|child
operator|.
name|id
operator|==
name|FndStructureConstants
operator|.
name|RootObjectReference3FND
operator|)
operator|&&
name|child
operator|.
name|subType
operator|.
name|rootObjectReference
operator|.
name|rootObjectReferenceBase
operator|.
name|rootRole
operator|==
literal|1
condition|)
block|{
name|FileNodePtr
name|childFileNodePointer
init|=
name|oneNoteDocument
operator|.
name|guidToObject
operator|.
name|get
argument_list|(
name|child
operator|.
name|gosid
argument_list|)
decl_stmt|;
name|children
operator|.
name|add
argument_list|(
name|walkFileNodePtr
argument_list|(
name|childFileNodePointer
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
operator|!
name|children
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|childFileNodeListMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|childFileNodeListMap
operator|.
name|put
argument_list|(
literal|"fileNodeListHeader"
argument_list|,
name|revisionFileNode
operator|.
name|childFileNodeList
operator|.
name|fileNodeListHeader
argument_list|)
expr_stmt|;
name|childFileNodeListMap
operator|.
name|put
argument_list|(
literal|"children"
argument_list|,
name|children
argument_list|)
expr_stmt|;
name|structure
operator|.
name|put
argument_list|(
literal|"revisionFileNodeList"
argument_list|,
name|childFileNodeListMap
argument_list|)
expr_stmt|;
block|}
return|return
name|structure
return|;
block|}
comment|/**      * Walk the file node pointer.      *      * @param fileNodePtr The file node pointer.      * @return Returns a map of the main data.      * @throws IOException Can throw these when manipulating the seekable byte channel.      */
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|walkFileNodePtr
parameter_list|(
name|FileNodePtr
name|fileNodePtr
parameter_list|)
throws|throws
name|IOException
throws|,
name|TikaException
throws|,
name|SAXException
block|{
if|if
condition|(
name|fileNodePtr
operator|!=
literal|null
condition|)
block|{
name|FileNode
name|fileNode
init|=
name|fileNodePtr
operator|.
name|dereference
argument_list|(
name|oneNoteDocument
argument_list|)
decl_stmt|;
return|return
name|walkFileNode
argument_list|(
name|fileNode
argument_list|)
return|;
block|}
return|return
name|Collections
operator|.
name|emptyMap
argument_list|()
return|;
block|}
comment|/**      * Walk the file node list.      *      * @param fileNodeList The file node list to parse.      * @return The result.      * @throws IOException Can throw these when manipulating the seekable byte channel.      */
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|walkFileNodeList
parameter_list|(
name|FileNodeList
name|fileNodeList
parameter_list|)
throws|throws
name|IOException
throws|,
name|TikaException
throws|,
name|SAXException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|structure
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|structure
operator|.
name|put
argument_list|(
literal|"oneNoteType"
argument_list|,
literal|"FileNodeList"
argument_list|)
expr_stmt|;
name|structure
operator|.
name|put
argument_list|(
literal|"fileNodeListHeader"
argument_list|,
name|fileNodeList
operator|.
name|fileNodeListHeader
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|fileNodeList
operator|.
name|children
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|children
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|FileNode
name|child
range|:
name|fileNodeList
operator|.
name|children
control|)
block|{
name|children
operator|.
name|add
argument_list|(
name|walkFileNode
argument_list|(
name|child
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|structure
operator|.
name|put
argument_list|(
literal|"children"
argument_list|,
name|children
argument_list|)
expr_stmt|;
block|}
return|return
name|structure
return|;
block|}
comment|/**      * Walk a single file node.      *      * @param fileNode The file node.      * @return Map which is result of the parsed file node.      * @throws IOException Can throw these when manipulating the seekable byte channel.      */
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|walkFileNode
parameter_list|(
name|FileNode
name|fileNode
parameter_list|)
throws|throws
name|IOException
throws|,
name|TikaException
throws|,
name|SAXException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|structure
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|structure
operator|.
name|put
argument_list|(
literal|"oneNoteType"
argument_list|,
literal|"FileNode"
argument_list|)
expr_stmt|;
name|structure
operator|.
name|put
argument_list|(
literal|"gosid"
argument_list|,
name|fileNode
operator|.
name|gosid
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|structure
operator|.
name|put
argument_list|(
literal|"size"
argument_list|,
name|fileNode
operator|.
name|size
argument_list|)
expr_stmt|;
name|structure
operator|.
name|put
argument_list|(
literal|"fileNodeId"
argument_list|,
literal|"0x"
operator|+
name|Long
operator|.
name|toHexString
argument_list|(
name|fileNode
operator|.
name|id
argument_list|)
argument_list|)
expr_stmt|;
name|structure
operator|.
name|put
argument_list|(
literal|"fileNodeIdName"
argument_list|,
name|FndStructureConstants
operator|.
name|nameOf
argument_list|(
name|fileNode
operator|.
name|id
argument_list|)
argument_list|)
expr_stmt|;
name|structure
operator|.
name|put
argument_list|(
literal|"fileNodeBaseType"
argument_list|,
literal|"0x"
operator|+
name|Long
operator|.
name|toHexString
argument_list|(
name|fileNode
operator|.
name|baseType
argument_list|)
argument_list|)
expr_stmt|;
name|structure
operator|.
name|put
argument_list|(
literal|"isFileData"
argument_list|,
name|fileNode
operator|.
name|isFileData
argument_list|)
expr_stmt|;
name|structure
operator|.
name|put
argument_list|(
literal|"idDesc"
argument_list|,
name|fileNode
operator|.
name|idDesc
argument_list|)
expr_stmt|;
if|if
condition|(
name|fileNode
operator|.
name|childFileNodeList
operator|!=
literal|null
operator|&&
name|fileNode
operator|.
name|childFileNodeList
operator|.
name|fileNodeListHeader
operator|!=
literal|null
condition|)
block|{
name|structure
operator|.
name|put
argument_list|(
literal|"childFileNodeList"
argument_list|,
name|walkFileNodeList
argument_list|(
name|fileNode
operator|.
name|childFileNodeList
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|fileNode
operator|.
name|propertySet
operator|!=
literal|null
condition|)
block|{
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|propSet
init|=
name|processPropertySet
argument_list|(
name|fileNode
operator|.
name|propertySet
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|propSet
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|structure
operator|.
name|put
argument_list|(
literal|"propertySet"
argument_list|,
name|propSet
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|fileNode
operator|.
name|subType
operator|.
name|fileDataStoreObjectReference
operator|.
name|ref
operator|!=
literal|null
operator|&&
operator|!
name|FileChunkReference
operator|.
name|nil
argument_list|()
operator|.
name|equals
argument_list|(
name|fileNode
operator|.
name|subType
operator|.
name|fileDataStoreObjectReference
operator|.
name|ref
operator|.
name|fileData
argument_list|)
condition|)
block|{
name|structure
operator|.
name|put
argument_list|(
literal|"fileDataStoreObjectReference"
argument_list|,
name|walkFileDataStoreObjectReference
argument_list|(
name|fileNode
operator|.
name|subType
operator|.
name|fileDataStoreObjectReference
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|structure
return|;
block|}
comment|/**      * Walk a file data store object reference.      *      * @param fileDataStoreObjectReference The file data store object reference we are parsing.      * @return Map containing parsed content.      * @throws IOException Can throw these when manipulating the seekable byte channel.      */
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|walkFileDataStoreObjectReference
parameter_list|(
name|FileDataStoreObjectReference
name|fileDataStoreObjectReference
parameter_list|)
throws|throws
name|IOException
throws|,
name|SAXException
throws|,
name|TikaException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|structure
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|OneNotePtr
name|content
init|=
operator|new
name|OneNotePtr
argument_list|(
name|oneNoteDocument
argument_list|,
name|dif
argument_list|)
decl_stmt|;
name|content
operator|.
name|reposition
argument_list|(
name|fileDataStoreObjectReference
operator|.
name|ref
operator|.
name|fileData
argument_list|)
expr_stmt|;
if|if
condition|(
name|fileDataStoreObjectReference
operator|.
name|ref
operator|.
name|fileData
operator|.
name|cb
operator|>
name|dif
operator|.
name|size
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|TikaMemoryLimitException
argument_list|(
literal|"File data store cb "
operator|+
name|fileDataStoreObjectReference
operator|.
name|ref
operator|.
name|fileData
operator|.
name|cb
operator|+
literal|" exceeds document size: "
operator|+
name|dif
operator|.
name|size
argument_list|()
argument_list|)
throw|;
block|}
name|handleEmbedded
argument_list|(
operator|(
name|int
operator|)
name|fileDataStoreObjectReference
operator|.
name|ref
operator|.
name|fileData
operator|.
name|cb
argument_list|)
expr_stmt|;
name|structure
operator|.
name|put
argument_list|(
literal|"fileDataStoreObjectMetadata"
argument_list|,
name|fileDataStoreObjectReference
argument_list|)
expr_stmt|;
return|return
name|structure
return|;
block|}
specifier|private
name|void
name|handleEmbedded
parameter_list|(
name|int
name|length
parameter_list|)
throws|throws
name|TikaException
throws|,
name|IOException
throws|,
name|SAXException
block|{
name|TikaInputStream
name|stream
init|=
literal|null
decl_stmt|;
name|ByteBuffer
name|buf
init|=
literal|null
decl_stmt|;
try|try
block|{
name|buf
operator|=
name|ByteBuffer
operator|.
name|allocate
argument_list|(
name|length
argument_list|)
expr_stmt|;
name|dif
operator|.
name|read
argument_list|(
name|buf
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|//store this exception in the parent's metadata
name|EmbeddedDocumentUtil
operator|.
name|recordEmbeddedStreamException
argument_list|(
name|e
argument_list|,
name|parentMetadata
argument_list|)
expr_stmt|;
return|return;
block|}
name|Metadata
name|embeddedMetadata
init|=
operator|new
name|Metadata
argument_list|()
decl_stmt|;
try|try
block|{
name|stream
operator|=
name|TikaInputStream
operator|.
name|get
argument_list|(
name|buf
operator|.
name|array
argument_list|()
argument_list|)
expr_stmt|;
name|embeddedDocumentExtractor
operator|.
name|parseEmbedded
argument_list|(
name|stream
argument_list|,
operator|new
name|EmbeddedContentHandler
argument_list|(
name|xhtml
argument_list|)
argument_list|,
name|embeddedMetadata
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|AttributesImpl
name|attributes
init|=
operator|new
name|AttributesImpl
argument_list|()
decl_stmt|;
name|attributes
operator|.
name|addAttribute
argument_list|(
literal|""
argument_list|,
literal|"class"
argument_list|,
literal|"class"
argument_list|,
literal|"CDATA"
argument_list|,
literal|"embedded"
argument_list|)
expr_stmt|;
name|xhtml
operator|.
name|startElement
argument_list|(
literal|"div"
argument_list|,
name|attributes
argument_list|)
expr_stmt|;
name|xhtml
operator|.
name|endElement
argument_list|(
literal|"div"
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|closeQuietly
argument_list|(
name|stream
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * @param propertySet      * @return      * @throws IOException Can throw these when manipulating the seekable byte channel.      */
specifier|private
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|processPropertySet
parameter_list|(
name|PropertySet
name|propertySet
parameter_list|)
throws|throws
name|IOException
throws|,
name|TikaException
throws|,
name|SAXException
block|{
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|propValues
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|PropertyValue
name|propertyValue
range|:
name|propertySet
operator|.
name|rgPridsData
control|)
block|{
name|propValues
operator|.
name|add
argument_list|(
name|processPropertyValue
argument_list|(
name|propertyValue
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|propValues
return|;
block|}
comment|/**      * Is this property a binary property?      *      * @param property The property.      * @return Is it binary?      */
specifier|private
name|boolean
name|propertyIsBinary
parameter_list|(
name|OneNotePropertyEnum
name|property
parameter_list|)
block|{
return|return
name|property
operator|==
name|OneNotePropertyEnum
operator|.
name|RgOutlineIndentDistance
operator|||
name|property
operator|==
name|OneNotePropertyEnum
operator|.
name|NotebookManagementEntityGuid
operator|||
name|property
operator|==
name|OneNotePropertyEnum
operator|.
name|RichEditTextUnicode
return|;
block|}
comment|/**      * Process a property value and populate a map containing all the property value data.      *<p>      * Parse out any relevant text and write it to the print writer as well for easy search engine parsing.      *      * @param propertyValue The property value we are parsing.      * @return The map parsed by this property value.      * @throws IOException Can throw these when manipulating the seekable byte channel.      */
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|processPropertyValue
parameter_list|(
name|PropertyValue
name|propertyValue
parameter_list|)
throws|throws
name|IOException
throws|,
name|TikaException
throws|,
name|SAXException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|propMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|propMap
operator|.
name|put
argument_list|(
literal|"oneNoteType"
argument_list|,
literal|"PropertyValue"
argument_list|)
expr_stmt|;
name|propMap
operator|.
name|put
argument_list|(
literal|"propertyId"
argument_list|,
name|propertyValue
operator|.
name|propertyId
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|propertyValue
operator|.
name|propertyId
operator|.
name|propertyEnum
operator|==
name|OneNotePropertyEnum
operator|.
name|LastModifiedTimeStamp
condition|)
block|{
name|long
name|fullval
init|=
name|propertyValue
operator|.
name|scalar
decl_stmt|;
name|Instant
name|instant
init|=
name|Instant
operator|.
name|ofEpochSecond
argument_list|(
name|fullval
operator|/
literal|10000000
operator|+
name|DATETIME_EPOCH_DIFF_1601
argument_list|)
decl_stmt|;
if|if
condition|(
name|instant
operator|.
name|isAfter
argument_list|(
name|lastModifiedTimestamp
argument_list|)
condition|)
block|{
name|lastModifiedTimestamp
operator|=
name|instant
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|propertyValue
operator|.
name|propertyId
operator|.
name|propertyEnum
operator|==
name|OneNotePropertyEnum
operator|.
name|CreationTimeStamp
condition|)
block|{
comment|// add the TIME32_EPOCH_DIFF_1980 because OneNote TIME32 epoch time is per 1980, not 1970
name|long
name|creationTs
init|=
name|propertyValue
operator|.
name|scalar
operator|+
name|TIME32_EPOCH_DIFF_1980
decl_stmt|;
if|if
condition|(
name|creationTs
operator|<
name|creationTimestamp
condition|)
block|{
name|creationTimestamp
operator|=
name|creationTs
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|propertyValue
operator|.
name|propertyId
operator|.
name|propertyEnum
operator|==
name|OneNotePropertyEnum
operator|.
name|LastModifiedTime
condition|)
block|{
comment|// add the TIME32_EPOCH_DIFF_1980 because OneNote TIME32 epoch time is per 1980, not 1970
name|long
name|lastMod
init|=
name|propertyValue
operator|.
name|scalar
operator|+
name|TIME32_EPOCH_DIFF_1980
decl_stmt|;
if|if
condition|(
name|lastMod
operator|>
name|lastModified
condition|)
block|{
name|lastModified
operator|=
name|lastMod
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|propertyValue
operator|.
name|propertyId
operator|.
name|propertyEnum
operator|==
name|OneNotePropertyEnum
operator|.
name|Author
condition|)
block|{
name|String
name|author
init|=
name|getAuthor
argument_list|(
name|propertyValue
argument_list|)
decl_stmt|;
if|if
condition|(
name|mostRecentAuthorProp
condition|)
block|{
name|propMap
operator|.
name|put
argument_list|(
literal|"MostRecentAuthor"
argument_list|,
name|author
argument_list|)
expr_stmt|;
name|mostRecentAuthors
operator|.
name|add
argument_list|(
name|author
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|originalAuthorProp
condition|)
block|{
name|propMap
operator|.
name|put
argument_list|(
literal|"OriginalAuthor"
argument_list|,
name|author
argument_list|)
expr_stmt|;
name|originalAuthors
operator|.
name|add
argument_list|(
name|author
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|propMap
operator|.
name|put
argument_list|(
literal|"Author"
argument_list|,
name|author
argument_list|)
expr_stmt|;
name|authors
operator|.
name|add
argument_list|(
name|author
argument_list|)
expr_stmt|;
block|}
name|mostRecentAuthorProp
operator|=
literal|false
expr_stmt|;
name|originalAuthorProp
operator|=
literal|false
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|propertyValue
operator|.
name|propertyId
operator|.
name|propertyEnum
operator|==
name|OneNotePropertyEnum
operator|.
name|AuthorMostRecent
condition|)
block|{
name|mostRecentAuthorProp
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|propertyValue
operator|.
name|propertyId
operator|.
name|propertyEnum
operator|==
name|OneNotePropertyEnum
operator|.
name|AuthorOriginal
condition|)
block|{
name|originalAuthorProp
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|propertyValue
operator|.
name|propertyId
operator|.
name|type
operator|>
literal|0
operator|&&
name|propertyValue
operator|.
name|propertyId
operator|.
name|type
operator|<=
literal|6
condition|)
block|{
name|propMap
operator|.
name|put
argument_list|(
literal|"scalar"
argument_list|,
name|propertyValue
operator|.
name|scalar
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|OneNotePtr
name|content
init|=
operator|new
name|OneNotePtr
argument_list|(
name|oneNoteDocument
argument_list|,
name|dif
argument_list|)
decl_stmt|;
name|content
operator|.
name|reposition
argument_list|(
name|propertyValue
operator|.
name|rawData
argument_list|)
expr_stmt|;
name|boolean
name|isBinary
init|=
name|propertyIsBinary
argument_list|(
name|propertyValue
operator|.
name|propertyId
operator|.
name|propertyEnum
argument_list|)
decl_stmt|;
name|propMap
operator|.
name|put
argument_list|(
literal|"isBinary"
argument_list|,
name|isBinary
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|content
operator|.
name|size
argument_list|()
operator|&
literal|1
operator|)
operator|==
literal|0
operator|&&
name|propertyValue
operator|.
name|propertyId
operator|.
name|propertyEnum
operator|!=
name|OneNotePropertyEnum
operator|.
name|TextExtendedAscii
operator|&&
name|isBinary
operator|==
literal|false
condition|)
block|{
if|if
condition|(
name|content
operator|.
name|size
argument_list|()
operator|>
name|dif
operator|.
name|size
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|TikaMemoryLimitException
argument_list|(
literal|"File data store cb "
operator|+
name|content
operator|.
name|size
argument_list|()
operator|+
literal|" exceeds document size: "
operator|+
name|dif
operator|.
name|size
argument_list|()
argument_list|)
throw|;
block|}
name|ByteBuffer
name|buf
init|=
name|ByteBuffer
operator|.
name|allocate
argument_list|(
name|content
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|dif
operator|.
name|read
argument_list|(
name|buf
argument_list|)
expr_stmt|;
name|propMap
operator|.
name|put
argument_list|(
literal|"dataUnicode16LE"
argument_list|,
operator|new
name|String
argument_list|(
name|buf
operator|.
name|array
argument_list|()
argument_list|,
name|StandardCharsets
operator|.
name|UTF_16LE
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|options
operator|.
name|getUtf16PropertiesToPrint
argument_list|()
operator|.
name|contains
argument_list|(
name|propertyValue
operator|.
name|propertyId
argument_list|)
condition|)
block|{
name|xhtml
operator|.
name|startElement
argument_list|(
name|P
argument_list|)
expr_stmt|;
name|xhtml
operator|.
name|characters
argument_list|(
operator|(
name|String
operator|)
name|propMap
operator|.
name|get
argument_list|(
literal|"dataUnicode16LE"
argument_list|)
argument_list|)
expr_stmt|;
name|xhtml
operator|.
name|endElement
argument_list|(
name|P
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|propertyValue
operator|.
name|propertyId
operator|.
name|propertyEnum
operator|==
name|OneNotePropertyEnum
operator|.
name|TextExtendedAscii
condition|)
block|{
if|if
condition|(
name|content
operator|.
name|size
argument_list|()
operator|>
name|dif
operator|.
name|size
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|TikaMemoryLimitException
argument_list|(
literal|"File data store cb "
operator|+
name|content
operator|.
name|size
argument_list|()
operator|+
literal|" exceeds document size: "
operator|+
name|dif
operator|.
name|size
argument_list|()
argument_list|)
throw|;
block|}
name|ByteBuffer
name|buf
init|=
name|ByteBuffer
operator|.
name|allocate
argument_list|(
name|content
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|dif
operator|.
name|read
argument_list|(
name|buf
argument_list|)
expr_stmt|;
name|propMap
operator|.
name|put
argument_list|(
literal|"dataAscii"
argument_list|,
operator|new
name|String
argument_list|(
name|buf
operator|.
name|array
argument_list|()
argument_list|,
name|StandardCharsets
operator|.
name|US_ASCII
argument_list|)
argument_list|)
expr_stmt|;
name|xhtml
operator|.
name|startElement
argument_list|(
name|P
argument_list|)
expr_stmt|;
name|xhtml
operator|.
name|characters
argument_list|(
operator|(
name|String
operator|)
name|propMap
operator|.
name|get
argument_list|(
literal|"dataAscii"
argument_list|)
argument_list|)
expr_stmt|;
name|xhtml
operator|.
name|endElement
argument_list|(
name|P
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|isBinary
operator|==
literal|false
condition|)
block|{
if|if
condition|(
name|content
operator|.
name|size
argument_list|()
operator|>
name|dif
operator|.
name|size
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|TikaMemoryLimitException
argument_list|(
literal|"File data store cb "
operator|+
name|content
operator|.
name|size
argument_list|()
operator|+
literal|" exceeds document size: "
operator|+
name|dif
operator|.
name|size
argument_list|()
argument_list|)
throw|;
block|}
name|ByteBuffer
name|buf
init|=
name|ByteBuffer
operator|.
name|allocate
argument_list|(
name|content
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|dif
operator|.
name|read
argument_list|(
name|buf
argument_list|)
expr_stmt|;
name|propMap
operator|.
name|put
argument_list|(
literal|"dataUnicode16LE"
argument_list|,
operator|new
name|String
argument_list|(
name|buf
operator|.
name|array
argument_list|()
argument_list|,
name|StandardCharsets
operator|.
name|UTF_16LE
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|options
operator|.
name|getUtf16PropertiesToPrint
argument_list|()
operator|.
name|contains
argument_list|(
name|propertyValue
operator|.
name|propertyId
argument_list|)
condition|)
block|{
name|xhtml
operator|.
name|startElement
argument_list|(
name|P
argument_list|)
expr_stmt|;
name|xhtml
operator|.
name|characters
argument_list|(
operator|(
name|String
operator|)
name|propMap
operator|.
name|get
argument_list|(
literal|"dataUnicode16LE"
argument_list|)
argument_list|)
expr_stmt|;
name|xhtml
operator|.
name|endElement
argument_list|(
name|P
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|content
operator|.
name|size
argument_list|()
operator|>
name|dif
operator|.
name|size
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|TikaMemoryLimitException
argument_list|(
literal|"File data store cb "
operator|+
name|content
operator|.
name|size
argument_list|()
operator|+
literal|" exceeds document size: "
operator|+
name|dif
operator|.
name|size
argument_list|()
argument_list|)
throw|;
block|}
if|if
condition|(
name|propertyValue
operator|.
name|propertyId
operator|.
name|propertyEnum
operator|==
name|OneNotePropertyEnum
operator|.
name|RichEditTextUnicode
condition|)
block|{
name|handleRichEditTextUnicode
argument_list|(
name|content
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|//TODO -- these seem to be somewhat broken font files and other
comment|//odds and ends...what are they and how should we process them?
comment|//handleEmbedded(content.size());
block|}
block|}
block|}
if|if
condition|(
name|propertyValue
operator|.
name|compactIDs
operator|!=
literal|null
condition|)
block|{
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|children
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|CompactID
name|compactID
range|:
name|propertyValue
operator|.
name|compactIDs
control|)
block|{
name|FileNodePtr
name|childFileNodePointer
init|=
name|oneNoteDocument
operator|.
name|guidToObject
operator|.
name|get
argument_list|(
name|compactID
operator|.
name|guid
argument_list|)
decl_stmt|;
name|children
operator|.
name|add
argument_list|(
name|walkFileNodePtr
argument_list|(
name|childFileNodePointer
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|children
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|propMap
operator|.
name|put
argument_list|(
literal|"children"
argument_list|,
name|children
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|propertyValue
operator|.
name|propertySet
operator|!=
literal|null
operator|&&
name|propertyValue
operator|.
name|propertySet
operator|.
name|rgPridsData
operator|!=
literal|null
condition|)
block|{
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|propSet
init|=
name|processPropertySet
argument_list|(
name|propertyValue
operator|.
name|propertySet
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|propSet
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|propMap
operator|.
name|put
argument_list|(
literal|"propertySet"
argument_list|,
name|propSet
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|propMap
return|;
block|}
comment|/**      * returns a UTF-16LE author string.      * @param propertyValue The property value of an author.      * @return Resulting author string in UTF-16LE format.      */
specifier|private
name|String
name|getAuthor
parameter_list|(
name|PropertyValue
name|propertyValue
parameter_list|)
throws|throws
name|IOException
throws|,
name|TikaMemoryLimitException
block|{
name|OneNotePtr
name|content
init|=
operator|new
name|OneNotePtr
argument_list|(
name|oneNoteDocument
argument_list|,
name|dif
argument_list|)
decl_stmt|;
name|content
operator|.
name|reposition
argument_list|(
name|propertyValue
operator|.
name|rawData
argument_list|)
expr_stmt|;
if|if
condition|(
name|content
operator|.
name|size
argument_list|()
operator|>
name|dif
operator|.
name|size
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|TikaMemoryLimitException
argument_list|(
literal|"File data store cb "
operator|+
name|content
operator|.
name|size
argument_list|()
operator|+
literal|" exceeds document size: "
operator|+
name|dif
operator|.
name|size
argument_list|()
argument_list|)
throw|;
block|}
name|ByteBuffer
name|buf
init|=
name|ByteBuffer
operator|.
name|allocate
argument_list|(
name|content
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|dif
operator|.
name|read
argument_list|(
name|buf
argument_list|)
expr_stmt|;
return|return
operator|new
name|String
argument_list|(
name|buf
operator|.
name|array
argument_list|()
argument_list|,
name|StandardCharsets
operator|.
name|UTF_16LE
argument_list|)
return|;
block|}
specifier|private
name|void
name|handleRichEditTextUnicode
parameter_list|(
name|int
name|length
parameter_list|)
throws|throws
name|SAXException
throws|,
name|IOException
throws|,
name|TikaException
block|{
comment|//this is a null-ended UTF-16LE string
name|ByteBuffer
name|buf
init|=
name|ByteBuffer
operator|.
name|allocate
argument_list|(
name|length
argument_list|)
decl_stmt|;
name|dif
operator|.
name|read
argument_list|(
name|buf
argument_list|)
expr_stmt|;
name|byte
index|[]
name|arr
init|=
name|buf
operator|.
name|array
argument_list|()
decl_stmt|;
comment|//look for the first null
name|int
name|firstNull
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|arr
operator|.
name|length
operator|-
literal|1
condition|;
name|i
operator|+=
literal|2
control|)
block|{
if|if
condition|(
name|arr
index|[
name|i
index|]
operator|==
literal|0
operator|&&
name|arr
index|[
name|i
operator|+
literal|1
index|]
operator|==
literal|0
condition|)
block|{
name|firstNull
operator|=
operator|(
name|i
operator|>
literal|0
operator|)
condition|?
name|i
else|:
literal|0
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|firstNull
operator|==
literal|0
condition|)
block|{
return|return;
block|}
name|String
name|txt
init|=
operator|new
name|String
argument_list|(
name|arr
argument_list|,
literal|0
argument_list|,
name|firstNull
argument_list|,
name|StandardCharsets
operator|.
name|UTF_16LE
argument_list|)
decl_stmt|;
name|Matcher
name|m
init|=
name|HYPERLINK_PATTERN
operator|.
name|matcher
argument_list|(
name|txt
argument_list|)
decl_stmt|;
if|if
condition|(
name|m
operator|.
name|find
argument_list|()
condition|)
block|{
name|xhtml
operator|.
name|startElement
argument_list|(
literal|"a"
argument_list|,
literal|"href"
argument_list|,
name|m
operator|.
name|group
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|xhtml
operator|.
name|characters
argument_list|(
name|m
operator|.
name|group
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|xhtml
operator|.
name|endElement
argument_list|(
literal|"a"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|xhtml
operator|.
name|startElement
argument_list|(
name|P
argument_list|)
expr_stmt|;
name|xhtml
operator|.
name|characters
argument_list|(
name|txt
argument_list|)
expr_stmt|;
name|xhtml
operator|.
name|endElement
argument_list|(
name|P
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|getAuthors
parameter_list|()
block|{
return|return
name|authors
return|;
block|}
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|getMostRecentAuthors
parameter_list|()
block|{
return|return
name|mostRecentAuthors
return|;
block|}
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|getOriginalAuthors
parameter_list|()
block|{
return|return
name|originalAuthors
return|;
block|}
specifier|public
name|Instant
name|getLastModifiedTimestamp
parameter_list|()
block|{
return|return
name|lastModifiedTimestamp
return|;
block|}
specifier|public
name|void
name|setLastModifiedTimestamp
parameter_list|(
name|Instant
name|lastModifiedTimestamp
parameter_list|)
block|{
name|this
operator|.
name|lastModifiedTimestamp
operator|=
name|lastModifiedTimestamp
expr_stmt|;
block|}
specifier|public
name|long
name|getLastModified
parameter_list|()
block|{
return|return
name|lastModified
return|;
block|}
specifier|public
name|void
name|setLastModified
parameter_list|(
name|long
name|lastModified
parameter_list|)
block|{
name|this
operator|.
name|lastModified
operator|=
name|lastModified
expr_stmt|;
block|}
specifier|public
name|long
name|getCreationTimestamp
parameter_list|()
block|{
return|return
name|creationTimestamp
return|;
block|}
specifier|public
name|void
name|setCreationTimestamp
parameter_list|(
name|long
name|creationTimestamp
parameter_list|)
block|{
name|this
operator|.
name|creationTimestamp
operator|=
name|creationTimestamp
expr_stmt|;
block|}
block|}
end_class

end_unit

