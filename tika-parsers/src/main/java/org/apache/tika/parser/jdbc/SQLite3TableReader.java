begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|jdbc
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_import
import|import
name|javax
operator|.
name|sql
operator|.
name|rowset
operator|.
name|serial
operator|.
name|SerialBlob
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Blob
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|ResultSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|metadata
operator|.
name|Metadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|ParseContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|ContentHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_comment
comment|/**  * Concrete class for SQLLite table parsing.  This overrides  * column type handling from JDBCRowHandler.  *<p/>  * For now, this silently skips cells of type CLOB, because xerial's jdbc connector  * does not currently support them.  */
end_comment

begin_class
class|class
name|SQLite3TableReader
extends|extends
name|JDBCTableReader
block|{
specifier|public
name|SQLite3TableReader
parameter_list|(
name|Connection
name|connection
parameter_list|,
name|String
name|tableName
parameter_list|,
name|ParseContext
name|context
parameter_list|)
block|{
name|super
argument_list|(
name|connection
argument_list|,
name|tableName
argument_list|,
name|context
argument_list|)
expr_stmt|;
block|}
comment|/**      * No-op for now in {@link SQLite3TableReader}.      *      * @param tableName      * @param fieldName      * @param rowNum      * @param resultSet      * @param columnIndex      * @param handler      * @param context      * @throws java.sql.SQLException      * @throws java.io.IOException      * @throws org.xml.sax.SAXException      */
annotation|@
name|Override
specifier|protected
name|void
name|handleClob
parameter_list|(
name|String
name|tableName
parameter_list|,
name|String
name|fieldName
parameter_list|,
name|int
name|rowNum
parameter_list|,
name|ResultSet
name|resultSet
parameter_list|,
name|int
name|columnIndex
parameter_list|,
name|ContentHandler
name|handler
parameter_list|,
name|ParseContext
name|context
parameter_list|)
throws|throws
name|SQLException
throws|,
name|IOException
throws|,
name|SAXException
block|{
comment|//no-op for now.
block|}
annotation|@
name|Override
specifier|protected
name|Blob
name|getBlob
parameter_list|(
name|ResultSet
name|resultSet
parameter_list|,
name|int
name|columnIndex
parameter_list|,
name|Metadata
name|m
parameter_list|)
throws|throws
name|SQLException
block|{
name|byte
index|[]
name|bytes
init|=
name|resultSet
operator|.
name|getBytes
argument_list|(
name|columnIndex
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|resultSet
operator|.
name|wasNull
argument_list|()
condition|)
block|{
return|return
operator|new
name|SerialBlob
argument_list|(
name|bytes
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

