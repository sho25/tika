begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|mp3
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|exception
operator|.
name|TikaException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|ContentHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_comment
comment|/**  * An Audio Frame in an MP3 file. These come after the ID3v2 tags in the file.  * Currently, only the header is processed, not the raw audio data.  */
end_comment

begin_class
specifier|public
class|class
name|AudioFrame
implements|implements
name|MP3Frame
block|{
specifier|private
name|String
name|version
decl_stmt|;
specifier|private
name|int
name|sampleRate
decl_stmt|;
specifier|private
name|int
name|channels
decl_stmt|;
specifier|public
name|String
name|getVersion
parameter_list|()
block|{
return|return
name|version
return|;
block|}
comment|/**      * Get the sampling rate, in Hz      */
specifier|public
name|int
name|getSampleRate
parameter_list|()
block|{
return|return
name|sampleRate
return|;
block|}
comment|/**      * Get the number of channels (1=mono, 2=stereo)      */
specifier|public
name|int
name|getChannels
parameter_list|()
block|{
return|return
name|channels
return|;
block|}
comment|/**      * Does this appear to be a 4 byte audio frame header?      */
specifier|public
specifier|static
name|boolean
name|isAudioHeader
parameter_list|(
name|int
name|h1
parameter_list|,
name|int
name|h2
parameter_list|,
name|int
name|h3
parameter_list|,
name|int
name|h4
parameter_list|)
block|{
if|if
condition|(
name|h1
operator|==
operator|-
literal|1
operator|||
name|h2
operator|==
operator|-
literal|1
operator|||
name|h3
operator|==
operator|-
literal|1
operator|||
name|h4
operator|==
operator|-
literal|1
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|// Check for the magic 11 bits set at the start
comment|// Note - doesn't do a CRC check
if|if
condition|(
name|h1
operator|==
literal|0xff
operator|&&
operator|(
name|h2
operator|&
literal|0x60
operator|)
operator|==
literal|0x60
condition|)
block|{
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
specifier|public
name|AudioFrame
parameter_list|(
name|InputStream
name|stream
parameter_list|,
name|ContentHandler
name|handler
parameter_list|)
throws|throws
name|IOException
throws|,
name|SAXException
throws|,
name|TikaException
block|{
name|this
argument_list|(
operator|-
literal|2
argument_list|,
operator|-
literal|2
argument_list|,
operator|-
literal|2
argument_list|,
operator|-
literal|2
argument_list|,
name|stream
argument_list|)
expr_stmt|;
block|}
specifier|public
name|AudioFrame
parameter_list|(
name|int
name|h1
parameter_list|,
name|int
name|h2
parameter_list|,
name|int
name|h3
parameter_list|,
name|int
name|h4
parameter_list|,
name|InputStream
name|in
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|h1
operator|==
operator|-
literal|2
operator|&&
name|h2
operator|==
operator|-
literal|2
operator|&&
name|h3
operator|==
operator|-
literal|2
operator|&&
name|h4
operator|==
operator|-
literal|2
condition|)
block|{
name|h1
operator|=
name|in
operator|.
name|read
argument_list|()
expr_stmt|;
name|h2
operator|=
name|in
operator|.
name|read
argument_list|()
expr_stmt|;
name|h3
operator|=
name|in
operator|.
name|read
argument_list|()
expr_stmt|;
name|h4
operator|=
name|in
operator|.
name|read
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|isAudioHeader
argument_list|(
name|h1
argument_list|,
name|h2
argument_list|,
name|h3
argument_list|,
name|h4
argument_list|)
condition|)
block|{
name|version
operator|=
literal|"MPEG 3 Layer "
expr_stmt|;
name|int
name|layer
init|=
operator|(
name|h2
operator|>>
literal|1
operator|)
operator|&
literal|0x03
decl_stmt|;
if|if
condition|(
name|layer
operator|==
literal|1
condition|)
block|{
name|version
operator|+=
literal|"III"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|layer
operator|==
literal|2
condition|)
block|{
name|version
operator|+=
literal|"II"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|layer
operator|==
literal|3
condition|)
block|{
name|version
operator|+=
literal|"I"
expr_stmt|;
block|}
else|else
block|{
name|version
operator|+=
literal|"(reserved)"
expr_stmt|;
block|}
name|version
operator|+=
literal|" Version "
expr_stmt|;
name|int
name|ver
init|=
operator|(
name|h2
operator|>>
literal|3
operator|)
operator|&
literal|0x03
decl_stmt|;
if|if
condition|(
name|ver
operator|==
literal|0
condition|)
block|{
name|version
operator|+=
literal|"2.5"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ver
operator|==
literal|2
condition|)
block|{
name|version
operator|+=
literal|"2"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ver
operator|==
literal|3
condition|)
block|{
name|version
operator|+=
literal|"1"
expr_stmt|;
block|}
else|else
block|{
name|version
operator|+=
literal|"(reseved)"
expr_stmt|;
block|}
name|int
name|rate
init|=
operator|(
name|h3
operator|>>
literal|2
operator|)
operator|&
literal|0x03
decl_stmt|;
switch|switch
condition|(
name|rate
condition|)
block|{
case|case
literal|0
case|:
name|sampleRate
operator|=
literal|11025
expr_stmt|;
break|break;
case|case
literal|1
case|:
name|sampleRate
operator|=
literal|12000
expr_stmt|;
break|break;
default|default:
name|sampleRate
operator|=
literal|8000
expr_stmt|;
block|}
if|if
condition|(
name|ver
operator|==
literal|2
condition|)
block|{
name|sampleRate
operator|*=
literal|2
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ver
operator|==
literal|3
condition|)
block|{
name|sampleRate
operator|*=
literal|4
expr_stmt|;
block|}
name|int
name|chans
init|=
name|h4
operator|&
literal|0x03
decl_stmt|;
if|if
condition|(
name|chans
operator|<
literal|3
condition|)
block|{
comment|// Stereo, joint stereo, dual channel
name|channels
operator|=
literal|2
expr_stmt|;
block|}
else|else
block|{
name|channels
operator|=
literal|1
expr_stmt|;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Magic Audio Frame Header not found"
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

