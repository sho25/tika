begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|microsoft
operator|.
name|ooxml
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|EOFException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|input
operator|.
name|CloseShieldInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|ooxml
operator|.
name|POIXMLDocument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|ooxml
operator|.
name|extractor
operator|.
name|ExtractorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|ooxml
operator|.
name|extractor
operator|.
name|POIXMLTextExtractor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|openxml4j
operator|.
name|exceptions
operator|.
name|InvalidFormatException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|openxml4j
operator|.
name|exceptions
operator|.
name|InvalidOperationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|openxml4j
operator|.
name|exceptions
operator|.
name|OpenXML4JException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|openxml4j
operator|.
name|opc
operator|.
name|OPCPackage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|openxml4j
operator|.
name|opc
operator|.
name|PackageAccess
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|openxml4j
operator|.
name|opc
operator|.
name|PackagePart
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|openxml4j
operator|.
name|opc
operator|.
name|PackageRelationshipCollection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|util
operator|.
name|LocaleUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|xslf
operator|.
name|extractor
operator|.
name|XSLFPowerPointExtractor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|xslf
operator|.
name|usermodel
operator|.
name|XMLSlideShow
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|xslf
operator|.
name|usermodel
operator|.
name|XSLFRelation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|xslf
operator|.
name|usermodel
operator|.
name|XSLFSlideShow
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|xssf
operator|.
name|extractor
operator|.
name|XSSFBEventBasedExcelExtractor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|xssf
operator|.
name|extractor
operator|.
name|XSSFEventBasedExcelExtractor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|xwpf
operator|.
name|extractor
operator|.
name|XWPFWordExtractor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|xwpf
operator|.
name|usermodel
operator|.
name|XWPFDocument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|xwpf
operator|.
name|usermodel
operator|.
name|XWPFRelation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|exception
operator|.
name|TikaException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|io
operator|.
name|TikaInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|metadata
operator|.
name|Metadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|metadata
operator|.
name|TikaCoreProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|mime
operator|.
name|MediaType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|EmptyParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|ParseContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|microsoft
operator|.
name|OfficeParserConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|microsoft
operator|.
name|ooxml
operator|.
name|xps
operator|.
name|XPSExtractorDecorator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|microsoft
operator|.
name|ooxml
operator|.
name|xps
operator|.
name|XPSTextExtractor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|microsoft
operator|.
name|ooxml
operator|.
name|xslf
operator|.
name|XSLFEventBasedPowerPointExtractor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|microsoft
operator|.
name|ooxml
operator|.
name|xwpf
operator|.
name|XWPFEventBasedWordExtractor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|pkg
operator|.
name|ZipContainerDetector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|utils
operator|.
name|ZipSalvager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|utils
operator|.
name|RereadableInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xmlbeans
operator|.
name|XmlException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|ContentHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_comment
comment|/**  * Figures out the correct {@link OOXMLExtractor} for the supplied document and  * returns it.  */
end_comment

begin_class
specifier|public
class|class
name|OOXMLExtractorFactory
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|OOXMLExtractorFactory
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|MAX_BUFFER_LENGTH
init|=
literal|1000000
decl_stmt|;
specifier|public
specifier|static
name|void
name|parse
parameter_list|(
name|InputStream
name|stream
parameter_list|,
name|ContentHandler
name|baseHandler
parameter_list|,
name|Metadata
name|metadata
parameter_list|,
name|ParseContext
name|context
parameter_list|)
throws|throws
name|IOException
throws|,
name|SAXException
throws|,
name|TikaException
block|{
name|Locale
name|locale
init|=
name|context
operator|.
name|get
argument_list|(
name|Locale
operator|.
name|class
argument_list|,
name|LocaleUtil
operator|.
name|getUserLocale
argument_list|()
argument_list|)
decl_stmt|;
name|ExtractorFactory
operator|.
name|setThreadPrefersEventExtractors
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|//if there's a problem opening the zip file;
comment|//create a tmp file, and copy what you can read of it.
name|File
name|tmpRepairedCopy
init|=
literal|null
decl_stmt|;
name|OPCPackage
name|pkg
init|=
literal|null
decl_stmt|;
try|try
block|{
name|OOXMLExtractor
name|extractor
init|=
literal|null
decl_stmt|;
comment|// Locate or Open the OPCPackage for the file
name|TikaInputStream
name|tis
init|=
name|TikaInputStream
operator|.
name|cast
argument_list|(
name|stream
argument_list|)
decl_stmt|;
if|if
condition|(
name|tis
operator|!=
literal|null
operator|&&
name|tis
operator|.
name|getOpenContainer
argument_list|()
operator|instanceof
name|OPCPackage
condition|)
block|{
name|pkg
operator|=
operator|(
name|OPCPackage
operator|)
name|tis
operator|.
name|getOpenContainer
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|tis
operator|!=
literal|null
operator|&&
name|tis
operator|.
name|hasFile
argument_list|()
condition|)
block|{
try|try
block|{
name|pkg
operator|=
name|OPCPackage
operator|.
name|open
argument_list|(
name|tis
operator|.
name|getFile
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|,
name|PackageAccess
operator|.
name|READ
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidOperationException
name|e
parameter_list|)
block|{
name|tmpRepairedCopy
operator|=
name|File
operator|.
name|createTempFile
argument_list|(
literal|"tika-ooxml-repair-"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|ZipSalvager
operator|.
name|salvageCopy
argument_list|(
name|tis
operator|.
name|getFile
argument_list|()
argument_list|,
name|tmpRepairedCopy
argument_list|)
expr_stmt|;
name|pkg
operator|=
name|OPCPackage
operator|.
name|open
argument_list|(
name|tmpRepairedCopy
argument_list|,
name|PackageAccess
operator|.
name|READ
argument_list|)
expr_stmt|;
block|}
name|tis
operator|.
name|setOpenContainer
argument_list|(
name|pkg
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|//OPCPackage slurps rris into memory so we can close rris
comment|//without apparent problems
try|try
init|(
name|RereadableInputStream
name|rereadableInputStream
init|=
operator|new
name|RereadableInputStream
argument_list|(
name|stream
argument_list|,
name|MAX_BUFFER_LENGTH
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
init|)
block|{
try|try
block|{
name|pkg
operator|=
name|OPCPackage
operator|.
name|open
argument_list|(
name|rereadableInputStream
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|EOFException
name|e
parameter_list|)
block|{
name|rereadableInputStream
operator|.
name|rewind
argument_list|()
expr_stmt|;
name|tmpRepairedCopy
operator|=
name|File
operator|.
name|createTempFile
argument_list|(
literal|"tika-ooxml-repair-"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|ZipSalvager
operator|.
name|salvageCopy
argument_list|(
name|rereadableInputStream
argument_list|,
name|tmpRepairedCopy
argument_list|)
expr_stmt|;
comment|//if there isn't enough left to be opened as a package
comment|//throw an exception -- we may want to fall back to streaming
comment|//parsing
name|pkg
operator|=
name|OPCPackage
operator|.
name|open
argument_list|(
name|tmpRepairedCopy
argument_list|,
name|PackageAccess
operator|.
name|READ
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|pkg
operator|!=
literal|null
condition|)
block|{
name|PackageRelationshipCollection
name|prc
init|=
name|pkg
operator|.
name|getRelationshipsByType
argument_list|(
name|OOXMLParser
operator|.
name|SIGNATURE_RELATIONSHIP
argument_list|)
decl_stmt|;
if|if
condition|(
name|prc
operator|!=
literal|null
operator|&&
name|prc
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|metadata
operator|.
name|set
argument_list|(
name|TikaCoreProperties
operator|.
name|HAS_SIGNATURE
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
block|}
block|}
name|MediaType
name|type
init|=
literal|null
decl_stmt|;
name|String
name|mediaTypeString
init|=
name|metadata
operator|.
name|get
argument_list|(
name|Metadata
operator|.
name|CONTENT_TYPE
argument_list|)
decl_stmt|;
if|if
condition|(
name|mediaTypeString
operator|!=
literal|null
condition|)
block|{
name|type
operator|=
name|MediaType
operator|.
name|parse
argument_list|(
name|mediaTypeString
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|type
operator|!=
literal|null
operator|&&
name|OOXMLParser
operator|.
name|UNSUPPORTED_OOXML_TYPES
operator|.
name|contains
argument_list|(
name|type
argument_list|)
condition|)
block|{
comment|// Not a supported type, delegate to Empty Parser
name|EmptyParser
operator|.
name|INSTANCE
operator|.
name|parse
argument_list|(
name|stream
argument_list|,
name|baseHandler
argument_list|,
name|metadata
argument_list|,
name|context
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|type
operator|==
literal|null
operator|||
operator|!
name|OOXMLParser
operator|.
name|SUPPORTED_TYPES
operator|.
name|contains
argument_list|(
name|type
argument_list|)
condition|)
block|{
comment|// Get the type, and ensure it's one we handle
name|type
operator|=
name|ZipContainerDetector
operator|.
name|detectOfficeOpenXML
argument_list|(
name|pkg
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|type
operator|==
literal|null
operator|||
name|OOXMLParser
operator|.
name|UNSUPPORTED_OOXML_TYPES
operator|.
name|contains
argument_list|(
name|type
argument_list|)
condition|)
block|{
comment|// Not a supported type, delegate to Empty Parser
name|EmptyParser
operator|.
name|INSTANCE
operator|.
name|parse
argument_list|(
name|stream
argument_list|,
name|baseHandler
argument_list|,
name|metadata
argument_list|,
name|context
argument_list|)
expr_stmt|;
return|return;
block|}
name|metadata
operator|.
name|set
argument_list|(
name|Metadata
operator|.
name|CONTENT_TYPE
argument_list|,
name|type
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// Have the appropriate OOXML text extractor picked
name|POIXMLTextExtractor
name|poiExtractor
init|=
literal|null
decl_stmt|;
comment|// This has already been set by OOXMLParser's call to configure()
comment|// We can rely on this being non-null.
name|OfficeParserConfig
name|config
init|=
name|context
operator|.
name|get
argument_list|(
name|OfficeParserConfig
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|config
operator|.
name|getUseSAXDocxExtractor
argument_list|()
condition|)
block|{
name|poiExtractor
operator|=
name|trySXWPF
argument_list|(
name|pkg
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|poiExtractor
operator|==
literal|null
condition|)
block|{
name|poiExtractor
operator|=
name|tryXSLF
argument_list|(
name|pkg
argument_list|,
name|config
operator|.
name|getUseSAXPptxExtractor
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|type
operator|.
name|equals
argument_list|(
name|OOXMLParser
operator|.
name|XPS
argument_list|)
condition|)
block|{
name|poiExtractor
operator|=
operator|new
name|XPSTextExtractor
argument_list|(
name|pkg
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|poiExtractor
operator|==
literal|null
condition|)
block|{
name|poiExtractor
operator|=
operator|(
name|POIXMLTextExtractor
operator|)
name|ExtractorFactory
operator|.
name|createExtractor
argument_list|(
name|pkg
argument_list|)
expr_stmt|;
block|}
name|POIXMLDocument
name|document
init|=
name|poiExtractor
operator|.
name|getDocument
argument_list|()
decl_stmt|;
if|if
condition|(
name|poiExtractor
operator|instanceof
name|XSSFBEventBasedExcelExtractor
condition|)
block|{
name|extractor
operator|=
operator|new
name|XSSFBExcelExtractorDecorator
argument_list|(
name|context
argument_list|,
name|poiExtractor
argument_list|,
name|locale
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|poiExtractor
operator|instanceof
name|XSSFEventBasedExcelExtractor
condition|)
block|{
name|extractor
operator|=
operator|new
name|XSSFExcelExtractorDecorator
argument_list|(
name|context
argument_list|,
name|poiExtractor
argument_list|,
name|locale
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|poiExtractor
operator|instanceof
name|XWPFEventBasedWordExtractor
condition|)
block|{
name|extractor
operator|=
operator|new
name|SXWPFWordExtractorDecorator
argument_list|(
name|metadata
argument_list|,
name|context
argument_list|,
operator|(
name|XWPFEventBasedWordExtractor
operator|)
name|poiExtractor
argument_list|)
expr_stmt|;
name|metadata
operator|.
name|add
argument_list|(
literal|"X-Parsed-By"
argument_list|,
name|XWPFEventBasedWordExtractor
operator|.
name|class
operator|.
name|getCanonicalName
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|poiExtractor
operator|instanceof
name|XSLFEventBasedPowerPointExtractor
condition|)
block|{
name|extractor
operator|=
operator|new
name|SXSLFPowerPointExtractorDecorator
argument_list|(
name|metadata
argument_list|,
name|context
argument_list|,
operator|(
name|XSLFEventBasedPowerPointExtractor
operator|)
name|poiExtractor
argument_list|)
expr_stmt|;
name|metadata
operator|.
name|add
argument_list|(
literal|"X-Parsed-By"
argument_list|,
name|XSLFEventBasedPowerPointExtractor
operator|.
name|class
operator|.
name|getCanonicalName
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|poiExtractor
operator|instanceof
name|XPSTextExtractor
condition|)
block|{
name|extractor
operator|=
operator|new
name|XPSExtractorDecorator
argument_list|(
name|context
argument_list|,
name|poiExtractor
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|document
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|TikaException
argument_list|(
literal|"Expecting UserModel based POI OOXML extractor with a document, but none found. "
operator|+
literal|"The extractor returned was a "
operator|+
name|poiExtractor
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
name|document
operator|instanceof
name|XMLSlideShow
condition|)
block|{
name|extractor
operator|=
operator|new
name|XSLFPowerPointExtractorDecorator
argument_list|(
name|context
argument_list|,
operator|(
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|xslf
operator|.
name|extractor
operator|.
name|XSLFPowerPointExtractor
operator|)
name|poiExtractor
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|document
operator|instanceof
name|XWPFDocument
condition|)
block|{
name|extractor
operator|=
operator|new
name|XWPFWordExtractorDecorator
argument_list|(
name|metadata
argument_list|,
name|context
argument_list|,
operator|(
name|XWPFWordExtractor
operator|)
name|poiExtractor
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|extractor
operator|=
operator|new
name|POIXMLTextExtractorDecorator
argument_list|(
name|context
argument_list|,
name|poiExtractor
argument_list|)
expr_stmt|;
block|}
comment|// Get the bulk of the metadata first, so that it's accessible during
comment|//  parsing if desired by the client (see TIKA-1109)
name|extractor
operator|.
name|getMetadataExtractor
argument_list|()
operator|.
name|extract
argument_list|(
name|metadata
argument_list|)
expr_stmt|;
comment|// Extract the text, along with any in-document metadata
name|extractor
operator|.
name|getXHTML
argument_list|(
name|baseHandler
argument_list|,
name|metadata
argument_list|,
name|context
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|.
name|getMessage
argument_list|()
operator|!=
literal|null
operator|&&
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"No supported documents found"
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|TikaException
argument_list|(
literal|"TIKA-418: RuntimeException while getting content"
operator|+
literal|" for thmx and xps file types"
argument_list|,
name|e
argument_list|)
throw|;
block|}
else|else
block|{
throw|throw
operator|new
name|TikaException
argument_list|(
literal|"Error creating OOXML extractor"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|InvalidFormatException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|TikaException
argument_list|(
literal|"Error creating OOXML extractor"
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|OpenXML4JException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|TikaException
argument_list|(
literal|"Error creating OOXML extractor"
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|XmlException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|TikaException
argument_list|(
literal|"Error creating OOXML extractor"
argument_list|,
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|tmpRepairedCopy
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|pkg
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|pkg
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"problem closing pkg file"
argument_list|)
expr_stmt|;
block|}
block|}
name|boolean
name|deleted
init|=
name|tmpRepairedCopy
operator|.
name|delete
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|deleted
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"failed to delete tmp (repair) file: "
operator|+
name|tmpRepairedCopy
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|private
specifier|static
name|POIXMLTextExtractor
name|trySXWPF
parameter_list|(
name|OPCPackage
name|pkg
parameter_list|)
throws|throws
name|XmlException
throws|,
name|OpenXML4JException
throws|,
name|IOException
block|{
name|PackageRelationshipCollection
name|packageRelationshipCollection
init|=
name|pkg
operator|.
name|getRelationshipsByType
argument_list|(
literal|"http://schemas.openxmlformats.org/officeDocument/2006/relationships/officeDocument"
argument_list|)
decl_stmt|;
if|if
condition|(
name|packageRelationshipCollection
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
name|packageRelationshipCollection
operator|=
name|pkg
operator|.
name|getRelationshipsByType
argument_list|(
literal|"http://purl.oclc.org/ooxml/officeDocument/relationships/officeDocument"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|packageRelationshipCollection
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
name|PackagePart
name|corePart
init|=
name|pkg
operator|.
name|getPart
argument_list|(
name|packageRelationshipCollection
operator|.
name|getRelationship
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|targetContentType
init|=
name|corePart
operator|.
name|getContentType
argument_list|()
decl_stmt|;
for|for
control|(
name|XWPFRelation
name|relation
range|:
name|XWPFWordExtractor
operator|.
name|SUPPORTED_TYPES
control|)
block|{
if|if
condition|(
name|targetContentType
operator|.
name|equals
argument_list|(
name|relation
operator|.
name|getContentType
argument_list|()
argument_list|)
condition|)
block|{
return|return
operator|new
name|XWPFEventBasedWordExtractor
argument_list|(
name|pkg
argument_list|)
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|private
specifier|static
name|POIXMLTextExtractor
name|tryXSLF
parameter_list|(
name|OPCPackage
name|pkg
parameter_list|,
name|boolean
name|eventBased
parameter_list|)
throws|throws
name|XmlException
throws|,
name|OpenXML4JException
throws|,
name|IOException
block|{
name|PackageRelationshipCollection
name|packageRelationshipCollection
init|=
name|pkg
operator|.
name|getRelationshipsByType
argument_list|(
literal|"http://schemas.openxmlformats.org/officeDocument/2006/relationships/officeDocument"
argument_list|)
decl_stmt|;
if|if
condition|(
name|packageRelationshipCollection
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
name|packageRelationshipCollection
operator|=
name|pkg
operator|.
name|getRelationshipsByType
argument_list|(
literal|"http://purl.oclc.org/ooxml/officeDocument/relationships/officeDocument"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|packageRelationshipCollection
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
name|PackagePart
name|corePart
init|=
name|pkg
operator|.
name|getPart
argument_list|(
name|packageRelationshipCollection
operator|.
name|getRelationship
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|targetContentType
init|=
name|corePart
operator|.
name|getContentType
argument_list|()
decl_stmt|;
name|XSLFRelation
index|[]
name|xslfRelations
init|=
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|xslf
operator|.
name|extractor
operator|.
name|XSLFPowerPointExtractor
operator|.
name|SUPPORTED_TYPES
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|xslfRelations
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|XSLFRelation
name|xslfRelation
init|=
name|xslfRelations
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|xslfRelation
operator|.
name|getContentType
argument_list|()
operator|.
name|equals
argument_list|(
name|targetContentType
argument_list|)
condition|)
block|{
if|if
condition|(
name|eventBased
condition|)
block|{
return|return
operator|new
name|XSLFEventBasedPowerPointExtractor
argument_list|(
name|pkg
argument_list|)
return|;
block|}
else|else
block|{
return|return
operator|new
name|XSLFPowerPointExtractor
argument_list|(
operator|new
name|XSLFSlideShow
argument_list|(
name|pkg
argument_list|)
argument_list|)
return|;
block|}
block|}
block|}
if|if
condition|(
name|XSLFRelation
operator|.
name|THEME_MANAGER
operator|.
name|getContentType
argument_list|()
operator|.
name|equals
argument_list|(
name|targetContentType
argument_list|)
condition|)
block|{
if|if
condition|(
name|eventBased
condition|)
block|{
return|return
operator|new
name|XSLFEventBasedPowerPointExtractor
argument_list|(
name|pkg
argument_list|)
return|;
block|}
else|else
block|{
return|return
operator|new
name|XSLFPowerPointExtractor
argument_list|(
operator|new
name|XSLFSlideShow
argument_list|(
name|pkg
argument_list|)
argument_list|)
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

