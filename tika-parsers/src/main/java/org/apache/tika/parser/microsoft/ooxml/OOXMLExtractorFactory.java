begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|microsoft
operator|.
name|ooxml
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|POIXMLDocument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|POIXMLTextExtractor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|extractor
operator|.
name|ExtractorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|openxml4j
operator|.
name|exceptions
operator|.
name|InvalidFormatException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|openxml4j
operator|.
name|exceptions
operator|.
name|OpenXML4JException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|openxml4j
operator|.
name|opc
operator|.
name|OPCPackage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|xslf
operator|.
name|XSLFSlideShow
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|xslf
operator|.
name|extractor
operator|.
name|XSLFPowerPointExtractor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|xssf
operator|.
name|extractor
operator|.
name|XSSFEventBasedExcelExtractor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|xwpf
operator|.
name|extractor
operator|.
name|XWPFWordExtractor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|xwpf
operator|.
name|usermodel
operator|.
name|XWPFDocument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|exception
operator|.
name|TikaException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|io
operator|.
name|TikaInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|metadata
operator|.
name|Metadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|ParseContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|sax
operator|.
name|EndDocumentShieldingContentHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xmlbeans
operator|.
name|XmlException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|ContentHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_comment
comment|/**  * Figures out the correct {@link OOXMLExtractor} for the supplied document and  * returns it.  */
end_comment

begin_class
specifier|public
class|class
name|OOXMLExtractorFactory
block|{
specifier|public
specifier|static
name|void
name|parse
parameter_list|(
name|InputStream
name|stream
parameter_list|,
name|ContentHandler
name|baseHandler
parameter_list|,
name|Metadata
name|metadata
parameter_list|,
name|ParseContext
name|context
parameter_list|)
throws|throws
name|IOException
throws|,
name|SAXException
throws|,
name|TikaException
block|{
name|Locale
name|locale
init|=
name|context
operator|.
name|get
argument_list|(
name|Locale
operator|.
name|class
argument_list|,
name|Locale
operator|.
name|getDefault
argument_list|()
argument_list|)
decl_stmt|;
name|ExtractorFactory
operator|.
name|setThreadPrefersEventExtractors
argument_list|(
literal|true
argument_list|)
expr_stmt|;
try|try
block|{
name|OOXMLExtractor
name|extractor
decl_stmt|;
name|POIXMLTextExtractor
name|poiExtractor
decl_stmt|;
if|if
condition|(
name|stream
operator|instanceof
name|TikaInputStream
operator|&&
operator|(
operator|(
name|TikaInputStream
operator|)
name|stream
operator|)
operator|.
name|getOpenContainer
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|poiExtractor
operator|=
name|ExtractorFactory
operator|.
name|createExtractor
argument_list|(
call|(
name|OPCPackage
call|)
argument_list|(
operator|(
name|TikaInputStream
operator|)
name|stream
argument_list|)
operator|.
name|getOpenContainer
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|poiExtractor
operator|=
operator|(
name|POIXMLTextExtractor
operator|)
name|ExtractorFactory
operator|.
name|createExtractor
argument_list|(
name|stream
argument_list|)
expr_stmt|;
block|}
name|POIXMLDocument
name|document
init|=
name|poiExtractor
operator|.
name|getDocument
argument_list|()
decl_stmt|;
if|if
condition|(
name|poiExtractor
operator|instanceof
name|XSSFEventBasedExcelExtractor
condition|)
block|{
name|extractor
operator|=
operator|new
name|XSSFExcelExtractorDecorator
argument_list|(
name|context
argument_list|,
operator|(
name|XSSFEventBasedExcelExtractor
operator|)
name|poiExtractor
argument_list|,
name|locale
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|document
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|TikaException
argument_list|(
literal|"Expecting UserModel based POI OOXML extractor with a document, but none found. "
operator|+
literal|"The extractor returned was a "
operator|+
name|poiExtractor
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
name|document
operator|instanceof
name|XSLFSlideShow
condition|)
block|{
name|extractor
operator|=
operator|new
name|XSLFPowerPointExtractorDecorator
argument_list|(
name|context
argument_list|,
operator|(
name|XSLFPowerPointExtractor
operator|)
name|poiExtractor
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|document
operator|instanceof
name|XWPFDocument
condition|)
block|{
name|extractor
operator|=
operator|new
name|XWPFWordExtractorDecorator
argument_list|(
name|context
argument_list|,
operator|(
name|XWPFWordExtractor
operator|)
name|poiExtractor
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|extractor
operator|=
operator|new
name|POIXMLTextExtractorDecorator
argument_list|(
name|context
argument_list|,
name|poiExtractor
argument_list|)
expr_stmt|;
block|}
comment|// We need to get the content first, but not end
comment|//  the document just yet
name|EndDocumentShieldingContentHandler
name|handler
init|=
operator|new
name|EndDocumentShieldingContentHandler
argument_list|(
name|baseHandler
argument_list|)
decl_stmt|;
name|extractor
operator|.
name|getXHTML
argument_list|(
name|handler
argument_list|,
name|metadata
argument_list|,
name|context
argument_list|)
expr_stmt|;
comment|// Now we can get the metadata
name|extractor
operator|.
name|getMetadataExtractor
argument_list|()
operator|.
name|extract
argument_list|(
name|metadata
argument_list|)
expr_stmt|;
comment|// Then finish up
name|handler
operator|.
name|reallyEndDocument
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"No supported documents found"
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|TikaException
argument_list|(
literal|"TIKA-418: RuntimeException while getting content"
operator|+
literal|" for thmx and xps file types"
argument_list|,
name|e
argument_list|)
throw|;
block|}
else|else
block|{
throw|throw
operator|new
name|TikaException
argument_list|(
literal|"Error creating OOXML extractor"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|InvalidFormatException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|TikaException
argument_list|(
literal|"Error creating OOXML extractor"
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|OpenXML4JException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|TikaException
argument_list|(
literal|"Error creating OOXML extractor"
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|XmlException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|TikaException
argument_list|(
literal|"Error creating OOXML extractor"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

