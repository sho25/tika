begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|image
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|DecimalFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|DecimalFormatSymbols
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|SimpleDateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|exception
operator|.
name|TikaException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|metadata
operator|.
name|Geographic
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|metadata
operator|.
name|Metadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|metadata
operator|.
name|Property
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|drew
operator|.
name|imaging
operator|.
name|jpeg
operator|.
name|JpegMetadataReader
import|;
end_import

begin_import
import|import
name|com
operator|.
name|drew
operator|.
name|imaging
operator|.
name|jpeg
operator|.
name|JpegProcessingException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|drew
operator|.
name|imaging
operator|.
name|tiff
operator|.
name|TiffMetadataReader
import|;
end_import

begin_import
import|import
name|com
operator|.
name|drew
operator|.
name|imaging
operator|.
name|tiff
operator|.
name|TiffProcessingException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|drew
operator|.
name|lang
operator|.
name|Rational
import|;
end_import

begin_import
import|import
name|com
operator|.
name|drew
operator|.
name|metadata
operator|.
name|Directory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|drew
operator|.
name|metadata
operator|.
name|MetadataException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|drew
operator|.
name|metadata
operator|.
name|Tag
import|;
end_import

begin_class
specifier|public
class|class
name|ImageMetadataExtractor
block|{
specifier|private
specifier|final
name|Metadata
name|metadata
decl_stmt|;
specifier|public
name|ImageMetadataExtractor
parameter_list|(
name|Metadata
name|metadata
parameter_list|)
block|{
name|this
operator|.
name|metadata
operator|=
name|metadata
expr_stmt|;
block|}
specifier|public
name|void
name|parseTiff
parameter_list|(
name|InputStream
name|stream
parameter_list|)
throws|throws
name|IOException
throws|,
name|SAXException
throws|,
name|TikaException
block|{
try|try
block|{
name|com
operator|.
name|drew
operator|.
name|metadata
operator|.
name|Metadata
name|tiffMetadata
init|=
name|TiffMetadataReader
operator|.
name|readMetadata
argument_list|(
name|stream
argument_list|)
decl_stmt|;
name|parse
argument_list|(
name|tiffMetadata
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TiffProcessingException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|TikaException
argument_list|(
literal|"Can't read TIFF metadata"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|void
name|parseJpeg
parameter_list|(
name|InputStream
name|stream
parameter_list|)
throws|throws
name|IOException
throws|,
name|SAXException
throws|,
name|TikaException
block|{
try|try
block|{
name|com
operator|.
name|drew
operator|.
name|metadata
operator|.
name|Metadata
name|jpegMetadata
init|=
name|JpegMetadataReader
operator|.
name|readMetadata
argument_list|(
name|stream
argument_list|)
decl_stmt|;
name|parse
argument_list|(
name|jpegMetadata
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|JpegProcessingException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|TikaException
argument_list|(
literal|"Can't read JPEG metadata"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|protected
name|void
name|parse
parameter_list|(
name|com
operator|.
name|drew
operator|.
name|metadata
operator|.
name|Metadata
name|imageMetadata
parameter_list|)
throws|throws
name|IOException
throws|,
name|SAXException
throws|,
name|TikaException
block|{
try|try
block|{
name|Iterator
argument_list|<
name|?
argument_list|>
name|directories
init|=
name|imageMetadata
operator|.
name|getDirectoryIterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|directories
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Directory
name|directory
init|=
operator|(
name|Directory
operator|)
name|directories
operator|.
name|next
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|?
argument_list|>
name|tags
init|=
name|directory
operator|.
name|getTagIterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|tags
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Tag
name|tag
init|=
operator|(
name|Tag
operator|)
name|tags
operator|.
name|next
argument_list|()
decl_stmt|;
name|metadata
operator|.
name|set
argument_list|(
name|tag
operator|.
name|getTagName
argument_list|()
argument_list|,
name|tag
operator|.
name|getDescription
argument_list|()
argument_list|)
expr_stmt|;
name|handleCommonImageTags
argument_list|(
name|metadata
argument_list|,
name|tag
argument_list|,
name|directory
argument_list|)
expr_stmt|;
block|}
name|handleGeoImageTags
argument_list|(
name|metadata
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|MetadataException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|TikaException
argument_list|(
literal|"Can't read TIFF/JPEG metadata"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**      * Maps EXIF Geo Tags onto the Tika Geo metadata namespace.      * Needs to be run at the end, because the GPS information      *  is spread across several EXIF tags.      */
specifier|public
specifier|static
name|void
name|handleGeoImageTags
parameter_list|(
name|Metadata
name|metadata
parameter_list|)
block|{
name|String
name|lat
init|=
name|metadata
operator|.
name|get
argument_list|(
literal|"GPS Latitude"
argument_list|)
decl_stmt|;
name|String
name|latNS
init|=
name|metadata
operator|.
name|get
argument_list|(
literal|"GPS Latitude Ref"
argument_list|)
decl_stmt|;
if|if
condition|(
name|lat
operator|!=
literal|null
condition|)
block|{
name|Double
name|latitude
init|=
name|parseHMS
argument_list|(
name|lat
argument_list|)
decl_stmt|;
if|if
condition|(
name|latitude
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|latNS
operator|!=
literal|null
operator|&&
name|latNS
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"S"
argument_list|)
operator|&&
name|latitude
operator|>
literal|0
condition|)
block|{
name|latitude
operator|*=
operator|-
literal|1
expr_stmt|;
block|}
name|metadata
operator|.
name|set
argument_list|(
name|Metadata
operator|.
name|LATITUDE
argument_list|,
name|LAT_LONG_FORMAT
operator|.
name|format
argument_list|(
name|latitude
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|String
name|lng
init|=
name|metadata
operator|.
name|get
argument_list|(
literal|"GPS Longitude"
argument_list|)
decl_stmt|;
name|String
name|lngEW
init|=
name|metadata
operator|.
name|get
argument_list|(
literal|"GPS Longitude Ref"
argument_list|)
decl_stmt|;
if|if
condition|(
name|lng
operator|!=
literal|null
condition|)
block|{
name|Double
name|longitude
init|=
name|parseHMS
argument_list|(
name|lng
argument_list|)
decl_stmt|;
if|if
condition|(
name|longitude
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|lngEW
operator|!=
literal|null
operator|&&
name|lngEW
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"W"
argument_list|)
operator|&&
name|longitude
operator|>
literal|0
condition|)
block|{
name|longitude
operator|*=
operator|-
literal|1
expr_stmt|;
block|}
name|metadata
operator|.
name|set
argument_list|(
name|Metadata
operator|.
name|LONGITUDE
argument_list|,
name|LAT_LONG_FORMAT
operator|.
name|format
argument_list|(
name|longitude
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
specifier|static
name|Double
name|parseHMS
parameter_list|(
name|String
name|hms
parameter_list|)
block|{
name|Matcher
name|m
init|=
name|HOURS_MINUTES_SECONDS
operator|.
name|matcher
argument_list|(
name|hms
argument_list|)
decl_stmt|;
if|if
condition|(
name|m
operator|.
name|matches
argument_list|()
condition|)
block|{
name|double
name|value
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|m
operator|.
name|group
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|+
operator|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|m
operator|.
name|group
argument_list|(
literal|2
argument_list|)
argument_list|)
operator|/
literal|60.0
operator|)
operator|+
operator|(
name|Double
operator|.
name|parseDouble
argument_list|(
name|m
operator|.
name|group
argument_list|(
literal|3
argument_list|)
argument_list|)
operator|/
literal|60.0
operator|/
literal|60.0
operator|)
decl_stmt|;
return|return
name|value
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|private
specifier|static
specifier|final
name|Pattern
name|HOURS_MINUTES_SECONDS
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"(-?\\d+)\"(\\d+)'(\\d+\\.?\\d*)"
argument_list|)
decl_stmt|;
comment|/**      * The decimal format used for expressing latitudes and longitudes.      * The basic geo vocabulary defined by W3C (@see {@link Geographic})      * refers to the "float" type in XML Schema as the recommended format      * for latitude and longitude values.      */
specifier|private
specifier|static
specifier|final
name|DecimalFormat
name|LAT_LONG_FORMAT
init|=
operator|new
name|DecimalFormat
argument_list|(
literal|"##0.0####"
argument_list|,
operator|new
name|DecimalFormatSymbols
argument_list|(
name|Locale
operator|.
name|US
argument_list|)
argument_list|)
decl_stmt|;
comment|/**      * We normally won't know what timezone our dates belong to      */
specifier|private
specifier|static
specifier|final
name|SimpleDateFormat
name|DATE_UNSPECIFIED_TZ
init|=
operator|new
name|SimpleDateFormat
argument_list|(
literal|"yyyy-MM-dd'T'HH:mm:ss"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|synchronized
name|void
name|handleDate
parameter_list|(
name|Property
name|property
parameter_list|,
name|Metadata
name|metadata
parameter_list|,
name|Tag
name|tag
parameter_list|,
name|Directory
name|directory
parameter_list|)
throws|throws
name|MetadataException
block|{
name|Date
name|date
init|=
name|directory
operator|.
name|getDate
argument_list|(
name|tag
operator|.
name|getTagType
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|dateString
init|=
name|DATE_UNSPECIFIED_TZ
operator|.
name|format
argument_list|(
name|date
argument_list|)
decl_stmt|;
name|metadata
operator|.
name|set
argument_list|(
name|property
argument_list|,
name|dateString
argument_list|)
expr_stmt|;
block|}
comment|/**      * Maps common TIFF and EXIF tags onto the Tika      *  TIFF image metadata namespace.      */
specifier|public
specifier|static
name|void
name|handleCommonImageTags
parameter_list|(
name|Metadata
name|metadata
parameter_list|,
name|Tag
name|tag
parameter_list|,
name|Directory
name|directory
parameter_list|)
throws|throws
name|MetadataException
block|{
comment|// Core tags
if|if
condition|(
name|tag
operator|.
name|getTagName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"Date/Time"
argument_list|)
operator|||
name|tag
operator|.
name|getTagType
argument_list|()
operator|==
literal|306
condition|)
block|{
name|handleDate
argument_list|(
name|Metadata
operator|.
name|DATE
argument_list|,
name|metadata
argument_list|,
name|tag
argument_list|,
name|directory
argument_list|)
expr_stmt|;
name|metadata
operator|.
name|set
argument_list|(
name|Metadata
operator|.
name|LAST_MODIFIED
argument_list|,
name|metadata
operator|.
name|get
argument_list|(
name|Metadata
operator|.
name|DATE
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|tag
operator|.
name|getTagName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"Date/Time Original"
argument_list|)
operator|||
name|tag
operator|.
name|getTagType
argument_list|()
operator|==
literal|36867
condition|)
block|{
name|handleDate
argument_list|(
name|Metadata
operator|.
name|ORIGINAL_DATE
argument_list|,
name|metadata
argument_list|,
name|tag
argument_list|,
name|directory
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|tag
operator|.
name|getTagName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"Exposure Time"
argument_list|)
operator|||
name|tag
operator|.
name|getTagType
argument_list|()
operator|==
literal|33434
condition|)
block|{
name|Object
name|exposure
init|=
name|directory
operator|.
name|getObject
argument_list|(
name|tag
operator|.
name|getTagType
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|exposure
operator|instanceof
name|Rational
condition|)
block|{
name|metadata
operator|.
name|set
argument_list|(
name|Metadata
operator|.
name|EXPOSURE_TIME
argument_list|,
operator|(
operator|(
name|Rational
operator|)
name|exposure
operator|)
operator|.
name|doubleValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|metadata
operator|.
name|set
argument_list|(
name|Metadata
operator|.
name|EXPOSURE_TIME
argument_list|,
name|tag
operator|.
name|getDescription
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return;
block|}
if|if
condition|(
name|tag
operator|.
name|getTagName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"Flash"
argument_list|)
operator|||
name|tag
operator|.
name|getTagType
argument_list|()
operator|==
literal|37385
condition|)
block|{
name|String
name|flash
init|=
name|tag
operator|.
name|getDescription
argument_list|()
decl_stmt|;
if|if
condition|(
name|flash
operator|.
name|indexOf
argument_list|(
literal|"Flash fired"
argument_list|)
operator|>
operator|-
literal|1
condition|)
block|{
name|metadata
operator|.
name|set
argument_list|(
name|Metadata
operator|.
name|FLASH_FIRED
argument_list|,
name|Boolean
operator|.
name|TRUE
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|flash
operator|.
name|indexOf
argument_list|(
literal|"Flash did not fire"
argument_list|)
operator|>
operator|-
literal|1
condition|)
block|{
name|metadata
operator|.
name|set
argument_list|(
name|Metadata
operator|.
name|FLASH_FIRED
argument_list|,
name|Boolean
operator|.
name|FALSE
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|metadata
operator|.
name|set
argument_list|(
name|Metadata
operator|.
name|FLASH_FIRED
argument_list|,
name|flash
argument_list|)
expr_stmt|;
block|}
return|return;
block|}
if|if
condition|(
name|tag
operator|.
name|getTagName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"F-Number"
argument_list|)
operator|||
name|tag
operator|.
name|getTagType
argument_list|()
operator|==
literal|33437
condition|)
block|{
name|Object
name|fnumber
init|=
name|directory
operator|.
name|getObject
argument_list|(
name|tag
operator|.
name|getTagType
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|fnumber
operator|instanceof
name|Rational
condition|)
block|{
name|metadata
operator|.
name|set
argument_list|(
name|Metadata
operator|.
name|F_NUMBER
argument_list|,
operator|(
operator|(
name|Rational
operator|)
name|fnumber
operator|)
operator|.
name|doubleValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|metadata
operator|.
name|set
argument_list|(
name|Metadata
operator|.
name|F_NUMBER
argument_list|,
name|tag
operator|.
name|getDescription
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return;
block|}
if|if
condition|(
name|tag
operator|.
name|getTagName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"Focal Length"
argument_list|)
operator|||
name|tag
operator|.
name|getTagType
argument_list|()
operator|==
literal|37386
condition|)
block|{
name|Object
name|length
init|=
name|directory
operator|.
name|getObject
argument_list|(
name|tag
operator|.
name|getTagType
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|length
operator|instanceof
name|Rational
condition|)
block|{
name|metadata
operator|.
name|set
argument_list|(
name|Metadata
operator|.
name|FOCAL_LENGTH
argument_list|,
operator|(
operator|(
name|Rational
operator|)
name|length
operator|)
operator|.
name|doubleValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|metadata
operator|.
name|set
argument_list|(
name|Metadata
operator|.
name|FOCAL_LENGTH
argument_list|,
name|tag
operator|.
name|getDescription
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return;
block|}
if|if
condition|(
name|tag
operator|.
name|getTagName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"ISO Speed Ratings"
argument_list|)
operator|||
name|tag
operator|.
name|getTagType
argument_list|()
operator|==
literal|34855
condition|)
block|{
name|metadata
operator|.
name|set
argument_list|(
name|Metadata
operator|.
name|ISO_SPEED_RATINGS
argument_list|,
name|tag
operator|.
name|getDescription
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|tag
operator|.
name|getTagName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"Make"
argument_list|)
operator|||
name|tag
operator|.
name|getTagType
argument_list|()
operator|==
literal|271
condition|)
block|{
name|metadata
operator|.
name|set
argument_list|(
name|Metadata
operator|.
name|EQUIPMENT_MAKE
argument_list|,
name|tag
operator|.
name|getDescription
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|tag
operator|.
name|getTagName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"Model"
argument_list|)
operator|||
name|tag
operator|.
name|getTagType
argument_list|()
operator|==
literal|272
condition|)
block|{
name|metadata
operator|.
name|set
argument_list|(
name|Metadata
operator|.
name|EQUIPMENT_MODEL
argument_list|,
name|tag
operator|.
name|getDescription
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|tag
operator|.
name|getTagName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"Orientation"
argument_list|)
operator|||
name|tag
operator|.
name|getTagType
argument_list|()
operator|==
literal|274
condition|)
block|{
name|Object
name|length
init|=
name|directory
operator|.
name|getObject
argument_list|(
name|tag
operator|.
name|getTagType
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|length
operator|instanceof
name|Integer
condition|)
block|{
name|metadata
operator|.
name|set
argument_list|(
name|Metadata
operator|.
name|ORIENTATION
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
operator|(
operator|(
name|Integer
operator|)
name|length
operator|)
operator|.
name|intValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|metadata
operator|.
name|set
argument_list|(
name|Metadata
operator|.
name|ORIENTATION
argument_list|,
name|tag
operator|.
name|getDescription
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return;
block|}
if|if
condition|(
name|tag
operator|.
name|getTagName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"Software"
argument_list|)
operator|||
name|tag
operator|.
name|getTagType
argument_list|()
operator|==
literal|305
condition|)
block|{
name|metadata
operator|.
name|set
argument_list|(
name|Metadata
operator|.
name|SOFTWARE
argument_list|,
name|tag
operator|.
name|getDescription
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|tag
operator|.
name|getTagName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"X Resolution"
argument_list|)
operator|||
name|tag
operator|.
name|getTagType
argument_list|()
operator|==
literal|282
condition|)
block|{
name|Object
name|resolution
init|=
name|directory
operator|.
name|getObject
argument_list|(
name|tag
operator|.
name|getTagType
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|resolution
operator|instanceof
name|Rational
condition|)
block|{
name|metadata
operator|.
name|set
argument_list|(
name|Metadata
operator|.
name|RESOLUTION_HORIZONTAL
argument_list|,
operator|(
operator|(
name|Rational
operator|)
name|resolution
operator|)
operator|.
name|doubleValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|metadata
operator|.
name|set
argument_list|(
name|Metadata
operator|.
name|RESOLUTION_HORIZONTAL
argument_list|,
name|tag
operator|.
name|getDescription
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return;
block|}
if|if
condition|(
name|tag
operator|.
name|getTagName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"Y Resolution"
argument_list|)
operator|||
name|tag
operator|.
name|getTagType
argument_list|()
operator|==
literal|283
condition|)
block|{
name|Object
name|resolution
init|=
name|directory
operator|.
name|getObject
argument_list|(
name|tag
operator|.
name|getTagType
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|resolution
operator|instanceof
name|Rational
condition|)
block|{
name|metadata
operator|.
name|set
argument_list|(
name|Metadata
operator|.
name|RESOLUTION_VERTICAL
argument_list|,
operator|(
operator|(
name|Rational
operator|)
name|resolution
operator|)
operator|.
name|doubleValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|metadata
operator|.
name|set
argument_list|(
name|Metadata
operator|.
name|RESOLUTION_VERTICAL
argument_list|,
name|tag
operator|.
name|getDescription
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return;
block|}
if|if
condition|(
name|tag
operator|.
name|getTagName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"Resolution Unit"
argument_list|)
operator|||
name|tag
operator|.
name|getTagType
argument_list|()
operator|==
literal|296
condition|)
block|{
name|metadata
operator|.
name|set
argument_list|(
name|Metadata
operator|.
name|RESOLUTION_UNIT
argument_list|,
name|tag
operator|.
name|getDescription
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|tag
operator|.
name|getTagName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"Keywords"
argument_list|)
operator|||
name|tag
operator|.
name|getTagType
argument_list|()
operator|==
literal|537
condition|)
block|{
name|metadata
operator|.
name|set
argument_list|(
name|Metadata
operator|.
name|KEYWORDS
argument_list|,
name|tag
operator|.
name|getDescription
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|tag
operator|.
name|getTagName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"Jpeg Comment"
argument_list|)
condition|)
block|{
name|metadata
operator|.
name|set
argument_list|(
name|Metadata
operator|.
name|COMMENTS
argument_list|,
name|tag
operator|.
name|getDescription
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
comment|//      System.err.println(directory.getObject(tag.getTagType()) + " " + directory.getObject(tag.getTagType()).getClass());
comment|// File info
comment|// Metadata Extractor does not read XMP so we need to use the values from Iptc or EXIF
if|if
condition|(
literal|"Iptc"
operator|.
name|equals
argument_list|(
name|tag
operator|.
name|getDirectoryName
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
literal|"Object Name"
operator|.
name|equals
argument_list|(
name|tag
operator|.
name|getTagName
argument_list|()
argument_list|)
condition|)
block|{
name|metadata
operator|.
name|set
argument_list|(
name|Metadata
operator|.
name|TITLE
argument_list|,
name|tag
operator|.
name|getDescription
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
literal|"By-line"
operator|.
name|equals
argument_list|(
name|tag
operator|.
name|getTagName
argument_list|()
argument_list|)
condition|)
block|{
name|metadata
operator|.
name|set
argument_list|(
name|Metadata
operator|.
name|AUTHOR
argument_list|,
name|tag
operator|.
name|getDescription
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
literal|"Caption/Abstract"
operator|.
name|equals
argument_list|(
name|tag
operator|.
name|getTagName
argument_list|()
argument_list|)
condition|)
block|{
comment|// Looks like metadata extractor returns IPTC newlines as a single carriage return,
comment|// but the exiv2 command does not so we change to line feed here because that is less surprising to users
name|metadata
operator|.
name|set
argument_list|(
name|Metadata
operator|.
name|DESCRIPTION
argument_list|,
name|tag
operator|.
name|getDescription
argument_list|()
operator|.
name|replaceAll
argument_list|(
literal|"\r\n?"
argument_list|,
literal|"\n"
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
comment|// EXIF / TIFF Tags
name|Property
name|key
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|tag
operator|.
name|getTagName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"Image Width"
argument_list|)
operator|||
name|tag
operator|.
name|getTagType
argument_list|()
operator|==
literal|256
condition|)
block|{
name|key
operator|=
name|Metadata
operator|.
name|IMAGE_WIDTH
expr_stmt|;
block|}
if|if
condition|(
name|tag
operator|.
name|getTagName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"Image Height"
argument_list|)
operator|||
name|tag
operator|.
name|getTagType
argument_list|()
operator|==
literal|257
condition|)
block|{
name|key
operator|=
name|Metadata
operator|.
name|IMAGE_LENGTH
expr_stmt|;
block|}
if|if
condition|(
name|tag
operator|.
name|getTagName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"Data Precision"
argument_list|)
operator|||
name|tag
operator|.
name|getTagName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"Bits Per Sample"
argument_list|)
operator|||
name|tag
operator|.
name|getTagType
argument_list|()
operator|==
literal|258
condition|)
block|{
name|key
operator|=
name|Metadata
operator|.
name|BITS_PER_SAMPLE
expr_stmt|;
block|}
if|if
condition|(
name|tag
operator|.
name|getTagType
argument_list|()
operator|==
literal|277
condition|)
block|{
name|key
operator|=
name|Metadata
operator|.
name|SAMPLES_PER_PIXEL
expr_stmt|;
block|}
if|if
condition|(
name|key
operator|!=
literal|null
condition|)
block|{
name|Matcher
name|m
init|=
name|LEADING_NUMBERS
operator|.
name|matcher
argument_list|(
name|tag
operator|.
name|getDescription
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|m
operator|.
name|matches
argument_list|()
condition|)
block|{
name|metadata
operator|.
name|set
argument_list|(
name|key
argument_list|,
name|m
operator|.
name|group
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
specifier|static
specifier|final
name|Pattern
name|LEADING_NUMBERS
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"(\\d+)\\s*.*"
argument_list|)
decl_stmt|;
block|}
end_class

end_unit

