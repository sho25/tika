begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|image
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Constructor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|DecimalFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|DecimalFormatSymbols
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|SimpleDateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|exception
operator|.
name|TikaException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|metadata
operator|.
name|Geographic
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|metadata
operator|.
name|Metadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|metadata
operator|.
name|Property
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|metadata
operator|.
name|TikaCoreProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|drew
operator|.
name|imaging
operator|.
name|jpeg
operator|.
name|JpegProcessingException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|drew
operator|.
name|imaging
operator|.
name|jpeg
operator|.
name|JpegSegmentReader
import|;
end_import

begin_import
import|import
name|com
operator|.
name|drew
operator|.
name|imaging
operator|.
name|tiff
operator|.
name|TiffMetadataReader
import|;
end_import

begin_import
import|import
name|com
operator|.
name|drew
operator|.
name|imaging
operator|.
name|tiff
operator|.
name|TiffProcessingException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|drew
operator|.
name|lang
operator|.
name|Rational
import|;
end_import

begin_import
import|import
name|com
operator|.
name|drew
operator|.
name|metadata
operator|.
name|Directory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|drew
operator|.
name|metadata
operator|.
name|MetadataException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|drew
operator|.
name|metadata
operator|.
name|MetadataReader
import|;
end_import

begin_import
import|import
name|com
operator|.
name|drew
operator|.
name|metadata
operator|.
name|Tag
import|;
end_import

begin_import
import|import
name|com
operator|.
name|drew
operator|.
name|metadata
operator|.
name|exif
operator|.
name|ExifDirectory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|drew
operator|.
name|metadata
operator|.
name|exif
operator|.
name|ExifReader
import|;
end_import

begin_import
import|import
name|com
operator|.
name|drew
operator|.
name|metadata
operator|.
name|exif
operator|.
name|GpsDirectory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|drew
operator|.
name|metadata
operator|.
name|iptc
operator|.
name|IptcDirectory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|drew
operator|.
name|metadata
operator|.
name|iptc
operator|.
name|IptcReader
import|;
end_import

begin_import
import|import
name|com
operator|.
name|drew
operator|.
name|metadata
operator|.
name|jpeg
operator|.
name|JpegCommentDirectory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|drew
operator|.
name|metadata
operator|.
name|jpeg
operator|.
name|JpegCommentReader
import|;
end_import

begin_import
import|import
name|com
operator|.
name|drew
operator|.
name|metadata
operator|.
name|jpeg
operator|.
name|JpegDirectory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|drew
operator|.
name|metadata
operator|.
name|jpeg
operator|.
name|JpegReader
import|;
end_import

begin_comment
comment|/**  * Uses the<a href="http://www.drewnoakes.com/code/exif/">Metadata Extractor</a> library  * to read EXIF and IPTC image metadata and map to Tika fields.  *   * As of 2.4.0 the library supports jpeg and tiff.  */
end_comment

begin_class
specifier|public
class|class
name|ImageMetadataExtractor
block|{
specifier|private
specifier|final
name|Metadata
name|metadata
decl_stmt|;
specifier|private
name|DirectoryHandler
index|[]
name|handlers
decl_stmt|;
comment|/**      * @param metadata to extract to, using default directory handlers      */
specifier|public
name|ImageMetadataExtractor
parameter_list|(
name|Metadata
name|metadata
parameter_list|)
block|{
name|this
argument_list|(
name|metadata
argument_list|,
operator|new
name|CopyUnknownFieldsHandler
argument_list|()
argument_list|,
operator|new
name|JpegCommentHandler
argument_list|()
argument_list|,
operator|new
name|ExifHandler
argument_list|()
argument_list|,
operator|new
name|DimensionsHandler
argument_list|()
argument_list|,
operator|new
name|GeotagHandler
argument_list|()
argument_list|,
operator|new
name|IptcHandler
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * @param metadata to extract to      * @param handlers handlers in order, note that handlers may override values from earlier handlers      */
specifier|public
name|ImageMetadataExtractor
parameter_list|(
name|Metadata
name|metadata
parameter_list|,
name|DirectoryHandler
modifier|...
name|handlers
parameter_list|)
block|{
name|this
operator|.
name|metadata
operator|=
name|metadata
expr_stmt|;
name|this
operator|.
name|handlers
operator|=
name|handlers
expr_stmt|;
block|}
specifier|public
name|void
name|parseJpeg
parameter_list|(
name|File
name|file
parameter_list|)
throws|throws
name|IOException
throws|,
name|SAXException
throws|,
name|TikaException
block|{
try|try
block|{
name|JpegSegmentReader
name|reader
init|=
operator|new
name|JpegSegmentReader
argument_list|(
name|file
argument_list|)
decl_stmt|;
name|extractMetadataFromSegment
argument_list|(
name|reader
argument_list|,
name|JpegSegmentReader
operator|.
name|SEGMENT_APP1
argument_list|,
name|ExifReader
operator|.
name|class
argument_list|)
expr_stmt|;
name|extractMetadataFromSegment
argument_list|(
name|reader
argument_list|,
name|JpegSegmentReader
operator|.
name|SEGMENT_APPD
argument_list|,
name|IptcReader
operator|.
name|class
argument_list|)
expr_stmt|;
name|extractMetadataFromSegment
argument_list|(
name|reader
argument_list|,
name|JpegSegmentReader
operator|.
name|SEGMENT_SOF0
argument_list|,
name|JpegReader
operator|.
name|class
argument_list|)
expr_stmt|;
name|extractMetadataFromSegment
argument_list|(
name|reader
argument_list|,
name|JpegSegmentReader
operator|.
name|SEGMENT_COM
argument_list|,
name|JpegCommentReader
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|JpegProcessingException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|TikaException
argument_list|(
literal|"Can't read JPEG metadata"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
name|void
name|extractMetadataFromSegment
parameter_list|(
name|JpegSegmentReader
name|reader
parameter_list|,
name|byte
name|marker
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|MetadataReader
argument_list|>
name|klass
parameter_list|)
block|{
try|try
block|{
name|Constructor
argument_list|<
name|?
extends|extends
name|MetadataReader
argument_list|>
name|constructor
init|=
name|klass
operator|.
name|getConstructor
argument_list|(
name|byte
index|[]
operator|.
expr|class
argument_list|)
decl_stmt|;
name|int
name|n
init|=
name|reader
operator|.
name|getSegmentCount
argument_list|(
name|marker
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|n
condition|;
name|i
operator|++
control|)
block|{
name|byte
index|[]
name|segment
init|=
name|reader
operator|.
name|readSegment
argument_list|(
name|marker
argument_list|,
name|i
argument_list|)
decl_stmt|;
name|com
operator|.
name|drew
operator|.
name|metadata
operator|.
name|Metadata
name|metadata
init|=
operator|new
name|com
operator|.
name|drew
operator|.
name|metadata
operator|.
name|Metadata
argument_list|()
decl_stmt|;
name|constructor
operator|.
name|newInstance
argument_list|(
name|segment
argument_list|)
operator|.
name|extract
argument_list|(
name|metadata
argument_list|)
expr_stmt|;
name|handle
argument_list|(
name|metadata
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// Unable to read this kind of metadata, so skip
block|}
block|}
specifier|protected
name|void
name|parseTiff
parameter_list|(
name|InputStream
name|stream
parameter_list|)
throws|throws
name|IOException
throws|,
name|SAXException
throws|,
name|TikaException
block|{
try|try
block|{
name|com
operator|.
name|drew
operator|.
name|metadata
operator|.
name|Metadata
name|tiffMetadata
init|=
name|TiffMetadataReader
operator|.
name|readMetadata
argument_list|(
name|stream
argument_list|)
decl_stmt|;
name|handle
argument_list|(
name|tiffMetadata
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TiffProcessingException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|TikaException
argument_list|(
literal|"Can't read TIFF metadata"
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|MetadataException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|TikaException
argument_list|(
literal|"Can't read TIFF metadata"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**      * Copies extracted tags to tika metadata using registered handlers.      * @param metadataExtractor Tag directories from a Metadata Extractor "reader"      * @throws MetadataException This method does not handle exceptions from Metadata Extractor      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|protected
name|void
name|handle
parameter_list|(
name|com
operator|.
name|drew
operator|.
name|metadata
operator|.
name|Metadata
name|metadataExtractor
parameter_list|)
throws|throws
name|MetadataException
block|{
name|handle
argument_list|(
name|metadataExtractor
operator|.
name|getDirectoryIterator
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Copies extracted tags to tika metadata using registered handlers.      * @param directories Metadata Extractor {@link com.drew.metadata.Directory} instances.      * @throws MetadataException This method does not handle exceptions from Metadata Extractor      */
specifier|protected
name|void
name|handle
parameter_list|(
name|Iterator
argument_list|<
name|Directory
argument_list|>
name|directories
parameter_list|)
throws|throws
name|MetadataException
block|{
while|while
condition|(
name|directories
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Directory
name|directory
init|=
name|directories
operator|.
name|next
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|handlers
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|handlers
index|[
name|i
index|]
operator|.
name|supports
argument_list|(
name|directory
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
name|handlers
index|[
name|i
index|]
operator|.
name|handle
argument_list|(
name|directory
argument_list|,
name|metadata
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/**      * Reads one or more type of Metadata Extractor fields.      */
specifier|static
interface|interface
name|DirectoryHandler
block|{
comment|/**          * @param directorySubclass A Metadata Extractor directory class          * @return true if the directory type is supported by this handler          */
name|boolean
name|supports
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|Directory
argument_list|>
name|directoryType
parameter_list|)
function_decl|;
comment|/**          * @param directory extracted tags          * @param metadata current tika metadata          * @throws MetadataException typically field extraction error, aborts all further extraction          */
name|void
name|handle
parameter_list|(
name|Directory
name|directory
parameter_list|,
name|Metadata
name|metadata
parameter_list|)
throws|throws
name|MetadataException
function_decl|;
block|}
comment|/**      * Mimics the behavior from TIKA-314 of copying all extracted tags      * to tika metadata using field names from Metadata Extractor.      */
specifier|static
class|class
name|CopyAllFieldsHandler
implements|implements
name|DirectoryHandler
block|{
specifier|public
name|boolean
name|supports
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|Directory
argument_list|>
name|directoryType
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
specifier|public
name|void
name|handle
parameter_list|(
name|Directory
name|directory
parameter_list|,
name|Metadata
name|metadata
parameter_list|)
throws|throws
name|MetadataException
block|{
name|Iterator
argument_list|<
name|?
argument_list|>
name|tags
init|=
name|directory
operator|.
name|getTagIterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|tags
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Tag
name|tag
init|=
operator|(
name|Tag
operator|)
name|tags
operator|.
name|next
argument_list|()
decl_stmt|;
name|metadata
operator|.
name|set
argument_list|(
name|tag
operator|.
name|getTagName
argument_list|()
argument_list|,
name|tag
operator|.
name|getDescription
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Copies all fields regardless of directory, if the tag name      * is not identical to a known Metadata field name.      * This leads to more predictable behavior than {@link CopyAllFieldsHandler}.      */
specifier|static
class|class
name|CopyUnknownFieldsHandler
implements|implements
name|DirectoryHandler
block|{
specifier|public
name|boolean
name|supports
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|Directory
argument_list|>
name|directoryType
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
specifier|public
name|void
name|handle
parameter_list|(
name|Directory
name|directory
parameter_list|,
name|Metadata
name|metadata
parameter_list|)
throws|throws
name|MetadataException
block|{
name|Iterator
argument_list|<
name|?
argument_list|>
name|tags
init|=
name|directory
operator|.
name|getTagIterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|tags
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Tag
name|tag
init|=
operator|(
name|Tag
operator|)
name|tags
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|name
init|=
name|tag
operator|.
name|getTagName
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|MetadataFields
operator|.
name|isMetadataField
argument_list|(
name|name
argument_list|)
condition|)
block|{
try|try
block|{
name|String
name|value
init|=
name|tag
operator|.
name|getDescription
argument_list|()
operator|.
name|trim
argument_list|()
decl_stmt|;
if|if
condition|(
name|Boolean
operator|.
name|TRUE
operator|.
name|toString
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
name|value
argument_list|)
condition|)
block|{
name|value
operator|=
name|Boolean
operator|.
name|TRUE
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|Boolean
operator|.
name|FALSE
operator|.
name|toString
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
name|value
argument_list|)
condition|)
block|{
name|value
operator|=
name|Boolean
operator|.
name|FALSE
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
name|metadata
operator|.
name|set
argument_list|(
name|name
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MetadataException
name|e
parameter_list|)
block|{
comment|// Either something's corrupt, or it's a JPEG tag
comment|//  that the library doesn't know about. Skip it
block|}
block|}
block|}
block|}
block|}
comment|/**      * Basic image properties for TIFF and JPEG, at least.      */
specifier|static
class|class
name|DimensionsHandler
implements|implements
name|DirectoryHandler
block|{
specifier|private
specifier|final
name|Pattern
name|LEADING_NUMBERS
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"(\\d+)\\s*.*"
argument_list|)
decl_stmt|;
specifier|public
name|boolean
name|supports
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|Directory
argument_list|>
name|directoryType
parameter_list|)
block|{
return|return
name|directoryType
operator|==
name|JpegDirectory
operator|.
name|class
operator|||
name|directoryType
operator|==
name|ExifDirectory
operator|.
name|class
return|;
block|}
specifier|public
name|void
name|handle
parameter_list|(
name|Directory
name|directory
parameter_list|,
name|Metadata
name|metadata
parameter_list|)
throws|throws
name|MetadataException
block|{
comment|// The test TIFF has width and height stored as follows according to exiv2
comment|//Exif.Image.ImageWidth                        Short       1  100
comment|//Exif.Image.ImageLength                       Short       1  75
comment|// and the values are found in "Thumbnail Image Width" (and Height) from Metadata Extractor
name|set
argument_list|(
name|directory
argument_list|,
name|metadata
argument_list|,
name|ExifDirectory
operator|.
name|TAG_THUMBNAIL_IMAGE_WIDTH
argument_list|,
name|Metadata
operator|.
name|IMAGE_WIDTH
argument_list|)
expr_stmt|;
name|set
argument_list|(
name|directory
argument_list|,
name|metadata
argument_list|,
name|JpegDirectory
operator|.
name|TAG_JPEG_IMAGE_WIDTH
argument_list|,
name|Metadata
operator|.
name|IMAGE_WIDTH
argument_list|)
expr_stmt|;
name|set
argument_list|(
name|directory
argument_list|,
name|metadata
argument_list|,
name|ExifDirectory
operator|.
name|TAG_THUMBNAIL_IMAGE_HEIGHT
argument_list|,
name|Metadata
operator|.
name|IMAGE_LENGTH
argument_list|)
expr_stmt|;
name|set
argument_list|(
name|directory
argument_list|,
name|metadata
argument_list|,
name|JpegDirectory
operator|.
name|TAG_JPEG_IMAGE_HEIGHT
argument_list|,
name|Metadata
operator|.
name|IMAGE_LENGTH
argument_list|)
expr_stmt|;
comment|// Bits per sample, two methods of extracting, exif overrides jpeg
name|set
argument_list|(
name|directory
argument_list|,
name|metadata
argument_list|,
name|JpegDirectory
operator|.
name|TAG_JPEG_DATA_PRECISION
argument_list|,
name|Metadata
operator|.
name|BITS_PER_SAMPLE
argument_list|)
expr_stmt|;
name|set
argument_list|(
name|directory
argument_list|,
name|metadata
argument_list|,
name|ExifDirectory
operator|.
name|TAG_BITS_PER_SAMPLE
argument_list|,
name|Metadata
operator|.
name|BITS_PER_SAMPLE
argument_list|)
expr_stmt|;
comment|// Straightforward
name|set
argument_list|(
name|directory
argument_list|,
name|metadata
argument_list|,
name|ExifDirectory
operator|.
name|TAG_SAMPLES_PER_PIXEL
argument_list|,
name|Metadata
operator|.
name|SAMPLES_PER_PIXEL
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|set
parameter_list|(
name|Directory
name|directory
parameter_list|,
name|Metadata
name|metadata
parameter_list|,
name|int
name|extractTag
parameter_list|,
name|Property
name|metadataField
parameter_list|)
block|{
if|if
condition|(
name|directory
operator|.
name|containsTag
argument_list|(
name|extractTag
argument_list|)
condition|)
block|{
name|Matcher
name|m
init|=
name|LEADING_NUMBERS
operator|.
name|matcher
argument_list|(
name|directory
operator|.
name|getString
argument_list|(
name|extractTag
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|m
operator|.
name|matches
argument_list|()
condition|)
block|{
name|metadata
operator|.
name|set
argument_list|(
name|metadataField
argument_list|,
name|m
operator|.
name|group
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|static
class|class
name|JpegCommentHandler
implements|implements
name|DirectoryHandler
block|{
specifier|public
name|boolean
name|supports
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|Directory
argument_list|>
name|directoryType
parameter_list|)
block|{
return|return
name|directoryType
operator|==
name|JpegCommentDirectory
operator|.
name|class
return|;
block|}
specifier|public
name|void
name|handle
parameter_list|(
name|Directory
name|directory
parameter_list|,
name|Metadata
name|metadata
parameter_list|)
throws|throws
name|MetadataException
block|{
if|if
condition|(
name|directory
operator|.
name|containsTag
argument_list|(
name|JpegCommentDirectory
operator|.
name|TAG_JPEG_COMMENT
argument_list|)
condition|)
block|{
name|metadata
operator|.
name|add
argument_list|(
name|Metadata
operator|.
name|COMMENT
argument_list|,
name|directory
operator|.
name|getString
argument_list|(
name|JpegCommentDirectory
operator|.
name|TAG_JPEG_COMMENT
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|static
class|class
name|ExifHandler
implements|implements
name|DirectoryHandler
block|{
specifier|private
specifier|static
specifier|final
name|SimpleDateFormat
name|DATE_UNSPECIFIED_TZ
init|=
operator|new
name|SimpleDateFormat
argument_list|(
literal|"yyyy-MM-dd'T'HH:mm:ss"
argument_list|)
decl_stmt|;
specifier|public
name|boolean
name|supports
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|Directory
argument_list|>
name|directoryType
parameter_list|)
block|{
return|return
name|directoryType
operator|==
name|ExifDirectory
operator|.
name|class
return|;
block|}
specifier|public
name|void
name|handle
parameter_list|(
name|Directory
name|directory
parameter_list|,
name|Metadata
name|metadata
parameter_list|)
block|{
try|try
block|{
name|handleDateTags
argument_list|(
name|directory
argument_list|,
name|metadata
argument_list|)
expr_stmt|;
name|handlePhotoTags
argument_list|(
name|directory
argument_list|,
name|metadata
argument_list|)
expr_stmt|;
name|handleCommentTags
argument_list|(
name|directory
argument_list|,
name|metadata
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MetadataException
name|e
parameter_list|)
block|{
comment|// ignore date parse errors and proceed with other tags
block|}
block|}
comment|/**          * EXIF may contain image description, although with undefined encoding.          * Use IPTC for other annotation fields, and XMP for unicode support.          */
specifier|public
name|void
name|handleCommentTags
parameter_list|(
name|Directory
name|directory
parameter_list|,
name|Metadata
name|metadata
parameter_list|)
block|{
if|if
condition|(
name|metadata
operator|.
name|get
argument_list|(
name|TikaCoreProperties
operator|.
name|DESCRIPTION
argument_list|)
operator|==
literal|null
operator|&&
name|directory
operator|.
name|containsTag
argument_list|(
name|ExifDirectory
operator|.
name|TAG_IMAGE_DESCRIPTION
argument_list|)
condition|)
block|{
name|metadata
operator|.
name|set
argument_list|(
name|TikaCoreProperties
operator|.
name|DESCRIPTION
argument_list|,
name|directory
operator|.
name|getString
argument_list|(
name|ExifDirectory
operator|.
name|TAG_IMAGE_DESCRIPTION
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**          * Maps common TIFF and EXIF tags onto the Tika          *  TIFF image metadata namespace.          */
specifier|public
name|void
name|handlePhotoTags
parameter_list|(
name|Directory
name|directory
parameter_list|,
name|Metadata
name|metadata
parameter_list|)
block|{
if|if
condition|(
name|directory
operator|.
name|containsTag
argument_list|(
name|ExifDirectory
operator|.
name|TAG_EXPOSURE_TIME
argument_list|)
condition|)
block|{
name|Object
name|exposure
init|=
name|directory
operator|.
name|getObject
argument_list|(
name|ExifDirectory
operator|.
name|TAG_EXPOSURE_TIME
argument_list|)
decl_stmt|;
if|if
condition|(
name|exposure
operator|instanceof
name|Rational
condition|)
block|{
name|metadata
operator|.
name|set
argument_list|(
name|Metadata
operator|.
name|EXPOSURE_TIME
argument_list|,
operator|(
operator|(
name|Rational
operator|)
name|exposure
operator|)
operator|.
name|doubleValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|metadata
operator|.
name|set
argument_list|(
name|Metadata
operator|.
name|EXPOSURE_TIME
argument_list|,
name|directory
operator|.
name|getString
argument_list|(
name|ExifDirectory
operator|.
name|TAG_EXPOSURE_TIME
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|directory
operator|.
name|containsTag
argument_list|(
name|ExifDirectory
operator|.
name|TAG_FLASH
argument_list|)
condition|)
block|{
name|String
name|flash
init|=
literal|""
decl_stmt|;
try|try
block|{
name|flash
operator|=
name|directory
operator|.
name|getDescription
argument_list|(
name|ExifDirectory
operator|.
name|TAG_FLASH
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MetadataException
name|e
parameter_list|)
block|{
comment|// ignore
block|}
if|if
condition|(
name|flash
operator|.
name|indexOf
argument_list|(
literal|"Flash fired"
argument_list|)
operator|>
operator|-
literal|1
condition|)
block|{
name|metadata
operator|.
name|set
argument_list|(
name|Metadata
operator|.
name|FLASH_FIRED
argument_list|,
name|Boolean
operator|.
name|TRUE
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|flash
operator|.
name|indexOf
argument_list|(
literal|"Flash did not fire"
argument_list|)
operator|>
operator|-
literal|1
condition|)
block|{
name|metadata
operator|.
name|set
argument_list|(
name|Metadata
operator|.
name|FLASH_FIRED
argument_list|,
name|Boolean
operator|.
name|FALSE
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|metadata
operator|.
name|set
argument_list|(
name|Metadata
operator|.
name|FLASH_FIRED
argument_list|,
name|flash
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|directory
operator|.
name|containsTag
argument_list|(
name|ExifDirectory
operator|.
name|TAG_FNUMBER
argument_list|)
condition|)
block|{
name|Object
name|fnumber
init|=
name|directory
operator|.
name|getObject
argument_list|(
name|ExifDirectory
operator|.
name|TAG_FNUMBER
argument_list|)
decl_stmt|;
if|if
condition|(
name|fnumber
operator|instanceof
name|Rational
condition|)
block|{
name|metadata
operator|.
name|set
argument_list|(
name|Metadata
operator|.
name|F_NUMBER
argument_list|,
operator|(
operator|(
name|Rational
operator|)
name|fnumber
operator|)
operator|.
name|doubleValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|metadata
operator|.
name|set
argument_list|(
name|Metadata
operator|.
name|F_NUMBER
argument_list|,
name|directory
operator|.
name|getString
argument_list|(
name|ExifDirectory
operator|.
name|TAG_FNUMBER
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|directory
operator|.
name|containsTag
argument_list|(
name|ExifDirectory
operator|.
name|TAG_FOCAL_LENGTH
argument_list|)
condition|)
block|{
name|Object
name|length
init|=
name|directory
operator|.
name|getObject
argument_list|(
name|ExifDirectory
operator|.
name|TAG_FOCAL_LENGTH
argument_list|)
decl_stmt|;
if|if
condition|(
name|length
operator|instanceof
name|Rational
condition|)
block|{
name|metadata
operator|.
name|set
argument_list|(
name|Metadata
operator|.
name|FOCAL_LENGTH
argument_list|,
operator|(
operator|(
name|Rational
operator|)
name|length
operator|)
operator|.
name|doubleValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|metadata
operator|.
name|set
argument_list|(
name|Metadata
operator|.
name|FOCAL_LENGTH
argument_list|,
name|directory
operator|.
name|getString
argument_list|(
name|ExifDirectory
operator|.
name|TAG_FOCAL_LENGTH
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|directory
operator|.
name|containsTag
argument_list|(
name|ExifDirectory
operator|.
name|TAG_ISO_EQUIVALENT
argument_list|)
condition|)
block|{
name|metadata
operator|.
name|set
argument_list|(
name|Metadata
operator|.
name|ISO_SPEED_RATINGS
argument_list|,
name|directory
operator|.
name|getString
argument_list|(
name|ExifDirectory
operator|.
name|TAG_ISO_EQUIVALENT
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|directory
operator|.
name|containsTag
argument_list|(
name|ExifDirectory
operator|.
name|TAG_MAKE
argument_list|)
condition|)
block|{
name|metadata
operator|.
name|set
argument_list|(
name|Metadata
operator|.
name|EQUIPMENT_MAKE
argument_list|,
name|directory
operator|.
name|getString
argument_list|(
name|ExifDirectory
operator|.
name|TAG_MAKE
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|directory
operator|.
name|containsTag
argument_list|(
name|ExifDirectory
operator|.
name|TAG_MODEL
argument_list|)
condition|)
block|{
name|metadata
operator|.
name|set
argument_list|(
name|Metadata
operator|.
name|EQUIPMENT_MODEL
argument_list|,
name|directory
operator|.
name|getString
argument_list|(
name|ExifDirectory
operator|.
name|TAG_MODEL
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|directory
operator|.
name|containsTag
argument_list|(
name|ExifDirectory
operator|.
name|TAG_ORIENTATION
argument_list|)
condition|)
block|{
name|Object
name|length
init|=
name|directory
operator|.
name|getObject
argument_list|(
name|ExifDirectory
operator|.
name|TAG_ORIENTATION
argument_list|)
decl_stmt|;
if|if
condition|(
name|length
operator|instanceof
name|Integer
condition|)
block|{
name|metadata
operator|.
name|set
argument_list|(
name|Metadata
operator|.
name|ORIENTATION
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
operator|(
operator|(
name|Integer
operator|)
name|length
operator|)
operator|.
name|intValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|metadata
operator|.
name|set
argument_list|(
name|Metadata
operator|.
name|ORIENTATION
argument_list|,
name|directory
operator|.
name|getString
argument_list|(
name|ExifDirectory
operator|.
name|TAG_ORIENTATION
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|directory
operator|.
name|containsTag
argument_list|(
name|ExifDirectory
operator|.
name|TAG_SOFTWARE
argument_list|)
condition|)
block|{
name|metadata
operator|.
name|set
argument_list|(
name|Metadata
operator|.
name|SOFTWARE
argument_list|,
name|directory
operator|.
name|getString
argument_list|(
name|ExifDirectory
operator|.
name|TAG_SOFTWARE
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|directory
operator|.
name|containsTag
argument_list|(
name|ExifDirectory
operator|.
name|TAG_X_RESOLUTION
argument_list|)
condition|)
block|{
name|Object
name|resolution
init|=
name|directory
operator|.
name|getObject
argument_list|(
name|ExifDirectory
operator|.
name|TAG_X_RESOLUTION
argument_list|)
decl_stmt|;
if|if
condition|(
name|resolution
operator|instanceof
name|Rational
condition|)
block|{
name|metadata
operator|.
name|set
argument_list|(
name|Metadata
operator|.
name|RESOLUTION_HORIZONTAL
argument_list|,
operator|(
operator|(
name|Rational
operator|)
name|resolution
operator|)
operator|.
name|doubleValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|metadata
operator|.
name|set
argument_list|(
name|Metadata
operator|.
name|RESOLUTION_HORIZONTAL
argument_list|,
name|directory
operator|.
name|getString
argument_list|(
name|ExifDirectory
operator|.
name|TAG_X_RESOLUTION
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|directory
operator|.
name|containsTag
argument_list|(
name|ExifDirectory
operator|.
name|TAG_Y_RESOLUTION
argument_list|)
condition|)
block|{
name|Object
name|resolution
init|=
name|directory
operator|.
name|getObject
argument_list|(
name|ExifDirectory
operator|.
name|TAG_Y_RESOLUTION
argument_list|)
decl_stmt|;
if|if
condition|(
name|resolution
operator|instanceof
name|Rational
condition|)
block|{
name|metadata
operator|.
name|set
argument_list|(
name|Metadata
operator|.
name|RESOLUTION_VERTICAL
argument_list|,
operator|(
operator|(
name|Rational
operator|)
name|resolution
operator|)
operator|.
name|doubleValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|metadata
operator|.
name|set
argument_list|(
name|Metadata
operator|.
name|RESOLUTION_VERTICAL
argument_list|,
name|directory
operator|.
name|getString
argument_list|(
name|ExifDirectory
operator|.
name|TAG_Y_RESOLUTION
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|directory
operator|.
name|containsTag
argument_list|(
name|ExifDirectory
operator|.
name|TAG_RESOLUTION_UNIT
argument_list|)
condition|)
block|{
try|try
block|{
name|metadata
operator|.
name|set
argument_list|(
name|Metadata
operator|.
name|RESOLUTION_UNIT
argument_list|,
name|directory
operator|.
name|getDescription
argument_list|(
name|ExifDirectory
operator|.
name|TAG_RESOLUTION_UNIT
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MetadataException
name|e
parameter_list|)
block|{
comment|// ignore
block|}
block|}
block|}
comment|/**          * Maps exif dates to metadata fields.          */
specifier|public
name|void
name|handleDateTags
parameter_list|(
name|Directory
name|directory
parameter_list|,
name|Metadata
name|metadata
parameter_list|)
throws|throws
name|MetadataException
block|{
comment|// Date/Time Original overrides value from ExifDirectory.TAG_DATETIME
name|Date
name|original
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|directory
operator|.
name|containsTag
argument_list|(
name|ExifDirectory
operator|.
name|TAG_DATETIME_ORIGINAL
argument_list|)
condition|)
block|{
name|original
operator|=
name|directory
operator|.
name|getDate
argument_list|(
name|ExifDirectory
operator|.
name|TAG_DATETIME_ORIGINAL
argument_list|)
expr_stmt|;
comment|// Unless we have GPS time we don't know the time zone so date must be set
comment|// as ISO 8601 datetime without timezone suffix (no Z or +/-)
name|String
name|datetimeNoTimeZone
init|=
name|DATE_UNSPECIFIED_TZ
operator|.
name|format
argument_list|(
name|original
argument_list|)
decl_stmt|;
comment|// Same time zone as Metadata Extractor uses
name|metadata
operator|.
name|set
argument_list|(
name|TikaCoreProperties
operator|.
name|DATE
argument_list|,
name|datetimeNoTimeZone
argument_list|)
expr_stmt|;
name|metadata
operator|.
name|set
argument_list|(
name|Metadata
operator|.
name|ORIGINAL_DATE
argument_list|,
name|datetimeNoTimeZone
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|directory
operator|.
name|containsTag
argument_list|(
name|ExifDirectory
operator|.
name|TAG_DATETIME
argument_list|)
condition|)
block|{
name|Date
name|datetime
init|=
name|directory
operator|.
name|getDate
argument_list|(
name|ExifDirectory
operator|.
name|TAG_DATETIME
argument_list|)
decl_stmt|;
name|String
name|datetimeNoTimeZone
init|=
name|DATE_UNSPECIFIED_TZ
operator|.
name|format
argument_list|(
name|datetime
argument_list|)
decl_stmt|;
name|metadata
operator|.
name|set
argument_list|(
name|Metadata
operator|.
name|LAST_MODIFIED
argument_list|,
name|datetimeNoTimeZone
argument_list|)
expr_stmt|;
comment|// If Date/Time Original does not exist this might be creation date
if|if
condition|(
name|original
operator|==
literal|null
condition|)
block|{
name|metadata
operator|.
name|set
argument_list|(
name|TikaCoreProperties
operator|.
name|DATE
argument_list|,
name|datetimeNoTimeZone
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/**      * Reads image comments, originally TIKA-472.      * Metadata Extractor does not read XMP so we need to use the values from Iptc or EXIF      */
specifier|static
class|class
name|IptcHandler
implements|implements
name|DirectoryHandler
block|{
specifier|public
name|boolean
name|supports
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|Directory
argument_list|>
name|directoryType
parameter_list|)
block|{
return|return
name|directoryType
operator|==
name|IptcDirectory
operator|.
name|class
return|;
block|}
specifier|public
name|void
name|handle
parameter_list|(
name|Directory
name|directory
parameter_list|,
name|Metadata
name|metadata
parameter_list|)
throws|throws
name|MetadataException
block|{
if|if
condition|(
name|directory
operator|.
name|containsTag
argument_list|(
name|IptcDirectory
operator|.
name|TAG_KEYWORDS
argument_list|)
condition|)
block|{
name|String
index|[]
name|keywords
init|=
name|directory
operator|.
name|getStringArray
argument_list|(
name|IptcDirectory
operator|.
name|TAG_KEYWORDS
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|k
range|:
name|keywords
control|)
block|{
name|metadata
operator|.
name|add
argument_list|(
name|Metadata
operator|.
name|KEYWORDS
argument_list|,
name|k
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|directory
operator|.
name|containsTag
argument_list|(
name|IptcDirectory
operator|.
name|TAG_HEADLINE
argument_list|)
condition|)
block|{
name|metadata
operator|.
name|set
argument_list|(
name|TikaCoreProperties
operator|.
name|TITLE
argument_list|,
name|directory
operator|.
name|getString
argument_list|(
name|IptcDirectory
operator|.
name|TAG_HEADLINE
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|directory
operator|.
name|containsTag
argument_list|(
name|IptcDirectory
operator|.
name|TAG_OBJECT_NAME
argument_list|)
condition|)
block|{
name|metadata
operator|.
name|set
argument_list|(
name|TikaCoreProperties
operator|.
name|TITLE
argument_list|,
name|directory
operator|.
name|getString
argument_list|(
name|IptcDirectory
operator|.
name|TAG_OBJECT_NAME
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|directory
operator|.
name|containsTag
argument_list|(
name|IptcDirectory
operator|.
name|TAG_BY_LINE
argument_list|)
condition|)
block|{
name|metadata
operator|.
name|set
argument_list|(
name|Metadata
operator|.
name|AUTHOR
argument_list|,
name|directory
operator|.
name|getString
argument_list|(
name|IptcDirectory
operator|.
name|TAG_BY_LINE
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|directory
operator|.
name|containsTag
argument_list|(
name|IptcDirectory
operator|.
name|TAG_CAPTION
argument_list|)
condition|)
block|{
name|metadata
operator|.
name|set
argument_list|(
name|TikaCoreProperties
operator|.
name|DESCRIPTION
argument_list|,
comment|// Looks like metadata extractor returns IPTC newlines as a single carriage return,
comment|// but the exiv2 command does not so we change to line feed here because that is less surprising to users
name|directory
operator|.
name|getString
argument_list|(
name|IptcDirectory
operator|.
name|TAG_CAPTION
argument_list|)
operator|.
name|replaceAll
argument_list|(
literal|"\r\n?"
argument_list|,
literal|"\n"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Maps EXIF Geo Tags onto the Tika Geo metadata namespace.      */
specifier|static
class|class
name|GeotagHandler
implements|implements
name|DirectoryHandler
block|{
specifier|public
name|boolean
name|supports
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|Directory
argument_list|>
name|directoryType
parameter_list|)
block|{
return|return
name|directoryType
operator|==
name|GpsDirectory
operator|.
name|class
return|;
block|}
specifier|public
name|void
name|handle
parameter_list|(
name|Directory
name|directory
parameter_list|,
name|Metadata
name|metadata
parameter_list|)
throws|throws
name|MetadataException
block|{
name|String
name|lat
init|=
name|directory
operator|.
name|getDescription
argument_list|(
name|GpsDirectory
operator|.
name|TAG_GPS_LATITUDE
argument_list|)
decl_stmt|;
name|String
name|latNS
init|=
name|directory
operator|.
name|getDescription
argument_list|(
name|GpsDirectory
operator|.
name|TAG_GPS_LATITUDE_REF
argument_list|)
decl_stmt|;
if|if
condition|(
name|lat
operator|!=
literal|null
condition|)
block|{
name|Double
name|latitude
init|=
name|parseHMS
argument_list|(
name|lat
argument_list|)
decl_stmt|;
if|if
condition|(
name|latitude
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|latNS
operator|!=
literal|null
operator|&&
name|latNS
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"S"
argument_list|)
operator|&&
name|latitude
operator|>
literal|0
condition|)
block|{
name|latitude
operator|*=
operator|-
literal|1
expr_stmt|;
block|}
name|metadata
operator|.
name|set
argument_list|(
name|Metadata
operator|.
name|LATITUDE
argument_list|,
name|LAT_LONG_FORMAT
operator|.
name|format
argument_list|(
name|latitude
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|String
name|lng
init|=
name|directory
operator|.
name|getDescription
argument_list|(
name|GpsDirectory
operator|.
name|TAG_GPS_LONGITUDE
argument_list|)
decl_stmt|;
name|String
name|lngEW
init|=
name|directory
operator|.
name|getDescription
argument_list|(
name|GpsDirectory
operator|.
name|TAG_GPS_LONGITUDE_REF
argument_list|)
decl_stmt|;
if|if
condition|(
name|lng
operator|!=
literal|null
condition|)
block|{
name|Double
name|longitude
init|=
name|parseHMS
argument_list|(
name|lng
argument_list|)
decl_stmt|;
if|if
condition|(
name|longitude
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|lngEW
operator|!=
literal|null
operator|&&
name|lngEW
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"W"
argument_list|)
operator|&&
name|longitude
operator|>
literal|0
condition|)
block|{
name|longitude
operator|*=
operator|-
literal|1
expr_stmt|;
block|}
name|metadata
operator|.
name|set
argument_list|(
name|Metadata
operator|.
name|LONGITUDE
argument_list|,
name|LAT_LONG_FORMAT
operator|.
name|format
argument_list|(
name|longitude
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|Double
name|parseHMS
parameter_list|(
name|String
name|hms
parameter_list|)
block|{
name|Matcher
name|m
init|=
name|HOURS_MINUTES_SECONDS
operator|.
name|matcher
argument_list|(
name|hms
argument_list|)
decl_stmt|;
if|if
condition|(
name|m
operator|.
name|matches
argument_list|()
condition|)
block|{
name|double
name|value
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|m
operator|.
name|group
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|+
operator|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|m
operator|.
name|group
argument_list|(
literal|2
argument_list|)
argument_list|)
operator|/
literal|60.0
operator|)
operator|+
operator|(
name|Double
operator|.
name|parseDouble
argument_list|(
name|m
operator|.
name|group
argument_list|(
literal|3
argument_list|)
argument_list|)
operator|/
literal|60.0
operator|/
literal|60.0
operator|)
decl_stmt|;
return|return
name|value
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|private
specifier|static
specifier|final
name|Pattern
name|HOURS_MINUTES_SECONDS
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"(-?\\d+)\"(\\d+)'(\\d+\\.?\\d*)"
argument_list|)
decl_stmt|;
comment|/**          * The decimal format used for expressing latitudes and longitudes.          * The basic geo vocabulary defined by W3C (@see {@link Geographic})          * refers to the "float" type in XML Schema as the recommended format          * for latitude and longitude values.          */
specifier|private
specifier|static
specifier|final
name|DecimalFormat
name|LAT_LONG_FORMAT
init|=
operator|new
name|DecimalFormat
argument_list|(
literal|"##0.0####"
argument_list|,
operator|new
name|DecimalFormatSymbols
argument_list|(
name|Locale
operator|.
name|US
argument_list|)
argument_list|)
decl_stmt|;
block|}
block|}
end_class

end_unit

