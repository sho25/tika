begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|image
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|DecimalFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|DecimalFormatSymbols
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|SimpleDateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|util
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|exception
operator|.
name|TikaException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|metadata
operator|.
name|IPTC
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|metadata
operator|.
name|Metadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|metadata
operator|.
name|Property
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|metadata
operator|.
name|TikaCoreProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|drew
operator|.
name|imaging
operator|.
name|jpeg
operator|.
name|JpegMetadataReader
import|;
end_import

begin_import
import|import
name|com
operator|.
name|drew
operator|.
name|imaging
operator|.
name|jpeg
operator|.
name|JpegProcessingException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|drew
operator|.
name|imaging
operator|.
name|jpeg
operator|.
name|JpegSegmentType
import|;
end_import

begin_import
import|import
name|com
operator|.
name|drew
operator|.
name|imaging
operator|.
name|tiff
operator|.
name|TiffMetadataReader
import|;
end_import

begin_import
import|import
name|com
operator|.
name|drew
operator|.
name|imaging
operator|.
name|tiff
operator|.
name|TiffProcessingException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|drew
operator|.
name|lang
operator|.
name|GeoLocation
import|;
end_import

begin_import
import|import
name|com
operator|.
name|drew
operator|.
name|lang
operator|.
name|Rational
import|;
end_import

begin_import
import|import
name|com
operator|.
name|drew
operator|.
name|metadata
operator|.
name|Directory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|drew
operator|.
name|metadata
operator|.
name|MetadataException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|drew
operator|.
name|metadata
operator|.
name|Tag
import|;
end_import

begin_import
import|import
name|com
operator|.
name|drew
operator|.
name|metadata
operator|.
name|exif
operator|.
name|ExifIFD0Directory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|drew
operator|.
name|metadata
operator|.
name|exif
operator|.
name|ExifReader
import|;
end_import

begin_import
import|import
name|com
operator|.
name|drew
operator|.
name|metadata
operator|.
name|exif
operator|.
name|ExifSubIFDDirectory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|drew
operator|.
name|metadata
operator|.
name|exif
operator|.
name|ExifThumbnailDirectory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|drew
operator|.
name|metadata
operator|.
name|exif
operator|.
name|GpsDirectory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|drew
operator|.
name|metadata
operator|.
name|iptc
operator|.
name|IptcDirectory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|drew
operator|.
name|metadata
operator|.
name|jpeg
operator|.
name|JpegCommentDirectory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|drew
operator|.
name|metadata
operator|.
name|jpeg
operator|.
name|JpegDirectory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|drew
operator|.
name|metadata
operator|.
name|xmp
operator|.
name|XmpReader
import|;
end_import

begin_comment
comment|/**  * Uses the<a href="http://www.drewnoakes.com/code/exif/">Metadata Extractor</a> library  * to read EXIF and IPTC image metadata and map to Tika fields.  *<p/>  * As of 2.4.0 the library supports jpeg and tiff.  */
end_comment

begin_class
specifier|public
class|class
name|ImageMetadataExtractor
block|{
specifier|private
specifier|final
name|Metadata
name|metadata
decl_stmt|;
specifier|private
name|DirectoryHandler
index|[]
name|handlers
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|GEO_DECIMAL_FORMAT_STRING
init|=
literal|"#.######"
decl_stmt|;
comment|// 6 dp seems to be reasonable
comment|/**      * @param metadata to extract to, using default directory handlers      */
specifier|public
name|ImageMetadataExtractor
parameter_list|(
name|Metadata
name|metadata
parameter_list|)
block|{
name|this
argument_list|(
name|metadata
argument_list|,
operator|new
name|CopyUnknownFieldsHandler
argument_list|()
argument_list|,
operator|new
name|JpegCommentHandler
argument_list|()
argument_list|,
operator|new
name|ExifHandler
argument_list|()
argument_list|,
operator|new
name|DimensionsHandler
argument_list|()
argument_list|,
operator|new
name|GeotagHandler
argument_list|()
argument_list|,
operator|new
name|IptcHandler
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * @param metadata to extract to      * @param handlers handlers in order, note that handlers may override values from earlier handlers      */
specifier|public
name|ImageMetadataExtractor
parameter_list|(
name|Metadata
name|metadata
parameter_list|,
name|DirectoryHandler
modifier|...
name|handlers
parameter_list|)
block|{
name|this
operator|.
name|metadata
operator|=
name|metadata
expr_stmt|;
name|this
operator|.
name|handlers
operator|=
name|handlers
expr_stmt|;
block|}
specifier|public
name|void
name|parseJpeg
parameter_list|(
name|File
name|file
parameter_list|)
throws|throws
name|IOException
throws|,
name|SAXException
throws|,
name|TikaException
block|{
try|try
block|{
name|com
operator|.
name|drew
operator|.
name|metadata
operator|.
name|Metadata
name|jpegMetadata
init|=
name|JpegMetadataReader
operator|.
name|readMetadata
argument_list|(
name|file
argument_list|)
decl_stmt|;
name|handle
argument_list|(
name|jpegMetadata
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|JpegProcessingException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|TikaException
argument_list|(
literal|"Can't read JPEG metadata"
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|MetadataException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|TikaException
argument_list|(
literal|"Can't read JPEG metadata"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|void
name|parseTiff
parameter_list|(
name|File
name|file
parameter_list|)
throws|throws
name|IOException
throws|,
name|SAXException
throws|,
name|TikaException
block|{
try|try
block|{
name|com
operator|.
name|drew
operator|.
name|metadata
operator|.
name|Metadata
name|tiffMetadata
init|=
name|TiffMetadataReader
operator|.
name|readMetadata
argument_list|(
name|file
argument_list|)
decl_stmt|;
name|handle
argument_list|(
name|tiffMetadata
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MetadataException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|TikaException
argument_list|(
literal|"Can't read TIFF metadata"
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|TiffProcessingException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|TikaException
argument_list|(
literal|"Can't read TIFF metadata"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|void
name|parseRawExif
parameter_list|(
name|InputStream
name|stream
parameter_list|,
name|int
name|length
parameter_list|,
name|boolean
name|needsExifHeader
parameter_list|)
throws|throws
name|IOException
throws|,
name|SAXException
throws|,
name|TikaException
block|{
name|byte
index|[]
name|exif
decl_stmt|;
if|if
condition|(
name|needsExifHeader
condition|)
block|{
name|exif
operator|=
operator|new
name|byte
index|[
name|length
operator|+
literal|6
index|]
expr_stmt|;
name|exif
index|[
literal|0
index|]
operator|=
operator|(
name|byte
operator|)
literal|'E'
expr_stmt|;
name|exif
index|[
literal|1
index|]
operator|=
operator|(
name|byte
operator|)
literal|'x'
expr_stmt|;
name|exif
index|[
literal|2
index|]
operator|=
operator|(
name|byte
operator|)
literal|'i'
expr_stmt|;
name|exif
index|[
literal|3
index|]
operator|=
operator|(
name|byte
operator|)
literal|'f'
expr_stmt|;
name|IOUtils
operator|.
name|readFully
argument_list|(
name|stream
argument_list|,
name|exif
argument_list|,
literal|6
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|exif
operator|=
operator|new
name|byte
index|[
name|length
index|]
expr_stmt|;
name|IOUtils
operator|.
name|readFully
argument_list|(
name|stream
argument_list|,
name|exif
argument_list|,
literal|0
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
name|parseRawExif
argument_list|(
name|exif
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|parseRawExif
parameter_list|(
name|byte
index|[]
name|exifData
parameter_list|)
throws|throws
name|IOException
throws|,
name|SAXException
throws|,
name|TikaException
block|{
name|com
operator|.
name|drew
operator|.
name|metadata
operator|.
name|Metadata
name|metadata
init|=
operator|new
name|com
operator|.
name|drew
operator|.
name|metadata
operator|.
name|Metadata
argument_list|()
decl_stmt|;
name|ExifReader
name|reader
init|=
operator|new
name|ExifReader
argument_list|()
decl_stmt|;
name|reader
operator|.
name|extract
argument_list|(
name|exifData
argument_list|,
name|metadata
argument_list|,
name|JpegSegmentType
operator|.
name|APP1
argument_list|)
expr_stmt|;
try|try
block|{
name|handle
argument_list|(
name|metadata
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MetadataException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|TikaException
argument_list|(
literal|"Can't process the EXIF Data"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|void
name|parseRawXMP
parameter_list|(
name|byte
index|[]
name|xmpData
parameter_list|)
throws|throws
name|IOException
throws|,
name|SAXException
throws|,
name|TikaException
block|{
name|com
operator|.
name|drew
operator|.
name|metadata
operator|.
name|Metadata
name|metadata
init|=
operator|new
name|com
operator|.
name|drew
operator|.
name|metadata
operator|.
name|Metadata
argument_list|()
decl_stmt|;
name|XmpReader
name|reader
init|=
operator|new
name|XmpReader
argument_list|()
decl_stmt|;
name|reader
operator|.
name|extract
argument_list|(
name|xmpData
argument_list|,
name|metadata
argument_list|)
expr_stmt|;
try|try
block|{
name|handle
argument_list|(
name|metadata
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MetadataException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|TikaException
argument_list|(
literal|"Can't process the XMP Data"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**      * Copies extracted tags to tika metadata using registered handlers.      *      * @param metadataExtractor Tag directories from a Metadata Extractor "reader"      * @throws MetadataException This method does not handle exceptions from Metadata Extractor      */
specifier|protected
name|void
name|handle
parameter_list|(
name|com
operator|.
name|drew
operator|.
name|metadata
operator|.
name|Metadata
name|metadataExtractor
parameter_list|)
throws|throws
name|MetadataException
block|{
name|handle
argument_list|(
name|metadataExtractor
operator|.
name|getDirectories
argument_list|()
operator|.
name|iterator
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Copies extracted tags to tika metadata using registered handlers.      *      * @param directories Metadata Extractor {@link com.drew.metadata.Directory} instances.      * @throws MetadataException This method does not handle exceptions from Metadata Extractor      */
specifier|protected
name|void
name|handle
parameter_list|(
name|Iterator
argument_list|<
name|Directory
argument_list|>
name|directories
parameter_list|)
throws|throws
name|MetadataException
block|{
while|while
condition|(
name|directories
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Directory
name|directory
init|=
name|directories
operator|.
name|next
argument_list|()
decl_stmt|;
for|for
control|(
name|DirectoryHandler
name|handler
range|:
name|handlers
control|)
block|{
if|if
condition|(
name|handler
operator|.
name|supports
argument_list|(
name|directory
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
name|handler
operator|.
name|handle
argument_list|(
name|directory
argument_list|,
name|metadata
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/**      * Reads one or more type of Metadata Extractor fields.      */
specifier|static
interface|interface
name|DirectoryHandler
block|{
comment|/**          * @param directoryType A Metadata Extractor directory class          * @return true if the directory type is supported by this handler          */
name|boolean
name|supports
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|Directory
argument_list|>
name|directoryType
parameter_list|)
function_decl|;
comment|/**          * @param directory extracted tags          * @param metadata  current tika metadata          * @throws MetadataException typically field extraction error, aborts all further extraction          */
name|void
name|handle
parameter_list|(
name|Directory
name|directory
parameter_list|,
name|Metadata
name|metadata
parameter_list|)
throws|throws
name|MetadataException
function_decl|;
block|}
comment|/**      * Mimics the behavior from TIKA-314 of copying all extracted tags      * to tika metadata using field names from Metadata Extractor.      */
specifier|static
class|class
name|CopyAllFieldsHandler
implements|implements
name|DirectoryHandler
block|{
specifier|public
name|boolean
name|supports
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|Directory
argument_list|>
name|directoryType
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
specifier|public
name|void
name|handle
parameter_list|(
name|Directory
name|directory
parameter_list|,
name|Metadata
name|metadata
parameter_list|)
throws|throws
name|MetadataException
block|{
if|if
condition|(
name|directory
operator|.
name|getTags
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Tag
name|tag
range|:
name|directory
operator|.
name|getTags
argument_list|()
control|)
block|{
name|metadata
operator|.
name|set
argument_list|(
name|tag
operator|.
name|getTagName
argument_list|()
argument_list|,
name|tag
operator|.
name|getDescription
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/**      * Copies all fields regardless of directory, if the tag name      * is not identical to a known Metadata field name.      * This leads to more predictable behavior than {@link CopyAllFieldsHandler}.      */
specifier|static
class|class
name|CopyUnknownFieldsHandler
implements|implements
name|DirectoryHandler
block|{
specifier|public
name|boolean
name|supports
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|Directory
argument_list|>
name|directoryType
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
specifier|public
name|void
name|handle
parameter_list|(
name|Directory
name|directory
parameter_list|,
name|Metadata
name|metadata
parameter_list|)
throws|throws
name|MetadataException
block|{
if|if
condition|(
name|directory
operator|.
name|getTags
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Tag
name|tag
range|:
name|directory
operator|.
name|getTags
argument_list|()
control|)
block|{
name|String
name|name
init|=
name|tag
operator|.
name|getTagName
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|MetadataFields
operator|.
name|isMetadataField
argument_list|(
name|name
argument_list|)
operator|&&
name|tag
operator|.
name|getDescription
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|String
name|value
init|=
name|tag
operator|.
name|getDescription
argument_list|()
operator|.
name|trim
argument_list|()
decl_stmt|;
if|if
condition|(
name|Boolean
operator|.
name|TRUE
operator|.
name|toString
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
name|value
argument_list|)
condition|)
block|{
name|value
operator|=
name|Boolean
operator|.
name|TRUE
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|Boolean
operator|.
name|FALSE
operator|.
name|toString
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
name|value
argument_list|)
condition|)
block|{
name|value
operator|=
name|Boolean
operator|.
name|FALSE
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
name|metadata
operator|.
name|set
argument_list|(
name|name
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
comment|/**      * Basic image properties for TIFF and JPEG, at least.      */
specifier|static
class|class
name|DimensionsHandler
implements|implements
name|DirectoryHandler
block|{
specifier|private
specifier|final
name|Pattern
name|LEADING_NUMBERS
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"(\\d+)\\s*.*"
argument_list|)
decl_stmt|;
specifier|public
name|boolean
name|supports
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|Directory
argument_list|>
name|directoryType
parameter_list|)
block|{
return|return
name|directoryType
operator|==
name|JpegDirectory
operator|.
name|class
operator|||
name|directoryType
operator|==
name|ExifSubIFDDirectory
operator|.
name|class
operator|||
name|directoryType
operator|==
name|ExifThumbnailDirectory
operator|.
name|class
operator|||
name|directoryType
operator|==
name|ExifIFD0Directory
operator|.
name|class
return|;
block|}
specifier|public
name|void
name|handle
parameter_list|(
name|Directory
name|directory
parameter_list|,
name|Metadata
name|metadata
parameter_list|)
throws|throws
name|MetadataException
block|{
comment|// The test TIFF has width and height stored as follows according to exiv2
comment|//Exif.Image.ImageWidth                        Short       1  100
comment|//Exif.Image.ImageLength                       Short       1  75
comment|// and the values are found in "Thumbnail Image Width" (and Height) from Metadata Extractor
name|set
argument_list|(
name|directory
argument_list|,
name|metadata
argument_list|,
name|ExifThumbnailDirectory
operator|.
name|TAG_THUMBNAIL_IMAGE_WIDTH
argument_list|,
name|Metadata
operator|.
name|IMAGE_WIDTH
argument_list|)
expr_stmt|;
name|set
argument_list|(
name|directory
argument_list|,
name|metadata
argument_list|,
name|JpegDirectory
operator|.
name|TAG_IMAGE_WIDTH
argument_list|,
name|Metadata
operator|.
name|IMAGE_WIDTH
argument_list|)
expr_stmt|;
name|set
argument_list|(
name|directory
argument_list|,
name|metadata
argument_list|,
name|ExifThumbnailDirectory
operator|.
name|TAG_THUMBNAIL_IMAGE_HEIGHT
argument_list|,
name|Metadata
operator|.
name|IMAGE_LENGTH
argument_list|)
expr_stmt|;
name|set
argument_list|(
name|directory
argument_list|,
name|metadata
argument_list|,
name|JpegDirectory
operator|.
name|TAG_IMAGE_HEIGHT
argument_list|,
name|Metadata
operator|.
name|IMAGE_LENGTH
argument_list|)
expr_stmt|;
comment|// Bits per sample, two methods of extracting, exif overrides jpeg
name|set
argument_list|(
name|directory
argument_list|,
name|metadata
argument_list|,
name|JpegDirectory
operator|.
name|TAG_DATA_PRECISION
argument_list|,
name|Metadata
operator|.
name|BITS_PER_SAMPLE
argument_list|)
expr_stmt|;
name|set
argument_list|(
name|directory
argument_list|,
name|metadata
argument_list|,
name|ExifSubIFDDirectory
operator|.
name|TAG_BITS_PER_SAMPLE
argument_list|,
name|Metadata
operator|.
name|BITS_PER_SAMPLE
argument_list|)
expr_stmt|;
comment|// Straightforward
name|set
argument_list|(
name|directory
argument_list|,
name|metadata
argument_list|,
name|ExifSubIFDDirectory
operator|.
name|TAG_SAMPLES_PER_PIXEL
argument_list|,
name|Metadata
operator|.
name|SAMPLES_PER_PIXEL
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|set
parameter_list|(
name|Directory
name|directory
parameter_list|,
name|Metadata
name|metadata
parameter_list|,
name|int
name|extractTag
parameter_list|,
name|Property
name|metadataField
parameter_list|)
block|{
if|if
condition|(
name|directory
operator|.
name|containsTag
argument_list|(
name|extractTag
argument_list|)
condition|)
block|{
name|Matcher
name|m
init|=
name|LEADING_NUMBERS
operator|.
name|matcher
argument_list|(
name|directory
operator|.
name|getString
argument_list|(
name|extractTag
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|m
operator|.
name|matches
argument_list|()
condition|)
block|{
name|metadata
operator|.
name|set
argument_list|(
name|metadataField
argument_list|,
name|m
operator|.
name|group
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|static
class|class
name|JpegCommentHandler
implements|implements
name|DirectoryHandler
block|{
specifier|public
name|boolean
name|supports
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|Directory
argument_list|>
name|directoryType
parameter_list|)
block|{
return|return
name|directoryType
operator|==
name|JpegCommentDirectory
operator|.
name|class
return|;
block|}
specifier|public
name|void
name|handle
parameter_list|(
name|Directory
name|directory
parameter_list|,
name|Metadata
name|metadata
parameter_list|)
throws|throws
name|MetadataException
block|{
if|if
condition|(
name|directory
operator|.
name|containsTag
argument_list|(
name|JpegCommentDirectory
operator|.
name|TAG_COMMENT
argument_list|)
condition|)
block|{
name|metadata
operator|.
name|add
argument_list|(
name|TikaCoreProperties
operator|.
name|COMMENTS
argument_list|,
name|directory
operator|.
name|getString
argument_list|(
name|JpegCommentDirectory
operator|.
name|TAG_COMMENT
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|static
class|class
name|ExifHandler
implements|implements
name|DirectoryHandler
block|{
comment|// There's a new ExifHandler for each file processed, so this is thread safe
specifier|private
specifier|static
specifier|final
name|ThreadLocal
argument_list|<
name|SimpleDateFormat
argument_list|>
name|DATE_UNSPECIFIED_TZ
init|=
operator|new
name|ThreadLocal
argument_list|<
name|SimpleDateFormat
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|SimpleDateFormat
name|initialValue
parameter_list|()
block|{
return|return
operator|new
name|SimpleDateFormat
argument_list|(
literal|"yyyy-MM-dd'T'HH:mm:ss"
argument_list|,
name|Locale
operator|.
name|US
argument_list|)
return|;
block|}
block|}
decl_stmt|;
specifier|public
name|boolean
name|supports
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|Directory
argument_list|>
name|directoryType
parameter_list|)
block|{
return|return
name|directoryType
operator|==
name|ExifIFD0Directory
operator|.
name|class
operator|||
name|directoryType
operator|==
name|ExifSubIFDDirectory
operator|.
name|class
return|;
block|}
specifier|public
name|void
name|handle
parameter_list|(
name|Directory
name|directory
parameter_list|,
name|Metadata
name|metadata
parameter_list|)
block|{
try|try
block|{
name|handleDateTags
argument_list|(
name|directory
argument_list|,
name|metadata
argument_list|)
expr_stmt|;
name|handlePhotoTags
argument_list|(
name|directory
argument_list|,
name|metadata
argument_list|)
expr_stmt|;
name|handleCommentTags
argument_list|(
name|directory
argument_list|,
name|metadata
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MetadataException
name|e
parameter_list|)
block|{
comment|// ignore date parse errors and proceed with other tags
block|}
block|}
comment|/**          * EXIF may contain image description, although with undefined encoding.          * Use IPTC for other annotation fields, and XMP for unicode support.          */
specifier|public
name|void
name|handleCommentTags
parameter_list|(
name|Directory
name|directory
parameter_list|,
name|Metadata
name|metadata
parameter_list|)
block|{
if|if
condition|(
name|metadata
operator|.
name|get
argument_list|(
name|TikaCoreProperties
operator|.
name|DESCRIPTION
argument_list|)
operator|==
literal|null
operator|&&
name|directory
operator|.
name|containsTag
argument_list|(
name|ExifIFD0Directory
operator|.
name|TAG_IMAGE_DESCRIPTION
argument_list|)
condition|)
block|{
name|metadata
operator|.
name|set
argument_list|(
name|TikaCoreProperties
operator|.
name|DESCRIPTION
argument_list|,
name|directory
operator|.
name|getString
argument_list|(
name|ExifIFD0Directory
operator|.
name|TAG_IMAGE_DESCRIPTION
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**          * Maps common TIFF and EXIF tags onto the Tika          * TIFF image metadata namespace.          */
specifier|public
name|void
name|handlePhotoTags
parameter_list|(
name|Directory
name|directory
parameter_list|,
name|Metadata
name|metadata
parameter_list|)
block|{
if|if
condition|(
name|directory
operator|.
name|containsTag
argument_list|(
name|ExifSubIFDDirectory
operator|.
name|TAG_EXPOSURE_TIME
argument_list|)
condition|)
block|{
name|Object
name|exposure
init|=
name|directory
operator|.
name|getObject
argument_list|(
name|ExifSubIFDDirectory
operator|.
name|TAG_EXPOSURE_TIME
argument_list|)
decl_stmt|;
if|if
condition|(
name|exposure
operator|instanceof
name|Rational
condition|)
block|{
name|metadata
operator|.
name|set
argument_list|(
name|Metadata
operator|.
name|EXPOSURE_TIME
argument_list|,
operator|(
operator|(
name|Rational
operator|)
name|exposure
operator|)
operator|.
name|doubleValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|metadata
operator|.
name|set
argument_list|(
name|Metadata
operator|.
name|EXPOSURE_TIME
argument_list|,
name|directory
operator|.
name|getString
argument_list|(
name|ExifSubIFDDirectory
operator|.
name|TAG_EXPOSURE_TIME
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|directory
operator|.
name|containsTag
argument_list|(
name|ExifSubIFDDirectory
operator|.
name|TAG_FLASH
argument_list|)
condition|)
block|{
name|String
name|flash
init|=
name|directory
operator|.
name|getDescription
argument_list|(
name|ExifSubIFDDirectory
operator|.
name|TAG_FLASH
argument_list|)
decl_stmt|;
if|if
condition|(
name|flash
operator|.
name|contains
argument_list|(
literal|"Flash fired"
argument_list|)
condition|)
block|{
name|metadata
operator|.
name|set
argument_list|(
name|Metadata
operator|.
name|FLASH_FIRED
argument_list|,
name|Boolean
operator|.
name|TRUE
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|flash
operator|.
name|contains
argument_list|(
literal|"Flash did not fire"
argument_list|)
condition|)
block|{
name|metadata
operator|.
name|set
argument_list|(
name|Metadata
operator|.
name|FLASH_FIRED
argument_list|,
name|Boolean
operator|.
name|FALSE
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|metadata
operator|.
name|set
argument_list|(
name|Metadata
operator|.
name|FLASH_FIRED
argument_list|,
name|flash
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|directory
operator|.
name|containsTag
argument_list|(
name|ExifSubIFDDirectory
operator|.
name|TAG_FNUMBER
argument_list|)
condition|)
block|{
name|Object
name|fnumber
init|=
name|directory
operator|.
name|getObject
argument_list|(
name|ExifSubIFDDirectory
operator|.
name|TAG_FNUMBER
argument_list|)
decl_stmt|;
if|if
condition|(
name|fnumber
operator|instanceof
name|Rational
condition|)
block|{
name|metadata
operator|.
name|set
argument_list|(
name|Metadata
operator|.
name|F_NUMBER
argument_list|,
operator|(
operator|(
name|Rational
operator|)
name|fnumber
operator|)
operator|.
name|doubleValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|metadata
operator|.
name|set
argument_list|(
name|Metadata
operator|.
name|F_NUMBER
argument_list|,
name|directory
operator|.
name|getString
argument_list|(
name|ExifSubIFDDirectory
operator|.
name|TAG_FNUMBER
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|directory
operator|.
name|containsTag
argument_list|(
name|ExifSubIFDDirectory
operator|.
name|TAG_FOCAL_LENGTH
argument_list|)
condition|)
block|{
name|Object
name|length
init|=
name|directory
operator|.
name|getObject
argument_list|(
name|ExifSubIFDDirectory
operator|.
name|TAG_FOCAL_LENGTH
argument_list|)
decl_stmt|;
if|if
condition|(
name|length
operator|instanceof
name|Rational
condition|)
block|{
name|metadata
operator|.
name|set
argument_list|(
name|Metadata
operator|.
name|FOCAL_LENGTH
argument_list|,
operator|(
operator|(
name|Rational
operator|)
name|length
operator|)
operator|.
name|doubleValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|metadata
operator|.
name|set
argument_list|(
name|Metadata
operator|.
name|FOCAL_LENGTH
argument_list|,
name|directory
operator|.
name|getString
argument_list|(
name|ExifSubIFDDirectory
operator|.
name|TAG_FOCAL_LENGTH
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|directory
operator|.
name|containsTag
argument_list|(
name|ExifSubIFDDirectory
operator|.
name|TAG_ISO_EQUIVALENT
argument_list|)
condition|)
block|{
name|metadata
operator|.
name|set
argument_list|(
name|Metadata
operator|.
name|ISO_SPEED_RATINGS
argument_list|,
name|directory
operator|.
name|getString
argument_list|(
name|ExifSubIFDDirectory
operator|.
name|TAG_ISO_EQUIVALENT
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|directory
operator|.
name|containsTag
argument_list|(
name|ExifIFD0Directory
operator|.
name|TAG_MAKE
argument_list|)
condition|)
block|{
name|metadata
operator|.
name|set
argument_list|(
name|Metadata
operator|.
name|EQUIPMENT_MAKE
argument_list|,
name|directory
operator|.
name|getString
argument_list|(
name|ExifIFD0Directory
operator|.
name|TAG_MAKE
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|directory
operator|.
name|containsTag
argument_list|(
name|ExifIFD0Directory
operator|.
name|TAG_MODEL
argument_list|)
condition|)
block|{
name|metadata
operator|.
name|set
argument_list|(
name|Metadata
operator|.
name|EQUIPMENT_MODEL
argument_list|,
name|directory
operator|.
name|getString
argument_list|(
name|ExifIFD0Directory
operator|.
name|TAG_MODEL
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|directory
operator|.
name|containsTag
argument_list|(
name|ExifIFD0Directory
operator|.
name|TAG_ORIENTATION
argument_list|)
condition|)
block|{
name|Object
name|length
init|=
name|directory
operator|.
name|getObject
argument_list|(
name|ExifIFD0Directory
operator|.
name|TAG_ORIENTATION
argument_list|)
decl_stmt|;
if|if
condition|(
name|length
operator|instanceof
name|Integer
condition|)
block|{
name|metadata
operator|.
name|set
argument_list|(
name|Metadata
operator|.
name|ORIENTATION
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
operator|(
name|Integer
operator|)
name|length
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|metadata
operator|.
name|set
argument_list|(
name|Metadata
operator|.
name|ORIENTATION
argument_list|,
name|directory
operator|.
name|getString
argument_list|(
name|ExifIFD0Directory
operator|.
name|TAG_ORIENTATION
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|directory
operator|.
name|containsTag
argument_list|(
name|ExifIFD0Directory
operator|.
name|TAG_SOFTWARE
argument_list|)
condition|)
block|{
name|metadata
operator|.
name|set
argument_list|(
name|Metadata
operator|.
name|SOFTWARE
argument_list|,
name|directory
operator|.
name|getString
argument_list|(
name|ExifIFD0Directory
operator|.
name|TAG_SOFTWARE
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|directory
operator|.
name|containsTag
argument_list|(
name|ExifIFD0Directory
operator|.
name|TAG_X_RESOLUTION
argument_list|)
condition|)
block|{
name|Object
name|resolution
init|=
name|directory
operator|.
name|getObject
argument_list|(
name|ExifIFD0Directory
operator|.
name|TAG_X_RESOLUTION
argument_list|)
decl_stmt|;
if|if
condition|(
name|resolution
operator|instanceof
name|Rational
condition|)
block|{
name|metadata
operator|.
name|set
argument_list|(
name|Metadata
operator|.
name|RESOLUTION_HORIZONTAL
argument_list|,
operator|(
operator|(
name|Rational
operator|)
name|resolution
operator|)
operator|.
name|doubleValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|metadata
operator|.
name|set
argument_list|(
name|Metadata
operator|.
name|RESOLUTION_HORIZONTAL
argument_list|,
name|directory
operator|.
name|getString
argument_list|(
name|ExifIFD0Directory
operator|.
name|TAG_X_RESOLUTION
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|directory
operator|.
name|containsTag
argument_list|(
name|ExifIFD0Directory
operator|.
name|TAG_Y_RESOLUTION
argument_list|)
condition|)
block|{
name|Object
name|resolution
init|=
name|directory
operator|.
name|getObject
argument_list|(
name|ExifIFD0Directory
operator|.
name|TAG_Y_RESOLUTION
argument_list|)
decl_stmt|;
if|if
condition|(
name|resolution
operator|instanceof
name|Rational
condition|)
block|{
name|metadata
operator|.
name|set
argument_list|(
name|Metadata
operator|.
name|RESOLUTION_VERTICAL
argument_list|,
operator|(
operator|(
name|Rational
operator|)
name|resolution
operator|)
operator|.
name|doubleValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|metadata
operator|.
name|set
argument_list|(
name|Metadata
operator|.
name|RESOLUTION_VERTICAL
argument_list|,
name|directory
operator|.
name|getString
argument_list|(
name|ExifIFD0Directory
operator|.
name|TAG_Y_RESOLUTION
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|directory
operator|.
name|containsTag
argument_list|(
name|ExifIFD0Directory
operator|.
name|TAG_RESOLUTION_UNIT
argument_list|)
condition|)
block|{
name|metadata
operator|.
name|set
argument_list|(
name|Metadata
operator|.
name|RESOLUTION_UNIT
argument_list|,
name|directory
operator|.
name|getDescription
argument_list|(
name|ExifIFD0Directory
operator|.
name|TAG_RESOLUTION_UNIT
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|directory
operator|.
name|containsTag
argument_list|(
name|ExifThumbnailDirectory
operator|.
name|TAG_THUMBNAIL_IMAGE_WIDTH
argument_list|)
condition|)
block|{
name|metadata
operator|.
name|set
argument_list|(
name|Metadata
operator|.
name|IMAGE_WIDTH
argument_list|,
name|directory
operator|.
name|getDescription
argument_list|(
name|ExifThumbnailDirectory
operator|.
name|TAG_THUMBNAIL_IMAGE_WIDTH
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|directory
operator|.
name|containsTag
argument_list|(
name|ExifThumbnailDirectory
operator|.
name|TAG_THUMBNAIL_IMAGE_HEIGHT
argument_list|)
condition|)
block|{
name|metadata
operator|.
name|set
argument_list|(
name|Metadata
operator|.
name|IMAGE_LENGTH
argument_list|,
name|directory
operator|.
name|getDescription
argument_list|(
name|ExifThumbnailDirectory
operator|.
name|TAG_THUMBNAIL_IMAGE_HEIGHT
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**          * Maps exif dates to metadata fields.          */
specifier|public
name|void
name|handleDateTags
parameter_list|(
name|Directory
name|directory
parameter_list|,
name|Metadata
name|metadata
parameter_list|)
throws|throws
name|MetadataException
block|{
comment|// Date/Time Original overrides value from ExifDirectory.TAG_DATETIME
name|Date
name|original
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|directory
operator|.
name|containsTag
argument_list|(
name|ExifSubIFDDirectory
operator|.
name|TAG_DATETIME_ORIGINAL
argument_list|)
condition|)
block|{
name|original
operator|=
name|directory
operator|.
name|getDate
argument_list|(
name|ExifSubIFDDirectory
operator|.
name|TAG_DATETIME_ORIGINAL
argument_list|)
expr_stmt|;
comment|// Unless we have GPS time we don't know the time zone so date must be set
comment|// as ISO 8601 datetime without timezone suffix (no Z or +/-)
if|if
condition|(
name|original
operator|!=
literal|null
condition|)
block|{
name|String
name|datetimeNoTimeZone
init|=
name|DATE_UNSPECIFIED_TZ
operator|.
name|get
argument_list|()
operator|.
name|format
argument_list|(
name|original
argument_list|)
decl_stmt|;
comment|// Same time zone as Metadata Extractor uses
name|metadata
operator|.
name|set
argument_list|(
name|TikaCoreProperties
operator|.
name|CREATED
argument_list|,
name|datetimeNoTimeZone
argument_list|)
expr_stmt|;
name|metadata
operator|.
name|set
argument_list|(
name|Metadata
operator|.
name|ORIGINAL_DATE
argument_list|,
name|datetimeNoTimeZone
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|directory
operator|.
name|containsTag
argument_list|(
name|ExifIFD0Directory
operator|.
name|TAG_DATETIME
argument_list|)
condition|)
block|{
name|Date
name|datetime
init|=
name|directory
operator|.
name|getDate
argument_list|(
name|ExifIFD0Directory
operator|.
name|TAG_DATETIME
argument_list|)
decl_stmt|;
if|if
condition|(
name|datetime
operator|!=
literal|null
condition|)
block|{
name|String
name|datetimeNoTimeZone
init|=
name|DATE_UNSPECIFIED_TZ
operator|.
name|get
argument_list|()
operator|.
name|format
argument_list|(
name|datetime
argument_list|)
decl_stmt|;
name|metadata
operator|.
name|set
argument_list|(
name|TikaCoreProperties
operator|.
name|MODIFIED
argument_list|,
name|datetimeNoTimeZone
argument_list|)
expr_stmt|;
comment|// If Date/Time Original does not exist this might be creation date
if|if
condition|(
name|metadata
operator|.
name|get
argument_list|(
name|TikaCoreProperties
operator|.
name|CREATED
argument_list|)
operator|==
literal|null
condition|)
block|{
name|metadata
operator|.
name|set
argument_list|(
name|TikaCoreProperties
operator|.
name|CREATED
argument_list|,
name|datetimeNoTimeZone
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
comment|/**      * Reads image comments, originally TIKA-472.      * Metadata Extractor does not read XMP so we need to use the values from Iptc or EXIF      */
specifier|static
class|class
name|IptcHandler
implements|implements
name|DirectoryHandler
block|{
specifier|public
name|boolean
name|supports
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|Directory
argument_list|>
name|directoryType
parameter_list|)
block|{
return|return
name|directoryType
operator|==
name|IptcDirectory
operator|.
name|class
return|;
block|}
specifier|public
name|void
name|handle
parameter_list|(
name|Directory
name|directory
parameter_list|,
name|Metadata
name|metadata
parameter_list|)
throws|throws
name|MetadataException
block|{
if|if
condition|(
name|directory
operator|.
name|containsTag
argument_list|(
name|IptcDirectory
operator|.
name|TAG_KEYWORDS
argument_list|)
condition|)
block|{
name|String
index|[]
name|keywords
init|=
name|directory
operator|.
name|getStringArray
argument_list|(
name|IptcDirectory
operator|.
name|TAG_KEYWORDS
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|k
range|:
name|keywords
control|)
block|{
name|metadata
operator|.
name|add
argument_list|(
name|TikaCoreProperties
operator|.
name|KEYWORDS
argument_list|,
name|k
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|directory
operator|.
name|containsTag
argument_list|(
name|IptcDirectory
operator|.
name|TAG_HEADLINE
argument_list|)
condition|)
block|{
name|metadata
operator|.
name|set
argument_list|(
name|TikaCoreProperties
operator|.
name|TITLE
argument_list|,
name|directory
operator|.
name|getString
argument_list|(
name|IptcDirectory
operator|.
name|TAG_HEADLINE
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|directory
operator|.
name|containsTag
argument_list|(
name|IptcDirectory
operator|.
name|TAG_OBJECT_NAME
argument_list|)
condition|)
block|{
name|metadata
operator|.
name|set
argument_list|(
name|TikaCoreProperties
operator|.
name|TITLE
argument_list|,
name|directory
operator|.
name|getString
argument_list|(
name|IptcDirectory
operator|.
name|TAG_OBJECT_NAME
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|directory
operator|.
name|containsTag
argument_list|(
name|IptcDirectory
operator|.
name|TAG_BY_LINE
argument_list|)
condition|)
block|{
name|metadata
operator|.
name|set
argument_list|(
name|TikaCoreProperties
operator|.
name|CREATOR
argument_list|,
name|directory
operator|.
name|getString
argument_list|(
name|IptcDirectory
operator|.
name|TAG_BY_LINE
argument_list|)
argument_list|)
expr_stmt|;
name|metadata
operator|.
name|set
argument_list|(
name|IPTC
operator|.
name|CREATOR
argument_list|,
name|directory
operator|.
name|getString
argument_list|(
name|IptcDirectory
operator|.
name|TAG_BY_LINE
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|directory
operator|.
name|containsTag
argument_list|(
name|IptcDirectory
operator|.
name|TAG_CAPTION
argument_list|)
condition|)
block|{
name|metadata
operator|.
name|set
argument_list|(
name|TikaCoreProperties
operator|.
name|DESCRIPTION
argument_list|,
comment|// Looks like metadata extractor returns IPTC newlines as a single carriage return,
comment|// but the exiv2 command does not so we change to line feed here because that is less surprising to users
name|directory
operator|.
name|getString
argument_list|(
name|IptcDirectory
operator|.
name|TAG_CAPTION
argument_list|)
operator|.
name|replaceAll
argument_list|(
literal|"\r\n?"
argument_list|,
literal|"\n"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Maps EXIF Geo Tags onto the Tika Geo metadata namespace.      */
specifier|static
class|class
name|GeotagHandler
implements|implements
name|DirectoryHandler
block|{
specifier|public
name|boolean
name|supports
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|Directory
argument_list|>
name|directoryType
parameter_list|)
block|{
return|return
name|directoryType
operator|==
name|GpsDirectory
operator|.
name|class
return|;
block|}
specifier|public
name|void
name|handle
parameter_list|(
name|Directory
name|directory
parameter_list|,
name|Metadata
name|metadata
parameter_list|)
throws|throws
name|MetadataException
block|{
name|GeoLocation
name|geoLocation
init|=
operator|(
operator|(
name|GpsDirectory
operator|)
name|directory
operator|)
operator|.
name|getGeoLocation
argument_list|()
decl_stmt|;
if|if
condition|(
name|geoLocation
operator|!=
literal|null
condition|)
block|{
name|DecimalFormat
name|geoDecimalFormat
init|=
operator|new
name|DecimalFormat
argument_list|(
name|GEO_DECIMAL_FORMAT_STRING
argument_list|,
operator|new
name|DecimalFormatSymbols
argument_list|(
name|Locale
operator|.
name|ENGLISH
argument_list|)
argument_list|)
decl_stmt|;
name|metadata
operator|.
name|set
argument_list|(
name|TikaCoreProperties
operator|.
name|LATITUDE
argument_list|,
name|geoDecimalFormat
operator|.
name|format
argument_list|(
name|geoLocation
operator|.
name|getLatitude
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|metadata
operator|.
name|set
argument_list|(
name|TikaCoreProperties
operator|.
name|LONGITUDE
argument_list|,
name|geoDecimalFormat
operator|.
name|format
argument_list|(
name|geoLocation
operator|.
name|getLongitude
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

