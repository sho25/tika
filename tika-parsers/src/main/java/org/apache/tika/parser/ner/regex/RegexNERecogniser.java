begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|ner
operator|.
name|regex
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|ner
operator|.
name|NERecogniser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_comment
comment|/**  * This class offers an implementation of {@link NERecogniser} based on  * Regular Expressions.  *<p>  * The default configuration file {@value NER_REGEX_FILE} is used when no  * argument constructor is used to instantiate this class. The regex file is  * loaded via {@link Class#getResourceAsStream(String)}, so the file should be  * placed in the same package path as of this class.  *</p>  * The format of regex configuration as follows:  *<pre>  * ENTITY_TYPE1=REGEX1  * ENTITY_TYPE2=REGEX2  *</pre>  *  *<i>For example, to extract week day from text:</i>  *<pre>WEEK_DAY=(?i)((sun)|(mon)|(tues)|(thurs)|(fri)|((sat)(ur)?))(day)?  *</pre>  * @since Nov. 7, 2015  */
end_comment

begin_class
specifier|public
class|class
name|RegexNERecogniser
implements|implements
name|NERecogniser
block|{
specifier|public
specifier|static
specifier|final
name|String
name|NER_REGEX_FILE
init|=
literal|"ner-regex.txt"
decl_stmt|;
specifier|private
specifier|static
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|RegexNERecogniser
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|entityTypes
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Pattern
argument_list|>
name|patterns
decl_stmt|;
specifier|private
name|boolean
name|available
init|=
literal|false
decl_stmt|;
specifier|private
specifier|static
name|RegexNERecogniser
name|INSTANCE
decl_stmt|;
specifier|public
name|RegexNERecogniser
parameter_list|()
block|{
name|this
argument_list|(
name|RegexNERecogniser
operator|.
name|class
operator|.
name|getResourceAsStream
argument_list|(
name|NER_REGEX_FILE
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|RegexNERecogniser
parameter_list|(
name|InputStream
name|stream
parameter_list|)
block|{
try|try
block|{
name|patterns
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|lines
init|=
name|IOUtils
operator|.
name|readLines
argument_list|(
name|stream
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
decl_stmt|;
name|IOUtils
operator|.
name|closeQuietly
argument_list|(
name|stream
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|line
range|:
name|lines
control|)
block|{
name|line
operator|=
name|line
operator|.
name|trim
argument_list|()
expr_stmt|;
if|if
condition|(
name|line
operator|.
name|isEmpty
argument_list|()
operator|||
name|line
operator|.
name|startsWith
argument_list|(
literal|"#"
argument_list|)
condition|)
block|{
comment|//empty or comment
continue|continue;
comment|//skip
block|}
name|int
name|delim
init|=
name|line
operator|.
name|indexOf
argument_list|(
literal|'='
argument_list|)
decl_stmt|;
if|if
condition|(
name|delim
operator|<
literal|0
condition|)
block|{
comment|//delim not found
comment|//skip
name|LOG
operator|.
name|error
argument_list|(
literal|"Skipped : Invalid config : {} "
argument_list|,
name|line
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|String
name|type
init|=
name|line
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|delim
argument_list|)
operator|.
name|trim
argument_list|()
decl_stmt|;
name|String
name|patternStr
init|=
name|line
operator|.
name|substring
argument_list|(
name|delim
operator|+
literal|1
argument_list|,
name|line
operator|.
name|length
argument_list|()
argument_list|)
operator|.
name|trim
argument_list|()
decl_stmt|;
name|patterns
operator|.
name|put
argument_list|(
name|type
argument_list|,
name|Pattern
operator|.
name|compile
argument_list|(
name|patternStr
argument_list|)
argument_list|)
expr_stmt|;
name|entityTypes
operator|.
name|add
argument_list|(
name|type
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|available
operator|=
operator|!
name|entityTypes
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
block|}
specifier|public
specifier|synchronized
specifier|static
name|RegexNERecogniser
name|getInstance
parameter_list|()
block|{
if|if
condition|(
name|INSTANCE
operator|==
literal|null
condition|)
block|{
name|INSTANCE
operator|=
operator|new
name|RegexNERecogniser
argument_list|()
expr_stmt|;
block|}
return|return
name|INSTANCE
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isAvailable
parameter_list|()
block|{
return|return
name|available
return|;
block|}
annotation|@
name|Override
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|getEntityTypes
parameter_list|()
block|{
return|return
name|entityTypes
return|;
block|}
comment|/**      * finds matching sub groups in text      * @param text text containing interesting sub strings      * @param pattern pattern to find sub strings      * @return set of sub strings if any found, or null if none found      */
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|findMatches
parameter_list|(
name|String
name|text
parameter_list|,
name|Pattern
name|pattern
parameter_list|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|results
init|=
literal|null
decl_stmt|;
name|Matcher
name|matcher
init|=
name|pattern
operator|.
name|matcher
argument_list|(
name|text
argument_list|)
decl_stmt|;
if|if
condition|(
name|matcher
operator|.
name|find
argument_list|()
condition|)
block|{
name|results
operator|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
expr_stmt|;
name|results
operator|.
name|add
argument_list|(
name|matcher
operator|.
name|group
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
while|while
condition|(
name|matcher
operator|.
name|find
argument_list|()
condition|)
block|{
name|results
operator|.
name|add
argument_list|(
name|matcher
operator|.
name|group
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|results
return|;
block|}
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|recognise
parameter_list|(
name|String
name|text
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|result
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Pattern
argument_list|>
name|entry
range|:
name|patterns
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|names
init|=
name|findMatches
argument_list|(
name|text
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|names
operator|!=
literal|null
condition|)
block|{
name|result
operator|.
name|put
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|names
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
block|}
end_class

end_unit

