begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|geo
operator|.
name|topic
operator|.
name|gazetteer
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|Charsets
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|HttpResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|client
operator|.
name|HttpClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|client
operator|.
name|methods
operator|.
name|HttpGet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|client
operator|.
name|utils
operator|.
name|URIBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|impl
operator|.
name|client
operator|.
name|DefaultHttpClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|geo
operator|.
name|topic
operator|.
name|GeoParserConfig
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|reflect
operator|.
name|TypeToken
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gson
operator|.
name|Gson
import|;
end_import

begin_class
specifier|public
class|class
name|GeoGazetteerClient
block|{
specifier|private
specifier|static
specifier|final
name|String
name|SEARCH_API
init|=
literal|"/api/search"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|SEARCH_PARAM
init|=
literal|"s"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|PING
init|=
literal|"/api/ping"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|Logger
operator|.
name|getLogger
argument_list|(
name|GeoGazetteerClient
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
name|String
name|url
decl_stmt|;
comment|/** 	 * Pass URL on which lucene-geo-gazetteer is available - eg. http://localhost:8765/api/search 	 * @param url 	 */
specifier|public
name|GeoGazetteerClient
parameter_list|(
name|String
name|url
parameter_list|)
block|{
name|this
operator|.
name|url
operator|=
name|url
expr_stmt|;
block|}
specifier|public
name|GeoGazetteerClient
parameter_list|(
name|GeoParserConfig
name|config
parameter_list|)
block|{
name|this
operator|.
name|url
operator|=
name|config
operator|.
name|getGazetteerRestEndpoint
argument_list|()
expr_stmt|;
block|}
comment|/** 	 * Calls API of lucene-geo-gazetteer to search location name in gazetteer. 	 * @param locations List of locations to be searched in gazetteer 	 * @return Map of input location strings to gazetteer locations 	 */
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|Location
argument_list|>
argument_list|>
name|getLocations
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|locations
parameter_list|)
block|{
name|HttpClient
name|httpClient
init|=
operator|new
name|DefaultHttpClient
argument_list|()
decl_stmt|;
try|try
block|{
name|URIBuilder
name|uri
init|=
operator|new
name|URIBuilder
argument_list|(
name|url
operator|+
name|SEARCH_API
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|loc
range|:
name|locations
control|)
block|{
name|uri
operator|.
name|addParameter
argument_list|(
name|SEARCH_PARAM
argument_list|,
name|loc
argument_list|)
expr_stmt|;
block|}
name|HttpGet
name|httpGet
init|=
operator|new
name|HttpGet
argument_list|(
name|uri
operator|.
name|build
argument_list|()
argument_list|)
decl_stmt|;
name|HttpResponse
name|resp
init|=
name|httpClient
operator|.
name|execute
argument_list|(
name|httpGet
argument_list|)
decl_stmt|;
name|String
name|respJson
init|=
name|IOUtils
operator|.
name|toString
argument_list|(
name|resp
operator|.
name|getEntity
argument_list|()
operator|.
name|getContent
argument_list|()
argument_list|,
name|Charsets
operator|.
name|UTF_8
argument_list|)
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"serial"
argument_list|)
name|Type
name|typeDef
init|=
operator|new
name|TypeToken
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|Location
argument_list|>
argument_list|>
argument_list|>
argument_list|()
block|{}
operator|.
name|getType
argument_list|()
decl_stmt|;
return|return
operator|new
name|Gson
argument_list|()
operator|.
name|fromJson
argument_list|(
name|respJson
argument_list|,
name|typeDef
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|severe
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
comment|/** 	 * Ping lucene-geo-gazetteer API 	 * @return true if API is available else returns false 	 */
specifier|public
name|boolean
name|checkAvail
parameter_list|()
block|{
name|HttpClient
name|httpClient
init|=
operator|new
name|DefaultHttpClient
argument_list|()
decl_stmt|;
try|try
block|{
name|HttpGet
name|httpGet
init|=
operator|new
name|HttpGet
argument_list|(
name|url
operator|+
name|PING
argument_list|)
decl_stmt|;
name|HttpResponse
name|resp
init|=
name|httpClient
operator|.
name|execute
argument_list|(
name|httpGet
argument_list|)
decl_stmt|;
if|if
condition|(
name|resp
operator|.
name|getStatusLine
argument_list|()
operator|.
name|getStatusCode
argument_list|()
operator|==
literal|200
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|severe
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
block|}
end_class

end_unit

