begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|jdbc
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|DriverManager
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|exception
operator|.
name|TikaException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|extractor
operator|.
name|EmbeddedDocumentExtractor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|extractor
operator|.
name|ParsingEmbeddedDocumentExtractor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|io
operator|.
name|IOExceptionWithCause
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|metadata
operator|.
name|Database
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|metadata
operator|.
name|Metadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|mime
operator|.
name|MediaType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|AbstractParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|ParseContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|sax
operator|.
name|XHTMLContentHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|ContentHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_comment
comment|/**  * Abstract class that handles iterating through tables within a database.  */
end_comment

begin_class
specifier|abstract
class|class
name|AbstractDBParser
extends|extends
name|AbstractParser
block|{
specifier|private
specifier|final
specifier|static
name|byte
index|[]
name|EMPTY_BYTE_ARR
init|=
operator|new
name|byte
index|[
literal|0
index|]
decl_stmt|;
specifier|private
name|Connection
name|connection
decl_stmt|;
specifier|protected
specifier|static
name|EmbeddedDocumentExtractor
name|getEmbeddedDocumentExtractor
parameter_list|(
name|ParseContext
name|context
parameter_list|)
block|{
return|return
name|context
operator|.
name|get
argument_list|(
name|EmbeddedDocumentExtractor
operator|.
name|class
argument_list|,
operator|new
name|ParsingEmbeddedDocumentExtractor
argument_list|(
name|context
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Set
argument_list|<
name|MediaType
argument_list|>
name|getSupportedTypes
parameter_list|(
name|ParseContext
name|context
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|parse
parameter_list|(
name|InputStream
name|stream
parameter_list|,
name|ContentHandler
name|handler
parameter_list|,
name|Metadata
name|metadata
parameter_list|,
name|ParseContext
name|context
parameter_list|)
throws|throws
name|IOException
throws|,
name|SAXException
throws|,
name|TikaException
block|{
name|connection
operator|=
name|getConnection
argument_list|(
name|stream
argument_list|,
name|metadata
argument_list|,
name|context
argument_list|)
expr_stmt|;
name|XHTMLContentHandler
name|xHandler
init|=
literal|null
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|tableNames
init|=
literal|null
decl_stmt|;
try|try
block|{
name|tableNames
operator|=
name|getTableNames
argument_list|(
name|connection
argument_list|,
name|metadata
argument_list|,
name|context
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOExceptionWithCause
argument_list|(
name|e
argument_list|)
throw|;
block|}
for|for
control|(
name|String
name|tableName
range|:
name|tableNames
control|)
block|{
comment|//add table names to parent metadata
name|metadata
operator|.
name|add
argument_list|(
name|Database
operator|.
name|TABLE_NAME
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
block|}
name|xHandler
operator|=
operator|new
name|XHTMLContentHandler
argument_list|(
name|handler
argument_list|,
name|metadata
argument_list|)
expr_stmt|;
name|xHandler
operator|.
name|startDocument
argument_list|()
expr_stmt|;
try|try
block|{
for|for
control|(
name|String
name|tableName
range|:
name|tableNames
control|)
block|{
name|JDBCTableReader
name|tableReader
init|=
name|getTableReader
argument_list|(
name|connection
argument_list|,
name|tableName
argument_list|,
name|context
argument_list|)
decl_stmt|;
name|xHandler
operator|.
name|startElement
argument_list|(
literal|"table"
argument_list|,
literal|"name"
argument_list|,
name|tableReader
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
name|xHandler
operator|.
name|startElement
argument_list|(
literal|"thead"
argument_list|)
expr_stmt|;
name|xHandler
operator|.
name|startElement
argument_list|(
literal|"tr"
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|header
range|:
name|tableReader
operator|.
name|getHeaders
argument_list|()
control|)
block|{
name|xHandler
operator|.
name|startElement
argument_list|(
literal|"th"
argument_list|)
expr_stmt|;
name|xHandler
operator|.
name|characters
argument_list|(
name|header
argument_list|)
expr_stmt|;
name|xHandler
operator|.
name|endElement
argument_list|(
literal|"th"
argument_list|)
expr_stmt|;
block|}
name|xHandler
operator|.
name|endElement
argument_list|(
literal|"tr"
argument_list|)
expr_stmt|;
name|xHandler
operator|.
name|endElement
argument_list|(
literal|"thead"
argument_list|)
expr_stmt|;
name|xHandler
operator|.
name|startElement
argument_list|(
literal|"tbody"
argument_list|)
expr_stmt|;
while|while
condition|(
name|tableReader
operator|.
name|nextRow
argument_list|(
name|xHandler
argument_list|,
name|context
argument_list|)
condition|)
block|{
comment|//no-op
block|}
name|xHandler
operator|.
name|endElement
argument_list|(
literal|"tbody"
argument_list|)
expr_stmt|;
name|xHandler
operator|.
name|endElement
argument_list|(
literal|"table"
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|xHandler
operator|!=
literal|null
condition|)
block|{
name|xHandler
operator|.
name|endDocument
argument_list|()
expr_stmt|;
block|}
try|try
block|{
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
comment|//swallow
block|}
block|}
block|}
comment|/**      * Override this for any special handling of closing the connection.      *      * @throws java.sql.SQLException      * @throws java.io.IOException      */
specifier|protected
name|void
name|close
parameter_list|()
throws|throws
name|SQLException
throws|,
name|IOException
block|{
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/**      * Override this for special configuration of the connection, such as limiting      * the number of rows to be held in memory.      *      * @param stream   stream to use      * @param metadata metadata that could be used in parameterizing the connection      * @param context  parsecontext that could be used in parameterizing the connection      * @return connection      * @throws java.io.IOException      * @throws org.apache.tika.exception.TikaException      */
specifier|protected
name|Connection
name|getConnection
parameter_list|(
name|InputStream
name|stream
parameter_list|,
name|Metadata
name|metadata
parameter_list|,
name|ParseContext
name|context
parameter_list|)
throws|throws
name|IOException
throws|,
name|TikaException
block|{
name|String
name|connectionString
init|=
name|getConnectionString
argument_list|(
name|stream
argument_list|,
name|metadata
argument_list|,
name|context
argument_list|)
decl_stmt|;
name|Connection
name|connection
init|=
literal|null
decl_stmt|;
try|try
block|{
name|Class
operator|.
name|forName
argument_list|(
name|getJDBCClassName
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|TikaException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
try|try
block|{
name|connection
operator|=
name|DriverManager
operator|.
name|getConnection
argument_list|(
name|connectionString
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOExceptionWithCause
argument_list|(
name|e
argument_list|)
throw|;
block|}
return|return
name|connection
return|;
block|}
comment|/**      * Implement for db specific connection information, e.g. "jdbc:sqlite:/docs/mydb.db"      *<p/>      * Include any optimization settings, user name, password, etc.      *<p/>      *      * @param stream       stream for processing      * @param metadata     metadata might be useful in determining connection info      * @param parseContext context to use to help create connectionString      * @return connection string to be used by {@link #getConnection}.      * @throws java.io.IOException      */
specifier|abstract
specifier|protected
name|String
name|getConnectionString
parameter_list|(
name|InputStream
name|stream
parameter_list|,
name|Metadata
name|metadata
parameter_list|,
name|ParseContext
name|parseContext
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**      * JDBC class name, e.g. org.sqlite.JDBC      *      * @return jdbc class name      */
specifier|abstract
specifier|protected
name|String
name|getJDBCClassName
parameter_list|()
function_decl|;
comment|/**      * Returns the names of the tables to process      *      * @param connection Connection to use to make the sql call(s) to get the names of the tables      * @param metadata   Metadata to use (potentially) in decision about which tables to extract      * @param context    ParseContext to use (potentially) in decision about which tables to extract      * @return      * @throws java.sql.SQLException      */
specifier|abstract
specifier|protected
name|List
argument_list|<
name|String
argument_list|>
name|getTableNames
parameter_list|(
name|Connection
name|connection
parameter_list|,
name|Metadata
name|metadata
parameter_list|,
name|ParseContext
name|context
parameter_list|)
throws|throws
name|SQLException
function_decl|;
comment|/**      * Given a connection and a table name, return the JDBCTableReader for this db.      *      * @param connection      * @param tableName      * @return      */
specifier|abstract
specifier|protected
name|JDBCTableReader
name|getTableReader
parameter_list|(
name|Connection
name|connection
parameter_list|,
name|String
name|tableName
parameter_list|,
name|ParseContext
name|parseContext
parameter_list|)
function_decl|;
block|}
end_class

end_unit

