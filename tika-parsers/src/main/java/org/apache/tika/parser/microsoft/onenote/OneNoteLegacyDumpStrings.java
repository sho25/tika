begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|microsoft
operator|.
name|onenote
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|exception
operator|.
name|TikaException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|sax
operator|.
name|XHTMLContentHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
import|;
end_import

begin_comment
comment|/**  * OneNote versions before OneNote 2010 do not have a published OpenSpec document, and the older formats are drastically  * incompatible with the later OpenSpecs.  * Therefore, we resort to scraping out useful ASCII and UTF16LE strings using a similar algorithm used by the GNU "strings"  * program.  *  * This is only needed for OneNote versions prior to 2010.  */
end_comment

begin_class
class|class
name|OneNoteLegacyDumpStrings
block|{
comment|// TODO - parameterize this
specifier|public
specifier|static
name|int
name|MIN_STRING_LENGTH
init|=
literal|8
decl_stmt|;
comment|// TODO - parameterize this
specifier|public
specifier|static
name|float
name|ACCEPTABLE_ALPHA_TO_OTHER_CHAR_RATIO
init|=
literal|0.6f
decl_stmt|;
name|OneNoteDirectFileResource
name|oneNoteDirectFileResource
decl_stmt|;
name|XHTMLContentHandler
name|xhtml
decl_stmt|;
specifier|public
name|OneNoteLegacyDumpStrings
parameter_list|(
name|OneNoteDirectFileResource
name|oneNoteDirectFileResource
parameter_list|,
name|XHTMLContentHandler
name|xhtml
parameter_list|)
block|{
name|this
operator|.
name|oneNoteDirectFileResource
operator|=
name|oneNoteDirectFileResource
expr_stmt|;
name|this
operator|.
name|xhtml
operator|=
name|xhtml
expr_stmt|;
block|}
comment|/**      * Dump all "useful" Ascii and UTF16LE strings found in the file to the XHTMLContentHandler.      * @throws TikaException      * @throws SAXException      */
specifier|public
name|void
name|dump
parameter_list|()
throws|throws
name|TikaException
throws|,
name|SAXException
block|{
name|dumpAscii
argument_list|()
expr_stmt|;
name|dumpUtf16LE
argument_list|()
expr_stmt|;
block|}
comment|/**      * Based on GNU "strings" implementation. Pulls out ascii text segments and writes them to the XHTMLContentHandler.      */
specifier|private
name|void
name|dumpAscii
parameter_list|()
throws|throws
name|SAXException
throws|,
name|TikaException
block|{
try|try
block|{
name|oneNoteDirectFileResource
operator|.
name|position
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|ByteArrayOutputStream
name|os
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|b
init|=
name|oneNoteDirectFileResource
operator|.
name|read
argument_list|()
init|;
name|b
operator|!=
operator|-
literal|1
condition|;
name|b
operator|=
name|oneNoteDirectFileResource
operator|.
name|read
argument_list|()
control|)
block|{
if|if
condition|(
name|b
operator|>=
literal|0x20
operator|&&
name|b
operator|<
literal|0x7F
condition|)
block|{
name|os
operator|.
name|write
argument_list|(
name|b
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|os
operator|.
name|size
argument_list|()
operator|>=
name|MIN_STRING_LENGTH
condition|)
block|{
name|writeIfUseful
argument_list|(
name|os
argument_list|)
expr_stmt|;
block|}
name|os
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|os
operator|.
name|size
argument_list|()
operator|>=
name|MIN_STRING_LENGTH
condition|)
block|{
name|writeIfUseful
argument_list|(
name|os
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|TikaException
argument_list|(
literal|"Could not extract text from legacy OneNote document"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**      * Based on GNU "strings" implementation. Pulls out UTF16 LE text segments and writes them to the XHTMLContentHandler.      */
specifier|private
name|void
name|dumpUtf16LE
parameter_list|()
throws|throws
name|SAXException
throws|,
name|TikaException
block|{
try|try
block|{
name|oneNoteDirectFileResource
operator|.
name|position
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|ByteArrayOutputStream
name|os
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|long
name|sz
init|=
name|oneNoteDirectFileResource
operator|.
name|size
argument_list|()
decl_stmt|;
for|for
control|(
name|long
name|i
init|=
literal|0
init|;
name|i
operator|<
name|sz
operator|-
literal|1
condition|;
operator|++
name|i
control|)
block|{
name|oneNoteDirectFileResource
operator|.
name|position
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|int
name|c1
init|=
name|oneNoteDirectFileResource
operator|.
name|read
argument_list|()
decl_stmt|;
name|int
name|c2
init|=
name|oneNoteDirectFileResource
operator|.
name|read
argument_list|()
decl_stmt|;
if|if
condition|(
name|c1
operator|==
literal|0x00
operator|&&
name|c2
operator|>=
literal|0x20
operator|&&
name|c2
operator|<
literal|0x7F
condition|)
block|{
operator|++
name|i
expr_stmt|;
name|os
operator|.
name|write
argument_list|(
name|c2
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|os
operator|.
name|size
argument_list|()
operator|>=
name|MIN_STRING_LENGTH
condition|)
block|{
name|writeIfUseful
argument_list|(
name|os
argument_list|)
expr_stmt|;
block|}
name|os
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|os
operator|.
name|size
argument_list|()
operator|>=
name|MIN_STRING_LENGTH
condition|)
block|{
name|writeIfUseful
argument_list|(
name|os
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|TikaException
argument_list|(
literal|"Could not extract text from legacy OneNote document"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**      * Writes a buffer of output characters if the (num alpha chars in the buffer) / (number of chars in the buffer)>      * ACCEPTABLE_ALPHA_TO_OTHER_CHAR_RATIO.      * @param os Byte array output stream containing the buffer.      */
specifier|private
name|void
name|writeIfUseful
parameter_list|(
name|ByteArrayOutputStream
name|os
parameter_list|)
throws|throws
name|SAXException
block|{
name|String
name|str
init|=
operator|new
name|String
argument_list|(
name|os
operator|.
name|toByteArray
argument_list|()
argument_list|,
name|StandardCharsets
operator|.
name|US_ASCII
argument_list|)
decl_stmt|;
name|String
index|[]
name|spl
init|=
name|str
operator|.
name|split
argument_list|(
literal|" "
argument_list|)
decl_stmt|;
if|if
condition|(
name|spl
operator|.
name|length
operator|>
literal|1
condition|)
block|{
name|int
name|numAlpha
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|str
operator|.
name|length
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|Character
operator|.
name|isAlphabetic
argument_list|(
name|str
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
argument_list|)
operator|||
name|Character
operator|.
name|isWhitespace
argument_list|(
name|i
argument_list|)
condition|)
block|{
operator|++
name|numAlpha
expr_stmt|;
block|}
block|}
name|float
name|ratioAlphaToOtherChars
init|=
operator|(
name|float
operator|)
name|numAlpha
operator|/
operator|(
name|float
operator|)
name|str
operator|.
name|length
argument_list|()
decl_stmt|;
if|if
condition|(
name|ratioAlphaToOtherChars
operator|>
name|ACCEPTABLE_ALPHA_TO_OTHER_CHAR_RATIO
condition|)
block|{
name|xhtml
operator|.
name|characters
argument_list|(
name|str
argument_list|)
expr_stmt|;
name|xhtml
operator|.
name|characters
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

