begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  Licensed to the Apache Software Foundation (ASF) under one or more  *  contributor license agreements.  See the NOTICE file distributed with  *  this work for additional information regarding copyright ownership.  *  The ASF licenses this file to You under the Apache License, Version 2.0  *  (the "License"); you may not use this file except in compliance with  *  the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  *  */
end_comment

begin_comment
comment|/*  * This package is based on the work done by Timothy Gerard Endres  * (time@ice.com) to whom the Ant project is very grateful for his great code.  *  * This package has since been copied from Apache Ant to Apache Tika.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|pkg
operator|.
name|tar
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FilterInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_comment
comment|/**  * The TarInputStream reads a UNIX tar archive as an InputStream.  * methods are provided to position at each successive entry in  * the archive, and the read each entry as a normal input stream  * using read().  *  */
end_comment

begin_class
specifier|public
class|class
name|TarInputStream
extends|extends
name|FilterInputStream
block|{
specifier|private
specifier|static
specifier|final
name|int
name|SMALL_BUFFER_SIZE
init|=
literal|256
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|BUFFER_SIZE
init|=
literal|8
operator|*
literal|1024
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|LARGE_BUFFER_SIZE
init|=
literal|32
operator|*
literal|1024
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|BYTE_MASK
init|=
literal|0xFF
decl_stmt|;
comment|// CheckStyle:VisibilityModifier OFF - bc
specifier|protected
name|boolean
name|debug
decl_stmt|;
specifier|protected
name|boolean
name|hasHitEOF
decl_stmt|;
specifier|protected
name|long
name|entrySize
decl_stmt|;
specifier|protected
name|long
name|entryOffset
decl_stmt|;
specifier|protected
name|byte
index|[]
name|readBuf
decl_stmt|;
specifier|protected
name|TarBuffer
name|buffer
decl_stmt|;
specifier|protected
name|TarEntry
name|currEntry
decl_stmt|;
comment|/**      * This contents of this array is not used at all in this class,      * it is only here to avoid repreated object creation during calls      * to the no-arg read method.      */
specifier|protected
name|byte
index|[]
name|oneBuf
decl_stmt|;
comment|// CheckStyle:VisibilityModifier ON
comment|/**      * Constructor for TarInputStream.      * @param is the input stream to use      */
specifier|public
name|TarInputStream
parameter_list|(
name|InputStream
name|is
parameter_list|)
block|{
name|this
argument_list|(
name|is
argument_list|,
name|TarBuffer
operator|.
name|DEFAULT_BLKSIZE
argument_list|,
name|TarBuffer
operator|.
name|DEFAULT_RCDSIZE
argument_list|)
expr_stmt|;
block|}
comment|/**      * Constructor for TarInputStream.      * @param is the input stream to use      * @param blockSize the block size to use      */
specifier|public
name|TarInputStream
parameter_list|(
name|InputStream
name|is
parameter_list|,
name|int
name|blockSize
parameter_list|)
block|{
name|this
argument_list|(
name|is
argument_list|,
name|blockSize
argument_list|,
name|TarBuffer
operator|.
name|DEFAULT_RCDSIZE
argument_list|)
expr_stmt|;
block|}
comment|/**      * Constructor for TarInputStream.      * @param is the input stream to use      * @param blockSize the block size to use      * @param recordSize the record size to use      */
specifier|public
name|TarInputStream
parameter_list|(
name|InputStream
name|is
parameter_list|,
name|int
name|blockSize
parameter_list|,
name|int
name|recordSize
parameter_list|)
block|{
name|super
argument_list|(
name|is
argument_list|)
expr_stmt|;
name|this
operator|.
name|buffer
operator|=
operator|new
name|TarBuffer
argument_list|(
name|is
argument_list|,
name|blockSize
argument_list|,
name|recordSize
argument_list|)
expr_stmt|;
name|this
operator|.
name|readBuf
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|oneBuf
operator|=
operator|new
name|byte
index|[
literal|1
index|]
expr_stmt|;
name|this
operator|.
name|debug
operator|=
literal|false
expr_stmt|;
name|this
operator|.
name|hasHitEOF
operator|=
literal|false
expr_stmt|;
block|}
comment|/**      * Sets the debugging flag.      *      * @param debug True to turn on debugging.      */
specifier|public
name|void
name|setDebug
parameter_list|(
name|boolean
name|debug
parameter_list|)
block|{
name|this
operator|.
name|debug
operator|=
name|debug
expr_stmt|;
name|buffer
operator|.
name|setDebug
argument_list|(
name|debug
argument_list|)
expr_stmt|;
block|}
comment|/**      * Closes this stream. Calls the TarBuffer's close() method.      * @throws IOException on error      */
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|buffer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/**      * Get the record size being used by this stream's TarBuffer.      *      * @return The TarBuffer record size.      */
specifier|public
name|int
name|getRecordSize
parameter_list|()
block|{
return|return
name|buffer
operator|.
name|getRecordSize
argument_list|()
return|;
block|}
comment|/**      * Get the available data that can be read from the current      * entry in the archive. This does not indicate how much data      * is left in the entire archive, only in the current entry.      * This value is determined from the entry's size header field      * and the amount of data already read from the current entry.      * Integer.MAX_VALUE is returen in case more than Integer.MAX_VALUE      * bytes are left in the current entry in the archive.      *      * @return The number of available bytes for the current entry.      * @throws IOException for signature      */
specifier|public
name|int
name|available
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|entrySize
operator|-
name|entryOffset
operator|>
name|Integer
operator|.
name|MAX_VALUE
condition|)
block|{
return|return
name|Integer
operator|.
name|MAX_VALUE
return|;
block|}
return|return
call|(
name|int
call|)
argument_list|(
name|entrySize
operator|-
name|entryOffset
argument_list|)
return|;
block|}
comment|/**      * Skip bytes in the input buffer. This skips bytes in the      * current entry's data, not the entire archive, and will      * stop at the end of the current entry's data if the number      * to skip extends beyond that point.      *      * @param numToSkip The number of bytes to skip.      * @return the number actually skipped      * @throws IOException on error      */
specifier|public
name|long
name|skip
parameter_list|(
name|long
name|numToSkip
parameter_list|)
throws|throws
name|IOException
block|{
comment|// REVIEW
comment|// This is horribly inefficient, but it ensures that we
comment|// properly skip over bytes via the TarBuffer...
comment|//
name|byte
index|[]
name|skipBuf
init|=
operator|new
name|byte
index|[
name|BUFFER_SIZE
index|]
decl_stmt|;
name|long
name|skip
init|=
name|numToSkip
decl_stmt|;
while|while
condition|(
name|skip
operator|>
literal|0
condition|)
block|{
name|int
name|realSkip
init|=
call|(
name|int
call|)
argument_list|(
name|skip
operator|>
name|skipBuf
operator|.
name|length
condition|?
name|skipBuf
operator|.
name|length
else|:
name|skip
argument_list|)
decl_stmt|;
name|int
name|numRead
init|=
name|read
argument_list|(
name|skipBuf
argument_list|,
literal|0
argument_list|,
name|realSkip
argument_list|)
decl_stmt|;
if|if
condition|(
name|numRead
operator|==
operator|-
literal|1
condition|)
block|{
break|break;
block|}
name|skip
operator|-=
name|numRead
expr_stmt|;
block|}
return|return
operator|(
name|numToSkip
operator|-
name|skip
operator|)
return|;
block|}
comment|/**      * Since we do not support marking just yet, we return false.      *      * @return False.      */
specifier|public
name|boolean
name|markSupported
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
comment|/**      * Since we do not support marking just yet, we do nothing.      *      * @param markLimit The limit to mark.      */
specifier|public
name|void
name|mark
parameter_list|(
name|int
name|markLimit
parameter_list|)
block|{     }
comment|/**      * Since we do not support marking just yet, we do nothing.      */
specifier|public
name|void
name|reset
parameter_list|()
block|{     }
comment|/**      * Get the next entry in this tar archive. This will skip      * over any remaining data in the current entry, if there      * is one, and place the input stream at the header of the      * next entry, and read the header and instantiate a new      * TarEntry from the header bytes and return that entry.      * If there are no more entries in the archive, null will      * be returned to indicate that the end of the archive has      * been reached.      *      * @return The next TarEntry in the archive, or null.      * @throws IOException on error      */
specifier|public
name|TarEntry
name|getNextEntry
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|hasHitEOF
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
name|currEntry
operator|!=
literal|null
condition|)
block|{
name|long
name|numToSkip
init|=
name|entrySize
operator|-
name|entryOffset
decl_stmt|;
if|if
condition|(
name|debug
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"TarInputStream: SKIP currENTRY '"
operator|+
name|currEntry
operator|.
name|getName
argument_list|()
operator|+
literal|"' SZ "
operator|+
name|entrySize
operator|+
literal|" OFF "
operator|+
name|entryOffset
operator|+
literal|"  skipping "
operator|+
name|numToSkip
operator|+
literal|" bytes"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|numToSkip
operator|>
literal|0
condition|)
block|{
name|skip
argument_list|(
name|numToSkip
argument_list|)
expr_stmt|;
block|}
name|readBuf
operator|=
literal|null
expr_stmt|;
block|}
name|byte
index|[]
name|headerBuf
init|=
name|buffer
operator|.
name|readRecord
argument_list|()
decl_stmt|;
if|if
condition|(
name|headerBuf
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|debug
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"READ NULL RECORD"
argument_list|)
expr_stmt|;
block|}
name|hasHitEOF
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|buffer
operator|.
name|isEOFRecord
argument_list|(
name|headerBuf
argument_list|)
condition|)
block|{
if|if
condition|(
name|debug
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"READ EOF RECORD"
argument_list|)
expr_stmt|;
block|}
name|hasHitEOF
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|hasHitEOF
condition|)
block|{
name|currEntry
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
name|currEntry
operator|=
operator|new
name|TarEntry
argument_list|(
name|headerBuf
argument_list|)
expr_stmt|;
if|if
condition|(
name|debug
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"TarInputStream: SET CURRENTRY '"
operator|+
name|currEntry
operator|.
name|getName
argument_list|()
operator|+
literal|"' size = "
operator|+
name|currEntry
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|entryOffset
operator|=
literal|0
expr_stmt|;
name|entrySize
operator|=
name|currEntry
operator|.
name|getSize
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|currEntry
operator|!=
literal|null
operator|&&
name|currEntry
operator|.
name|isGNULongNameEntry
argument_list|()
condition|)
block|{
comment|// read in the name
name|StringBuffer
name|longName
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|byte
index|[]
name|buf
init|=
operator|new
name|byte
index|[
name|SMALL_BUFFER_SIZE
index|]
decl_stmt|;
name|int
name|length
init|=
literal|0
decl_stmt|;
while|while
condition|(
operator|(
name|length
operator|=
name|read
argument_list|(
name|buf
argument_list|)
operator|)
operator|>=
literal|0
condition|)
block|{
name|longName
operator|.
name|append
argument_list|(
operator|new
name|String
argument_list|(
name|buf
argument_list|,
literal|0
argument_list|,
name|length
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|getNextEntry
argument_list|()
expr_stmt|;
if|if
condition|(
name|currEntry
operator|==
literal|null
condition|)
block|{
comment|// Bugzilla: 40334
comment|// Malformed tar file - long entry name not followed by entry
return|return
literal|null
return|;
block|}
comment|// remove trailing null terminator
if|if
condition|(
name|longName
operator|.
name|length
argument_list|()
operator|>
literal|0
operator|&&
name|longName
operator|.
name|charAt
argument_list|(
name|longName
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
operator|==
literal|0
condition|)
block|{
name|longName
operator|.
name|deleteCharAt
argument_list|(
name|longName
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
name|currEntry
operator|.
name|setName
argument_list|(
name|longName
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|currEntry
return|;
block|}
comment|/**      * Reads a byte from the current tar archive entry.      *      * This method simply calls read( byte[], int, int ).      *      * @return The byte read, or -1 at EOF.      * @throws IOException on error      */
specifier|public
name|int
name|read
parameter_list|()
throws|throws
name|IOException
block|{
name|int
name|num
init|=
name|read
argument_list|(
name|oneBuf
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
return|return
name|num
operator|==
operator|-
literal|1
condition|?
operator|-
literal|1
else|:
operator|(
operator|(
name|int
operator|)
name|oneBuf
index|[
literal|0
index|]
operator|)
operator|&
name|BYTE_MASK
return|;
block|}
comment|/**      * Reads bytes from the current tar archive entry.      *      * This method is aware of the boundaries of the current      * entry in the archive and will deal with them as if they      * were this stream's start and EOF.      *      * @param buf The buffer into which to place bytes read.      * @param offset The offset at which to place bytes read.      * @param numToRead The number of bytes to read.      * @return The number of bytes read, or -1 at EOF.      * @throws IOException on error      */
specifier|public
name|int
name|read
parameter_list|(
name|byte
index|[]
name|buf
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|numToRead
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|totalRead
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|entryOffset
operator|>=
name|entrySize
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
if|if
condition|(
operator|(
name|numToRead
operator|+
name|entryOffset
operator|)
operator|>
name|entrySize
condition|)
block|{
name|numToRead
operator|=
call|(
name|int
call|)
argument_list|(
name|entrySize
operator|-
name|entryOffset
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|readBuf
operator|!=
literal|null
condition|)
block|{
name|int
name|sz
init|=
operator|(
name|numToRead
operator|>
name|readBuf
operator|.
name|length
operator|)
condition|?
name|readBuf
operator|.
name|length
else|:
name|numToRead
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|readBuf
argument_list|,
literal|0
argument_list|,
name|buf
argument_list|,
name|offset
argument_list|,
name|sz
argument_list|)
expr_stmt|;
if|if
condition|(
name|sz
operator|>=
name|readBuf
operator|.
name|length
condition|)
block|{
name|readBuf
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
name|int
name|newLen
init|=
name|readBuf
operator|.
name|length
operator|-
name|sz
decl_stmt|;
name|byte
index|[]
name|newBuf
init|=
operator|new
name|byte
index|[
name|newLen
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|readBuf
argument_list|,
name|sz
argument_list|,
name|newBuf
argument_list|,
literal|0
argument_list|,
name|newLen
argument_list|)
expr_stmt|;
name|readBuf
operator|=
name|newBuf
expr_stmt|;
block|}
name|totalRead
operator|+=
name|sz
expr_stmt|;
name|numToRead
operator|-=
name|sz
expr_stmt|;
name|offset
operator|+=
name|sz
expr_stmt|;
block|}
while|while
condition|(
name|numToRead
operator|>
literal|0
condition|)
block|{
name|byte
index|[]
name|rec
init|=
name|buffer
operator|.
name|readRecord
argument_list|()
decl_stmt|;
if|if
condition|(
name|rec
operator|==
literal|null
condition|)
block|{
comment|// Unexpected EOF!
throw|throw
operator|new
name|IOException
argument_list|(
literal|"unexpected EOF with "
operator|+
name|numToRead
operator|+
literal|" bytes unread"
argument_list|)
throw|;
block|}
name|int
name|sz
init|=
name|numToRead
decl_stmt|;
name|int
name|recLen
init|=
name|rec
operator|.
name|length
decl_stmt|;
if|if
condition|(
name|recLen
operator|>
name|sz
condition|)
block|{
name|System
operator|.
name|arraycopy
argument_list|(
name|rec
argument_list|,
literal|0
argument_list|,
name|buf
argument_list|,
name|offset
argument_list|,
name|sz
argument_list|)
expr_stmt|;
name|readBuf
operator|=
operator|new
name|byte
index|[
name|recLen
operator|-
name|sz
index|]
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|rec
argument_list|,
name|sz
argument_list|,
name|readBuf
argument_list|,
literal|0
argument_list|,
name|recLen
operator|-
name|sz
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sz
operator|=
name|recLen
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|rec
argument_list|,
literal|0
argument_list|,
name|buf
argument_list|,
name|offset
argument_list|,
name|recLen
argument_list|)
expr_stmt|;
block|}
name|totalRead
operator|+=
name|sz
expr_stmt|;
name|numToRead
operator|-=
name|sz
expr_stmt|;
name|offset
operator|+=
name|sz
expr_stmt|;
block|}
name|entryOffset
operator|+=
name|totalRead
expr_stmt|;
return|return
name|totalRead
return|;
block|}
comment|/**      * Copies the contents of the current tar archive entry directly into      * an output stream.      *      * @param out The OutputStream into which to write the entry's data.      * @throws IOException on error      */
specifier|public
name|void
name|copyEntryContents
parameter_list|(
name|OutputStream
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|byte
index|[]
name|buf
init|=
operator|new
name|byte
index|[
name|LARGE_BUFFER_SIZE
index|]
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|int
name|numRead
init|=
name|read
argument_list|(
name|buf
argument_list|,
literal|0
argument_list|,
name|buf
operator|.
name|length
argument_list|)
decl_stmt|;
if|if
condition|(
name|numRead
operator|==
operator|-
literal|1
condition|)
block|{
break|break;
block|}
name|out
operator|.
name|write
argument_list|(
name|buf
argument_list|,
literal|0
argument_list|,
name|numRead
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

