begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|microsoft
operator|.
name|ooxml
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|ooxml
operator|.
name|POIXMLProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|ooxml
operator|.
name|extractor
operator|.
name|POIXMLTextExtractor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|openxml4j
operator|.
name|opc
operator|.
name|internal
operator|.
name|PackagePropertiesPart
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|openxml4j
operator|.
name|util
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|xssf
operator|.
name|extractor
operator|.
name|XSSFEventBasedExcelExtractor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|exception
operator|.
name|TikaException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|metadata
operator|.
name|Metadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|metadata
operator|.
name|Office
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|metadata
operator|.
name|OfficeOpenXMLCore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|metadata
operator|.
name|OfficeOpenXMLExtended
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|metadata
operator|.
name|PagedText
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|metadata
operator|.
name|Property
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|metadata
operator|.
name|TikaCoreProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|microsoft
operator|.
name|SummaryExtractor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|microsoft
operator|.
name|ooxml
operator|.
name|xps
operator|.
name|XPSTextExtractor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|microsoft
operator|.
name|ooxml
operator|.
name|xslf
operator|.
name|XSLFEventBasedPowerPointExtractor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|microsoft
operator|.
name|ooxml
operator|.
name|xwpf
operator|.
name|XWPFEventBasedWordExtractor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xmlbeans
operator|.
name|impl
operator|.
name|values
operator|.
name|XmlValueOutOfRangeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|openxmlformats
operator|.
name|schemas
operator|.
name|officeDocument
operator|.
name|x2006
operator|.
name|customProperties
operator|.
name|CTProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|openxmlformats
operator|.
name|schemas
operator|.
name|officeDocument
operator|.
name|x2006
operator|.
name|extendedProperties
operator|.
name|CTProperties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigDecimal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_comment
comment|/**  * OOXML metadata extractor.  *<p/>  * Currently POI doesn't support metadata extraction for OOXML.  *  * @see OOXMLExtractor#getMetadataExtractor()  */
end_comment

begin_class
specifier|public
class|class
name|MetadataExtractor
block|{
specifier|private
specifier|final
name|POIXMLTextExtractor
name|extractor
decl_stmt|;
specifier|public
name|MetadataExtractor
parameter_list|(
name|POIXMLTextExtractor
name|extractor
parameter_list|)
block|{
name|this
operator|.
name|extractor
operator|=
name|extractor
expr_stmt|;
block|}
specifier|public
name|void
name|extract
parameter_list|(
name|Metadata
name|metadata
parameter_list|)
throws|throws
name|TikaException
block|{
if|if
condition|(
name|extractor
operator|.
name|getDocument
argument_list|()
operator|!=
literal|null
operator|||
operator|(
operator|(
name|extractor
operator|instanceof
name|XSSFEventBasedExcelExtractor
operator|||
name|extractor
operator|instanceof
name|XWPFEventBasedWordExtractor
operator|||
name|extractor
operator|instanceof
name|XSLFEventBasedPowerPointExtractor
operator|||
name|extractor
operator|instanceof
name|XPSTextExtractor
operator|)
operator|&&
name|extractor
operator|.
name|getPackage
argument_list|()
operator|!=
literal|null
operator|)
condition|)
block|{
name|extractMetadata
argument_list|(
name|extractor
operator|.
name|getCoreProperties
argument_list|()
argument_list|,
name|metadata
argument_list|)
expr_stmt|;
name|extractMetadata
argument_list|(
name|extractor
operator|.
name|getExtendedProperties
argument_list|()
argument_list|,
name|metadata
argument_list|)
expr_stmt|;
name|extractMetadata
argument_list|(
name|extractor
operator|.
name|getCustomProperties
argument_list|()
argument_list|,
name|metadata
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|extractMetadata
parameter_list|(
name|POIXMLProperties
operator|.
name|CoreProperties
name|properties
parameter_list|,
name|Metadata
name|metadata
parameter_list|)
block|{
name|PackagePropertiesPart
name|propsHolder
init|=
name|properties
operator|.
name|getUnderlyingProperties
argument_list|()
decl_stmt|;
name|setProperty
argument_list|(
name|metadata
argument_list|,
name|OfficeOpenXMLCore
operator|.
name|CATEGORY
argument_list|,
name|propsHolder
operator|.
name|getCategoryProperty
argument_list|()
argument_list|)
expr_stmt|;
name|setProperty
argument_list|(
name|metadata
argument_list|,
name|OfficeOpenXMLCore
operator|.
name|CONTENT_STATUS
argument_list|,
name|propsHolder
operator|.
name|getContentStatusProperty
argument_list|()
argument_list|)
expr_stmt|;
name|setProperty
argument_list|(
name|metadata
argument_list|,
name|TikaCoreProperties
operator|.
name|CREATED
argument_list|,
name|propsHolder
operator|.
name|getCreatedProperty
argument_list|()
argument_list|)
expr_stmt|;
name|addMultiProperty
argument_list|(
name|metadata
argument_list|,
name|TikaCoreProperties
operator|.
name|CREATOR
argument_list|,
name|propsHolder
operator|.
name|getCreatorProperty
argument_list|()
argument_list|)
expr_stmt|;
name|setProperty
argument_list|(
name|metadata
argument_list|,
name|TikaCoreProperties
operator|.
name|DESCRIPTION
argument_list|,
name|propsHolder
operator|.
name|getDescriptionProperty
argument_list|()
argument_list|)
expr_stmt|;
name|setProperty
argument_list|(
name|metadata
argument_list|,
name|TikaCoreProperties
operator|.
name|IDENTIFIER
argument_list|,
name|propsHolder
operator|.
name|getIdentifierProperty
argument_list|()
argument_list|)
expr_stmt|;
name|addProperty
argument_list|(
name|metadata
argument_list|,
name|OfficeOpenXMLCore
operator|.
name|SUBJECT
argument_list|,
name|propsHolder
operator|.
name|getSubjectProperty
argument_list|()
argument_list|)
expr_stmt|;
name|addProperty
argument_list|(
name|metadata
argument_list|,
name|Office
operator|.
name|KEYWORDS
argument_list|,
name|propsHolder
operator|.
name|getKeywordsProperty
argument_list|()
argument_list|)
expr_stmt|;
name|setProperty
argument_list|(
name|metadata
argument_list|,
name|TikaCoreProperties
operator|.
name|LANGUAGE
argument_list|,
name|propsHolder
operator|.
name|getLanguageProperty
argument_list|()
argument_list|)
expr_stmt|;
name|setProperty
argument_list|(
name|metadata
argument_list|,
name|TikaCoreProperties
operator|.
name|MODIFIER
argument_list|,
name|propsHolder
operator|.
name|getLastModifiedByProperty
argument_list|()
argument_list|)
expr_stmt|;
name|setProperty
argument_list|(
name|metadata
argument_list|,
name|TikaCoreProperties
operator|.
name|PRINT_DATE
argument_list|,
name|propsHolder
operator|.
name|getLastPrintedProperty
argument_list|()
argument_list|)
expr_stmt|;
name|setProperty
argument_list|(
name|metadata
argument_list|,
name|TikaCoreProperties
operator|.
name|MODIFIED
argument_list|,
name|propsHolder
operator|.
name|getModifiedProperty
argument_list|()
argument_list|)
expr_stmt|;
name|setProperty
argument_list|(
name|metadata
argument_list|,
name|OfficeOpenXMLCore
operator|.
name|REVISION
argument_list|,
name|propsHolder
operator|.
name|getRevisionProperty
argument_list|()
argument_list|)
expr_stmt|;
name|setProperty
argument_list|(
name|metadata
argument_list|,
name|TikaCoreProperties
operator|.
name|TITLE
argument_list|,
name|propsHolder
operator|.
name|getTitleProperty
argument_list|()
argument_list|)
expr_stmt|;
name|setProperty
argument_list|(
name|metadata
argument_list|,
name|OfficeOpenXMLCore
operator|.
name|VERSION
argument_list|,
name|propsHolder
operator|.
name|getVersionProperty
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|extractMetadata
parameter_list|(
name|POIXMLProperties
operator|.
name|ExtendedProperties
name|properties
parameter_list|,
name|Metadata
name|metadata
parameter_list|)
block|{
name|CTProperties
name|propsHolder
init|=
name|properties
operator|.
name|getUnderlyingProperties
argument_list|()
decl_stmt|;
comment|//TIKA-2055, some ooxml files can include unsigned int/long values
comment|//which cause this exception.
comment|//For now, catch it and record as '0' because
comment|//Word converts to '0' on save.
name|int
name|totalTime
init|=
literal|0
decl_stmt|;
try|try
block|{
name|totalTime
operator|=
name|propsHolder
operator|.
name|getTotalTime
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XmlValueOutOfRangeException
name|e
parameter_list|)
block|{
comment|//swallow for now
block|}
name|setProperty
argument_list|(
name|metadata
argument_list|,
name|OfficeOpenXMLExtended
operator|.
name|APPLICATION
argument_list|,
name|propsHolder
operator|.
name|getApplication
argument_list|()
argument_list|)
expr_stmt|;
name|setProperty
argument_list|(
name|metadata
argument_list|,
name|OfficeOpenXMLExtended
operator|.
name|APP_VERSION
argument_list|,
name|propsHolder
operator|.
name|getAppVersion
argument_list|()
argument_list|)
expr_stmt|;
name|setProperty
argument_list|(
name|metadata
argument_list|,
name|TikaCoreProperties
operator|.
name|PUBLISHER
argument_list|,
name|propsHolder
operator|.
name|getCompany
argument_list|()
argument_list|)
expr_stmt|;
name|setProperty
argument_list|(
name|metadata
argument_list|,
name|OfficeOpenXMLExtended
operator|.
name|COMPANY
argument_list|,
name|propsHolder
operator|.
name|getCompany
argument_list|()
argument_list|)
expr_stmt|;
name|SummaryExtractor
operator|.
name|addMulti
argument_list|(
name|metadata
argument_list|,
name|OfficeOpenXMLExtended
operator|.
name|MANAGER
argument_list|,
name|propsHolder
operator|.
name|getManager
argument_list|()
argument_list|)
expr_stmt|;
name|setProperty
argument_list|(
name|metadata
argument_list|,
name|OfficeOpenXMLExtended
operator|.
name|NOTES
argument_list|,
name|propsHolder
operator|.
name|getNotes
argument_list|()
argument_list|)
expr_stmt|;
name|setProperty
argument_list|(
name|metadata
argument_list|,
name|OfficeOpenXMLExtended
operator|.
name|PRESENTATION_FORMAT
argument_list|,
name|propsHolder
operator|.
name|getPresentationFormat
argument_list|()
argument_list|)
expr_stmt|;
name|setProperty
argument_list|(
name|metadata
argument_list|,
name|OfficeOpenXMLExtended
operator|.
name|TEMPLATE
argument_list|,
name|propsHolder
operator|.
name|getTemplate
argument_list|()
argument_list|)
expr_stmt|;
name|setProperty
argument_list|(
name|metadata
argument_list|,
name|OfficeOpenXMLExtended
operator|.
name|TOTAL_TIME
argument_list|,
name|totalTime
argument_list|)
expr_stmt|;
if|if
condition|(
name|propsHolder
operator|.
name|getPages
argument_list|()
operator|>
literal|0
condition|)
block|{
name|metadata
operator|.
name|set
argument_list|(
name|PagedText
operator|.
name|N_PAGES
argument_list|,
name|propsHolder
operator|.
name|getPages
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|propsHolder
operator|.
name|getSlides
argument_list|()
operator|>
literal|0
condition|)
block|{
name|metadata
operator|.
name|set
argument_list|(
name|PagedText
operator|.
name|N_PAGES
argument_list|,
name|propsHolder
operator|.
name|getSlides
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Process the document statistics
name|setProperty
argument_list|(
name|metadata
argument_list|,
name|Office
operator|.
name|PAGE_COUNT
argument_list|,
name|propsHolder
operator|.
name|getPages
argument_list|()
argument_list|)
expr_stmt|;
name|setProperty
argument_list|(
name|metadata
argument_list|,
name|Office
operator|.
name|SLIDE_COUNT
argument_list|,
name|propsHolder
operator|.
name|getSlides
argument_list|()
argument_list|)
expr_stmt|;
name|setProperty
argument_list|(
name|metadata
argument_list|,
name|Office
operator|.
name|PARAGRAPH_COUNT
argument_list|,
name|propsHolder
operator|.
name|getParagraphs
argument_list|()
argument_list|)
expr_stmt|;
name|setProperty
argument_list|(
name|metadata
argument_list|,
name|Office
operator|.
name|LINE_COUNT
argument_list|,
name|propsHolder
operator|.
name|getLines
argument_list|()
argument_list|)
expr_stmt|;
name|setProperty
argument_list|(
name|metadata
argument_list|,
name|Office
operator|.
name|WORD_COUNT
argument_list|,
name|propsHolder
operator|.
name|getWords
argument_list|()
argument_list|)
expr_stmt|;
name|setProperty
argument_list|(
name|metadata
argument_list|,
name|Office
operator|.
name|CHARACTER_COUNT
argument_list|,
name|propsHolder
operator|.
name|getCharacters
argument_list|()
argument_list|)
expr_stmt|;
name|setProperty
argument_list|(
name|metadata
argument_list|,
name|Office
operator|.
name|CHARACTER_COUNT_WITH_SPACES
argument_list|,
name|propsHolder
operator|.
name|getCharactersWithSpaces
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|extractMetadata
parameter_list|(
name|POIXMLProperties
operator|.
name|CustomProperties
name|properties
parameter_list|,
name|Metadata
name|metadata
parameter_list|)
block|{
name|org
operator|.
name|openxmlformats
operator|.
name|schemas
operator|.
name|officeDocument
operator|.
name|x2006
operator|.
name|customProperties
operator|.
name|CTProperties
name|props
init|=
name|properties
operator|.
name|getUnderlyingProperties
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|props
operator|.
name|sizeOfPropertyArray
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|CTProperty
name|property
init|=
name|props
operator|.
name|getPropertyArray
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|String
name|val
init|=
literal|null
decl_stmt|;
name|Date
name|date
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|property
operator|.
name|isSetLpwstr
argument_list|()
condition|)
block|{
name|val
operator|=
name|property
operator|.
name|getLpwstr
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|property
operator|.
name|isSetLpstr
argument_list|()
condition|)
block|{
name|val
operator|=
name|property
operator|.
name|getLpstr
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|property
operator|.
name|isSetDate
argument_list|()
condition|)
block|{
name|date
operator|=
name|property
operator|.
name|getDate
argument_list|()
operator|.
name|getTime
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|property
operator|.
name|isSetFiletime
argument_list|()
condition|)
block|{
name|date
operator|=
name|property
operator|.
name|getFiletime
argument_list|()
operator|.
name|getTime
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|property
operator|.
name|isSetBool
argument_list|()
condition|)
block|{
name|val
operator|=
name|Boolean
operator|.
name|toString
argument_list|(
name|property
operator|.
name|getBool
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Integers
elseif|else
if|if
condition|(
name|property
operator|.
name|isSetI1
argument_list|()
condition|)
block|{
name|val
operator|=
name|Integer
operator|.
name|toString
argument_list|(
name|property
operator|.
name|getI1
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|property
operator|.
name|isSetI2
argument_list|()
condition|)
block|{
name|val
operator|=
name|Integer
operator|.
name|toString
argument_list|(
name|property
operator|.
name|getI2
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|property
operator|.
name|isSetI4
argument_list|()
condition|)
block|{
name|val
operator|=
name|Integer
operator|.
name|toString
argument_list|(
name|property
operator|.
name|getI4
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|property
operator|.
name|isSetI8
argument_list|()
condition|)
block|{
name|val
operator|=
name|Long
operator|.
name|toString
argument_list|(
name|property
operator|.
name|getI8
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|property
operator|.
name|isSetInt
argument_list|()
condition|)
block|{
name|val
operator|=
name|Integer
operator|.
name|toString
argument_list|(
name|property
operator|.
name|getInt
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Unsigned Integers
elseif|else
if|if
condition|(
name|property
operator|.
name|isSetUi1
argument_list|()
condition|)
block|{
name|val
operator|=
name|Integer
operator|.
name|toString
argument_list|(
name|property
operator|.
name|getUi1
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|property
operator|.
name|isSetUi2
argument_list|()
condition|)
block|{
name|val
operator|=
name|Integer
operator|.
name|toString
argument_list|(
name|property
operator|.
name|getUi2
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|property
operator|.
name|isSetUi4
argument_list|()
condition|)
block|{
name|val
operator|=
name|Long
operator|.
name|toString
argument_list|(
name|property
operator|.
name|getUi4
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|property
operator|.
name|isSetUi8
argument_list|()
condition|)
block|{
name|val
operator|=
name|property
operator|.
name|getUi8
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|property
operator|.
name|isSetUint
argument_list|()
condition|)
block|{
name|val
operator|=
name|Long
operator|.
name|toString
argument_list|(
name|property
operator|.
name|getUint
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Reals
elseif|else
if|if
condition|(
name|property
operator|.
name|isSetR4
argument_list|()
condition|)
block|{
name|val
operator|=
name|Float
operator|.
name|toString
argument_list|(
name|property
operator|.
name|getR4
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|property
operator|.
name|isSetR8
argument_list|()
condition|)
block|{
name|val
operator|=
name|Double
operator|.
name|toString
argument_list|(
name|property
operator|.
name|getR8
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|property
operator|.
name|isSetDecimal
argument_list|()
condition|)
block|{
name|BigDecimal
name|d
init|=
name|property
operator|.
name|getDecimal
argument_list|()
decl_stmt|;
if|if
condition|(
name|d
operator|==
literal|null
condition|)
block|{
name|val
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
name|val
operator|=
name|d
operator|.
name|toPlainString
argument_list|()
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|property
operator|.
name|isSetArray
argument_list|()
condition|)
block|{
comment|// TODO Fetch the array values and output
block|}
elseif|else
if|if
condition|(
name|property
operator|.
name|isSetVector
argument_list|()
condition|)
block|{
comment|// TODO Fetch the vector values and output
block|}
elseif|else
if|if
condition|(
name|property
operator|.
name|isSetBlob
argument_list|()
operator|||
name|property
operator|.
name|isSetOblob
argument_list|()
condition|)
block|{
comment|// TODO Decode, if possible
block|}
elseif|else
if|if
condition|(
name|property
operator|.
name|isSetStream
argument_list|()
operator|||
name|property
operator|.
name|isSetOstream
argument_list|()
operator|||
name|property
operator|.
name|isSetVstream
argument_list|()
condition|)
block|{
comment|// TODO Decode, if possible
block|}
elseif|else
if|if
condition|(
name|property
operator|.
name|isSetStorage
argument_list|()
operator|||
name|property
operator|.
name|isSetOstorage
argument_list|()
condition|)
block|{
comment|// TODO Decode, if possible
block|}
else|else
block|{
comment|// This type isn't currently supported yet, skip the property
block|}
name|String
name|propName
init|=
literal|"custom:"
operator|+
name|property
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|date
operator|!=
literal|null
condition|)
block|{
name|Property
name|tikaProp
init|=
name|Property
operator|.
name|externalDate
argument_list|(
name|propName
argument_list|)
decl_stmt|;
name|metadata
operator|.
name|set
argument_list|(
name|tikaProp
argument_list|,
name|date
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|val
operator|!=
literal|null
condition|)
block|{
name|metadata
operator|.
name|set
argument_list|(
name|propName
argument_list|,
name|val
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
parameter_list|<
name|T
parameter_list|>
name|void
name|setProperty
parameter_list|(
name|Metadata
name|metadata
parameter_list|,
name|Property
name|property
parameter_list|,
name|Optional
argument_list|<
name|T
argument_list|>
name|optionalValue
parameter_list|)
block|{
if|if
condition|(
operator|!
name|optionalValue
operator|.
name|isPresent
argument_list|()
condition|)
block|{
return|return;
block|}
name|T
name|value
init|=
name|optionalValue
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|value
operator|instanceof
name|Date
condition|)
block|{
name|metadata
operator|.
name|set
argument_list|(
name|property
argument_list|,
operator|(
name|Date
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|value
operator|instanceof
name|String
condition|)
block|{
name|metadata
operator|.
name|set
argument_list|(
name|property
argument_list|,
operator|(
name|String
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|value
operator|instanceof
name|Integer
condition|)
block|{
name|metadata
operator|.
name|set
argument_list|(
name|property
argument_list|,
operator|(
name|Integer
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|value
operator|instanceof
name|Double
condition|)
block|{
name|metadata
operator|.
name|set
argument_list|(
name|property
argument_list|,
operator|(
name|Double
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
parameter_list|<
name|T
parameter_list|>
name|void
name|addProperty
parameter_list|(
name|Metadata
name|metadata
parameter_list|,
name|Property
name|property
parameter_list|,
name|Optional
argument_list|<
name|T
argument_list|>
name|optionalValue
parameter_list|)
block|{
if|if
condition|(
operator|!
name|optionalValue
operator|.
name|isPresent
argument_list|()
condition|)
block|{
return|return;
block|}
name|T
name|value
init|=
name|optionalValue
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|value
operator|instanceof
name|String
condition|)
block|{
name|metadata
operator|.
name|add
argument_list|(
name|property
argument_list|,
operator|(
name|String
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Can't add property of class: "
operator|+
name|optionalValue
operator|.
name|getClass
argument_list|()
argument_list|)
throw|;
block|}
block|}
specifier|private
name|void
name|setProperty
parameter_list|(
name|Metadata
name|metadata
parameter_list|,
name|String
name|name
parameter_list|,
name|Nullable
argument_list|<
name|?
argument_list|>
name|value
parameter_list|)
block|{
if|if
condition|(
name|value
operator|.
name|getValue
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|setProperty
argument_list|(
name|metadata
argument_list|,
name|name
argument_list|,
name|value
operator|.
name|getValue
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|setProperty
parameter_list|(
name|Metadata
name|metadata
parameter_list|,
name|Property
name|property
parameter_list|,
name|String
name|value
parameter_list|)
block|{
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
name|metadata
operator|.
name|set
argument_list|(
name|property
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|setProperty
parameter_list|(
name|Metadata
name|metadata
parameter_list|,
name|String
name|name
parameter_list|,
name|String
name|value
parameter_list|)
block|{
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
name|metadata
operator|.
name|set
argument_list|(
name|name
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|setProperty
parameter_list|(
name|Metadata
name|metadata
parameter_list|,
name|Property
name|property
parameter_list|,
name|int
name|value
parameter_list|)
block|{
if|if
condition|(
name|value
operator|>
literal|0
condition|)
block|{
name|metadata
operator|.
name|set
argument_list|(
name|property
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|setProperty
parameter_list|(
name|Metadata
name|metadata
parameter_list|,
name|String
name|name
parameter_list|,
name|int
name|value
parameter_list|)
block|{
if|if
condition|(
name|value
operator|>
literal|0
condition|)
block|{
name|metadata
operator|.
name|set
argument_list|(
name|name
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|addMultiProperty
parameter_list|(
name|Metadata
name|metadata
parameter_list|,
name|Property
name|property
parameter_list|,
name|Optional
argument_list|<
name|String
argument_list|>
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
operator|.
name|isPresent
argument_list|()
condition|)
block|{
return|return;
block|}
name|SummaryExtractor
operator|.
name|addMulti
argument_list|(
name|metadata
argument_list|,
name|property
argument_list|,
name|value
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

