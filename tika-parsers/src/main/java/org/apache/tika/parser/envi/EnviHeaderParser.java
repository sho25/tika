begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  *   */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|envi
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|Charset
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|input
operator|.
name|CloseShieldInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|config
operator|.
name|TikaConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|detect
operator|.
name|AutoDetectReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|detect
operator|.
name|EncodingDetector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|exception
operator|.
name|TikaException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|metadata
operator|.
name|Metadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|mime
operator|.
name|MediaType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|AbstractEncodingDetectorParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|ParseContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|sax
operator|.
name|XHTMLContentHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|ContentHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_class
specifier|public
class|class
name|EnviHeaderParser
extends|extends
name|AbstractEncodingDetectorParser
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
operator|-
literal|1479368523072408091L
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|EnviHeaderParser
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|ENVI_MIME_TYPE
init|=
literal|"application/envi.hdr"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Set
argument_list|<
name|MediaType
argument_list|>
name|SUPPORTED_TYPES
init|=
name|Collections
operator|.
name|singleton
argument_list|(
name|MediaType
operator|.
name|application
argument_list|(
literal|"envi.hdr"
argument_list|)
argument_list|)
decl_stmt|;
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|multiLineFieldValueList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
specifier|transient
name|XHTMLContentHandler
name|xhtml
decl_stmt|;
specifier|public
name|EnviHeaderParser
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
specifier|public
name|EnviHeaderParser
parameter_list|(
name|EncodingDetector
name|encodingDetector
parameter_list|)
block|{
name|super
argument_list|(
name|encodingDetector
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Set
argument_list|<
name|MediaType
argument_list|>
name|getSupportedTypes
parameter_list|(
name|ParseContext
name|context
parameter_list|)
block|{
return|return
name|SUPPORTED_TYPES
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|parse
parameter_list|(
name|InputStream
name|stream
parameter_list|,
name|ContentHandler
name|handler
parameter_list|,
name|Metadata
name|metadata
parameter_list|,
name|ParseContext
name|context
parameter_list|)
throws|throws
name|IOException
throws|,
name|SAXException
throws|,
name|TikaException
block|{
comment|// Only outputting the MIME type as metadata
name|metadata
operator|.
name|set
argument_list|(
name|Metadata
operator|.
name|CONTENT_TYPE
argument_list|,
name|ENVI_MIME_TYPE
argument_list|)
expr_stmt|;
comment|// The following code was taken from the TXTParser
comment|// Automatically detect the character encoding
name|TikaConfig
name|tikaConfig
init|=
name|context
operator|.
name|get
argument_list|(
name|TikaConfig
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|tikaConfig
operator|==
literal|null
condition|)
block|{
name|tikaConfig
operator|=
name|TikaConfig
operator|.
name|getDefaultConfig
argument_list|()
expr_stmt|;
block|}
try|try
init|(
name|AutoDetectReader
name|reader
init|=
operator|new
name|AutoDetectReader
argument_list|(
operator|new
name|CloseShieldInputStream
argument_list|(
name|stream
argument_list|)
argument_list|,
name|metadata
argument_list|,
name|getEncodingDetector
argument_list|(
name|context
argument_list|)
argument_list|)
init|)
block|{
name|Charset
name|charset
init|=
name|reader
operator|.
name|getCharset
argument_list|()
decl_stmt|;
comment|// deprecated, see TIKA-431
name|metadata
operator|.
name|set
argument_list|(
name|Metadata
operator|.
name|CONTENT_ENCODING
argument_list|,
name|charset
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|xhtml
operator|=
operator|new
name|XHTMLContentHandler
argument_list|(
name|handler
argument_list|,
name|metadata
argument_list|)
expr_stmt|;
name|xhtml
operator|.
name|startDocument
argument_list|()
expr_stmt|;
name|readLines
argument_list|(
name|reader
argument_list|,
name|metadata
argument_list|)
expr_stmt|;
name|xhtml
operator|.
name|endDocument
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
decl||
name|TikaException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error reading input data stream."
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|readLines
parameter_list|(
name|AutoDetectReader
name|reader
parameter_list|,
name|Metadata
name|metadata
parameter_list|)
throws|throws
name|IOException
throws|,
name|SAXException
block|{
comment|// text contents of the xhtml
name|String
name|line
decl_stmt|;
while|while
condition|(
operator|(
name|line
operator|=
name|reader
operator|.
name|readLine
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|line
operator|.
name|contains
argument_list|(
literal|"{"
argument_list|)
operator|&&
operator|!
name|line
operator|.
name|endsWith
argument_list|(
literal|"}"
argument_list|)
operator|||
name|line
operator|.
name|startsWith
argument_list|(
literal|" "
argument_list|)
condition|)
block|{
name|String
name|completeField
init|=
name|parseMultiLineFieldValue
argument_list|(
name|line
argument_list|)
decl_stmt|;
if|if
condition|(
name|completeField
operator|!=
literal|null
condition|)
block|{
name|writeParagraphAndSetMetadata
argument_list|(
name|completeField
argument_list|,
name|metadata
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|writeParagraphAndSetMetadata
argument_list|(
name|line
argument_list|,
name|metadata
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/*      * Write a line to the XHTMLContentHandler and populate the key, value into the Metadata      */
specifier|private
name|void
name|writeParagraphAndSetMetadata
parameter_list|(
name|String
name|line
parameter_list|,
name|Metadata
name|metadata
parameter_list|)
throws|throws
name|SAXException
block|{
if|if
condition|(
name|line
operator|.
name|length
argument_list|()
operator|<
literal|150
condition|)
block|{
name|String
index|[]
name|keyValue
init|=
name|line
operator|.
name|split
argument_list|(
literal|"="
argument_list|)
decl_stmt|;
if|if
condition|(
name|keyValue
operator|.
name|length
operator|!=
literal|1
condition|)
block|{
if|if
condition|(
name|keyValue
index|[
literal|0
index|]
operator|.
name|equals
argument_list|(
literal|"map info"
argument_list|)
condition|)
block|{
name|StringBuilder
name|mapInfoValueStringBuilder
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|String
name|mapInfoValue
init|=
name|keyValue
index|[
literal|1
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|keyValue
index|[
literal|1
index|]
operator|.
name|length
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|mapInfoValue
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
operator|!=
literal|'{'
operator|||
name|mapInfoValue
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
operator|!=
literal|'}'
operator|||
name|mapInfoValue
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
operator|!=
literal|' '
condition|)
block|{
name|mapInfoValueStringBuilder
operator|.
name|append
argument_list|(
name|mapInfoValue
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|String
index|[]
name|mapInfoValues
init|=
name|mapInfoValueStringBuilder
operator|.
name|toString
argument_list|()
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
name|convertMapInfoValuesToLatLngAndSetMetadata
argument_list|(
name|mapInfoValues
argument_list|,
name|metadata
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|metadata
operator|.
name|set
argument_list|(
literal|"envi."
operator|+
name|keyValue
index|[
literal|0
index|]
operator|.
name|trim
argument_list|()
operator|.
name|replace
argument_list|(
literal|" "
argument_list|,
literal|"."
argument_list|)
argument_list|,
name|keyValue
index|[
literal|1
index|]
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|xhtml
operator|.
name|startElement
argument_list|(
literal|"p"
argument_list|)
expr_stmt|;
name|xhtml
operator|.
name|characters
argument_list|(
name|line
argument_list|)
expr_stmt|;
name|xhtml
operator|.
name|endElement
argument_list|(
literal|"p"
argument_list|)
expr_stmt|;
block|}
comment|// Conversion logic taken from https://stackoverflow.com/questions/343865/how-to-convert-from-utm-to-latlng-in-python-or-javascript/344083#344083
specifier|private
name|void
name|convertMapInfoValuesToLatLngAndSetMetadata
parameter_list|(
name|String
index|[]
name|mapInfoValues
parameter_list|,
name|Metadata
name|metadata
parameter_list|)
block|{
comment|// Based on the map info data, pixelEasting is at index 3 and pixelNorthing is at index 4
name|double
name|pixelEasting
init|=
name|Double
operator|.
name|valueOf
argument_list|(
name|mapInfoValues
index|[
literal|3
index|]
argument_list|)
decl_stmt|;
name|double
name|pixelNorthing
init|=
name|Double
operator|.
name|valueOf
argument_list|(
name|mapInfoValues
index|[
literal|4
index|]
argument_list|)
decl_stmt|;
name|int
name|zone
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|mapInfoValues
index|[
literal|7
index|]
argument_list|)
decl_stmt|;
name|double
name|a
init|=
literal|6378137.0
decl_stmt|;
name|double
name|e
init|=
literal|0.0818191910
decl_stmt|;
name|double
name|e1sq
init|=
literal|0.006739497
decl_stmt|;
name|double
name|k0
init|=
literal|0.9996
decl_stmt|;
name|double
name|arc
init|=
name|pixelNorthing
operator|/
name|k0
decl_stmt|;
name|double
name|mu
init|=
name|arc
operator|/
operator|(
name|a
operator|*
operator|(
literal|1.0
operator|-
name|Math
operator|.
name|pow
argument_list|(
name|e
argument_list|,
literal|2.0
argument_list|)
operator|/
literal|4.0
operator|-
literal|3.0
operator|*
name|Math
operator|.
name|pow
argument_list|(
name|e
argument_list|,
literal|4.0
argument_list|)
operator|/
literal|64.0
operator|-
literal|5.0
operator|*
name|Math
operator|.
name|pow
argument_list|(
name|e
argument_list|,
literal|6.0
argument_list|)
operator|/
literal|256.0
operator|)
operator|)
decl_stmt|;
name|double
name|ei
init|=
operator|(
literal|1.0
operator|-
name|Math
operator|.
name|pow
argument_list|(
operator|(
literal|1.0
operator|-
name|e
operator|*
name|e
operator|)
argument_list|,
operator|(
literal|1.0
operator|/
literal|2.0
operator|)
argument_list|)
operator|)
operator|/
operator|(
literal|1.0
operator|+
name|Math
operator|.
name|pow
argument_list|(
operator|(
literal|1.0
operator|-
name|e
operator|*
name|e
operator|)
argument_list|,
operator|(
literal|1.0
operator|/
literal|2.0
operator|)
argument_list|)
operator|)
decl_stmt|;
name|double
name|ca
init|=
literal|3.0
operator|*
name|ei
operator|/
literal|2.0
operator|-
literal|27.0
operator|*
name|Math
operator|.
name|pow
argument_list|(
name|ei
argument_list|,
literal|3.0
argument_list|)
operator|/
literal|32.0
decl_stmt|;
name|double
name|cb
init|=
literal|21.0
operator|*
name|Math
operator|.
name|pow
argument_list|(
name|ei
argument_list|,
literal|2.0
argument_list|)
operator|/
literal|16.0
operator|-
literal|55.0
operator|*
name|Math
operator|.
name|pow
argument_list|(
name|ei
argument_list|,
literal|4.0
argument_list|)
operator|/
literal|32.0
decl_stmt|;
name|double
name|cc
init|=
literal|151.0
operator|*
name|Math
operator|.
name|pow
argument_list|(
name|ei
argument_list|,
literal|3.0
argument_list|)
operator|/
literal|96.0
decl_stmt|;
name|double
name|cd
init|=
literal|1097.0
operator|*
name|Math
operator|.
name|pow
argument_list|(
name|ei
argument_list|,
literal|4.0
argument_list|)
operator|/
literal|512.0
decl_stmt|;
name|double
name|phi1
init|=
name|mu
operator|+
name|ca
operator|*
name|Math
operator|.
name|sin
argument_list|(
literal|2.0
operator|*
name|mu
argument_list|)
operator|+
name|cb
operator|*
name|Math
operator|.
name|sin
argument_list|(
literal|4.0
operator|*
name|mu
argument_list|)
operator|+
name|cc
operator|*
name|Math
operator|.
name|sin
argument_list|(
literal|6.0
operator|*
name|mu
argument_list|)
operator|+
name|cd
operator|*
name|Math
operator|.
name|sin
argument_list|(
literal|8.0
operator|*
name|mu
argument_list|)
decl_stmt|;
name|double
name|n0
init|=
name|a
operator|/
name|Math
operator|.
name|pow
argument_list|(
operator|(
literal|1.0
operator|-
name|Math
operator|.
name|pow
argument_list|(
operator|(
name|e
operator|*
name|Math
operator|.
name|sin
argument_list|(
name|phi1
argument_list|)
operator|)
argument_list|,
literal|2.0
argument_list|)
operator|)
argument_list|,
operator|(
literal|1.0
operator|/
literal|2.0
operator|)
argument_list|)
decl_stmt|;
name|double
name|r0
init|=
name|a
operator|*
operator|(
literal|1.0
operator|-
name|e
operator|*
name|e
operator|)
operator|/
name|Math
operator|.
name|pow
argument_list|(
operator|(
literal|1.0
operator|-
name|Math
operator|.
name|pow
argument_list|(
operator|(
name|e
operator|*
name|Math
operator|.
name|sin
argument_list|(
name|phi1
argument_list|)
operator|)
argument_list|,
literal|2.0
argument_list|)
operator|)
argument_list|,
operator|(
literal|3.0
operator|/
literal|2.0
operator|)
argument_list|)
decl_stmt|;
name|double
name|fact1
init|=
name|n0
operator|*
name|Math
operator|.
name|tan
argument_list|(
name|phi1
argument_list|)
operator|/
name|r0
decl_stmt|;
name|double
name|_a1
init|=
literal|500000.0
operator|-
name|pixelEasting
decl_stmt|;
name|double
name|dd0
init|=
name|_a1
operator|/
operator|(
name|n0
operator|*
name|k0
operator|)
decl_stmt|;
name|double
name|fact2
init|=
name|dd0
operator|*
name|dd0
operator|/
literal|2.0
decl_stmt|;
name|double
name|t0
init|=
name|Math
operator|.
name|pow
argument_list|(
name|Math
operator|.
name|tan
argument_list|(
name|phi1
argument_list|)
argument_list|,
literal|2.0
argument_list|)
decl_stmt|;
name|double
name|Q0
init|=
name|e1sq
operator|*
name|Math
operator|.
name|pow
argument_list|(
name|Math
operator|.
name|cos
argument_list|(
name|phi1
argument_list|)
argument_list|,
literal|2.0
argument_list|)
decl_stmt|;
name|double
name|fact3
init|=
operator|(
literal|5.0
operator|+
literal|3.0
operator|*
name|t0
operator|+
literal|10.0
operator|*
name|Q0
operator|-
literal|4.0
operator|*
name|Q0
operator|*
name|Q0
operator|-
literal|9.0
operator|*
name|e1sq
operator|)
operator|*
name|Math
operator|.
name|pow
argument_list|(
name|dd0
argument_list|,
literal|4.0
argument_list|)
operator|/
literal|24.0
decl_stmt|;
name|double
name|fact4
init|=
operator|(
literal|61.0
operator|+
literal|90.0
operator|*
name|t0
operator|+
literal|298.0
operator|*
name|Q0
operator|+
literal|45.0
operator|*
name|t0
operator|*
name|t0
operator|-
literal|252.0
operator|*
name|e1sq
operator|-
literal|3.0
operator|*
name|Q0
operator|*
name|Q0
operator|)
operator|*
name|Math
operator|.
name|pow
argument_list|(
name|dd0
argument_list|,
literal|6.0
argument_list|)
operator|/
literal|720.0
decl_stmt|;
name|double
name|lof1
init|=
name|_a1
operator|/
operator|(
name|n0
operator|*
name|k0
operator|)
decl_stmt|;
name|double
name|lof2
init|=
operator|(
literal|1.0
operator|+
literal|2.0
operator|*
name|t0
operator|+
name|Q0
operator|)
operator|*
name|Math
operator|.
name|pow
argument_list|(
name|dd0
argument_list|,
literal|3.0
argument_list|)
operator|/
literal|6.0
decl_stmt|;
name|double
name|lof3
init|=
operator|(
literal|5.0
operator|-
literal|2.0
operator|*
name|Q0
operator|+
literal|28.0
operator|*
name|t0
operator|-
literal|3.0
operator|*
name|Math
operator|.
name|pow
argument_list|(
name|Q0
argument_list|,
literal|2.0
argument_list|)
operator|+
literal|8.0
operator|*
name|e1sq
operator|+
literal|24.0
operator|*
name|Math
operator|.
name|pow
argument_list|(
name|t0
argument_list|,
literal|2.0
argument_list|)
operator|)
operator|*
name|Math
operator|.
name|pow
argument_list|(
name|dd0
argument_list|,
literal|5.0
argument_list|)
operator|/
literal|120.0
decl_stmt|;
name|double
name|_a2
init|=
operator|(
name|lof1
operator|-
name|lof2
operator|+
name|lof3
operator|)
operator|/
name|Math
operator|.
name|cos
argument_list|(
name|phi1
argument_list|)
decl_stmt|;
name|double
name|_a3
init|=
name|_a2
operator|*
literal|180.0
operator|/
name|Math
operator|.
name|PI
decl_stmt|;
name|double
name|zoneCM
init|=
operator|(
name|zone
operator|>
literal|0
operator|)
condition|?
literal|6
operator|*
name|zone
operator|-
literal|183.0
else|:
literal|3.0
decl_stmt|;
name|double
name|latitude
init|=
literal|180.0
operator|*
operator|(
name|phi1
operator|-
name|fact1
operator|*
operator|(
name|fact2
operator|+
name|fact3
operator|+
name|fact4
operator|)
operator|)
operator|/
name|Math
operator|.
name|PI
decl_stmt|;
name|double
name|longitude
init|=
name|zoneCM
operator|-
name|_a3
decl_stmt|;
name|metadata
operator|.
name|set
argument_list|(
literal|"envi.lat/lng"
argument_list|,
name|latitude
operator|+
literal|","
operator|+
name|longitude
argument_list|)
expr_stmt|;
block|}
comment|/*      * Enables correct extraction of fiel values which span more      * than one line. Essentially, multi-line fiel values are      * typically enclosed within curly braces, so a primitive      * check it made to ensure the multi-line contents are contained in      * opening and closing braces.      */
specifier|private
name|String
name|parseMultiLineFieldValue
parameter_list|(
name|String
name|line
parameter_list|)
block|{
name|multiLineFieldValueList
operator|.
name|add
argument_list|(
name|line
argument_list|)
expr_stmt|;
if|if
condition|(
name|line
operator|.
name|endsWith
argument_list|(
literal|"}"
argument_list|)
condition|)
block|{
return|return
name|String
operator|.
name|join
argument_list|(
literal|""
argument_list|,
name|multiLineFieldValueList
argument_list|)
return|;
block|}
else|else
block|{
comment|//do nothing
block|}
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

