begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|html
operator|.
name|charsetdetector
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|Charset
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|AbstractMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|BitSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_comment
comment|/**  * A scanner meant to detect charset meta tags in a byte stream  * See: https://html.spec.whatwg.org/multipage/parsing.html#prescan-a-byte-stream-to-determine-its-encoding  */
end_comment

begin_class
class|class
name|PreScanner
block|{
specifier|private
specifier|static
specifier|final
name|Pattern
name|CHARSET_PATTERN
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"charset\\s*=\\s*([\"']?)([^\"'\\s;]+)\\1"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|COMMENT_START
init|=
block|{
operator|(
name|byte
operator|)
literal|'<'
block|,
operator|(
name|byte
operator|)
literal|'!'
block|,
operator|(
name|byte
operator|)
literal|'-'
block|,
operator|(
name|byte
operator|)
literal|'-'
block|}
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|COMMENT_END
init|=
block|{
operator|(
name|byte
operator|)
literal|'-'
block|,
operator|(
name|byte
operator|)
literal|'-'
block|,
operator|(
name|byte
operator|)
literal|'>'
block|}
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|META_TAG_START
init|=
block|{
operator|(
name|byte
operator|)
literal|'<'
block|,
operator|(
name|byte
operator|)
literal|'m'
block|,
operator|(
name|byte
operator|)
literal|'e'
block|,
operator|(
name|byte
operator|)
literal|'t'
block|,
operator|(
name|byte
operator|)
literal|'a'
block|}
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
name|SLASH
init|=
operator|(
name|byte
operator|)
literal|'/'
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
name|EQUAL
init|=
operator|(
name|byte
operator|)
literal|'='
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
name|TAG_START
init|=
operator|(
name|byte
operator|)
literal|'<'
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
name|TAG_END
init|=
operator|(
name|byte
operator|)
literal|'>'
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|BitSet
name|QUOTE
init|=
name|bitSet
argument_list|(
literal|'"'
argument_list|,
literal|'\''
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|BitSet
name|WHITESPACE
init|=
name|bitSet
argument_list|(
literal|0x09
argument_list|,
literal|0x0A
argument_list|,
literal|0x0C
argument_list|,
literal|0x0D
argument_list|,
literal|0x0D
argument_list|,
literal|0x20
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|BitSet
name|SPACE_OR_TAG_END
init|=
name|bitSet
argument_list|(
name|WHITESPACE
argument_list|,
name|TAG_END
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|BitSet
name|SPACE_OR_SLASH
init|=
name|bitSet
argument_list|(
name|WHITESPACE
argument_list|,
name|SLASH
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|BitSet
name|SPECIAL_TAGS
init|=
name|bitSet
argument_list|(
literal|'!'
argument_list|,
literal|'/'
argument_list|,
literal|'?'
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|UTF8_BOM
init|=
block|{
operator|(
name|byte
operator|)
literal|0xEF
block|,
operator|(
name|byte
operator|)
literal|0xBB
block|,
operator|(
name|byte
operator|)
literal|0xBF
block|}
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|UTF16_BE_BOM
init|=
block|{
operator|(
name|byte
operator|)
literal|0xFE
block|,
operator|(
name|byte
operator|)
literal|0xFF
block|}
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|UTF16_LE_BOM
init|=
block|{
operator|(
name|byte
operator|)
literal|0xFF
block|,
operator|(
name|byte
operator|)
literal|0xFE
block|}
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
name|LOWER_A
init|=
operator|(
name|byte
operator|)
literal|'a'
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
name|LOWER_Z
init|=
operator|(
name|byte
operator|)
literal|'z'
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
name|UPPER_A
init|=
operator|(
name|byte
operator|)
literal|'A'
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
name|UPPER_Z
init|=
operator|(
name|byte
operator|)
literal|'Z'
decl_stmt|;
specifier|private
name|BufferedInputStream
name|stream
decl_stmt|;
specifier|private
name|CharsetDetectionResult
name|detectedCharset
init|=
name|CharsetDetectionResult
operator|.
name|notFound
argument_list|()
decl_stmt|;
name|PreScanner
parameter_list|(
name|InputStream
name|inputStream
parameter_list|)
block|{
name|this
operator|.
name|stream
operator|=
operator|new
name|BufferedInputStream
argument_list|(
name|inputStream
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|BitSet
name|bitSet
parameter_list|(
name|int
modifier|...
name|bs
parameter_list|)
block|{
name|BitSet
name|bitSet
init|=
operator|new
name|BitSet
argument_list|(
literal|0xFF
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|b
range|:
name|bs
control|)
name|bitSet
operator|.
name|set
argument_list|(
name|b
argument_list|)
expr_stmt|;
return|return
name|bitSet
return|;
block|}
specifier|private
specifier|static
name|BitSet
name|bitSet
parameter_list|(
name|BitSet
name|base
parameter_list|,
name|int
modifier|...
name|bs
parameter_list|)
block|{
name|BitSet
name|bitSet
init|=
operator|(
name|BitSet
operator|)
name|base
operator|.
name|clone
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|b
range|:
name|bs
control|)
name|bitSet
operator|.
name|set
argument_list|(
name|b
argument_list|)
expr_stmt|;
return|return
name|bitSet
return|;
block|}
specifier|static
name|String
name|getEncodingFromMeta
parameter_list|(
name|String
name|attributeValue
parameter_list|)
block|{
name|Matcher
name|matcher
init|=
name|CHARSET_PATTERN
operator|.
name|matcher
argument_list|(
name|attributeValue
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|matcher
operator|.
name|find
argument_list|()
condition|)
return|return
literal|null
return|;
return|return
name|matcher
operator|.
name|group
argument_list|(
literal|2
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|boolean
name|contains
parameter_list|(
name|BitSet
name|bitSet
parameter_list|,
name|byte
name|b
parameter_list|)
block|{
return|return
name|bitSet
operator|.
name|get
argument_list|(
name|b
operator|&
literal|0xFF
argument_list|)
return|;
block|}
name|Charset
name|scan
parameter_list|()
block|{
while|while
condition|(
name|processAtLeastOneByte
argument_list|()
condition|)
if|if
condition|(
name|detectedCharset
operator|.
name|isFound
argument_list|()
condition|)
return|return
name|detectedCharset
operator|.
name|getCharset
argument_list|()
return|;
return|return
literal|null
return|;
block|}
name|Charset
name|detectBOM
parameter_list|()
block|{
try|try
block|{
if|if
condition|(
name|expect
argument_list|(
name|UTF8_BOM
argument_list|)
condition|)
return|return
name|StandardCharsets
operator|.
name|UTF_8
return|;
elseif|else
if|if
condition|(
name|expect
argument_list|(
name|UTF16_BE_BOM
argument_list|)
condition|)
return|return
name|StandardCharsets
operator|.
name|UTF_16BE
return|;
elseif|else
if|if
condition|(
name|expect
argument_list|(
name|UTF16_LE_BOM
argument_list|)
condition|)
return|return
name|StandardCharsets
operator|.
name|UTF_16LE
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|/* stream could not be read, also return null */
block|}
return|return
literal|null
return|;
block|}
specifier|private
name|boolean
name|processAtLeastOneByte
parameter_list|()
block|{
try|try
block|{
return|return
name|processComment
argument_list|()
operator|||
name|processMeta
argument_list|()
operator|||
name|processTag
argument_list|()
operator|||
name|processSpecialTag
argument_list|()
operator|||
name|processAny
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
block|}
specifier|private
name|boolean
name|processAny
parameter_list|()
throws|throws
name|IOException
block|{
name|int
name|read
init|=
name|stream
operator|.
name|read
argument_list|()
decl_stmt|;
return|return
name|read
operator|!=
operator|-
literal|1
return|;
block|}
specifier|private
name|boolean
name|processTag
parameter_list|()
throws|throws
name|IOException
block|{
name|stream
operator|.
name|mark
argument_list|(
literal|3
argument_list|)
expr_stmt|;
if|if
condition|(
name|read
argument_list|()
operator|==
name|TAG_START
condition|)
block|{
name|int
name|read
init|=
name|stream
operator|.
name|read
argument_list|()
decl_stmt|;
if|if
condition|(
name|read
operator|==
name|SLASH
condition|)
name|read
operator|=
name|stream
operator|.
name|read
argument_list|()
expr_stmt|;
if|if
condition|(
operator|(
name|LOWER_A
operator|<=
name|read
operator|&&
name|read
operator|<=
name|LOWER_Z
operator|)
operator|||
operator|(
name|UPPER_A
operator|<=
name|read
operator|&&
name|read
operator|<=
name|UPPER_Z
operator|)
condition|)
block|{
do|do
name|stream
operator|.
name|mark
argument_list|(
literal|1
argument_list|)
expr_stmt|;
do|while
condition|(
operator|!
name|contains
argument_list|(
name|SPACE_OR_TAG_END
argument_list|,
name|read
argument_list|()
argument_list|)
condition|)
do|;
name|stream
operator|.
name|reset
argument_list|()
expr_stmt|;
while|while
condition|(
name|getAttribute
argument_list|()
operator|!=
literal|null
condition|)
block|{
comment|/* ignore the attribute*/
block|}
return|return
literal|true
return|;
block|}
block|}
name|stream
operator|.
name|reset
argument_list|()
expr_stmt|;
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|processSpecialTag
parameter_list|()
throws|throws
name|IOException
block|{
name|stream
operator|.
name|mark
argument_list|(
literal|2
argument_list|)
expr_stmt|;
if|if
condition|(
name|read
argument_list|()
operator|==
name|TAG_START
operator|&&
name|contains
argument_list|(
name|SPECIAL_TAGS
argument_list|,
name|read
argument_list|()
argument_list|)
condition|)
block|{
name|skipUntil
argument_list|(
name|TAG_END
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
name|stream
operator|.
name|reset
argument_list|()
expr_stmt|;
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|processMeta
parameter_list|()
throws|throws
name|IOException
block|{
name|stream
operator|.
name|mark
argument_list|(
literal|6
argument_list|)
expr_stmt|;
comment|// len("<meta ") == 6
if|if
condition|(
name|readCaseInsensitive
argument_list|(
name|META_TAG_START
argument_list|)
operator|&&
name|contains
argument_list|(
name|SPACE_OR_SLASH
argument_list|,
name|read
argument_list|()
argument_list|)
condition|)
block|{
name|MetaProcessor
name|metaProcessor
init|=
operator|new
name|MetaProcessor
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|attribute
init|=
name|getAttribute
argument_list|()
init|;
name|attribute
operator|!=
literal|null
condition|;
name|attribute
operator|=
name|getAttribute
argument_list|()
control|)
block|{
name|metaProcessor
operator|.
name|processAttribute
argument_list|(
name|attribute
argument_list|)
expr_stmt|;
block|}
name|metaProcessor
operator|.
name|updateDetectedCharset
argument_list|(
name|detectedCharset
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
name|stream
operator|.
name|reset
argument_list|()
expr_stmt|;
return|return
literal|false
return|;
block|}
comment|/**      * Read an attribute from the stream      *      * @return the attribute as a Map.Entry, where the key is the attribute's name and      * the value is the attribute's value. If there is no attribute, return null      */
specifier|private
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getAttribute
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|name
init|=
name|getAttributeName
argument_list|()
decl_stmt|;
if|if
condition|(
name|name
operator|==
literal|null
condition|)
return|return
literal|null
return|;
if|if
condition|(
operator|!
name|expect
argument_list|(
name|EQUAL
argument_list|)
condition|)
return|return
operator|new
name|AbstractMap
operator|.
name|SimpleEntry
argument_list|<>
argument_list|(
name|name
argument_list|,
literal|""
argument_list|)
return|;
name|skipAll
argument_list|(
name|WHITESPACE
argument_list|)
expr_stmt|;
name|String
name|value
init|=
name|getAttributeValue
argument_list|()
decl_stmt|;
return|return
operator|new
name|AbstractMap
operator|.
name|SimpleEntry
argument_list|<>
argument_list|(
name|name
argument_list|,
name|value
argument_list|)
return|;
block|}
specifier|private
name|String
name|getAttributeName
parameter_list|()
throws|throws
name|IOException
block|{
name|skipAll
argument_list|(
name|SPACE_OR_SLASH
argument_list|)
expr_stmt|;
if|if
condition|(
name|expect
argument_list|(
name|TAG_END
argument_list|)
condition|)
return|return
literal|null
return|;
name|StringBuilder
name|name
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
while|while
condition|(
operator|!
operator|(
name|peek
argument_list|()
operator|==
name|EQUAL
operator|&&
name|name
operator|.
name|length
argument_list|()
operator|>
literal|0
operator|)
operator|&&
operator|!
operator|(
name|peek
argument_list|()
operator|==
name|TAG_END
operator|||
name|peek
argument_list|()
operator|==
name|SLASH
operator|)
operator|&&
operator|!
name|skipAll
argument_list|(
name|WHITESPACE
argument_list|)
condition|)
block|{
name|name
operator|.
name|append
argument_list|(
operator|(
name|char
operator|)
name|getLowerCaseChar
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|name
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|private
name|String
name|getAttributeValue
parameter_list|()
throws|throws
name|IOException
block|{
name|StringBuilder
name|value
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|stream
operator|.
name|mark
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|byte
name|quote
init|=
name|read
argument_list|()
decl_stmt|;
if|if
condition|(
name|contains
argument_list|(
name|QUOTE
argument_list|,
name|quote
argument_list|)
condition|)
block|{
for|for
control|(
name|byte
name|b
init|=
name|getLowerCaseChar
argument_list|()
init|;
name|b
operator|!=
name|quote
condition|;
name|b
operator|=
name|getLowerCaseChar
argument_list|()
control|)
block|{
name|value
operator|.
name|append
argument_list|(
operator|(
name|char
operator|)
name|b
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|stream
operator|.
name|reset
argument_list|()
expr_stmt|;
for|for
control|(
name|byte
name|b
init|=
name|getLowerCaseChar
argument_list|()
init|;
operator|!
name|contains
argument_list|(
name|SPACE_OR_TAG_END
argument_list|,
name|b
argument_list|)
condition|;
name|b
operator|=
name|getLowerCaseChar
argument_list|()
control|)
block|{
name|value
operator|.
name|append
argument_list|(
operator|(
name|char
operator|)
name|b
argument_list|)
expr_stmt|;
name|stream
operator|.
name|mark
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
name|stream
operator|.
name|reset
argument_list|()
expr_stmt|;
comment|// unread the space or tag end
block|}
return|return
name|value
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|private
name|boolean
name|skipAll
parameter_list|(
name|BitSet
name|bitSet
parameter_list|)
throws|throws
name|IOException
block|{
name|boolean
name|skipped
init|=
literal|false
decl_stmt|;
name|stream
operator|.
name|mark
argument_list|(
literal|1
argument_list|)
expr_stmt|;
for|for
control|(
name|byte
name|read
init|=
name|read
argument_list|()
init|;
name|contains
argument_list|(
name|bitSet
argument_list|,
name|read
argument_list|)
condition|;
name|read
operator|=
name|read
argument_list|()
control|)
block|{
name|skipped
operator|=
literal|true
expr_stmt|;
name|stream
operator|.
name|mark
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
name|stream
operator|.
name|reset
argument_list|()
expr_stmt|;
return|return
name|skipped
return|;
block|}
specifier|private
name|byte
name|getLowerCaseChar
parameter_list|()
throws|throws
name|IOException
block|{
name|byte
name|nextPoint
init|=
name|read
argument_list|()
decl_stmt|;
if|if
condition|(
name|nextPoint
operator|>=
literal|'A'
operator|&&
name|nextPoint
operator|<=
literal|'Z'
condition|)
name|nextPoint
operator|+=
literal|0x20
expr_stmt|;
comment|// lowercase
return|return
name|nextPoint
return|;
block|}
specifier|private
name|boolean
name|processComment
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|expect
argument_list|(
name|COMMENT_START
argument_list|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|expect
argument_list|(
name|TAG_END
argument_list|)
condition|)
name|skipUntil
argument_list|(
name|COMMENT_END
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
specifier|private
name|boolean
name|expect
parameter_list|(
name|byte
modifier|...
name|expected
parameter_list|)
throws|throws
name|IOException
block|{
name|stream
operator|.
name|mark
argument_list|(
name|expected
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|byte
name|b
range|:
name|expected
control|)
block|{
name|byte
name|read
init|=
name|read
argument_list|()
decl_stmt|;
if|if
condition|(
name|read
operator|!=
name|b
condition|)
block|{
name|stream
operator|.
name|reset
argument_list|()
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
specifier|private
name|void
name|skipUntil
parameter_list|(
name|byte
modifier|...
name|expected
parameter_list|)
throws|throws
name|IOException
block|{
while|while
condition|(
operator|!
name|expect
argument_list|(
name|expected
argument_list|)
condition|)
block|{
if|if
condition|(
name|stream
operator|.
name|skip
argument_list|(
literal|1
argument_list|)
operator|==
literal|0
condition|)
return|return;
block|}
block|}
specifier|private
name|boolean
name|readCaseInsensitive
parameter_list|(
name|byte
modifier|...
name|bs
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|byte
name|b
range|:
name|bs
control|)
if|if
condition|(
name|getLowerCaseChar
argument_list|()
operator|!=
name|b
condition|)
return|return
literal|false
return|;
return|return
literal|true
return|;
block|}
specifier|private
name|byte
name|read
parameter_list|()
throws|throws
name|IOException
block|{
name|int
name|r
init|=
name|stream
operator|.
name|read
argument_list|()
decl_stmt|;
if|if
condition|(
name|r
operator|==
operator|-
literal|1
condition|)
throw|throw
operator|new
name|IOException
argument_list|()
throw|;
return|return
operator|(
name|byte
operator|)
name|r
return|;
block|}
specifier|private
name|byte
name|peek
parameter_list|()
throws|throws
name|IOException
block|{
name|stream
operator|.
name|mark
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|byte
name|b
init|=
name|read
argument_list|()
decl_stmt|;
name|stream
operator|.
name|reset
argument_list|()
expr_stmt|;
return|return
name|b
return|;
block|}
block|}
end_class

end_unit

