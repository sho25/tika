begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright owlocationNameEntitieship.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|geo
operator|.
name|topic
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|exec
operator|.
name|CommandLine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|exec
operator|.
name|DefaultExecutor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|exec
operator|.
name|ExecuteException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|exec
operator|.
name|ExecuteWatchdog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|exec
operator|.
name|PumpStreamHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|exec
operator|.
name|environment
operator|.
name|EnvironmentUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|exception
operator|.
name|TikaException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|metadata
operator|.
name|Metadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|mime
operator|.
name|MediaType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|AbstractParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|ParseContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|external
operator|.
name|ExternalParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|json
operator|.
name|simple
operator|.
name|JSONArray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|json
operator|.
name|simple
operator|.
name|JSONObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|json
operator|.
name|simple
operator|.
name|JSONValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|ContentHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_class
specifier|public
class|class
name|GeoParser
extends|extends
name|AbstractParser
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
operator|-
literal|2241391757440215491L
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|MediaType
name|MEDIA_TYPE
init|=
name|MediaType
operator|.
name|application
argument_list|(
literal|"geotopic"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Set
argument_list|<
name|MediaType
argument_list|>
name|SUPPORTED_TYPES
init|=
name|Collections
operator|.
name|singleton
argument_list|(
name|MEDIA_TYPE
argument_list|)
decl_stmt|;
specifier|private
name|GeoParserConfig
name|config
init|=
operator|new
name|GeoParserConfig
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|Logger
operator|.
name|getLogger
argument_list|(
name|GeoParser
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
annotation|@
name|Override
specifier|public
name|Set
argument_list|<
name|MediaType
argument_list|>
name|getSupportedTypes
parameter_list|(
name|ParseContext
name|parseContext
parameter_list|)
block|{
return|return
name|SUPPORTED_TYPES
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|parse
parameter_list|(
name|InputStream
name|stream
parameter_list|,
name|ContentHandler
name|handler
parameter_list|,
name|Metadata
name|metadata
parameter_list|,
name|ParseContext
name|context
parameter_list|)
throws|throws
name|IOException
throws|,
name|SAXException
throws|,
name|TikaException
block|{
comment|/*----------------configure this parser by ParseContext Object---------------------*/
name|config
operator|=
name|context
operator|.
name|get
argument_list|(
name|GeoParserConfig
operator|.
name|class
argument_list|,
name|config
argument_list|)
expr_stmt|;
name|String
name|nerModelPath
init|=
name|config
operator|.
name|getNERPath
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|isAvailable
argument_list|()
condition|)
block|{
return|return;
block|}
comment|/*----------------get locationNameEntities and best nameEntity for the input stream---------------------*/
name|NameEntityExtractor
name|extractor
init|=
operator|new
name|NameEntityExtractor
argument_list|(
name|nerModelPath
argument_list|)
decl_stmt|;
name|extractor
operator|.
name|getAllNameEntitiesfromInput
argument_list|(
name|stream
argument_list|)
expr_stmt|;
name|extractor
operator|.
name|getBestNameEntity
argument_list|()
expr_stmt|;
name|ArrayList
argument_list|<
name|String
argument_list|>
name|locationNameEntities
init|=
name|extractor
operator|.
name|locationNameEntities
decl_stmt|;
name|String
name|bestner
init|=
name|extractor
operator|.
name|bestNameEntity
decl_stmt|;
comment|/*------------------------resolve geonames for each ner, store results in a hashmap---------------------*/
name|HashMap
argument_list|<
name|String
argument_list|,
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|>
name|resolvedGeonames
init|=
name|searchGeoNames
argument_list|(
name|locationNameEntities
argument_list|)
decl_stmt|;
comment|/*----------------store locationNameEntities and their geonames in a geotag, each input has one geotag---------------------*/
name|GeoTag
name|geotag
init|=
operator|new
name|GeoTag
argument_list|()
decl_stmt|;
name|geotag
operator|.
name|toGeoTag
argument_list|(
name|resolvedGeonames
argument_list|,
name|bestner
argument_list|)
expr_stmt|;
comment|/* add resolved entities in metadata */
name|metadata
operator|.
name|add
argument_list|(
literal|"Geographic_NAME"
argument_list|,
name|geotag
operator|.
name|Geographic_NAME
argument_list|)
expr_stmt|;
name|metadata
operator|.
name|add
argument_list|(
literal|"Geographic_LONGITUDE"
argument_list|,
name|geotag
operator|.
name|Geographic_LONGTITUDE
argument_list|)
expr_stmt|;
name|metadata
operator|.
name|add
argument_list|(
literal|"Geographic_LATITUDE"
argument_list|,
name|geotag
operator|.
name|Geographic_LATITUDE
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|geotag
operator|.
name|alternatives
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|GeoTag
name|alter
init|=
operator|(
name|GeoTag
operator|)
name|geotag
operator|.
name|alternatives
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|metadata
operator|.
name|add
argument_list|(
literal|"Optional_NAME"
operator|+
operator|(
name|i
operator|+
literal|1
operator|)
argument_list|,
name|alter
operator|.
name|Geographic_NAME
argument_list|)
expr_stmt|;
name|metadata
operator|.
name|add
argument_list|(
literal|"Optional_LONGITUDE"
operator|+
operator|(
name|i
operator|+
literal|1
operator|)
argument_list|,
name|alter
operator|.
name|Geographic_LONGTITUDE
argument_list|)
expr_stmt|;
name|metadata
operator|.
name|add
argument_list|(
literal|"Optional_LATITUDE"
operator|+
operator|(
name|i
operator|+
literal|1
operator|)
argument_list|,
name|alter
operator|.
name|Geographic_LATITUDE
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|HashMap
argument_list|<
name|String
argument_list|,
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|>
name|searchGeoNames
parameter_list|(
name|ArrayList
argument_list|<
name|String
argument_list|>
name|locationNameEntities
parameter_list|)
throws|throws
name|ExecuteException
throws|,
name|IOException
block|{
name|CommandLine
name|cmdLine
init|=
operator|new
name|CommandLine
argument_list|(
literal|"lucene-geo-gazetteer"
argument_list|)
decl_stmt|;
name|ByteArrayOutputStream
name|outputStream
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|cmdLine
operator|.
name|addArgument
argument_list|(
literal|"-s"
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|name
range|:
name|locationNameEntities
control|)
block|{
name|cmdLine
operator|.
name|addArgument
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|fine
argument_list|(
literal|"Executing: "
operator|+
name|cmdLine
argument_list|)
expr_stmt|;
name|DefaultExecutor
name|exec
init|=
operator|new
name|DefaultExecutor
argument_list|()
decl_stmt|;
name|exec
operator|.
name|setExitValue
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|ExecuteWatchdog
name|watchdog
init|=
operator|new
name|ExecuteWatchdog
argument_list|(
literal|60000
argument_list|)
decl_stmt|;
name|exec
operator|.
name|setWatchdog
argument_list|(
name|watchdog
argument_list|)
expr_stmt|;
name|PumpStreamHandler
name|streamHandler
init|=
operator|new
name|PumpStreamHandler
argument_list|(
name|outputStream
argument_list|)
decl_stmt|;
name|exec
operator|.
name|setStreamHandler
argument_list|(
name|streamHandler
argument_list|)
expr_stmt|;
name|int
name|exitValue
init|=
name|exec
operator|.
name|execute
argument_list|(
name|cmdLine
argument_list|,
name|EnvironmentUtils
operator|.
name|getProcEnvironment
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|outputJson
init|=
name|outputStream
operator|.
name|toString
argument_list|(
literal|"UTF-8"
argument_list|)
decl_stmt|;
name|JSONArray
name|json
init|=
operator|(
name|JSONArray
operator|)
name|JSONValue
operator|.
name|parse
argument_list|(
name|outputJson
argument_list|)
decl_stmt|;
name|HashMap
argument_list|<
name|String
argument_list|,
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|>
name|returnHash
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|json
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|JSONObject
name|obj
init|=
operator|(
name|JSONObject
operator|)
name|json
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
for|for
control|(
name|Object
name|key
range|:
name|obj
operator|.
name|keySet
argument_list|()
control|)
block|{
name|String
name|theKey
init|=
operator|(
name|String
operator|)
name|key
decl_stmt|;
name|JSONArray
name|vals
init|=
operator|(
name|JSONArray
operator|)
name|obj
operator|.
name|get
argument_list|(
name|theKey
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|String
argument_list|>
name|stringVals
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|vals
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|vals
operator|.
name|size
argument_list|()
condition|;
name|j
operator|++
control|)
block|{
name|String
name|val
init|=
operator|(
name|String
operator|)
name|vals
operator|.
name|get
argument_list|(
name|j
argument_list|)
decl_stmt|;
name|stringVals
operator|.
name|add
argument_list|(
name|val
argument_list|)
expr_stmt|;
block|}
name|returnHash
operator|.
name|put
argument_list|(
name|theKey
argument_list|,
name|stringVals
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|returnHash
return|;
block|}
specifier|public
name|boolean
name|isAvailable
parameter_list|()
block|{
return|return
name|ExternalParser
operator|.
name|check
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"lucene-geo-gazetteer"
block|,
literal|"--help"
block|}
argument_list|,
operator|-
literal|1
argument_list|)
operator|&&
name|config
operator|.
name|getNERPath
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|config
operator|.
name|getNERPath
argument_list|()
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
return|;
block|}
block|}
end_class

end_unit

