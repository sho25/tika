begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright owlocationNameEntitieship.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|geo
operator|.
name|topic
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|exception
operator|.
name|TikaException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|metadata
operator|.
name|Metadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|mime
operator|.
name|MediaType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|AbstractParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|ParseContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|geo
operator|.
name|topic
operator|.
name|gazetteer
operator|.
name|GeoGazetteerClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|geo
operator|.
name|topic
operator|.
name|gazetteer
operator|.
name|Location
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|ContentHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_import
import|import
name|opennlp
operator|.
name|tools
operator|.
name|namefind
operator|.
name|NameFinderME
import|;
end_import

begin_import
import|import
name|opennlp
operator|.
name|tools
operator|.
name|namefind
operator|.
name|TokenNameFinderModel
import|;
end_import

begin_class
specifier|public
class|class
name|GeoParser
extends|extends
name|AbstractParser
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
operator|-
literal|2241391757440215491L
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|Logger
operator|.
name|getLogger
argument_list|(
name|GeoParser
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|MediaType
name|MEDIA_TYPE
init|=
name|MediaType
operator|.
name|application
argument_list|(
literal|"geotopic"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Set
argument_list|<
name|MediaType
argument_list|>
name|SUPPORTED_TYPES
init|=
name|Collections
operator|.
name|singleton
argument_list|(
name|MEDIA_TYPE
argument_list|)
decl_stmt|;
specifier|private
name|GeoParserConfig
name|config
init|=
operator|new
name|GeoParserConfig
argument_list|()
decl_stmt|;
specifier|private
name|GeoGazetteerClient
name|gazetteerClient
decl_stmt|;
specifier|private
name|boolean
name|initialized
decl_stmt|;
specifier|private
name|URL
name|modelUrl
decl_stmt|;
specifier|private
name|NameFinderME
name|nameFinder
decl_stmt|;
specifier|private
name|boolean
name|available
decl_stmt|;
annotation|@
name|Override
specifier|public
name|Set
argument_list|<
name|MediaType
argument_list|>
name|getSupportedTypes
parameter_list|(
name|ParseContext
name|parseContext
parameter_list|)
block|{
return|return
name|SUPPORTED_TYPES
return|;
block|}
comment|/**      * Initializes this parser      * @param modelUrl the URL to NER model      */
specifier|public
name|void
name|initialize
parameter_list|(
name|URL
name|modelUrl
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|modelUrl
operator|!=
literal|null
operator|&&
name|this
operator|.
name|modelUrl
operator|.
name|equals
argument_list|(
name|modelUrl
argument_list|)
condition|)
block|{
comment|// Previously initialized for the same URL, no initialization needed
return|return;
block|}
name|this
operator|.
name|modelUrl
operator|=
name|modelUrl
expr_stmt|;
name|gazetteerClient
operator|=
operator|new
name|GeoGazetteerClient
argument_list|(
name|config
argument_list|)
expr_stmt|;
comment|// Check if the NER model is available, and if the
comment|//  lucene-geo-gazetteer is available
name|this
operator|.
name|available
operator|=
name|modelUrl
operator|!=
literal|null
operator|&&
name|gazetteerClient
operator|.
name|checkAvail
argument_list|()
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|available
condition|)
block|{
try|try
block|{
name|TokenNameFinderModel
name|model
init|=
operator|new
name|TokenNameFinderModel
argument_list|(
name|modelUrl
argument_list|)
decl_stmt|;
name|this
operator|.
name|nameFinder
operator|=
operator|new
name|NameFinderME
argument_list|(
name|model
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warning
argument_list|(
literal|"Named Entity Extractor setup failed: "
operator|+
name|e
argument_list|)
expr_stmt|;
name|this
operator|.
name|available
operator|=
literal|false
expr_stmt|;
block|}
block|}
name|initialized
operator|=
literal|true
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|parse
parameter_list|(
name|InputStream
name|stream
parameter_list|,
name|ContentHandler
name|handler
parameter_list|,
name|Metadata
name|metadata
parameter_list|,
name|ParseContext
name|context
parameter_list|)
throws|throws
name|IOException
throws|,
name|SAXException
throws|,
name|TikaException
block|{
comment|/*----------------configure this parser by ParseContext Object---------------------*/
name|this
operator|.
name|config
operator|=
name|context
operator|.
name|get
argument_list|(
name|GeoParserConfig
operator|.
name|class
argument_list|,
name|config
argument_list|)
expr_stmt|;
name|initialize
argument_list|(
name|this
operator|.
name|config
operator|.
name|getNerModelUrl
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|isAvailable
argument_list|()
condition|)
block|{
return|return;
block|}
name|NameEntityExtractor
name|extractor
init|=
literal|null
decl_stmt|;
try|try
block|{
name|extractor
operator|=
operator|new
name|NameEntityExtractor
argument_list|(
name|nameFinder
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warning
argument_list|(
literal|"Named Entity Extractor setup failed: "
operator|+
name|e
argument_list|)
expr_stmt|;
return|return;
block|}
comment|/*----------------get locationNameEntities and best nameEntity for the input stream---------------------*/
name|extractor
operator|.
name|getAllNameEntitiesfromInput
argument_list|(
name|stream
argument_list|)
expr_stmt|;
name|extractor
operator|.
name|getBestNameEntity
argument_list|()
expr_stmt|;
name|ArrayList
argument_list|<
name|String
argument_list|>
name|locationNameEntities
init|=
name|extractor
operator|.
name|locationNameEntities
decl_stmt|;
name|String
name|bestner
init|=
name|extractor
operator|.
name|bestNameEntity
decl_stmt|;
comment|/*------------------------resolve geonames for each ner, store results in a hashmap---------------------*/
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|Location
argument_list|>
argument_list|>
name|resolvedGeonames
init|=
name|searchGeoNames
argument_list|(
name|locationNameEntities
argument_list|)
decl_stmt|;
comment|/*----------------store locationNameEntities and their geonames in a geotag, each input has one geotag---------------------*/
name|GeoTag
name|geotag
init|=
operator|new
name|GeoTag
argument_list|()
decl_stmt|;
name|geotag
operator|.
name|toGeoTag
argument_list|(
name|resolvedGeonames
argument_list|,
name|bestner
argument_list|)
expr_stmt|;
comment|/* add resolved entities in metadata */
name|metadata
operator|.
name|add
argument_list|(
literal|"Geographic_NAME"
argument_list|,
name|geotag
operator|.
name|location
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|metadata
operator|.
name|add
argument_list|(
literal|"Geographic_LONGITUDE"
argument_list|,
name|geotag
operator|.
name|location
operator|.
name|getLongitude
argument_list|()
argument_list|)
expr_stmt|;
name|metadata
operator|.
name|add
argument_list|(
literal|"Geographic_LATITUDE"
argument_list|,
name|geotag
operator|.
name|location
operator|.
name|getLatitude
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|geotag
operator|.
name|alternatives
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|GeoTag
name|alter
init|=
operator|(
name|GeoTag
operator|)
name|geotag
operator|.
name|alternatives
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|metadata
operator|.
name|add
argument_list|(
literal|"Optional_NAME"
operator|+
operator|(
name|i
operator|+
literal|1
operator|)
argument_list|,
name|alter
operator|.
name|location
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|metadata
operator|.
name|add
argument_list|(
literal|"Optional_LONGITUDE"
operator|+
operator|(
name|i
operator|+
literal|1
operator|)
argument_list|,
name|alter
operator|.
name|location
operator|.
name|getLongitude
argument_list|()
argument_list|)
expr_stmt|;
name|metadata
operator|.
name|add
argument_list|(
literal|"Optional_LATITUDE"
operator|+
operator|(
name|i
operator|+
literal|1
operator|)
argument_list|,
name|alter
operator|.
name|location
operator|.
name|getLatitude
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|Location
argument_list|>
argument_list|>
name|searchGeoNames
parameter_list|(
name|ArrayList
argument_list|<
name|String
argument_list|>
name|locationNameEntities
parameter_list|)
block|{
return|return
name|gazetteerClient
operator|.
name|getLocations
argument_list|(
name|locationNameEntities
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|isAvailable
parameter_list|()
block|{
if|if
condition|(
operator|!
name|initialized
condition|)
block|{
name|initialize
argument_list|(
name|config
operator|.
name|getNerModelUrl
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|this
operator|.
name|available
return|;
block|}
block|}
end_class

end_unit

