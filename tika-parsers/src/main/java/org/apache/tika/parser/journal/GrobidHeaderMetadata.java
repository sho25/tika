begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|journal
package|;
end_package

begin_import
import|import
name|java
operator|.
name|beans
operator|.
name|BeanInfo
import|;
end_import

begin_import
import|import
name|java
operator|.
name|beans
operator|.
name|IntrospectionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|beans
operator|.
name|Introspector
import|;
end_import

begin_import
import|import
name|java
operator|.
name|beans
operator|.
name|PropertyDescriptor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|InvocationTargetException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|grobid
operator|.
name|core
operator|.
name|data
operator|.
name|BiblioItem
import|;
end_import

begin_class
specifier|public
class|class
name|GrobidHeaderMetadata
block|{
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|headerMetadata
decl_stmt|;
specifier|public
name|void
name|generateHeaderMetada
parameter_list|(
name|BiblioItem
name|resHeader
parameter_list|)
block|{
name|headerMetadata
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
expr_stmt|;
try|try
block|{
name|BeanInfo
name|info
init|=
name|Introspector
operator|.
name|getBeanInfo
argument_list|(
name|BiblioItem
operator|.
name|class
argument_list|)
decl_stmt|;
for|for
control|(
name|PropertyDescriptor
name|pd
range|:
name|info
operator|.
name|getPropertyDescriptors
argument_list|()
control|)
block|{
name|Method
name|m
init|=
name|pd
operator|.
name|getReadMethod
argument_list|()
decl_stmt|;
if|if
condition|(
name|m
operator|!=
literal|null
condition|)
block|{
name|Object
name|value
init|=
name|m
operator|.
name|invoke
argument_list|(
name|resHeader
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
name|headerMetadata
operator|.
name|put
argument_list|(
name|GrobidConfig
operator|.
name|HEADER_METADATA_PREFIX
operator|+
name|m
operator|.
name|getName
argument_list|()
operator|.
name|replace
argument_list|(
literal|"get"
argument_list|,
literal|""
argument_list|)
argument_list|,
literal|""
operator|+
name|value
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|IntrospectionException
decl||
name|IllegalAccessException
decl||
name|IllegalArgumentException
decl||
name|InvocationTargetException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getHeaderMetadata
parameter_list|()
block|{
return|return
name|headerMetadata
return|;
block|}
specifier|public
name|void
name|setHeaderMetadata
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|headerMetadata
parameter_list|)
block|{
name|this
operator|.
name|headerMetadata
operator|=
name|headerMetadata
expr_stmt|;
block|}
block|}
end_class

end_unit

