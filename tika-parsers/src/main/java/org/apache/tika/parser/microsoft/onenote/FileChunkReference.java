begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|microsoft
operator|.
name|onenote
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_comment
comment|/**  * A file chunk reference specifies a reference to data in the file.  *<p>  * Each file chunk reference contains an<pre>stp</pre> field and a<pre>cb</pre> field.  *<p>  * The<pre>stp</pre> field is a stream pointer that specifies the offset, in bytes, from the beginning of the file where the referenced  * data is located.  *<p>  * The<pre>cb</pre> field specifies the size, in bytes, of the referenced data. The sizes, in bytes, of the  * stp and cb fields are specified by the structures in this section.  *<p>  * There are some Special values:  *<p>  * fcrNil - Specifies a file chunk reference where all bits of the stp field are set to 1, and all bits of the cb field are set to zero.  *<p>  * fcrZero - Specifies a file chunk reference where all bits of the stp and cb fields are set to zero.  */
end_comment

begin_class
class|class
name|FileChunkReference
block|{
name|long
name|stp
decl_stmt|;
name|long
name|cb
decl_stmt|;
specifier|public
name|FileChunkReference
parameter_list|()
block|{      }
specifier|public
name|FileChunkReference
parameter_list|(
name|long
name|stp
parameter_list|,
name|long
name|cb
parameter_list|)
block|{
name|this
operator|.
name|stp
operator|=
name|stp
expr_stmt|;
name|this
operator|.
name|cb
operator|=
name|cb
expr_stmt|;
block|}
specifier|public
specifier|static
name|FileChunkReference
name|nil
parameter_list|()
block|{
return|return
operator|new
name|FileChunkReference
argument_list|(
operator|-
literal|1L
argument_list|,
literal|0L
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"FileChunkReference{"
operator|+
literal|"stp="
operator|+
name|stp
operator|+
literal|", cb="
operator|+
name|cb
operator|+
literal|'}'
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|o
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|o
operator|==
literal|null
operator|||
name|getClass
argument_list|()
operator|!=
name|o
operator|.
name|getClass
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
name|FileChunkReference
name|that
init|=
operator|(
name|FileChunkReference
operator|)
name|o
decl_stmt|;
return|return
name|stp
operator|==
name|that
operator|.
name|stp
operator|&&
name|cb
operator|==
name|that
operator|.
name|cb
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|Objects
operator|.
name|hash
argument_list|(
name|stp
argument_list|,
name|cb
argument_list|)
return|;
block|}
specifier|public
name|long
name|getStp
parameter_list|()
block|{
return|return
name|stp
return|;
block|}
specifier|public
name|FileChunkReference
name|setStp
parameter_list|(
name|long
name|stp
parameter_list|)
block|{
name|this
operator|.
name|stp
operator|=
name|stp
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|long
name|getCb
parameter_list|()
block|{
return|return
name|cb
return|;
block|}
specifier|public
name|FileChunkReference
name|setCb
parameter_list|(
name|long
name|cb
parameter_list|)
block|{
name|this
operator|.
name|cb
operator|=
name|cb
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
end_class

end_unit

