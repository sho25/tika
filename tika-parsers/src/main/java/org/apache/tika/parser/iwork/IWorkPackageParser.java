begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|iwork
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|compress
operator|.
name|archivers
operator|.
name|zip
operator|.
name|ZipArchiveEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|compress
operator|.
name|archivers
operator|.
name|zip
operator|.
name|ZipArchiveInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|compress
operator|.
name|archivers
operator|.
name|zip
operator|.
name|ZipFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|detect
operator|.
name|XmlRootExtractor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|exception
operator|.
name|TikaException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|io
operator|.
name|CloseShieldInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|metadata
operator|.
name|Metadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|mime
operator|.
name|MediaType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|AbstractParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|ParseContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|sax
operator|.
name|OfflineContentHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|sax
operator|.
name|XHTMLContentHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|ContentHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_comment
comment|/**  * A parser for the IWork container files. This includes *.key, *.pages and *.numbers files.  * This parser delegates the relevant entries to a {@link ContentHandler} that parsers the content.  *   * Currently supported formats:  *<ol>  *<li>Keynote format version 2.x. Currently only tested with Keynote version 5.x  *<li>Pages format version 1.x. Currently only tested with Pages version 4.0.x  *<li>Numbers format version 1.x. Currently only tested with Numbers version 2.0.x  *</ol>  */
end_comment

begin_class
specifier|public
class|class
name|IWorkPackageParser
extends|extends
name|AbstractParser
block|{
comment|/**      * Serial version UID      */
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
operator|-
literal|2160322853809682372L
decl_stmt|;
comment|/**      * Which files within an iWork file contain the actual content?      */
specifier|public
specifier|final
specifier|static
name|Set
argument_list|<
name|String
argument_list|>
name|IWORK_CONTENT_ENTRIES
init|=
name|Collections
operator|.
name|unmodifiableSet
argument_list|(
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"index.apxl"
argument_list|,
literal|"index.xml"
argument_list|,
literal|"presentation.apxl"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
comment|/**      * All iWork files contain one of these, so we can detect based on it      */
specifier|public
specifier|final
specifier|static
name|String
name|IWORK_COMMON_ENTRY
init|=
literal|"buildVersionHistory.plist"
decl_stmt|;
specifier|public
enum|enum
name|IWORKDocumentType
block|{
name|KEYNOTE
argument_list|(
literal|"http://developer.apple.com/namespaces/keynote2"
argument_list|,
literal|"presentation"
argument_list|,
name|MediaType
operator|.
name|application
argument_list|(
literal|"vnd.apple.keynote"
argument_list|)
argument_list|)
block|,
name|NUMBERS
argument_list|(
literal|"http://developer.apple.com/namespaces/ls"
argument_list|,
literal|"document"
argument_list|,
name|MediaType
operator|.
name|application
argument_list|(
literal|"vnd.apple.numbers"
argument_list|)
argument_list|)
block|,
name|PAGES
argument_list|(
literal|"http://developer.apple.com/namespaces/sl"
argument_list|,
literal|"document"
argument_list|,
name|MediaType
operator|.
name|application
argument_list|(
literal|"vnd.apple.pages"
argument_list|)
argument_list|)
block|;
specifier|private
specifier|final
name|String
name|namespace
decl_stmt|;
specifier|private
specifier|final
name|String
name|part
decl_stmt|;
specifier|private
specifier|final
name|MediaType
name|type
decl_stmt|;
name|IWORKDocumentType
parameter_list|(
name|String
name|namespace
parameter_list|,
name|String
name|part
parameter_list|,
name|MediaType
name|type
parameter_list|)
block|{
name|this
operator|.
name|namespace
operator|=
name|namespace
expr_stmt|;
name|this
operator|.
name|part
operator|=
name|part
expr_stmt|;
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
block|}
specifier|public
name|String
name|getNamespace
parameter_list|()
block|{
return|return
name|namespace
return|;
block|}
specifier|public
name|String
name|getPart
parameter_list|()
block|{
return|return
name|part
return|;
block|}
specifier|public
name|MediaType
name|getType
parameter_list|()
block|{
return|return
name|type
return|;
block|}
specifier|public
specifier|static
name|IWORKDocumentType
name|detectType
parameter_list|(
name|ZipArchiveEntry
name|entry
parameter_list|,
name|ZipFile
name|zip
parameter_list|)
block|{
try|try
block|{
if|if
condition|(
name|entry
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|InputStream
name|stream
init|=
name|zip
operator|.
name|getInputStream
argument_list|(
name|entry
argument_list|)
decl_stmt|;
try|try
block|{
return|return
name|detectType
argument_list|(
name|stream
argument_list|)
return|;
block|}
finally|finally
block|{
name|stream
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
block|}
specifier|public
specifier|static
name|IWORKDocumentType
name|detectType
parameter_list|(
name|ZipArchiveEntry
name|entry
parameter_list|,
name|ZipArchiveInputStream
name|zip
parameter_list|)
block|{
if|if
condition|(
name|entry
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|detectType
argument_list|(
name|zip
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|IWORKDocumentType
name|detectType
parameter_list|(
name|InputStream
name|stream
parameter_list|)
block|{
name|QName
name|qname
init|=
operator|new
name|XmlRootExtractor
argument_list|()
operator|.
name|extractRootElement
argument_list|(
name|stream
argument_list|)
decl_stmt|;
name|String
name|uri
init|=
name|qname
operator|.
name|getNamespaceURI
argument_list|()
decl_stmt|;
name|String
name|local
init|=
name|qname
operator|.
name|getLocalPart
argument_list|()
decl_stmt|;
for|for
control|(
name|IWORKDocumentType
name|type
range|:
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|type
operator|.
name|getNamespace
argument_list|()
operator|.
name|equals
argument_list|(
name|uri
argument_list|)
operator|&&
name|type
operator|.
name|getPart
argument_list|()
operator|.
name|equals
argument_list|(
name|local
argument_list|)
condition|)
block|{
return|return
name|type
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
block|}
comment|/**      * This parser handles all iWorks formats.      */
specifier|private
specifier|final
specifier|static
name|Set
argument_list|<
name|MediaType
argument_list|>
name|supportedTypes
init|=
name|Collections
operator|.
name|unmodifiableSet
argument_list|(
operator|new
name|HashSet
argument_list|<
name|MediaType
argument_list|>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|MediaType
operator|.
name|application
argument_list|(
literal|"vnd.apple.iwork"
argument_list|)
argument_list|,
name|IWORKDocumentType
operator|.
name|KEYNOTE
operator|.
name|getType
argument_list|()
argument_list|,
name|IWORKDocumentType
operator|.
name|NUMBERS
operator|.
name|getType
argument_list|()
argument_list|,
name|IWORKDocumentType
operator|.
name|PAGES
operator|.
name|getType
argument_list|()
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
specifier|public
name|Set
argument_list|<
name|MediaType
argument_list|>
name|getSupportedTypes
parameter_list|(
name|ParseContext
name|context
parameter_list|)
block|{
return|return
name|supportedTypes
return|;
block|}
specifier|public
name|void
name|parse
parameter_list|(
name|InputStream
name|stream
parameter_list|,
name|ContentHandler
name|handler
parameter_list|,
name|Metadata
name|metadata
parameter_list|,
name|ParseContext
name|context
parameter_list|)
throws|throws
name|IOException
throws|,
name|SAXException
throws|,
name|TikaException
block|{
name|ZipArchiveInputStream
name|zip
init|=
operator|new
name|ZipArchiveInputStream
argument_list|(
name|stream
argument_list|)
decl_stmt|;
name|ZipArchiveEntry
name|entry
init|=
name|zip
operator|.
name|getNextZipEntry
argument_list|()
decl_stmt|;
while|while
condition|(
name|entry
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|IWORK_CONTENT_ENTRIES
operator|.
name|contains
argument_list|(
name|entry
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|entry
operator|=
name|zip
operator|.
name|getNextZipEntry
argument_list|()
expr_stmt|;
continue|continue;
block|}
name|InputStream
name|entryStream
init|=
operator|new
name|CloseShieldInputStream
argument_list|(
operator|new
name|BufferedInputStream
argument_list|(
name|zip
argument_list|,
literal|4096
argument_list|)
argument_list|)
decl_stmt|;
name|entryStream
operator|.
name|mark
argument_list|(
literal|4096
argument_list|)
expr_stmt|;
name|IWORKDocumentType
name|type
init|=
name|IWORKDocumentType
operator|.
name|detectType
argument_list|(
name|entryStream
argument_list|)
decl_stmt|;
name|entryStream
operator|.
name|reset
argument_list|()
expr_stmt|;
if|if
condition|(
name|type
operator|!=
literal|null
condition|)
block|{
name|XHTMLContentHandler
name|xhtml
init|=
operator|new
name|XHTMLContentHandler
argument_list|(
name|handler
argument_list|,
name|metadata
argument_list|)
decl_stmt|;
name|ContentHandler
name|contentHandler
decl_stmt|;
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|KEYNOTE
case|:
name|contentHandler
operator|=
operator|new
name|KeynoteContentHandler
argument_list|(
name|xhtml
argument_list|,
name|metadata
argument_list|)
expr_stmt|;
break|break;
case|case
name|NUMBERS
case|:
name|contentHandler
operator|=
operator|new
name|NumbersContentHandler
argument_list|(
name|xhtml
argument_list|,
name|metadata
argument_list|)
expr_stmt|;
break|break;
case|case
name|PAGES
case|:
name|contentHandler
operator|=
operator|new
name|PagesContentHandler
argument_list|(
name|xhtml
argument_list|,
name|metadata
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|TikaException
argument_list|(
literal|"Unhandled iWorks file "
operator|+
name|type
argument_list|)
throw|;
block|}
name|metadata
operator|.
name|add
argument_list|(
name|Metadata
operator|.
name|CONTENT_TYPE
argument_list|,
name|type
operator|.
name|getType
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|xhtml
operator|.
name|startDocument
argument_list|()
expr_stmt|;
name|context
operator|.
name|getSAXParser
argument_list|()
operator|.
name|parse
argument_list|(
name|entryStream
argument_list|,
operator|new
name|OfflineContentHandler
argument_list|(
name|contentHandler
argument_list|)
argument_list|)
expr_stmt|;
name|xhtml
operator|.
name|endDocument
argument_list|()
expr_stmt|;
block|}
name|entry
operator|=
name|zip
operator|.
name|getNextZipEntry
argument_list|()
expr_stmt|;
block|}
name|zip
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

