begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|journal
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|exception
operator|.
name|TikaException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|metadata
operator|.
name|Metadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|ParseContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|utils
operator|.
name|XMLReaderUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|NamedNodeMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|NodeList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_class
specifier|public
class|class
name|TEIDOMParser
block|{
specifier|public
name|TEIDOMParser
parameter_list|()
block|{     }
specifier|public
name|Metadata
name|parse
parameter_list|(
name|String
name|source
parameter_list|,
name|ParseContext
name|parseContext
parameter_list|)
throws|throws
name|TikaException
throws|,
name|SAXException
throws|,
name|IOException
block|{
name|Document
name|root
init|=
name|XMLReaderUtils
operator|.
name|buildDOM
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|source
operator|.
name|getBytes
argument_list|(
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
argument_list|)
argument_list|,
name|parseContext
argument_list|)
decl_stmt|;
name|Metadata
name|metadata
init|=
operator|new
name|Metadata
argument_list|()
decl_stmt|;
name|createGrobidMetadata
argument_list|(
name|source
argument_list|,
name|root
operator|.
name|getDocumentElement
argument_list|()
argument_list|,
name|metadata
argument_list|)
expr_stmt|;
return|return
name|metadata
return|;
block|}
specifier|private
name|void
name|createGrobidMetadata
parameter_list|(
name|String
name|source
parameter_list|,
name|Element
name|root
parameter_list|,
name|Metadata
name|metadata
parameter_list|)
block|{
if|if
condition|(
name|root
operator|!=
literal|null
condition|)
block|{
name|Node
name|text
init|=
name|getFirstChild
argument_list|(
name|root
operator|.
name|getChildNodes
argument_list|()
argument_list|,
literal|"text"
argument_list|)
decl_stmt|;
if|if
condition|(
name|text
operator|!=
literal|null
condition|)
block|{
name|parseText
argument_list|(
name|text
argument_list|,
name|metadata
argument_list|)
expr_stmt|;
block|}
name|Node
name|teiHeader
init|=
name|getFirstChild
argument_list|(
name|root
operator|.
name|getChildNodes
argument_list|()
argument_list|,
literal|"teiHeader"
argument_list|)
decl_stmt|;
name|Node
name|fileDesc
init|=
name|getFirstChild
argument_list|(
name|teiHeader
operator|.
name|getChildNodes
argument_list|()
argument_list|,
literal|"fileDesc"
argument_list|)
decl_stmt|;
if|if
condition|(
name|fileDesc
operator|!=
literal|null
condition|)
block|{
name|parseFileDesc
argument_list|(
name|fileDesc
argument_list|,
name|metadata
argument_list|)
expr_stmt|;
block|}
name|Node
name|profileDesc
init|=
name|getFirstChild
argument_list|(
name|teiHeader
operator|.
name|getChildNodes
argument_list|()
argument_list|,
literal|"profileDesc"
argument_list|)
decl_stmt|;
if|if
condition|(
name|profileDesc
operator|!=
literal|null
condition|)
block|{
name|parseProfileDesc
argument_list|(
name|profileDesc
argument_list|,
name|metadata
argument_list|)
expr_stmt|;
block|}
block|}
name|addStaticMet
argument_list|(
name|source
argument_list|,
name|root
argument_list|,
name|metadata
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|addStaticMet
parameter_list|(
name|String
name|source
parameter_list|,
name|Element
name|obj
parameter_list|,
name|Metadata
name|metadata
parameter_list|)
block|{
name|metadata
operator|.
name|add
argument_list|(
literal|"Class"
argument_list|,
name|Metadata
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
comment|//no longer available after we got rid of json.org's and its .toJSONObject()
comment|//        metadata.add("TEIJSONSource", obj.toString());
name|metadata
operator|.
name|add
argument_list|(
literal|"TEIXMLSource"
argument_list|,
name|source
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|parseText
parameter_list|(
name|Node
name|text
parameter_list|,
name|Metadata
name|metadata
parameter_list|)
block|{
name|String
name|lang
init|=
name|getFirstAttribute
argument_list|(
name|text
argument_list|,
literal|"xml"
argument_list|,
literal|"lang"
argument_list|)
decl_stmt|;
if|if
condition|(
name|lang
operator|!=
literal|null
condition|)
block|{
name|metadata
operator|.
name|add
argument_list|(
literal|"Language"
argument_list|,
name|lang
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|parseFileDesc
parameter_list|(
name|Node
name|fileDesc
parameter_list|,
name|Metadata
name|metadata
parameter_list|)
block|{
name|Node
name|titleStmt
init|=
name|getFirstChild
argument_list|(
name|fileDesc
operator|.
name|getChildNodes
argument_list|()
argument_list|,
literal|"titleStmt"
argument_list|)
decl_stmt|;
if|if
condition|(
name|titleStmt
operator|!=
literal|null
condition|)
block|{
name|parseTitleStmt
argument_list|(
name|titleStmt
argument_list|,
name|metadata
argument_list|)
expr_stmt|;
block|}
name|Node
name|sourceDesc
init|=
name|getFirstChild
argument_list|(
name|fileDesc
operator|.
name|getChildNodes
argument_list|()
argument_list|,
literal|"sourceDesc"
argument_list|)
decl_stmt|;
if|if
condition|(
name|sourceDesc
operator|!=
literal|null
condition|)
block|{
name|parseSourceDesc
argument_list|(
name|sourceDesc
argument_list|,
name|metadata
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|parseTitleStmt
parameter_list|(
name|Node
name|titleStmt
parameter_list|,
name|Metadata
name|metadata
parameter_list|)
block|{
name|Node
name|title
init|=
name|getFirstChild
argument_list|(
name|titleStmt
operator|.
name|getChildNodes
argument_list|()
argument_list|,
literal|"title"
argument_list|)
decl_stmt|;
if|if
condition|(
name|title
operator|!=
literal|null
condition|)
block|{
name|String
name|titleText
init|=
name|title
operator|.
name|getTextContent
argument_list|()
decl_stmt|;
if|if
condition|(
name|titleText
operator|!=
literal|null
condition|)
block|{
name|metadata
operator|.
name|add
argument_list|(
literal|"Title"
argument_list|,
name|titleText
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|parseSourceDesc
parameter_list|(
name|Node
name|sourceDesc
parameter_list|,
name|Metadata
name|metadata
parameter_list|)
block|{
name|Node
name|biblStruct
init|=
name|getFirstChild
argument_list|(
name|sourceDesc
operator|.
name|getChildNodes
argument_list|()
argument_list|,
literal|"biblStruct"
argument_list|)
decl_stmt|;
if|if
condition|(
name|biblStruct
operator|!=
literal|null
condition|)
block|{
name|parseBiblStruct
argument_list|(
name|biblStruct
argument_list|,
name|metadata
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|parseBiblStruct
parameter_list|(
name|Node
name|biblStruct
parameter_list|,
name|Metadata
name|metadata
parameter_list|)
block|{
name|Node
name|analytic
init|=
name|getFirstChild
argument_list|(
name|biblStruct
operator|.
name|getChildNodes
argument_list|()
argument_list|,
literal|"analytic"
argument_list|)
decl_stmt|;
if|if
condition|(
name|analytic
operator|!=
literal|null
condition|)
block|{
name|List
argument_list|<
name|Node
argument_list|>
name|authorNodes
init|=
name|getChildNodes
argument_list|(
name|analytic
operator|.
name|getChildNodes
argument_list|()
argument_list|,
literal|"author"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Author
argument_list|>
name|authorList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Node
name|authorNode
range|:
name|authorNodes
control|)
block|{
name|parseAuthor
argument_list|(
name|authorNode
argument_list|,
name|authorList
argument_list|)
expr_stmt|;
block|}
name|metadata
operator|.
name|add
argument_list|(
literal|"Address"
argument_list|,
name|getMetadataAddresses
argument_list|(
name|authorList
argument_list|)
argument_list|)
expr_stmt|;
name|metadata
operator|.
name|add
argument_list|(
literal|"Affiliation"
argument_list|,
name|getMetadataAffiliations
argument_list|(
name|authorList
argument_list|)
argument_list|)
expr_stmt|;
name|metadata
operator|.
name|add
argument_list|(
literal|"Authors"
argument_list|,
name|getMetadataAuthors
argument_list|(
name|authorList
argument_list|)
argument_list|)
expr_stmt|;
name|metadata
operator|.
name|add
argument_list|(
literal|"FullAffiliations"
argument_list|,
name|getMetadataFullAffiliations
argument_list|(
name|authorList
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|metadata
operator|.
name|add
argument_list|(
literal|"Error"
argument_list|,
literal|"Unable to parse: no analytic section in JSON"
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|String
name|getMetadataFullAffiliations
parameter_list|(
name|List
argument_list|<
name|Author
argument_list|>
name|authorList
parameter_list|)
block|{
name|List
argument_list|<
name|Affiliation
argument_list|>
name|unique
init|=
operator|new
name|ArrayList
argument_list|<
name|Affiliation
argument_list|>
argument_list|()
decl_stmt|;
name|StringBuilder
name|metAffils
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|Author
name|a
range|:
name|authorList
control|)
block|{
for|for
control|(
name|Affiliation
name|af
range|:
name|a
operator|.
name|getAffiliations
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|unique
operator|.
name|contains
argument_list|(
name|af
argument_list|)
condition|)
block|{
name|unique
operator|.
name|add
argument_list|(
name|af
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|metAffils
operator|.
name|append
argument_list|(
literal|"["
argument_list|)
expr_stmt|;
for|for
control|(
name|Affiliation
name|af
range|:
name|unique
control|)
block|{
name|metAffils
operator|.
name|append
argument_list|(
name|af
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|metAffils
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
block|}
name|metAffils
operator|.
name|append
argument_list|(
name|metAffils
operator|.
name|deleteCharAt
argument_list|(
name|metAffils
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|metAffils
operator|.
name|append
argument_list|(
literal|"]"
argument_list|)
expr_stmt|;
return|return
name|metAffils
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|private
name|String
name|getMetadataAuthors
parameter_list|(
name|List
argument_list|<
name|Author
argument_list|>
name|authorList
parameter_list|)
block|{
comment|// generates Chris A. Mattmann 1, 2 Daniel J. Crichton 1 Nenad Medvidovic 2
comment|// Steve Hughes 1
name|List
argument_list|<
name|Affiliation
argument_list|>
name|unique
init|=
operator|new
name|ArrayList
argument_list|<
name|Affiliation
argument_list|>
argument_list|()
decl_stmt|;
name|StringBuilder
name|metAuthors
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|Author
name|a
range|:
name|authorList
control|)
block|{
for|for
control|(
name|Affiliation
name|af
range|:
name|a
operator|.
name|getAffiliations
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|unique
operator|.
name|contains
argument_list|(
name|af
argument_list|)
condition|)
block|{
name|unique
operator|.
name|add
argument_list|(
name|af
argument_list|)
expr_stmt|;
block|}
block|}
block|}
for|for
control|(
name|Author
name|a
range|:
name|authorList
control|)
block|{
name|metAuthors
operator|.
name|append
argument_list|(
name|printOrBlank
argument_list|(
name|a
operator|.
name|getFirstName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|metAuthors
operator|.
name|append
argument_list|(
name|printOrBlank
argument_list|(
name|a
operator|.
name|getMiddleName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|metAuthors
operator|.
name|append
argument_list|(
name|printOrBlank
argument_list|(
name|a
operator|.
name|getSurName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|StringBuilder
name|affilBuilder
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
name|unique
operator|.
name|size
argument_list|()
condition|;
name|idx
operator|++
control|)
block|{
name|Affiliation
name|af
init|=
name|unique
operator|.
name|get
argument_list|(
name|idx
argument_list|)
decl_stmt|;
if|if
condition|(
name|a
operator|.
name|getAffiliations
argument_list|()
operator|.
name|contains
argument_list|(
name|af
argument_list|)
condition|)
block|{
name|affilBuilder
operator|.
name|append
argument_list|(
operator|(
name|idx
operator|+
literal|1
operator|)
argument_list|)
expr_stmt|;
name|affilBuilder
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|affilBuilder
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
name|affilBuilder
operator|.
name|deleteCharAt
argument_list|(
name|affilBuilder
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
name|metAuthors
operator|.
name|append
argument_list|(
name|affilBuilder
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|metAuthors
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
block|}
return|return
name|metAuthors
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|private
name|String
name|getMetadataAffiliations
parameter_list|(
name|List
argument_list|<
name|Author
argument_list|>
name|authorList
parameter_list|)
block|{
comment|// generates 1 Jet Propulsion Laboratory California Institute of Technology
comment|// ; 2 Computer Science Department University of Southern California
name|List
argument_list|<
name|Affiliation
argument_list|>
name|unique
init|=
operator|new
name|ArrayList
argument_list|<
name|Affiliation
argument_list|>
argument_list|()
decl_stmt|;
name|StringBuilder
name|metAffil
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|Author
name|a
range|:
name|authorList
control|)
block|{
for|for
control|(
name|Affiliation
name|af
range|:
name|a
operator|.
name|getAffiliations
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|unique
operator|.
name|contains
argument_list|(
name|af
argument_list|)
condition|)
block|{
name|unique
operator|.
name|add
argument_list|(
name|af
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|int
name|count
init|=
literal|1
decl_stmt|;
for|for
control|(
name|Affiliation
name|a
range|:
name|unique
control|)
block|{
name|metAffil
operator|.
name|append
argument_list|(
name|count
argument_list|)
expr_stmt|;
name|metAffil
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
name|metAffil
operator|.
name|append
argument_list|(
name|a
operator|.
name|getOrgName
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|metAffil
operator|.
name|deleteCharAt
argument_list|(
name|metAffil
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
name|metAffil
operator|.
name|append
argument_list|(
literal|"; "
argument_list|)
expr_stmt|;
name|count
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|count
operator|>
literal|1
condition|)
block|{
name|metAffil
operator|.
name|deleteCharAt
argument_list|(
name|metAffil
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
name|metAffil
operator|.
name|deleteCharAt
argument_list|(
name|metAffil
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
return|return
name|metAffil
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|private
name|String
name|getMetadataAddresses
parameter_list|(
name|List
argument_list|<
name|Author
argument_list|>
name|authorList
parameter_list|)
block|{
comment|// generates: "Pasadena, CA 91109, USA Los Angeles, CA 90089, USA",
name|List
argument_list|<
name|Address
argument_list|>
name|unique
init|=
operator|new
name|ArrayList
argument_list|<
name|Address
argument_list|>
argument_list|()
decl_stmt|;
name|StringBuilder
name|metAddress
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|Author
name|a
range|:
name|authorList
control|)
block|{
for|for
control|(
name|Affiliation
name|af
range|:
name|a
operator|.
name|getAffiliations
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|unique
operator|.
name|contains
argument_list|(
name|af
operator|.
name|getAddress
argument_list|()
argument_list|)
condition|)
block|{
name|unique
operator|.
name|add
argument_list|(
name|af
operator|.
name|getAddress
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
for|for
control|(
name|Address
name|ad
range|:
name|unique
control|)
block|{
name|metAddress
operator|.
name|append
argument_list|(
name|ad
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|metAddress
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
block|}
return|return
name|metAddress
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|private
name|void
name|parseAuthor
parameter_list|(
name|Node
name|authorNode
parameter_list|,
name|List
argument_list|<
name|Author
argument_list|>
name|authorList
parameter_list|)
block|{
name|Author
name|author
init|=
operator|new
name|Author
argument_list|()
decl_stmt|;
name|Node
name|persName
init|=
name|getFirstChild
argument_list|(
name|authorNode
operator|.
name|getChildNodes
argument_list|()
argument_list|,
literal|"persName"
argument_list|)
decl_stmt|;
if|if
condition|(
name|persName
operator|!=
literal|null
condition|)
block|{
name|List
argument_list|<
name|Node
argument_list|>
name|forenames
init|=
name|getChildNodes
argument_list|(
name|persName
operator|.
name|getChildNodes
argument_list|()
argument_list|,
literal|"forename"
argument_list|)
decl_stmt|;
for|for
control|(
name|Node
name|forenameNode
range|:
name|forenames
control|)
block|{
name|parseNamePart
argument_list|(
name|forenameNode
argument_list|,
name|author
argument_list|)
expr_stmt|;
block|}
name|Node
name|surnameNode
init|=
name|getFirstChild
argument_list|(
name|persName
operator|.
name|getChildNodes
argument_list|()
argument_list|,
literal|"surname"
argument_list|)
decl_stmt|;
if|if
condition|(
name|surnameNode
operator|!=
literal|null
condition|)
block|{
name|String
name|surnameContent
init|=
name|surnameNode
operator|.
name|getTextContent
argument_list|()
decl_stmt|;
if|if
condition|(
name|surnameContent
operator|!=
literal|null
condition|)
block|{
name|author
operator|.
name|setSurName
argument_list|(
name|surnameContent
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|List
argument_list|<
name|Node
argument_list|>
name|affiliationNodes
init|=
name|getChildNodes
argument_list|(
name|authorNode
operator|.
name|getChildNodes
argument_list|()
argument_list|,
literal|"affiliation"
argument_list|)
decl_stmt|;
for|for
control|(
name|Node
name|affiliationNode
range|:
name|affiliationNodes
control|)
block|{
name|parseOneAffiliation
argument_list|(
name|affiliationNode
argument_list|,
name|author
argument_list|)
expr_stmt|;
block|}
name|authorList
operator|.
name|add
argument_list|(
name|author
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|parseNamePart
parameter_list|(
name|Node
name|namePart
parameter_list|,
name|Author
name|author
parameter_list|)
block|{
name|String
name|type
init|=
name|getFirstAttribute
argument_list|(
name|namePart
argument_list|,
literal|null
argument_list|,
literal|"type"
argument_list|)
decl_stmt|;
name|String
name|content
init|=
name|namePart
operator|.
name|getTextContent
argument_list|()
decl_stmt|;
if|if
condition|(
name|type
operator|!=
literal|null
operator|&&
name|content
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|type
operator|.
name|equals
argument_list|(
literal|"first"
argument_list|)
condition|)
block|{
name|author
operator|.
name|setFirstName
argument_list|(
name|content
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|type
operator|.
name|equals
argument_list|(
literal|"middle"
argument_list|)
condition|)
block|{
name|author
operator|.
name|setMiddleName
argument_list|(
name|content
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|parseOneAffiliation
parameter_list|(
name|Node
name|affiliationNode
parameter_list|,
name|Author
name|author
parameter_list|)
block|{
name|Affiliation
name|affiliation
init|=
operator|new
name|Affiliation
argument_list|()
decl_stmt|;
name|Node
name|address
init|=
name|getFirstChild
argument_list|(
name|affiliationNode
operator|.
name|getChildNodes
argument_list|()
argument_list|,
literal|"address"
argument_list|)
decl_stmt|;
if|if
condition|(
name|address
operator|!=
literal|null
condition|)
block|{
name|parseAddress
argument_list|(
name|address
argument_list|,
name|affiliation
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|Node
argument_list|>
name|orgNameNodes
init|=
name|getChildNodes
argument_list|(
name|affiliationNode
operator|.
name|getChildNodes
argument_list|()
argument_list|,
literal|"orgName"
argument_list|)
decl_stmt|;
name|OrgName
name|orgName
init|=
operator|new
name|OrgName
argument_list|()
decl_stmt|;
for|for
control|(
name|Node
name|orgNameNode
range|:
name|orgNameNodes
control|)
block|{
name|parseOrgName
argument_list|(
name|orgNameNode
argument_list|,
name|orgName
argument_list|)
expr_stmt|;
block|}
name|affiliation
operator|.
name|setOrgName
argument_list|(
name|orgName
argument_list|)
expr_stmt|;
name|author
operator|.
name|getAffiliations
argument_list|()
operator|.
name|add
argument_list|(
name|affiliation
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|parseAddress
parameter_list|(
name|Node
name|addressNode
parameter_list|,
name|Affiliation
name|affiliation
parameter_list|)
block|{
name|Address
name|address
init|=
operator|new
name|Address
argument_list|()
decl_stmt|;
name|Node
name|region
init|=
name|getFirstChild
argument_list|(
name|addressNode
operator|.
name|getChildNodes
argument_list|()
argument_list|,
literal|"region"
argument_list|)
decl_stmt|;
if|if
condition|(
name|region
operator|!=
literal|null
operator|&&
name|region
operator|.
name|getTextContent
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|address
operator|.
name|setRegion
argument_list|(
name|region
operator|.
name|getTextContent
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Node
name|postCode
init|=
name|getFirstChild
argument_list|(
name|addressNode
operator|.
name|getChildNodes
argument_list|()
argument_list|,
literal|"postCode"
argument_list|)
decl_stmt|;
if|if
condition|(
name|postCode
operator|!=
literal|null
operator|&&
name|postCode
operator|.
name|getTextContent
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|address
operator|.
name|setPostCode
argument_list|(
name|postCode
operator|.
name|getTextContent
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Node
name|settlementNode
init|=
name|getFirstChild
argument_list|(
name|addressNode
operator|.
name|getChildNodes
argument_list|()
argument_list|,
literal|"settlement"
argument_list|)
decl_stmt|;
if|if
condition|(
name|settlementNode
operator|!=
literal|null
operator|&&
name|settlementNode
operator|.
name|getTextContent
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|address
operator|.
name|setSettlment
argument_list|(
name|settlementNode
operator|.
name|getTextContent
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Node
name|countryNode
init|=
name|getFirstChild
argument_list|(
name|addressNode
operator|.
name|getChildNodes
argument_list|()
argument_list|,
literal|"country"
argument_list|)
decl_stmt|;
if|if
condition|(
name|countryNode
operator|!=
literal|null
condition|)
block|{
name|Country
name|country
init|=
operator|new
name|Country
argument_list|()
decl_stmt|;
name|String
name|key
init|=
name|getFirstAttribute
argument_list|(
name|countryNode
argument_list|,
literal|null
argument_list|,
literal|"key"
argument_list|)
decl_stmt|;
if|if
condition|(
name|key
operator|!=
literal|null
condition|)
block|{
name|country
operator|.
name|setKey
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
name|String
name|content
init|=
name|countryNode
operator|.
name|getTextContent
argument_list|()
decl_stmt|;
if|if
condition|(
name|content
operator|!=
literal|null
condition|)
block|{
name|country
operator|.
name|setContent
argument_list|(
name|content
argument_list|)
expr_stmt|;
block|}
name|address
operator|.
name|setCountry
argument_list|(
name|country
argument_list|)
expr_stmt|;
block|}
name|affiliation
operator|.
name|setAddress
argument_list|(
name|address
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|parseOrgName
parameter_list|(
name|Node
name|orgNode
parameter_list|,
name|OrgName
name|orgName
parameter_list|)
block|{
name|OrgTypeName
name|typeName
init|=
operator|new
name|OrgTypeName
argument_list|()
decl_stmt|;
name|String
name|orgContent
init|=
name|orgNode
operator|.
name|getTextContent
argument_list|()
decl_stmt|;
if|if
condition|(
name|orgContent
operator|!=
literal|null
condition|)
block|{
name|typeName
operator|.
name|setName
argument_list|(
name|orgContent
argument_list|)
expr_stmt|;
block|}
name|String
name|orgType
init|=
name|getFirstAttribute
argument_list|(
name|orgNode
argument_list|,
literal|null
argument_list|,
literal|"type"
argument_list|)
decl_stmt|;
if|if
condition|(
name|orgType
operator|!=
literal|null
condition|)
block|{
name|typeName
operator|.
name|setType
argument_list|(
name|orgType
argument_list|)
expr_stmt|;
block|}
name|orgName
operator|.
name|getTypeNames
argument_list|()
operator|.
name|add
argument_list|(
name|typeName
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|parseProfileDesc
parameter_list|(
name|Node
name|profileDesc
parameter_list|,
name|Metadata
name|metadata
parameter_list|)
block|{
name|Node
name|abstractNode
init|=
name|getFirstChild
argument_list|(
name|profileDesc
operator|.
name|getChildNodes
argument_list|()
argument_list|,
literal|"abstract"
argument_list|)
decl_stmt|;
if|if
condition|(
name|abstractNode
operator|!=
literal|null
condition|)
block|{
name|Node
name|pNode
init|=
name|getFirstChild
argument_list|(
name|abstractNode
operator|.
name|getChildNodes
argument_list|()
argument_list|,
literal|"p"
argument_list|)
decl_stmt|;
if|if
condition|(
name|pNode
operator|!=
literal|null
condition|)
block|{
name|metadata
operator|.
name|add
argument_list|(
literal|"Abstract"
argument_list|,
name|pNode
operator|.
name|getTextContent
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|Node
name|textClassNode
init|=
name|getFirstChild
argument_list|(
name|profileDesc
operator|.
name|getChildNodes
argument_list|()
argument_list|,
literal|"textClass"
argument_list|)
decl_stmt|;
if|if
condition|(
name|textClassNode
operator|!=
literal|null
condition|)
block|{
name|Node
name|keywordsNode
init|=
name|getFirstChild
argument_list|(
name|textClassNode
operator|.
name|getChildNodes
argument_list|()
argument_list|,
literal|"keywords"
argument_list|)
decl_stmt|;
if|if
condition|(
name|keywordsNode
operator|!=
literal|null
condition|)
block|{
name|List
argument_list|<
name|Node
argument_list|>
name|terms
init|=
name|getChildNodes
argument_list|(
name|keywordsNode
operator|.
name|getChildNodes
argument_list|()
argument_list|,
literal|"term"
argument_list|)
decl_stmt|;
if|if
condition|(
name|terms
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
comment|// test AJ15.pdf
name|metadata
operator|.
name|add
argument_list|(
literal|"Keyword"
argument_list|,
name|keywordsNode
operator|.
name|getTextContent
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|Node
name|term
range|:
name|terms
control|)
block|{
name|metadata
operator|.
name|add
argument_list|(
literal|"Keyword"
argument_list|,
name|term
operator|.
name|getTextContent
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
specifier|private
name|String
name|printOrBlank
parameter_list|(
name|String
name|val
parameter_list|)
block|{
if|if
condition|(
name|val
operator|!=
literal|null
operator|&&
operator|!
name|val
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|)
block|{
return|return
name|val
operator|+
literal|" "
return|;
block|}
else|else
return|return
literal|" "
return|;
block|}
class|class
name|Author
block|{
specifier|private
name|String
name|surName
decl_stmt|;
specifier|private
name|String
name|middleName
decl_stmt|;
specifier|private
name|String
name|firstName
decl_stmt|;
specifier|private
name|List
argument_list|<
name|Affiliation
argument_list|>
name|affiliations
decl_stmt|;
specifier|public
name|Author
parameter_list|()
block|{
name|this
operator|.
name|surName
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|middleName
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|firstName
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|affiliations
operator|=
operator|new
name|ArrayList
argument_list|<
name|Affiliation
argument_list|>
argument_list|()
expr_stmt|;
block|}
comment|/**          * @return the surName          */
specifier|public
name|String
name|getSurName
parameter_list|()
block|{
return|return
name|surName
return|;
block|}
comment|/**          * @param surName the surName to set          */
specifier|public
name|void
name|setSurName
parameter_list|(
name|String
name|surName
parameter_list|)
block|{
name|this
operator|.
name|surName
operator|=
name|surName
expr_stmt|;
block|}
comment|/**          * @return the middleName          */
specifier|public
name|String
name|getMiddleName
parameter_list|()
block|{
return|return
name|middleName
return|;
block|}
comment|/**          * @param middleName the middleName to set          */
specifier|public
name|void
name|setMiddleName
parameter_list|(
name|String
name|middleName
parameter_list|)
block|{
name|this
operator|.
name|middleName
operator|=
name|middleName
expr_stmt|;
block|}
comment|/**          * @return the firstName          */
specifier|public
name|String
name|getFirstName
parameter_list|()
block|{
return|return
name|firstName
return|;
block|}
comment|/**          * @param firstName the firstName to set          */
specifier|public
name|void
name|setFirstName
parameter_list|(
name|String
name|firstName
parameter_list|)
block|{
name|this
operator|.
name|firstName
operator|=
name|firstName
expr_stmt|;
block|}
comment|/**          * @return the affiliations          */
specifier|public
name|List
argument_list|<
name|Affiliation
argument_list|>
name|getAffiliations
parameter_list|()
block|{
return|return
name|affiliations
return|;
block|}
comment|/**          * @param affiliations the affiliations to set          */
specifier|public
name|void
name|setAffiliations
parameter_list|(
name|List
argument_list|<
name|Affiliation
argument_list|>
name|affiliations
parameter_list|)
block|{
name|this
operator|.
name|affiliations
operator|=
name|affiliations
expr_stmt|;
block|}
comment|/*          * (non-Javadoc)          *          * @see java.lang.Object#toString()          */
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"Author [surName="
operator|+
name|surName
operator|+
literal|", middleName="
operator|+
name|middleName
operator|!=
literal|null
condition|?
name|middleName
else|:
literal|""
operator|+
literal|", firstName="
operator|+
name|firstName
operator|+
literal|", affiliations="
operator|+
name|affiliations
operator|+
literal|"]"
return|;
block|}
block|}
class|class
name|Affiliation
block|{
specifier|private
name|OrgName
name|orgName
decl_stmt|;
specifier|private
name|Address
name|address
decl_stmt|;
specifier|public
name|Affiliation
parameter_list|()
block|{
name|this
operator|.
name|orgName
operator|=
operator|new
name|OrgName
argument_list|()
expr_stmt|;
name|this
operator|.
name|address
operator|=
operator|new
name|Address
argument_list|()
expr_stmt|;
block|}
comment|/**          * @return the orgName          */
specifier|public
name|OrgName
name|getOrgName
parameter_list|()
block|{
return|return
name|orgName
return|;
block|}
comment|/**          * @param orgName the orgName to set          */
specifier|public
name|void
name|setOrgName
parameter_list|(
name|OrgName
name|orgName
parameter_list|)
block|{
name|this
operator|.
name|orgName
operator|=
name|orgName
expr_stmt|;
block|}
comment|/**          * @return the address          */
specifier|public
name|Address
name|getAddress
parameter_list|()
block|{
return|return
name|address
return|;
block|}
comment|/**          * @param address the address to set          */
specifier|public
name|void
name|setAddress
parameter_list|(
name|Address
name|address
parameter_list|)
block|{
name|this
operator|.
name|address
operator|=
name|address
expr_stmt|;
block|}
comment|/*          * (non-Javadoc)          *          * @see java.lang.Object#equals(java.lang.Object)          */
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
name|Affiliation
name|otherA
init|=
operator|(
name|Affiliation
operator|)
name|obj
decl_stmt|;
return|return
name|this
operator|.
name|getAddress
argument_list|()
operator|.
name|equals
argument_list|(
name|otherA
operator|.
name|getAddress
argument_list|()
argument_list|)
operator|&&
name|this
operator|.
name|getOrgName
argument_list|()
operator|.
name|equals
argument_list|(
name|otherA
operator|.
name|getOrgName
argument_list|()
argument_list|)
return|;
block|}
comment|/*          * (non-Javadoc)          *          * @see java.lang.Object#toString()          */
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"Affiliation {orgName="
operator|+
name|orgName
operator|+
literal|", address="
operator|+
name|address
operator|+
literal|"}"
return|;
block|}
block|}
class|class
name|OrgName
block|{
specifier|private
name|List
argument_list|<
name|OrgTypeName
argument_list|>
name|typeNames
decl_stmt|;
specifier|public
name|OrgName
parameter_list|()
block|{
name|this
operator|.
name|typeNames
operator|=
operator|new
name|ArrayList
argument_list|<
name|OrgTypeName
argument_list|>
argument_list|()
expr_stmt|;
block|}
comment|/**          * @return the typeNames          */
specifier|public
name|List
argument_list|<
name|OrgTypeName
argument_list|>
name|getTypeNames
parameter_list|()
block|{
return|return
name|typeNames
return|;
block|}
comment|/**          * @param typeNames the typeNames to set          */
specifier|public
name|void
name|setTypeNames
parameter_list|(
name|List
argument_list|<
name|OrgTypeName
argument_list|>
name|typeNames
parameter_list|)
block|{
name|this
operator|.
name|typeNames
operator|=
name|typeNames
expr_stmt|;
block|}
comment|/*      * (non-Javadoc)      *       * @see java.lang.Object#toString()      */
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|builder
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|OrgTypeName
name|on
range|:
name|this
operator|.
name|typeNames
control|)
block|{
name|builder
operator|.
name|append
argument_list|(
name|on
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/*          * (non-Javadoc)          *          * @see java.lang.Object#equals(java.lang.Object)          */
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
name|OrgName
name|otherA
init|=
operator|(
name|OrgName
operator|)
name|obj
decl_stmt|;
if|if
condition|(
name|otherA
operator|.
name|getTypeNames
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|this
operator|.
name|typeNames
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
else|else
block|{
return|return
name|this
operator|.
name|typeNames
operator|.
name|size
argument_list|()
operator|==
name|otherA
operator|.
name|getTypeNames
argument_list|()
operator|.
name|size
argument_list|()
return|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|this
operator|.
name|typeNames
operator|==
literal|null
condition|)
block|{
return|return
literal|true
return|;
block|}
else|else
return|return
literal|false
return|;
block|}
block|}
block|}
class|class
name|OrgTypeName
block|{
specifier|private
name|String
name|name
decl_stmt|;
specifier|private
name|String
name|type
decl_stmt|;
specifier|public
name|OrgTypeName
parameter_list|()
block|{
name|this
operator|.
name|name
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|type
operator|=
literal|null
expr_stmt|;
block|}
comment|/**          * @return the name          */
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
comment|/**          * @param name the name to set          */
specifier|public
name|void
name|setName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
block|}
comment|/**          * @return the type          */
specifier|public
name|String
name|getType
parameter_list|()
block|{
return|return
name|type
return|;
block|}
comment|/**          * @param type the type to set          */
specifier|public
name|void
name|setType
parameter_list|(
name|String
name|type
parameter_list|)
block|{
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
block|}
comment|/*          * (non-Javadoc)          *          * @see java.lang.Object#equals(java.lang.Object)          */
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
name|OrgTypeName
name|otherOrgName
init|=
operator|(
name|OrgTypeName
operator|)
name|obj
decl_stmt|;
return|return
name|this
operator|.
name|type
operator|.
name|equals
argument_list|(
name|otherOrgName
operator|.
name|getType
argument_list|()
argument_list|)
operator|&&
name|this
operator|.
name|name
operator|.
name|equals
argument_list|(
name|otherOrgName
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
block|}
specifier|private
class|class
name|Address
block|{
specifier|private
name|String
name|region
decl_stmt|;
specifier|private
name|String
name|postCode
decl_stmt|;
specifier|private
name|String
name|settlment
decl_stmt|;
specifier|private
name|Country
name|country
decl_stmt|;
specifier|public
name|Address
parameter_list|()
block|{
name|this
operator|.
name|region
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|postCode
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|settlment
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|country
operator|=
operator|new
name|Country
argument_list|()
expr_stmt|;
block|}
comment|/**          * @return the region          */
specifier|public
name|String
name|getRegion
parameter_list|()
block|{
return|return
name|region
return|;
block|}
comment|/**          * @param region the region to set          */
specifier|public
name|void
name|setRegion
parameter_list|(
name|String
name|region
parameter_list|)
block|{
name|this
operator|.
name|region
operator|=
name|region
expr_stmt|;
block|}
comment|/**          * @return the postCode          */
specifier|public
name|String
name|getPostCode
parameter_list|()
block|{
return|return
name|postCode
return|;
block|}
comment|/**          * @param postCode the postCode to set          */
specifier|public
name|void
name|setPostCode
parameter_list|(
name|String
name|postCode
parameter_list|)
block|{
name|this
operator|.
name|postCode
operator|=
name|postCode
expr_stmt|;
block|}
comment|/**          * @return the settlment          */
specifier|public
name|String
name|getSettlment
parameter_list|()
block|{
return|return
name|settlment
return|;
block|}
comment|/**          * @param settlment the settlment to set          */
specifier|public
name|void
name|setSettlment
parameter_list|(
name|String
name|settlment
parameter_list|)
block|{
name|this
operator|.
name|settlment
operator|=
name|settlment
expr_stmt|;
block|}
comment|/**          * @return the country          */
specifier|public
name|Country
name|getCountry
parameter_list|()
block|{
return|return
name|country
return|;
block|}
comment|/**          * @param country the country to set          */
specifier|public
name|void
name|setCountry
parameter_list|(
name|Country
name|country
parameter_list|)
block|{
name|this
operator|.
name|country
operator|=
name|country
expr_stmt|;
block|}
comment|/*          * (non-Javadoc)          *          * @see java.lang.Object#equals(java.lang.Object)          */
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
name|Address
name|otherA
init|=
operator|(
name|Address
operator|)
name|obj
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|settlment
operator|==
literal|null
condition|)
block|{
return|return
name|otherA
operator|.
name|getSettlment
argument_list|()
operator|==
literal|null
return|;
block|}
elseif|else
if|if
condition|(
name|this
operator|.
name|country
operator|==
literal|null
condition|)
block|{
return|return
name|otherA
operator|.
name|getCountry
argument_list|()
operator|==
literal|null
return|;
block|}
elseif|else
if|if
condition|(
name|this
operator|.
name|postCode
operator|==
literal|null
condition|)
block|{
return|return
name|otherA
operator|.
name|getPostCode
argument_list|()
operator|==
literal|null
return|;
block|}
elseif|else
if|if
condition|(
name|this
operator|.
name|region
operator|==
literal|null
condition|)
block|{
return|return
name|otherA
operator|.
name|getRegion
argument_list|()
operator|==
literal|null
return|;
block|}
return|return
name|this
operator|.
name|settlment
operator|.
name|equals
argument_list|(
name|otherA
operator|.
name|getSettlment
argument_list|()
argument_list|)
operator|&&
name|this
operator|.
name|country
operator|.
name|equals
argument_list|(
name|otherA
operator|.
name|getCountry
argument_list|()
argument_list|)
operator|&&
name|this
operator|.
name|postCode
operator|.
name|equals
argument_list|(
name|otherA
operator|.
name|getPostCode
argument_list|()
argument_list|)
operator|&&
name|this
operator|.
name|region
operator|.
name|equals
argument_list|(
name|otherA
operator|.
name|getRegion
argument_list|()
argument_list|)
return|;
block|}
comment|/*          * (non-Javadoc)          *          * @see java.lang.Object#toString()          */
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|builder
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|settlment
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|region
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|postCode
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|country
operator|.
name|getContent
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
specifier|private
class|class
name|Country
block|{
specifier|private
name|String
name|key
decl_stmt|;
specifier|private
name|String
name|content
decl_stmt|;
specifier|public
name|Country
parameter_list|()
block|{
name|this
operator|.
name|key
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|content
operator|=
literal|null
expr_stmt|;
block|}
comment|/**          * @return the key          */
specifier|public
name|String
name|getKey
parameter_list|()
block|{
return|return
name|key
return|;
block|}
comment|/**          * @param key the key to set          */
specifier|public
name|void
name|setKey
parameter_list|(
name|String
name|key
parameter_list|)
block|{
name|this
operator|.
name|key
operator|=
name|key
expr_stmt|;
block|}
comment|/**          * @return the content          */
specifier|public
name|String
name|getContent
parameter_list|()
block|{
return|return
name|content
return|;
block|}
comment|/**          * @param content the content to set          */
specifier|public
name|void
name|setContent
parameter_list|(
name|String
name|content
parameter_list|)
block|{
name|this
operator|.
name|content
operator|=
name|content
expr_stmt|;
block|}
comment|/*          * (non-Javadoc)          *          * @see java.lang.Object#equals(java.lang.Object)          */
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
name|Country
name|otherC
init|=
operator|(
name|Country
operator|)
name|obj
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|key
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|otherC
operator|.
name|getKey
argument_list|()
operator|!=
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
else|else
block|{
if|if
condition|(
name|this
operator|.
name|content
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|otherC
operator|.
name|getContent
argument_list|()
operator|!=
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
else|else
block|{
return|return
literal|true
return|;
block|}
block|}
else|else
block|{
return|return
name|content
operator|.
name|equals
argument_list|(
name|otherC
operator|.
name|getContent
argument_list|()
argument_list|)
return|;
block|}
block|}
block|}
else|else
block|{
if|if
condition|(
name|this
operator|.
name|content
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|otherC
operator|.
name|getContent
argument_list|()
operator|!=
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
else|else
block|{
return|return
name|this
operator|.
name|key
operator|.
name|equals
argument_list|(
name|otherC
operator|.
name|getKey
argument_list|()
argument_list|)
return|;
block|}
block|}
else|else
block|{
return|return
name|this
operator|.
name|key
operator|.
name|equals
argument_list|(
name|otherC
operator|.
name|getKey
argument_list|()
argument_list|)
operator|&&
name|this
operator|.
name|content
operator|.
name|equals
argument_list|(
name|otherC
operator|.
name|getContent
argument_list|()
argument_list|)
return|;
block|}
block|}
block|}
block|}
comment|//returns first child with this name, null otherwise
specifier|private
specifier|static
name|Node
name|getFirstChild
parameter_list|(
name|NodeList
name|childNodes
parameter_list|,
name|String
name|name
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|childNodes
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Node
name|n
init|=
name|childNodes
operator|.
name|item
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|n
operator|.
name|getNodeName
argument_list|()
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
return|return
name|n
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|private
specifier|static
name|String
name|getFirstAttribute
parameter_list|(
name|Node
name|node
parameter_list|,
name|String
name|ns
parameter_list|,
name|String
name|name
parameter_list|)
block|{
if|if
condition|(
name|node
operator|.
name|hasAttributes
argument_list|()
condition|)
block|{
name|NamedNodeMap
name|attrs
init|=
name|node
operator|.
name|getAttributes
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|attrs
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Node
name|attr
init|=
name|attrs
operator|.
name|item
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|attr
operator|.
name|getLocalName
argument_list|()
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
return|return
name|attr
operator|.
name|getNodeValue
argument_list|()
return|;
block|}
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|private
specifier|static
name|List
argument_list|<
name|Node
argument_list|>
name|getChildNodes
parameter_list|(
name|NodeList
name|childNodes
parameter_list|,
name|String
name|localName
parameter_list|)
block|{
name|List
argument_list|<
name|Node
argument_list|>
name|ret
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|childNodes
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Node
name|child
init|=
name|childNodes
operator|.
name|item
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|child
operator|.
name|getLocalName
argument_list|()
operator|!=
literal|null
operator|&&
name|child
operator|.
name|getLocalName
argument_list|()
operator|.
name|equals
argument_list|(
name|localName
argument_list|)
condition|)
block|{
name|ret
operator|.
name|add
argument_list|(
name|child
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|ret
return|;
block|}
block|}
end_class

end_unit

