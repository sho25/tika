begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|csv
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|EOFException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PushbackReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Reader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|input
operator|.
name|ProxyReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|mutable
operator|.
name|MutableInt
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|metadata
operator|.
name|Metadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|mime
operator|.
name|MediaType
import|;
end_import

begin_class
class|class
name|CSVSniffer
block|{
specifier|private
specifier|static
specifier|final
name|int
name|DEFAULT_MARK_LIMIT
init|=
literal|10000
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|double
name|DEFAULT_MIN_CONFIDENCE
init|=
literal|0.50
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|PUSH_BACK
init|=
literal|2
decl_stmt|;
specifier|static
specifier|final
name|int
name|EOF
init|=
operator|-
literal|1
decl_stmt|;
specifier|static
specifier|final
name|int
name|NEW_LINE
init|=
literal|'\n'
decl_stmt|;
specifier|static
specifier|final
name|int
name|CARRIAGE_RETURN
init|=
literal|'\r'
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|SPACE
init|=
literal|' '
decl_stmt|;
specifier|private
specifier|final
name|char
index|[]
name|delimiters
decl_stmt|;
specifier|private
specifier|final
name|int
name|markLimit
decl_stmt|;
specifier|private
specifier|final
name|double
name|minConfidence
decl_stmt|;
name|CSVSniffer
parameter_list|(
name|char
index|[]
name|delimiters
parameter_list|)
block|{
name|this
argument_list|(
name|DEFAULT_MARK_LIMIT
argument_list|,
name|delimiters
argument_list|,
name|DEFAULT_MIN_CONFIDENCE
argument_list|)
expr_stmt|;
block|}
name|CSVSniffer
parameter_list|(
name|int
name|markLimit
parameter_list|,
name|char
index|[]
name|delimiters
parameter_list|,
name|double
name|minConfidence
parameter_list|)
block|{
name|this
operator|.
name|markLimit
operator|=
name|markLimit
expr_stmt|;
name|this
operator|.
name|delimiters
operator|=
name|delimiters
expr_stmt|;
name|this
operator|.
name|minConfidence
operator|=
name|minConfidence
expr_stmt|;
block|}
name|List
argument_list|<
name|CSVResult
argument_list|>
name|sniff
parameter_list|(
name|Reader
name|reader
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|reader
operator|.
name|markSupported
argument_list|()
condition|)
block|{
name|reader
operator|=
operator|new
name|BufferedReader
argument_list|(
name|reader
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|CSVResult
argument_list|>
name|ret
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|char
name|delimiter
range|:
name|delimiters
control|)
block|{
name|reader
operator|.
name|mark
argument_list|(
name|markLimit
argument_list|)
expr_stmt|;
try|try
block|{
name|CSVResult
name|result
init|=
operator|new
name|Snifflet
argument_list|(
name|delimiter
argument_list|)
operator|.
name|sniff
argument_list|(
name|reader
argument_list|)
decl_stmt|;
name|ret
operator|.
name|add
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|reader
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
block|}
name|Collections
operator|.
name|sort
argument_list|(
name|ret
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
comment|/**      * @param reader      * @param metadata      * @return the best result given the detection results or {@link CSVResult#TEXT}      *         if the confidence is not above a threshold.      * @throws IOException      */
name|CSVResult
name|getBest
parameter_list|(
name|Reader
name|reader
parameter_list|,
name|Metadata
name|metadata
parameter_list|)
throws|throws
name|IOException
block|{
comment|//TODO: take into consideration the filename.  Perhaps require
comment|//a higher confidence if detection contradicts filename?
name|List
argument_list|<
name|CSVResult
argument_list|>
name|results
init|=
name|sniff
argument_list|(
name|reader
argument_list|)
decl_stmt|;
if|if
condition|(
name|results
operator|==
literal|null
operator|||
name|results
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
name|CSVResult
operator|.
name|TEXT
return|;
block|}
name|CSVResult
name|bestResult
init|=
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|bestResult
operator|.
name|getConfidence
argument_list|()
operator|<
name|minConfidence
condition|)
block|{
return|return
name|CSVResult
operator|.
name|TEXT
return|;
block|}
return|return
name|bestResult
return|;
block|}
comment|//inner class that tests a single hypothesis/combination
comment|//of parameters for delimiter and quote character
comment|//this will throw an EOF before reading beyond the
comment|//markLimit number of characters (not bytes!)
specifier|private
class|class
name|Snifflet
block|{
specifier|private
specifier|final
name|char
name|delimiter
decl_stmt|;
comment|//hardcode this for now
specifier|private
specifier|final
name|char
name|quoteCharacter
init|=
literal|'"'
decl_stmt|;
name|Map
argument_list|<
name|Integer
argument_list|,
name|MutableInt
argument_list|>
name|rowLengthCounts
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|int
name|charsRead
init|=
literal|0
decl_stmt|;
name|int
name|colCount
init|=
literal|0
decl_stmt|;
name|int
name|encapsulated
init|=
literal|0
decl_stmt|;
comment|//number of cells that are encapsulated in dquotes (for now)
name|boolean
name|parseException
init|=
literal|false
decl_stmt|;
specifier|public
name|Snifflet
parameter_list|(
name|char
name|delimiter
parameter_list|)
block|{
name|this
operator|.
name|delimiter
operator|=
name|delimiter
expr_stmt|;
block|}
name|CSVResult
name|sniff
parameter_list|(
name|Reader
name|r
parameter_list|)
throws|throws
name|IOException
block|{
name|boolean
name|eof
init|=
literal|false
decl_stmt|;
name|boolean
name|hitMarkLimit
init|=
literal|false
decl_stmt|;
name|int
name|lastC
init|=
operator|-
literal|1
decl_stmt|;
name|StringBuilder
name|unquoted
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
try|try
init|(
name|PushbackReader
name|reader
init|=
operator|new
name|PushbackReader
argument_list|(
operator|new
name|CloseShieldReader
argument_list|(
name|r
argument_list|)
argument_list|,
name|PUSH_BACK
argument_list|)
init|)
block|{
name|int
name|c
init|=
name|read
argument_list|(
name|reader
argument_list|)
decl_stmt|;
while|while
condition|(
name|c
operator|!=
name|EOF
condition|)
block|{
if|if
condition|(
name|c
operator|==
name|quoteCharacter
condition|)
block|{
name|handleUnquoted
argument_list|(
name|unquoted
argument_list|)
expr_stmt|;
comment|//test to make sure there isn't an unencapsulated quote character in the middle of a cell
if|if
condition|(
name|lastC
operator|>
operator|-
literal|1
operator|&&
name|lastC
operator|!=
name|delimiter
operator|&&
name|lastC
operator|!=
name|NEW_LINE
operator|&&
name|lastC
operator|!=
name|CARRIAGE_RETURN
condition|)
block|{
name|parseException
operator|=
literal|true
expr_stmt|;
return|return
name|calcResult
argument_list|()
return|;
block|}
comment|//TODO: test to make sure cell doesn't start with escaped ""the quick brown cat"
name|boolean
name|correctlyEncapsulated
init|=
name|consumeQuoted
argument_list|(
name|reader
argument_list|,
name|quoteCharacter
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|correctlyEncapsulated
condition|)
block|{
name|parseException
operator|=
literal|true
expr_stmt|;
return|return
name|calcResult
argument_list|()
return|;
block|}
block|}
elseif|else
if|if
condition|(
name|c
operator|==
name|delimiter
condition|)
block|{
name|handleUnquoted
argument_list|(
name|unquoted
argument_list|)
expr_stmt|;
name|endColumn
argument_list|()
expr_stmt|;
name|consumeSpaceCharacters
argument_list|(
name|reader
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|c
operator|==
name|NEW_LINE
operator|||
name|c
operator|==
name|CARRIAGE_RETURN
condition|)
block|{
if|if
condition|(
name|unquoted
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|endColumn
argument_list|()
expr_stmt|;
block|}
name|handleUnquoted
argument_list|(
name|unquoted
argument_list|)
expr_stmt|;
name|endRow
argument_list|()
expr_stmt|;
name|consumeNewLines
argument_list|(
name|reader
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|unquoted
operator|.
name|append
argument_list|(
operator|(
name|char
operator|)
name|c
argument_list|)
expr_stmt|;
block|}
name|lastC
operator|=
name|c
expr_stmt|;
name|c
operator|=
name|read
argument_list|(
name|reader
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|HitMarkLimitException
name|e
parameter_list|)
block|{
name|hitMarkLimit
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsurprisingEOF
name|e
parameter_list|)
block|{
comment|//totally ignore
block|}
catch|catch
parameter_list|(
name|EOFException
name|e
parameter_list|)
block|{
comment|//the consume* throw this to avoid
comment|//having to check -1 every time and
comment|//having to rely on potentially wonky
comment|//inputstreams not consistently returning -1
comment|//after hitting EOF and returning the first -1.
comment|//Yes.  That's a thing.
name|eof
operator|=
literal|true
expr_stmt|;
block|}
finally|finally
block|{
name|r
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
comment|//if you've hit the marklimit or an eof on a truncated file
comment|//don't add the last row's info
if|if
condition|(
operator|!
name|hitMarkLimit
operator|&&
operator|!
name|eof
operator|&&
name|lastC
operator|!=
name|NEW_LINE
operator|&&
name|lastC
operator|!=
name|CARRIAGE_RETURN
condition|)
block|{
name|handleUnquoted
argument_list|(
name|unquoted
argument_list|)
expr_stmt|;
name|endColumn
argument_list|()
expr_stmt|;
name|endRow
argument_list|()
expr_stmt|;
block|}
return|return
name|calcResult
argument_list|()
return|;
block|}
specifier|private
name|CSVResult
name|calcResult
parameter_list|()
block|{
name|double
name|confidence
init|=
name|getConfidence
argument_list|()
decl_stmt|;
name|MediaType
name|mediaType
init|=
name|TextAndCSVParser
operator|.
name|CSV
decl_stmt|;
if|if
condition|(
name|delimiter
operator|==
literal|'\t'
condition|)
block|{
name|mediaType
operator|=
name|TextAndCSVParser
operator|.
name|TSV
expr_stmt|;
block|}
return|return
operator|new
name|CSVResult
argument_list|(
name|confidence
argument_list|,
name|mediaType
argument_list|,
name|delimiter
argument_list|)
return|;
block|}
specifier|private
name|void
name|handleUnquoted
parameter_list|(
name|StringBuilder
name|unquoted
parameter_list|)
block|{
if|if
condition|(
name|unquoted
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|unquoted
argument_list|(
name|unquoted
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|unquoted
operator|.
name|setLength
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
name|void
name|consumeSpaceCharacters
parameter_list|(
name|PushbackReader
name|reader
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|c
init|=
name|read
argument_list|(
name|reader
argument_list|)
decl_stmt|;
while|while
condition|(
name|c
operator|==
name|SPACE
condition|)
block|{
name|c
operator|=
name|read
argument_list|(
name|reader
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|c
operator|==
name|EOF
condition|)
block|{
throw|throw
operator|new
name|UnsurprisingEOF
argument_list|()
throw|;
block|}
name|unread
argument_list|(
name|reader
argument_list|,
name|c
argument_list|)
expr_stmt|;
block|}
comment|/**          *          * @param reader          * @param quoteCharacter          * @return whether or not this was a correctly encapsulated cell          * @throws UnsurprisingEOF if the file ended immediately after the close quote          * @throws EOFException if the file ended in the middle of the encapsulated section          * @throws IOException on other IOExceptions          */
name|boolean
name|consumeQuoted
parameter_list|(
name|PushbackReader
name|reader
parameter_list|,
name|int
name|quoteCharacter
parameter_list|)
throws|throws
name|IOException
block|{
comment|//this currently assumes excel "escaping" of double quotes:
comment|//'the " quick' -> "the "" quick"
comment|//we can make this more interesting later with other
comment|//escaping options
name|int
name|c
init|=
name|read
argument_list|(
name|reader
argument_list|)
decl_stmt|;
while|while
condition|(
name|c
operator|!=
operator|-
literal|1
condition|)
block|{
if|if
condition|(
name|c
operator|==
name|quoteCharacter
condition|)
block|{
name|int
name|nextC
init|=
name|read
argument_list|(
name|reader
argument_list|)
decl_stmt|;
if|if
condition|(
name|nextC
operator|==
name|EOF
condition|)
block|{
name|encapsulated
operator|++
expr_stmt|;
name|endColumn
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|UnsurprisingEOF
argument_list|()
throw|;
block|}
elseif|else
if|if
condition|(
name|nextC
operator|!=
name|quoteCharacter
condition|)
block|{
name|encapsulated
operator|++
expr_stmt|;
name|endColumn
argument_list|()
expr_stmt|;
name|unread
argument_list|(
name|reader
argument_list|,
name|nextC
argument_list|)
expr_stmt|;
name|consumeSpaceCharacters
argument_list|(
name|reader
argument_list|)
expr_stmt|;
comment|//now make sure that the next character is eof, \r\n
comment|//or a delimiter
name|nextC
operator|=
name|read
argument_list|(
name|reader
argument_list|)
expr_stmt|;
if|if
condition|(
name|nextC
operator|==
name|EOF
condition|)
block|{
throw|throw
operator|new
name|UnsurprisingEOF
argument_list|()
throw|;
block|}
elseif|else
if|if
condition|(
name|nextC
operator|==
name|NEW_LINE
operator|||
name|nextC
operator|==
name|CARRIAGE_RETURN
condition|)
block|{
name|unread
argument_list|(
name|reader
argument_list|,
name|nextC
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
elseif|else
if|if
condition|(
name|nextC
operator|!=
name|delimiter
condition|)
block|{
name|unread
argument_list|(
name|reader
argument_list|,
name|nextC
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|unread
argument_list|(
name|reader
argument_list|,
name|nextC
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
name|c
operator|=
name|read
argument_list|(
name|reader
argument_list|)
expr_stmt|;
block|}
throw|throw
operator|new
name|EOFException
argument_list|()
throw|;
block|}
specifier|private
name|int
name|read
parameter_list|(
name|PushbackReader
name|reader
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|charsRead
operator|>=
name|markLimit
operator|-
literal|1
condition|)
block|{
throw|throw
operator|new
name|HitMarkLimitException
argument_list|()
throw|;
block|}
name|int
name|c
init|=
name|reader
operator|.
name|read
argument_list|()
decl_stmt|;
if|if
condition|(
name|c
operator|==
name|EOF
condition|)
block|{
return|return
name|EOF
return|;
block|}
name|charsRead
operator|++
expr_stmt|;
return|return
name|c
return|;
block|}
specifier|private
name|void
name|unread
parameter_list|(
name|PushbackReader
name|reader
parameter_list|,
name|int
name|c
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|c
operator|!=
name|EOF
condition|)
block|{
name|reader
operator|.
name|unread
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|charsRead
operator|--
expr_stmt|;
block|}
block|}
comment|//consume all consecutive '\r\n' in any order
name|void
name|consumeNewLines
parameter_list|(
name|PushbackReader
name|reader
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|c
init|=
name|read
argument_list|(
name|reader
argument_list|)
decl_stmt|;
while|while
condition|(
name|c
operator|==
name|NEW_LINE
operator|||
name|c
operator|==
name|CARRIAGE_RETURN
condition|)
block|{
name|c
operator|=
name|read
argument_list|(
name|reader
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|c
operator|==
name|EOF
condition|)
block|{
throw|throw
operator|new
name|EOFException
argument_list|()
throw|;
block|}
name|unread
argument_list|(
name|reader
argument_list|,
name|c
argument_list|)
expr_stmt|;
return|return;
block|}
name|void
name|endColumn
parameter_list|()
block|{
name|colCount
operator|++
expr_stmt|;
block|}
name|void
name|endRow
parameter_list|()
block|{
name|MutableInt
name|cnt
init|=
name|rowLengthCounts
operator|.
name|get
argument_list|(
name|colCount
argument_list|)
decl_stmt|;
if|if
condition|(
name|cnt
operator|==
literal|null
condition|)
block|{
name|cnt
operator|=
operator|new
name|MutableInt
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|rowLengthCounts
operator|.
name|put
argument_list|(
name|colCount
argument_list|,
name|cnt
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|cnt
operator|.
name|increment
argument_list|()
expr_stmt|;
block|}
name|colCount
operator|=
literal|0
expr_stmt|;
block|}
name|void
name|unquoted
parameter_list|(
name|String
name|string
parameter_list|)
block|{
comment|//TODO -- do some analysis to make sure you don't have
comment|//large tokens like 2,3,2,3,2,3,
block|}
name|double
name|getConfidence
parameter_list|()
block|{
name|double
name|confidence
init|=
literal|0.0f
decl_stmt|;
if|if
condition|(
name|parseException
condition|)
block|{
return|return
operator|-
literal|1.0f
return|;
block|}
comment|//TODO -- add tests for long tokens containing
comment|//other delimiters, e.g. the,quick,brown,fox as a token
comment|//when testing '\t'
name|double
name|colCountConsistencyConf
init|=
name|calculateColumnCountConsistency
argument_list|()
decl_stmt|;
if|if
condition|(
name|colCountConsistencyConf
operator|>
operator|-
literal|1.0
condition|)
block|{
name|confidence
operator|=
name|colCountConsistencyConf
expr_stmt|;
block|}
comment|//the idea is that if there are a bunch of encapsulated
comment|//cells, then that should outweigh column length inconsistency
comment|//this particular formula offers a small initial increase
comment|//that eventually approaches 1.0
name|double
name|encapsulatedBonus
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|encapsulated
operator|>
literal|0
condition|)
block|{
name|encapsulatedBonus
operator|=
literal|1.0
operator|-
operator|(
literal|1.0d
operator|/
name|Math
operator|.
name|pow
argument_list|(
name|encapsulated
argument_list|,
literal|0.2
argument_list|)
operator|)
expr_stmt|;
block|}
return|return
name|Math
operator|.
name|min
argument_list|(
name|confidence
operator|+
name|encapsulatedBonus
argument_list|,
literal|1.0
argument_list|)
return|;
block|}
specifier|private
name|double
name|calculateColumnCountConsistency
parameter_list|()
block|{
name|int
name|max
init|=
operator|-
literal|1
decl_stmt|;
name|int
name|totalRows
init|=
literal|0
decl_stmt|;
comment|//find the most common row
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Integer
argument_list|,
name|MutableInt
argument_list|>
name|e
range|:
name|rowLengthCounts
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|int
name|numCols
init|=
name|e
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|int
name|count
init|=
name|e
operator|.
name|getValue
argument_list|()
operator|.
name|intValue
argument_list|()
decl_stmt|;
comment|//require that numCols> 1 so that you had at least
comment|//one delimiter in that row
if|if
condition|(
name|numCols
operator|>
literal|1
operator|&&
name|count
operator|>
name|max
condition|)
block|{
name|max
operator|=
name|count
expr_stmt|;
block|}
name|totalRows
operator|+=
name|count
expr_stmt|;
block|}
comment|//if there's not enough info
if|if
condition|(
name|max
operator|<
literal|0
operator|||
name|totalRows
operator|<
literal|3
condition|)
block|{
return|return
literal|0.0
return|;
block|}
comment|//TODO: convert this to continuous vs vague heuristic step function
name|double
name|consistency
init|=
operator|(
name|double
operator|)
name|max
operator|/
operator|(
name|double
operator|)
name|totalRows
decl_stmt|;
return|return
operator|(
operator|(
literal|1d
operator|-
operator|(
literal|1d
operator|/
name|Math
operator|.
name|pow
argument_list|(
name|totalRows
argument_list|,
literal|0.3
argument_list|)
operator|)
operator|)
operator|*
name|consistency
operator|)
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|UnsurprisingEOF
extends|extends
name|EOFException
block|{      }
specifier|private
specifier|static
class|class
name|HitMarkLimitException
extends|extends
name|EOFException
block|{      }
specifier|private
class|class
name|CloseShieldReader
extends|extends
name|ProxyReader
block|{
specifier|public
name|CloseShieldReader
parameter_list|(
name|Reader
name|r
parameter_list|)
block|{
name|super
argument_list|(
name|r
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
comment|//do nothing
block|}
block|}
block|}
end_class

end_unit

