begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|microsoft
operator|.
name|onenote
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * Stores a list that represents how to get to the file node in the data structure.  */
end_comment

begin_class
class|class
name|FileNodePtr
block|{
name|List
argument_list|<
name|Integer
argument_list|>
name|nodeListPositions
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|public
name|FileNodePtr
parameter_list|()
block|{      }
specifier|public
name|FileNodePtr
parameter_list|(
name|FileNodePtr
name|copyFrom
parameter_list|)
block|{
name|nodeListPositions
operator|.
name|addAll
argument_list|(
name|copyFrom
operator|.
name|nodeListPositions
argument_list|)
expr_stmt|;
block|}
comment|/**      * Uses the nodeListPositions to get the FileNode from the document.root hierarchy.      *<p>      * It works like this:      *<p>      * The first element of the nodeListPositions is the index of the FileNode at the root.      * The next element of the nodeListPosition is the index at the child of the first element.      * And so on...      *<p>      * For example 0, 4, 15 would mean      *<p>      * document.root.children.get(0).childFileNodeList.children.get(4).childFileNodeList.children.get(15)      *      * @param document      * @return      */
specifier|public
name|FileNode
name|dereference
parameter_list|(
name|OneNoteDocument
name|document
parameter_list|)
block|{
if|if
condition|(
name|nodeListPositions
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
name|nodeListPositions
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|>=
name|document
operator|.
name|root
operator|.
name|children
operator|.
name|size
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Exceeded root child size"
argument_list|)
throw|;
block|}
name|FileNode
name|cur
init|=
name|document
operator|.
name|root
operator|.
name|children
operator|.
name|get
argument_list|(
name|nodeListPositions
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|,
name|ie
init|=
name|nodeListPositions
operator|.
name|size
argument_list|()
init|;
name|i
operator|<
name|ie
condition|;
operator|++
name|i
control|)
block|{
name|cur
operator|=
name|cur
operator|.
name|childFileNodeList
operator|.
name|children
operator|.
name|get
argument_list|(
name|nodeListPositions
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|cur
return|;
block|}
block|}
end_class

end_unit

