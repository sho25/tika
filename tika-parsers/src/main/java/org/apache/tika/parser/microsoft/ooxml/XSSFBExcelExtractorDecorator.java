begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|microsoft
operator|.
name|ooxml
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|POIXMLTextExtractor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|openxml4j
operator|.
name|exceptions
operator|.
name|InvalidFormatException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|openxml4j
operator|.
name|exceptions
operator|.
name|OpenXML4JException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|openxml4j
operator|.
name|opc
operator|.
name|OPCPackage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|openxml4j
operator|.
name|opc
operator|.
name|PackagePart
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|openxml4j
operator|.
name|opc
operator|.
name|PackagePartName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|openxml4j
operator|.
name|opc
operator|.
name|PackageRelationship
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|openxml4j
operator|.
name|opc
operator|.
name|PackagingURIHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|openxml4j
operator|.
name|opc
operator|.
name|TargetMode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|xssf
operator|.
name|binary
operator|.
name|XSSFBCommentsTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|xssf
operator|.
name|binary
operator|.
name|XSSFBSharedStringsTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|xssf
operator|.
name|binary
operator|.
name|XSSFBSheetHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|xssf
operator|.
name|binary
operator|.
name|XSSFBStylesTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|xssf
operator|.
name|eventusermodel
operator|.
name|XSSFBReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|xssf
operator|.
name|eventusermodel
operator|.
name|XSSFSheetXMLHandler
operator|.
name|SheetContentsHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|xssf
operator|.
name|extractor
operator|.
name|XSSFBEventBasedExcelExtractor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|xssf
operator|.
name|usermodel
operator|.
name|XSSFRelation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|xssf
operator|.
name|usermodel
operator|.
name|XSSFShape
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|xssf
operator|.
name|usermodel
operator|.
name|XSSFSimpleShape
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|exception
operator|.
name|TikaException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|metadata
operator|.
name|Metadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|metadata
operator|.
name|TikaMetadataKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|ParseContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|sax
operator|.
name|XHTMLContentHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xmlbeans
operator|.
name|XmlException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|openxmlformats
operator|.
name|schemas
operator|.
name|drawingml
operator|.
name|x2006
operator|.
name|main
operator|.
name|CTHyperlink
import|;
end_import

begin_import
import|import
name|org
operator|.
name|openxmlformats
operator|.
name|schemas
operator|.
name|drawingml
operator|.
name|x2006
operator|.
name|main
operator|.
name|CTNonVisualDrawingProps
import|;
end_import

begin_import
import|import
name|org
operator|.
name|openxmlformats
operator|.
name|schemas
operator|.
name|drawingml
operator|.
name|x2006
operator|.
name|spreadsheetDrawing
operator|.
name|CTShape
import|;
end_import

begin_import
import|import
name|org
operator|.
name|openxmlformats
operator|.
name|schemas
operator|.
name|drawingml
operator|.
name|x2006
operator|.
name|spreadsheetDrawing
operator|.
name|CTShapeNonVisual
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|ContentHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_class
specifier|public
class|class
name|XSSFBExcelExtractorDecorator
extends|extends
name|XSSFExcelExtractorDecorator
block|{
specifier|private
specifier|final
name|XSSFBEventBasedExcelExtractor
name|extractor
decl_stmt|;
specifier|public
name|XSSFBExcelExtractorDecorator
parameter_list|(
name|ParseContext
name|context
parameter_list|,
name|POIXMLTextExtractor
name|extractor
parameter_list|,
name|Locale
name|locale
parameter_list|)
block|{
name|super
argument_list|(
name|context
argument_list|,
name|extractor
argument_list|,
name|locale
argument_list|)
expr_stmt|;
name|this
operator|.
name|extractor
operator|=
operator|(
name|XSSFBEventBasedExcelExtractor
operator|)
name|extractor
expr_stmt|;
comment|//not yet supported in xlsb
comment|//        this.extractor.setFormulasNotResults(false);
name|this
operator|.
name|extractor
operator|.
name|setLocale
argument_list|(
name|locale
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|getXHTML
parameter_list|(
name|ContentHandler
name|handler
parameter_list|,
name|Metadata
name|metadata
parameter_list|,
name|ParseContext
name|context
parameter_list|)
throws|throws
name|SAXException
throws|,
name|XmlException
throws|,
name|IOException
throws|,
name|TikaException
block|{
name|this
operator|.
name|metadata
operator|=
name|metadata
expr_stmt|;
name|this
operator|.
name|parseContext
operator|=
name|context
expr_stmt|;
name|metadata
operator|.
name|set
argument_list|(
name|TikaMetadataKeys
operator|.
name|PROTECTED
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
name|super
operator|.
name|getXHTML
argument_list|(
name|handler
argument_list|,
name|metadata
argument_list|,
name|context
argument_list|)
expr_stmt|;
block|}
comment|/**      * @see org.apache.poi.xssf.extractor.XSSFBEventBasedExcelExtractor#getText()      */
annotation|@
name|Override
specifier|protected
name|void
name|buildXHTML
parameter_list|(
name|XHTMLContentHandler
name|xhtml
parameter_list|)
throws|throws
name|SAXException
throws|,
name|XmlException
throws|,
name|IOException
block|{
name|OPCPackage
name|container
init|=
name|extractor
operator|.
name|getPackage
argument_list|()
decl_stmt|;
name|XSSFBSharedStringsTable
name|strings
decl_stmt|;
name|XSSFBReader
operator|.
name|SheetIterator
name|iter
decl_stmt|;
name|XSSFBReader
name|xssfReader
decl_stmt|;
name|XSSFBStylesTable
name|styles
decl_stmt|;
try|try
block|{
name|xssfReader
operator|=
operator|new
name|XSSFBReader
argument_list|(
name|container
argument_list|)
expr_stmt|;
name|styles
operator|=
name|xssfReader
operator|.
name|getXSSFBStylesTable
argument_list|()
expr_stmt|;
name|iter
operator|=
operator|(
name|XSSFBReader
operator|.
name|SheetIterator
operator|)
name|xssfReader
operator|.
name|getSheetsData
argument_list|()
expr_stmt|;
name|strings
operator|=
operator|new
name|XSSFBSharedStringsTable
argument_list|(
name|container
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidFormatException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|XmlException
argument_list|(
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|OpenXML4JException
name|oe
parameter_list|)
block|{
throw|throw
operator|new
name|XmlException
argument_list|(
name|oe
argument_list|)
throw|;
block|}
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|InputStream
name|stream
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|PackagePart
name|sheetPart
init|=
name|iter
operator|.
name|getSheetPart
argument_list|()
decl_stmt|;
name|addDrawingHyperLinks
argument_list|(
name|sheetPart
argument_list|)
expr_stmt|;
name|sheetParts
operator|.
name|add
argument_list|(
name|sheetPart
argument_list|)
expr_stmt|;
name|SheetTextAsHTML
name|sheetExtractor
init|=
operator|new
name|SheetTextAsHTML
argument_list|(
name|xhtml
argument_list|)
decl_stmt|;
name|XSSFBCommentsTable
name|comments
init|=
name|iter
operator|.
name|getXSSFBSheetComments
argument_list|()
decl_stmt|;
comment|// Start, and output the sheet name
name|xhtml
operator|.
name|startElement
argument_list|(
literal|"div"
argument_list|)
expr_stmt|;
name|xhtml
operator|.
name|element
argument_list|(
literal|"h1"
argument_list|,
name|iter
operator|.
name|getSheetName
argument_list|()
argument_list|)
expr_stmt|;
comment|// Extract the main sheet contents
name|xhtml
operator|.
name|startElement
argument_list|(
literal|"table"
argument_list|)
expr_stmt|;
name|xhtml
operator|.
name|startElement
argument_list|(
literal|"tbody"
argument_list|)
expr_stmt|;
name|processSheet
argument_list|(
name|sheetExtractor
argument_list|,
name|comments
argument_list|,
name|styles
argument_list|,
name|strings
argument_list|,
name|stream
argument_list|)
expr_stmt|;
name|xhtml
operator|.
name|endElement
argument_list|(
literal|"tbody"
argument_list|)
expr_stmt|;
name|xhtml
operator|.
name|endElement
argument_list|(
literal|"table"
argument_list|)
expr_stmt|;
comment|// Output any headers and footers
comment|// (Need to process the sheet to get them, so we can't
comment|//  do the headers before the contents)
for|for
control|(
name|String
name|header
range|:
name|sheetExtractor
operator|.
name|headers
control|)
block|{
name|extractHeaderFooter
argument_list|(
name|header
argument_list|,
name|xhtml
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|String
name|footer
range|:
name|sheetExtractor
operator|.
name|footers
control|)
block|{
name|extractHeaderFooter
argument_list|(
name|footer
argument_list|,
name|xhtml
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|XSSFShape
argument_list|>
name|shapes
init|=
name|iter
operator|.
name|getShapes
argument_list|()
decl_stmt|;
name|processShapes
argument_list|(
name|shapes
argument_list|,
name|xhtml
argument_list|)
expr_stmt|;
comment|//for now dump sheet hyperlinks at bottom of page
comment|//consider a double-pass of the inputstream to reunite hyperlinks with cells/textboxes
comment|//step 1: extract hyperlink info from bottom of page
comment|//step 2: process as we do now, but with cached hyperlink relationship info
name|extractHyperLinks
argument_list|(
name|sheetPart
argument_list|,
name|xhtml
argument_list|)
expr_stmt|;
comment|// All done with this sheet
name|xhtml
operator|.
name|endElement
argument_list|(
literal|"div"
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|protected
name|void
name|extractHeaderFooter
parameter_list|(
name|String
name|hf
parameter_list|,
name|XHTMLContentHandler
name|xhtml
parameter_list|)
throws|throws
name|SAXException
block|{
if|if
condition|(
name|hf
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|xhtml
operator|.
name|element
argument_list|(
literal|"p"
argument_list|,
name|hf
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|extractHyperLinks
parameter_list|(
name|PackagePart
name|sheetPart
parameter_list|,
name|XHTMLContentHandler
name|xhtml
parameter_list|)
throws|throws
name|SAXException
block|{
try|try
block|{
for|for
control|(
name|PackageRelationship
name|rel
range|:
name|sheetPart
operator|.
name|getRelationshipsByType
argument_list|(
name|XSSFRelation
operator|.
name|SHEET_HYPERLINKS
operator|.
name|getRelation
argument_list|()
argument_list|)
control|)
block|{
name|xhtml
operator|.
name|startElement
argument_list|(
literal|"a"
argument_list|,
literal|"href"
argument_list|,
name|rel
operator|.
name|getTargetURI
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|xhtml
operator|.
name|characters
argument_list|(
name|rel
operator|.
name|getTargetURI
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|xhtml
operator|.
name|endElement
argument_list|(
literal|"a"
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|InvalidFormatException
name|e
parameter_list|)
block|{
comment|//swallow
block|}
block|}
specifier|private
name|void
name|processShapes
parameter_list|(
name|List
argument_list|<
name|XSSFShape
argument_list|>
name|shapes
parameter_list|,
name|XHTMLContentHandler
name|xhtml
parameter_list|)
throws|throws
name|SAXException
block|{
if|if
condition|(
name|shapes
operator|==
literal|null
condition|)
block|{
return|return;
block|}
for|for
control|(
name|XSSFShape
name|shape
range|:
name|shapes
control|)
block|{
if|if
condition|(
name|shape
operator|instanceof
name|XSSFSimpleShape
condition|)
block|{
name|String
name|sText
init|=
operator|(
operator|(
name|XSSFSimpleShape
operator|)
name|shape
operator|)
operator|.
name|getText
argument_list|()
decl_stmt|;
if|if
condition|(
name|sText
operator|!=
literal|null
operator|&&
name|sText
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|xhtml
operator|.
name|element
argument_list|(
literal|"p"
argument_list|,
name|sText
argument_list|)
expr_stmt|;
block|}
name|extractHyperLinksFromShape
argument_list|(
operator|(
operator|(
name|XSSFSimpleShape
operator|)
name|shape
operator|)
operator|.
name|getCTShape
argument_list|()
argument_list|,
name|xhtml
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|extractHyperLinksFromShape
parameter_list|(
name|CTShape
name|ctShape
parameter_list|,
name|XHTMLContentHandler
name|xhtml
parameter_list|)
throws|throws
name|SAXException
block|{
if|if
condition|(
name|ctShape
operator|==
literal|null
condition|)
return|return;
name|CTShapeNonVisual
name|nvSpPR
init|=
name|ctShape
operator|.
name|getNvSpPr
argument_list|()
decl_stmt|;
if|if
condition|(
name|nvSpPR
operator|==
literal|null
condition|)
return|return;
name|CTNonVisualDrawingProps
name|cNvPr
init|=
name|nvSpPR
operator|.
name|getCNvPr
argument_list|()
decl_stmt|;
if|if
condition|(
name|cNvPr
operator|==
literal|null
condition|)
return|return;
name|CTHyperlink
name|ctHyperlink
init|=
name|cNvPr
operator|.
name|getHlinkClick
argument_list|()
decl_stmt|;
if|if
condition|(
name|ctHyperlink
operator|==
literal|null
condition|)
return|return;
name|String
name|url
init|=
name|drawingHyperlinks
operator|.
name|get
argument_list|(
name|ctHyperlink
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|url
operator|!=
literal|null
condition|)
block|{
name|xhtml
operator|.
name|startElement
argument_list|(
literal|"a"
argument_list|,
literal|"href"
argument_list|,
name|url
argument_list|)
expr_stmt|;
name|xhtml
operator|.
name|characters
argument_list|(
name|url
argument_list|)
expr_stmt|;
name|xhtml
operator|.
name|endElement
argument_list|(
literal|"a"
argument_list|)
expr_stmt|;
block|}
name|CTHyperlink
name|ctHoverHyperlink
init|=
name|cNvPr
operator|.
name|getHlinkHover
argument_list|()
decl_stmt|;
if|if
condition|(
name|ctHoverHyperlink
operator|==
literal|null
condition|)
return|return;
name|url
operator|=
name|drawingHyperlinks
operator|.
name|get
argument_list|(
name|ctHoverHyperlink
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|url
operator|!=
literal|null
condition|)
block|{
name|xhtml
operator|.
name|startElement
argument_list|(
literal|"a"
argument_list|,
literal|"href"
argument_list|,
name|url
argument_list|)
expr_stmt|;
name|xhtml
operator|.
name|characters
argument_list|(
name|url
argument_list|)
expr_stmt|;
name|xhtml
operator|.
name|endElement
argument_list|(
literal|"a"
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|processSheet
parameter_list|(
name|SheetContentsHandler
name|sheetContentsExtractor
parameter_list|,
name|XSSFBCommentsTable
name|comments
parameter_list|,
name|XSSFBStylesTable
name|styles
parameter_list|,
name|XSSFBSharedStringsTable
name|strings
parameter_list|,
name|InputStream
name|sheetInputStream
parameter_list|)
throws|throws
name|IOException
throws|,
name|SAXException
block|{
name|XSSFBSheetHandler
name|xssfbSheetHandler
init|=
operator|new
name|XSSFBSheetHandler
argument_list|(
name|sheetInputStream
argument_list|,
name|styles
argument_list|,
name|comments
argument_list|,
name|strings
argument_list|,
name|sheetContentsExtractor
argument_list|,
name|formatter
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|xssfbSheetHandler
operator|.
name|parse
argument_list|()
expr_stmt|;
block|}
comment|/**      * In Excel files, sheets have things embedded in them,      * and sheet drawings which have the images      */
annotation|@
name|Override
specifier|protected
name|List
argument_list|<
name|PackagePart
argument_list|>
name|getMainDocumentParts
parameter_list|()
throws|throws
name|TikaException
block|{
name|List
argument_list|<
name|PackagePart
argument_list|>
name|parts
init|=
operator|new
name|ArrayList
argument_list|<
name|PackagePart
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|PackagePart
name|part
range|:
name|sheetParts
control|)
block|{
comment|// Add the sheet
name|parts
operator|.
name|add
argument_list|(
name|part
argument_list|)
expr_stmt|;
comment|// If it has drawings, return those too
try|try
block|{
for|for
control|(
name|PackageRelationship
name|rel
range|:
name|part
operator|.
name|getRelationshipsByType
argument_list|(
name|XSSFRelation
operator|.
name|DRAWINGS
operator|.
name|getRelation
argument_list|()
argument_list|)
control|)
block|{
if|if
condition|(
name|rel
operator|.
name|getTargetMode
argument_list|()
operator|==
name|TargetMode
operator|.
name|INTERNAL
condition|)
block|{
name|PackagePartName
name|relName
init|=
name|PackagingURIHelper
operator|.
name|createPartName
argument_list|(
name|rel
operator|.
name|getTargetURI
argument_list|()
argument_list|)
decl_stmt|;
name|parts
operator|.
name|add
argument_list|(
name|rel
operator|.
name|getPackage
argument_list|()
operator|.
name|getPart
argument_list|(
name|relName
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|PackageRelationship
name|rel
range|:
name|part
operator|.
name|getRelationshipsByType
argument_list|(
name|XSSFRelation
operator|.
name|VML_DRAWINGS
operator|.
name|getRelation
argument_list|()
argument_list|)
control|)
block|{
if|if
condition|(
name|rel
operator|.
name|getTargetMode
argument_list|()
operator|==
name|TargetMode
operator|.
name|INTERNAL
condition|)
block|{
name|PackagePartName
name|relName
init|=
name|PackagingURIHelper
operator|.
name|createPartName
argument_list|(
name|rel
operator|.
name|getTargetURI
argument_list|()
argument_list|)
decl_stmt|;
name|parts
operator|.
name|add
argument_list|(
name|rel
operator|.
name|getPackage
argument_list|()
operator|.
name|getPart
argument_list|(
name|relName
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|InvalidFormatException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|TikaException
argument_list|(
literal|"Broken OOXML file"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|//add main document so that macros can be extracted
comment|//by AbstractOOXMLExtractor
for|for
control|(
name|PackagePart
name|part
range|:
name|extractor
operator|.
name|getPackage
argument_list|()
operator|.
name|getPartsByRelationshipType
argument_list|(
name|RELATION_OFFICE_DOCUMENT
argument_list|)
control|)
block|{
name|parts
operator|.
name|add
argument_list|(
name|part
argument_list|)
expr_stmt|;
block|}
return|return
name|parts
return|;
block|}
block|}
end_class

end_unit

