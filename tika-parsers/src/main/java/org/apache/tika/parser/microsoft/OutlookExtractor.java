begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|microsoft
package|;
end_package

begin_import
import|import static
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
operator|.
name|UTF_8
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|UnsupportedEncodingException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|Charset
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|IllegalCharsetNameException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|UnsupportedCharsetException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|ParseException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|james
operator|.
name|mime4j
operator|.
name|codec
operator|.
name|DecodeMonitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|james
operator|.
name|mime4j
operator|.
name|codec
operator|.
name|DecoderUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|hmef
operator|.
name|attribute
operator|.
name|MAPIRtfAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|hsmf
operator|.
name|MAPIMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|hsmf
operator|.
name|datatypes
operator|.
name|AttachmentChunks
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|hsmf
operator|.
name|datatypes
operator|.
name|ByteChunk
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|hsmf
operator|.
name|datatypes
operator|.
name|Chunk
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|hsmf
operator|.
name|datatypes
operator|.
name|Chunks
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|hsmf
operator|.
name|datatypes
operator|.
name|MAPIProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|hsmf
operator|.
name|datatypes
operator|.
name|PropertyValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|hsmf
operator|.
name|datatypes
operator|.
name|RecipientChunks
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|hsmf
operator|.
name|datatypes
operator|.
name|StringChunk
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|hsmf
operator|.
name|datatypes
operator|.
name|Types
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|hsmf
operator|.
name|exceptions
operator|.
name|ChunkNotFoundException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|poifs
operator|.
name|filesystem
operator|.
name|DirectoryNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|poifs
operator|.
name|filesystem
operator|.
name|NPOIFSFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|util
operator|.
name|CodePageUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|config
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|exception
operator|.
name|TikaException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|extractor
operator|.
name|EmbeddedDocumentUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|io
operator|.
name|TikaInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|metadata
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|metadata
operator|.
name|Metadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|metadata
operator|.
name|Office
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|metadata
operator|.
name|Property
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|metadata
operator|.
name|TikaCoreProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|mime
operator|.
name|MediaType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|ParseContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|Parser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|html
operator|.
name|HtmlEncodingDetector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|html
operator|.
name|HtmlParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|mbox
operator|.
name|MboxParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|rtf
operator|.
name|RTFParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|txt
operator|.
name|CharsetDetector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|txt
operator|.
name|CharsetMatch
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|sax
operator|.
name|BodyContentHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|sax
operator|.
name|EmbeddedContentHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|sax
operator|.
name|XHTMLContentHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|cms
operator|.
name|Recipient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_comment
comment|/**  * Outlook Message Parser.  */
end_comment

begin_class
specifier|public
class|class
name|OutlookExtractor
extends|extends
name|AbstractPOIFSExtractor
block|{
specifier|public
enum|enum
name|RECIPIENT_TYPE
block|{
name|TO
argument_list|(
literal|1
argument_list|)
block|,
name|CC
argument_list|(
literal|2
argument_list|)
block|,
name|BCC
argument_list|(
literal|3
argument_list|)
block|,
name|UNRECOGNIZED
argument_list|(
operator|-
literal|1
argument_list|)
block|,
name|UNSPECIFIED
argument_list|(
operator|-
literal|1
argument_list|)
block|;
specifier|private
specifier|final
name|int
name|val
decl_stmt|;
name|RECIPIENT_TYPE
parameter_list|(
name|int
name|val
parameter_list|)
block|{
name|this
operator|.
name|val
operator|=
name|val
expr_stmt|;
block|}
specifier|public
specifier|static
name|RECIPIENT_TYPE
name|getTypeFromVal
parameter_list|(
name|int
name|val
parameter_list|)
block|{
comment|//mild hackery, clean up
if|if
condition|(
name|val
operator|>
literal|0
operator|&&
name|val
operator|<
literal|4
condition|)
block|{
return|return
name|RECIPIENT_TYPE
operator|.
name|values
argument_list|()
index|[
name|val
operator|-
literal|1
index|]
return|;
block|}
return|return
name|UNRECOGNIZED
return|;
block|}
block|}
empty_stmt|;
specifier|private
enum|enum
name|ADDRESS_TYPE
block|{
name|EX
block|,
name|SMTP
block|}
specifier|private
specifier|static
name|Pattern
name|HEADER_KEY_PAT
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"\\A([\\x21-\\x39\\x3B-\\x7E]+):(.*?)\\Z"
argument_list|)
decl_stmt|;
comment|//this according to the spec; in practice, it is probably more likely
comment|//that a "split field" fails to start with a space character than
comment|//that a real header contains anything but [-_A-Za-z0-9].
comment|//e.g.
comment|//header: this header goes onto the next line
comment|//<mailto:xyz@cnn.com...
specifier|private
specifier|static
specifier|final
name|Metadata
name|EMPTY_METADATA
init|=
operator|new
name|Metadata
argument_list|()
decl_stmt|;
name|HtmlEncodingDetector
name|detector
init|=
operator|new
name|HtmlEncodingDetector
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|MAPIMessage
name|msg
decl_stmt|;
specifier|private
specifier|final
name|ParseContext
name|parseContext
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|extractAllAlternatives
decl_stmt|;
specifier|public
name|OutlookExtractor
parameter_list|(
name|NPOIFSFileSystem
name|filesystem
parameter_list|,
name|ParseContext
name|context
parameter_list|)
throws|throws
name|TikaException
block|{
name|this
argument_list|(
name|filesystem
operator|.
name|getRoot
argument_list|()
argument_list|,
name|context
argument_list|)
expr_stmt|;
block|}
specifier|public
name|OutlookExtractor
parameter_list|(
name|DirectoryNode
name|root
parameter_list|,
name|ParseContext
name|context
parameter_list|)
throws|throws
name|TikaException
block|{
name|super
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|this
operator|.
name|parseContext
operator|=
name|context
expr_stmt|;
name|this
operator|.
name|extractAllAlternatives
operator|=
name|context
operator|.
name|get
argument_list|(
name|OfficeParserConfig
operator|.
name|class
argument_list|)
operator|.
name|getExtractAllAlternativesFromMSG
argument_list|()
expr_stmt|;
try|try
block|{
name|this
operator|.
name|msg
operator|=
operator|new
name|MAPIMessage
argument_list|(
name|root
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|TikaException
argument_list|(
literal|"Failed to parse Outlook message"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|void
name|parse
parameter_list|(
name|XHTMLContentHandler
name|xhtml
parameter_list|,
name|Metadata
name|metadata
parameter_list|)
throws|throws
name|TikaException
throws|,
name|SAXException
throws|,
name|IOException
block|{
try|try
block|{
name|msg
operator|.
name|setReturnNullOnMissingChunk
argument_list|(
literal|true
argument_list|)
expr_stmt|;
try|try
block|{
name|metadata
operator|.
name|set
argument_list|(
name|Office
operator|.
name|MAPI_MESSAGE_CLASS
argument_list|,
name|getMessageClass
argument_list|(
name|msg
operator|.
name|getMessageClass
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ChunkNotFoundException
name|e
parameter_list|)
block|{}
comment|// If the message contains strings that aren't stored
comment|//  as Unicode, try to sort out an encoding for them
if|if
condition|(
name|msg
operator|.
name|has7BitEncodingStrings
argument_list|()
condition|)
block|{
name|guess7BitEncoding
argument_list|(
name|msg
argument_list|)
expr_stmt|;
block|}
comment|// Start with the metadata
name|String
name|subject
init|=
name|msg
operator|.
name|getSubject
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
index|[]
argument_list|>
name|headers
init|=
name|normalizeHeaders
argument_list|(
name|msg
operator|.
name|getHeaders
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|from
init|=
name|msg
operator|.
name|getDisplayFrom
argument_list|()
decl_stmt|;
name|handleFromTo
argument_list|(
name|headers
argument_list|,
name|metadata
argument_list|)
expr_stmt|;
name|metadata
operator|.
name|set
argument_list|(
name|TikaCoreProperties
operator|.
name|TITLE
argument_list|,
name|subject
argument_list|)
expr_stmt|;
comment|// TODO: Move to description in Tika 2.0
name|metadata
operator|.
name|set
argument_list|(
name|TikaCoreProperties
operator|.
name|DESCRIPTION
argument_list|,
name|msg
operator|.
name|getConversationTopic
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
for|for
control|(
name|String
name|recipientAddress
range|:
name|msg
operator|.
name|getRecipientEmailAddressList
argument_list|()
control|)
block|{
if|if
condition|(
name|recipientAddress
operator|!=
literal|null
condition|)
name|metadata
operator|.
name|add
argument_list|(
name|Metadata
operator|.
name|MESSAGE_RECIPIENT_ADDRESS
argument_list|,
name|recipientAddress
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|ChunkNotFoundException
name|he
parameter_list|)
block|{             }
comment|// Will be fixed in POI 3.7 Final
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
index|[]
argument_list|>
name|e
range|:
name|headers
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|headerKey
init|=
name|e
operator|.
name|getKey
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|headerValue
range|:
name|e
operator|.
name|getValue
argument_list|()
control|)
block|{
name|metadata
operator|.
name|add
argument_list|(
name|Metadata
operator|.
name|MESSAGE_RAW_HEADER_PREFIX
operator|+
name|headerKey
argument_list|,
name|headerValue
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Date - try two ways to find it
comment|// First try via the proper chunk
if|if
condition|(
name|msg
operator|.
name|getMessageDate
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|metadata
operator|.
name|set
argument_list|(
name|TikaCoreProperties
operator|.
name|CREATED
argument_list|,
name|msg
operator|.
name|getMessageDate
argument_list|()
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
name|metadata
operator|.
name|set
argument_list|(
name|TikaCoreProperties
operator|.
name|MODIFIED
argument_list|,
name|msg
operator|.
name|getMessageDate
argument_list|()
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|headers
operator|!=
literal|null
operator|&&
name|headers
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
index|[]
argument_list|>
name|header
range|:
name|headers
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|headerKey
init|=
name|header
operator|.
name|getKey
argument_list|()
decl_stmt|;
if|if
condition|(
name|headerKey
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|)
operator|.
name|startsWith
argument_list|(
literal|"date:"
argument_list|)
condition|)
block|{
name|String
name|date
init|=
name|headerKey
operator|.
name|substring
argument_list|(
name|headerKey
operator|.
name|indexOf
argument_list|(
literal|':'
argument_list|)
operator|+
literal|1
argument_list|)
operator|.
name|trim
argument_list|()
decl_stmt|;
comment|// See if we can parse it as a normal mail date
try|try
block|{
name|Date
name|d
init|=
name|MboxParser
operator|.
name|parseDate
argument_list|(
name|date
argument_list|)
decl_stmt|;
name|metadata
operator|.
name|set
argument_list|(
name|TikaCoreProperties
operator|.
name|CREATED
argument_list|,
name|d
argument_list|)
expr_stmt|;
name|metadata
operator|.
name|set
argument_list|(
name|TikaCoreProperties
operator|.
name|MODIFIED
argument_list|,
name|d
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|e
parameter_list|)
block|{
comment|// Store it as-is, and hope for the best...
name|metadata
operator|.
name|set
argument_list|(
name|TikaCoreProperties
operator|.
name|CREATED
argument_list|,
name|date
argument_list|)
expr_stmt|;
name|metadata
operator|.
name|set
argument_list|(
name|TikaCoreProperties
operator|.
name|MODIFIED
argument_list|,
name|date
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
block|}
block|}
name|xhtml
operator|.
name|element
argument_list|(
literal|"h1"
argument_list|,
name|subject
argument_list|)
expr_stmt|;
comment|// Output the from and to details in text, as you
comment|//  often want them in text form for searching
name|xhtml
operator|.
name|startElement
argument_list|(
literal|"dl"
argument_list|)
expr_stmt|;
if|if
condition|(
name|from
operator|!=
literal|null
condition|)
block|{
name|header
argument_list|(
name|xhtml
argument_list|,
literal|"From"
argument_list|,
name|from
argument_list|)
expr_stmt|;
block|}
name|header
argument_list|(
name|xhtml
argument_list|,
literal|"To"
argument_list|,
name|msg
operator|.
name|getDisplayTo
argument_list|()
argument_list|)
expr_stmt|;
name|header
argument_list|(
name|xhtml
argument_list|,
literal|"Cc"
argument_list|,
name|msg
operator|.
name|getDisplayCC
argument_list|()
argument_list|)
expr_stmt|;
name|header
argument_list|(
name|xhtml
argument_list|,
literal|"Bcc"
argument_list|,
name|msg
operator|.
name|getDisplayBCC
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|header
argument_list|(
name|xhtml
argument_list|,
literal|"Recipients"
argument_list|,
name|msg
operator|.
name|getRecipientEmailAddress
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ChunkNotFoundException
name|e
parameter_list|)
block|{             }
name|xhtml
operator|.
name|endElement
argument_list|(
literal|"dl"
argument_list|)
expr_stmt|;
comment|// Get the message body. Preference order is: html, rtf, text
name|Chunk
name|htmlChunk
init|=
literal|null
decl_stmt|;
name|Chunk
name|rtfChunk
init|=
literal|null
decl_stmt|;
name|Chunk
name|textChunk
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Chunk
name|chunk
range|:
name|msg
operator|.
name|getMainChunks
argument_list|()
operator|.
name|getChunks
argument_list|()
control|)
block|{
if|if
condition|(
name|chunk
operator|.
name|getChunkId
argument_list|()
operator|==
name|MAPIProperty
operator|.
name|BODY_HTML
operator|.
name|id
condition|)
block|{
name|htmlChunk
operator|=
name|chunk
expr_stmt|;
block|}
if|if
condition|(
name|chunk
operator|.
name|getChunkId
argument_list|()
operator|==
name|MAPIProperty
operator|.
name|RTF_COMPRESSED
operator|.
name|id
condition|)
block|{
name|rtfChunk
operator|=
name|chunk
expr_stmt|;
block|}
if|if
condition|(
name|chunk
operator|.
name|getChunkId
argument_list|()
operator|==
name|MAPIProperty
operator|.
name|BODY
operator|.
name|id
condition|)
block|{
name|textChunk
operator|=
name|chunk
expr_stmt|;
block|}
block|}
name|handleBodyChunks
argument_list|(
name|htmlChunk
argument_list|,
name|rtfChunk
argument_list|,
name|textChunk
argument_list|,
name|xhtml
argument_list|)
expr_stmt|;
comment|// Process the attachments
for|for
control|(
name|AttachmentChunks
name|attachment
range|:
name|msg
operator|.
name|getAttachmentFiles
argument_list|()
control|)
block|{
name|xhtml
operator|.
name|startElement
argument_list|(
literal|"div"
argument_list|,
literal|"class"
argument_list|,
literal|"attachment-entry"
argument_list|)
expr_stmt|;
name|String
name|filename
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|attachment
operator|.
name|getAttachLongFileName
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|filename
operator|=
name|attachment
operator|.
name|getAttachLongFileName
argument_list|()
operator|.
name|getValue
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|attachment
operator|.
name|getAttachFileName
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|filename
operator|=
name|attachment
operator|.
name|getAttachFileName
argument_list|()
operator|.
name|getValue
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|filename
operator|!=
literal|null
operator|&&
name|filename
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|xhtml
operator|.
name|element
argument_list|(
literal|"h1"
argument_list|,
name|filename
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|attachment
operator|.
name|getAttachData
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|handleEmbeddedResource
argument_list|(
name|TikaInputStream
operator|.
name|get
argument_list|(
name|attachment
operator|.
name|getAttachData
argument_list|()
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|,
name|filename
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|xhtml
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|attachment
operator|.
name|getAttachmentDirectory
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|handleEmbeddedOfficeDoc
argument_list|(
name|attachment
operator|.
name|getAttachmentDirectory
argument_list|()
operator|.
name|getDirectory
argument_list|()
argument_list|,
name|xhtml
argument_list|)
expr_stmt|;
block|}
name|xhtml
operator|.
name|endElement
argument_list|(
literal|"div"
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|ChunkNotFoundException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|TikaException
argument_list|(
literal|"POI MAPIMessage broken - didn't return null on missing chunk"
argument_list|,
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
comment|//You'd think you'd want to call msg.close().
comment|//Don't do that.  That closes down the file system.
comment|//If an msg has multiple msg attachments, some of them
comment|//can reside in the same file system.  After the first
comment|//child is read, the fs is closed, and the other children
comment|//get a java.nio.channels.ClosedChannelException
block|}
block|}
specifier|private
name|void
name|handleBodyChunks
parameter_list|(
name|Chunk
name|htmlChunk
parameter_list|,
name|Chunk
name|rtfChunk
parameter_list|,
name|Chunk
name|textChunk
parameter_list|,
name|XHTMLContentHandler
name|xhtml
parameter_list|)
throws|throws
name|SAXException
throws|,
name|IOException
throws|,
name|TikaException
block|{
if|if
condition|(
name|extractAllAlternatives
condition|)
block|{
name|extractAllAlternatives
argument_list|(
name|htmlChunk
argument_list|,
name|rtfChunk
argument_list|,
name|textChunk
argument_list|,
name|xhtml
argument_list|)
expr_stmt|;
return|return;
block|}
name|boolean
name|doneBody
init|=
literal|false
decl_stmt|;
name|xhtml
operator|.
name|startElement
argument_list|(
literal|"div"
argument_list|,
literal|"class"
argument_list|,
literal|"message-body"
argument_list|)
expr_stmt|;
if|if
condition|(
name|htmlChunk
operator|!=
literal|null
condition|)
block|{
name|byte
index|[]
name|data
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|htmlChunk
operator|instanceof
name|ByteChunk
condition|)
block|{
name|data
operator|=
operator|(
operator|(
name|ByteChunk
operator|)
name|htmlChunk
operator|)
operator|.
name|getValue
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|htmlChunk
operator|instanceof
name|StringChunk
condition|)
block|{
name|data
operator|=
operator|(
operator|(
name|StringChunk
operator|)
name|htmlChunk
operator|)
operator|.
name|getRawValue
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|data
operator|!=
literal|null
condition|)
block|{
name|Parser
name|htmlParser
init|=
name|EmbeddedDocumentUtil
operator|.
name|tryToFindExistingLeafParser
argument_list|(
name|HtmlParser
operator|.
name|class
argument_list|,
name|parseContext
argument_list|)
decl_stmt|;
if|if
condition|(
name|htmlParser
operator|==
literal|null
condition|)
block|{
name|htmlParser
operator|=
operator|new
name|HtmlParser
argument_list|()
expr_stmt|;
block|}
name|htmlParser
operator|.
name|parse
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|data
argument_list|)
argument_list|,
operator|new
name|EmbeddedContentHandler
argument_list|(
operator|new
name|BodyContentHandler
argument_list|(
name|xhtml
argument_list|)
argument_list|)
argument_list|,
operator|new
name|Metadata
argument_list|()
argument_list|,
name|parseContext
argument_list|)
expr_stmt|;
name|doneBody
operator|=
literal|true
expr_stmt|;
block|}
block|}
if|if
condition|(
name|rtfChunk
operator|!=
literal|null
operator|&&
operator|(
name|extractAllAlternatives
operator|||
operator|!
name|doneBody
operator|)
condition|)
block|{
name|ByteChunk
name|chunk
init|=
operator|(
name|ByteChunk
operator|)
name|rtfChunk
decl_stmt|;
comment|//avoid buffer underflow TIKA-2530
comment|//TODO -- would be good to find an example triggering file and
comment|//figure out if this is a bug in POI or a genuine 0 length chunk
if|if
condition|(
name|chunk
operator|.
name|getValue
argument_list|()
operator|!=
literal|null
operator|&&
name|chunk
operator|.
name|getValue
argument_list|()
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|MAPIRtfAttribute
name|rtf
init|=
operator|new
name|MAPIRtfAttribute
argument_list|(
name|MAPIProperty
operator|.
name|RTF_COMPRESSED
argument_list|,
name|Types
operator|.
name|BINARY
operator|.
name|getId
argument_list|()
argument_list|,
name|chunk
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
name|Parser
name|rtfParser
init|=
name|EmbeddedDocumentUtil
operator|.
name|tryToFindExistingLeafParser
argument_list|(
name|RTFParser
operator|.
name|class
argument_list|,
name|parseContext
argument_list|)
decl_stmt|;
if|if
condition|(
name|rtfParser
operator|==
literal|null
condition|)
block|{
name|rtfParser
operator|=
operator|new
name|RTFParser
argument_list|()
expr_stmt|;
block|}
name|rtfParser
operator|.
name|parse
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|rtf
operator|.
name|getData
argument_list|()
argument_list|)
argument_list|,
operator|new
name|EmbeddedContentHandler
argument_list|(
operator|new
name|BodyContentHandler
argument_list|(
name|xhtml
argument_list|)
argument_list|)
argument_list|,
operator|new
name|Metadata
argument_list|()
argument_list|,
name|parseContext
argument_list|)
expr_stmt|;
name|doneBody
operator|=
literal|true
expr_stmt|;
block|}
block|}
if|if
condition|(
name|textChunk
operator|!=
literal|null
operator|&&
operator|(
name|extractAllAlternatives
operator|||
operator|!
name|doneBody
operator|)
condition|)
block|{
name|xhtml
operator|.
name|element
argument_list|(
literal|"p"
argument_list|,
operator|(
operator|(
name|StringChunk
operator|)
name|textChunk
operator|)
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|xhtml
operator|.
name|endElement
argument_list|(
literal|"div"
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|extractAllAlternatives
parameter_list|(
name|Chunk
name|htmlChunk
parameter_list|,
name|Chunk
name|rtfChunk
parameter_list|,
name|Chunk
name|textChunk
parameter_list|,
name|XHTMLContentHandler
name|xhtml
parameter_list|)
throws|throws
name|TikaException
throws|,
name|SAXException
throws|,
name|IOException
block|{
if|if
condition|(
name|htmlChunk
operator|!=
literal|null
condition|)
block|{
name|byte
index|[]
name|data
init|=
name|getValue
argument_list|(
name|htmlChunk
argument_list|)
decl_stmt|;
if|if
condition|(
name|data
operator|!=
literal|null
condition|)
block|{
name|handleEmbeddedResource
argument_list|(
name|TikaInputStream
operator|.
name|get
argument_list|(
name|data
argument_list|)
argument_list|,
literal|"html-body"
argument_list|,
literal|null
argument_list|,
name|MediaType
operator|.
name|TEXT_HTML
operator|.
name|toString
argument_list|()
argument_list|,
name|xhtml
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|rtfChunk
operator|!=
literal|null
condition|)
block|{
name|ByteChunk
name|chunk
init|=
operator|(
name|ByteChunk
operator|)
name|rtfChunk
decl_stmt|;
name|MAPIRtfAttribute
name|rtf
init|=
operator|new
name|MAPIRtfAttribute
argument_list|(
name|MAPIProperty
operator|.
name|RTF_COMPRESSED
argument_list|,
name|Types
operator|.
name|BINARY
operator|.
name|getId
argument_list|()
argument_list|,
name|chunk
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
name|byte
index|[]
name|data
init|=
name|rtf
operator|.
name|getData
argument_list|()
decl_stmt|;
if|if
condition|(
name|data
operator|!=
literal|null
condition|)
block|{
name|handleEmbeddedResource
argument_list|(
name|TikaInputStream
operator|.
name|get
argument_list|(
name|data
argument_list|)
argument_list|,
literal|"rtf-body"
argument_list|,
literal|null
argument_list|,
literal|"application/rtf"
argument_list|,
name|xhtml
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|textChunk
operator|!=
literal|null
condition|)
block|{
name|byte
index|[]
name|data
init|=
name|getValue
argument_list|(
name|textChunk
argument_list|)
decl_stmt|;
if|if
condition|(
name|data
operator|!=
literal|null
condition|)
block|{
name|handleEmbeddedResource
argument_list|(
name|TikaInputStream
operator|.
name|get
argument_list|(
name|data
argument_list|)
argument_list|,
literal|"text-body"
argument_list|,
literal|null
argument_list|,
name|MediaType
operator|.
name|TEXT_PLAIN
operator|.
name|toString
argument_list|()
argument_list|,
name|xhtml
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|//can return null!
specifier|private
name|byte
index|[]
name|getValue
parameter_list|(
name|Chunk
name|chunk
parameter_list|)
block|{
name|byte
index|[]
name|data
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|chunk
operator|instanceof
name|ByteChunk
condition|)
block|{
name|data
operator|=
operator|(
operator|(
name|ByteChunk
operator|)
name|chunk
operator|)
operator|.
name|getValue
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|chunk
operator|instanceof
name|StringChunk
condition|)
block|{
name|data
operator|=
operator|(
operator|(
name|StringChunk
operator|)
name|chunk
operator|)
operator|.
name|getRawValue
argument_list|()
expr_stmt|;
block|}
return|return
name|data
return|;
block|}
specifier|private
name|void
name|handleFromTo
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
index|[]
argument_list|>
name|headers
parameter_list|,
name|Metadata
name|metadata
parameter_list|)
throws|throws
name|ChunkNotFoundException
block|{
name|String
name|from
init|=
name|msg
operator|.
name|getDisplayFrom
argument_list|()
decl_stmt|;
name|metadata
operator|.
name|set
argument_list|(
name|TikaCoreProperties
operator|.
name|CREATOR
argument_list|,
name|from
argument_list|)
expr_stmt|;
name|metadata
operator|.
name|set
argument_list|(
name|Metadata
operator|.
name|MESSAGE_FROM
argument_list|,
name|from
argument_list|)
expr_stmt|;
name|metadata
operator|.
name|set
argument_list|(
name|Metadata
operator|.
name|MESSAGE_TO
argument_list|,
name|msg
operator|.
name|getDisplayTo
argument_list|()
argument_list|)
expr_stmt|;
name|metadata
operator|.
name|set
argument_list|(
name|Metadata
operator|.
name|MESSAGE_CC
argument_list|,
name|msg
operator|.
name|getDisplayCC
argument_list|()
argument_list|)
expr_stmt|;
name|metadata
operator|.
name|set
argument_list|(
name|Metadata
operator|.
name|MESSAGE_BCC
argument_list|,
name|msg
operator|.
name|getDisplayBCC
argument_list|()
argument_list|)
expr_stmt|;
name|Chunks
name|chunks
init|=
name|msg
operator|.
name|getMainChunks
argument_list|()
decl_stmt|;
name|StringChunk
name|sentByServerType
init|=
name|chunks
operator|.
name|getSentByServerType
argument_list|()
decl_stmt|;
if|if
condition|(
name|sentByServerType
operator|!=
literal|null
condition|)
block|{
name|metadata
operator|.
name|set
argument_list|(
name|Office
operator|.
name|MAPI_SENT_BY_SERVER_TYPE
argument_list|,
name|sentByServerType
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Map
argument_list|<
name|MAPIProperty
argument_list|,
name|List
argument_list|<
name|Chunk
argument_list|>
argument_list|>
name|mainChunks
init|=
name|msg
operator|.
name|getMainChunks
argument_list|()
operator|.
name|getAll
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Chunk
argument_list|>
name|senderAddresType
init|=
name|mainChunks
operator|.
name|get
argument_list|(
name|MAPIProperty
operator|.
name|SENDER_ADDRTYPE
argument_list|)
decl_stmt|;
name|String
name|senderAddressTypeString
init|=
literal|""
decl_stmt|;
if|if
condition|(
name|senderAddresType
operator|!=
literal|null
operator|&&
name|senderAddresType
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|senderAddressTypeString
operator|=
name|senderAddresType
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
comment|//sometimes in SMTP .msg files there is an email in the sender name field.
name|setFirstChunk
argument_list|(
name|mainChunks
operator|.
name|get
argument_list|(
name|MAPIProperty
operator|.
name|SENDER_NAME
argument_list|)
argument_list|,
name|Message
operator|.
name|MESSAGE_FROM_NAME
argument_list|,
name|metadata
argument_list|)
expr_stmt|;
name|setFirstChunk
argument_list|(
name|mainChunks
operator|.
name|get
argument_list|(
name|MAPIProperty
operator|.
name|SENT_REPRESENTING_NAME
argument_list|)
argument_list|,
name|Office
operator|.
name|MAPI_FROM_REPRESENTING_NAME
argument_list|,
name|metadata
argument_list|)
expr_stmt|;
name|setFirstChunk
argument_list|(
name|mainChunks
operator|.
name|get
argument_list|(
name|MAPIProperty
operator|.
name|SENDER_EMAIL_ADDRESS
argument_list|)
argument_list|,
name|Message
operator|.
name|MESSAGE_FROM_EMAIL
argument_list|,
name|metadata
argument_list|)
expr_stmt|;
name|setFirstChunk
argument_list|(
name|mainChunks
operator|.
name|get
argument_list|(
name|MAPIProperty
operator|.
name|SENT_REPRESENTING_EMAIL_ADDRESS
argument_list|)
argument_list|,
name|Office
operator|.
name|MAPI_FROM_REPRESENTING_EMAIL
argument_list|,
name|metadata
argument_list|)
expr_stmt|;
for|for
control|(
name|Recipient
name|recipient
range|:
name|buildRecipients
argument_list|()
control|)
block|{
switch|switch
condition|(
name|recipient
operator|.
name|recipientType
condition|)
block|{
case|case
name|TO
case|:
name|addEvenIfNull
argument_list|(
name|Message
operator|.
name|MESSAGE_TO_NAME
argument_list|,
name|recipient
operator|.
name|name
argument_list|,
name|metadata
argument_list|)
expr_stmt|;
name|addEvenIfNull
argument_list|(
name|Message
operator|.
name|MESSAGE_TO_DISPLAY_NAME
argument_list|,
name|recipient
operator|.
name|displayName
argument_list|,
name|metadata
argument_list|)
expr_stmt|;
name|addEvenIfNull
argument_list|(
name|Message
operator|.
name|MESSAGE_TO_EMAIL
argument_list|,
name|recipient
operator|.
name|emailAddress
argument_list|,
name|metadata
argument_list|)
expr_stmt|;
break|break;
case|case
name|CC
case|:
name|addEvenIfNull
argument_list|(
name|Message
operator|.
name|MESSAGE_CC_NAME
argument_list|,
name|recipient
operator|.
name|name
argument_list|,
name|metadata
argument_list|)
expr_stmt|;
name|addEvenIfNull
argument_list|(
name|Message
operator|.
name|MESSAGE_CC_DISPLAY_NAME
argument_list|,
name|recipient
operator|.
name|displayName
argument_list|,
name|metadata
argument_list|)
expr_stmt|;
name|addEvenIfNull
argument_list|(
name|Message
operator|.
name|MESSAGE_CC_EMAIL
argument_list|,
name|recipient
operator|.
name|emailAddress
argument_list|,
name|metadata
argument_list|)
expr_stmt|;
break|break;
case|case
name|BCC
case|:
name|addEvenIfNull
argument_list|(
name|Message
operator|.
name|MESSAGE_BCC_NAME
argument_list|,
name|recipient
operator|.
name|name
argument_list|,
name|metadata
argument_list|)
expr_stmt|;
name|addEvenIfNull
argument_list|(
name|Message
operator|.
name|MESSAGE_BCC_DISPLAY_NAME
argument_list|,
name|recipient
operator|.
name|displayName
argument_list|,
name|metadata
argument_list|)
expr_stmt|;
name|addEvenIfNull
argument_list|(
name|Message
operator|.
name|MESSAGE_BCC_EMAIL
argument_list|,
name|recipient
operator|.
name|emailAddress
argument_list|,
name|metadata
argument_list|)
expr_stmt|;
break|break;
default|default:
comment|//log unknown or undefined?
break|break;
block|}
block|}
block|}
comment|//need to add empty string to ensure that parallel arrays are parallel
comment|//even if one value is null.
specifier|public
specifier|static
name|void
name|addEvenIfNull
parameter_list|(
name|Property
name|property
parameter_list|,
name|String
name|value
parameter_list|,
name|Metadata
name|metadata
parameter_list|)
block|{
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|value
operator|=
literal|""
expr_stmt|;
block|}
name|metadata
operator|.
name|add
argument_list|(
name|property
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|setFirstChunk
parameter_list|(
name|List
argument_list|<
name|Chunk
argument_list|>
name|chunks
parameter_list|,
name|Property
name|property
parameter_list|,
name|Metadata
name|metadata
parameter_list|)
block|{
if|if
condition|(
name|chunks
operator|==
literal|null
operator|||
name|chunks
operator|.
name|size
argument_list|()
operator|<
literal|1
operator|||
name|chunks
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|metadata
operator|.
name|set
argument_list|(
name|property
argument_list|,
name|chunks
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|addFirstChunk
parameter_list|(
name|List
argument_list|<
name|Chunk
argument_list|>
name|chunks
parameter_list|,
name|Property
name|property
parameter_list|,
name|Metadata
name|metadata
parameter_list|)
block|{
if|if
condition|(
name|chunks
operator|==
literal|null
operator|||
name|chunks
operator|.
name|size
argument_list|()
operator|<
literal|1
operator|||
name|chunks
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|metadata
operator|.
name|add
argument_list|(
name|property
argument_list|,
name|chunks
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|//TODO: replace this with getMessageClassEnum when we upgrade POI
specifier|public
specifier|static
name|String
name|getMessageClass
parameter_list|(
name|String
name|messageClass
parameter_list|)
block|{
if|if
condition|(
name|messageClass
operator|==
literal|null
operator|||
name|messageClass
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
literal|"UNSPECIFIED"
return|;
block|}
elseif|else
if|if
condition|(
name|messageClass
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"IPM.Note"
argument_list|)
condition|)
block|{
return|return
literal|"NOTE"
return|;
block|}
elseif|else
if|if
condition|(
name|messageClass
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"IPM.Contact"
argument_list|)
condition|)
block|{
return|return
literal|"CONTACT"
return|;
block|}
elseif|else
if|if
condition|(
name|messageClass
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"IPM.Appointment"
argument_list|)
condition|)
block|{
return|return
literal|"APPOINTMENT"
return|;
block|}
elseif|else
if|if
condition|(
name|messageClass
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"IPM.StickyNote"
argument_list|)
condition|)
block|{
return|return
literal|"STICKY_NOTE"
return|;
block|}
elseif|else
if|if
condition|(
name|messageClass
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"IPM.Task"
argument_list|)
condition|)
block|{
return|return
literal|"TASK"
return|;
block|}
elseif|else
if|if
condition|(
name|messageClass
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"IPM.Post"
argument_list|)
condition|)
block|{
return|return
literal|"POST"
return|;
block|}
else|else
block|{
return|return
literal|"UNKNOWN"
return|;
block|}
block|}
comment|//As of 3.15, POI currently returns header[] by splitting on /\r?\n/
comment|//this rebuilds headers that are broken up over several lines
comment|//this also decodes encoded headers.
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|String
index|[]
argument_list|>
name|normalizeHeaders
parameter_list|(
name|String
index|[]
name|rows
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
index|[]
argument_list|>
name|ret
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|rows
operator|==
literal|null
condition|)
block|{
return|return
name|ret
return|;
block|}
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|headers
init|=
operator|new
name|LinkedHashMap
argument_list|()
decl_stmt|;
name|Matcher
name|headerKeyMatcher
init|=
name|HEADER_KEY_PAT
operator|.
name|matcher
argument_list|(
literal|""
argument_list|)
decl_stmt|;
name|String
name|lastKey
init|=
literal|null
decl_stmt|;
name|int
name|consec
init|=
literal|0
decl_stmt|;
for|for
control|(
name|String
name|row
range|:
name|rows
control|)
block|{
name|headerKeyMatcher
operator|.
name|reset
argument_list|(
name|row
argument_list|)
expr_stmt|;
if|if
condition|(
name|headerKeyMatcher
operator|.
name|find
argument_list|()
condition|)
block|{
if|if
condition|(
name|lastKey
operator|!=
literal|null
condition|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|vals
init|=
name|headers
operator|.
name|get
argument_list|(
name|lastKey
argument_list|)
decl_stmt|;
name|vals
operator|=
operator|(
name|vals
operator|==
literal|null
operator|)
condition|?
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
else|:
name|vals
expr_stmt|;
name|vals
operator|.
name|add
argument_list|(
name|decodeHeader
argument_list|(
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|headers
operator|.
name|put
argument_list|(
name|lastKey
argument_list|,
name|vals
argument_list|)
expr_stmt|;
block|}
comment|//reset sb
name|sb
operator|.
name|setLength
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|lastKey
operator|=
name|headerKeyMatcher
operator|.
name|group
argument_list|(
literal|1
argument_list|)
operator|.
name|trim
argument_list|()
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|headerKeyMatcher
operator|.
name|group
argument_list|(
literal|2
argument_list|)
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
name|consec
operator|=
literal|0
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|consec
operator|>
literal|0
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
name|row
argument_list|)
expr_stmt|;
block|}
name|consec
operator|++
expr_stmt|;
block|}
comment|//make sure to add the last value
if|if
condition|(
name|sb
operator|.
name|length
argument_list|()
operator|>
literal|0
operator|&&
name|lastKey
operator|!=
literal|null
condition|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|vals
init|=
name|headers
operator|.
name|get
argument_list|(
name|lastKey
argument_list|)
decl_stmt|;
name|vals
operator|=
operator|(
name|vals
operator|==
literal|null
operator|)
condition|?
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
else|:
name|vals
expr_stmt|;
name|vals
operator|.
name|add
argument_list|(
name|decodeHeader
argument_list|(
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|headers
operator|.
name|put
argument_list|(
name|lastKey
argument_list|,
name|vals
argument_list|)
expr_stmt|;
block|}
comment|//convert to array
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|e
range|:
name|headers
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|ret
operator|.
name|put
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|,
name|e
operator|.
name|getValue
argument_list|()
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|e
operator|.
name|getValue
argument_list|()
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
specifier|private
name|String
name|decodeHeader
parameter_list|(
name|String
name|header
parameter_list|)
block|{
return|return
name|DecoderUtil
operator|.
name|decodeEncodedWords
argument_list|(
name|header
argument_list|,
name|DecodeMonitor
operator|.
name|SILENT
argument_list|)
return|;
block|}
specifier|private
name|void
name|header
parameter_list|(
name|XHTMLContentHandler
name|xhtml
parameter_list|,
name|String
name|key
parameter_list|,
name|String
name|value
parameter_list|)
throws|throws
name|SAXException
block|{
if|if
condition|(
name|value
operator|!=
literal|null
operator|&&
name|value
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|xhtml
operator|.
name|element
argument_list|(
literal|"dt"
argument_list|,
name|key
argument_list|)
expr_stmt|;
name|xhtml
operator|.
name|element
argument_list|(
literal|"dd"
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Tries to identify the correct encoding for 7-bit (non-unicode)      *  strings in the file.      *<p>Many messages store their strings as unicode, which is      *  nice and easy. Some use one-byte encodings for their      *  strings, but don't always store the encoding anywhere      *  helpful in the file.</p>      *<p>This method checks for codepage properties, and failing that      *  looks at the headers for the message, and uses these to      *  guess the correct encoding for your file.</p>      *<p>Bug #49441 has more on why this is needed</p>      *<p>This is taken verbatim from POI (TIKA-1238)      * as a temporary workaround to prevent unsupported encoding exceptions</p>      */
specifier|private
name|void
name|guess7BitEncoding
parameter_list|(
name|MAPIMessage
name|msg
parameter_list|)
block|{
name|Chunks
name|mainChunks
init|=
name|msg
operator|.
name|getMainChunks
argument_list|()
decl_stmt|;
comment|//sanity check
if|if
condition|(
name|mainChunks
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|Map
argument_list|<
name|MAPIProperty
argument_list|,
name|List
argument_list|<
name|PropertyValue
argument_list|>
argument_list|>
name|props
init|=
name|mainChunks
operator|.
name|getProperties
argument_list|()
decl_stmt|;
if|if
condition|(
name|props
operator|!=
literal|null
condition|)
block|{
comment|// First choice is a codepage property
for|for
control|(
name|MAPIProperty
name|prop
range|:
operator|new
name|MAPIProperty
index|[]
block|{
name|MAPIProperty
operator|.
name|MESSAGE_CODEPAGE
block|,
name|MAPIProperty
operator|.
name|INTERNET_CPID
block|}
control|)
block|{
name|List
argument_list|<
name|PropertyValue
argument_list|>
name|val
init|=
name|props
operator|.
name|get
argument_list|(
name|prop
argument_list|)
decl_stmt|;
if|if
condition|(
name|val
operator|!=
literal|null
operator|&&
name|val
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|int
name|codepage
init|=
operator|(
operator|(
name|PropertyValue
operator|.
name|LongPropertyValue
operator|)
name|val
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|String
name|encoding
init|=
literal|null
decl_stmt|;
try|try
block|{
name|encoding
operator|=
name|CodePageUtil
operator|.
name|codepageToEncoding
argument_list|(
name|codepage
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedEncodingException
name|e
parameter_list|)
block|{
comment|//swallow
block|}
if|if
condition|(
name|tryToSet7BitEncoding
argument_list|(
name|msg
argument_list|,
name|encoding
argument_list|)
condition|)
block|{
return|return;
block|}
block|}
block|}
block|}
comment|// Second choice is a charset on a content type header
try|try
block|{
name|String
index|[]
name|headers
init|=
name|msg
operator|.
name|getHeaders
argument_list|()
decl_stmt|;
if|if
condition|(
name|headers
operator|!=
literal|null
operator|&&
name|headers
operator|.
name|length
operator|>
literal|0
condition|)
block|{
comment|// Look for a content type with a charset
name|Pattern
name|p
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"Content-Type:.*?charset=[\"']?([^;'\"]+)[\"']?"
argument_list|,
name|Pattern
operator|.
name|CASE_INSENSITIVE
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|header
range|:
name|headers
control|)
block|{
if|if
condition|(
name|header
operator|.
name|startsWith
argument_list|(
literal|"Content-Type"
argument_list|)
condition|)
block|{
name|Matcher
name|m
init|=
name|p
operator|.
name|matcher
argument_list|(
name|header
argument_list|)
decl_stmt|;
if|if
condition|(
name|m
operator|.
name|matches
argument_list|()
condition|)
block|{
comment|// Found it! Tell all the string chunks
name|String
name|charset
init|=
name|m
operator|.
name|group
argument_list|(
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|tryToSet7BitEncoding
argument_list|(
name|msg
argument_list|,
name|charset
argument_list|)
condition|)
block|{
return|return;
block|}
block|}
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|ChunkNotFoundException
name|e
parameter_list|)
block|{}
comment|// Nothing suitable in the headers, try HTML
comment|// TODO: do we need to replicate this in Tika? If we wind up
comment|// parsing the html version of the email, this is duplicative??
comment|// Or do we need to reset the header strings based on the html
comment|// meta header if there is no other information?
try|try
block|{
name|String
name|html
init|=
name|msg
operator|.
name|getHtmlBody
argument_list|()
decl_stmt|;
if|if
condition|(
name|html
operator|!=
literal|null
operator|&&
name|html
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|Charset
name|charset
init|=
literal|null
decl_stmt|;
try|try
block|{
name|charset
operator|=
name|detector
operator|.
name|detect
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|html
operator|.
name|getBytes
argument_list|(
name|UTF_8
argument_list|)
argument_list|)
argument_list|,
name|EMPTY_METADATA
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|//swallow
block|}
if|if
condition|(
name|charset
operator|!=
literal|null
operator|&&
name|tryToSet7BitEncoding
argument_list|(
name|msg
argument_list|,
name|charset
operator|.
name|name
argument_list|()
argument_list|)
condition|)
block|{
return|return;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|ChunkNotFoundException
name|e
parameter_list|)
block|{}
comment|//absolute last resort, try charset detector
name|StringChunk
name|text
init|=
name|mainChunks
operator|.
name|getTextBodyChunk
argument_list|()
decl_stmt|;
if|if
condition|(
name|text
operator|!=
literal|null
condition|)
block|{
name|CharsetDetector
name|detector
init|=
operator|new
name|CharsetDetector
argument_list|()
decl_stmt|;
name|detector
operator|.
name|setText
argument_list|(
name|text
operator|.
name|getRawValue
argument_list|()
argument_list|)
expr_stmt|;
name|CharsetMatch
name|match
init|=
name|detector
operator|.
name|detect
argument_list|()
decl_stmt|;
if|if
condition|(
name|match
operator|!=
literal|null
operator|&&
name|match
operator|.
name|getConfidence
argument_list|()
operator|>
literal|35
operator|&&
name|tryToSet7BitEncoding
argument_list|(
name|msg
argument_list|,
name|match
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
return|return;
block|}
block|}
block|}
specifier|private
name|boolean
name|tryToSet7BitEncoding
parameter_list|(
name|MAPIMessage
name|msg
parameter_list|,
name|String
name|charsetName
parameter_list|)
block|{
if|if
condition|(
name|charsetName
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|charsetName
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"utf-8"
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
try|try
block|{
if|if
condition|(
name|Charset
operator|.
name|isSupported
argument_list|(
name|charsetName
argument_list|)
condition|)
block|{
name|msg
operator|.
name|set7BitEncoding
argument_list|(
name|charsetName
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
catch|catch
parameter_list|(
name|IllegalCharsetNameException
decl||
name|UnsupportedCharsetException
name|e
parameter_list|)
block|{
comment|//swallow
block|}
return|return
literal|false
return|;
block|}
specifier|private
name|List
argument_list|<
name|Recipient
argument_list|>
name|buildRecipients
parameter_list|()
block|{
name|RecipientChunks
index|[]
name|recipientChunks
init|=
name|msg
operator|.
name|getRecipientDetailsChunks
argument_list|()
decl_stmt|;
if|if
condition|(
name|recipientChunks
operator|==
literal|null
condition|)
block|{
return|return
name|Collections
operator|.
name|EMPTY_LIST
return|;
block|}
name|List
argument_list|<
name|Recipient
argument_list|>
name|recipients
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|RecipientChunks
name|chunks
range|:
name|recipientChunks
control|)
block|{
name|Recipient
name|r
init|=
operator|new
name|Recipient
argument_list|()
decl_stmt|;
name|r
operator|.
name|displayName
operator|=
operator|(
name|chunks
operator|.
name|recipientDisplayNameChunk
operator|!=
literal|null
operator|)
condition|?
name|chunks
operator|.
name|recipientDisplayNameChunk
operator|.
name|toString
argument_list|()
else|:
literal|null
expr_stmt|;
name|r
operator|.
name|name
operator|=
operator|(
name|chunks
operator|.
name|recipientNameChunk
operator|!=
literal|null
operator|)
condition|?
name|chunks
operator|.
name|recipientNameChunk
operator|.
name|toString
argument_list|()
else|:
literal|null
expr_stmt|;
name|r
operator|.
name|emailAddress
operator|=
name|chunks
operator|.
name|getRecipientEmailAddress
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|PropertyValue
argument_list|>
name|vals
init|=
name|chunks
operator|.
name|getProperties
argument_list|()
operator|.
name|get
argument_list|(
name|MAPIProperty
operator|.
name|RECIPIENT_TYPE
argument_list|)
decl_stmt|;
name|RECIPIENT_TYPE
name|recipientType
init|=
name|RECIPIENT_TYPE
operator|.
name|UNSPECIFIED
decl_stmt|;
if|if
condition|(
name|vals
operator|!=
literal|null
operator|&&
name|vals
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|Object
name|val
init|=
name|vals
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|val
operator|instanceof
name|Integer
condition|)
block|{
name|recipientType
operator|=
name|RECIPIENT_TYPE
operator|.
name|getTypeFromVal
argument_list|(
operator|(
name|int
operator|)
name|val
argument_list|)
expr_stmt|;
block|}
block|}
name|r
operator|.
name|recipientType
operator|=
name|recipientType
expr_stmt|;
name|vals
operator|=
name|chunks
operator|.
name|getProperties
argument_list|()
operator|.
name|get
argument_list|(
name|MAPIProperty
operator|.
name|ADDRTYPE
argument_list|)
expr_stmt|;
if|if
condition|(
name|vals
operator|!=
literal|null
operator|&&
name|vals
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|String
name|val
init|=
name|vals
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
name|val
operator|!=
literal|null
condition|)
block|{
name|val
operator|=
name|val
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|US
argument_list|)
expr_stmt|;
comment|//need to find example of this for testing
if|if
condition|(
name|val
operator|.
name|equals
argument_list|(
literal|"ex"
argument_list|)
condition|)
block|{
name|r
operator|.
name|addressType
operator|=
name|ADDRESS_TYPE
operator|.
name|EX
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|val
operator|.
name|equals
argument_list|(
literal|"smtp"
argument_list|)
condition|)
block|{
name|r
operator|.
name|addressType
operator|=
name|ADDRESS_TYPE
operator|.
name|SMTP
expr_stmt|;
block|}
block|}
block|}
name|recipients
operator|.
name|add
argument_list|(
name|r
argument_list|)
expr_stmt|;
block|}
return|return
name|recipients
return|;
block|}
specifier|private
specifier|static
class|class
name|Recipient
block|{
name|String
name|name
decl_stmt|;
name|String
name|displayName
decl_stmt|;
name|RECIPIENT_TYPE
name|recipientType
decl_stmt|;
name|String
name|emailAddress
decl_stmt|;
name|ADDRESS_TYPE
name|addressType
decl_stmt|;
block|}
block|}
end_class

end_unit

