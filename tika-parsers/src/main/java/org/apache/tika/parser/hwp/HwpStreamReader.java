begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|hwp
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|EOFException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|util
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|util
operator|.
name|LittleEndian
import|;
end_import

begin_class
specifier|public
class|class
name|HwpStreamReader
block|{
specifier|private
name|InputStream
name|input
decl_stmt|;
specifier|private
name|byte
index|[]
name|buf
decl_stmt|;
specifier|public
name|HwpStreamReader
parameter_list|(
name|InputStream
name|inputStream
parameter_list|)
block|{
name|this
operator|.
name|input
operator|=
name|inputStream
expr_stmt|;
name|buf
operator|=
operator|new
name|byte
index|[
literal|4
index|]
expr_stmt|;
block|}
comment|/**      * More data to read ?      *      * @return      * @throws IOException      */
specifier|public
name|boolean
name|available
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|input
operator|.
name|available
argument_list|()
operator|>
literal|0
return|;
block|}
comment|/**      * unsigned 1 byte      *      * @return      * @throws IOException      */
specifier|public
name|short
name|uint8
parameter_list|()
throws|throws
name|IOException
block|{
name|int
name|read
init|=
name|IOUtils
operator|.
name|readFully
argument_list|(
name|input
argument_list|,
name|buf
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|read
operator|==
operator|-
literal|1
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
return|return
name|LittleEndian
operator|.
name|getUByte
argument_list|(
name|buf
argument_list|)
return|;
block|}
comment|/**      * unsigned 2 byte      *      * @return      * @throws IOException      */
specifier|public
name|int
name|uint16
parameter_list|()
throws|throws
name|IOException
block|{
name|int
name|read
init|=
name|IOUtils
operator|.
name|readFully
argument_list|(
name|input
argument_list|,
name|buf
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|)
decl_stmt|;
if|if
condition|(
name|read
operator|==
operator|-
literal|1
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
if|if
condition|(
name|read
operator|<
literal|2
condition|)
block|{
throw|throw
operator|new
name|EOFException
argument_list|()
throw|;
block|}
return|return
name|LittleEndian
operator|.
name|getUShort
argument_list|(
name|buf
argument_list|)
return|;
block|}
comment|/**      * unsigned 2 byte array      *      * @param i      * @return      * @throws IOException      */
specifier|public
name|int
index|[]
name|uint16
parameter_list|(
name|int
name|i
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|i
operator|<=
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
name|byte
index|[]
name|buf
init|=
operator|new
name|byte
index|[
name|i
operator|*
literal|2
index|]
decl_stmt|;
name|int
name|read
init|=
name|IOUtils
operator|.
name|readFully
argument_list|(
name|input
argument_list|,
name|buf
argument_list|,
literal|0
argument_list|,
name|i
operator|*
literal|2
argument_list|)
decl_stmt|;
if|if
condition|(
name|read
operator|!=
name|i
operator|*
literal|2
condition|)
block|{
throw|throw
operator|new
name|EOFException
argument_list|()
throw|;
block|}
name|int
index|[]
name|uints
init|=
operator|new
name|int
index|[
name|i
index|]
decl_stmt|;
for|for
control|(
name|int
name|ii
init|=
literal|0
init|;
name|ii
operator|<
name|i
condition|;
name|ii
operator|++
control|)
block|{
name|uints
index|[
name|ii
index|]
operator|=
name|LittleEndian
operator|.
name|getUShort
argument_list|(
name|buf
argument_list|,
name|ii
operator|*
literal|2
argument_list|)
expr_stmt|;
block|}
return|return
name|uints
return|;
block|}
comment|/**      * unsigned 4 byte      *      * @return      * @throws IOException      */
specifier|public
name|long
name|uint32
parameter_list|()
throws|throws
name|IOException
block|{
name|int
name|read
init|=
name|IOUtils
operator|.
name|readFully
argument_list|(
name|input
argument_list|,
name|buf
argument_list|,
literal|0
argument_list|,
literal|4
argument_list|)
decl_stmt|;
if|if
condition|(
name|read
operator|==
operator|-
literal|1
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
if|if
condition|(
name|read
operator|<
literal|4
condition|)
block|{
throw|throw
operator|new
name|EOFException
argument_list|()
throw|;
block|}
return|return
name|LittleEndian
operator|.
name|getUInt
argument_list|(
name|buf
argument_list|)
return|;
block|}
comment|/**      * ensure skip of n byte      *      * @param n      * @throws IOException      */
specifier|public
name|void
name|ensureSkip
parameter_list|(
name|long
name|n
parameter_list|)
throws|throws
name|IOException
block|{
name|IOUtils
operator|.
name|skipFully
argument_list|(
name|input
argument_list|,
name|n
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

