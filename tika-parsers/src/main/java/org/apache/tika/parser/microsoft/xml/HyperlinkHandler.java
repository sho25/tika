begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|microsoft
operator|.
name|xml
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|sax
operator|.
name|XHTMLContentHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|Attributes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|ContentHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|helpers
operator|.
name|AttributesImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|helpers
operator|.
name|DefaultHandler
import|;
end_import

begin_class
class|class
name|HyperlinkHandler
extends|extends
name|DefaultHandler
block|{
specifier|private
specifier|final
name|ContentHandler
name|handler
decl_stmt|;
specifier|private
specifier|final
name|String
name|namespace
decl_stmt|;
name|boolean
name|inLink
init|=
literal|false
decl_stmt|;
name|StringBuilder
name|linkCache
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|String
name|href
init|=
literal|null
decl_stmt|;
specifier|public
name|HyperlinkHandler
parameter_list|(
name|ContentHandler
name|handler
parameter_list|,
name|String
name|namespace
parameter_list|)
block|{
name|this
operator|.
name|handler
operator|=
name|handler
expr_stmt|;
name|this
operator|.
name|namespace
operator|=
name|namespace
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|startElement
parameter_list|(
name|String
name|uri
parameter_list|,
name|String
name|localName
parameter_list|,
name|String
name|qName
parameter_list|,
name|Attributes
name|attrs
parameter_list|)
throws|throws
name|SAXException
block|{
if|if
condition|(
name|AbstractXML2003Parser
operator|.
name|WORD_ML_URL
operator|.
name|equals
argument_list|(
name|uri
argument_list|)
condition|)
block|{
if|if
condition|(
name|AbstractXML2003Parser
operator|.
name|HLINK
operator|.
name|equals
argument_list|(
name|localName
argument_list|)
condition|)
block|{
name|href
operator|=
name|attrs
operator|.
name|getValue
argument_list|(
name|AbstractXML2003Parser
operator|.
name|WORD_ML_URL
argument_list|,
name|AbstractXML2003Parser
operator|.
name|HLINK_DEST
argument_list|)
expr_stmt|;
if|if
condition|(
name|href
operator|!=
literal|null
condition|)
block|{
name|href
operator|=
name|href
operator|.
name|trim
argument_list|()
expr_stmt|;
block|}
name|inLink
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|characters
parameter_list|(
name|char
index|[]
name|str
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|len
parameter_list|)
throws|throws
name|SAXException
block|{
if|if
condition|(
name|inLink
condition|)
block|{
name|linkCache
operator|.
name|append
argument_list|(
name|str
argument_list|,
name|offset
argument_list|,
name|len
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|endElement
parameter_list|(
name|String
name|uri
parameter_list|,
name|String
name|localName
parameter_list|,
name|String
name|qName
parameter_list|)
throws|throws
name|SAXException
block|{
if|if
condition|(
operator|!
name|namespace
operator|.
name|equals
argument_list|(
name|uri
argument_list|)
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|AbstractXML2003Parser
operator|.
name|HLINK
operator|.
name|equals
argument_list|(
name|localName
argument_list|)
condition|)
block|{
name|AttributesImpl
name|attrs
init|=
operator|new
name|AttributesImpl
argument_list|()
decl_stmt|;
if|if
condition|(
name|href
operator|!=
literal|null
condition|)
block|{
name|attrs
operator|.
name|addAttribute
argument_list|(
name|XHTMLContentHandler
operator|.
name|XHTML
argument_list|,
name|AbstractXML2003Parser
operator|.
name|HREF
argument_list|,
name|AbstractXML2003Parser
operator|.
name|HREF
argument_list|,
name|AbstractXML2003Parser
operator|.
name|CDATA
argument_list|,
name|href
argument_list|)
expr_stmt|;
block|}
name|handler
operator|.
name|startElement
argument_list|(
name|XHTMLContentHandler
operator|.
name|XHTML
argument_list|,
name|AbstractXML2003Parser
operator|.
name|A
argument_list|,
name|AbstractXML2003Parser
operator|.
name|A
argument_list|,
name|attrs
argument_list|)
expr_stmt|;
name|String
name|linkString
init|=
name|linkCache
operator|.
name|toString
argument_list|()
decl_stmt|;
comment|//can't be null I don't think
if|if
condition|(
name|linkString
operator|!=
literal|null
condition|)
block|{
name|char
index|[]
name|chars
init|=
name|linkString
operator|.
name|trim
argument_list|()
operator|.
name|toCharArray
argument_list|()
decl_stmt|;
name|handler
operator|.
name|characters
argument_list|(
name|chars
argument_list|,
literal|0
argument_list|,
name|chars
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
name|handler
operator|.
name|endElement
argument_list|(
name|XHTMLContentHandler
operator|.
name|XHTML
argument_list|,
name|AbstractXML2003Parser
operator|.
name|A
argument_list|,
name|AbstractXML2003Parser
operator|.
name|A
argument_list|)
expr_stmt|;
comment|//reset link cache and inLink
name|linkCache
operator|.
name|setLength
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|inLink
operator|=
literal|false
expr_stmt|;
name|href
operator|=
literal|null
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

