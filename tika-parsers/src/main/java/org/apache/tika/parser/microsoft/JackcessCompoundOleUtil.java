begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/* Copyright (c) 2013 James Ahlborn  Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the License. You may obtain a copy of the License at  http://www.apache.org/licenses/LICENSE-2.0  Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License. */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|microsoft
package|;
end_package

begin_import
import|import
name|com
operator|.
name|healthmarketscience
operator|.
name|jackcess
operator|.
name|RuntimeIOException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|healthmarketscience
operator|.
name|jackcess
operator|.
name|impl
operator|.
name|ByteUtil
import|;
end_import

begin_import
import|import
name|com
operator|.
name|healthmarketscience
operator|.
name|jackcess
operator|.
name|impl
operator|.
name|CustomToStringStyle
import|;
end_import

begin_import
import|import
name|com
operator|.
name|healthmarketscience
operator|.
name|jackcess
operator|.
name|util
operator|.
name|MemFileChannel
import|;
end_import

begin_import
import|import
name|com
operator|.
name|healthmarketscience
operator|.
name|jackcess
operator|.
name|util
operator|.
name|OleBlob
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|poifs
operator|.
name|filesystem
operator|.
name|DirectoryEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|poifs
operator|.
name|filesystem
operator|.
name|DocumentEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|poifs
operator|.
name|filesystem
operator|.
name|DocumentInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|poifs
operator|.
name|filesystem
operator|.
name|POIFSFileSystem
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|UnsupportedEncodingException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URLDecoder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URLEncoder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * Temporary copy/paste from Jackcess to allow upgrade to POI 4.0.0.  * This class will be removed once POI 4.0.0 is released and jackcess  * updates to the most recent version of POI.  * @deprecated -- this class will be removed in Tika>= 1.20  */
end_comment

begin_class
annotation|@
name|Deprecated
class|class
name|JackcessCompoundOleUtil
implements|implements
name|JackcessOleUtil
operator|.
name|CompoundPackageFactory
block|{
specifier|private
specifier|static
specifier|final
name|String
name|ENTRY_NAME_CHARSET
init|=
literal|"UTF-8"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|ENTRY_SEPARATOR
init|=
literal|"/"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|CONTENTS_ENTRY
init|=
literal|"CONTENTS"
decl_stmt|;
static|static
block|{
comment|// force a poi class to be loaded to ensure that when this class is
comment|// loaded, we know that the poi classes are available
name|POIFSFileSystem
operator|.
name|class
operator|.
name|getName
argument_list|()
expr_stmt|;
block|}
specifier|public
name|JackcessCompoundOleUtil
parameter_list|()
block|{     }
comment|/**      * Creates a nes CompoundContent for the given blob information.      */
specifier|public
name|JackcessOleUtil
operator|.
name|ContentImpl
name|createCompoundPackageContent
parameter_list|(
name|JackcessOleUtil
operator|.
name|OleBlobImpl
name|blob
parameter_list|,
name|String
name|prettyName
parameter_list|,
name|String
name|className
parameter_list|,
name|String
name|typeName
parameter_list|,
name|ByteBuffer
name|blobBb
parameter_list|,
name|int
name|dataBlockLen
parameter_list|)
block|{
return|return
operator|new
name|CompoundContentImpl
argument_list|(
name|blob
argument_list|,
name|prettyName
argument_list|,
name|className
argument_list|,
name|typeName
argument_list|,
name|blobBb
operator|.
name|position
argument_list|()
argument_list|,
name|dataBlockLen
argument_list|)
return|;
block|}
comment|/**      * Gets a DocumentEntry from compound storage based on a fully qualified,      * encoded entry name.      *      * @param entryName fully qualified, encoded entry name      * @param dir       root directory of the compound storage      * @return the relevant DocumentEntry      * @throws FileNotFoundException if the entry does not exist      * @throws IOException           if some other io error occurs      */
specifier|public
specifier|static
name|DocumentEntry
name|getDocumentEntry
parameter_list|(
name|String
name|entryName
parameter_list|,
name|DirectoryEntry
name|dir
parameter_list|)
throws|throws
name|IOException
block|{
comment|// split entry name into individual components and decode them
name|List
argument_list|<
name|String
argument_list|>
name|entryNames
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|str
range|:
name|entryName
operator|.
name|split
argument_list|(
name|ENTRY_SEPARATOR
argument_list|)
control|)
block|{
if|if
condition|(
name|str
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
continue|continue;
block|}
name|entryNames
operator|.
name|add
argument_list|(
name|decodeEntryName
argument_list|(
name|str
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|DocumentEntry
name|entry
init|=
literal|null
decl_stmt|;
name|Iterator
argument_list|<
name|String
argument_list|>
name|iter
init|=
name|entryNames
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|poifs
operator|.
name|filesystem
operator|.
name|Entry
name|tmpEntry
init|=
name|dir
operator|.
name|getEntry
argument_list|(
name|iter
operator|.
name|next
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|tmpEntry
operator|instanceof
name|DirectoryEntry
condition|)
block|{
name|dir
operator|=
operator|(
name|DirectoryEntry
operator|)
name|tmpEntry
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|iter
operator|.
name|hasNext
argument_list|()
operator|&&
operator|(
name|tmpEntry
operator|instanceof
name|DocumentEntry
operator|)
condition|)
block|{
name|entry
operator|=
operator|(
name|DocumentEntry
operator|)
name|tmpEntry
expr_stmt|;
block|}
else|else
block|{
break|break;
block|}
block|}
if|if
condition|(
name|entry
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|FileNotFoundException
argument_list|(
literal|"Could not find document "
operator|+
name|entryName
argument_list|)
throw|;
block|}
return|return
name|entry
return|;
block|}
specifier|private
specifier|static
name|String
name|encodeEntryName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
try|try
block|{
return|return
name|URLEncoder
operator|.
name|encode
argument_list|(
name|name
argument_list|,
name|ENTRY_NAME_CHARSET
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|UnsupportedEncodingException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|static
name|String
name|decodeEntryName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
try|try
block|{
return|return
name|URLDecoder
operator|.
name|decode
argument_list|(
name|name
argument_list|,
name|ENTRY_NAME_CHARSET
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|UnsupportedEncodingException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|static
specifier|final
class|class
name|CompoundContentImpl
extends|extends
name|JackcessOleUtil
operator|.
name|EmbeddedPackageContentImpl
implements|implements
name|OleBlob
operator|.
name|CompoundContent
block|{
specifier|private
name|POIFSFileSystem
name|_fs
decl_stmt|;
specifier|private
name|CompoundContentImpl
parameter_list|(
name|JackcessOleUtil
operator|.
name|OleBlobImpl
name|blob
parameter_list|,
name|String
name|prettyName
parameter_list|,
name|String
name|className
parameter_list|,
name|String
name|typeName
parameter_list|,
name|int
name|position
parameter_list|,
name|int
name|length
parameter_list|)
block|{
name|super
argument_list|(
name|blob
argument_list|,
name|prettyName
argument_list|,
name|className
argument_list|,
name|typeName
argument_list|,
name|position
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
specifier|public
name|OleBlob
operator|.
name|ContentType
name|getType
parameter_list|()
block|{
return|return
name|OleBlob
operator|.
name|ContentType
operator|.
name|COMPOUND_STORAGE
return|;
block|}
specifier|private
name|POIFSFileSystem
name|getFileSystem
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|_fs
operator|==
literal|null
condition|)
block|{
name|_fs
operator|=
operator|new
name|POIFSFileSystem
argument_list|(
name|MemFileChannel
operator|.
name|newChannel
argument_list|(
name|getStream
argument_list|()
argument_list|,
literal|"r"
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|_fs
return|;
block|}
specifier|public
name|Iterator
argument_list|<
name|Entry
argument_list|>
name|iterator
parameter_list|()
block|{
try|try
block|{
return|return
name|getEntries
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|Entry
argument_list|>
argument_list|()
argument_list|,
name|getFileSystem
argument_list|()
operator|.
name|getRoot
argument_list|()
argument_list|,
name|ENTRY_SEPARATOR
argument_list|)
operator|.
name|iterator
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeIOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|EntryImpl
name|getEntry
parameter_list|(
name|String
name|entryName
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|EntryImpl
argument_list|(
name|entryName
argument_list|,
name|getDocumentEntry
argument_list|(
name|entryName
argument_list|,
name|getFileSystem
argument_list|()
operator|.
name|getRoot
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|hasContentsEntry
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|getFileSystem
argument_list|()
operator|.
name|getRoot
argument_list|()
operator|.
name|hasEntry
argument_list|(
name|CONTENTS_ENTRY
argument_list|)
return|;
block|}
specifier|public
name|EntryImpl
name|getContentsEntry
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|getEntry
argument_list|(
name|CONTENTS_ENTRY
argument_list|)
return|;
block|}
specifier|private
name|List
argument_list|<
name|Entry
argument_list|>
name|getEntries
parameter_list|(
name|List
argument_list|<
name|Entry
argument_list|>
name|entries
parameter_list|,
name|DirectoryEntry
name|dir
parameter_list|,
name|String
name|prefix
parameter_list|)
block|{
for|for
control|(
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|poifs
operator|.
name|filesystem
operator|.
name|Entry
name|entry
range|:
name|dir
control|)
block|{
if|if
condition|(
name|entry
operator|instanceof
name|DirectoryEntry
condition|)
block|{
comment|// .. recurse into this directory
name|getEntries
argument_list|(
name|entries
argument_list|,
operator|(
name|DirectoryEntry
operator|)
name|entry
argument_list|,
name|prefix
operator|+
name|ENTRY_SEPARATOR
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|entry
operator|instanceof
name|DocumentEntry
condition|)
block|{
comment|// grab the entry name/detils
name|DocumentEntry
name|de
init|=
operator|(
name|DocumentEntry
operator|)
name|entry
decl_stmt|;
name|String
name|entryName
init|=
name|prefix
operator|+
name|encodeEntryName
argument_list|(
name|entry
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|entries
operator|.
name|add
argument_list|(
operator|new
name|EntryImpl
argument_list|(
name|entryName
argument_list|,
name|de
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|entries
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
block|{
name|ByteUtil
operator|.
name|closeQuietly
argument_list|(
name|_fs
argument_list|)
expr_stmt|;
name|_fs
operator|=
literal|null
expr_stmt|;
name|super
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
specifier|private
specifier|final
class|class
name|EntryImpl
implements|implements
name|OleBlob
operator|.
name|CompoundContent
operator|.
name|Entry
block|{
specifier|private
specifier|final
name|String
name|_name
decl_stmt|;
specifier|private
specifier|final
name|DocumentEntry
name|_docEntry
decl_stmt|;
specifier|private
name|EntryImpl
parameter_list|(
name|String
name|name
parameter_list|,
name|DocumentEntry
name|docEntry
parameter_list|)
block|{
name|_name
operator|=
name|name
expr_stmt|;
name|_docEntry
operator|=
name|docEntry
expr_stmt|;
block|}
specifier|public
name|OleBlob
operator|.
name|ContentType
name|getType
parameter_list|()
block|{
return|return
name|OleBlob
operator|.
name|ContentType
operator|.
name|UNKNOWN
return|;
block|}
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|_name
return|;
block|}
specifier|public
name|CompoundContentImpl
name|getParent
parameter_list|()
block|{
return|return
name|CompoundContentImpl
operator|.
name|this
return|;
block|}
specifier|public
name|JackcessOleUtil
operator|.
name|OleBlobImpl
name|getBlob
parameter_list|()
block|{
return|return
name|getParent
argument_list|()
operator|.
name|getBlob
argument_list|()
return|;
block|}
specifier|public
name|long
name|length
parameter_list|()
block|{
return|return
name|_docEntry
operator|.
name|getSize
argument_list|()
return|;
block|}
specifier|public
name|InputStream
name|getStream
parameter_list|()
throws|throws
name|IOException
block|{
return|return
operator|new
name|DocumentInputStream
argument_list|(
name|_docEntry
argument_list|)
return|;
block|}
specifier|public
name|void
name|writeTo
parameter_list|(
name|OutputStream
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|InputStream
name|in
init|=
literal|null
decl_stmt|;
try|try
block|{
name|ByteUtil
operator|.
name|copy
argument_list|(
name|in
operator|=
name|getStream
argument_list|()
argument_list|,
name|out
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|ByteUtil
operator|.
name|closeQuietly
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|CustomToStringStyle
operator|.
name|valueBuilder
argument_list|(
name|this
argument_list|)
operator|.
name|append
argument_list|(
literal|"name"
argument_list|,
name|_name
argument_list|)
operator|.
name|append
argument_list|(
literal|"length"
argument_list|,
name|length
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
block|}
block|}
end_class

end_unit

