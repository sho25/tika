begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|chm
operator|.
name|assertion
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|chm
operator|.
name|accessor
operator|.
name|ChmAccessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|chm
operator|.
name|accessor
operator|.
name|ChmLzxcResetTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|chm
operator|.
name|core
operator|.
name|ChmCommons
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|chm
operator|.
name|exception
operator|.
name|ChmParsingException
import|;
end_import

begin_comment
comment|/**  * Contains chm extractor assertions  */
end_comment

begin_class
specifier|public
class|class
name|ChmAssert
block|{
comment|/** 	 * Checks a validity of the chmBlockSegment parameters 	 *  	 * @param data 	 *            byte[] 	 * @param resetTable 	 *            ChmLzxcResetTable 	 * @param blockNumber 	 *            int 	 * @param lzxcBlockOffset 	 *            int 	 * @param lzxcBlockLength 	 *            int 	 */
specifier|public
specifier|static
specifier|final
name|void
name|assertChmBlockSegment
parameter_list|(
name|byte
index|[]
name|data
parameter_list|,
name|ChmLzxcResetTable
name|resetTable
parameter_list|,
name|int
name|blockNumber
parameter_list|,
name|int
name|lzxcBlockOffset
parameter_list|,
name|int
name|lzxcBlockLength
parameter_list|)
block|{
if|if
condition|(
operator|(
name|data
operator|==
literal|null
operator|)
condition|)
throw|throw
operator|new
name|ChmParsingException
argument_list|(
literal|"data[] is null"
argument_list|)
throw|;
if|if
condition|(
operator|(
name|data
operator|.
name|length
operator|<=
literal|0
operator|)
condition|)
throw|throw
operator|new
name|ChmParsingException
argument_list|(
literal|"data[] length should be greater than zero"
argument_list|)
throw|;
if|if
condition|(
name|resetTable
operator|==
literal|null
condition|)
throw|throw
operator|new
name|ChmParsingException
argument_list|(
literal|"resetTable is null"
argument_list|)
throw|;
if|if
condition|(
name|resetTable
operator|.
name|getBlockAddress
argument_list|()
operator|.
name|length
operator|<=
literal|1
condition|)
throw|throw
operator|new
name|ChmParsingException
argument_list|(
literal|"resetTable.getBlockAddress().length should be greater than zero"
argument_list|)
throw|;
if|if
condition|(
name|blockNumber
operator|<
literal|0
condition|)
throw|throw
operator|new
name|ChmParsingException
argument_list|(
literal|"blockNumber should be positive number"
argument_list|)
throw|;
if|if
condition|(
name|lzxcBlockOffset
operator|<
literal|0
condition|)
throw|throw
operator|new
name|ChmParsingException
argument_list|(
literal|"lzxcBlockOffset should be positive number"
argument_list|)
throw|;
if|if
condition|(
name|lzxcBlockLength
operator|<
literal|0
condition|)
throw|throw
operator|new
name|ChmParsingException
argument_list|(
literal|"lzxcBlockLength should be positive number"
argument_list|)
throw|;
block|}
comment|/** 	 * Checks if InputStream is not null 	 *  	 * @param is 	 *            InputStream 	 */
specifier|public
specifier|static
specifier|final
name|void
name|assertInputStreamNotNull
parameter_list|(
name|InputStream
name|is
parameter_list|)
block|{
if|if
condition|(
name|is
operator|==
literal|null
condition|)
throw|throw
operator|new
name|ChmParsingException
argument_list|(
literal|"input sream is null"
argument_list|)
throw|;
block|}
comment|/** 	 * Checks validity of ChmAccessor parameters 	 *  	 * @param data 	 * @param chmItsfHeader 	 * @param count 	 */
specifier|public
specifier|static
specifier|final
name|void
name|assertChmAccessorParameters
parameter_list|(
name|byte
index|[]
name|data
parameter_list|,
name|ChmAccessor
argument_list|<
name|?
argument_list|>
name|chmAccessor
parameter_list|,
name|int
name|count
parameter_list|)
block|{
name|assertByteArrayNotNull
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|assertChmAccessorNotNull
argument_list|(
name|chmAccessor
argument_list|)
expr_stmt|;
block|}
comment|/** 	 * Checks if byte[] is not null 	 *  	 * @param data 	 */
specifier|public
specifier|static
specifier|final
name|void
name|assertByteArrayNotNull
parameter_list|(
name|byte
index|[]
name|data
parameter_list|)
block|{
if|if
condition|(
name|data
operator|==
literal|null
condition|)
throw|throw
operator|new
name|ChmParsingException
argument_list|(
literal|"byte[] data is null"
argument_list|)
throw|;
block|}
comment|/** 	 * Checks if ChmAccessor is not null In case of null throws exception 	 *  	 * @param ChmAccessor 	 */
specifier|public
specifier|static
specifier|final
name|void
name|assertChmAccessorNotNull
parameter_list|(
name|ChmAccessor
argument_list|<
name|?
argument_list|>
name|chmAccessor
parameter_list|)
block|{
if|if
condition|(
name|chmAccessor
operator|==
literal|null
condition|)
throw|throw
operator|new
name|ChmParsingException
argument_list|(
literal|"chm header is null"
argument_list|)
throw|;
block|}
comment|/** 	 * Checks validity of the DirectoryListingEntry's parameters In case of 	 * invalid parameter(s) throws an exception 	 *  	 * @param name_length 	 *            length of the chm entry name 	 * @param name 	 *            chm entry name 	 * @param entryType 	 *            EntryType 	 * @param offset 	 * @param length 	 */
specifier|public
specifier|static
specifier|final
name|void
name|assertDirectoryListingEntry
parameter_list|(
name|int
name|name_length
parameter_list|,
name|String
name|name
parameter_list|,
name|ChmCommons
operator|.
name|EntryType
name|entryType
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|)
block|{
if|if
condition|(
name|name_length
operator|<
literal|0
condition|)
throw|throw
operator|new
name|ChmParsingException
argument_list|(
literal|"invalid name length"
argument_list|)
throw|;
if|if
condition|(
name|name
operator|==
literal|null
condition|)
throw|throw
operator|new
name|ChmParsingException
argument_list|(
literal|"invalid name"
argument_list|)
throw|;
if|if
condition|(
operator|(
name|entryType
operator|!=
name|ChmCommons
operator|.
name|EntryType
operator|.
name|COMPRESSED
operator|)
operator|&&
operator|(
name|entryType
operator|!=
name|ChmCommons
operator|.
name|EntryType
operator|.
name|UNCOMPRESSED
operator|)
condition|)
throw|throw
operator|new
name|ChmParsingException
argument_list|(
literal|"invalid compressed type, should be EntryType.COMPRESSED | EntryType.UNCOMPRESSED"
argument_list|)
throw|;
if|if
condition|(
name|offset
operator|<
literal|0
condition|)
throw|throw
operator|new
name|ChmParsingException
argument_list|(
literal|"invalid offset"
argument_list|)
throw|;
if|if
condition|(
name|length
operator|<
literal|0
condition|)
throw|throw
operator|new
name|ChmParsingException
argument_list|(
literal|"invalid length"
argument_list|)
throw|;
block|}
specifier|public
specifier|static
name|void
name|assertCopyingDataIndex
parameter_list|(
name|int
name|index
parameter_list|,
name|int
name|dataLength
parameter_list|)
block|{
if|if
condition|(
name|index
operator|>=
name|dataLength
condition|)
throw|throw
operator|new
name|ChmParsingException
argument_list|(
literal|"cannot parse chm file index> data.length"
argument_list|)
throw|;
block|}
comment|/** 	 * Checks if int param is greater than zero In case param<=0 throws an 	 * exception 	 *  	 * @param param 	 */
specifier|public
specifier|static
name|void
name|assertPositiveInt
parameter_list|(
name|int
name|param
parameter_list|)
block|{
if|if
condition|(
name|param
operator|<=
literal|0
condition|)
throw|throw
operator|new
name|ChmParsingException
argument_list|(
literal|"resetTable.getBlockAddress().length should be greater than zero"
argument_list|)
throw|;
block|}
block|}
end_class

end_unit

