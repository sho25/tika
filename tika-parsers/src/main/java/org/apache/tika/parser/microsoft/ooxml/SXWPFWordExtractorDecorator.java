begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|microsoft
operator|.
name|ooxml
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|input
operator|.
name|CloseShieldInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|openxml4j
operator|.
name|exceptions
operator|.
name|InvalidFormatException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|openxml4j
operator|.
name|exceptions
operator|.
name|OpenXML4JException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|openxml4j
operator|.
name|opc
operator|.
name|OPCPackage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|openxml4j
operator|.
name|opc
operator|.
name|PackagePart
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|openxml4j
operator|.
name|opc
operator|.
name|PackageRelationship
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|openxml4j
operator|.
name|opc
operator|.
name|PackageRelationshipCollection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|openxml4j
operator|.
name|opc
operator|.
name|internal
operator|.
name|FileHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|xwpf
operator|.
name|usermodel
operator|.
name|XWPFNumbering
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|xwpf
operator|.
name|usermodel
operator|.
name|XWPFRelation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|exception
operator|.
name|TikaException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|ParseContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|microsoft
operator|.
name|OfficeParserConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|microsoft
operator|.
name|ooxml
operator|.
name|xwpf
operator|.
name|XWPFDocumentXMLBodyHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|microsoft
operator|.
name|ooxml
operator|.
name|xwpf
operator|.
name|XWPFEventBasedWordExtractor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|microsoft
operator|.
name|ooxml
operator|.
name|xwpf
operator|.
name|XWPFTikaBodyPartHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|sax
operator|.
name|EmbeddedContentHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|sax
operator|.
name|OfflineContentHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|sax
operator|.
name|XHTMLContentHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xmlbeans
operator|.
name|XmlException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_comment
comment|/**  * This is an experimental, alternative extractor for docx files.  * This streams the main document content rather than loading the  * full document into memory.  *<p>  * This will be better for some use cases than the classic docx extractor; and,  * it will be worse for others.  *</p>  *  * @since 1.15  */
end_comment

begin_class
specifier|public
class|class
name|SXWPFWordExtractorDecorator
extends|extends
name|AbstractOOXMLExtractor
block|{
specifier|private
specifier|final
specifier|static
name|String
index|[]
name|EMBEDDED_RELATIONSHIPS
init|=
operator|new
name|String
index|[]
block|{
name|RELATION_OLE_OBJECT
block|,
name|RELATION_AUDIO
block|,
name|RELATION_IMAGE
block|,
name|RELATION_PACKAGE
block|,
name|RELATION_OFFICE_DOCUMENT
block|}
decl_stmt|;
specifier|private
specifier|final
name|OPCPackage
name|opcPackage
decl_stmt|;
specifier|private
specifier|final
name|ParseContext
name|context
decl_stmt|;
specifier|public
name|SXWPFWordExtractorDecorator
parameter_list|(
name|ParseContext
name|context
parameter_list|,
name|XWPFEventBasedWordExtractor
name|extractor
parameter_list|)
block|{
name|super
argument_list|(
name|context
argument_list|,
name|extractor
argument_list|)
expr_stmt|;
name|this
operator|.
name|context
operator|=
name|context
expr_stmt|;
name|this
operator|.
name|opcPackage
operator|=
name|extractor
operator|.
name|getPackage
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|buildXHTML
parameter_list|(
name|XHTMLContentHandler
name|xhtml
parameter_list|)
throws|throws
name|SAXException
throws|,
name|XmlException
throws|,
name|IOException
block|{
comment|//handle main document
name|List
argument_list|<
name|PackagePart
argument_list|>
name|pps
init|=
name|getMainDocumentParts
argument_list|()
decl_stmt|;
if|if
condition|(
name|pps
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|PackagePart
name|pp
range|:
name|pps
control|)
block|{
comment|//likely only one, but why not...
name|handleDocumentPart
argument_list|(
name|pp
argument_list|,
name|xhtml
argument_list|)
expr_stmt|;
block|}
block|}
comment|//handle glossary document
name|pps
operator|=
name|opcPackage
operator|.
name|getPartsByContentType
argument_list|(
name|XWPFRelation
operator|.
name|GLOSSARY_DOCUMENT
operator|.
name|getContentType
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|pps
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|PackagePart
name|pp
range|:
name|pps
control|)
block|{
comment|//likely only one, but why not...
name|handleDocumentPart
argument_list|(
name|pp
argument_list|,
name|xhtml
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|handleDocumentPart
parameter_list|(
name|PackagePart
name|documentPart
parameter_list|,
name|XHTMLContentHandler
name|xhtml
parameter_list|)
throws|throws
name|IOException
throws|,
name|SAXException
block|{
comment|//load the numbering/list manager and styles from the main document part
name|XWPFNumbering
name|numbering
init|=
name|loadNumbering
argument_list|(
name|documentPart
argument_list|)
decl_stmt|;
name|XWPFListManager
name|xwpfListManager
init|=
operator|new
name|XWPFListManager
argument_list|(
name|numbering
argument_list|)
decl_stmt|;
comment|//TODO: XWPFStyles styles = loadStyles(documentPart);
comment|//headers
try|try
block|{
name|PackageRelationshipCollection
name|headersPRC
init|=
name|documentPart
operator|.
name|getRelationshipsByType
argument_list|(
name|XWPFRelation
operator|.
name|HEADER
operator|.
name|getRelation
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|headersPRC
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|headersPRC
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|PackagePart
name|header
init|=
name|documentPart
operator|.
name|getRelatedPart
argument_list|(
name|headersPRC
operator|.
name|getRelationship
argument_list|(
name|i
argument_list|)
argument_list|)
decl_stmt|;
name|handlePart
argument_list|(
name|header
argument_list|,
name|xwpfListManager
argument_list|,
name|xhtml
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|InvalidFormatException
name|e
parameter_list|)
block|{
comment|//swallow
block|}
comment|//main document
name|handlePart
argument_list|(
name|documentPart
argument_list|,
name|xwpfListManager
argument_list|,
name|xhtml
argument_list|)
expr_stmt|;
comment|//for now, just dump other components at end
for|for
control|(
name|XWPFRelation
name|rel
range|:
operator|new
name|XWPFRelation
index|[]
block|{
name|XWPFRelation
operator|.
name|FOOTNOTE
block|,
name|XWPFRelation
operator|.
name|COMMENT
block|,
name|XWPFRelation
operator|.
name|FOOTER
block|,
name|XWPFRelation
operator|.
name|ENDNOTE
block|}
control|)
block|{
try|try
block|{
name|PackageRelationshipCollection
name|prc
init|=
name|documentPart
operator|.
name|getRelationshipsByType
argument_list|(
name|rel
operator|.
name|getRelation
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|prc
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|prc
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|PackagePart
name|packagePart
init|=
name|documentPart
operator|.
name|getRelatedPart
argument_list|(
name|prc
operator|.
name|getRelationship
argument_list|(
name|i
argument_list|)
argument_list|)
decl_stmt|;
name|handlePart
argument_list|(
name|packagePart
argument_list|,
name|xwpfListManager
argument_list|,
name|xhtml
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|InvalidFormatException
name|e
parameter_list|)
block|{
comment|//swallow
block|}
block|}
block|}
specifier|private
name|void
name|handlePart
parameter_list|(
name|PackagePart
name|packagePart
parameter_list|,
name|XWPFListManager
name|xwpfListManager
parameter_list|,
name|XHTMLContentHandler
name|xhtml
parameter_list|)
throws|throws
name|IOException
throws|,
name|SAXException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|linkedRelationships
init|=
name|loadLinkedRelationships
argument_list|(
name|packagePart
argument_list|)
decl_stmt|;
try|try
init|(
name|InputStream
name|stream
init|=
name|packagePart
operator|.
name|getInputStream
argument_list|()
init|)
block|{
name|context
operator|.
name|getSAXParser
argument_list|()
operator|.
name|parse
argument_list|(
operator|new
name|CloseShieldInputStream
argument_list|(
name|stream
argument_list|)
argument_list|,
operator|new
name|OfflineContentHandler
argument_list|(
operator|new
name|EmbeddedContentHandler
argument_list|(
operator|new
name|XWPFDocumentXMLBodyHandler
argument_list|(
operator|new
name|XWPFTikaBodyPartHandler
argument_list|(
name|xhtml
argument_list|,
name|xwpfListManager
argument_list|,
name|context
operator|.
name|get
argument_list|(
name|OfficeParserConfig
operator|.
name|class
argument_list|)
argument_list|)
argument_list|,
name|linkedRelationships
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TikaException
name|e
parameter_list|)
block|{
comment|//swallow
block|}
block|}
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|loadLinkedRelationships
parameter_list|(
name|PackagePart
name|bodyPart
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|linkedRelationships
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
try|try
block|{
name|PackageRelationshipCollection
name|prc
init|=
name|bodyPart
operator|.
name|getRelationshipsByType
argument_list|(
name|XWPFRelation
operator|.
name|HYPERLINK
operator|.
name|getRelation
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|prc
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|PackageRelationship
name|pr
init|=
name|prc
operator|.
name|getRelationship
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|pr
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
name|String
name|id
init|=
name|pr
operator|.
name|getId
argument_list|()
decl_stmt|;
name|String
name|url
init|=
operator|(
name|pr
operator|.
name|getTargetURI
argument_list|()
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|pr
operator|.
name|getTargetURI
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
name|id
operator|!=
literal|null
operator|&&
name|url
operator|!=
literal|null
condition|)
block|{
name|linkedRelationships
operator|.
name|put
argument_list|(
name|id
argument_list|,
name|url
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|String
name|rel
range|:
name|EMBEDDED_RELATIONSHIPS
control|)
block|{
name|prc
operator|=
name|bodyPart
operator|.
name|getRelationshipsByType
argument_list|(
name|rel
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|prc
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|PackageRelationship
name|pr
init|=
name|prc
operator|.
name|getRelationship
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|pr
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
name|String
name|id
init|=
name|pr
operator|.
name|getId
argument_list|()
decl_stmt|;
name|String
name|uriString
init|=
operator|(
name|pr
operator|.
name|getTargetURI
argument_list|()
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|pr
operator|.
name|getTargetURI
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|String
name|fileName
init|=
name|uriString
decl_stmt|;
if|if
condition|(
name|pr
operator|.
name|getTargetURI
argument_list|()
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|fileName
operator|=
name|FileHelper
operator|.
name|getFilename
argument_list|(
operator|new
name|File
argument_list|(
name|fileName
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|fileName
operator|=
name|uriString
expr_stmt|;
block|}
block|}
if|if
condition|(
name|id
operator|!=
literal|null
condition|)
block|{
name|fileName
operator|=
operator|(
name|fileName
operator|==
literal|null
operator|)
condition|?
literal|""
else|:
name|fileName
expr_stmt|;
name|linkedRelationships
operator|.
name|put
argument_list|(
name|id
argument_list|,
name|fileName
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|InvalidFormatException
name|e
parameter_list|)
block|{         }
return|return
name|linkedRelationships
return|;
block|}
comment|/*     private XWPFStyles loadStyles(PackagePart packagePart) {         try {             PackageRelationshipCollection stylesParts =                     packagePart.getRelationshipsByType(XWPFRelation.STYLES.getRelation());             if (stylesParts.size()> 0) {                 PackageRelationship stylesRelationShip = stylesParts.getRelationship(0);                 if (stylesRelationShip == null) {                     return null;                 }                 PackagePart stylesPart = opcPackage.getPart(stylesRelationShip);                 if (stylesPart == null) {                     return null;                 }                 return new XWPFStyles(stylesPart);             }         } catch (IOException|OpenXML4JException e) {             //swallow         }         return null;      } */
specifier|private
name|XWPFNumbering
name|loadNumbering
parameter_list|(
name|PackagePart
name|packagePart
parameter_list|)
block|{
try|try
block|{
name|PackageRelationshipCollection
name|numberingParts
init|=
name|packagePart
operator|.
name|getRelationshipsByType
argument_list|(
name|XWPFRelation
operator|.
name|NUMBERING
operator|.
name|getRelation
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|numberingParts
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|PackageRelationship
name|numberingRelationShip
init|=
name|numberingParts
operator|.
name|getRelationship
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|numberingRelationShip
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|PackagePart
name|numberingPart
init|=
name|opcPackage
operator|.
name|getPart
argument_list|(
name|numberingRelationShip
argument_list|)
decl_stmt|;
if|if
condition|(
name|numberingPart
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
operator|new
name|XWPFNumbering
argument_list|(
name|numberingPart
argument_list|)
return|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
decl||
name|OpenXML4JException
name|e
parameter_list|)
block|{
comment|//swallow
block|}
return|return
literal|null
return|;
block|}
comment|/**      * This returns the main document only.      */
annotation|@
name|Override
specifier|protected
name|List
argument_list|<
name|PackagePart
argument_list|>
name|getMainDocumentParts
parameter_list|()
block|{
comment|//figure out which one this is
name|List
argument_list|<
name|PackagePart
argument_list|>
name|pps
init|=
name|opcPackage
operator|.
name|getPartsByContentType
argument_list|(
name|XWPFRelation
operator|.
name|DOCUMENT
operator|.
name|getContentType
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|pps
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
name|pps
operator|=
name|opcPackage
operator|.
name|getPartsByContentType
argument_list|(
name|XWPFRelation
operator|.
name|MACRO_DOCUMENT
operator|.
name|getContentType
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|pps
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
name|pps
operator|=
name|opcPackage
operator|.
name|getPartsByContentType
argument_list|(
name|XWPFRelation
operator|.
name|MACRO_TEMPLATE_DOCUMENT
operator|.
name|getContentType
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|pps
return|;
block|}
block|}
end_class

end_unit

