begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|microsoft
operator|.
name|onenote
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_class
class|class
name|ExtendedGUID
implements|implements
name|Comparable
argument_list|<
name|ExtendedGUID
argument_list|>
block|{
name|GUID
name|guid
decl_stmt|;
name|long
name|n
decl_stmt|;
specifier|public
name|ExtendedGUID
parameter_list|(
name|GUID
name|guid
parameter_list|,
name|long
name|n
parameter_list|)
block|{
name|this
operator|.
name|guid
operator|=
name|guid
expr_stmt|;
name|this
operator|.
name|n
operator|=
name|n
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|compareTo
parameter_list|(
name|ExtendedGUID
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|.
name|guid
operator|.
name|equals
argument_list|(
name|guid
argument_list|)
condition|)
block|{
operator|new
name|Long
argument_list|(
name|n
argument_list|)
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|n
argument_list|)
expr_stmt|;
block|}
return|return
name|guid
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|guid
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|o
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|o
operator|==
literal|null
operator|||
name|getClass
argument_list|()
operator|!=
name|o
operator|.
name|getClass
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
name|ExtendedGUID
name|that
init|=
operator|(
name|ExtendedGUID
operator|)
name|o
decl_stmt|;
return|return
name|n
operator|==
name|that
operator|.
name|n
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|guid
argument_list|,
name|that
operator|.
name|guid
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|Objects
operator|.
name|hash
argument_list|(
name|guid
argument_list|,
name|n
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|ExtendedGUID
name|nil
parameter_list|()
block|{
return|return
operator|new
name|ExtendedGUID
argument_list|(
name|GUID
operator|.
name|nil
argument_list|()
argument_list|,
literal|0
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|US
argument_list|,
literal|"%s [%d]"
argument_list|,
name|guid
argument_list|,
name|n
argument_list|)
return|;
block|}
specifier|public
name|GUID
name|getGuid
parameter_list|()
block|{
return|return
name|guid
return|;
block|}
specifier|public
name|ExtendedGUID
name|setGuid
parameter_list|(
name|GUID
name|guid
parameter_list|)
block|{
name|this
operator|.
name|guid
operator|=
name|guid
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|String
name|getExtendedGuidString
parameter_list|()
block|{
return|return
name|guid
operator|.
name|toString
argument_list|()
operator|+
literal|" ["
operator|+
name|n
operator|+
literal|"]"
return|;
block|}
specifier|public
name|long
name|getN
parameter_list|()
block|{
return|return
name|n
return|;
block|}
specifier|public
name|ExtendedGUID
name|setN
parameter_list|(
name|long
name|n
parameter_list|)
block|{
name|this
operator|.
name|n
operator|=
name|n
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
end_class

end_unit

