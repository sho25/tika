begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|mp3
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|UnsupportedEncodingException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|exception
operator|.
name|TikaException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|ContentHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_comment
comment|/**  * This is used to parse ID3 Version 1 Tag information from an MP3 file,   * if available.  *  * @see<a href="http://www.id3.org/ID3v1">MP3 ID3 Version 1 specification</a>  */
end_comment

begin_class
specifier|public
class|class
name|ID3v1Handler
implements|implements
name|ID3Tags
block|{
specifier|private
name|String
name|title
decl_stmt|;
specifier|private
name|String
name|artist
decl_stmt|;
specifier|private
name|String
name|album
decl_stmt|;
specifier|private
name|String
name|year
decl_stmt|;
specifier|private
name|String
name|comment
decl_stmt|;
specifier|private
name|String
name|genre
decl_stmt|;
specifier|private
name|String
name|trackNumber
decl_stmt|;
name|boolean
name|found
init|=
literal|false
decl_stmt|;
specifier|public
name|ID3v1Handler
parameter_list|(
name|InputStream
name|stream
parameter_list|,
name|ContentHandler
name|handler
parameter_list|)
throws|throws
name|IOException
throws|,
name|SAXException
throws|,
name|TikaException
block|{
name|this
argument_list|(
name|getSuffix
argument_list|(
name|stream
argument_list|,
literal|128
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Creates from the last 128 bytes of a stream.      * @param tagData Must be the last 128 bytes       */
specifier|protected
name|ID3v1Handler
parameter_list|(
name|byte
index|[]
name|tagData
parameter_list|)
throws|throws
name|IOException
throws|,
name|SAXException
throws|,
name|TikaException
block|{
if|if
condition|(
name|tagData
operator|.
name|length
operator|==
literal|128
operator|&&
name|tagData
index|[
literal|0
index|]
operator|==
literal|'T'
operator|&&
name|tagData
index|[
literal|1
index|]
operator|==
literal|'A'
operator|&&
name|tagData
index|[
literal|2
index|]
operator|==
literal|'G'
condition|)
block|{
name|found
operator|=
literal|true
expr_stmt|;
name|title
operator|=
name|getString
argument_list|(
name|tagData
argument_list|,
literal|3
argument_list|,
literal|33
argument_list|)
expr_stmt|;
name|artist
operator|=
name|getString
argument_list|(
name|tagData
argument_list|,
literal|33
argument_list|,
literal|63
argument_list|)
expr_stmt|;
name|album
operator|=
name|getString
argument_list|(
name|tagData
argument_list|,
literal|63
argument_list|,
literal|93
argument_list|)
expr_stmt|;
name|year
operator|=
name|getString
argument_list|(
name|tagData
argument_list|,
literal|93
argument_list|,
literal|97
argument_list|)
expr_stmt|;
name|comment
operator|=
name|getString
argument_list|(
name|tagData
argument_list|,
literal|97
argument_list|,
literal|127
argument_list|)
expr_stmt|;
name|int
name|genreID
init|=
operator|(
name|int
operator|)
name|tagData
index|[
literal|127
index|]
operator|&
literal|0xff
decl_stmt|;
comment|// unsigned byte
name|genre
operator|=
name|GENRES
index|[
name|Math
operator|.
name|min
argument_list|(
name|genreID
argument_list|,
name|GENRES
operator|.
name|length
operator|-
literal|1
argument_list|)
index|]
expr_stmt|;
comment|// ID3v1.1 Track addition
comment|// If the last two bytes of the comment field are zero and
comment|// non-zero, then the last byte is the track number
if|if
condition|(
name|tagData
index|[
literal|125
index|]
operator|==
literal|0
operator|&&
name|tagData
index|[
literal|126
index|]
operator|!=
literal|0
condition|)
block|{
name|int
name|trackNum
init|=
operator|(
name|int
operator|)
name|tagData
index|[
literal|126
index|]
operator|&
literal|0xff
decl_stmt|;
name|trackNumber
operator|=
name|Integer
operator|.
name|toString
argument_list|(
name|trackNum
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|boolean
name|getTagsPresent
parameter_list|()
block|{
return|return
name|found
return|;
block|}
specifier|public
name|String
name|getTitle
parameter_list|()
block|{
return|return
name|title
return|;
block|}
specifier|public
name|String
name|getArtist
parameter_list|()
block|{
return|return
name|artist
return|;
block|}
specifier|public
name|String
name|getAlbum
parameter_list|()
block|{
return|return
name|album
return|;
block|}
specifier|public
name|String
name|getYear
parameter_list|()
block|{
return|return
name|year
return|;
block|}
specifier|public
name|String
name|getComment
parameter_list|()
block|{
return|return
name|comment
return|;
block|}
specifier|public
name|String
name|getGenre
parameter_list|()
block|{
return|return
name|genre
return|;
block|}
specifier|public
name|String
name|getTrackNumber
parameter_list|()
block|{
return|return
name|trackNumber
return|;
block|}
comment|/**      * Returns the identified ISO-8859-1 substring from the given byte buffer.      * The return value is the zero-terminated substring retrieved from      * between the given start and end positions in the given byte buffer.      * Extra whitespace (and control characters) from the beginning and the      * end of the substring is removed.      *      * @param buffer byte buffer      * @param start start index of the substring      * @param end end index of the substring      * @return the identified substring      * @throws TikaException if the ISO-8859-1 encoding is not available      */
specifier|private
specifier|static
name|String
name|getString
parameter_list|(
name|byte
index|[]
name|buffer
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|end
parameter_list|)
throws|throws
name|TikaException
block|{
comment|// Find the zero byte that marks the end of the string
name|int
name|zero
init|=
name|start
decl_stmt|;
while|while
condition|(
name|zero
operator|<
name|end
operator|&&
name|buffer
index|[
name|zero
index|]
operator|!=
literal|0
condition|)
block|{
name|zero
operator|++
expr_stmt|;
block|}
comment|// Skip trailing whitespace
name|end
operator|=
name|zero
expr_stmt|;
while|while
condition|(
name|start
operator|<
name|end
operator|&&
name|buffer
index|[
name|end
operator|-
literal|1
index|]
operator|<=
literal|' '
condition|)
block|{
name|end
operator|--
expr_stmt|;
block|}
comment|// Skip leading whitespace
while|while
condition|(
name|start
operator|<
name|end
operator|&&
name|buffer
index|[
name|start
index|]
operator|<=
literal|' '
condition|)
block|{
name|start
operator|++
expr_stmt|;
block|}
comment|// Return the remaining substring
try|try
block|{
return|return
operator|new
name|String
argument_list|(
name|buffer
argument_list|,
name|start
argument_list|,
name|end
operator|-
name|start
argument_list|,
literal|"ISO-8859-1"
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|UnsupportedEncodingException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|TikaException
argument_list|(
literal|"ISO-8859-1 encoding is not available"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**      * Reads and returns the last<code>length</code> bytes from the      * given stream.      * @param stream input stream      * @param length number of bytes from the end to read and return      * @return stream the<code>InputStream</code> to read from.      * @throws IOException if the stream could not be read from.      */
specifier|private
specifier|static
name|byte
index|[]
name|getSuffix
parameter_list|(
name|InputStream
name|stream
parameter_list|,
name|int
name|length
parameter_list|)
throws|throws
name|IOException
block|{
name|byte
index|[]
name|buffer
init|=
operator|new
name|byte
index|[
literal|2
operator|*
name|length
index|]
decl_stmt|;
name|int
name|bytesInBuffer
init|=
literal|0
decl_stmt|;
name|int
name|n
init|=
name|stream
operator|.
name|read
argument_list|(
name|buffer
argument_list|)
decl_stmt|;
while|while
condition|(
name|n
operator|!=
operator|-
literal|1
condition|)
block|{
name|bytesInBuffer
operator|+=
name|n
expr_stmt|;
if|if
condition|(
name|bytesInBuffer
operator|==
name|buffer
operator|.
name|length
condition|)
block|{
name|System
operator|.
name|arraycopy
argument_list|(
name|buffer
argument_list|,
name|bytesInBuffer
operator|-
name|length
argument_list|,
name|buffer
argument_list|,
literal|0
argument_list|,
name|length
argument_list|)
expr_stmt|;
name|bytesInBuffer
operator|=
name|length
expr_stmt|;
block|}
name|n
operator|=
name|stream
operator|.
name|read
argument_list|(
name|buffer
argument_list|,
name|bytesInBuffer
argument_list|,
name|buffer
operator|.
name|length
operator|-
name|bytesInBuffer
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|bytesInBuffer
operator|<
name|length
condition|)
block|{
name|length
operator|=
name|bytesInBuffer
expr_stmt|;
block|}
name|byte
index|[]
name|result
init|=
operator|new
name|byte
index|[
name|length
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|buffer
argument_list|,
name|bytesInBuffer
operator|-
name|length
argument_list|,
name|result
argument_list|,
literal|0
argument_list|,
name|length
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
block|}
end_class

end_unit

