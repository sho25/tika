begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|rtf
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FilenameUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|exception
operator|.
name|TikaException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|exception
operator|.
name|TikaMemoryLimitException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|extractor
operator|.
name|EmbeddedDocumentUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|io
operator|.
name|TikaInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|metadata
operator|.
name|Metadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|metadata
operator|.
name|RTFMetadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|ParseContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|sax
operator|.
name|EmbeddedContentHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|ContentHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_comment
comment|/**  * This class buffers data from embedded objects and pictures.  *<p/>  *<p/>  *<p/>  * When the parser has finished an object or picture and called  * {@link #handleCompletedObject()}, this will write the object  * to the {@link #handler}.  *<p/>  *<p/>  *<p/>  * This (in combination with TextExtractor) expects basically a flat parse.  It will pull out  * all pict whether they are tied to objdata or are intended  * to be standalone.  *<p/>  *<p/>  * This tries to pull metadata around a pict that is encoded  * with {sp {sn} {sv}} types of data.  This information  * sometimes contains the name and even full file path of the original file.  */
end_comment

begin_class
class|class
name|RTFEmbObjHandler
block|{
specifier|private
specifier|static
specifier|final
name|String
name|EMPTY_STRING
init|=
literal|""
decl_stmt|;
specifier|private
specifier|final
name|ContentHandler
name|handler
decl_stmt|;
specifier|private
specifier|final
name|EmbeddedDocumentUtil
name|embeddedDocumentUtil
decl_stmt|;
specifier|private
specifier|final
name|ByteArrayOutputStream
name|os
decl_stmt|;
comment|//high hex cached for writing hexpair chars (data)
specifier|private
name|int
name|hi
init|=
operator|-
literal|1
decl_stmt|;
specifier|private
name|int
name|thumbCount
init|=
literal|0
decl_stmt|;
comment|//don't need atomic, do need mutable
specifier|private
name|AtomicInteger
name|unknownFilenameCount
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
specifier|private
name|boolean
name|inObject
init|=
literal|false
decl_stmt|;
specifier|private
name|String
name|sv
init|=
name|EMPTY_STRING
decl_stmt|;
specifier|private
name|String
name|sn
init|=
name|EMPTY_STRING
decl_stmt|;
specifier|private
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
specifier|private
name|Metadata
name|metadata
decl_stmt|;
specifier|private
name|EMB_STATE
name|state
init|=
name|EMB_STATE
operator|.
name|NADA
decl_stmt|;
specifier|private
specifier|final
name|int
name|memoryLimitInKb
decl_stmt|;
specifier|protected
name|RTFEmbObjHandler
parameter_list|(
name|ContentHandler
name|handler
parameter_list|,
name|Metadata
name|metadata
parameter_list|,
name|ParseContext
name|context
parameter_list|,
name|int
name|memoryLimitInKb
parameter_list|)
block|{
name|this
operator|.
name|handler
operator|=
name|handler
expr_stmt|;
name|this
operator|.
name|embeddedDocumentUtil
operator|=
operator|new
name|EmbeddedDocumentUtil
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|os
operator|=
operator|new
name|ByteArrayOutputStream
argument_list|()
expr_stmt|;
name|this
operator|.
name|memoryLimitInKb
operator|=
name|memoryLimitInKb
expr_stmt|;
block|}
specifier|protected
name|void
name|startPict
parameter_list|()
block|{
name|state
operator|=
name|EMB_STATE
operator|.
name|PICT
expr_stmt|;
name|metadata
operator|=
operator|new
name|Metadata
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|void
name|startObjData
parameter_list|()
block|{
name|state
operator|=
name|EMB_STATE
operator|.
name|OBJDATA
expr_stmt|;
name|metadata
operator|=
operator|new
name|Metadata
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|void
name|startSN
parameter_list|()
block|{
name|sb
operator|.
name|setLength
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|RTFMetadata
operator|.
name|RTF_PICT_META_PREFIX
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|endSN
parameter_list|()
block|{
name|sn
operator|=
name|sb
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|void
name|startSV
parameter_list|()
block|{
name|sb
operator|.
name|setLength
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|endSV
parameter_list|()
block|{
name|sv
operator|=
name|sb
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
comment|//end metadata pair
specifier|protected
name|void
name|endSP
parameter_list|()
block|{
name|metadata
operator|.
name|add
argument_list|(
name|sn
argument_list|,
name|sv
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|boolean
name|getInObject
parameter_list|()
block|{
return|return
name|inObject
return|;
block|}
specifier|protected
name|void
name|setInObject
parameter_list|(
name|boolean
name|v
parameter_list|)
block|{
name|inObject
operator|=
name|v
expr_stmt|;
block|}
specifier|protected
name|void
name|writeMetadataChar
parameter_list|(
name|char
name|c
parameter_list|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|writeHexChar
parameter_list|(
name|int
name|b
parameter_list|)
throws|throws
name|IOException
throws|,
name|TikaException
block|{
comment|//if not hexchar, ignore
comment|//white space is common
if|if
condition|(
name|TextExtractor
operator|.
name|isHexChar
argument_list|(
name|b
argument_list|)
condition|)
block|{
if|if
condition|(
name|hi
operator|==
operator|-
literal|1
condition|)
block|{
name|hi
operator|=
literal|16
operator|*
name|TextExtractor
operator|.
name|hexValue
argument_list|(
name|b
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|long
name|sum
init|=
name|hi
operator|+
name|TextExtractor
operator|.
name|hexValue
argument_list|(
name|b
argument_list|)
decl_stmt|;
if|if
condition|(
name|sum
operator|>
name|Integer
operator|.
name|MAX_VALUE
operator|||
name|sum
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"hex char to byte overflow"
argument_list|)
throw|;
block|}
name|os
operator|.
name|write
argument_list|(
operator|(
name|int
operator|)
name|sum
argument_list|)
expr_stmt|;
name|hi
operator|=
operator|-
literal|1
expr_stmt|;
block|}
return|return;
block|}
if|if
condition|(
name|b
operator|==
operator|-
literal|1
condition|)
block|{
throw|throw
operator|new
name|TikaException
argument_list|(
literal|"hit end of stream before finishing byte pair"
argument_list|)
throw|;
block|}
block|}
specifier|protected
name|void
name|writeBytes
parameter_list|(
name|InputStream
name|is
parameter_list|,
name|int
name|len
parameter_list|)
throws|throws
name|IOException
throws|,
name|TikaException
block|{
if|if
condition|(
name|len
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|TikaException
argument_list|(
literal|"Requesting I read< 0 bytes ?!"
argument_list|)
throw|;
block|}
if|if
condition|(
name|len
operator|>
name|memoryLimitInKb
condition|)
block|{
throw|throw
operator|new
name|TikaMemoryLimitException
argument_list|(
literal|"File embedded in RTF caused this ("
operator|+
name|len
operator|+
literal|") bytes), but maximum allowed is ("
operator|+
name|memoryLimitInKb
operator|+
literal|")."
operator|+
literal|"If this is a valid RTF file, consider increasing the memory limit via TikaConfig."
argument_list|)
throw|;
block|}
name|byte
index|[]
name|bytes
init|=
operator|new
name|byte
index|[
name|len
index|]
decl_stmt|;
name|IOUtils
operator|.
name|readFully
argument_list|(
name|is
argument_list|,
name|bytes
argument_list|)
expr_stmt|;
name|os
operator|.
name|write
argument_list|(
name|bytes
argument_list|)
expr_stmt|;
block|}
comment|/**      * Call this when the objdata/pict has completed      *      * @throws IOException      * @throws SAXException      * @throws TikaException      */
specifier|protected
name|void
name|handleCompletedObject
parameter_list|()
throws|throws
name|IOException
throws|,
name|SAXException
throws|,
name|TikaException
block|{
name|byte
index|[]
name|bytes
init|=
name|os
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
if|if
condition|(
name|state
operator|==
name|EMB_STATE
operator|.
name|OBJDATA
condition|)
block|{
name|RTFObjDataParser
name|objParser
init|=
operator|new
name|RTFObjDataParser
argument_list|()
decl_stmt|;
try|try
block|{
name|byte
index|[]
name|objBytes
init|=
name|objParser
operator|.
name|parse
argument_list|(
name|bytes
argument_list|,
name|metadata
argument_list|,
name|unknownFilenameCount
argument_list|)
decl_stmt|;
name|extractObj
argument_list|(
name|objBytes
argument_list|,
name|handler
argument_list|,
name|metadata
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|EmbeddedDocumentUtil
operator|.
name|recordException
argument_list|(
name|e
argument_list|,
name|metadata
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|state
operator|==
name|EMB_STATE
operator|.
name|PICT
condition|)
block|{
name|String
name|filePath
init|=
name|metadata
operator|.
name|get
argument_list|(
name|RTFMetadata
operator|.
name|RTF_PICT_META_PREFIX
operator|+
literal|"wzDescription"
argument_list|)
decl_stmt|;
if|if
condition|(
name|filePath
operator|!=
literal|null
operator|&&
name|filePath
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|metadata
operator|.
name|set
argument_list|(
name|Metadata
operator|.
name|EMBEDDED_RELATIONSHIP_ID
argument_list|,
name|filePath
argument_list|)
expr_stmt|;
name|metadata
operator|.
name|set
argument_list|(
name|Metadata
operator|.
name|RESOURCE_NAME_KEY
argument_list|,
name|FilenameUtils
operator|.
name|getName
argument_list|(
name|filePath
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|metadata
operator|.
name|set
argument_list|(
name|RTFMetadata
operator|.
name|THUMBNAIL
argument_list|,
name|Boolean
operator|.
name|toString
argument_list|(
name|inObject
argument_list|)
argument_list|)
expr_stmt|;
name|extractObj
argument_list|(
name|bytes
argument_list|,
name|handler
argument_list|,
name|metadata
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|state
operator|==
name|EMB_STATE
operator|.
name|NADA
condition|)
block|{
comment|//swallow...no start for pict or embed?!
block|}
name|reset
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|extractObj
parameter_list|(
name|byte
index|[]
name|bytes
parameter_list|,
name|ContentHandler
name|handler
parameter_list|,
name|Metadata
name|metadata
parameter_list|)
throws|throws
name|SAXException
throws|,
name|IOException
throws|,
name|TikaException
block|{
if|if
condition|(
name|bytes
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|metadata
operator|.
name|set
argument_list|(
name|Metadata
operator|.
name|CONTENT_LENGTH
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|bytes
operator|.
name|length
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|embeddedDocumentUtil
operator|.
name|shouldParseEmbedded
argument_list|(
name|metadata
argument_list|)
condition|)
block|{
name|TikaInputStream
name|stream
init|=
name|TikaInputStream
operator|.
name|get
argument_list|(
name|bytes
argument_list|)
decl_stmt|;
if|if
condition|(
name|metadata
operator|.
name|get
argument_list|(
name|Metadata
operator|.
name|RESOURCE_NAME_KEY
argument_list|)
operator|==
literal|null
condition|)
block|{
name|String
name|extension
init|=
name|embeddedDocumentUtil
operator|.
name|getExtension
argument_list|(
name|stream
argument_list|,
name|metadata
argument_list|)
decl_stmt|;
if|if
condition|(
name|inObject
operator|&&
name|state
operator|==
name|EMB_STATE
operator|.
name|PICT
condition|)
block|{
name|metadata
operator|.
name|set
argument_list|(
name|Metadata
operator|.
name|RESOURCE_NAME_KEY
argument_list|,
literal|"thumbnail_"
operator|+
name|thumbCount
operator|++
operator|+
name|extension
argument_list|)
expr_stmt|;
name|metadata
operator|.
name|set
argument_list|(
name|RTFMetadata
operator|.
name|THUMBNAIL
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|metadata
operator|.
name|set
argument_list|(
name|Metadata
operator|.
name|RESOURCE_NAME_KEY
argument_list|,
literal|"file_"
operator|+
name|unknownFilenameCount
operator|.
name|getAndIncrement
argument_list|()
operator|+
name|extension
argument_list|)
expr_stmt|;
block|}
block|}
try|try
block|{
name|embeddedDocumentUtil
operator|.
name|parseEmbedded
argument_list|(
name|stream
argument_list|,
operator|new
name|EmbeddedContentHandler
argument_list|(
name|handler
argument_list|)
argument_list|,
name|metadata
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|EmbeddedDocumentUtil
operator|.
name|recordEmbeddedStreamException
argument_list|(
name|e
argument_list|,
name|metadata
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|stream
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/**      * reset state after each object.      * Do not reset unknown file number.      */
specifier|protected
name|void
name|reset
parameter_list|()
block|{
name|state
operator|=
name|EMB_STATE
operator|.
name|NADA
expr_stmt|;
name|os
operator|.
name|reset
argument_list|()
expr_stmt|;
name|metadata
operator|=
operator|new
name|Metadata
argument_list|()
expr_stmt|;
name|hi
operator|=
operator|-
literal|1
expr_stmt|;
name|sv
operator|=
name|EMPTY_STRING
expr_stmt|;
name|sn
operator|=
name|EMPTY_STRING
expr_stmt|;
name|sb
operator|.
name|setLength
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
specifier|private
enum|enum
name|EMB_STATE
block|{
name|PICT
block|,
comment|//recording pict data
name|OBJDATA
block|,
comment|//recording objdata
name|NADA
block|}
block|}
end_class

end_unit

