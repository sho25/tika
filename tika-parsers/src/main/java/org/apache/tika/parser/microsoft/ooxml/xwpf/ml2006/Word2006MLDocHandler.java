begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|microsoft
operator|.
name|ooxml
operator|.
name|xwpf
operator|.
name|ml2006
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|xwpf
operator|.
name|usermodel
operator|.
name|XWPFRelation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|exception
operator|.
name|TikaException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|metadata
operator|.
name|Metadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|ParseContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|microsoft
operator|.
name|OfficeParserConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|sax
operator|.
name|XHTMLContentHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|Attributes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|helpers
operator|.
name|DefaultHandler
import|;
end_import

begin_class
class|class
name|Word2006MLDocHandler
extends|extends
name|DefaultHandler
block|{
specifier|final
specifier|static
name|String
name|PKG_NS
init|=
literal|"http://schemas.microsoft.com/office/2006/xmlPackage"
decl_stmt|;
specifier|private
specifier|final
name|XHTMLContentHandler
name|xhtml
decl_stmt|;
specifier|private
specifier|final
name|Metadata
name|metadata
decl_stmt|;
specifier|private
specifier|final
name|ParseContext
name|parseContext
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|PartHandler
argument_list|>
name|partHandlers
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|BinaryDataHandler
name|binaryDataHandler
decl_stmt|;
specifier|private
specifier|final
name|RelationshipsManager
name|relationshipsManager
init|=
operator|new
name|RelationshipsManager
argument_list|()
decl_stmt|;
specifier|private
name|PartHandler
name|currentPartHandler
init|=
literal|null
decl_stmt|;
specifier|public
name|Word2006MLDocHandler
parameter_list|(
name|XHTMLContentHandler
name|xhtml
parameter_list|,
name|Metadata
name|metadata
parameter_list|,
name|ParseContext
name|context
parameter_list|)
block|{
name|this
operator|.
name|xhtml
operator|=
name|xhtml
expr_stmt|;
name|this
operator|.
name|metadata
operator|=
name|metadata
expr_stmt|;
name|this
operator|.
name|parseContext
operator|=
name|context
expr_stmt|;
name|OfficeParserConfig
name|officeParserConfig
init|=
name|context
operator|.
name|get
argument_list|(
name|OfficeParserConfig
operator|.
name|class
argument_list|)
decl_stmt|;
name|addPartHandler
argument_list|(
operator|new
name|RelationshipsHandler
argument_list|(
name|relationshipsManager
argument_list|)
argument_list|)
expr_stmt|;
name|addPartHandler
argument_list|(
operator|new
name|WordAndPowerPointTextPartHandler
argument_list|(
name|XWPFRelation
operator|.
name|DOCUMENT
operator|.
name|getContentType
argument_list|()
argument_list|,
name|xhtml
argument_list|,
name|relationshipsManager
argument_list|,
name|officeParserConfig
argument_list|)
argument_list|)
expr_stmt|;
name|addPartHandler
argument_list|(
operator|new
name|WordAndPowerPointTextPartHandler
argument_list|(
name|XWPFRelation
operator|.
name|FOOTNOTE
operator|.
name|getContentType
argument_list|()
argument_list|,
name|xhtml
argument_list|,
name|relationshipsManager
argument_list|,
name|officeParserConfig
argument_list|)
argument_list|)
expr_stmt|;
name|addPartHandler
argument_list|(
operator|new
name|WordAndPowerPointTextPartHandler
argument_list|(
literal|"application/vnd.openxmlformats-officedocument.wordprocessingml.endnotes+xml"
argument_list|,
name|xhtml
argument_list|,
name|relationshipsManager
argument_list|,
name|officeParserConfig
argument_list|)
argument_list|)
expr_stmt|;
name|addPartHandler
argument_list|(
operator|new
name|WordAndPowerPointTextPartHandler
argument_list|(
name|XWPFRelation
operator|.
name|HEADER
operator|.
name|getContentType
argument_list|()
argument_list|,
name|xhtml
argument_list|,
name|relationshipsManager
argument_list|,
name|officeParserConfig
argument_list|)
argument_list|)
expr_stmt|;
name|addPartHandler
argument_list|(
operator|new
name|WordAndPowerPointTextPartHandler
argument_list|(
name|XWPFRelation
operator|.
name|FOOTER
operator|.
name|getContentType
argument_list|()
argument_list|,
name|xhtml
argument_list|,
name|relationshipsManager
argument_list|,
name|officeParserConfig
argument_list|)
argument_list|)
expr_stmt|;
name|addPartHandler
argument_list|(
operator|new
name|WordAndPowerPointTextPartHandler
argument_list|(
literal|"application/vnd.openxmlformats-officedocument.wordprocessingml.comments+xml"
argument_list|,
name|xhtml
argument_list|,
name|relationshipsManager
argument_list|,
name|officeParserConfig
argument_list|)
argument_list|)
expr_stmt|;
name|addPartHandler
argument_list|(
operator|new
name|WordAndPowerPointTextPartHandler
argument_list|(
literal|"application/vnd.openxmlformats-officedocument.wordprocessingml.footnotes+xml"
argument_list|,
name|xhtml
argument_list|,
name|relationshipsManager
argument_list|,
name|officeParserConfig
argument_list|)
argument_list|)
expr_stmt|;
name|addPartHandler
argument_list|(
operator|new
name|WordAndPowerPointTextPartHandler
argument_list|(
literal|"application/vnd.openxmlformats-officedocument.wordprocessingml.document.glossary+xml"
argument_list|,
name|xhtml
argument_list|,
name|relationshipsManager
argument_list|,
name|officeParserConfig
argument_list|)
argument_list|)
expr_stmt|;
name|addPartHandler
argument_list|(
operator|new
name|CorePropertiesHandler
argument_list|(
name|metadata
argument_list|)
argument_list|)
expr_stmt|;
name|addPartHandler
argument_list|(
operator|new
name|ExtendedPropertiesHandler
argument_list|(
name|metadata
argument_list|)
argument_list|)
expr_stmt|;
name|binaryDataHandler
operator|=
operator|new
name|BinaryDataHandler
argument_list|(
name|xhtml
argument_list|,
name|metadata
argument_list|,
name|context
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|addPartHandler
parameter_list|(
name|PartHandler
name|partHandler
parameter_list|)
block|{
name|partHandlers
operator|.
name|put
argument_list|(
name|partHandler
operator|.
name|getContentType
argument_list|()
argument_list|,
name|partHandler
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|startDocument
parameter_list|()
throws|throws
name|SAXException
block|{     }
annotation|@
name|Override
specifier|public
name|void
name|endDocument
parameter_list|()
throws|throws
name|SAXException
block|{     }
annotation|@
name|Override
specifier|public
name|void
name|startPrefixMapping
parameter_list|(
name|String
name|prefix
parameter_list|,
name|String
name|uri
parameter_list|)
throws|throws
name|SAXException
block|{     }
annotation|@
name|Override
specifier|public
name|void
name|endPrefixMapping
parameter_list|(
name|String
name|prefix
parameter_list|)
throws|throws
name|SAXException
block|{      }
annotation|@
name|Override
specifier|public
name|void
name|startElement
parameter_list|(
name|String
name|uri
parameter_list|,
name|String
name|localName
parameter_list|,
name|String
name|qName
parameter_list|,
name|Attributes
name|atts
parameter_list|)
throws|throws
name|SAXException
block|{
if|if
condition|(
name|uri
operator|.
name|equals
argument_list|(
name|PKG_NS
argument_list|)
operator|&&
name|localName
operator|.
name|equals
argument_list|(
literal|"part"
argument_list|)
condition|)
block|{
comment|//start of a package
name|String
name|name
init|=
name|atts
operator|.
name|getValue
argument_list|(
name|PKG_NS
argument_list|,
literal|"name"
argument_list|)
decl_stmt|;
name|String
name|contentType
init|=
name|atts
operator|.
name|getValue
argument_list|(
name|PKG_NS
argument_list|,
literal|"contentType"
argument_list|)
decl_stmt|;
name|currentPartHandler
operator|=
name|partHandlers
operator|.
name|get
argument_list|(
name|contentType
argument_list|)
expr_stmt|;
comment|//for now treat every unknown part type
comment|//as if it contained binary data
if|if
condition|(
name|currentPartHandler
operator|==
literal|null
condition|)
block|{
name|currentPartHandler
operator|=
name|binaryDataHandler
expr_stmt|;
block|}
if|if
condition|(
name|currentPartHandler
operator|!=
literal|null
condition|)
block|{
name|currentPartHandler
operator|.
name|setName
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|currentPartHandler
operator|!=
literal|null
condition|)
block|{
name|currentPartHandler
operator|.
name|startElement
argument_list|(
name|uri
argument_list|,
name|localName
argument_list|,
name|qName
argument_list|,
name|atts
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|endElement
parameter_list|(
name|String
name|uri
parameter_list|,
name|String
name|localName
parameter_list|,
name|String
name|qName
parameter_list|)
throws|throws
name|SAXException
block|{
if|if
condition|(
name|uri
operator|.
name|equals
argument_list|(
name|PKG_NS
argument_list|)
operator|&&
name|localName
operator|.
name|equals
argument_list|(
literal|"part"
argument_list|)
condition|)
block|{
comment|//do post processing
if|if
condition|(
name|currentPartHandler
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|currentPartHandler
operator|.
name|endPart
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TikaException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SAXException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|//then reset
name|currentPartHandler
operator|=
literal|null
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|currentPartHandler
operator|!=
literal|null
condition|)
block|{
name|currentPartHandler
operator|.
name|endElement
argument_list|(
name|uri
argument_list|,
name|localName
argument_list|,
name|qName
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|characters
parameter_list|(
name|char
index|[]
name|ch
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|length
parameter_list|)
throws|throws
name|SAXException
block|{
if|if
condition|(
name|currentPartHandler
operator|!=
literal|null
condition|)
block|{
name|currentPartHandler
operator|.
name|characters
argument_list|(
name|ch
argument_list|,
name|start
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|ignorableWhitespace
parameter_list|(
name|char
index|[]
name|ch
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|length
parameter_list|)
throws|throws
name|SAXException
block|{
if|if
condition|(
name|currentPartHandler
operator|!=
literal|null
condition|)
block|{
name|currentPartHandler
operator|.
name|characters
argument_list|(
name|ch
argument_list|,
name|start
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

