begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|microsoft
operator|.
name|onenote
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|codec
operator|.
name|binary
operator|.
name|Hex
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|EndianUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|exception
operator|.
name|TikaException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|exception
operator|.
name|TikaMemoryLimitException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Stream
import|;
end_import

begin_comment
comment|/**  * This is the main class used during parsing. This will contain an offset position and end position for reading bytes  * from the byte stream.  *<p>  * It contains all the deserialize methods used to read the different data elements from a one note file.  *<p>  * You can construct a new one note pointer and it will reposition the byte channel and will read until  */
end_comment

begin_class
class|class
name|OneNotePtr
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|OneNoteParser
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|long
name|FOOTER_CONST
init|=
literal|0x8BC215C38233BA4BL
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|UNKNOWN
init|=
literal|"unknown"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|IFNDF
init|=
operator|new
name|byte
index|[]
block|{
literal|60
block|,
literal|0
block|,
literal|105
block|,
literal|0
block|,
literal|102
block|,
literal|0
block|,
literal|110
block|,
literal|0
block|,
literal|100
block|,
literal|0
block|,
literal|102
block|,
literal|0
block|,
literal|62
block|,
literal|0
block|}
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|GUID
name|FILE_DATA_STORE_OBJ_HEADER
init|=
operator|new
name|GUID
argument_list|(
operator|new
name|int
index|[]
block|{
literal|0xBD
block|,
literal|0xE3
block|,
literal|0x16
block|,
literal|0xE7
block|,
literal|0x26
block|,
literal|0x65
block|,
literal|0x45
block|,
literal|0x11
block|,
literal|0xA4
block|,
literal|0xC4
block|,
literal|0x8D
block|,
literal|0x4D
block|,
literal|0x0B
block|,
literal|0x7A
block|,
literal|0x9E
block|,
literal|0xAC
block|}
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|GUID
name|FILE_DATA_STORE_OBJ_FOOTER
init|=
operator|new
name|GUID
argument_list|(
operator|new
name|int
index|[]
block|{
literal|0x71
block|,
literal|0xFB
block|,
literal|0xA7
block|,
literal|0x22
block|,
literal|0x0F
block|,
literal|0x79
block|,
literal|0x4A
block|,
literal|0x0B
block|,
literal|0xBB
block|,
literal|0x13
block|,
literal|0x89
block|,
literal|0x92
block|,
literal|0x56
block|,
literal|0x42
block|,
literal|0x6B
block|,
literal|0x24
block|}
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|IFNDF_GUID_LENGTH
init|=
literal|38
decl_stmt|;
comment|// 36 char guid with a { and a } char.
specifier|public
specifier|static
specifier|final
name|int
name|NUM_RESERVED_BYTES_AT_END_OF_HEADER
init|=
literal|728
decl_stmt|;
name|int
name|indentLevel
init|=
literal|0
decl_stmt|;
name|long
name|offset
decl_stmt|;
name|long
name|end
decl_stmt|;
name|OneNoteDocument
name|document
decl_stmt|;
name|OneNoteDirectFileResource
name|dif
decl_stmt|;
specifier|public
name|OneNotePtr
parameter_list|(
name|OneNoteDocument
name|document
parameter_list|,
name|OneNoteDirectFileResource
name|oneNoteDirectFileResource
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|document
operator|=
name|document
expr_stmt|;
name|this
operator|.
name|dif
operator|=
name|oneNoteDirectFileResource
expr_stmt|;
name|offset
operator|=
name|oneNoteDirectFileResource
operator|.
name|position
argument_list|()
expr_stmt|;
name|end
operator|=
name|oneNoteDirectFileResource
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
specifier|public
name|OneNotePtr
parameter_list|(
name|OneNotePtr
name|oneNotePtr
parameter_list|)
block|{
name|this
operator|.
name|document
operator|=
name|oneNotePtr
operator|.
name|document
expr_stmt|;
name|this
operator|.
name|dif
operator|=
name|oneNotePtr
operator|.
name|dif
expr_stmt|;
name|this
operator|.
name|offset
operator|=
name|oneNotePtr
operator|.
name|offset
expr_stmt|;
name|this
operator|.
name|end
operator|=
name|oneNotePtr
operator|.
name|end
expr_stmt|;
name|this
operator|.
name|indentLevel
operator|=
name|oneNotePtr
operator|.
name|indentLevel
expr_stmt|;
block|}
specifier|public
name|OneNoteHeader
name|deserializeHeader
parameter_list|()
throws|throws
name|IOException
throws|,
name|TikaException
block|{
name|OneNoteHeader
name|data
init|=
operator|new
name|OneNoteHeader
argument_list|()
decl_stmt|;
name|data
operator|.
name|setGuidFileType
argument_list|(
name|deserializeGUID
argument_list|()
argument_list|)
operator|.
name|setGuidFile
argument_list|(
name|deserializeGUID
argument_list|()
argument_list|)
operator|.
name|setGuidLegacyFileVersion
argument_list|(
name|deserializeGUID
argument_list|()
argument_list|)
operator|.
name|setGuidFileFormat
argument_list|(
name|deserializeGUID
argument_list|()
argument_list|)
operator|.
name|setFfvLastCodeThatWroteToThisFile
argument_list|(
name|deserializeLittleEndianInt
argument_list|()
argument_list|)
operator|.
name|setFfvOldestCodeThatHasWrittenToThisFile
argument_list|(
name|deserializeLittleEndianInt
argument_list|()
argument_list|)
operator|.
name|setFfvNewestCodeThatHasWrittenToThisFile
argument_list|(
name|deserializeLittleEndianInt
argument_list|()
argument_list|)
operator|.
name|setFfvOldestCodeThatMayReadThisFile
argument_list|(
name|deserializeLittleEndianInt
argument_list|()
argument_list|)
operator|.
name|setFcrLegacyFreeChunkList
argument_list|(
name|deserializeFileChunkReference64
argument_list|()
argument_list|)
operator|.
name|setFcrLegacyTransactionLog
argument_list|(
name|deserializeFileChunkReference64
argument_list|()
argument_list|)
operator|.
name|setcTransactionsInLog
argument_list|(
name|deserializeLittleEndianInt
argument_list|()
argument_list|)
operator|.
name|setCbExpectedFileLength
argument_list|(
name|deserializeLittleEndianInt
argument_list|()
argument_list|)
operator|.
name|setRgbPlaceholder
argument_list|(
name|deserializeLittleEndianLong
argument_list|()
argument_list|)
operator|.
name|setFcrLegacyFileNodeListRoot
argument_list|(
name|deserializeFileChunkReference64
argument_list|()
argument_list|)
operator|.
name|setCbLegacyFreeSpaceInFreeChunkList
argument_list|(
name|deserializeLittleEndianInt
argument_list|()
argument_list|)
operator|.
name|setIgnoredZeroA
argument_list|(
name|deserializeLittleEndianChar
argument_list|()
argument_list|)
operator|.
name|setIgnoredZeroB
argument_list|(
name|deserializeLittleEndianChar
argument_list|()
argument_list|)
operator|.
name|setIgnoredZeroC
argument_list|(
name|deserializeLittleEndianChar
argument_list|()
argument_list|)
operator|.
name|setIgnoredZeroD
argument_list|(
name|deserializeLittleEndianChar
argument_list|()
argument_list|)
operator|.
name|setGuidAncestor
argument_list|(
name|deserializeGUID
argument_list|()
argument_list|)
operator|.
name|setCrcName
argument_list|(
name|deserializeLittleEndianInt
argument_list|()
argument_list|)
operator|.
name|setFcrHashedChunkList
argument_list|(
name|deserializeFileChunkReference64x32
argument_list|()
argument_list|)
operator|.
name|setFcrTransactionLog
argument_list|(
name|deserializeFileChunkReference64x32
argument_list|()
argument_list|)
operator|.
name|setFcrFileNodeListRoot
argument_list|(
name|deserializeFileChunkReference64x32
argument_list|()
argument_list|)
operator|.
name|setFcrFreeChunkList
argument_list|(
name|deserializeFileChunkReference64x32
argument_list|()
argument_list|)
operator|.
name|setCbExpectedFileLength
argument_list|(
name|deserializeLittleEndianLong
argument_list|()
argument_list|)
operator|.
name|setCbFreeSpaceInFreeChunkList
argument_list|(
name|deserializeLittleEndianLong
argument_list|()
argument_list|)
operator|.
name|setGuidFileVersion
argument_list|(
name|deserializeGUID
argument_list|()
argument_list|)
operator|.
name|setnFileVersionGeneration
argument_list|(
name|deserializeLittleEndianLong
argument_list|()
argument_list|)
operator|.
name|setGuidDenyReadFileVersion
argument_list|(
name|deserializeGUID
argument_list|()
argument_list|)
operator|.
name|setGrfDebugLogFlags
argument_list|(
name|deserializeLittleEndianInt
argument_list|()
argument_list|)
operator|.
name|setFcrDebugLogA
argument_list|(
name|deserializeFileChunkReference64x32
argument_list|()
argument_list|)
operator|.
name|setFcrDebugLogB
argument_list|(
name|deserializeFileChunkReference64x32
argument_list|()
argument_list|)
operator|.
name|setBuildNumberCreated
argument_list|(
name|deserializeLittleEndianInt
argument_list|()
argument_list|)
operator|.
name|setBuildNumberLastWroteToFile
argument_list|(
name|deserializeLittleEndianInt
argument_list|()
argument_list|)
operator|.
name|setBuildNumberOldestWritten
argument_list|(
name|deserializeLittleEndianInt
argument_list|()
argument_list|)
operator|.
name|setBuildNumberNewestWritten
argument_list|(
name|deserializeLittleEndianInt
argument_list|()
argument_list|)
expr_stmt|;
name|ByteBuffer
name|reservedBytesAtEndOfHeader
init|=
name|ByteBuffer
operator|.
name|allocate
argument_list|(
name|NUM_RESERVED_BYTES_AT_END_OF_HEADER
argument_list|)
decl_stmt|;
name|deserializeBytes
argument_list|(
name|reservedBytesAtEndOfHeader
argument_list|)
expr_stmt|;
return|return
name|data
return|;
block|}
specifier|private
name|GUID
name|deserializeGUID
parameter_list|()
throws|throws
name|IOException
block|{
name|int
index|[]
name|guid
init|=
operator|new
name|int
index|[
literal|16
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|16
condition|;
operator|++
name|i
control|)
block|{
name|guid
index|[
name|i
index|]
operator|=
name|dif
operator|.
name|read
argument_list|()
expr_stmt|;
block|}
name|int
index|[]
name|guid2
init|=
operator|new
name|int
index|[
literal|16
index|]
decl_stmt|;
comment|// re-order [0,1,2,3] to little endian
name|guid2
index|[
literal|0
index|]
operator|=
name|guid
index|[
literal|3
index|]
expr_stmt|;
name|guid2
index|[
literal|1
index|]
operator|=
name|guid
index|[
literal|2
index|]
expr_stmt|;
name|guid2
index|[
literal|2
index|]
operator|=
name|guid
index|[
literal|1
index|]
expr_stmt|;
name|guid2
index|[
literal|3
index|]
operator|=
name|guid
index|[
literal|0
index|]
expr_stmt|;
comment|// re-order [4,5,6,7] to little endian
name|guid2
index|[
literal|4
index|]
operator|=
name|guid
index|[
literal|5
index|]
expr_stmt|;
name|guid2
index|[
literal|5
index|]
operator|=
name|guid
index|[
literal|4
index|]
expr_stmt|;
name|guid2
index|[
literal|6
index|]
operator|=
name|guid
index|[
literal|7
index|]
expr_stmt|;
name|guid2
index|[
literal|7
index|]
operator|=
name|guid
index|[
literal|6
index|]
expr_stmt|;
comment|// the rest is already in right order.
name|guid2
index|[
literal|8
index|]
operator|=
name|guid
index|[
literal|8
index|]
expr_stmt|;
name|guid2
index|[
literal|9
index|]
operator|=
name|guid
index|[
literal|9
index|]
expr_stmt|;
name|guid2
index|[
literal|10
index|]
operator|=
name|guid
index|[
literal|10
index|]
expr_stmt|;
name|guid2
index|[
literal|11
index|]
operator|=
name|guid
index|[
literal|11
index|]
expr_stmt|;
name|guid2
index|[
literal|12
index|]
operator|=
name|guid
index|[
literal|12
index|]
expr_stmt|;
name|guid2
index|[
literal|13
index|]
operator|=
name|guid
index|[
literal|13
index|]
expr_stmt|;
name|guid2
index|[
literal|14
index|]
operator|=
name|guid
index|[
literal|14
index|]
expr_stmt|;
name|guid2
index|[
literal|15
index|]
operator|=
name|guid
index|[
literal|15
index|]
expr_stmt|;
name|offset
operator|=
name|dif
operator|.
name|position
argument_list|()
expr_stmt|;
return|return
operator|new
name|GUID
argument_list|(
name|guid2
argument_list|)
return|;
block|}
specifier|private
name|byte
index|[]
name|deserializedReservedHeader
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|dif
operator|.
name|position
argument_list|()
operator|!=
name|offset
condition|)
block|{
name|dif
operator|.
name|position
argument_list|(
name|offset
argument_list|)
expr_stmt|;
block|}
name|ByteBuffer
name|data
init|=
name|ByteBuffer
operator|.
name|allocate
argument_list|(
literal|728
argument_list|)
decl_stmt|;
name|dif
operator|.
name|read
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|offset
operator|=
name|dif
operator|.
name|position
argument_list|()
expr_stmt|;
return|return
name|data
operator|.
name|array
argument_list|()
return|;
block|}
specifier|private
name|FileChunkReference
name|deserializeFileChunkReference64
parameter_list|()
throws|throws
name|IOException
block|{
name|long
name|stp
init|=
name|deserializeLittleEndianInt
argument_list|()
decl_stmt|;
name|long
name|cb
init|=
name|deserializeLittleEndianInt
argument_list|()
decl_stmt|;
name|offset
operator|=
name|dif
operator|.
name|position
argument_list|()
expr_stmt|;
return|return
operator|new
name|FileChunkReference
argument_list|(
name|stp
argument_list|,
name|cb
argument_list|)
return|;
block|}
specifier|private
name|FileChunkReference
name|deserializeFileChunkReference64x32
parameter_list|()
throws|throws
name|IOException
block|{
name|long
name|stp
init|=
name|deserializeLittleEndianLong
argument_list|()
decl_stmt|;
name|long
name|cb
init|=
name|deserializeLittleEndianInt
argument_list|()
decl_stmt|;
name|offset
operator|=
name|dif
operator|.
name|position
argument_list|()
expr_stmt|;
return|return
operator|new
name|FileChunkReference
argument_list|(
name|stp
argument_list|,
name|cb
argument_list|)
return|;
block|}
specifier|private
name|char
name|deserializeLittleEndianChar
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|dif
operator|.
name|position
argument_list|()
operator|!=
name|offset
condition|)
block|{
name|dif
operator|.
name|position
argument_list|(
name|offset
argument_list|)
expr_stmt|;
block|}
name|char
name|res
init|=
operator|(
name|char
operator|)
name|dif
operator|.
name|read
argument_list|()
decl_stmt|;
operator|++
name|offset
expr_stmt|;
return|return
name|res
return|;
block|}
specifier|private
name|long
name|deserializeLittleEndianInt
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|dif
operator|.
name|position
argument_list|()
operator|!=
name|offset
condition|)
block|{
name|dif
operator|.
name|position
argument_list|(
name|offset
argument_list|)
expr_stmt|;
block|}
name|ByteBuffer
name|byteBuffer
init|=
name|ByteBuffer
operator|.
name|allocate
argument_list|(
literal|4
argument_list|)
decl_stmt|;
name|dif
operator|.
name|read
argument_list|(
name|byteBuffer
argument_list|)
expr_stmt|;
name|long
name|res
init|=
name|EndianUtils
operator|.
name|readSwappedUnsignedInteger
argument_list|(
name|byteBuffer
operator|.
name|array
argument_list|()
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|offset
operator|=
name|dif
operator|.
name|position
argument_list|()
expr_stmt|;
return|return
name|res
return|;
block|}
specifier|private
name|long
name|deserializeLittleEndianLong
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|dif
operator|.
name|position
argument_list|()
operator|!=
name|offset
condition|)
block|{
name|dif
operator|.
name|position
argument_list|(
name|offset
argument_list|)
expr_stmt|;
block|}
name|ByteBuffer
name|byteBuffer
init|=
name|ByteBuffer
operator|.
name|allocate
argument_list|(
literal|8
argument_list|)
decl_stmt|;
name|dif
operator|.
name|read
argument_list|(
name|byteBuffer
argument_list|)
expr_stmt|;
name|long
name|res
init|=
name|EndianUtils
operator|.
name|readSwappedLong
argument_list|(
name|byteBuffer
operator|.
name|array
argument_list|()
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|offset
operator|=
name|dif
operator|.
name|position
argument_list|()
expr_stmt|;
return|return
name|res
return|;
block|}
specifier|private
name|long
name|deserializeLittleEndianShort
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|dif
operator|.
name|position
argument_list|()
operator|!=
name|offset
condition|)
block|{
name|dif
operator|.
name|position
argument_list|(
name|offset
argument_list|)
expr_stmt|;
block|}
name|int
name|c1
init|=
name|dif
operator|.
name|read
argument_list|()
decl_stmt|;
name|int
name|c2
init|=
name|dif
operator|.
name|read
argument_list|()
decl_stmt|;
name|long
name|res
init|=
operator|(
operator|(
operator|(
name|c1
operator|&
literal|0xff
operator|)
operator|<<
literal|0
operator|)
operator|+
operator|(
operator|(
name|c2
operator|&
literal|0xff
operator|)
operator|<<
literal|8
operator|)
operator|)
decl_stmt|;
name|offset
operator|=
name|dif
operator|.
name|position
argument_list|()
expr_stmt|;
return|return
name|res
return|;
block|}
specifier|private
name|String
name|getIndent
parameter_list|()
block|{
name|String
name|retval
init|=
literal|""
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|indentLevel
condition|;
operator|++
name|i
control|)
block|{
name|retval
operator|+=
literal|"  "
expr_stmt|;
block|}
return|return
name|retval
return|;
block|}
specifier|public
name|void
name|reposition
parameter_list|(
name|FileChunkReference
name|loc
parameter_list|)
throws|throws
name|IOException
block|{
name|reposition
argument_list|(
name|loc
operator|.
name|stp
argument_list|)
expr_stmt|;
name|this
operator|.
name|end
operator|=
name|offset
operator|+
name|loc
operator|.
name|cb
expr_stmt|;
block|}
specifier|private
name|void
name|reposition
parameter_list|(
name|long
name|offset
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|offset
operator|=
name|offset
expr_stmt|;
name|dif
operator|.
name|position
argument_list|(
name|offset
argument_list|)
expr_stmt|;
block|}
comment|/**      * Keep parsing file node list fragments until a nil file chunk reference is encountered.      *<p>      * A file node list can be divided into one or more FileNodeListFragment      * structures. Each fragment can specify whether there are more fragments in the list and      * the location of the next fragment. Each fragment specifies a sub-sequence of FileNode structures      * from the file node list.      *<p>      * When specifying the structure of a specific file node list in this document, the division of the list into      * fragments is ignored and FileNode structures with FileNode.FileNodeID field values equal to 0x0FF      * ("ChunkTerminatorFND") are not specified.      *      * @param ptr          The current OneNotePtr we are at currently.      * @param fileNodeList The file node list to populate as we parse.      * @param curPath      The current FileNodePtr.      * @return The resulting one note pointer after node lists are all parsed.      */
specifier|public
name|OneNotePtr
name|internalDeserializeFileNodeList
parameter_list|(
name|OneNotePtr
name|ptr
parameter_list|,
name|FileNodeList
name|fileNodeList
parameter_list|,
name|FileNodePtr
name|curPath
parameter_list|)
throws|throws
name|IOException
throws|,
name|TikaException
block|{
name|OneNotePtr
name|localPtr
init|=
operator|new
name|OneNotePtr
argument_list|(
name|document
argument_list|,
name|dif
argument_list|)
decl_stmt|;
name|FileNodePtrBackPush
name|bp
init|=
operator|new
name|FileNodePtrBackPush
argument_list|(
name|curPath
argument_list|)
decl_stmt|;
try|try
block|{
while|while
condition|(
literal|true
condition|)
block|{
name|FileChunkReference
name|next
init|=
name|FileChunkReference
operator|.
name|nil
argument_list|()
decl_stmt|;
name|ptr
operator|.
name|deserializeFileNodeListFragment
argument_list|(
name|fileNodeList
argument_list|,
name|next
argument_list|,
name|curPath
argument_list|)
expr_stmt|;
if|if
condition|(
name|FileChunkReference
operator|.
name|nil
argument_list|()
operator|.
name|equals
argument_list|(
name|next
argument_list|)
condition|)
block|{
break|break;
block|}
name|localPtr
operator|.
name|reposition
argument_list|(
name|next
argument_list|)
expr_stmt|;
name|ptr
operator|=
name|localPtr
expr_stmt|;
block|}
return|return
name|ptr
return|;
block|}
finally|finally
block|{
name|bp
operator|.
name|dec
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|OneNotePtr
name|deserializeFileNodeList
parameter_list|(
name|FileNodeList
name|fileNodeList
parameter_list|,
name|FileNodePtr
name|curPath
parameter_list|)
throws|throws
name|IOException
throws|,
name|TikaException
block|{
return|return
name|internalDeserializeFileNodeList
argument_list|(
name|this
argument_list|,
name|fileNodeList
argument_list|,
name|curPath
argument_list|)
return|;
block|}
comment|/**      * Deserializes a FileNodeListFragment.      *<p>      * The FileNodeListFragment structure specifies a sequence of file nodes from a file node list. The size of the      * FileNodeListFragment structure is specified by the structure that references it.      *<p>      * All fragments in the same file node list MUST have the same FileNodeListFragment.header.FileNodeListID field.      *      * @param data    List of file nodes that we collect while deserializing.      * @param next    The next file chunk we are referencing.      * @param curPath The current FileNodePtr.      */
name|void
name|deserializeFileNodeListFragment
parameter_list|(
name|FileNodeList
name|data
parameter_list|,
name|FileChunkReference
name|next
parameter_list|,
name|FileNodePtr
name|curPath
parameter_list|)
throws|throws
name|IOException
throws|,
name|TikaException
block|{
name|data
operator|.
name|fileNodeListHeader
operator|=
name|deserializeFileNodeListHeader
argument_list|()
expr_stmt|;
name|boolean
name|terminated
init|=
literal|false
decl_stmt|;
while|while
condition|(
name|offset
operator|+
literal|24
operator|<=
name|end
condition|)
block|{
comment|// while there are at least 24 bytes free
comment|// 24 = sizeof(nextFragment) [12 bytes] + sizeof(footer) [8 bytes]
comment|// + 4 bytes for the FileNode header
name|CheckedFileNodePushBack
name|pushBack
init|=
operator|new
name|CheckedFileNodePushBack
argument_list|(
name|data
argument_list|)
decl_stmt|;
try|try
block|{
name|FileNode
name|fileNode
init|=
name|deserializeFileNode
argument_list|(
name|data
operator|.
name|children
operator|.
name|get
argument_list|(
name|data
operator|.
name|children
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
argument_list|,
name|curPath
argument_list|)
decl_stmt|;
if|if
condition|(
name|fileNode
operator|.
name|id
operator|==
name|FndStructureConstants
operator|.
name|ChunkTerminatorFND
operator|||
name|fileNode
operator|.
name|id
operator|==
literal|0
condition|)
block|{
name|terminated
operator|=
literal|true
expr_stmt|;
break|break;
block|}
name|pushBack
operator|.
name|commit
argument_list|()
expr_stmt|;
name|FileNode
name|dereference
init|=
name|curPath
operator|.
name|dereference
argument_list|(
name|document
argument_list|)
decl_stmt|;
name|FileNode
name|lastChild
init|=
name|data
operator|.
name|children
operator|.
name|get
argument_list|(
name|data
operator|.
name|children
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
decl_stmt|;
assert|assert
name|dereference
operator|.
name|equals
argument_list|(
name|lastChild
argument_list|)
assert|;
comment|// is this correct? or should we be checking the pointer?
name|Integer
name|curPathOffset
init|=
name|curPath
operator|.
name|nodeListPositions
operator|.
name|get
argument_list|(
name|curPath
operator|.
name|nodeListPositions
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
decl_stmt|;
name|curPath
operator|.
name|nodeListPositions
operator|.
name|set
argument_list|(
name|curPath
operator|.
name|nodeListPositions
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|,
name|curPathOffset
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|pushBack
operator|.
name|popBackIfNotCommitted
argument_list|()
expr_stmt|;
block|}
block|}
name|reposition
argument_list|(
name|end
operator|-
literal|20
argument_list|)
expr_stmt|;
name|FileChunkReference
name|nextChunkRef
init|=
name|deserializeFileChunkReference64x32
argument_list|()
decl_stmt|;
name|next
operator|.
name|cb
operator|=
name|nextChunkRef
operator|.
name|cb
expr_stmt|;
name|next
operator|.
name|stp
operator|=
name|nextChunkRef
operator|.
name|stp
expr_stmt|;
if|if
condition|(
name|terminated
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"{}Chunk terminator found NextChunkRef.cb={}, NextChunkRef.stp={}, Offset={}, End={}"
argument_list|,
name|getIndent
argument_list|()
argument_list|,
name|nextChunkRef
operator|.
name|cb
argument_list|,
name|nextChunkRef
operator|.
name|stp
argument_list|,
name|offset
argument_list|,
name|end
argument_list|)
expr_stmt|;
comment|// TODO check that next is OK
block|}
name|long
name|footer
init|=
name|deserializeLittleEndianLong
argument_list|()
decl_stmt|;
if|if
condition|(
name|footer
operator|!=
name|FOOTER_CONST
condition|)
block|{
throw|throw
operator|new
name|TikaException
argument_list|(
literal|"Invalid footer constant. Expected "
operator|+
name|FOOTER_CONST
operator|+
literal|" but was "
operator|+
name|footer
argument_list|)
throw|;
block|}
block|}
specifier|private
name|FileNode
name|deserializeFileNode
parameter_list|(
name|FileNode
name|data
parameter_list|,
name|FileNodePtr
name|curPath
parameter_list|)
throws|throws
name|IOException
throws|,
name|TikaException
block|{
name|OneNotePtr
name|backup
init|=
operator|new
name|OneNotePtr
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|long
name|reserved
decl_stmt|;
name|data
operator|.
name|isFileData
operator|=
literal|false
expr_stmt|;
name|data
operator|.
name|gosid
operator|=
name|ExtendedGUID
operator|.
name|nil
argument_list|()
expr_stmt|;
name|long
name|fileNodeHeader
init|=
name|deserializeLittleEndianInt
argument_list|()
decl_stmt|;
name|data
operator|.
name|id
operator|=
name|fileNodeHeader
operator|&
literal|0x3ff
expr_stmt|;
if|if
condition|(
name|data
operator|.
name|id
operator|==
literal|0
condition|)
block|{
return|return
name|data
return|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"{}Start Node {} ({}) - Offset={}, End={}"
argument_list|,
name|getIndent
argument_list|()
argument_list|,
name|FndStructureConstants
operator|.
name|nameOf
argument_list|(
name|data
operator|.
name|id
argument_list|)
argument_list|,
name|data
operator|.
name|id
argument_list|,
name|offset
argument_list|,
name|end
argument_list|)
expr_stmt|;
operator|++
name|indentLevel
expr_stmt|;
name|data
operator|.
name|size
operator|=
operator|(
name|fileNodeHeader
operator|>>
literal|10
operator|)
operator|&
literal|0x1fff
expr_stmt|;
comment|// reset the size to only be in scope of this FileNode
name|end
operator|=
name|backup
operator|.
name|offset
operator|+
name|data
operator|.
name|size
expr_stmt|;
name|long
name|stpFormat
init|=
operator|(
name|fileNodeHeader
operator|>>
literal|23
operator|)
operator|&
literal|0x3
decl_stmt|;
name|long
name|cbFormat
init|=
operator|(
name|fileNodeHeader
operator|>>
literal|25
operator|)
operator|&
literal|0x3
decl_stmt|;
name|data
operator|.
name|baseType
operator|=
operator|(
name|fileNodeHeader
operator|>>
literal|27
operator|)
operator|&
literal|0xf
expr_stmt|;
name|reserved
operator|=
operator|(
name|fileNodeHeader
operator|>>
literal|31
operator|)
expr_stmt|;
name|data
operator|.
name|ref
operator|=
name|FileChunkReference
operator|.
name|nil
argument_list|()
expr_stmt|;
if|if
condition|(
name|data
operator|.
name|baseType
operator|==
literal|1
operator|||
name|data
operator|.
name|baseType
operator|==
literal|2
condition|)
block|{
name|data
operator|.
name|ref
operator|=
name|deserializeVarFileChunkReference
argument_list|(
name|stpFormat
argument_list|,
name|cbFormat
argument_list|)
expr_stmt|;
block|}
comment|// otherwise ignore the data ref, since we're a type 0
if|if
condition|(
name|data
operator|.
name|baseType
operator|==
literal|1
operator|&&
operator|!
name|data
operator|.
name|ref
operator|.
name|equals
argument_list|(
name|FileChunkReference
operator|.
name|nil
argument_list|()
argument_list|)
condition|)
block|{
name|OneNotePtr
name|content
init|=
operator|new
name|OneNotePtr
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|content
operator|.
name|reposition
argument_list|(
name|data
operator|.
name|ref
argument_list|)
expr_stmt|;
comment|// would have thrown an error if invalid.
block|}
if|if
condition|(
name|data
operator|.
name|id
operator|==
name|FndStructureConstants
operator|.
name|ObjectGroupStartFND
condition|)
block|{
name|data
operator|.
name|idDesc
operator|=
literal|"oid(group)"
expr_stmt|;
name|data
operator|.
name|gosid
operator|=
name|deserializeExtendedGUID
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|data
operator|.
name|id
operator|==
name|FndStructureConstants
operator|.
name|ObjectGroupEndFND
condition|)
block|{
comment|// no data
block|}
elseif|else
if|if
condition|(
name|data
operator|.
name|id
operator|==
name|FndStructureConstants
operator|.
name|ObjectSpaceManifestRootFND
operator|||
name|data
operator|.
name|id
operator|==
name|FndStructureConstants
operator|.
name|ObjectSpaceManifestListStartFND
condition|)
block|{
if|if
condition|(
name|data
operator|.
name|id
operator|==
name|FndStructureConstants
operator|.
name|ObjectSpaceManifestRootFND
condition|)
block|{
name|data
operator|.
name|idDesc
operator|=
literal|"gosidRoot"
expr_stmt|;
block|}
else|else
block|{
name|data
operator|.
name|idDesc
operator|=
literal|"gosid"
expr_stmt|;
block|}
comment|// Specifies the identity of the object space being specified by this object space manifest list.
comment|// MUST match the ObjectSpaceManifestListReferenceFND.gosid field of the FileNode structure that referenced
comment|// this file node list.
name|data
operator|.
name|gosid
operator|=
name|deserializeExtendedGUID
argument_list|()
expr_stmt|;
comment|//LOG.debug("{}gosid {}", getIndent(), data.gosid.toString().c_str());
block|}
elseif|else
if|if
condition|(
name|data
operator|.
name|id
operator|==
name|FndStructureConstants
operator|.
name|ObjectSpaceManifestListReferenceFND
condition|)
block|{
name|data
operator|.
name|gosid
operator|=
name|deserializeExtendedGUID
argument_list|()
expr_stmt|;
name|data
operator|.
name|idDesc
operator|=
literal|"gosid"
expr_stmt|;
comment|//LOG.debug("{}gosid {}", getIndent(),data.gosid.toString().c_str());
comment|//children parsed in generic base_type 2 parser
block|}
elseif|else
if|if
condition|(
name|data
operator|.
name|id
operator|==
name|FndStructureConstants
operator|.
name|RevisionManifestListStartFND
condition|)
block|{
name|data
operator|.
name|gosid
operator|=
name|deserializeExtendedGUID
argument_list|()
expr_stmt|;
name|data
operator|.
name|idDesc
operator|=
literal|"gosid"
expr_stmt|;
name|FileNodePtr
name|parentPath
init|=
operator|new
name|FileNodePtr
argument_list|(
name|curPath
argument_list|)
decl_stmt|;
name|parentPath
operator|.
name|nodeListPositions
operator|.
name|remove
argument_list|(
name|parentPath
operator|.
name|nodeListPositions
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
name|document
operator|.
name|registerRevisionManifestList
argument_list|(
name|data
operator|.
name|gosid
argument_list|,
name|parentPath
argument_list|)
expr_stmt|;
comment|//LOG.debug("{}gosid {}", getIndent(),data.gosid.toString().c_str());
name|data
operator|.
name|subType
operator|.
name|revisionManifestListStart
operator|.
name|nInstanceIgnored
operator|=
name|deserializeLittleEndianInt
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|data
operator|.
name|id
operator|==
name|FndStructureConstants
operator|.
name|RevisionManifestStart4FND
condition|)
block|{
name|data
operator|.
name|gosid
operator|=
name|deserializeExtendedGUID
argument_list|()
expr_stmt|;
comment|// the rid
name|data
operator|.
name|idDesc
operator|=
literal|"rid"
expr_stmt|;
comment|//LOG.debug("{}gosid {}", getIndent(), data.gosid.toString().c_str());
name|data
operator|.
name|subType
operator|.
name|revisionManifest
operator|.
name|ridDependent
operator|=
name|deserializeExtendedGUID
argument_list|()
expr_stmt|;
comment|// the rid
name|LOG
operator|.
name|debug
argument_list|(
literal|"{}dependent gosid {}"
argument_list|,
name|getIndent
argument_list|()
argument_list|,
name|data
operator|.
name|subType
operator|.
name|revisionManifest
operator|.
name|ridDependent
argument_list|)
expr_stmt|;
name|data
operator|.
name|subType
operator|.
name|revisionManifest
operator|.
name|timeCreation
operator|=
name|deserializeLittleEndianLong
argument_list|()
expr_stmt|;
name|data
operator|.
name|subType
operator|.
name|revisionManifest
operator|.
name|revisionRole
operator|=
name|deserializeLittleEndianInt
argument_list|()
expr_stmt|;
name|data
operator|.
name|subType
operator|.
name|revisionManifest
operator|.
name|odcsDefault
operator|=
name|deserializeLittleEndianShort
argument_list|()
expr_stmt|;
name|data
operator|.
name|gctxid
operator|=
name|ExtendedGUID
operator|.
name|nil
argument_list|()
expr_stmt|;
name|document
operator|.
name|registerRevisionManifest
argument_list|(
name|data
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|data
operator|.
name|id
operator|==
name|FndStructureConstants
operator|.
name|RevisionManifestStart6FND
operator|||
name|data
operator|.
name|id
operator|==
name|FndStructureConstants
operator|.
name|RevisionManifestStart7FND
condition|)
block|{
name|data
operator|.
name|gosid
operator|=
name|deserializeExtendedGUID
argument_list|()
expr_stmt|;
comment|// the rid
name|data
operator|.
name|idDesc
operator|=
literal|"rid"
expr_stmt|;
comment|//LOG.debug("{}gosid {}", getIndent(), data.gosid.toString().c_str());
name|data
operator|.
name|subType
operator|.
name|revisionManifest
operator|.
name|ridDependent
operator|=
name|deserializeExtendedGUID
argument_list|()
expr_stmt|;
comment|// the rid
name|LOG
operator|.
name|debug
argument_list|(
literal|"{}dependent gosid {}"
argument_list|,
name|getIndent
argument_list|()
argument_list|,
name|data
operator|.
name|subType
operator|.
name|revisionManifest
operator|.
name|ridDependent
argument_list|)
expr_stmt|;
name|data
operator|.
name|subType
operator|.
name|revisionManifest
operator|.
name|revisionRole
operator|=
name|deserializeLittleEndianInt
argument_list|()
expr_stmt|;
name|data
operator|.
name|subType
operator|.
name|revisionManifest
operator|.
name|odcsDefault
operator|=
name|deserializeLittleEndianShort
argument_list|()
expr_stmt|;
name|data
operator|.
name|gctxid
operator|=
name|ExtendedGUID
operator|.
name|nil
argument_list|()
expr_stmt|;
if|if
condition|(
name|data
operator|.
name|id
operator|==
name|FndStructureConstants
operator|.
name|RevisionManifestStart7FND
condition|)
block|{
name|data
operator|.
name|gctxid
operator|=
name|deserializeExtendedGUID
argument_list|()
expr_stmt|;
comment|// the rid
block|}
name|document
operator|.
name|registerAdditionalRevisionRole
argument_list|(
name|data
operator|.
name|gosid
argument_list|,
name|data
operator|.
name|subType
operator|.
name|revisionManifest
operator|.
name|revisionRole
argument_list|,
name|data
operator|.
name|gctxid
argument_list|)
expr_stmt|;
name|document
operator|.
name|registerRevisionManifest
argument_list|(
name|data
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|data
operator|.
name|id
operator|==
name|FndStructureConstants
operator|.
name|GlobalIdTableStartFNDX
condition|)
block|{
name|data
operator|.
name|subType
operator|.
name|globalIdTableStartFNDX
operator|.
name|reserved
operator|=
name|deserializeLittleEndianChar
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|data
operator|.
name|id
operator|==
name|FndStructureConstants
operator|.
name|GlobalIdTableEntryFNDX
condition|)
block|{
name|data
operator|.
name|subType
operator|.
name|globalIdTableEntryFNDX
operator|.
name|index
operator|=
name|deserializeLittleEndianInt
argument_list|()
expr_stmt|;
name|data
operator|.
name|subType
operator|.
name|globalIdTableEntryFNDX
operator|.
name|guid
operator|=
name|deserializeGUID
argument_list|()
expr_stmt|;
name|document
operator|.
name|revisionMap
operator|.
name|get
argument_list|(
name|document
operator|.
name|currentRevision
argument_list|)
operator|.
name|globalId
operator|.
name|put
argument_list|(
name|data
operator|.
name|subType
operator|.
name|globalIdTableEntryFNDX
operator|.
name|index
argument_list|,
name|data
operator|.
name|subType
operator|.
name|globalIdTableEntryFNDX
operator|.
name|guid
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|data
operator|.
name|id
operator|==
name|FndStructureConstants
operator|.
name|GlobalIdTableEntry2FNDX
condition|)
block|{
name|data
operator|.
name|subType
operator|.
name|globalIdTableEntry2FNDX
operator|.
name|indexMapFrom
operator|=
name|deserializeLittleEndianInt
argument_list|()
expr_stmt|;
name|data
operator|.
name|subType
operator|.
name|globalIdTableEntry2FNDX
operator|.
name|indexMapTo
operator|=
name|deserializeLittleEndianInt
argument_list|()
expr_stmt|;
name|ExtendedGUID
name|dependentRevision
init|=
name|document
operator|.
name|revisionMap
operator|.
name|get
argument_list|(
name|document
operator|.
name|currentRevision
argument_list|)
operator|.
name|dependent
decl_stmt|;
comment|// Get the compactId from the revisionMap's globalId map.
name|GUID
name|compactId
init|=
name|document
operator|.
name|revisionMap
operator|.
name|get
argument_list|(
name|dependentRevision
argument_list|)
operator|.
name|globalId
operator|.
name|get
argument_list|(
name|data
operator|.
name|subType
operator|.
name|globalIdTableEntry2FNDX
operator|.
name|indexMapFrom
argument_list|)
decl_stmt|;
if|if
condition|(
name|compactId
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|TikaException
argument_list|(
literal|"COMPACT_ID_MISSING"
argument_list|)
throw|;
block|}
name|document
operator|.
name|revisionMap
operator|.
name|get
argument_list|(
name|document
operator|.
name|currentRevision
argument_list|)
operator|.
name|globalId
operator|.
name|put
argument_list|(
name|data
operator|.
name|subType
operator|.
name|globalIdTableEntry2FNDX
operator|.
name|indexMapTo
argument_list|,
name|compactId
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|data
operator|.
name|id
operator|==
name|FndStructureConstants
operator|.
name|GlobalIdTableEntry3FNDX
condition|)
block|{
name|data
operator|.
name|subType
operator|.
name|globalIdTableEntry3FNDX
operator|.
name|indexCopyFromStart
operator|=
name|deserializeLittleEndianInt
argument_list|()
expr_stmt|;
name|data
operator|.
name|subType
operator|.
name|globalIdTableEntry3FNDX
operator|.
name|entriesToCopy
operator|=
name|deserializeLittleEndianInt
argument_list|()
expr_stmt|;
name|data
operator|.
name|subType
operator|.
name|globalIdTableEntry3FNDX
operator|.
name|indexCopyToStart
operator|=
name|deserializeLittleEndianInt
argument_list|()
expr_stmt|;
name|ExtendedGUID
name|dependent_revision
init|=
name|document
operator|.
name|revisionMap
operator|.
name|get
argument_list|(
name|document
operator|.
name|currentRevision
argument_list|)
operator|.
name|dependent
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|data
operator|.
name|subType
operator|.
name|globalIdTableEntry3FNDX
operator|.
name|entriesToCopy
condition|;
operator|++
name|i
control|)
block|{
name|Map
argument_list|<
name|Long
argument_list|,
name|GUID
argument_list|>
name|globalIdMap
init|=
name|document
operator|.
name|revisionMap
operator|.
name|get
argument_list|(
name|dependent_revision
argument_list|)
operator|.
name|globalId
decl_stmt|;
name|GUID
name|compactId
init|=
name|globalIdMap
operator|.
name|get
argument_list|(
name|data
operator|.
name|subType
operator|.
name|globalIdTableEntry3FNDX
operator|.
name|indexCopyFromStart
operator|+
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|compactId
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|TikaException
argument_list|(
literal|"COMPACT_ID_MISSING"
argument_list|)
throw|;
block|}
name|document
operator|.
name|revisionMap
operator|.
name|get
argument_list|(
name|document
operator|.
name|currentRevision
argument_list|)
operator|.
name|globalId
operator|.
name|put
argument_list|(
name|data
operator|.
name|subType
operator|.
name|globalIdTableEntry3FNDX
operator|.
name|indexCopyToStart
operator|+
name|i
argument_list|,
name|compactId
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|data
operator|.
name|id
operator|==
name|FndStructureConstants
operator|.
name|CanRevise
operator|.
name|ObjectRevisionWithRefCountFNDX
operator|||
name|data
operator|.
name|id
operator|==
name|FndStructureConstants
operator|.
name|CanRevise
operator|.
name|ObjectRevisionWithRefCount2FNDX
condition|)
block|{
name|data
operator|.
name|subType
operator|.
name|objectRevisionWithRefCountFNDX
operator|.
name|oid
operator|=
name|deserializeCompactID
argument_list|()
expr_stmt|;
comment|// the oid
if|if
condition|(
name|data
operator|.
name|id
operator|==
name|FndStructureConstants
operator|.
name|CanRevise
operator|.
name|ObjectRevisionWithRefCountFNDX
condition|)
block|{
name|int
name|ref
init|=
name|deserializeLittleEndianChar
argument_list|()
decl_stmt|;
name|data
operator|.
name|subType
operator|.
name|objectRevisionWithRefCountFNDX
operator|.
name|hasOidReferences
operator|=
name|ref
operator|&
literal|1
expr_stmt|;
name|data
operator|.
name|subType
operator|.
name|objectRevisionWithRefCountFNDX
operator|.
name|hasOsidReferences
operator|=
name|ref
operator|&
literal|2
expr_stmt|;
name|data
operator|.
name|subType
operator|.
name|objectRevisionWithRefCountFNDX
operator|.
name|cRef
operator|=
operator|(
name|ref
operator|>>
literal|2
operator|)
expr_stmt|;
block|}
else|else
block|{
name|long
name|ref
init|=
name|deserializeLittleEndianInt
argument_list|()
decl_stmt|;
name|data
operator|.
name|subType
operator|.
name|objectRevisionWithRefCountFNDX
operator|.
name|hasOidReferences
operator|=
name|ref
operator|&
literal|1
expr_stmt|;
name|data
operator|.
name|subType
operator|.
name|objectRevisionWithRefCountFNDX
operator|.
name|hasOsidReferences
operator|=
name|ref
operator|&
literal|2
expr_stmt|;
if|if
condition|(
operator|(
name|ref
operator|>>
literal|2
operator|)
operator|!=
literal|0
condition|)
block|{
throw|throw
operator|new
name|TikaException
argument_list|(
literal|"Reserved non-zero"
argument_list|)
throw|;
block|}
name|data
operator|.
name|subType
operator|.
name|objectRevisionWithRefCountFNDX
operator|.
name|cRef
operator|=
name|deserializeLittleEndianInt
argument_list|()
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|data
operator|.
name|id
operator|==
name|FndStructureConstants
operator|.
name|RootObjectReference2FNDX
condition|)
block|{
name|data
operator|.
name|subType
operator|.
name|rootObjectReference
operator|.
name|oidRoot
operator|=
name|deserializeCompactID
argument_list|()
expr_stmt|;
name|data
operator|.
name|idDesc
operator|=
literal|"oidRoot"
expr_stmt|;
name|data
operator|.
name|gosid
operator|=
name|data
operator|.
name|subType
operator|.
name|rootObjectReference
operator|.
name|oidRoot
operator|.
name|guid
expr_stmt|;
name|data
operator|.
name|subType
operator|.
name|rootObjectReference
operator|.
name|rootObjectReferenceBase
operator|.
name|rootRole
operator|=
name|deserializeLittleEndianInt
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"{}Root role {}"
argument_list|,
name|getIndent
argument_list|()
argument_list|,
name|data
operator|.
name|subType
operator|.
name|rootObjectReference
operator|.
name|rootObjectReferenceBase
operator|.
name|rootRole
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|data
operator|.
name|id
operator|==
name|FndStructureConstants
operator|.
name|RootObjectReference3FND
condition|)
block|{
name|data
operator|.
name|idDesc
operator|=
literal|"oidRoot"
expr_stmt|;
name|data
operator|.
name|gosid
operator|=
name|deserializeExtendedGUID
argument_list|()
expr_stmt|;
name|data
operator|.
name|subType
operator|.
name|rootObjectReference
operator|.
name|rootObjectReferenceBase
operator|.
name|rootRole
operator|=
name|deserializeLittleEndianInt
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"{}Root role {}"
argument_list|,
name|getIndent
argument_list|()
argument_list|,
name|data
operator|.
name|subType
operator|.
name|rootObjectReference
operator|.
name|rootObjectReferenceBase
operator|.
name|rootRole
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|data
operator|.
name|id
operator|==
name|FndStructureConstants
operator|.
name|RevisionRoleDeclarationFND
operator|||
name|data
operator|.
name|id
operator|==
name|FndStructureConstants
operator|.
name|RevisionRoleAndContextDeclarationFND
condition|)
block|{
name|data
operator|.
name|gosid
operator|=
name|deserializeExtendedGUID
argument_list|()
expr_stmt|;
name|data
operator|.
name|subType
operator|.
name|revisionRoleDeclaration
operator|.
name|revisionRole
operator|=
name|deserializeLittleEndianInt
argument_list|()
expr_stmt|;
if|if
condition|(
name|data
operator|.
name|id
operator|==
name|FndStructureConstants
operator|.
name|RevisionRoleAndContextDeclarationFND
condition|)
block|{
name|data
operator|.
name|gctxid
operator|=
name|deserializeExtendedGUID
argument_list|()
expr_stmt|;
block|}
name|document
operator|.
name|registerAdditionalRevisionRole
argument_list|(
name|data
operator|.
name|gosid
argument_list|,
name|data
operator|.
name|subType
operator|.
name|revisionRoleDeclaration
operator|.
name|revisionRole
argument_list|,
name|data
operator|.
name|gctxid
argument_list|)
expr_stmt|;
comment|// FIXME: deal with ObjectDataEncryptionKey
block|}
elseif|else
if|if
condition|(
name|data
operator|.
name|id
operator|==
name|FndStructureConstants
operator|.
name|ObjectInfoDependencyOverridesFND
condition|)
block|{
name|OneNotePtr
name|content
init|=
operator|new
name|OneNotePtr
argument_list|(
name|this
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|data
operator|.
name|ref
operator|.
name|equals
argument_list|(
name|FileChunkReference
operator|.
name|nil
argument_list|()
argument_list|)
condition|)
block|{
name|content
operator|.
name|reposition
argument_list|(
name|data
operator|.
name|ref
argument_list|)
expr_stmt|;
comment|// otherwise it's positioned right at this node
block|}
name|data
operator|.
name|subType
operator|.
name|objectInfoDependencyOverrides
operator|.
name|data
operator|=
name|content
operator|.
name|deserializeObjectInfoDependencyOverrideData
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|data
operator|.
name|id
operator|==
name|FndStructureConstants
operator|.
name|FileDataStoreListReferenceFND
condition|)
block|{
comment|// already processed this
block|}
elseif|else
if|if
condition|(
name|data
operator|.
name|id
operator|==
name|FndStructureConstants
operator|.
name|FileDataStoreObjectReferenceFND
condition|)
block|{
name|FileChunkReference
name|ref
init|=
name|deserializeFileChunkReference64
argument_list|()
decl_stmt|;
name|GUID
name|guid
init|=
name|deserializeGUID
argument_list|()
decl_stmt|;
name|ExtendedGUID
name|extendedGuid
init|=
operator|new
name|ExtendedGUID
argument_list|(
name|guid
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|trace
argument_list|(
literal|"found extended guid {}"
argument_list|,
name|extendedGuid
argument_list|)
expr_stmt|;
name|document
operator|.
name|guidToRef
operator|.
name|put
argument_list|(
name|extendedGuid
argument_list|,
name|ref
argument_list|)
expr_stmt|;
name|OneNotePtr
name|fileDataStorePtr
init|=
operator|new
name|OneNotePtr
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|fileDataStorePtr
operator|.
name|reposition
argument_list|(
name|data
operator|.
name|ref
argument_list|)
expr_stmt|;
name|data
operator|.
name|subType
operator|.
name|fileDataStoreObjectReference
operator|.
name|ref
operator|=
name|fileDataStorePtr
operator|.
name|deserializeFileDataStoreObject
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|data
operator|.
name|id
operator|==
name|FndStructureConstants
operator|.
name|CanRevise
operator|.
name|ObjectDeclarationWithRefCountFNDX
operator|||
name|data
operator|.
name|id
operator|==
name|FndStructureConstants
operator|.
name|CanRevise
operator|.
name|ObjectDeclarationWithRefCount2FNDX
operator|||
name|data
operator|.
name|id
operator|==
name|FndStructureConstants
operator|.
name|CanRevise
operator|.
name|ObjectDeclaration2RefCountFND
operator|||
name|data
operator|.
name|id
operator|==
name|FndStructureConstants
operator|.
name|CanRevise
operator|.
name|ObjectDeclaration2LargeRefCountFND
operator|||
name|data
operator|.
name|id
operator|==
name|FndStructureConstants
operator|.
name|CanRevise
operator|.
name|ReadOnlyObjectDeclaration2RefCountFND
operator|||
name|data
operator|.
name|id
operator|==
name|FndStructureConstants
operator|.
name|CanRevise
operator|.
name|ReadOnlyObjectDeclaration2LargeRefCountFND
condition|)
block|{
name|data
operator|.
name|subType
operator|.
name|objectDeclarationWithRefCount
operator|.
name|body
operator|.
name|file_data_store_reference
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|data
operator|.
name|id
operator|==
name|FndStructureConstants
operator|.
name|CanRevise
operator|.
name|ObjectDeclarationWithRefCountFNDX
operator|||
name|data
operator|.
name|id
operator|==
name|FndStructureConstants
operator|.
name|CanRevise
operator|.
name|ObjectDeclarationWithRefCount2FNDX
condition|)
block|{
name|data
operator|.
name|subType
operator|.
name|objectDeclarationWithRefCount
operator|.
name|body
operator|=
name|deserializeObjectDeclarationWithRefCountBody
argument_list|()
expr_stmt|;
block|}
else|else
block|{
comment|// one of the other 4 that use the ObjectDeclaration2Body
name|data
operator|.
name|subType
operator|.
name|objectDeclarationWithRefCount
operator|.
name|body
operator|=
name|deserializeObjectDeclaration2Body
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|data
operator|.
name|id
operator|==
name|FndStructureConstants
operator|.
name|CanRevise
operator|.
name|ObjectDeclarationWithRefCountFNDX
operator|||
name|data
operator|.
name|id
operator|==
name|FndStructureConstants
operator|.
name|CanRevise
operator|.
name|ObjectDeclaration2RefCountFND
operator|||
name|data
operator|.
name|id
operator|==
name|FndStructureConstants
operator|.
name|CanRevise
operator|.
name|ReadOnlyObjectDeclaration2RefCountFND
condition|)
block|{
name|long
name|refCnt
init|=
name|deserializeLittleEndianChar
argument_list|()
decl_stmt|;
name|data
operator|.
name|subType
operator|.
name|objectDeclarationWithRefCount
operator|.
name|cRef
operator|=
name|refCnt
expr_stmt|;
block|}
else|else
block|{
name|data
operator|.
name|subType
operator|.
name|objectDeclarationWithRefCount
operator|.
name|cRef
operator|=
name|deserializeLittleEndianInt
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|data
operator|.
name|id
operator|==
name|FndStructureConstants
operator|.
name|CanRevise
operator|.
name|ReadOnlyObjectDeclaration2RefCountFND
operator|||
name|data
operator|.
name|id
operator|==
name|FndStructureConstants
operator|.
name|CanRevise
operator|.
name|ReadOnlyObjectDeclaration2LargeRefCountFND
condition|)
block|{
name|ByteBuffer
name|md5Buffer
init|=
name|ByteBuffer
operator|.
name|allocate
argument_list|(
literal|16
argument_list|)
decl_stmt|;
name|deserializeBytes
argument_list|(
name|md5Buffer
argument_list|)
expr_stmt|;
name|data
operator|.
name|subType
operator|.
name|objectDeclarationWithRefCount
operator|.
name|readOnly
operator|.
name|md5
operator|=
name|md5Buffer
operator|.
name|array
argument_list|()
expr_stmt|;
block|}
name|data
operator|.
name|idDesc
operator|=
literal|"oid"
expr_stmt|;
name|postprocessObjectDeclarationContents
argument_list|(
name|data
argument_list|,
name|curPath
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"{}Ref Count JCID {}"
argument_list|,
name|getIndent
argument_list|()
argument_list|,
name|data
operator|.
name|subType
operator|.
name|objectDeclarationWithRefCount
operator|.
name|body
operator|.
name|jcid
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|data
operator|.
name|id
operator|==
name|FndStructureConstants
operator|.
name|CanRevise
operator|.
name|ObjectDeclarationFileData3RefCountFND
operator|||
name|data
operator|.
name|id
operator|==
name|FndStructureConstants
operator|.
name|CanRevise
operator|.
name|ObjectDeclarationFileData3LargeRefCountFND
condition|)
block|{
name|data
operator|.
name|subType
operator|.
name|objectDeclarationWithRefCount
operator|.
name|body
operator|.
name|oid
operator|=
name|deserializeCompactID
argument_list|()
expr_stmt|;
name|long
name|jcid
init|=
name|deserializeLittleEndianInt
argument_list|()
decl_stmt|;
name|data
operator|.
name|subType
operator|.
name|objectDeclarationWithRefCount
operator|.
name|body
operator|.
name|jcid
operator|.
name|loadFrom32BitIndex
argument_list|(
name|jcid
argument_list|)
expr_stmt|;
if|if
condition|(
name|data
operator|.
name|id
operator|==
name|FndStructureConstants
operator|.
name|CanRevise
operator|.
name|ObjectDeclarationFileData3RefCountFND
condition|)
block|{
name|data
operator|.
name|subType
operator|.
name|objectDeclarationWithRefCount
operator|.
name|cRef
operator|=
name|deserializeLittleEndianChar
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|data
operator|.
name|subType
operator|.
name|objectDeclarationWithRefCount
operator|.
name|cRef
operator|=
name|deserializeLittleEndianInt
argument_list|()
expr_stmt|;
block|}
name|long
name|cch
init|=
name|deserializeLittleEndianInt
argument_list|()
decl_stmt|;
name|long
name|roomLeftLong
init|=
name|roomLeft
argument_list|()
decl_stmt|;
if|if
condition|(
name|cch
operator|>
name|roomLeftLong
condition|)
block|{
comment|// not a valid guid
throw|throw
operator|new
name|TikaException
argument_list|(
literal|"Data out of bounds - cch "
operator|+
name|cch
operator|+
literal|" is> room left = "
operator|+
name|roomLeftLong
argument_list|)
throw|;
block|}
if|if
condition|(
name|cch
operator|>
name|dif
operator|.
name|size
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|TikaMemoryLimitException
argument_list|(
literal|"CCH="
operator|+
name|cch
operator|+
literal|" was found that was great than file size "
operator|+
name|dif
operator|.
name|size
argument_list|()
argument_list|)
throw|;
block|}
name|ByteBuffer
name|dataSpaceBuffer
init|=
name|ByteBuffer
operator|.
name|allocate
argument_list|(
operator|(
name|int
operator|)
name|cch
operator|*
literal|2
argument_list|)
decl_stmt|;
name|dif
operator|.
name|read
argument_list|(
name|dataSpaceBuffer
argument_list|)
expr_stmt|;
name|byte
index|[]
name|dataSpaceBufferBytes
init|=
name|dataSpaceBuffer
operator|.
name|array
argument_list|()
decl_stmt|;
name|offset
operator|+=
name|dataSpaceBufferBytes
operator|.
name|length
expr_stmt|;
if|if
condition|(
name|dataSpaceBufferBytes
operator|.
name|length
operator|==
operator|(
name|IFNDF_GUID_LENGTH
operator|*
literal|2
operator|+
name|IFNDF
operator|.
name|length
operator|)
operator|&&
name|Arrays
operator|.
name|equals
argument_list|(
name|IFNDF
argument_list|,
name|Arrays
operator|.
name|copyOfRange
argument_list|(
name|dataSpaceBufferBytes
argument_list|,
literal|0
argument_list|,
name|IFNDF
operator|.
name|length
argument_list|)
argument_list|)
condition|)
block|{
name|data
operator|.
name|subType
operator|.
name|objectDeclarationWithRefCount
operator|.
name|body
operator|.
name|file_data_store_reference
operator|=
literal|true
expr_stmt|;
name|GUID
name|guid
init|=
name|GUID
operator|.
name|fromCurlyBraceUTF16Bytes
argument_list|(
name|Arrays
operator|.
name|copyOfRange
argument_list|(
name|dataSpaceBufferBytes
argument_list|,
name|IFNDF
operator|.
name|length
argument_list|,
name|dataSpaceBufferBytes
operator|.
name|length
argument_list|)
argument_list|)
decl_stmt|;
name|ExtendedGUID
name|extendedGUID
init|=
operator|new
name|ExtendedGUID
argument_list|(
name|guid
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|FileChunkReference
name|fileChunk
init|=
name|document
operator|.
name|getAssocGuidToRef
argument_list|(
name|extendedGUID
argument_list|)
decl_stmt|;
if|if
condition|(
name|fileChunk
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"{} have not seen GUID {} yet"
argument_list|,
name|getIndent
argument_list|()
argument_list|,
name|extendedGUID
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// TODO - call postprocessObjectDeclarationContents on this object?
block|}
block|}
else|else
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"{}Ignoring an external reference {}"
argument_list|,
name|getIndent
argument_list|()
argument_list|,
operator|new
name|String
argument_list|(
name|dataSpaceBufferBytes
argument_list|,
name|StandardCharsets
operator|.
name|UTF_16LE
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|data
operator|.
name|id
operator|==
name|FndStructureConstants
operator|.
name|ObjectGroupListReferenceFND
condition|)
block|{
name|data
operator|.
name|idDesc
operator|=
literal|"object_group_id"
expr_stmt|;
name|data
operator|.
name|gosid
operator|=
name|deserializeExtendedGUID
argument_list|()
expr_stmt|;
comment|// the object group id
comment|// the ref populates the FileNodeList children
block|}
elseif|else
if|if
condition|(
name|data
operator|.
name|id
operator|==
name|FndStructureConstants
operator|.
name|ObjectGroupStartFND
condition|)
block|{
name|data
operator|.
name|idDesc
operator|=
literal|"object_group_id"
expr_stmt|;
name|data
operator|.
name|gosid
operator|=
name|deserializeExtendedGUID
argument_list|()
expr_stmt|;
comment|// the oid
block|}
elseif|else
if|if
condition|(
name|data
operator|.
name|id
operator|==
name|FndStructureConstants
operator|.
name|ObjectGroupEndFND
condition|)
block|{
comment|// nothing to see here
block|}
elseif|else
if|if
condition|(
name|data
operator|.
name|id
operator|==
name|FndStructureConstants
operator|.
name|DataSignatureGroupDefinitionFND
condition|)
block|{
name|data
operator|.
name|idDesc
operator|=
literal|"data_sig"
expr_stmt|;
name|data
operator|.
name|gosid
operator|=
name|deserializeExtendedGUID
argument_list|()
expr_stmt|;
comment|// the DataSignatureGroup
block|}
elseif|else
if|if
condition|(
name|data
operator|.
name|id
operator|==
name|FndStructureConstants
operator|.
name|RevisionManifestListReferenceFND
condition|)
block|{
name|document
operator|.
name|revisionMap
operator|.
name|putIfAbsent
argument_list|(
name|document
operator|.
name|currentRevision
argument_list|,
operator|new
name|Revision
argument_list|()
argument_list|)
expr_stmt|;
name|Revision
name|currentRevision
init|=
name|document
operator|.
name|revisionMap
operator|.
name|get
argument_list|(
name|document
operator|.
name|currentRevision
argument_list|)
decl_stmt|;
name|currentRevision
operator|.
name|manifestList
operator|.
name|add
argument_list|(
name|curPath
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"No fnd needed to be parsed for data.id=0x"
operator|+
name|Long
operator|.
name|toHexString
argument_list|(
name|data
operator|.
name|id
argument_list|)
operator|+
literal|" ("
operator|+
name|FndStructureConstants
operator|.
name|nameOf
argument_list|(
name|data
operator|.
name|id
argument_list|)
operator|+
literal|")"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|data
operator|.
name|baseType
operator|==
literal|2
condition|)
block|{
comment|// Generic baseType == 2 parser - means we have children to parse.
name|OneNotePtr
name|subList
init|=
operator|new
name|OneNotePtr
argument_list|(
name|this
argument_list|)
decl_stmt|;
comment|// position the subList pointer to the data.ref and deserialize recursively.
name|subList
operator|.
name|reposition
argument_list|(
name|data
operator|.
name|ref
argument_list|)
expr_stmt|;
name|subList
operator|.
name|deserializeFileNodeList
argument_list|(
name|data
operator|.
name|childFileNodeList
argument_list|,
name|curPath
argument_list|)
expr_stmt|;
block|}
name|offset
operator|=
name|backup
operator|.
name|offset
operator|+
name|data
operator|.
name|size
expr_stmt|;
name|end
operator|=
name|backup
operator|.
name|end
expr_stmt|;
if|if
condition|(
name|reserved
operator|!=
literal|1
condition|)
block|{
name|System
operator|.
name|exit
argument_list|(
literal|1
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|TikaException
argument_list|(
literal|"RESERVED_NONZERO"
argument_list|)
throw|;
block|}
if|if
condition|(
name|data
operator|.
name|baseType
operator|==
literal|1
operator|&&
operator|!
operator|(
name|data
operator|.
name|ref
operator|.
name|equals
argument_list|(
name|FileChunkReference
operator|.
name|nil
argument_list|()
argument_list|)
operator|)
condition|)
block|{
name|document
operator|.
name|setAssocGuidToRef
argument_list|(
name|data
operator|.
name|gosid
argument_list|,
name|data
operator|.
name|ref
argument_list|)
expr_stmt|;
name|OneNotePtr
name|content
init|=
operator|new
name|OneNotePtr
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|content
operator|.
name|reposition
argument_list|(
name|data
operator|.
name|ref
argument_list|)
expr_stmt|;
if|if
condition|(
name|data
operator|.
name|hasGctxid
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"{}gctxid {}"
argument_list|,
name|getIndent
argument_list|()
argument_list|,
name|data
operator|.
name|gctxid
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
operator|!
name|data
operator|.
name|gosid
operator|.
name|equals
argument_list|(
name|ExtendedGUID
operator|.
name|nil
argument_list|()
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Non base type == 1 guid {}"
argument_list|,
name|data
operator|.
name|gosid
argument_list|)
expr_stmt|;
block|}
operator|--
name|indentLevel
expr_stmt|;
if|if
condition|(
name|data
operator|.
name|gosid
operator|.
name|equals
argument_list|(
name|ExtendedGUID
operator|.
name|nil
argument_list|()
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"{}End Node {} ({}) - Offset={}, End={}"
argument_list|,
name|getIndent
argument_list|()
argument_list|,
name|FndStructureConstants
operator|.
name|nameOf
argument_list|(
name|data
operator|.
name|id
argument_list|)
argument_list|,
operator|(
name|int
operator|)
name|data
operator|.
name|id
argument_list|,
name|offset
argument_list|,
name|end
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"{}End Node {} ({}) {}:[{}] - Offset={}, End={}"
argument_list|,
name|getIndent
argument_list|()
argument_list|,
name|FndStructureConstants
operator|.
name|nameOf
argument_list|(
name|data
operator|.
name|id
argument_list|)
argument_list|,
operator|(
name|int
operator|)
name|data
operator|.
name|id
argument_list|,
name|data
operator|.
name|idDesc
argument_list|,
name|data
operator|.
name|gosid
argument_list|,
name|offset
argument_list|,
name|end
argument_list|)
expr_stmt|;
block|}
return|return
name|data
return|;
block|}
specifier|private
name|void
name|deserializeBytes
parameter_list|(
name|ByteBuffer
name|byteBuffer
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|dif
operator|.
name|position
argument_list|()
operator|!=
name|offset
condition|)
block|{
name|dif
operator|.
name|position
argument_list|(
name|offset
argument_list|)
expr_stmt|;
block|}
name|dif
operator|.
name|read
argument_list|(
name|byteBuffer
argument_list|)
expr_stmt|;
name|offset
operator|=
name|dif
operator|.
name|position
argument_list|()
expr_stmt|;
block|}
specifier|private
name|ObjectDeclarationWithRefCountBody
name|deserializeObjectDeclarationWithRefCountBody
parameter_list|()
throws|throws
name|IOException
throws|,
name|TikaException
block|{
name|ObjectDeclarationWithRefCountBody
name|data
init|=
operator|new
name|ObjectDeclarationWithRefCountBody
argument_list|()
decl_stmt|;
name|data
operator|.
name|oid
operator|=
name|deserializeCompactID
argument_list|()
expr_stmt|;
name|long
name|jci_odcs_etc
init|=
name|deserializeLittleEndianInt
argument_list|()
decl_stmt|;
name|long
name|reserved
init|=
name|deserializeLittleEndianShort
argument_list|()
decl_stmt|;
name|data
operator|.
name|jcid
operator|.
name|index
operator|=
name|jci_odcs_etc
operator|&
literal|0x3ffL
expr_stmt|;
name|long
name|must_be_zero
init|=
operator|(
name|jci_odcs_etc
operator|>>
literal|10
operator|)
operator|&
literal|0xf
decl_stmt|;
name|long
name|must_be_zeroA
init|=
operator|(
operator|(
name|jci_odcs_etc
operator|>>
literal|14
operator|)
operator|&
literal|0x3
operator|)
decl_stmt|;
name|data
operator|.
name|fHasOidReferences
operator|=
operator|(
operator|(
name|jci_odcs_etc
operator|>>
literal|16
operator|)
operator|&
literal|0x1
operator|)
operator|!=
literal|0
expr_stmt|;
name|data
operator|.
name|hasOsidReferences
operator|=
operator|(
operator|(
name|jci_odcs_etc
operator|>>
literal|17
operator|)
operator|&
literal|0x1
operator|)
operator|!=
literal|0
expr_stmt|;
if|if
condition|(
name|jci_odcs_etc
operator|>>
literal|18L
operator|>
literal|0
condition|)
block|{
throw|throw
operator|new
name|TikaException
argument_list|(
literal|"RESERVED_NONZERO"
argument_list|)
throw|;
block|}
if|if
condition|(
name|reserved
operator|!=
literal|0
operator|||
name|must_be_zeroA
operator|!=
literal|0
operator|||
name|must_be_zero
operator|!=
literal|0
condition|)
block|{
throw|throw
operator|new
name|TikaException
argument_list|(
literal|"RESERVED_NONZERO"
argument_list|)
throw|;
block|}
return|return
name|data
return|;
block|}
specifier|private
name|ObjectDeclarationWithRefCountBody
name|deserializeObjectDeclaration2Body
parameter_list|()
throws|throws
name|IOException
throws|,
name|TikaException
block|{
name|ObjectDeclarationWithRefCountBody
name|data
init|=
operator|new
name|ObjectDeclarationWithRefCountBody
argument_list|()
decl_stmt|;
name|data
operator|.
name|oid
operator|=
name|deserializeCompactID
argument_list|()
expr_stmt|;
name|long
name|jcid
init|=
name|deserializeLittleEndianInt
argument_list|()
decl_stmt|;
name|data
operator|.
name|jcid
operator|.
name|loadFrom32BitIndex
argument_list|(
name|jcid
argument_list|)
expr_stmt|;
name|long
name|hasRefs
init|=
name|deserializeLittleEndianChar
argument_list|()
decl_stmt|;
name|data
operator|.
name|fHasOidReferences
operator|=
operator|(
name|hasRefs
operator|&
literal|0x1
operator|)
operator|!=
literal|0
expr_stmt|;
name|data
operator|.
name|hasOsidReferences
operator|=
operator|(
name|hasRefs
operator|&
literal|0x2
operator|)
operator|!=
literal|0
expr_stmt|;
return|return
name|data
return|;
block|}
comment|/**      * The FileDataStoreObject structure specifies the data for a file data object.      *      * @return      * @throws IOException      */
specifier|private
name|FileDataStoreObject
name|deserializeFileDataStoreObject
parameter_list|()
throws|throws
name|IOException
throws|,
name|TikaException
block|{
name|FileDataStoreObject
name|data
init|=
operator|new
name|FileDataStoreObject
argument_list|()
decl_stmt|;
name|GUID
name|header
init|=
name|deserializeGUID
argument_list|()
decl_stmt|;
comment|// TODO - the expected header is different per version of one note.
comment|//    if (!header.equals(FILE_DATA_STORE_OBJ_HEADER)) {
comment|//      throw new TikaException("Unexpected file data store object header: " + header);
comment|//    }
name|long
name|len
init|=
name|deserializeLittleEndianLong
argument_list|()
decl_stmt|;
name|long
name|unused
init|=
name|deserializeLittleEndianInt
argument_list|()
decl_stmt|;
name|long
name|reserved
init|=
name|deserializeLittleEndianLong
argument_list|()
decl_stmt|;
if|if
condition|(
name|offset
operator|+
name|len
operator|+
literal|16
operator|>
name|end
condition|)
block|{
throw|throw
operator|new
name|TikaException
argument_list|(
literal|"SEGV error"
argument_list|)
throw|;
block|}
if|if
condition|(
name|unused
operator|>
literal|0
operator|||
name|reserved
operator|>
literal|0
condition|)
block|{
throw|throw
operator|new
name|TikaException
argument_list|(
literal|"SEGV error"
argument_list|)
throw|;
block|}
name|data
operator|.
name|fileData
operator|.
name|stp
operator|=
name|offset
expr_stmt|;
name|data
operator|.
name|fileData
operator|.
name|cb
operator|=
name|len
expr_stmt|;
name|offset
operator|+=
name|len
expr_stmt|;
while|while
condition|(
operator|(
name|offset
operator|&
literal|0x7
operator|)
operator|>
literal|0
condition|)
block|{
comment|// Padding is added to the end of the FileData stream to ensure that it ends on an 8-byte boundary.
operator|++
name|offset
expr_stmt|;
block|}
name|GUID
name|footer
init|=
name|deserializeGUID
argument_list|()
decl_stmt|;
comment|// TODO - the expected footer is per version of one note.
comment|//    if (!footer.equals(FILE_DATA_STORE_OBJ_FOOTER)) {
comment|//      throw new TikaException("Unexpected file data store object footer: " + footer);
comment|//    }
return|return
name|data
return|;
block|}
specifier|private
name|ObjectInfoDependencyOverrideData
name|deserializeObjectInfoDependencyOverrideData
parameter_list|()
throws|throws
name|IOException
block|{
name|ObjectInfoDependencyOverrideData
name|objectInfoDependencyOverrideData
init|=
operator|new
name|ObjectInfoDependencyOverrideData
argument_list|()
decl_stmt|;
name|long
name|num_8bit_overrides
init|=
name|deserializeLittleEndianInt
argument_list|()
decl_stmt|;
name|long
name|num_32bit_overrides
init|=
name|deserializeLittleEndianInt
argument_list|()
decl_stmt|;
name|long
name|crc
init|=
name|deserializeLittleEndianInt
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|num_8bit_overrides
condition|;
operator|++
name|i
control|)
block|{
name|int
name|local
init|=
name|deserializeLittleEndianChar
argument_list|()
decl_stmt|;
name|objectInfoDependencyOverrideData
operator|.
name|overrides1
operator|.
name|add
argument_list|(
name|local
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|num_32bit_overrides
condition|;
operator|++
name|i
control|)
block|{
name|long
name|local
init|=
name|deserializeLittleEndianInt
argument_list|()
decl_stmt|;
name|objectInfoDependencyOverrideData
operator|.
name|overrides2
operator|.
name|add
argument_list|(
name|local
argument_list|)
expr_stmt|;
block|}
return|return
name|objectInfoDependencyOverrideData
return|;
block|}
specifier|private
name|CompactID
name|deserializeCompactID
parameter_list|()
throws|throws
name|IOException
throws|,
name|TikaException
block|{
name|CompactID
name|compactID
init|=
operator|new
name|CompactID
argument_list|()
decl_stmt|;
name|compactID
operator|.
name|n
operator|=
name|deserializeLittleEndianChar
argument_list|()
expr_stmt|;
name|compactID
operator|.
name|guidIndex
operator|=
name|deserializeInt24
argument_list|()
expr_stmt|;
name|compactID
operator|.
name|guid
operator|=
name|ExtendedGUID
operator|.
name|nil
argument_list|()
expr_stmt|;
name|compactID
operator|.
name|guid
operator|.
name|n
operator|=
name|compactID
operator|.
name|n
expr_stmt|;
name|long
name|index
init|=
name|compactID
operator|.
name|guidIndex
decl_stmt|;
name|Map
argument_list|<
name|Long
argument_list|,
name|GUID
argument_list|>
name|globalIdMap
init|=
name|document
operator|.
name|revisionMap
operator|.
name|get
argument_list|(
name|document
operator|.
name|currentRevision
argument_list|)
operator|.
name|globalId
decl_stmt|;
name|GUID
name|guid
init|=
name|globalIdMap
operator|.
name|get
argument_list|(
name|index
argument_list|)
decl_stmt|;
if|if
condition|(
name|guid
operator|!=
literal|null
condition|)
block|{
name|compactID
operator|.
name|guid
operator|.
name|guid
operator|=
name|guid
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|TikaException
argument_list|(
literal|"COMPACT ID MISSING"
argument_list|)
throw|;
block|}
return|return
name|compactID
return|;
block|}
specifier|private
name|long
name|deserializeInt24
parameter_list|()
throws|throws
name|IOException
block|{
name|int
name|b1
init|=
name|deserializeLittleEndianChar
argument_list|()
decl_stmt|;
name|int
name|b2
init|=
name|deserializeLittleEndianChar
argument_list|()
decl_stmt|;
name|int
name|b3
init|=
name|deserializeLittleEndianChar
argument_list|()
decl_stmt|;
return|return
operator|new
name|Int24
argument_list|(
name|b1
argument_list|,
name|b2
argument_list|,
name|b3
argument_list|)
operator|.
name|value
argument_list|()
return|;
block|}
specifier|private
name|ExtendedGUID
name|deserializeExtendedGUID
parameter_list|()
throws|throws
name|IOException
block|{
name|GUID
name|guid
init|=
name|deserializeGUID
argument_list|()
decl_stmt|;
name|long
name|n
init|=
name|deserializeLittleEndianInt
argument_list|()
decl_stmt|;
return|return
operator|new
name|ExtendedGUID
argument_list|(
name|guid
argument_list|,
name|n
argument_list|)
return|;
block|}
comment|/**      * Depending on stpFormat and cbFormat, will deserialize a FileChunkReference.      *      * @param stpFormat An unsigned integer that specifies the size and format of the      *                  FileNodeChunkReference.stp field specified by the fnd field if this FileNode structure has a      *                  value of the BaseType field equal to 1 or 2. MUST be ignored if the value of the BaseType field      *                  of this FileNode structure is equal to 0. The meaning of the StpFormat field is given by the      *                  following table.      *                  Value Meaning      *                  0 8 bytes, uncompressed.      *                  1 4 bytes, uncompressed.      *                  2 2 bytes, compressed.      *                  3 4 bytes, compressed.      *                  The value of an uncompressed file pointer specifies a location in the file. To uncompress a      *                  compressed file pointer, multiply the value by 8.      * @param cbFormat  An unsigned integer that specifies the size and format of the      *                  FileNodeChunkReference.cb field specified by the fnd field if this FileNode structure has a      *                  BaseType field value equal to 1 or 2. MUST be 0 and MUST be ignored if BaseType of this      *                  FileNode structure is equal to 0. The meaning of CbFormat is given by the following table.      *                  Value Meaning      *                  0 4 bytes, uncompressed.      *                  1 8 bytes, uncompressed.      *                  2 1 byte, compressed.      *                  3 2 bytes, compressed.      *                  The value of an uncompressed byte count specifies the size, in bytes, of the data referenced by a      *                  FileNodeChunkReference structure. To uncompress a compressed byte count,      *                  multiply the value by 8.      * @return      * @throws IOException      */
name|FileChunkReference
name|deserializeVarFileChunkReference
parameter_list|(
name|long
name|stpFormat
parameter_list|,
name|long
name|cbFormat
parameter_list|)
throws|throws
name|IOException
throws|,
name|TikaException
block|{
name|FileChunkReference
name|data
init|=
operator|new
name|FileChunkReference
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|long
name|local8
decl_stmt|;
name|long
name|local16
decl_stmt|;
name|long
name|local32
decl_stmt|;
switch|switch
condition|(
operator|new
name|Long
argument_list|(
name|stpFormat
argument_list|)
operator|.
name|intValue
argument_list|()
condition|)
block|{
case|case
literal|0
case|:
comment|// 8 bytes, uncompressed
name|data
operator|.
name|stp
operator|=
name|deserializeLittleEndianLong
argument_list|()
expr_stmt|;
break|break;
case|case
literal|1
case|:
name|local32
operator|=
name|deserializeLittleEndianInt
argument_list|()
expr_stmt|;
name|data
operator|.
name|stp
operator|=
name|local32
expr_stmt|;
break|break;
case|case
literal|2
case|:
name|local16
operator|=
name|deserializeLittleEndianShort
argument_list|()
expr_stmt|;
name|data
operator|.
name|stp
operator|=
name|local16
expr_stmt|;
name|data
operator|.
name|stp
operator|<<=
literal|3
expr_stmt|;
break|break;
case|case
literal|3
case|:
name|local32
operator|=
name|deserializeLittleEndianInt
argument_list|()
expr_stmt|;
name|data
operator|.
name|stp
operator|=
name|local32
expr_stmt|;
name|data
operator|.
name|stp
operator|<<=
literal|3
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|TikaException
argument_list|(
literal|"Unknown STP file node format "
operator|+
name|stpFormat
argument_list|)
throw|;
block|}
switch|switch
condition|(
operator|new
name|Long
argument_list|(
name|cbFormat
argument_list|)
operator|.
name|intValue
argument_list|()
condition|)
block|{
case|case
literal|0
case|:
comment|// 4 bytes, uncompressed
name|local32
operator|=
name|deserializeLittleEndianInt
argument_list|()
expr_stmt|;
name|data
operator|.
name|cb
operator|=
name|local32
expr_stmt|;
break|break;
case|case
literal|1
case|:
comment|// 8 bytes, uncompressed;
name|data
operator|.
name|cb
operator|=
name|deserializeLittleEndianLong
argument_list|()
expr_stmt|;
break|break;
case|case
literal|2
case|:
comment|// 1 byte, compressed
name|local8
operator|=
name|deserializeLittleEndianChar
argument_list|()
expr_stmt|;
name|data
operator|.
name|cb
operator|=
name|local8
expr_stmt|;
name|data
operator|.
name|cb
operator|<<=
literal|3
expr_stmt|;
break|break;
case|case
literal|3
case|:
comment|// 2 bytes, compressed
name|local16
operator|=
name|deserializeLittleEndianShort
argument_list|()
expr_stmt|;
name|data
operator|.
name|cb
operator|=
name|local16
expr_stmt|;
name|data
operator|.
name|cb
operator|<<=
literal|3
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|TikaException
argument_list|(
literal|"Unknown CB file node format "
operator|+
name|cbFormat
argument_list|)
throw|;
block|}
return|return
name|data
return|;
block|}
name|FileNodeListHeader
name|deserializeFileNodeListHeader
parameter_list|()
throws|throws
name|IOException
block|{
name|long
name|positionOfThisHeader
init|=
name|offset
decl_stmt|;
name|long
name|uintMagic
init|=
name|deserializeLittleEndianLong
argument_list|()
decl_stmt|;
name|long
name|fileNodeListId
init|=
name|deserializeLittleEndianInt
argument_list|()
decl_stmt|;
name|long
name|nFragmentSequence
init|=
name|deserializeLittleEndianInt
argument_list|()
decl_stmt|;
return|return
operator|new
name|FileNodeListHeader
argument_list|(
name|positionOfThisHeader
argument_list|,
name|uintMagic
argument_list|,
name|fileNodeListId
argument_list|,
name|nFragmentSequence
argument_list|)
return|;
block|}
comment|/**      * For an object declaration file node, after parsing all the fnd variables, now we will process      * the object declaration's contents.      *      * @param data   The FileNode containing all the fnd variable's data.      * @param curPtr The current pointer.      * @throws IOException      */
specifier|private
name|void
name|postprocessObjectDeclarationContents
parameter_list|(
name|FileNode
name|data
parameter_list|,
name|FileNodePtr
name|curPtr
parameter_list|)
throws|throws
name|IOException
throws|,
name|TikaException
block|{
name|data
operator|.
name|gosid
operator|=
name|data
operator|.
name|subType
operator|.
name|objectDeclarationWithRefCount
operator|.
name|body
operator|.
name|oid
operator|.
name|guid
expr_stmt|;
name|document
operator|.
name|guidToObject
operator|.
name|put
argument_list|(
name|data
operator|.
name|gosid
argument_list|,
operator|new
name|FileNodePtr
argument_list|(
name|curPtr
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|data
operator|.
name|subType
operator|.
name|objectDeclarationWithRefCount
operator|.
name|body
operator|.
name|jcid
operator|.
name|isObjectSpaceObjectPropSet
argument_list|()
condition|)
block|{
name|OneNotePtr
name|objectSpacePropSetPtr
init|=
operator|new
name|OneNotePtr
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|objectSpacePropSetPtr
operator|.
name|reposition
argument_list|(
name|data
operator|.
name|ref
argument_list|)
expr_stmt|;
name|data
operator|.
name|subType
operator|.
name|objectDeclarationWithRefCount
operator|.
name|objectRef
operator|=
name|objectSpacePropSetPtr
operator|.
name|deserializeObjectSpaceObjectPropSet
argument_list|()
expr_stmt|;
name|ObjectStreamCounters
name|streamCounters
init|=
operator|new
name|ObjectStreamCounters
argument_list|()
decl_stmt|;
name|data
operator|.
name|propertySet
operator|=
name|objectSpacePropSetPtr
operator|.
name|deserializePropertySet
argument_list|(
name|streamCounters
argument_list|,
name|data
operator|.
name|subType
operator|.
name|objectDeclarationWithRefCount
operator|.
name|objectRef
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
operator|!
name|data
operator|.
name|subType
operator|.
name|objectDeclarationWithRefCount
operator|.
name|body
operator|.
name|jcid
operator|.
name|isFileData
condition|)
block|{
throw|throw
operator|new
name|TikaException
argument_list|(
literal|"JCID must be file data when !isObjectSpaceObjectPropSet."
argument_list|)
throw|;
block|}
comment|// this is FileData
name|data
operator|.
name|isFileData
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|OneNotePtr
name|content
init|=
operator|new
name|OneNotePtr
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|content
operator|.
name|reposition
argument_list|(
name|data
operator|.
name|ref
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"{}Raw:"
argument_list|,
name|getIndent
argument_list|()
argument_list|)
expr_stmt|;
name|content
operator|.
name|dumpHex
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|""
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|PropertySet
name|deserializePropertySet
parameter_list|(
name|ObjectStreamCounters
name|counters
parameter_list|,
name|ObjectSpaceObjectPropSet
name|streams
parameter_list|)
throws|throws
name|IOException
throws|,
name|TikaException
block|{
name|PropertySet
name|data
init|=
operator|new
name|PropertySet
argument_list|()
decl_stmt|;
name|long
name|count
init|=
name|deserializeLittleEndianShort
argument_list|()
decl_stmt|;
name|data
operator|.
name|rgPridsData
operator|=
name|Stream
operator|.
name|generate
argument_list|(
name|PropertyValue
operator|::
operator|new
argument_list|)
operator|.
name|limit
argument_list|(
operator|(
name|int
operator|)
name|count
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
operator|++
name|i
control|)
block|{
name|data
operator|.
name|rgPridsData
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|propertyId
operator|=
name|deserializePropertyID
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"{}Property {}"
argument_list|,
name|getIndent
argument_list|()
argument_list|,
name|data
operator|.
name|rgPridsData
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|propertyId
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"{}{} elements in property set:"
argument_list|,
name|getIndent
argument_list|()
argument_list|,
name|count
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
operator|++
name|i
control|)
block|{
name|data
operator|.
name|rgPridsData
operator|.
name|set
argument_list|(
name|i
argument_list|,
name|deserializePropertyValueFromPropertyID
argument_list|(
name|data
operator|.
name|rgPridsData
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|propertyId
argument_list|,
name|streams
argument_list|,
name|counters
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|""
argument_list|)
expr_stmt|;
return|return
name|data
return|;
block|}
specifier|private
name|PropertyValue
name|deserializePropertyValueFromPropertyID
parameter_list|(
name|OneNotePropertyId
name|propertyID
parameter_list|,
name|ObjectSpaceObjectPropSet
name|streams
parameter_list|,
name|ObjectStreamCounters
name|counters
parameter_list|)
throws|throws
name|IOException
throws|,
name|TikaException
block|{
name|PropertyValue
name|data
init|=
operator|new
name|PropertyValue
argument_list|()
decl_stmt|;
name|data
operator|.
name|propertyId
operator|=
name|propertyID
expr_stmt|;
name|char
name|val8
decl_stmt|;
name|long
name|val16
decl_stmt|;
name|long
name|val32
init|=
literal|0
decl_stmt|;
name|long
name|val64
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"\n{}<{}"
argument_list|,
name|getIndent
argument_list|()
argument_list|,
name|propertyID
argument_list|)
expr_stmt|;
block|}
operator|++
name|indentLevel
expr_stmt|;
try|try
block|{
name|long
name|type
init|=
name|propertyID
operator|.
name|type
decl_stmt|;
switch|switch
condition|(
operator|(
name|int
operator|)
name|type
condition|)
block|{
case|case
literal|0x1
case|:
name|LOG
operator|.
name|debug
argument_list|(
literal|" [] "
argument_list|)
expr_stmt|;
return|return
name|data
return|;
case|case
literal|0x2
case|:
name|LOG
operator|.
name|debug
argument_list|(
literal|" PropertyID bool({})"
argument_list|,
name|propertyID
operator|.
name|inlineBool
argument_list|)
expr_stmt|;
name|data
operator|.
name|scalar
operator|=
name|propertyID
operator|.
name|inlineBool
condition|?
literal|1
else|:
literal|0
expr_stmt|;
return|return
name|data
return|;
case|case
literal|0x3
case|:
name|val8
operator|=
name|deserializeLittleEndianChar
argument_list|()
expr_stmt|;
name|data
operator|.
name|scalar
operator|=
name|val8
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|" PropertyID byte({})"
argument_list|,
name|data
operator|.
name|scalar
argument_list|)
expr_stmt|;
break|break;
case|case
literal|0x4
case|:
name|val16
operator|=
name|deserializeLittleEndianShort
argument_list|()
expr_stmt|;
name|data
operator|.
name|scalar
operator|=
name|val16
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|" uint16 PropertyID short({})"
argument_list|,
name|data
operator|.
name|scalar
argument_list|)
expr_stmt|;
break|break;
case|case
literal|0x5
case|:
name|val32
operator|=
name|deserializeLittleEndianInt
argument_list|()
expr_stmt|;
name|data
operator|.
name|scalar
operator|=
name|val32
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|" PropertyID int({})"
argument_list|,
name|data
operator|.
name|scalar
argument_list|)
expr_stmt|;
break|break;
case|case
literal|0x6
case|:
name|val64
operator|=
name|deserializeLittleEndianLong
argument_list|()
expr_stmt|;
name|data
operator|.
name|scalar
operator|=
name|val64
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|" PropertyID long({})"
argument_list|,
name|data
operator|.
name|scalar
argument_list|)
expr_stmt|;
break|break;
case|case
literal|0x7
case|:
comment|// If the value of the PropertyID.type element is "0x7" and the property specifies an array of elements, the value of
comment|// the
comment|// prtFourBytesOfLengthFollowedByData.cb element MUST be the sum of the sizes, in bytes, of each element in the array.
comment|// Exceptions include:
comment|// * The RgOutlineIndentDistance element, where the value of the prtFourBytesOfLengthFollowedByData.cb element
comment|// MUST be: 4 + (4 × RgOutlineIndentDistance.count).
comment|// * The TableColumnsLocked element, where the value of the prtFourBytesOfLengthFollowedByData.cb
comment|// element MUST be: 1 + (TableColumnsLocked.cColumns + 7) / 8.
comment|// * The TableColumnWidths element, where the value of the prtFourBytesOfLengthFollowedByData.cb
comment|// element MUST be: 1 + (4 × TableColumnWidths.cColumns).
name|val32
operator|=
name|deserializeLittleEndianInt
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|" raw data: ({})["
argument_list|,
name|val32
argument_list|)
expr_stmt|;
block|{
name|data
operator|.
name|rawData
operator|.
name|stp
operator|=
name|offset
expr_stmt|;
name|data
operator|.
name|rawData
operator|.
name|cb
operator|=
literal|0
expr_stmt|;
if|if
condition|(
name|offset
operator|+
name|val32
operator|>
name|end
condition|)
block|{
name|data
operator|.
name|rawData
operator|.
name|cb
operator|=
name|end
operator|-
name|offset
expr_stmt|;
name|offset
operator|=
name|end
expr_stmt|;
throw|throw
operator|new
name|TikaException
argument_list|(
literal|"Offset is past end of file."
argument_list|)
throw|;
block|}
name|data
operator|.
name|rawData
operator|.
name|cb
operator|=
name|val32
expr_stmt|;
name|offset
operator|+=
name|val32
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|OneNotePtr
name|content
init|=
operator|new
name|OneNotePtr
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|content
operator|.
name|reposition
argument_list|(
name|data
operator|.
name|rawData
argument_list|)
expr_stmt|;
name|content
operator|.
name|dumpHex
argument_list|()
expr_stmt|;
block|}
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"]"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|0x9
case|:
case|case
literal|0xb
case|:
case|case
literal|0xd
case|:
name|val32
operator|=
name|deserializeLittleEndianInt
argument_list|()
expr_stmt|;
comment|// fallthrough
case|case
literal|0x8
case|:
case|case
literal|0xa
case|:
case|case
literal|0xc
case|:
if|if
condition|(
name|type
operator|==
literal|0x8
operator|||
name|type
operator|==
literal|0xa
operator|||
name|type
operator|==
literal|0xc
condition|)
block|{
name|val32
operator|=
literal|1
expr_stmt|;
block|}
block|{
name|List
argument_list|<
name|CompactID
argument_list|>
name|stream
init|=
name|streams
operator|.
name|contextIDs
operator|.
name|data
decl_stmt|;
name|String
name|xtype
init|=
literal|"contextID"
decl_stmt|;
name|long
name|s_count
init|=
name|counters
operator|.
name|context_ids_count
decl_stmt|;
if|if
condition|(
name|type
operator|==
literal|0x8
operator|||
name|type
operator|==
literal|0x9
condition|)
block|{
name|stream
operator|=
name|streams
operator|.
name|oids
operator|.
name|data
expr_stmt|;
name|s_count
operator|=
name|counters
operator|.
name|oids_count
expr_stmt|;
name|xtype
operator|=
literal|"OIDs"
expr_stmt|;
block|}
if|if
condition|(
name|type
operator|==
literal|0xa
operator|||
name|type
operator|==
literal|0xb
condition|)
block|{
name|stream
operator|=
name|streams
operator|.
name|osids
operator|.
name|data
expr_stmt|;
name|s_count
operator|=
name|counters
operator|.
name|osids_count
expr_stmt|;
name|xtype
operator|=
literal|"OSIDS"
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|val32
condition|;
operator|++
name|i
operator|,
operator|++
name|s_count
control|)
block|{
name|int
name|index
init|=
operator|(
name|int
operator|)
name|s_count
decl_stmt|;
if|if
condition|(
name|index
operator|<
name|stream
operator|.
name|size
argument_list|()
condition|)
block|{
name|data
operator|.
name|compactIDs
operator|.
name|add
argument_list|(
name|stream
operator|.
name|get
argument_list|(
name|index
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|" {}[{}]"
argument_list|,
name|xtype
argument_list|,
name|data
operator|.
name|compactIDs
operator|.
name|get
argument_list|(
name|data
operator|.
name|compactIDs
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|TikaException
argument_list|(
literal|"SEGV"
argument_list|)
throw|;
block|}
block|}
block|}
break|break;
case|case
literal|0x10
case|:
name|val32
operator|=
name|deserializeLittleEndianInt
argument_list|()
expr_stmt|;
block|{
name|OneNotePropertyId
name|propId
init|=
name|deserializePropertyID
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|" UnifiedSubPropertySet {} {}"
argument_list|,
name|val32
argument_list|,
name|propId
argument_list|)
expr_stmt|;
name|data
operator|.
name|propertySet
operator|.
name|rgPridsData
operator|=
name|Stream
operator|.
name|generate
argument_list|(
name|PropertyValue
operator|::
operator|new
argument_list|)
operator|.
name|limit
argument_list|(
operator|(
name|int
operator|)
name|val32
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|val32
condition|;
operator|++
name|i
control|)
block|{
try|try
block|{
name|data
operator|.
name|propertySet
operator|.
name|rgPridsData
operator|.
name|set
argument_list|(
name|i
argument_list|,
name|deserializePropertyValueFromPropertyID
argument_list|(
name|propId
argument_list|,
name|streams
argument_list|,
name|counters
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
return|return
name|data
return|;
block|}
block|}
block|}
break|break;
case|case
literal|0x11
case|:
name|LOG
operator|.
name|debug
argument_list|(
literal|" SubPropertySet"
argument_list|)
expr_stmt|;
name|data
operator|.
name|propertySet
operator|=
name|deserializePropertySet
argument_list|(
name|counters
argument_list|,
name|streams
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|TikaException
argument_list|(
literal|"Invalid type: "
operator|+
name|type
argument_list|)
throw|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|">"
argument_list|)
expr_stmt|;
return|return
name|data
return|;
block|}
finally|finally
block|{
operator|--
name|indentLevel
expr_stmt|;
block|}
block|}
specifier|private
name|OneNotePropertyId
name|deserializePropertyID
parameter_list|()
throws|throws
name|IOException
block|{
name|long
name|pid
init|=
name|deserializeLittleEndianInt
argument_list|()
decl_stmt|;
return|return
operator|new
name|OneNotePropertyId
argument_list|(
name|pid
argument_list|)
return|;
block|}
specifier|private
name|ObjectSpaceObjectPropSet
name|deserializeObjectSpaceObjectPropSet
parameter_list|()
throws|throws
name|IOException
throws|,
name|TikaException
block|{
name|ObjectSpaceObjectPropSet
name|data
init|=
operator|new
name|ObjectSpaceObjectPropSet
argument_list|()
decl_stmt|;
name|data
operator|.
name|osids
operator|.
name|extendedStreamsPresent
operator|=
literal|0
expr_stmt|;
name|data
operator|.
name|osids
operator|.
name|osidsStreamNotPresent
operator|=
literal|1
expr_stmt|;
name|data
operator|.
name|contextIDs
operator|.
name|extendedStreamsPresent
operator|=
literal|0
expr_stmt|;
name|data
operator|.
name|contextIDs
operator|.
name|osidsStreamNotPresent
operator|=
literal|0
expr_stmt|;
comment|//uint64_t cur_offset = offset;
comment|//LOG.debug("starting deserialization %lx(%lx) / %lx", offset, offset - cur_offset, end);
name|data
operator|.
name|oids
operator|=
name|deserializeObjectSpaceObjectStreamOfOIDsOSIDsOrContextIDs
argument_list|()
expr_stmt|;
comment|//LOG.debug("mid deserialization %lx(%lx) / %lx", offset, offset - cur_offset, end);
if|if
condition|(
name|data
operator|.
name|oids
operator|.
name|osidsStreamNotPresent
operator|==
literal|0
condition|)
block|{
name|data
operator|.
name|osids
operator|=
name|deserializeObjectSpaceObjectStreamOfOIDsOSIDsOrContextIDs
argument_list|()
expr_stmt|;
block|}
comment|//LOG.debug("lat deserialization %lx(%lx) / %lx", offset, offset - cur_offset, end);
if|if
condition|(
name|data
operator|.
name|oids
operator|.
name|extendedStreamsPresent
operator|!=
literal|0
condition|)
block|{
name|data
operator|.
name|contextIDs
operator|=
name|deserializeObjectSpaceObjectStreamOfOIDsOSIDsOrContextIDs
argument_list|()
expr_stmt|;
block|}
return|return
name|data
return|;
block|}
specifier|private
name|ObjectSpaceObjectStreamOfOIDsOSIDsOrContextIDs
name|deserializeObjectSpaceObjectStreamOfOIDsOSIDsOrContextIDs
parameter_list|()
throws|throws
name|IOException
throws|,
name|TikaException
block|{
name|ObjectSpaceObjectStreamOfOIDsOSIDsOrContextIDs
name|data
init|=
operator|new
name|ObjectSpaceObjectStreamOfOIDsOSIDsOrContextIDs
argument_list|()
decl_stmt|;
name|long
name|header
init|=
name|deserializeLittleEndianInt
argument_list|()
decl_stmt|;
name|data
operator|.
name|count
operator|=
name|header
operator|&
literal|0xffffff
expr_stmt|;
name|data
operator|.
name|osidsStreamNotPresent
operator|=
operator|(
operator|(
name|header
operator|>>
literal|31
operator|)
operator|&
literal|0x1
operator|)
expr_stmt|;
name|data
operator|.
name|extendedStreamsPresent
operator|=
operator|(
operator|(
name|header
operator|>>
literal|30
operator|)
operator|&
literal|0x1
operator|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"{}Deserialized Stream Header count: {} OsidsNotPresent {} Extended {}"
argument_list|,
name|getIndent
argument_list|()
argument_list|,
name|data
operator|.
name|count
argument_list|,
name|data
operator|.
name|osidsStreamNotPresent
argument_list|,
name|data
operator|.
name|extendedStreamsPresent
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|data
operator|.
name|count
condition|;
operator|++
name|i
control|)
block|{
name|CompactID
name|cid
decl_stmt|;
name|cid
operator|=
name|deserializeCompactID
argument_list|()
expr_stmt|;
name|data
operator|.
name|data
operator|.
name|add
argument_list|(
name|cid
argument_list|)
expr_stmt|;
block|}
return|return
name|data
return|;
block|}
name|long
name|roomLeft
parameter_list|()
block|{
return|return
name|end
operator|-
name|offset
return|;
block|}
specifier|public
name|void
name|dumpHex
parameter_list|()
throws|throws
name|TikaMemoryLimitException
throws|,
name|IOException
block|{
if|if
condition|(
name|end
operator|-
name|offset
operator|>
name|dif
operator|.
name|size
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|TikaMemoryLimitException
argument_list|(
literal|"Exceeded memory limit when trying to dumpHex - "
operator|+
operator|(
name|end
operator|-
name|offset
operator|)
operator|+
literal|"> "
operator|+
name|dif
operator|.
name|size
argument_list|()
argument_list|)
throw|;
block|}
name|ByteBuffer
name|byteBuffer
init|=
name|ByteBuffer
operator|.
name|allocate
argument_list|(
call|(
name|int
call|)
argument_list|(
name|end
operator|-
name|offset
argument_list|)
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
name|Hex
operator|.
name|encodeHexString
argument_list|(
name|byteBuffer
operator|.
name|array
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
call|(
name|int
call|)
argument_list|(
name|end
operator|-
name|offset
argument_list|)
return|;
block|}
block|}
end_class

end_unit

