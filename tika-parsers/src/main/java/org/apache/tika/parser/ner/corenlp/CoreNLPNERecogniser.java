begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|ner
operator|.
name|corenlp
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|ner
operator|.
name|NERecogniser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|json
operator|.
name|JSONException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|json
operator|.
name|JSONObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  *  This class offers an implementation of {@link NERecogniser} based on  *  CRF classifiers from Stanford CoreNLP. This NER requires additional setup,  *  due to runtime binding to Stanford CoreNLP.  *  See<a href="http://wiki.apache.org/tika/TikaAndNER#CoreNLP">  *      Tika NER Wiki</a> for configuring this recogniser.  *  @see NERecogniser  *  */
end_comment

begin_class
specifier|public
class|class
name|CoreNLPNERecogniser
implements|implements
name|NERecogniser
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|CoreNLPNERecogniser
operator|.
name|class
argument_list|)
decl_stmt|;
comment|//default model paths
specifier|public
specifier|static
specifier|final
name|String
name|NER_3CLASS_MODEL
init|=
literal|"edu/stanford/nlp/models/ner/english.all.3class.distsim.crf.ser.gz"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|NER_4CLASS_MODEL
init|=
literal|"edu/stanford/nlp/models/ner/english.conll.4class.distsim.crf.ser.gz"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|NER_7CLASS_MODEL
init|=
literal|"edu/stanford/nlp/models/ner/english.muc.7class.distsim.crf.ser.gz"
decl_stmt|;
comment|/**      * default Model path      */
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_MODEL_PATH
init|=
name|NER_7CLASS_MODEL
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|MODEL_PROP_NAME
init|=
literal|"ner.corenlp.model"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|ENTITY_TYPES
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
block|{
block|{
name|add
parameter_list|(
name|PERSON
parameter_list|)
constructor_decl|;
name|add
parameter_list|(
name|TIME
parameter_list|)
constructor_decl|;
name|add
parameter_list|(
name|LOCATION
parameter_list|)
constructor_decl|;
name|add
parameter_list|(
name|ORGANIZATION
parameter_list|)
constructor_decl|;
name|add
parameter_list|(
name|MONEY
parameter_list|)
constructor_decl|;
name|add
parameter_list|(
name|PERCENT
parameter_list|)
constructor_decl|;
name|add
parameter_list|(
name|DATE
parameter_list|)
constructor_decl|;
block|}
block|}
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|CLASSIFIER_CLASS_NAME
init|=
literal|"edu.stanford.nlp.ie.crf.CRFClassifier"
decl_stmt|;
specifier|private
name|boolean
name|available
init|=
literal|false
decl_stmt|;
specifier|private
name|Field
name|firstField
decl_stmt|;
specifier|private
name|Field
name|secondField
decl_stmt|;
specifier|private
name|Field
name|thirdField
decl_stmt|;
specifier|private
name|Object
name|classifierInstance
decl_stmt|;
specifier|private
name|Method
name|classifyMethod
decl_stmt|;
specifier|public
name|CoreNLPNERecogniser
parameter_list|()
block|{
name|this
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
name|MODEL_PROP_NAME
argument_list|,
name|DEFAULT_MODEL_PATH
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Creates a NERecogniser by loading model from given path      * @param modelPath path to NER model file      */
specifier|public
name|CoreNLPNERecogniser
parameter_list|(
name|String
name|modelPath
parameter_list|)
block|{
try|try
block|{
name|Properties
name|props
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|Class
argument_list|<
name|?
argument_list|>
name|classifierClass
init|=
name|Class
operator|.
name|forName
argument_list|(
name|CLASSIFIER_CLASS_NAME
argument_list|)
decl_stmt|;
name|Method
name|loadMethod
init|=
name|classifierClass
operator|.
name|getMethod
argument_list|(
literal|"getClassifier"
argument_list|,
name|String
operator|.
name|class
argument_list|,
name|Properties
operator|.
name|class
argument_list|)
decl_stmt|;
name|classifierInstance
operator|=
name|loadMethod
operator|.
name|invoke
argument_list|(
name|classifierClass
argument_list|,
name|modelPath
argument_list|,
name|props
argument_list|)
expr_stmt|;
name|classifyMethod
operator|=
name|classifierClass
operator|.
name|getMethod
argument_list|(
literal|"classifyToCharacterOffsets"
argument_list|,
name|String
operator|.
name|class
argument_list|)
expr_stmt|;
comment|//these fields are for accessing result
name|Class
argument_list|<
name|?
argument_list|>
name|tripleClass
init|=
name|Class
operator|.
name|forName
argument_list|(
literal|"edu.stanford.nlp.util.Triple"
argument_list|)
decl_stmt|;
name|this
operator|.
name|firstField
operator|=
name|tripleClass
operator|.
name|getField
argument_list|(
literal|"first"
argument_list|)
expr_stmt|;
name|this
operator|.
name|secondField
operator|=
name|tripleClass
operator|.
name|getField
argument_list|(
literal|"second"
argument_list|)
expr_stmt|;
name|this
operator|.
name|thirdField
operator|=
name|tripleClass
operator|.
name|getField
argument_list|(
literal|"third"
argument_list|)
expr_stmt|;
name|this
operator|.
name|available
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"{} while trying to load the model from {}"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|modelPath
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Available for service ? {}"
argument_list|,
name|available
argument_list|)
expr_stmt|;
block|}
comment|/**      *      * @return {@code true} if model was available, valid and was able to initialise the classifier.      * returns {@code false} when this recogniser is not available for service.      */
specifier|public
name|boolean
name|isAvailable
parameter_list|()
block|{
return|return
name|available
return|;
block|}
comment|/**      * Gets set of entity types recognised by this recogniser      * @return set of entity classes/types      */
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|getEntityTypes
parameter_list|()
block|{
return|return
name|ENTITY_TYPES
return|;
block|}
comment|/**      * recognises names of entities in the text      * @param text text which possibly contains names      * @return map of entity type -> set of names      */
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|recognise
parameter_list|(
name|String
name|text
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|names
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
try|try
block|{
name|Object
name|result
init|=
name|classifyMethod
operator|.
name|invoke
argument_list|(
name|classifierInstance
argument_list|,
name|text
argument_list|)
decl_stmt|;
name|List
name|entries
init|=
operator|(
name|List
operator|)
name|result
decl_stmt|;
for|for
control|(
name|Object
name|entry
range|:
name|entries
control|)
block|{
name|String
name|entityType
init|=
operator|(
name|String
operator|)
name|firstField
operator|.
name|get
argument_list|(
name|entry
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|names
operator|.
name|containsKey
argument_list|(
name|entityType
argument_list|)
condition|)
block|{
name|names
operator|.
name|put
argument_list|(
name|entityType
argument_list|,
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Integer
name|start
init|=
operator|(
name|Integer
operator|)
name|secondField
operator|.
name|get
argument_list|(
name|entry
argument_list|)
decl_stmt|;
name|Integer
name|end
init|=
operator|(
name|Integer
operator|)
name|thirdField
operator|.
name|get
argument_list|(
name|entry
argument_list|)
decl_stmt|;
name|String
name|name
init|=
name|text
operator|.
name|substring
argument_list|(
name|start
argument_list|,
name|end
argument_list|)
decl_stmt|;
comment|//Clean repeating spaces, replace line breaks and tabs with single space
name|name
operator|=
name|name
operator|.
name|trim
argument_list|()
operator|.
name|replaceAll
argument_list|(
literal|"(\\s\\s+)|\n|\t"
argument_list|,
literal|" "
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|name
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|names
operator|.
name|get
argument_list|(
name|entityType
argument_list|)
operator|.
name|add
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
name|names
return|;
block|}
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|IOException
throws|,
name|JSONException
block|{
if|if
condition|(
name|args
operator|.
name|length
operator|!=
literal|1
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Error: Invalid Args"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"This tool finds names inside text"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Usage:<path/to/text/file>"
argument_list|)
expr_stmt|;
return|return;
block|}
try|try
init|(
name|FileInputStream
name|stream
init|=
operator|new
name|FileInputStream
argument_list|(
name|args
index|[
literal|0
index|]
argument_list|)
init|)
block|{
name|String
name|text
init|=
name|IOUtils
operator|.
name|toString
argument_list|(
name|stream
argument_list|)
decl_stmt|;
name|CoreNLPNERecogniser
name|ner
init|=
operator|new
name|CoreNLPNERecogniser
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|names
init|=
name|ner
operator|.
name|recognise
argument_list|(
name|text
argument_list|)
decl_stmt|;
name|JSONObject
name|jNames
init|=
operator|new
name|JSONObject
argument_list|(
name|names
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|jNames
operator|.
name|toString
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

