begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|mp3
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|exception
operator|.
name|TikaException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|ContentHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_comment
comment|/**  * This is used to parse Lyrics3 tag information  *  from an MP3 file, if available.  * Handles lyrics tags of up to 10kb in size.  * Will process any ID3v1 tag data if present.  * Ignores extended ID3v1 data in the lyrics block  *  * @see<a href="http://www.id3.org/Lyrics3v2">Lyrics3 v2.0 specification</a>  */
end_comment

begin_class
specifier|public
class|class
name|LyricsHandler
block|{
name|boolean
name|foundLyrics
init|=
literal|false
decl_stmt|;
name|String
name|lyricsText
init|=
literal|null
decl_stmt|;
name|ID3v1Handler
name|id3v1
init|=
literal|null
decl_stmt|;
specifier|public
name|LyricsHandler
parameter_list|(
name|InputStream
name|stream
parameter_list|,
name|ContentHandler
name|handler
parameter_list|)
throws|throws
name|IOException
throws|,
name|SAXException
throws|,
name|TikaException
block|{
name|this
argument_list|(
name|getSuffix
argument_list|(
name|stream
argument_list|,
literal|10240
operator|+
literal|128
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Looks for the Lyrics data, which will be      *  just before the ID3v1 data (if present),      *  and process it.      * Also sets things up for the ID3v1      *  processing if required.      * Creates from the last 128 bytes of a stream.      */
specifier|protected
name|LyricsHandler
parameter_list|(
name|byte
index|[]
name|tagData
parameter_list|)
throws|throws
name|IOException
throws|,
name|SAXException
throws|,
name|TikaException
block|{
if|if
condition|(
name|tagData
operator|.
name|length
operator|<
literal|128
condition|)
block|{
return|return;
block|}
comment|// Is there ID3v1 data?
name|byte
index|[]
name|last128
init|=
operator|new
name|byte
index|[
literal|128
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|tagData
argument_list|,
name|tagData
operator|.
name|length
operator|-
literal|128
argument_list|,
name|last128
argument_list|,
literal|0
argument_list|,
literal|128
argument_list|)
expr_stmt|;
name|id3v1
operator|=
operator|new
name|ID3v1Handler
argument_list|(
name|last128
argument_list|)
expr_stmt|;
if|if
condition|(
name|tagData
operator|.
name|length
operator|<
literal|137
condition|)
block|{
return|return;
block|}
comment|// Are there lyrics? Look for the closing Lyrics tag
comment|//  at the end to decide if there is any
name|int
name|lookat
init|=
name|tagData
operator|.
name|length
operator|-
literal|9
decl_stmt|;
if|if
condition|(
name|id3v1
operator|.
name|found
condition|)
block|{
name|lookat
operator|-=
literal|128
expr_stmt|;
block|}
if|if
condition|(
name|tagData
index|[
name|lookat
operator|+
literal|0
index|]
operator|==
literal|'L'
operator|&&
name|tagData
index|[
name|lookat
operator|+
literal|1
index|]
operator|==
literal|'Y'
operator|&&
name|tagData
index|[
name|lookat
operator|+
literal|2
index|]
operator|==
literal|'R'
operator|&&
name|tagData
index|[
name|lookat
operator|+
literal|3
index|]
operator|==
literal|'I'
operator|&&
name|tagData
index|[
name|lookat
operator|+
literal|4
index|]
operator|==
literal|'C'
operator|&&
name|tagData
index|[
name|lookat
operator|+
literal|5
index|]
operator|==
literal|'S'
operator|&&
name|tagData
index|[
name|lookat
operator|+
literal|6
index|]
operator|==
literal|'2'
operator|&&
name|tagData
index|[
name|lookat
operator|+
literal|7
index|]
operator|==
literal|'0'
operator|&&
name|tagData
index|[
name|lookat
operator|+
literal|8
index|]
operator|==
literal|'0'
condition|)
block|{
name|foundLyrics
operator|=
literal|true
expr_stmt|;
comment|// The length (6 bytes) comes just before LYRICS200, and is the
comment|//  size including the LYRICSBEGIN but excluding the
comment|//  length+LYRICS200 at the end.
name|int
name|length
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
operator|new
name|String
argument_list|(
name|tagData
argument_list|,
name|lookat
operator|-
literal|6
argument_list|,
literal|6
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|lyrics
init|=
operator|new
name|String
argument_list|(
name|tagData
argument_list|,
name|lookat
operator|-
name|length
operator|+
literal|5
argument_list|,
name|length
operator|-
literal|11
argument_list|,
literal|"ASCII"
argument_list|)
decl_stmt|;
comment|// Tags are a 3 letter code, 5 digit length, then data
name|int
name|pos
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|pos
operator|<
name|lyrics
operator|.
name|length
argument_list|()
operator|-
literal|8
condition|)
block|{
name|String
name|tagName
init|=
name|lyrics
operator|.
name|substring
argument_list|(
name|pos
argument_list|,
name|pos
operator|+
literal|3
argument_list|)
decl_stmt|;
name|int
name|tagLen
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|lyrics
operator|.
name|substring
argument_list|(
name|pos
operator|+
literal|3
argument_list|,
name|pos
operator|+
literal|8
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|startPos
init|=
name|pos
operator|+
literal|8
decl_stmt|;
name|int
name|endPos
init|=
name|startPos
operator|+
name|tagLen
decl_stmt|;
if|if
condition|(
name|tagName
operator|.
name|equals
argument_list|(
literal|"LYR"
argument_list|)
condition|)
block|{
name|lyricsText
operator|=
name|lyrics
operator|.
name|substring
argument_list|(
name|startPos
argument_list|,
name|endPos
argument_list|)
expr_stmt|;
block|}
name|pos
operator|=
name|endPos
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|boolean
name|hasID3v1
parameter_list|()
block|{
if|if
condition|(
name|id3v1
operator|==
literal|null
operator|||
name|id3v1
operator|.
name|found
operator|==
literal|false
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
specifier|public
name|boolean
name|hasLyrics
parameter_list|()
block|{
return|return
name|lyricsText
operator|!=
literal|null
operator|&&
name|lyricsText
operator|.
name|length
argument_list|()
operator|>
literal|0
return|;
block|}
comment|/**      * Reads and returns the last<code>length</code> bytes from the      * given stream.      * @param stream input stream      * @param length number of bytes from the end to read and return      * @return stream the<code>InputStream</code> to read from.      * @throws IOException if the stream could not be read from.      */
specifier|protected
specifier|static
name|byte
index|[]
name|getSuffix
parameter_list|(
name|InputStream
name|stream
parameter_list|,
name|int
name|length
parameter_list|)
throws|throws
name|IOException
block|{
name|byte
index|[]
name|buffer
init|=
operator|new
name|byte
index|[
literal|2
operator|*
name|length
index|]
decl_stmt|;
name|int
name|bytesInBuffer
init|=
literal|0
decl_stmt|;
name|int
name|n
init|=
name|stream
operator|.
name|read
argument_list|(
name|buffer
argument_list|)
decl_stmt|;
while|while
condition|(
name|n
operator|!=
operator|-
literal|1
condition|)
block|{
name|bytesInBuffer
operator|+=
name|n
expr_stmt|;
if|if
condition|(
name|bytesInBuffer
operator|==
name|buffer
operator|.
name|length
condition|)
block|{
name|System
operator|.
name|arraycopy
argument_list|(
name|buffer
argument_list|,
name|bytesInBuffer
operator|-
name|length
argument_list|,
name|buffer
argument_list|,
literal|0
argument_list|,
name|length
argument_list|)
expr_stmt|;
name|bytesInBuffer
operator|=
name|length
expr_stmt|;
block|}
name|n
operator|=
name|stream
operator|.
name|read
argument_list|(
name|buffer
argument_list|,
name|bytesInBuffer
argument_list|,
name|buffer
operator|.
name|length
operator|-
name|bytesInBuffer
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|bytesInBuffer
operator|<
name|length
condition|)
block|{
name|length
operator|=
name|bytesInBuffer
expr_stmt|;
block|}
name|byte
index|[]
name|result
init|=
operator|new
name|byte
index|[
name|length
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|buffer
argument_list|,
name|bytesInBuffer
operator|-
name|length
argument_list|,
name|result
argument_list|,
literal|0
argument_list|,
name|length
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
block|}
end_class

end_unit

