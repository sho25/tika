begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|chm
operator|.
name|core
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|chm
operator|.
name|accessor
operator|.
name|ChmLzxcResetTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|chm
operator|.
name|accessor
operator|.
name|DirectoryListingEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|chm
operator|.
name|assertion
operator|.
name|ChmAssert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|chm
operator|.
name|exception
operator|.
name|ChmParsingException
import|;
end_import

begin_class
specifier|public
class|class
name|ChmCommons
block|{
comment|/* Prevents initialization */
specifier|private
name|ChmCommons
parameter_list|()
block|{ 	}
specifier|public
specifier|static
name|void
name|assertByteArrayNotNull
parameter_list|(
name|byte
index|[]
name|data
parameter_list|)
block|{
if|if
condition|(
name|data
operator|==
literal|null
condition|)
throw|throw
operator|new
name|ChmParsingException
argument_list|(
literal|"byte[] is null"
argument_list|)
throw|;
block|}
comment|/** 	 * Represents entry types: uncompressed, compressed 	 */
specifier|public
enum|enum
name|EntryType
block|{
name|UNCOMPRESSED
block|,
name|COMPRESSED
block|}
comment|/** 	 * Represents lzx states: started decoding, not started decoding 	 */
specifier|public
enum|enum
name|LzxState
block|{
name|STARTED_DECODING
block|,
name|NOT_STARTED_DECODING
block|}
comment|/** 	 * Represents intel file states during decompression 	 */
specifier|public
enum|enum
name|IntelState
block|{
name|STARTED
block|,
name|NOT_STARTED
block|}
comment|/** 	 * Represents lzx block types in order to decompress differently 	 */
specifier|public
specifier|final
specifier|static
name|int
name|UNDEFINED
init|=
literal|0
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|int
name|VERBATIM
init|=
literal|1
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|int
name|ALIGNED_OFFSET
init|=
literal|2
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|int
name|UNCOMPRESSED
init|=
literal|3
decl_stmt|;
comment|/** 	 * LZX supports window sizes of 2^15 (32Kb) through 2^21 (2Mb) Returns X, 	 * i.e 2^X 	 *  	 * @param window 	 *            chmLzxControlData.getWindowSize() 	 *  	 * @return window size 	 */
specifier|public
specifier|static
name|int
name|getWindowSize
parameter_list|(
name|int
name|window
parameter_list|)
block|{
name|int
name|win
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|window
operator|>
literal|1
condition|)
block|{
name|window
operator|>>>=
literal|1
expr_stmt|;
name|win
operator|++
expr_stmt|;
block|}
return|return
name|win
return|;
block|}
specifier|public
specifier|static
name|byte
index|[]
name|getChmBlockSegment
parameter_list|(
name|byte
index|[]
name|data
parameter_list|,
name|ChmLzxcResetTable
name|resetTable
parameter_list|,
name|int
name|blockNumber
parameter_list|,
name|int
name|lzxcBlockOffset
parameter_list|,
name|int
name|lzxcBlockLength
parameter_list|)
block|{
name|ChmAssert
operator|.
name|assertChmBlockSegment
argument_list|(
name|data
argument_list|,
name|resetTable
argument_list|,
name|blockNumber
argument_list|,
name|lzxcBlockOffset
argument_list|,
name|lzxcBlockLength
argument_list|)
expr_stmt|;
name|int
name|blockLength
init|=
operator|-
literal|1
decl_stmt|;
comment|// TODO add int_max_value checking
if|if
condition|(
name|blockNumber
operator|<
operator|(
name|resetTable
operator|.
name|getBlockAddress
argument_list|()
operator|.
name|length
operator|-
literal|1
operator|)
condition|)
block|{
name|blockLength
operator|=
call|(
name|int
call|)
argument_list|(
name|resetTable
operator|.
name|getBlockAddress
argument_list|()
index|[
name|blockNumber
operator|+
literal|1
index|]
operator|-
name|resetTable
operator|.
name|getBlockAddress
argument_list|()
index|[
name|blockNumber
index|]
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|/* new code */
if|if
condition|(
name|blockNumber
operator|>=
name|resetTable
operator|.
name|getBlockAddress
argument_list|()
operator|.
name|length
condition|)
name|blockLength
operator|=
literal|0
expr_stmt|;
else|else
comment|/* end new code */
name|blockLength
operator|=
call|(
name|int
call|)
argument_list|(
name|lzxcBlockLength
operator|-
name|resetTable
operator|.
name|getBlockAddress
argument_list|()
index|[
name|blockNumber
index|]
argument_list|)
expr_stmt|;
block|}
name|byte
index|[]
name|t
init|=
name|Arrays
operator|.
name|copyOfRange
argument_list|(
name|data
argument_list|,
call|(
name|int
call|)
argument_list|(
name|lzxcBlockOffset
operator|+
name|resetTable
operator|.
name|getBlockAddress
argument_list|()
index|[
name|blockNumber
index|]
argument_list|)
argument_list|,
call|(
name|int
call|)
argument_list|(
name|lzxcBlockOffset
operator|+
name|resetTable
operator|.
name|getBlockAddress
argument_list|()
index|[
name|blockNumber
index|]
operator|+
name|blockLength
argument_list|)
argument_list|)
decl_stmt|;
return|return
operator|(
name|t
operator|!=
literal|null
operator|)
condition|?
name|t
else|:
operator|new
name|byte
index|[
literal|1
index|]
return|;
block|}
comment|/** 	 * Returns textual representation of LangID 	 *  	 * @param langID 	 *  	 * @return language name 	 */
specifier|public
specifier|static
name|String
name|getLanguage
parameter_list|(
name|long
name|langID
parameter_list|)
block|{
comment|/* Potential problem with casting */
switch|switch
condition|(
operator|(
name|int
operator|)
name|langID
condition|)
block|{
case|case
literal|1025
case|:
return|return
literal|"Arabic"
return|;
case|case
literal|1069
case|:
return|return
literal|"Basque"
return|;
case|case
literal|1027
case|:
return|return
literal|"Catalan"
return|;
case|case
literal|2052
case|:
return|return
literal|"Chinese (Simplified)"
return|;
case|case
literal|1028
case|:
return|return
literal|"Chinese (Traditional)"
return|;
case|case
literal|1029
case|:
return|return
literal|"Czech"
return|;
case|case
literal|1030
case|:
return|return
literal|"Danish"
return|;
case|case
literal|1043
case|:
return|return
literal|"Dutch"
return|;
case|case
literal|1033
case|:
return|return
literal|"English (United States)"
return|;
case|case
literal|1035
case|:
return|return
literal|"Finnish"
return|;
case|case
literal|1036
case|:
return|return
literal|"French"
return|;
case|case
literal|1031
case|:
return|return
literal|"German"
return|;
case|case
literal|1032
case|:
return|return
literal|"Greek"
return|;
case|case
literal|1037
case|:
return|return
literal|"Hebrew"
return|;
case|case
literal|1038
case|:
return|return
literal|"Hungarian"
return|;
case|case
literal|1040
case|:
return|return
literal|"Italian"
return|;
case|case
literal|1041
case|:
return|return
literal|"Japanese"
return|;
case|case
literal|1042
case|:
return|return
literal|"Korean"
return|;
case|case
literal|1044
case|:
return|return
literal|"Norwegian"
return|;
case|case
literal|1045
case|:
return|return
literal|"Polish"
return|;
case|case
literal|2070
case|:
return|return
literal|"Portuguese"
return|;
case|case
literal|1046
case|:
return|return
literal|"Portuguese (Brazil)"
return|;
case|case
literal|1049
case|:
return|return
literal|"Russian"
return|;
case|case
literal|1051
case|:
return|return
literal|"Slovakian"
return|;
case|case
literal|1060
case|:
return|return
literal|"Slovenian"
return|;
case|case
literal|3082
case|:
return|return
literal|"Spanish"
return|;
case|case
literal|1053
case|:
return|return
literal|"Swedish"
return|;
case|case
literal|1055
case|:
return|return
literal|"Turkish"
return|;
default|default:
return|return
literal|"unknown - http://msdn.microsoft.com/en-us/library/bb165625%28VS.80%29.aspx"
return|;
block|}
block|}
comment|/** 	 * Checks skippable patterns 	 *  	 * @param directoryListingEntry 	 *  	 * @return boolean 	 */
specifier|public
specifier|static
name|boolean
name|hasSkip
parameter_list|(
name|DirectoryListingEntry
name|directoryListingEntry
parameter_list|)
block|{
return|return
operator|(
name|directoryListingEntry
operator|.
name|getName
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"/$"
argument_list|)
operator|||
name|directoryListingEntry
operator|.
name|getName
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"/#"
argument_list|)
operator|||
name|directoryListingEntry
operator|.
name|getName
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"::"
argument_list|)
operator|)
condition|?
literal|true
else|:
literal|false
return|;
block|}
comment|/** 	 * Writes byte[][] to the file 	 *  	 * @param buffer 	 * @param fileToBeSaved 	 *            file name 	 */
specifier|public
specifier|static
name|void
name|writeFile
parameter_list|(
name|byte
index|[]
index|[]
name|buffer
parameter_list|,
name|String
name|fileToBeSaved
parameter_list|)
block|{
name|FileOutputStream
name|output
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|buffer
operator|!=
literal|null
operator|&&
name|fileToBeSaved
operator|!=
literal|null
operator|&&
operator|!
name|fileToBeSaved
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
try|try
block|{
name|output
operator|=
operator|new
name|FileOutputStream
argument_list|(
name|fileToBeSaved
argument_list|)
expr_stmt|;
if|if
condition|(
name|output
operator|!=
literal|null
condition|)
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|buffer
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|output
operator|.
name|write
argument_list|(
name|buffer
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"The "
operator|+
name|fileToBeSaved
operator|+
literal|" does not seem correct"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|output
operator|!=
literal|null
condition|)
try|try
block|{
name|output
operator|.
name|flush
argument_list|()
expr_stmt|;
name|output
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/** 	 * Reverses the order of given array 	 *  	 * @param array 	 */
specifier|public
specifier|static
name|void
name|reverse
parameter_list|(
name|byte
index|[]
name|array
parameter_list|)
block|{
if|if
condition|(
name|array
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|int
name|i
init|=
literal|0
decl_stmt|;
name|int
name|j
init|=
name|array
operator|.
name|length
operator|-
literal|1
decl_stmt|;
name|byte
name|tmp
decl_stmt|;
while|while
condition|(
name|j
operator|>
name|i
condition|)
block|{
name|tmp
operator|=
name|array
index|[
name|j
index|]
expr_stmt|;
name|array
index|[
name|j
index|]
operator|=
name|array
index|[
name|i
index|]
expr_stmt|;
name|array
index|[
name|i
index|]
operator|=
name|tmp
expr_stmt|;
name|j
operator|--
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
block|}
comment|/** 	 * Returns byte array Closes the InputStream 	 *  	 * @param is 	 *            InputStream of chm file 	 *  	 * @return byte array 	 *  	 * @throws IOException 	 */
specifier|public
specifier|static
name|byte
index|[]
name|toByteArray
parameter_list|(
name|InputStream
name|is
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|is
operator|!=
literal|null
condition|)
block|{
name|ByteArrayOutputStream
name|buffer
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|int
name|nRead
decl_stmt|;
name|byte
index|[]
name|data
init|=
operator|new
name|byte
index|[
literal|16384
index|]
decl_stmt|;
while|while
condition|(
operator|(
name|nRead
operator|=
name|is
operator|.
name|read
argument_list|(
name|data
argument_list|,
literal|0
argument_list|,
name|data
operator|.
name|length
argument_list|)
operator|)
operator|!=
operator|-
literal|1
condition|)
block|{
name|buffer
operator|.
name|write
argument_list|(
name|data
argument_list|,
literal|0
argument_list|,
name|nRead
argument_list|)
expr_stmt|;
block|}
name|buffer
operator|.
name|flush
argument_list|()
expr_stmt|;
try|try
block|{
name|is
operator|.
name|close
argument_list|()
expr_stmt|;
name|buffer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|buffer
operator|.
name|toByteArray
argument_list|()
return|;
block|}
else|else
throw|throw
operator|new
name|ChmParsingException
argument_list|(
literal|"InputStream is null"
argument_list|)
throw|;
block|}
comment|/** 	 * Returns an index of the reset table 	 *  	 * @param text 	 * @param pattern 	 * @return index of the reset table 	 */
specifier|public
specifier|static
specifier|final
name|int
name|indexOfResetTableBlock
parameter_list|(
name|byte
index|[]
name|text
parameter_list|,
name|byte
index|[]
name|pattern
parameter_list|)
block|{
return|return
operator|(
name|indexOf
argument_list|(
name|text
argument_list|,
name|pattern
argument_list|)
operator|)
operator|-
literal|4
return|;
block|}
comment|/** 	 * Searches some pattern in byte[] 	 *  	 * @param text 	 *            byte[] 	 * @param pattern 	 *            byte[] 	 * @return an index, if nothing found returns -1 	 */
specifier|public
specifier|static
name|int
name|indexOf
parameter_list|(
name|byte
index|[]
name|text
parameter_list|,
name|byte
index|[]
name|pattern
parameter_list|)
block|{
name|int
index|[]
name|next
init|=
literal|null
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|,
name|j
init|=
operator|-
literal|1
decl_stmt|;
comment|/* Preprocessing */
if|if
condition|(
name|pattern
operator|!=
literal|null
operator|&&
name|text
operator|!=
literal|null
condition|)
block|{
name|next
operator|=
operator|new
name|int
index|[
name|pattern
operator|.
name|length
index|]
expr_stmt|;
name|next
index|[
literal|0
index|]
operator|=
operator|-
literal|1
expr_stmt|;
block|}
else|else
throw|throw
operator|new
name|ChmParsingException
argument_list|(
literal|"pattern and/or text should not be null"
argument_list|)
throw|;
comment|/* Computes a failure function */
while|while
condition|(
name|i
operator|<
name|pattern
operator|.
name|length
operator|-
literal|1
condition|)
block|{
if|if
condition|(
name|j
operator|==
operator|-
literal|1
operator|||
name|pattern
index|[
name|i
index|]
operator|==
name|pattern
index|[
name|j
index|]
condition|)
block|{
name|i
operator|++
expr_stmt|;
name|j
operator|++
expr_stmt|;
if|if
condition|(
name|pattern
index|[
name|i
index|]
operator|!=
name|pattern
index|[
name|j
index|]
condition|)
name|next
index|[
name|i
index|]
operator|=
name|j
expr_stmt|;
else|else
name|next
index|[
name|i
index|]
operator|=
name|next
index|[
name|j
index|]
expr_stmt|;
block|}
else|else
name|j
operator|=
name|next
index|[
name|j
index|]
expr_stmt|;
block|}
comment|/* Reinitializes local variables */
name|i
operator|=
name|j
operator|=
literal|0
expr_stmt|;
comment|/* Matching */
while|while
condition|(
name|i
operator|<
name|text
operator|.
name|length
operator|&&
name|j
operator|<
name|pattern
operator|.
name|length
condition|)
block|{
if|if
condition|(
name|j
operator|==
operator|-
literal|1
operator|||
name|pattern
index|[
name|j
index|]
operator|==
name|text
index|[
name|i
index|]
condition|)
block|{
name|i
operator|++
expr_stmt|;
name|j
operator|++
expr_stmt|;
block|}
else|else
name|j
operator|=
name|next
index|[
name|j
index|]
expr_stmt|;
block|}
if|if
condition|(
name|j
operator|==
name|pattern
operator|.
name|length
condition|)
return|return
operator|(
name|i
operator|-
name|j
operator|)
return|;
comment|// match found at offset i - M
else|else
return|return
operator|-
literal|1
return|;
comment|// not found
block|}
comment|/** 	 * Searches for some pattern in the directory listing entry list 	 *  	 * @param list 	 * @param pattern 	 * @return an index, if nothing found returns -1 	 */
specifier|public
specifier|static
name|int
name|indexOf
parameter_list|(
name|List
argument_list|<
name|DirectoryListingEntry
argument_list|>
name|list
parameter_list|,
name|String
name|pattern
parameter_list|)
block|{
name|int
name|place
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|DirectoryListingEntry
argument_list|>
name|iterator
init|=
name|list
operator|.
name|iterator
argument_list|()
init|;
name|iterator
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|DirectoryListingEntry
name|directoryListingEntry
init|=
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|directoryListingEntry
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
name|pattern
argument_list|)
condition|)
block|{
return|return
name|place
return|;
block|}
else|else
operator|++
name|place
expr_stmt|;
block|}
return|return
operator|-
literal|1
return|;
comment|// not found
block|}
comment|/** 	 * @param args 	 */
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{ 	}
block|}
end_class

end_unit

