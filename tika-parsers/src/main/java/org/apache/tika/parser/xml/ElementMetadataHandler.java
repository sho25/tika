begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|xml
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|metadata
operator|.
name|Metadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|metadata
operator|.
name|Property
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|Attributes
import|;
end_import

begin_comment
comment|/**  * SAX event handler that maps the contents of an XML element into  * a metadata field.  *  * @since Apache Tika 0.10  */
end_comment

begin_class
specifier|public
class|class
name|ElementMetadataHandler
extends|extends
name|AbstractMetadataHandler
block|{
comment|/**      * Logger for this class      */
specifier|private
specifier|static
specifier|final
name|Log
name|logger
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|ElementMetadataHandler
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|LOCAL_NAME_RDF_BAG
init|=
literal|"Bag"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|LOCAL_NAME_RDF_LI
init|=
literal|"li"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|URI_RDF
init|=
literal|"http://www.w3.org/1999/02/22-rdf-syntax-ns#"
decl_stmt|;
specifier|private
specifier|final
name|String
name|uri
decl_stmt|;
specifier|private
specifier|final
name|String
name|localName
decl_stmt|;
specifier|private
specifier|final
name|Metadata
name|metadata
decl_stmt|;
specifier|private
specifier|final
name|String
name|name
decl_stmt|;
specifier|private
name|Property
name|targetProperty
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|allowDuplicateValues
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|allowEmptyValues
decl_stmt|;
comment|/**      * The buffer used to capture characters when inside a bag li element.      */
specifier|private
specifier|final
name|StringBuilder
name|bufferBagged
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
comment|/**      * The buffer used to capture characters inside standard elements.      */
specifier|private
specifier|final
name|StringBuilder
name|bufferBagless
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
comment|/**      * Whether or not the value was found in a standard element structure or inside a bag.      */
specifier|private
name|boolean
name|isBagless
init|=
literal|true
decl_stmt|;
specifier|private
name|int
name|matchLevel
init|=
literal|0
decl_stmt|;
specifier|private
name|int
name|parentMatchLevel
init|=
literal|0
decl_stmt|;
comment|/**      * Constructor for string metadata keys.      *      * @param uri the uri of the namespace of the element      * @param localName the local name of the element      * @param metadata the Tika metadata object to populate      * @param name the Tika metadata field key      */
specifier|public
name|ElementMetadataHandler
parameter_list|(
name|String
name|uri
parameter_list|,
name|String
name|localName
parameter_list|,
name|Metadata
name|metadata
parameter_list|,
name|String
name|name
parameter_list|)
block|{
name|super
argument_list|(
name|metadata
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|this
operator|.
name|uri
operator|=
name|uri
expr_stmt|;
name|this
operator|.
name|localName
operator|=
name|localName
expr_stmt|;
name|this
operator|.
name|metadata
operator|=
name|metadata
expr_stmt|;
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|allowDuplicateValues
operator|=
literal|false
expr_stmt|;
name|this
operator|.
name|allowEmptyValues
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|logger
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|logger
operator|.
name|trace
argument_list|(
literal|"created simple handler for "
operator|+
name|this
operator|.
name|name
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Constructor for string metadata keys which allows change of behavior      * for duplicate and empty entry values.      *      * @param uri the uri of the namespace of the element      * @param localName the local name of the element      * @param metadata the Tika metadata object to populate      * @param name the Tika metadata field key      * @param allowDuplicateValues add duplicate values to the Tika metadata      * @param allowEmptyValues add empty values to the Tika metadata      */
specifier|public
name|ElementMetadataHandler
parameter_list|(
name|String
name|uri
parameter_list|,
name|String
name|localName
parameter_list|,
name|Metadata
name|metadata
parameter_list|,
name|String
name|name
parameter_list|,
name|boolean
name|allowDuplicateValues
parameter_list|,
name|boolean
name|allowEmptyValues
parameter_list|)
block|{
name|super
argument_list|(
name|metadata
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|this
operator|.
name|uri
operator|=
name|uri
expr_stmt|;
name|this
operator|.
name|localName
operator|=
name|localName
expr_stmt|;
name|this
operator|.
name|metadata
operator|=
name|metadata
expr_stmt|;
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|allowDuplicateValues
operator|=
name|allowDuplicateValues
expr_stmt|;
name|this
operator|.
name|allowEmptyValues
operator|=
name|allowEmptyValues
expr_stmt|;
if|if
condition|(
name|logger
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|logger
operator|.
name|trace
argument_list|(
literal|"created simple handler for "
operator|+
name|this
operator|.
name|name
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Constructor for Property metadata keys.      *      * @param uri the uri of the namespace of the element      * @param localName the local name of the element      * @param metadata the Tika metadata object to populate      * @param targetProperty the Tika metadata Property key      */
specifier|public
name|ElementMetadataHandler
parameter_list|(
name|String
name|uri
parameter_list|,
name|String
name|localName
parameter_list|,
name|Metadata
name|metadata
parameter_list|,
name|Property
name|targetProperty
parameter_list|)
block|{
name|super
argument_list|(
name|metadata
argument_list|,
name|targetProperty
argument_list|)
expr_stmt|;
name|this
operator|.
name|uri
operator|=
name|uri
expr_stmt|;
name|this
operator|.
name|localName
operator|=
name|localName
expr_stmt|;
name|this
operator|.
name|metadata
operator|=
name|metadata
expr_stmt|;
name|this
operator|.
name|targetProperty
operator|=
name|targetProperty
expr_stmt|;
name|this
operator|.
name|name
operator|=
name|targetProperty
operator|.
name|getName
argument_list|()
expr_stmt|;
name|this
operator|.
name|allowDuplicateValues
operator|=
literal|false
expr_stmt|;
name|this
operator|.
name|allowEmptyValues
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|logger
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|logger
operator|.
name|trace
argument_list|(
literal|"created property handler for "
operator|+
name|this
operator|.
name|name
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Constructor for Property metadata keys which allows change of behavior      * for duplicate and empty entry values.      *      * @param uri the uri of the namespace of the element      * @param localName the local name of the element      * @param metadata the Tika metadata object to populate      * @param targetProperty the Tika metadata Property key      * @param allowDuplicateValues add duplicate values to the Tika metadata      * @param allowEmptyValues add empty values to the Tika metadata      */
specifier|public
name|ElementMetadataHandler
parameter_list|(
name|String
name|uri
parameter_list|,
name|String
name|localName
parameter_list|,
name|Metadata
name|metadata
parameter_list|,
name|Property
name|targetProperty
parameter_list|,
name|boolean
name|allowDuplicateValues
parameter_list|,
name|boolean
name|allowEmptyValues
parameter_list|)
block|{
name|super
argument_list|(
name|metadata
argument_list|,
name|targetProperty
argument_list|)
expr_stmt|;
name|this
operator|.
name|uri
operator|=
name|uri
expr_stmt|;
name|this
operator|.
name|localName
operator|=
name|localName
expr_stmt|;
name|this
operator|.
name|metadata
operator|=
name|metadata
expr_stmt|;
name|this
operator|.
name|targetProperty
operator|=
name|targetProperty
expr_stmt|;
name|this
operator|.
name|name
operator|=
name|targetProperty
operator|.
name|getName
argument_list|()
expr_stmt|;
name|this
operator|.
name|allowDuplicateValues
operator|=
name|allowDuplicateValues
expr_stmt|;
name|this
operator|.
name|allowEmptyValues
operator|=
name|allowEmptyValues
expr_stmt|;
if|if
condition|(
name|logger
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|logger
operator|.
name|trace
argument_list|(
literal|"created property handler for "
operator|+
name|this
operator|.
name|name
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|boolean
name|isMatchingParentElement
parameter_list|(
name|String
name|uri
parameter_list|,
name|String
name|localName
parameter_list|)
block|{
return|return
operator|(
name|uri
operator|.
name|equals
argument_list|(
name|this
operator|.
name|uri
argument_list|)
operator|&&
name|localName
operator|.
name|equals
argument_list|(
name|this
operator|.
name|localName
argument_list|)
operator|)
return|;
block|}
specifier|protected
name|boolean
name|isMatchingElement
parameter_list|(
name|String
name|uri
parameter_list|,
name|String
name|localName
parameter_list|)
block|{
comment|// match if we're inside the parent element or within some bag element
return|return
operator|(
name|uri
operator|.
name|equals
argument_list|(
name|this
operator|.
name|uri
argument_list|)
operator|&&
name|localName
operator|.
name|equals
argument_list|(
name|this
operator|.
name|localName
argument_list|)
operator|)
operator|||
operator|(
name|parentMatchLevel
operator|>
literal|0
operator|&&
operator|(
operator|(
name|uri
operator|.
name|equals
argument_list|(
name|URI_RDF
argument_list|)
operator|&&
name|localName
operator|.
name|equals
argument_list|(
name|LOCAL_NAME_RDF_BAG
argument_list|)
operator|)
operator|||
operator|(
name|uri
operator|.
name|equals
argument_list|(
name|URI_RDF
argument_list|)
operator|&&
name|localName
operator|.
name|equals
argument_list|(
name|LOCAL_NAME_RDF_LI
argument_list|)
operator|)
operator|)
operator|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|startElement
parameter_list|(
name|String
name|uri
parameter_list|,
name|String
name|localName
parameter_list|,
name|String
name|name
parameter_list|,
name|Attributes
name|attributes
parameter_list|)
block|{
if|if
condition|(
name|isMatchingElement
argument_list|(
name|uri
argument_list|,
name|localName
argument_list|)
condition|)
block|{
name|matchLevel
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|isMatchingParentElement
argument_list|(
name|uri
argument_list|,
name|localName
argument_list|)
condition|)
block|{
name|parentMatchLevel
operator|++
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|endElement
parameter_list|(
name|String
name|uri
parameter_list|,
name|String
name|localName
parameter_list|,
name|String
name|name
parameter_list|)
block|{
if|if
condition|(
name|isMatchingParentElement
argument_list|(
name|uri
argument_list|,
name|localName
argument_list|)
condition|)
block|{
name|parentMatchLevel
operator|--
expr_stmt|;
block|}
if|if
condition|(
name|isMatchingElement
argument_list|(
name|uri
argument_list|,
name|localName
argument_list|)
condition|)
block|{
name|matchLevel
operator|--
expr_stmt|;
if|if
condition|(
name|matchLevel
operator|==
literal|2
condition|)
block|{
comment|// we're inside a bag li element, add the bagged buffer
name|addMetadata
argument_list|(
name|bufferBagged
operator|.
name|toString
argument_list|()
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
name|bufferBagged
operator|.
name|setLength
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|isBagless
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
name|matchLevel
operator|==
literal|0
operator|&&
name|isBagless
condition|)
block|{
name|String
name|valueBagless
init|=
name|bufferBagless
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
name|valueBagless
operator|.
name|length
argument_list|()
operator|>
literal|0
operator|&&
operator|!
name|valueBagless
operator|.
name|contains
argument_list|(
name|LOCAL_NAME_RDF_BAG
argument_list|)
condition|)
block|{
comment|// we're in a standard element, add the bagless buffer
name|addMetadata
argument_list|(
name|valueBagless
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
name|bufferBagless
operator|.
name|setLength
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
name|isBagless
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|characters
parameter_list|(
name|char
index|[]
name|ch
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|length
parameter_list|)
block|{
comment|// We need to append to both buffers since we don't if we're inside a bag until we're done
if|if
condition|(
name|parentMatchLevel
operator|>
literal|0
operator|&&
name|matchLevel
operator|>
literal|2
condition|)
block|{
name|bufferBagged
operator|.
name|append
argument_list|(
name|ch
argument_list|,
name|start
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|parentMatchLevel
operator|>
literal|0
operator|&&
name|matchLevel
operator|>
literal|0
condition|)
block|{
name|bufferBagless
operator|.
name|append
argument_list|(
name|ch
argument_list|,
name|start
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|ignorableWhitespace
parameter_list|(
name|char
index|[]
name|ch
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|length
parameter_list|)
block|{
name|characters
argument_list|(
name|ch
argument_list|,
name|start
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|addMetadata
parameter_list|(
name|String
name|value
parameter_list|)
block|{
if|if
condition|(
name|logger
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|logger
operator|.
name|trace
argument_list|(
literal|"adding "
operator|+
name|name
operator|+
literal|"="
operator|+
name|value
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|targetProperty
operator|!=
literal|null
operator|&&
name|targetProperty
operator|.
name|isMultiValuePermitted
argument_list|()
condition|)
block|{
if|if
condition|(
operator|(
name|value
operator|!=
literal|null
operator|&&
name|value
operator|.
name|length
argument_list|()
operator|>
literal|0
operator|)
operator|||
name|allowEmptyValues
condition|)
block|{
if|if
condition|(
name|value
operator|==
literal|null
operator|||
name|value
operator|.
name|length
argument_list|()
operator|==
literal|0
operator|&&
name|allowEmptyValues
condition|)
block|{
name|value
operator|=
literal|""
expr_stmt|;
block|}
name|String
index|[]
name|previous
init|=
name|metadata
operator|.
name|getValues
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|previous
operator|==
literal|null
operator|||
operator|!
name|Arrays
operator|.
name|asList
argument_list|(
name|previous
argument_list|)
operator|.
name|contains
argument_list|(
name|value
argument_list|)
operator|||
name|allowDuplicateValues
condition|)
block|{
name|metadata
operator|.
name|add
argument_list|(
name|targetProperty
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|super
operator|.
name|addMetadata
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

