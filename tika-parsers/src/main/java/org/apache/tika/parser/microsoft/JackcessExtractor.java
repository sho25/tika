begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|microsoft
package|;
end_package

begin_import
import|import static
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
operator|.
name|UTF_8
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigDecimal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|DateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|NumberFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|com
operator|.
name|healthmarketscience
operator|.
name|jackcess
operator|.
name|Column
import|;
end_import

begin_import
import|import
name|com
operator|.
name|healthmarketscience
operator|.
name|jackcess
operator|.
name|DataType
import|;
end_import

begin_import
import|import
name|com
operator|.
name|healthmarketscience
operator|.
name|jackcess
operator|.
name|Database
import|;
end_import

begin_import
import|import
name|com
operator|.
name|healthmarketscience
operator|.
name|jackcess
operator|.
name|PropertyMap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|healthmarketscience
operator|.
name|jackcess
operator|.
name|Row
import|;
end_import

begin_import
import|import
name|com
operator|.
name|healthmarketscience
operator|.
name|jackcess
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|com
operator|.
name|healthmarketscience
operator|.
name|jackcess
operator|.
name|query
operator|.
name|Query
import|;
end_import

begin_import
import|import
name|com
operator|.
name|healthmarketscience
operator|.
name|jackcess
operator|.
name|util
operator|.
name|OleBlob
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|poifs
operator|.
name|filesystem
operator|.
name|POIFSFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|exception
operator|.
name|TikaException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|extractor
operator|.
name|EmbeddedDocumentUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|io
operator|.
name|TikaInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|metadata
operator|.
name|Metadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|metadata
operator|.
name|OfficeOpenXMLExtended
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|metadata
operator|.
name|TikaCoreProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|ParseContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|Parser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|html
operator|.
name|HtmlParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|sax
operator|.
name|BodyContentHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|sax
operator|.
name|XHTMLContentHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_comment
comment|/**  * Internal class.  Needs to be instantiated for each parse because of  * the lack of thread safety with the dateTimeFormatter  */
end_comment

begin_class
class|class
name|JackcessExtractor
extends|extends
name|AbstractPOIFSExtractor
block|{
specifier|final
specifier|static
name|String
name|TITLE_PROP_KEY
init|=
literal|"Title"
decl_stmt|;
specifier|final
specifier|static
name|String
name|AUTHOR_PROP_KEY
init|=
literal|"Author"
decl_stmt|;
specifier|final
specifier|static
name|String
name|COMPANY_PROP_KEY
init|=
literal|"Company"
decl_stmt|;
specifier|final
specifier|static
name|String
name|TEXT_FORMAT_KEY
init|=
literal|"TextFormat"
decl_stmt|;
specifier|final
specifier|static
name|String
name|CURRENCY_FORMAT_KEY
init|=
literal|"Format"
decl_stmt|;
specifier|final
specifier|static
name|byte
name|TEXT_FORMAT
init|=
literal|0
decl_stmt|;
specifier|final
specifier|static
name|byte
name|RICH_TEXT_FORMAT
init|=
literal|1
decl_stmt|;
specifier|final
name|NumberFormat
name|currencyFormatter
decl_stmt|;
specifier|final
name|DateFormat
name|shortDateTimeFormatter
decl_stmt|;
specifier|final
name|Parser
name|htmlParser
decl_stmt|;
specifier|final
name|ParseContext
name|parseContext
decl_stmt|;
specifier|protected
name|JackcessExtractor
parameter_list|(
name|Metadata
name|metadata
parameter_list|,
name|ParseContext
name|context
parameter_list|,
name|Locale
name|locale
parameter_list|)
block|{
name|super
argument_list|(
name|context
argument_list|,
name|metadata
argument_list|)
expr_stmt|;
name|currencyFormatter
operator|=
name|NumberFormat
operator|.
name|getCurrencyInstance
argument_list|(
name|locale
argument_list|)
expr_stmt|;
name|shortDateTimeFormatter
operator|=
name|DateFormat
operator|.
name|getDateInstance
argument_list|(
name|DateFormat
operator|.
name|SHORT
argument_list|,
name|locale
argument_list|)
expr_stmt|;
name|this
operator|.
name|parseContext
operator|=
name|context
expr_stmt|;
name|Parser
name|tmpHtmlParser
init|=
name|EmbeddedDocumentUtil
operator|.
name|tryToFindExistingLeafParser
argument_list|(
name|HtmlParser
operator|.
name|class
argument_list|,
name|context
argument_list|)
decl_stmt|;
if|if
condition|(
name|tmpHtmlParser
operator|==
literal|null
condition|)
block|{
name|htmlParser
operator|=
operator|new
name|HtmlParser
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|htmlParser
operator|=
name|tmpHtmlParser
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|parse
parameter_list|(
name|Database
name|db
parameter_list|,
name|XHTMLContentHandler
name|xhtml
parameter_list|)
throws|throws
name|IOException
throws|,
name|SAXException
throws|,
name|TikaException
block|{
name|String
name|pw
init|=
name|db
operator|.
name|getDatabasePassword
argument_list|()
decl_stmt|;
if|if
condition|(
name|pw
operator|!=
literal|null
condition|)
block|{
name|parentMetadata
operator|.
name|set
argument_list|(
name|JackcessParser
operator|.
name|MDB_PW
argument_list|,
name|pw
argument_list|)
expr_stmt|;
block|}
name|PropertyMap
name|dbp
init|=
name|db
operator|.
name|getDatabaseProperties
argument_list|()
decl_stmt|;
for|for
control|(
name|PropertyMap
operator|.
name|Property
name|p
range|:
name|dbp
control|)
block|{
name|parentMetadata
operator|.
name|add
argument_list|(
name|JackcessParser
operator|.
name|MDB_PROPERTY_PREFIX
operator|+
name|p
operator|.
name|getName
argument_list|()
argument_list|,
name|toString
argument_list|(
name|p
operator|.
name|getValue
argument_list|()
argument_list|,
name|p
operator|.
name|getType
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|PropertyMap
name|up
init|=
name|db
operator|.
name|getUserDefinedProperties
argument_list|()
decl_stmt|;
for|for
control|(
name|PropertyMap
operator|.
name|Property
name|p
range|:
name|up
control|)
block|{
name|parentMetadata
operator|.
name|add
argument_list|(
name|JackcessParser
operator|.
name|USER_DEFINED_PROPERTY_PREFIX
operator|+
name|p
operator|.
name|getName
argument_list|()
argument_list|,
name|toString
argument_list|(
name|p
operator|.
name|getValue
argument_list|()
argument_list|,
name|p
operator|.
name|getType
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Set
argument_list|<
name|String
argument_list|>
name|found
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|PropertyMap
name|summaryProperties
init|=
name|db
operator|.
name|getSummaryProperties
argument_list|()
decl_stmt|;
if|if
condition|(
name|summaryProperties
operator|!=
literal|null
condition|)
block|{
comment|//try to get core properties
name|PropertyMap
operator|.
name|Property
name|title
init|=
name|summaryProperties
operator|.
name|get
argument_list|(
name|TITLE_PROP_KEY
argument_list|)
decl_stmt|;
if|if
condition|(
name|title
operator|!=
literal|null
condition|)
block|{
name|parentMetadata
operator|.
name|set
argument_list|(
name|TikaCoreProperties
operator|.
name|TITLE
argument_list|,
name|toString
argument_list|(
name|title
operator|.
name|getValue
argument_list|()
argument_list|,
name|title
operator|.
name|getType
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|found
operator|.
name|add
argument_list|(
name|title
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|PropertyMap
operator|.
name|Property
name|author
init|=
name|summaryProperties
operator|.
name|get
argument_list|(
name|AUTHOR_PROP_KEY
argument_list|)
decl_stmt|;
if|if
condition|(
name|author
operator|!=
literal|null
operator|&&
name|author
operator|.
name|getValue
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|String
name|authorString
init|=
name|toString
argument_list|(
name|author
operator|.
name|getValue
argument_list|()
argument_list|,
name|author
operator|.
name|getType
argument_list|()
argument_list|)
decl_stmt|;
name|SummaryExtractor
operator|.
name|addMulti
argument_list|(
name|parentMetadata
argument_list|,
name|TikaCoreProperties
operator|.
name|CREATOR
argument_list|,
name|authorString
argument_list|)
expr_stmt|;
name|found
operator|.
name|add
argument_list|(
name|author
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|PropertyMap
operator|.
name|Property
name|company
init|=
name|summaryProperties
operator|.
name|get
argument_list|(
name|COMPANY_PROP_KEY
argument_list|)
decl_stmt|;
if|if
condition|(
name|company
operator|!=
literal|null
condition|)
block|{
name|parentMetadata
operator|.
name|set
argument_list|(
name|OfficeOpenXMLExtended
operator|.
name|COMPANY
argument_list|,
name|toString
argument_list|(
name|company
operator|.
name|getValue
argument_list|()
argument_list|,
name|company
operator|.
name|getType
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|found
operator|.
name|add
argument_list|(
name|company
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|PropertyMap
operator|.
name|Property
name|p
range|:
name|db
operator|.
name|getSummaryProperties
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|found
operator|.
name|contains
argument_list|(
name|p
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|parentMetadata
operator|.
name|add
argument_list|(
name|JackcessParser
operator|.
name|SUMMARY_PROPERTY_PREFIX
operator|+
name|p
operator|.
name|getName
argument_list|()
argument_list|,
name|toString
argument_list|(
name|p
operator|.
name|getValue
argument_list|()
argument_list|,
name|p
operator|.
name|getType
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|Iterator
argument_list|<
name|Table
argument_list|>
name|it
init|=
name|db
operator|.
name|newIterable
argument_list|()
operator|.
name|setIncludeLinkedTables
argument_list|(
literal|false
argument_list|)
operator|.
name|setIncludeSystemTables
argument_list|(
literal|false
argument_list|)
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Table
name|table
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|tableName
init|=
name|table
operator|.
name|getName
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|?
extends|extends
name|Column
argument_list|>
name|columns
init|=
name|table
operator|.
name|getColumns
argument_list|()
decl_stmt|;
name|xhtml
operator|.
name|startElement
argument_list|(
literal|"table"
argument_list|,
literal|"name"
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
name|addHeaders
argument_list|(
name|columns
argument_list|,
name|xhtml
argument_list|)
expr_stmt|;
name|xhtml
operator|.
name|startElement
argument_list|(
literal|"tbody"
argument_list|)
expr_stmt|;
name|Row
name|r
init|=
name|table
operator|.
name|getNextRow
argument_list|()
decl_stmt|;
while|while
condition|(
name|r
operator|!=
literal|null
condition|)
block|{
name|xhtml
operator|.
name|startElement
argument_list|(
literal|"tr"
argument_list|)
expr_stmt|;
for|for
control|(
name|Column
name|c
range|:
name|columns
control|)
block|{
name|handleCell
argument_list|(
name|r
argument_list|,
name|c
argument_list|,
name|xhtml
argument_list|)
expr_stmt|;
block|}
name|xhtml
operator|.
name|endElement
argument_list|(
literal|"tr"
argument_list|)
expr_stmt|;
name|r
operator|=
name|table
operator|.
name|getNextRow
argument_list|()
expr_stmt|;
block|}
name|xhtml
operator|.
name|endElement
argument_list|(
literal|"tbody"
argument_list|)
expr_stmt|;
name|xhtml
operator|.
name|endElement
argument_list|(
literal|"table"
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Query
name|q
range|:
name|db
operator|.
name|getQueries
argument_list|()
control|)
block|{
name|xhtml
operator|.
name|startElement
argument_list|(
literal|"div"
argument_list|,
literal|"type"
argument_list|,
literal|"sqlQuery"
argument_list|)
expr_stmt|;
name|String
name|sqlString
init|=
literal|"unsupported query type"
decl_stmt|;
comment|//unknownqueryimpl can throw an UnsupportedOperationException
try|try
block|{
name|sqlString
operator|=
name|q
operator|.
name|toSQLString
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedOperationException
name|e
parameter_list|)
block|{
comment|//swallow
block|}
name|xhtml
operator|.
name|characters
argument_list|(
name|sqlString
argument_list|)
expr_stmt|;
name|xhtml
operator|.
name|endElement
argument_list|(
literal|"div"
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|addHeaders
parameter_list|(
name|List
argument_list|<
name|?
extends|extends
name|Column
argument_list|>
name|columns
parameter_list|,
name|XHTMLContentHandler
name|xhtml
parameter_list|)
throws|throws
name|SAXException
block|{
name|xhtml
operator|.
name|startElement
argument_list|(
literal|"thead"
argument_list|)
expr_stmt|;
name|xhtml
operator|.
name|startElement
argument_list|(
literal|"tr"
argument_list|)
expr_stmt|;
for|for
control|(
name|Column
name|c
range|:
name|columns
control|)
block|{
name|xhtml
operator|.
name|startElement
argument_list|(
literal|"th"
argument_list|)
expr_stmt|;
name|xhtml
operator|.
name|characters
argument_list|(
name|c
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|xhtml
operator|.
name|endElement
argument_list|(
literal|"th"
argument_list|)
expr_stmt|;
block|}
name|xhtml
operator|.
name|endElement
argument_list|(
literal|"tr"
argument_list|)
expr_stmt|;
name|xhtml
operator|.
name|endElement
argument_list|(
literal|"thead"
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|handleCell
parameter_list|(
name|Row
name|r
parameter_list|,
name|Column
name|c
parameter_list|,
name|XHTMLContentHandler
name|handler
parameter_list|)
throws|throws
name|SAXException
throws|,
name|IOException
throws|,
name|TikaException
block|{
name|handler
operator|.
name|startElement
argument_list|(
literal|"td"
argument_list|)
expr_stmt|;
if|if
condition|(
name|c
operator|.
name|getType
argument_list|()
operator|.
name|equals
argument_list|(
name|DataType
operator|.
name|OLE
argument_list|)
condition|)
block|{
name|handleOLE
argument_list|(
name|r
argument_list|,
name|c
operator|.
name|getName
argument_list|()
argument_list|,
name|handler
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|c
operator|.
name|getType
argument_list|()
operator|.
name|equals
argument_list|(
name|DataType
operator|.
name|BINARY
argument_list|)
condition|)
block|{
name|Object
name|obj
init|=
name|r
operator|.
name|get
argument_list|(
name|c
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|obj
operator|!=
literal|null
condition|)
block|{
name|byte
index|[]
name|bytes
init|=
operator|(
name|byte
index|[]
operator|)
name|obj
decl_stmt|;
name|handleEmbeddedResource
argument_list|(
name|TikaInputStream
operator|.
name|get
argument_list|(
name|bytes
argument_list|)
argument_list|,
literal|null
argument_list|,
comment|//filename
literal|null
argument_list|,
comment|//relationshipId
literal|null
argument_list|,
comment|//mediatype
name|handler
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|Object
name|obj
init|=
name|r
operator|.
name|get
argument_list|(
name|c
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|v
init|=
name|toString
argument_list|(
name|obj
argument_list|,
name|c
operator|.
name|getType
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|isRichText
argument_list|(
name|c
argument_list|)
condition|)
block|{
name|BodyContentHandler
name|h
init|=
operator|new
name|BodyContentHandler
argument_list|()
decl_stmt|;
name|Metadata
name|m
init|=
operator|new
name|Metadata
argument_list|()
decl_stmt|;
name|m
operator|.
name|set
argument_list|(
name|Metadata
operator|.
name|CONTENT_TYPE
argument_list|,
literal|"text/html; charset=UTF-8"
argument_list|)
expr_stmt|;
try|try
block|{
name|htmlParser
operator|.
name|parse
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|v
operator|.
name|getBytes
argument_list|(
name|UTF_8
argument_list|)
argument_list|)
argument_list|,
name|h
argument_list|,
name|m
argument_list|,
name|parseContext
argument_list|)
expr_stmt|;
name|handler
operator|.
name|characters
argument_list|(
name|h
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SAXException
name|e
parameter_list|)
block|{
comment|//if something went wrong in htmlparser, just append the characters
name|handler
operator|.
name|characters
argument_list|(
name|v
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|handler
operator|.
name|characters
argument_list|(
name|v
argument_list|)
expr_stmt|;
block|}
block|}
name|handler
operator|.
name|endElement
argument_list|(
literal|"td"
argument_list|)
expr_stmt|;
block|}
specifier|private
name|boolean
name|isRichText
parameter_list|(
name|Column
name|c
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|c
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
name|PropertyMap
name|m
init|=
name|c
operator|.
name|getProperties
argument_list|()
decl_stmt|;
if|if
condition|(
name|m
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|c
operator|.
name|getType
argument_list|()
operator|==
literal|null
operator|||
operator|!
name|c
operator|.
name|getType
argument_list|()
operator|.
name|equals
argument_list|(
name|DataType
operator|.
name|MEMO
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|Object
name|b
init|=
name|m
operator|.
name|getValue
argument_list|(
name|TEXT_FORMAT_KEY
argument_list|)
decl_stmt|;
if|if
condition|(
name|b
operator|instanceof
name|Byte
condition|)
block|{
if|if
condition|(
operator|(
operator|(
name|Byte
operator|)
name|b
operator|)
operator|.
name|byteValue
argument_list|()
operator|==
name|RICH_TEXT_FORMAT
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
specifier|private
name|String
name|toString
parameter_list|(
name|Object
name|value
parameter_list|,
name|DataType
name|type
parameter_list|)
block|{
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
return|return
literal|""
return|;
block|}
if|if
condition|(
name|type
operator|==
literal|null
condition|)
block|{
comment|//this shouldn't happen
return|return
name|value
operator|.
name|toString
argument_list|()
return|;
block|}
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|LONG
case|:
return|return
name|Integer
operator|.
name|toString
argument_list|(
operator|(
name|Integer
operator|)
name|value
argument_list|)
return|;
case|case
name|TEXT
case|:
return|return
operator|(
name|String
operator|)
name|value
return|;
case|case
name|MONEY
case|:
comment|//TODO: consider getting parsing "Format" field from
comment|//field properties.
return|return
name|formatCurrency
argument_list|(
operator|(
operator|(
name|BigDecimal
operator|)
name|value
operator|)
operator|.
name|doubleValue
argument_list|()
argument_list|,
name|type
argument_list|)
return|;
case|case
name|SHORT_DATE_TIME
case|:
return|return
name|formatShortDateTime
argument_list|(
operator|(
name|Date
operator|)
name|value
argument_list|)
return|;
case|case
name|BOOLEAN
case|:
return|return
name|Boolean
operator|.
name|toString
argument_list|(
operator|(
name|Boolean
operator|)
name|value
argument_list|)
return|;
case|case
name|MEMO
case|:
return|return
operator|(
name|String
operator|)
name|value
return|;
case|case
name|INT
case|:
return|return
name|Short
operator|.
name|toString
argument_list|(
operator|(
name|Short
operator|)
name|value
argument_list|)
return|;
case|case
name|DOUBLE
case|:
return|return
name|Double
operator|.
name|toString
argument_list|(
operator|(
name|Double
operator|)
name|value
argument_list|)
return|;
case|case
name|FLOAT
case|:
return|return
name|Float
operator|.
name|toString
argument_list|(
operator|(
name|Float
operator|)
name|value
argument_list|)
return|;
case|case
name|NUMERIC
case|:
return|return
name|value
operator|.
name|toString
argument_list|()
return|;
case|case
name|BYTE
case|:
return|return
name|Byte
operator|.
name|toString
argument_list|(
operator|(
name|Byte
operator|)
name|value
argument_list|)
return|;
case|case
name|GUID
case|:
return|return
name|value
operator|.
name|toString
argument_list|()
return|;
case|case
name|COMPLEX_TYPE
case|:
comment|//skip all these
case|case
name|UNKNOWN_0D
case|:
case|case
name|UNKNOWN_11
case|:
case|case
name|UNSUPPORTED_FIXEDLEN
case|:
case|case
name|UNSUPPORTED_VARLEN
case|:
default|default:
return|return
literal|""
return|;
block|}
block|}
specifier|private
name|void
name|handleOLE
parameter_list|(
name|Row
name|row
parameter_list|,
name|String
name|cName
parameter_list|,
name|XHTMLContentHandler
name|xhtml
parameter_list|)
throws|throws
name|IOException
throws|,
name|SAXException
throws|,
name|TikaException
block|{
name|OleBlob
name|blob
init|=
name|getBlob
argument_list|(
name|row
argument_list|,
name|cName
argument_list|)
decl_stmt|;
comment|//lifted shamelessly from Jackcess's OleBlobTest
if|if
condition|(
name|blob
operator|==
literal|null
condition|)
return|return;
name|OleBlob
operator|.
name|Content
name|content
init|=
name|blob
operator|.
name|getContent
argument_list|()
decl_stmt|;
if|if
condition|(
name|content
operator|==
literal|null
condition|)
return|return;
switch|switch
condition|(
name|content
operator|.
name|getType
argument_list|()
condition|)
block|{
case|case
name|LINK
case|:
name|xhtml
operator|.
name|characters
argument_list|(
operator|(
operator|(
name|OleBlob
operator|.
name|LinkContent
operator|)
name|content
operator|)
operator|.
name|getLinkPath
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|SIMPLE_PACKAGE
case|:
name|OleBlob
operator|.
name|SimplePackageContent
name|spc
init|=
operator|(
name|OleBlob
operator|.
name|SimplePackageContent
operator|)
name|content
decl_stmt|;
comment|//TODO: find test file that has this kind of attachment
comment|//and see if getFilePath or getLocalFilePath is meaningful
comment|//for TikaCoreProperties.ORIGINAL_RESOURCE_NAME
name|TikaInputStream
name|tis
init|=
literal|null
decl_stmt|;
try|try
block|{
name|tis
operator|=
name|TikaInputStream
operator|.
name|get
argument_list|(
name|spc
operator|.
name|getStream
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|EmbeddedDocumentUtil
operator|.
name|recordEmbeddedStreamException
argument_list|(
name|e
argument_list|,
name|parentMetadata
argument_list|)
expr_stmt|;
break|break;
block|}
if|if
condition|(
name|tis
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|handleEmbeddedResource
argument_list|(
name|tis
argument_list|,
name|spc
operator|.
name|getFileName
argument_list|()
argument_list|,
comment|//filename
literal|null
argument_list|,
comment|//relationshipId
name|spc
operator|.
name|getTypeName
argument_list|()
argument_list|,
comment|//mediatype
name|xhtml
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|closeQuietly
argument_list|(
name|tis
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
case|case
name|OTHER
case|:
name|OleBlob
operator|.
name|OtherContent
name|oc
init|=
operator|(
name|OleBlob
operator|.
name|OtherContent
operator|)
name|content
decl_stmt|;
name|TikaInputStream
name|ocStream
init|=
literal|null
decl_stmt|;
try|try
block|{
name|ocStream
operator|=
name|TikaInputStream
operator|.
name|get
argument_list|(
name|oc
operator|.
name|getStream
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|EmbeddedDocumentUtil
operator|.
name|recordException
argument_list|(
name|e
argument_list|,
name|parentMetadata
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|handleEmbeddedResource
argument_list|(
name|ocStream
argument_list|,
literal|null
argument_list|,
comment|//filename
literal|null
argument_list|,
comment|//relationshipId
name|oc
operator|.
name|getTypeName
argument_list|()
argument_list|,
comment|//mediatype
name|xhtml
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|closeQuietly
argument_list|(
name|ocStream
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|COMPOUND_STORAGE
case|:
name|OleBlob
operator|.
name|CompoundContent
name|cc
init|=
operator|(
name|OleBlob
operator|.
name|CompoundContent
operator|)
name|content
decl_stmt|;
name|handleCompoundContent
argument_list|(
name|cc
argument_list|,
name|xhtml
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
comment|/*        Temporary work around until POI 4.0.0 is released and jackcess upgrades        This is copy/pasted from jackcess     */
specifier|private
name|OleBlob
name|getBlob
parameter_list|(
name|Row
name|row
parameter_list|,
name|String
name|cName
parameter_list|)
block|{
name|byte
index|[]
name|bytes
init|=
name|row
operator|.
name|getBytes
argument_list|(
name|cName
argument_list|)
decl_stmt|;
if|if
condition|(
name|bytes
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|JackcessOleUtil
operator|.
name|parseBlob
argument_list|(
name|bytes
argument_list|)
return|;
block|}
specifier|private
name|void
name|handleCompoundContent
parameter_list|(
name|OleBlob
operator|.
name|CompoundContent
name|cc
parameter_list|,
name|XHTMLContentHandler
name|xhtml
parameter_list|)
throws|throws
name|IOException
throws|,
name|SAXException
throws|,
name|TikaException
block|{
name|InputStream
name|is
init|=
literal|null
decl_stmt|;
name|POIFSFileSystem
name|fileSystem
init|=
literal|null
decl_stmt|;
try|try
block|{
try|try
block|{
name|is
operator|=
name|cc
operator|.
name|getStream
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|EmbeddedDocumentUtil
operator|.
name|recordEmbeddedStreamException
argument_list|(
name|e
argument_list|,
name|parentMetadata
argument_list|)
expr_stmt|;
return|return;
block|}
try|try
block|{
name|fileSystem
operator|=
operator|new
name|POIFSFileSystem
argument_list|(
name|is
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|EmbeddedDocumentUtil
operator|.
name|recordEmbeddedStreamException
argument_list|(
name|e
argument_list|,
name|parentMetadata
argument_list|)
expr_stmt|;
return|return;
block|}
name|handleEmbeddedOfficeDoc
argument_list|(
name|fileSystem
operator|.
name|getRoot
argument_list|()
argument_list|,
name|xhtml
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|fileSystem
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|fileSystem
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|//swallow
block|}
block|}
if|if
condition|(
name|is
operator|!=
literal|null
condition|)
block|{
name|IOUtils
operator|.
name|closeQuietly
argument_list|(
name|is
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|String
name|formatCurrency
parameter_list|(
name|Double
name|d
parameter_list|,
name|DataType
name|type
parameter_list|)
block|{
if|if
condition|(
name|d
operator|==
literal|null
condition|)
block|{
return|return
literal|""
return|;
block|}
return|return
name|currencyFormatter
operator|.
name|format
argument_list|(
name|d
argument_list|)
return|;
block|}
name|String
name|formatShortDateTime
parameter_list|(
name|Date
name|d
parameter_list|)
block|{
if|if
condition|(
name|d
operator|==
literal|null
condition|)
block|{
return|return
literal|""
return|;
block|}
return|return
name|shortDateTimeFormatter
operator|.
name|format
argument_list|(
name|d
argument_list|)
return|;
block|}
block|}
end_class

end_unit

