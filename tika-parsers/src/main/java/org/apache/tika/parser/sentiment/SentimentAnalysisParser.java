begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|sentiment
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|opennlp
operator|.
name|tools
operator|.
name|sentiment
operator|.
name|SentimentME
import|;
end_import

begin_import
import|import
name|opennlp
operator|.
name|tools
operator|.
name|sentiment
operator|.
name|SentimentModel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|config
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|config
operator|.
name|Initializable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|config
operator|.
name|InitializableProblemHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|config
operator|.
name|Param
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|exception
operator|.
name|TikaConfigException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|exception
operator|.
name|TikaException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|metadata
operator|.
name|Metadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|mime
operator|.
name|MediaType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|AbstractParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|ParseContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|ContentHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_comment
comment|/**  * This parser classifies documents based on the sentiment of document.  * The classifier is powered by Apache OpenNLP's Maximum Entropy Classifier  */
end_comment

begin_class
specifier|public
class|class
name|SentimentAnalysisParser
extends|extends
name|AbstractParser
implements|implements
name|Initializable
block|{
specifier|private
specifier|static
specifier|final
name|Set
argument_list|<
name|MediaType
argument_list|>
name|SUPPORTED_TYPES
init|=
name|Collections
operator|.
name|singleton
argument_list|(
name|MediaType
operator|.
name|application
argument_list|(
literal|"sentiment"
argument_list|)
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|SentimentAnalysisParser
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|DEF_MODEL
init|=
literal|"https://raw.githubusercontent.com/USCDataScience/SentimentAnalysisParser/master/sentiment-models/en-netflix-sentiment.bin"
decl_stmt|;
specifier|private
name|SentimentME
name|classifier
decl_stmt|;
comment|/**      * Path to model path. Default is {@value DEF_MODEL}      *<p>      *<br/>      * The path could be one of the following:      *<ul>      *<li>a HTTP or HTTPS URL (Not recommended for production use since no caching is implemented)</li>      *<li>an absolute or relative path on local file system (recommended for production use in standalone mode)</li>      *<li>a relative path known to class loader (Especially useful in distributed environments,      * recommended for advanced users</li>      *</ul>      * Note: on conflict: the model from local file system gets the priority      * over classpath      */
annotation|@
name|Field
specifier|private
name|String
name|modelPath
init|=
name|DEF_MODEL
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|initialize
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Param
argument_list|>
name|params
parameter_list|)
throws|throws
name|TikaConfigException
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Initializing..."
argument_list|)
expr_stmt|;
if|if
condition|(
name|modelPath
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|TikaConfigException
argument_list|(
literal|"Parameter 'modelPath' is required but it is not set"
argument_list|)
throw|;
block|}
try|try
block|{
name|URL
name|resolvedUrl
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|modelPath
operator|.
name|startsWith
argument_list|(
literal|"http://"
argument_list|)
operator|||
name|modelPath
operator|.
name|startsWith
argument_list|(
literal|"https://"
argument_list|)
condition|)
block|{
name|resolvedUrl
operator|=
operator|new
name|URL
argument_list|(
name|modelPath
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|resolvedUrl
operator|=
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
operator|.
name|getResource
argument_list|(
name|modelPath
argument_list|)
expr_stmt|;
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|modelPath
argument_list|)
decl_stmt|;
if|if
condition|(
name|file
operator|.
name|exists
argument_list|()
condition|)
block|{
comment|// file on filesystem gets higher priority
name|resolvedUrl
operator|=
name|file
operator|.
name|toURI
argument_list|()
operator|.
name|toURL
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|resolvedUrl
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|TikaConfigException
argument_list|(
literal|"Model doesn't exists :"
operator|+
name|modelPath
argument_list|)
throw|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Sentiment Model is at {}"
argument_list|,
name|resolvedUrl
argument_list|)
expr_stmt|;
name|long
name|st
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|SentimentModel
name|model
init|=
operator|new
name|SentimentModel
argument_list|(
name|resolvedUrl
argument_list|)
decl_stmt|;
name|long
name|time
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|st
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"time taken to load model {}"
argument_list|,
name|time
argument_list|)
expr_stmt|;
name|classifier
operator|=
operator|new
name|SentimentME
argument_list|(
name|model
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to load sentiment model from {}"
operator|+
name|modelPath
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|TikaConfigException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|checkInitialization
parameter_list|(
name|InitializableProblemHandler
name|handler
parameter_list|)
throws|throws
name|TikaConfigException
block|{
comment|//TODO -- what do we want to check?
block|}
comment|/**      * Returns the types supported      *      * @param context the parse context      * @return the set of types supported      */
annotation|@
name|Override
specifier|public
name|Set
argument_list|<
name|MediaType
argument_list|>
name|getSupportedTypes
parameter_list|(
name|ParseContext
name|context
parameter_list|)
block|{
return|return
name|SUPPORTED_TYPES
return|;
block|}
comment|/**      * Performs the parse      *      * @param stream   the input      * @param handler  the content handler      * @param metadata the metadata passed      * @param context  the context for the parser      */
annotation|@
name|Override
specifier|public
name|void
name|parse
parameter_list|(
name|InputStream
name|stream
parameter_list|,
name|ContentHandler
name|handler
parameter_list|,
name|Metadata
name|metadata
parameter_list|,
name|ParseContext
name|context
parameter_list|)
throws|throws
name|IOException
throws|,
name|SAXException
throws|,
name|TikaException
block|{
if|if
condition|(
name|classifier
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|" is not configured properly."
argument_list|)
expr_stmt|;
return|return;
block|}
name|String
name|inputString
init|=
name|IOUtils
operator|.
name|toString
argument_list|(
name|stream
argument_list|,
literal|"UTF-8"
argument_list|)
decl_stmt|;
name|String
name|sentiment
init|=
name|classifier
operator|.
name|predict
argument_list|(
name|inputString
argument_list|)
decl_stmt|;
name|metadata
operator|.
name|add
argument_list|(
literal|"Sentiment"
argument_list|,
name|sentiment
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

