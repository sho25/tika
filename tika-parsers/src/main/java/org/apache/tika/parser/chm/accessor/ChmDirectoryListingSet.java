begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|chm
operator|.
name|accessor
package|;
end_package

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigInteger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|chm
operator|.
name|core
operator|.
name|ChmCommons
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|chm
operator|.
name|core
operator|.
name|ChmConstants
import|;
end_import

begin_comment
comment|/**  * Holds chm listing entries  */
end_comment

begin_class
specifier|public
class|class
name|ChmDirectoryListingSet
block|{
specifier|private
name|List
argument_list|<
name|DirectoryListingEntry
argument_list|>
name|dlel
decl_stmt|;
specifier|private
name|byte
index|[]
name|data
decl_stmt|;
specifier|private
name|int
name|placeHolder
init|=
operator|-
literal|1
decl_stmt|;
specifier|private
name|long
name|dataOffset
init|=
operator|-
literal|1
decl_stmt|;
specifier|private
name|int
name|controlDataIndex
init|=
operator|-
literal|1
decl_stmt|;
specifier|private
name|int
name|resetTableIndex
init|=
operator|-
literal|1
decl_stmt|;
specifier|private
name|boolean
name|isNotControlDataFound
init|=
literal|true
decl_stmt|;
specifier|private
name|boolean
name|isNotResetTableFound
init|=
literal|true
decl_stmt|;
comment|/**      * Constructs chm directory listing set      *       * @param data      *            byte[]      * @param chmItsHeader      * @param chmItspHeader      */
specifier|public
name|ChmDirectoryListingSet
parameter_list|(
name|byte
index|[]
name|data
parameter_list|,
name|ChmItsfHeader
name|chmItsHeader
parameter_list|,
name|ChmItspHeader
name|chmItspHeader
parameter_list|)
block|{
name|setDirectoryListingEntryList
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|DirectoryListingEntry
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|ChmCommons
operator|.
name|assertByteArrayNotNull
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|setData
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|enumerateChmDirectoryListingList
argument_list|(
name|chmItsHeader
argument_list|,
name|chmItspHeader
argument_list|)
expr_stmt|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"list:="
operator|+
name|getDirectoryListingEntryList
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
name|System
operator|.
name|getProperty
argument_list|(
literal|"line.separator"
argument_list|)
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"number of list items:="
operator|+
name|getDirectoryListingEntryList
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**      * Returns control data index that located in List      *       * @return control data index      */
specifier|public
name|int
name|getControlDataIndex
parameter_list|()
block|{
return|return
name|controlDataIndex
return|;
block|}
comment|/**      * Sets control data index      *       * @param controlDataIndex      */
specifier|protected
name|void
name|setControlDataIndex
parameter_list|(
name|int
name|controlDataIndex
parameter_list|)
block|{
name|this
operator|.
name|controlDataIndex
operator|=
name|controlDataIndex
expr_stmt|;
block|}
comment|/**      * Return index of reset table      *       * @return reset table index      */
specifier|public
name|int
name|getResetTableIndex
parameter_list|()
block|{
return|return
name|resetTableIndex
return|;
block|}
comment|/**      * Sets reset table index      *       * @param resetTableIndex      */
specifier|protected
name|void
name|setResetTableIndex
parameter_list|(
name|int
name|resetTableIndex
parameter_list|)
block|{
name|this
operator|.
name|resetTableIndex
operator|=
name|resetTableIndex
expr_stmt|;
block|}
comment|/**      * Gets place holder      *       * @return place holder      */
specifier|private
name|int
name|getPlaceHolder
parameter_list|()
block|{
return|return
name|placeHolder
return|;
block|}
comment|/**      * Sets place holder      *       * @param placeHolder      */
specifier|private
name|void
name|setPlaceHolder
parameter_list|(
name|int
name|placeHolder
parameter_list|)
block|{
name|this
operator|.
name|placeHolder
operator|=
name|placeHolder
expr_stmt|;
block|}
comment|/**      * Enumerates chm directory listing entries      *       * @param chmItsHeader      *            chm itsf header      * @param chmItspHeader      *            chm itsp header      */
specifier|private
name|void
name|enumerateChmDirectoryListingList
parameter_list|(
name|ChmItsfHeader
name|chmItsHeader
parameter_list|,
name|ChmItspHeader
name|chmItspHeader
parameter_list|)
block|{
try|try
block|{
name|int
name|startPmgl
init|=
name|chmItspHeader
operator|.
name|getIndex_head
argument_list|()
decl_stmt|;
name|int
name|stopPmgl
init|=
name|chmItspHeader
operator|.
name|getUnknown_0024
argument_list|()
decl_stmt|;
name|int
name|dir_offset
init|=
call|(
name|int
call|)
argument_list|(
name|chmItsHeader
operator|.
name|getDirOffset
argument_list|()
operator|+
name|chmItspHeader
operator|.
name|getHeader_len
argument_list|()
argument_list|)
decl_stmt|;
name|setDataOffset
argument_list|(
name|chmItsHeader
operator|.
name|getDataOffset
argument_list|()
argument_list|)
expr_stmt|;
comment|/* loops over all pmgls */
name|int
name|previous_index
init|=
literal|0
decl_stmt|;
name|byte
index|[]
name|dir_chunk
init|=
literal|null
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|startPmgl
init|;
name|i
operator|<=
name|stopPmgl
condition|;
name|i
operator|++
control|)
block|{
name|int
name|data_copied
init|=
operator|(
operator|(
literal|1
operator|+
name|i
operator|)
operator|*
operator|(
name|int
operator|)
name|chmItspHeader
operator|.
name|getBlock_len
argument_list|()
operator|)
operator|+
name|dir_offset
decl_stmt|;
if|if
condition|(
name|i
operator|==
literal|0
condition|)
block|{
name|dir_chunk
operator|=
operator|new
name|byte
index|[
operator|(
name|int
operator|)
name|chmItspHeader
operator|.
name|getBlock_len
argument_list|()
index|]
expr_stmt|;
comment|// dir_chunk = Arrays.copyOfRange(getData(), dir_offset,
comment|// (((1+i) * (int)chmItspHeader.getBlock_len()) +
comment|// dir_offset));
name|dir_chunk
operator|=
name|ChmCommons
operator|.
name|copyOfRange
argument_list|(
name|getData
argument_list|()
argument_list|,
name|dir_offset
argument_list|,
operator|(
operator|(
operator|(
literal|1
operator|+
name|i
operator|)
operator|*
operator|(
name|int
operator|)
name|chmItspHeader
operator|.
name|getBlock_len
argument_list|()
operator|)
operator|+
name|dir_offset
operator|)
argument_list|)
expr_stmt|;
name|previous_index
operator|=
name|data_copied
expr_stmt|;
block|}
else|else
block|{
name|dir_chunk
operator|=
operator|new
name|byte
index|[
operator|(
name|int
operator|)
name|chmItspHeader
operator|.
name|getBlock_len
argument_list|()
index|]
expr_stmt|;
comment|// dir_chunk = Arrays.copyOfRange(getData(), previous_index,
comment|// (((1+i) * (int)chmItspHeader.getBlock_len()) +
comment|// dir_offset));
name|dir_chunk
operator|=
name|ChmCommons
operator|.
name|copyOfRange
argument_list|(
name|getData
argument_list|()
argument_list|,
name|previous_index
argument_list|,
operator|(
operator|(
operator|(
literal|1
operator|+
name|i
operator|)
operator|*
operator|(
name|int
operator|)
name|chmItspHeader
operator|.
name|getBlock_len
argument_list|()
operator|)
operator|+
name|dir_offset
operator|)
argument_list|)
expr_stmt|;
name|previous_index
operator|=
name|data_copied
expr_stmt|;
block|}
name|enumerateOneSegment
argument_list|(
name|dir_chunk
argument_list|)
expr_stmt|;
name|dir_chunk
operator|=
literal|null
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|setData
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Checks control data      *       * @param dle      *            chm directory listing entry      */
specifier|private
name|void
name|checkControlData
parameter_list|(
name|DirectoryListingEntry
name|dle
parameter_list|)
block|{
if|if
condition|(
name|isNotControlDataFound
condition|)
block|{
if|if
condition|(
name|dle
operator|.
name|getName
argument_list|()
operator|.
name|contains
argument_list|(
name|ChmConstants
operator|.
name|CONTROL_DATA
argument_list|)
condition|)
block|{
name|setControlDataIndex
argument_list|(
name|getDirectoryListingEntryList
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|isNotControlDataFound
operator|=
literal|false
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Checks reset table      *       * @param dle      *            chm directory listing entry      */
specifier|private
name|void
name|checkResetTable
parameter_list|(
name|DirectoryListingEntry
name|dle
parameter_list|)
block|{
if|if
condition|(
name|isNotResetTableFound
condition|)
block|{
if|if
condition|(
name|dle
operator|.
name|getName
argument_list|()
operator|.
name|contains
argument_list|(
name|ChmConstants
operator|.
name|RESET_TABLE
argument_list|)
condition|)
block|{
name|setResetTableIndex
argument_list|(
name|getDirectoryListingEntryList
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|isNotResetTableFound
operator|=
literal|false
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Enumerates chm directory listing entries in single chm segment      *       * @param dir_chunk      */
specifier|private
name|void
name|enumerateOneSegment
parameter_list|(
name|byte
index|[]
name|dir_chunk
parameter_list|)
block|{
try|try
block|{
if|if
condition|(
name|dir_chunk
operator|!=
literal|null
condition|)
block|{
name|int
name|indexWorkData
init|=
name|ChmCommons
operator|.
name|indexOf
argument_list|(
name|dir_chunk
argument_list|,
literal|"::"
operator|.
name|getBytes
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|indexUserData
init|=
name|ChmCommons
operator|.
name|indexOf
argument_list|(
name|dir_chunk
argument_list|,
literal|"/"
operator|.
name|getBytes
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|indexUserData
operator|<
name|indexWorkData
condition|)
name|setPlaceHolder
argument_list|(
name|indexUserData
argument_list|)
expr_stmt|;
else|else
name|setPlaceHolder
argument_list|(
name|indexWorkData
argument_list|)
expr_stmt|;
if|if
condition|(
name|getPlaceHolder
argument_list|()
operator|>
literal|0
operator|&&
name|dir_chunk
index|[
name|getPlaceHolder
argument_list|()
operator|-
literal|1
index|]
operator|!=
literal|115
condition|)
block|{
comment|// #{
do|do
block|{
if|if
condition|(
name|dir_chunk
index|[
name|getPlaceHolder
argument_list|()
operator|-
literal|1
index|]
operator|>
literal|0
condition|)
block|{
name|DirectoryListingEntry
name|dle
init|=
operator|new
name|DirectoryListingEntry
argument_list|()
decl_stmt|;
comment|// two cases: 1. when dir_chunk[getPlaceHolder() -
comment|// 1] == 0x73
comment|// 2. when dir_chunk[getPlaceHolder() + 1] == 0x2f
name|doNameCheck
argument_list|(
name|dir_chunk
argument_list|,
name|dle
argument_list|)
expr_stmt|;
comment|// dle.setName(new
comment|// String(Arrays.copyOfRange(dir_chunk,
comment|// getPlaceHolder(), (getPlaceHolder() +
comment|// dle.getNameLength()))));
name|dle
operator|.
name|setName
argument_list|(
operator|new
name|String
argument_list|(
name|ChmCommons
operator|.
name|copyOfRange
argument_list|(
name|dir_chunk
argument_list|,
name|getPlaceHolder
argument_list|()
argument_list|,
operator|(
name|getPlaceHolder
argument_list|()
operator|+
name|dle
operator|.
name|getNameLength
argument_list|()
operator|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|checkControlData
argument_list|(
name|dle
argument_list|)
expr_stmt|;
name|checkResetTable
argument_list|(
name|dle
argument_list|)
expr_stmt|;
name|setPlaceHolder
argument_list|(
name|getPlaceHolder
argument_list|()
operator|+
name|dle
operator|.
name|getNameLength
argument_list|()
argument_list|)
expr_stmt|;
comment|/* Sets entry type */
if|if
condition|(
name|getPlaceHolder
argument_list|()
operator|<
name|dir_chunk
operator|.
name|length
operator|&&
name|dir_chunk
index|[
name|getPlaceHolder
argument_list|()
index|]
operator|==
literal|0
condition|)
name|dle
operator|.
name|setEntryType
argument_list|(
name|ChmCommons
operator|.
name|EntryType
operator|.
name|UNCOMPRESSED
argument_list|)
expr_stmt|;
else|else
name|dle
operator|.
name|setEntryType
argument_list|(
name|ChmCommons
operator|.
name|EntryType
operator|.
name|COMPRESSED
argument_list|)
expr_stmt|;
name|setPlaceHolder
argument_list|(
name|getPlaceHolder
argument_list|()
operator|+
literal|1
argument_list|)
expr_stmt|;
name|dle
operator|.
name|setOffset
argument_list|(
name|getEncint
argument_list|(
name|dir_chunk
argument_list|)
argument_list|)
expr_stmt|;
name|dle
operator|.
name|setLength
argument_list|(
name|getEncint
argument_list|(
name|dir_chunk
argument_list|)
argument_list|)
expr_stmt|;
name|getDirectoryListingEntryList
argument_list|()
operator|.
name|add
argument_list|(
name|dle
argument_list|)
expr_stmt|;
block|}
else|else
name|setPlaceHolder
argument_list|(
name|getPlaceHolder
argument_list|()
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
do|while
condition|(
name|hasNext
argument_list|(
name|dir_chunk
argument_list|)
condition|)
do|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * Checks if a name and name length are correct. If not then handles it as      * follows: 1. when dir_chunk[getPlaceHolder() - 1] == 0x73 ('/') 2. when      * dir_chunk[getPlaceHolder() + 1] == 0x2f ('s')      *       * @param dir_chunk      * @param dle      */
specifier|private
name|void
name|doNameCheck
parameter_list|(
name|byte
index|[]
name|dir_chunk
parameter_list|,
name|DirectoryListingEntry
name|dle
parameter_list|)
block|{
if|if
condition|(
name|dir_chunk
index|[
name|getPlaceHolder
argument_list|()
operator|-
literal|1
index|]
operator|==
literal|0x73
condition|)
block|{
name|dle
operator|.
name|setNameLength
argument_list|(
name|dir_chunk
index|[
name|getPlaceHolder
argument_list|()
operator|-
literal|1
index|]
operator|&
literal|0x21
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|dir_chunk
index|[
name|getPlaceHolder
argument_list|()
operator|+
literal|1
index|]
operator|==
literal|0x2f
condition|)
block|{
name|dle
operator|.
name|setNameLength
argument_list|(
name|dir_chunk
index|[
name|getPlaceHolder
argument_list|()
index|]
argument_list|)
expr_stmt|;
name|setPlaceHolder
argument_list|(
name|getPlaceHolder
argument_list|()
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|dle
operator|.
name|setNameLength
argument_list|(
name|dir_chunk
index|[
name|getPlaceHolder
argument_list|()
operator|-
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Checks if it's possible move further on byte[]      *       * @param dir_chunk      *       * @return boolean      */
specifier|private
name|boolean
name|hasNext
parameter_list|(
name|byte
index|[]
name|dir_chunk
parameter_list|)
block|{
while|while
condition|(
name|getPlaceHolder
argument_list|()
operator|<
name|dir_chunk
operator|.
name|length
condition|)
block|{
if|if
condition|(
name|dir_chunk
index|[
name|getPlaceHolder
argument_list|()
index|]
operator|==
literal|47
operator|&&
name|dir_chunk
index|[
name|getPlaceHolder
argument_list|()
operator|+
literal|1
index|]
operator|!=
literal|':'
condition|)
block|{
name|setPlaceHolder
argument_list|(
name|getPlaceHolder
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
elseif|else
if|if
condition|(
name|dir_chunk
index|[
name|getPlaceHolder
argument_list|()
index|]
operator|==
literal|':'
operator|&&
name|dir_chunk
index|[
name|getPlaceHolder
argument_list|()
operator|+
literal|1
index|]
operator|==
literal|':'
condition|)
block|{
name|setPlaceHolder
argument_list|(
name|getPlaceHolder
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
else|else
name|setPlaceHolder
argument_list|(
name|getPlaceHolder
argument_list|()
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
comment|/**      * Returns encrypted integer      *       * @param data_chunk      *       * @return      */
specifier|private
name|int
name|getEncint
parameter_list|(
name|byte
index|[]
name|data_chunk
parameter_list|)
block|{
name|byte
name|ob
decl_stmt|;
name|BigInteger
name|bi
init|=
name|BigInteger
operator|.
name|ZERO
decl_stmt|;
name|byte
index|[]
name|nb
init|=
operator|new
name|byte
index|[
literal|1
index|]
decl_stmt|;
if|if
condition|(
name|getPlaceHolder
argument_list|()
operator|<
name|data_chunk
operator|.
name|length
condition|)
block|{
while|while
condition|(
operator|(
name|ob
operator|=
name|data_chunk
index|[
name|getPlaceHolder
argument_list|()
index|]
operator|)
operator|<
literal|0
condition|)
block|{
name|nb
index|[
literal|0
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
operator|(
name|ob
operator|&
literal|0x7f
operator|)
argument_list|)
expr_stmt|;
name|bi
operator|=
name|bi
operator|.
name|shiftLeft
argument_list|(
literal|7
argument_list|)
operator|.
name|add
argument_list|(
operator|new
name|BigInteger
argument_list|(
name|nb
argument_list|)
argument_list|)
expr_stmt|;
name|setPlaceHolder
argument_list|(
name|getPlaceHolder
argument_list|()
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
name|nb
index|[
literal|0
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
operator|(
name|ob
operator|&
literal|0x7f
operator|)
argument_list|)
expr_stmt|;
name|bi
operator|=
name|bi
operator|.
name|shiftLeft
argument_list|(
literal|7
argument_list|)
operator|.
name|add
argument_list|(
operator|new
name|BigInteger
argument_list|(
name|nb
argument_list|)
argument_list|)
expr_stmt|;
name|setPlaceHolder
argument_list|(
name|getPlaceHolder
argument_list|()
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
return|return
name|bi
operator|.
name|intValue
argument_list|()
return|;
block|}
comment|/**      * @param args      */
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{     }
comment|/**      * Sets chm directory listing entry list      *       * @param dlel      *            chm directory listing entry list      */
specifier|public
name|void
name|setDirectoryListingEntryList
parameter_list|(
name|List
argument_list|<
name|DirectoryListingEntry
argument_list|>
name|dlel
parameter_list|)
block|{
name|this
operator|.
name|dlel
operator|=
name|dlel
expr_stmt|;
block|}
comment|/**      * Returns chm directory listing entry list      *       * @return List<DirectoryListingEntry>      */
specifier|public
name|List
argument_list|<
name|DirectoryListingEntry
argument_list|>
name|getDirectoryListingEntryList
parameter_list|()
block|{
return|return
name|dlel
return|;
block|}
comment|/**      * Sets data      *       * @param data      */
specifier|private
name|void
name|setData
parameter_list|(
name|byte
index|[]
name|data
parameter_list|)
block|{
name|this
operator|.
name|data
operator|=
name|data
expr_stmt|;
block|}
comment|/**      * Returns data      *       * @return      */
specifier|private
name|byte
index|[]
name|getData
parameter_list|()
block|{
return|return
name|data
return|;
block|}
comment|/**      * Sets data offset      *       * @param dataOffset      */
specifier|private
name|void
name|setDataOffset
parameter_list|(
name|long
name|dataOffset
parameter_list|)
block|{
name|this
operator|.
name|dataOffset
operator|=
name|dataOffset
expr_stmt|;
block|}
comment|/**      * Returns data offset      *       * @return dataOffset      */
specifier|public
name|long
name|getDataOffset
parameter_list|()
block|{
return|return
name|dataOffset
return|;
block|}
block|}
end_class

end_unit

