begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|pdf
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|XMLStreamException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|image
operator|.
name|BufferedImage
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Writer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|SimpleDateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Calendar
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ListIterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|IOExceptionWithCause
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|PDDocument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|PDDocumentCatalog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|PDDocumentNameDictionary
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|PDEmbeddedFilesNameTreeNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|PDPage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|PDResources
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|common
operator|.
name|PDNameTreeNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|common
operator|.
name|filespecification
operator|.
name|PDComplexFileSpecification
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|common
operator|.
name|filespecification
operator|.
name|PDEmbeddedFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|graphics
operator|.
name|PDXObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|graphics
operator|.
name|color
operator|.
name|PDDeviceGray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|graphics
operator|.
name|color
operator|.
name|PDDeviceRGB
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|graphics
operator|.
name|form
operator|.
name|PDFormXObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|graphics
operator|.
name|image
operator|.
name|PDImageXObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|interactive
operator|.
name|action
operator|.
name|PDAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|interactive
operator|.
name|action
operator|.
name|PDActionURI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|interactive
operator|.
name|annotation
operator|.
name|PDAnnotation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|interactive
operator|.
name|annotation
operator|.
name|PDAnnotationFileAttachment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|interactive
operator|.
name|annotation
operator|.
name|PDAnnotationLink
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|interactive
operator|.
name|annotation
operator|.
name|PDAnnotationMarkup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|interactive
operator|.
name|digitalsignature
operator|.
name|PDSignature
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|interactive
operator|.
name|documentnavigation
operator|.
name|outline
operator|.
name|PDDocumentOutline
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|interactive
operator|.
name|documentnavigation
operator|.
name|outline
operator|.
name|PDOutlineItem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|interactive
operator|.
name|documentnavigation
operator|.
name|outline
operator|.
name|PDOutlineNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|interactive
operator|.
name|form
operator|.
name|PDAcroForm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|interactive
operator|.
name|form
operator|.
name|PDField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|interactive
operator|.
name|form
operator|.
name|PDNonTerminalField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|interactive
operator|.
name|form
operator|.
name|PDSignatureField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|interactive
operator|.
name|form
operator|.
name|PDXFAResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|text
operator|.
name|PDFTextStripper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|text
operator|.
name|TextPosition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|tools
operator|.
name|imageio
operator|.
name|ImageIOUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|exception
operator|.
name|TikaException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|extractor
operator|.
name|EmbeddedDocumentExtractor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|extractor
operator|.
name|ParsingEmbeddedDocumentExtractor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|io
operator|.
name|TikaInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|metadata
operator|.
name|Metadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|metadata
operator|.
name|TikaCoreProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|ParseContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|sax
operator|.
name|EmbeddedContentHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|sax
operator|.
name|XHTMLContentHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|ContentHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|helpers
operator|.
name|AttributesImpl
import|;
end_import

begin_comment
comment|/**  * Utility class that overrides the {@link PDFTextStripper} functionality  * to produce a semi-structured XHTML SAX events instead of a plain text  * stream.  */
end_comment

begin_class
class|class
name|PDF2XHTML
extends|extends
name|PDFTextStripper
block|{
comment|/**      * Maximum recursive depth during AcroForm processing.      * Prevents theoretical AcroForm recursion bomb.      */
specifier|private
specifier|final
specifier|static
name|int
name|MAX_ACROFORM_RECURSIONS
init|=
literal|10
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|JPEG
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|COSName
operator|.
name|DCT_DECODE
operator|.
name|getName
argument_list|()
argument_list|,
name|COSName
operator|.
name|DCT_DECODE_ABBREVIATION
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
comment|/**      * Format used for signature dates      * TODO Make this thread-safe      */
specifier|private
specifier|final
name|SimpleDateFormat
name|dateFormat
init|=
operator|new
name|SimpleDateFormat
argument_list|(
literal|"yyyy-MM-dd'T'HH:mm:ssZ"
argument_list|,
name|Locale
operator|.
name|ROOT
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|ContentHandler
name|originalHandler
decl_stmt|;
specifier|private
specifier|final
name|ParseContext
name|context
decl_stmt|;
specifier|private
specifier|final
name|XHTMLContentHandler
name|handler
decl_stmt|;
specifier|private
specifier|final
name|PDFParserConfig
name|config
decl_stmt|;
specifier|private
specifier|final
name|Metadata
name|metadata
decl_stmt|;
specifier|private
specifier|final
name|List
argument_list|<
name|IOException
argument_list|>
name|exceptions
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
comment|/**      * This keeps track of the pdf object ids for inline      * images that have been processed.      * If {@link PDFParserConfig#getExtractUniqueInlineImagesOnly()      * is true, this will be checked before extracting an embedded image.      * The integer keeps track of the inlineImageCounter for that image.      * This integer is used to identify images in the markup.      *      * This is used across the document.  To avoid infinite recursion      * TIKA-1742, we're limiting the export to one image per page.      */
specifier|private
name|Map
argument_list|<
name|COSStream
argument_list|,
name|Integer
argument_list|>
name|processedInlineImages
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
name|int
name|inlineImageCounter
init|=
literal|0
decl_stmt|;
specifier|private
name|PDF2XHTML
parameter_list|(
name|ContentHandler
name|handler
parameter_list|,
name|ParseContext
name|context
parameter_list|,
name|Metadata
name|metadata
parameter_list|,
name|PDFParserConfig
name|config
parameter_list|)
throws|throws
name|IOException
block|{
comment|//source of config (derives from context or PDFParser?) is
comment|//already determined in PDFParser.  No need to check context here.
name|this
operator|.
name|config
operator|=
name|config
expr_stmt|;
name|this
operator|.
name|originalHandler
operator|=
name|handler
expr_stmt|;
name|this
operator|.
name|context
operator|=
name|context
expr_stmt|;
name|this
operator|.
name|handler
operator|=
operator|new
name|XHTMLContentHandler
argument_list|(
name|handler
argument_list|,
name|metadata
argument_list|)
expr_stmt|;
name|this
operator|.
name|metadata
operator|=
name|metadata
expr_stmt|;
block|}
comment|/**      * Converts the given PDF document (and related metadata) to a stream      * of XHTML SAX events sent to the given content handler.      *      * @param document PDF document      * @param handler  SAX content handler      * @param metadata PDF metadata      * @throws SAXException  if the content handler fails to process SAX events      * @throws TikaException if there was an exception outside of per page processing      */
specifier|public
specifier|static
name|void
name|process
parameter_list|(
name|PDDocument
name|document
parameter_list|,
name|ContentHandler
name|handler
parameter_list|,
name|ParseContext
name|context
parameter_list|,
name|Metadata
name|metadata
parameter_list|,
name|PDFParserConfig
name|config
parameter_list|)
throws|throws
name|SAXException
throws|,
name|TikaException
block|{
name|PDF2XHTML
name|pdf2XHTML
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// Extract text using a dummy Writer as we override the
comment|// key methods to output to the given content
comment|// handler.
name|pdf2XHTML
operator|=
operator|new
name|PDF2XHTML
argument_list|(
name|handler
argument_list|,
name|context
argument_list|,
name|metadata
argument_list|,
name|config
argument_list|)
expr_stmt|;
name|config
operator|.
name|configure
argument_list|(
name|pdf2XHTML
argument_list|)
expr_stmt|;
name|pdf2XHTML
operator|.
name|writeText
argument_list|(
name|document
argument_list|,
operator|new
name|Writer
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|char
index|[]
name|cbuf
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|)
block|{                 }
annotation|@
name|Override
specifier|public
name|void
name|flush
parameter_list|()
block|{                 }
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
block|{                 }
block|}
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|.
name|getCause
argument_list|()
operator|instanceof
name|SAXException
condition|)
block|{
throw|throw
operator|(
name|SAXException
operator|)
name|e
operator|.
name|getCause
argument_list|()
throw|;
block|}
else|else
block|{
throw|throw
operator|new
name|TikaException
argument_list|(
literal|"Unable to extract PDF content"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|pdf2XHTML
operator|.
name|exceptions
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
comment|//throw the first
throw|throw
operator|new
name|TikaException
argument_list|(
literal|"Unable to extract all PDF content"
argument_list|,
name|pdf2XHTML
operator|.
name|exceptions
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
throw|;
block|}
block|}
name|void
name|extractBookmarkText
parameter_list|()
throws|throws
name|SAXException
block|{
name|PDDocumentOutline
name|outline
init|=
name|document
operator|.
name|getDocumentCatalog
argument_list|()
operator|.
name|getDocumentOutline
argument_list|()
decl_stmt|;
if|if
condition|(
name|outline
operator|!=
literal|null
condition|)
block|{
name|extractBookmarkText
argument_list|(
name|outline
argument_list|)
expr_stmt|;
block|}
block|}
name|void
name|extractBookmarkText
parameter_list|(
name|PDOutlineNode
name|bookmark
parameter_list|)
throws|throws
name|SAXException
block|{
name|PDOutlineItem
name|current
init|=
name|bookmark
operator|.
name|getFirstChild
argument_list|()
decl_stmt|;
if|if
condition|(
name|current
operator|!=
literal|null
condition|)
block|{
name|handler
operator|.
name|startElement
argument_list|(
literal|"ul"
argument_list|)
expr_stmt|;
while|while
condition|(
name|current
operator|!=
literal|null
condition|)
block|{
name|handler
operator|.
name|startElement
argument_list|(
literal|"li"
argument_list|)
expr_stmt|;
name|handler
operator|.
name|characters
argument_list|(
name|current
operator|.
name|getTitle
argument_list|()
argument_list|)
expr_stmt|;
name|handler
operator|.
name|endElement
argument_list|(
literal|"li"
argument_list|)
expr_stmt|;
comment|// Recurse:
name|extractBookmarkText
argument_list|(
name|current
argument_list|)
expr_stmt|;
name|current
operator|=
name|current
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
block|}
name|handler
operator|.
name|endElement
argument_list|(
literal|"ul"
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|processPage
parameter_list|(
name|PDPage
name|page
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|super
operator|.
name|processPage
argument_list|(
name|page
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|handleCatchableIOE
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|protected
name|void
name|startDocument
parameter_list|(
name|PDDocument
name|pdf
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|handler
operator|.
name|startDocument
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SAXException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOExceptionWithCause
argument_list|(
literal|"Unable to start a document"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|protected
name|void
name|endDocument
parameter_list|(
name|PDDocument
name|pdf
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
comment|// Extract text for any bookmarks:
name|extractBookmarkText
argument_list|()
expr_stmt|;
try|try
block|{
name|extractEmbeddedDocuments
argument_list|(
name|pdf
argument_list|,
name|originalHandler
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|handleCatchableIOE
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
comment|//extract acroform data at end of doc
if|if
condition|(
name|config
operator|.
name|getExtractAcroFormContent
argument_list|()
operator|==
literal|true
condition|)
block|{
try|try
block|{
name|extractAcroForm
argument_list|(
name|pdf
argument_list|,
name|handler
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|handleCatchableIOE
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
name|handler
operator|.
name|endDocument
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TikaException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOExceptionWithCause
argument_list|(
literal|"Unable to end a document"
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|SAXException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOExceptionWithCause
argument_list|(
literal|"Unable to end a document"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|protected
name|void
name|startPage
parameter_list|(
name|PDPage
name|page
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|handler
operator|.
name|startElement
argument_list|(
literal|"div"
argument_list|,
literal|"class"
argument_list|,
literal|"page"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SAXException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOExceptionWithCause
argument_list|(
literal|"Unable to start a page"
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|writeParagraphStart
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|endPage
parameter_list|(
name|PDPage
name|page
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|writeParagraphEnd
argument_list|()
expr_stmt|;
try|try
block|{
name|extractImages
argument_list|(
name|page
operator|.
name|getResources
argument_list|()
argument_list|,
operator|new
name|HashSet
argument_list|<
name|COSBase
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|handleCatchableIOE
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
name|EmbeddedDocumentExtractor
name|extractor
init|=
name|getEmbeddedDocumentExtractor
argument_list|()
decl_stmt|;
for|for
control|(
name|PDAnnotation
name|annotation
range|:
name|page
operator|.
name|getAnnotations
argument_list|()
control|)
block|{
if|if
condition|(
name|annotation
operator|instanceof
name|PDAnnotationFileAttachment
condition|)
block|{
name|PDAnnotationFileAttachment
name|fann
init|=
operator|(
name|PDAnnotationFileAttachment
operator|)
name|annotation
decl_stmt|;
name|PDComplexFileSpecification
name|fileSpec
init|=
operator|(
name|PDComplexFileSpecification
operator|)
name|fann
operator|.
name|getFile
argument_list|()
decl_stmt|;
try|try
block|{
name|extractMultiOSPDEmbeddedFiles
argument_list|(
literal|""
argument_list|,
name|fileSpec
argument_list|,
name|extractor
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SAXException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOExceptionWithCause
argument_list|(
literal|"file embedded in annotation sax exception"
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|TikaException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOExceptionWithCause
argument_list|(
literal|"file embedded in annotation tika exception"
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|handleCatchableIOE
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|// TODO: remove once PDFBOX-1143 is fixed:
if|if
condition|(
name|config
operator|.
name|getExtractAnnotationText
argument_list|()
condition|)
block|{
if|if
condition|(
name|annotation
operator|instanceof
name|PDAnnotationLink
condition|)
block|{
name|PDAnnotationLink
name|annotationlink
init|=
operator|(
name|PDAnnotationLink
operator|)
name|annotation
decl_stmt|;
if|if
condition|(
name|annotationlink
operator|.
name|getAction
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|PDAction
name|action
init|=
name|annotationlink
operator|.
name|getAction
argument_list|()
decl_stmt|;
if|if
condition|(
name|action
operator|instanceof
name|PDActionURI
condition|)
block|{
name|PDActionURI
name|uri
init|=
operator|(
name|PDActionURI
operator|)
name|action
decl_stmt|;
name|String
name|link
init|=
name|uri
operator|.
name|getURI
argument_list|()
decl_stmt|;
if|if
condition|(
name|link
operator|!=
literal|null
condition|)
block|{
name|handler
operator|.
name|startElement
argument_list|(
literal|"div"
argument_list|,
literal|"class"
argument_list|,
literal|"annotation"
argument_list|)
expr_stmt|;
name|handler
operator|.
name|startElement
argument_list|(
literal|"a"
argument_list|,
literal|"href"
argument_list|,
name|link
argument_list|)
expr_stmt|;
name|handler
operator|.
name|endElement
argument_list|(
literal|"a"
argument_list|)
expr_stmt|;
name|handler
operator|.
name|endElement
argument_list|(
literal|"div"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
if|if
condition|(
name|annotation
operator|instanceof
name|PDAnnotationMarkup
condition|)
block|{
name|PDAnnotationMarkup
name|annotationMarkup
init|=
operator|(
name|PDAnnotationMarkup
operator|)
name|annotation
decl_stmt|;
name|String
name|title
init|=
name|annotationMarkup
operator|.
name|getTitlePopup
argument_list|()
decl_stmt|;
name|String
name|subject
init|=
name|annotationMarkup
operator|.
name|getSubject
argument_list|()
decl_stmt|;
name|String
name|contents
init|=
name|annotationMarkup
operator|.
name|getContents
argument_list|()
decl_stmt|;
comment|// TODO: maybe also annotationMarkup.getRichContents()?
if|if
condition|(
name|title
operator|!=
literal|null
operator|||
name|subject
operator|!=
literal|null
operator|||
name|contents
operator|!=
literal|null
condition|)
block|{
name|handler
operator|.
name|startElement
argument_list|(
literal|"div"
argument_list|,
literal|"class"
argument_list|,
literal|"annotation"
argument_list|)
expr_stmt|;
if|if
condition|(
name|title
operator|!=
literal|null
condition|)
block|{
name|handler
operator|.
name|startElement
argument_list|(
literal|"div"
argument_list|,
literal|"class"
argument_list|,
literal|"annotationTitle"
argument_list|)
expr_stmt|;
name|handler
operator|.
name|characters
argument_list|(
name|title
argument_list|)
expr_stmt|;
name|handler
operator|.
name|endElement
argument_list|(
literal|"div"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|subject
operator|!=
literal|null
condition|)
block|{
name|handler
operator|.
name|startElement
argument_list|(
literal|"div"
argument_list|,
literal|"class"
argument_list|,
literal|"annotationSubject"
argument_list|)
expr_stmt|;
name|handler
operator|.
name|characters
argument_list|(
name|subject
argument_list|)
expr_stmt|;
name|handler
operator|.
name|endElement
argument_list|(
literal|"div"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|contents
operator|!=
literal|null
condition|)
block|{
name|handler
operator|.
name|startElement
argument_list|(
literal|"div"
argument_list|,
literal|"class"
argument_list|,
literal|"annotationContents"
argument_list|)
expr_stmt|;
name|handler
operator|.
name|characters
argument_list|(
name|contents
argument_list|)
expr_stmt|;
name|handler
operator|.
name|endElement
argument_list|(
literal|"div"
argument_list|)
expr_stmt|;
block|}
name|handler
operator|.
name|endElement
argument_list|(
literal|"div"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
name|handler
operator|.
name|endElement
argument_list|(
literal|"div"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SAXException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOExceptionWithCause
argument_list|(
literal|"Unable to end a page"
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|exceptions
operator|.
name|add
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|extractImages
parameter_list|(
name|PDResources
name|resources
parameter_list|,
name|Set
argument_list|<
name|COSBase
argument_list|>
name|seenThisPage
parameter_list|)
throws|throws
name|SAXException
throws|,
name|IOException
block|{
if|if
condition|(
name|resources
operator|==
literal|null
operator|||
name|config
operator|.
name|getExtractInlineImages
argument_list|()
operator|==
literal|false
condition|)
block|{
return|return;
block|}
for|for
control|(
name|COSName
name|name
range|:
name|resources
operator|.
name|getXObjectNames
argument_list|()
control|)
block|{
name|PDXObject
name|object
init|=
name|resources
operator|.
name|getXObject
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|object
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
name|COSBase
name|cosObject
init|=
name|object
operator|.
name|getCOSObject
argument_list|()
decl_stmt|;
if|if
condition|(
name|seenThisPage
operator|.
name|contains
argument_list|(
name|cosObject
argument_list|)
condition|)
block|{
comment|//avoid infinite recursion TIKA-1742
continue|continue;
block|}
name|seenThisPage
operator|.
name|add
argument_list|(
name|cosObject
argument_list|)
expr_stmt|;
if|if
condition|(
name|object
operator|instanceof
name|PDFormXObject
condition|)
block|{
name|extractImages
argument_list|(
operator|(
operator|(
name|PDFormXObject
operator|)
name|object
operator|)
operator|.
name|getResources
argument_list|()
argument_list|,
name|seenThisPage
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|object
operator|instanceof
name|PDImageXObject
condition|)
block|{
name|PDImageXObject
name|image
init|=
operator|(
name|PDImageXObject
operator|)
name|object
decl_stmt|;
name|Metadata
name|metadata
init|=
operator|new
name|Metadata
argument_list|()
decl_stmt|;
name|String
name|extension
init|=
name|image
operator|.
name|getSuffix
argument_list|()
decl_stmt|;
if|if
condition|(
name|extension
operator|==
literal|null
condition|)
block|{
name|metadata
operator|.
name|set
argument_list|(
name|Metadata
operator|.
name|CONTENT_TYPE
argument_list|,
literal|"image/png"
argument_list|)
expr_stmt|;
name|extension
operator|=
literal|"png"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|extension
operator|.
name|equals
argument_list|(
literal|"jpg"
argument_list|)
condition|)
block|{
name|metadata
operator|.
name|set
argument_list|(
name|Metadata
operator|.
name|CONTENT_TYPE
argument_list|,
literal|"image/jpeg"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|extension
operator|.
name|equals
argument_list|(
literal|"tiff"
argument_list|)
condition|)
block|{
name|metadata
operator|.
name|set
argument_list|(
name|Metadata
operator|.
name|CONTENT_TYPE
argument_list|,
literal|"image/tiff"
argument_list|)
expr_stmt|;
name|extension
operator|=
literal|"tif"
expr_stmt|;
block|}
else|else
block|{
comment|//TODO: determine if we need to add more image types
comment|//throw new RuntimeException("EXTEN:" + extension);
block|}
name|Integer
name|imageNumber
init|=
name|processedInlineImages
operator|.
name|get
argument_list|(
name|name
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|imageNumber
operator|==
literal|null
condition|)
block|{
name|imageNumber
operator|=
name|inlineImageCounter
operator|++
expr_stmt|;
block|}
name|String
name|fileName
init|=
literal|"image"
operator|+
name|imageNumber
operator|+
literal|"."
operator|+
name|extension
decl_stmt|;
name|metadata
operator|.
name|set
argument_list|(
name|Metadata
operator|.
name|RESOURCE_NAME_KEY
argument_list|,
name|fileName
argument_list|)
expr_stmt|;
comment|// Output the img tag
name|AttributesImpl
name|attr
init|=
operator|new
name|AttributesImpl
argument_list|()
decl_stmt|;
name|attr
operator|.
name|addAttribute
argument_list|(
literal|""
argument_list|,
literal|"src"
argument_list|,
literal|"src"
argument_list|,
literal|"CDATA"
argument_list|,
literal|"embedded:"
operator|+
name|fileName
argument_list|)
expr_stmt|;
name|attr
operator|.
name|addAttribute
argument_list|(
literal|""
argument_list|,
literal|"alt"
argument_list|,
literal|"alt"
argument_list|,
literal|"CDATA"
argument_list|,
name|fileName
argument_list|)
expr_stmt|;
name|handler
operator|.
name|startElement
argument_list|(
literal|"img"
argument_list|,
name|attr
argument_list|)
expr_stmt|;
name|handler
operator|.
name|endElement
argument_list|(
literal|"img"
argument_list|)
expr_stmt|;
comment|//Do we only want to process unique COSObject ids?
comment|//If so, have we already processed this one?
if|if
condition|(
name|config
operator|.
name|getExtractUniqueInlineImagesOnly
argument_list|()
operator|==
literal|true
condition|)
block|{
name|COSStream
name|cosStream
init|=
name|object
operator|.
name|getCOSObject
argument_list|()
decl_stmt|;
if|if
condition|(
name|processedInlineImages
operator|.
name|containsKey
argument_list|(
name|cosStream
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|processedInlineImages
operator|.
name|put
argument_list|(
name|cosStream
argument_list|,
name|imageNumber
argument_list|)
expr_stmt|;
block|}
name|metadata
operator|.
name|set
argument_list|(
name|TikaCoreProperties
operator|.
name|EMBEDDED_RESOURCE_TYPE
argument_list|,
name|TikaCoreProperties
operator|.
name|EmbeddedResourceType
operator|.
name|INLINE
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|EmbeddedDocumentExtractor
name|extractor
init|=
name|getEmbeddedDocumentExtractor
argument_list|()
decl_stmt|;
if|if
condition|(
name|extractor
operator|.
name|shouldParseEmbedded
argument_list|(
name|metadata
argument_list|)
condition|)
block|{
name|ByteArrayOutputStream
name|buffer
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
try|try
block|{
comment|//TODO: handle image.getMetadata()?
name|writeToBuffer
argument_list|(
name|image
argument_list|,
name|extension
argument_list|,
name|buffer
argument_list|)
expr_stmt|;
name|extractor
operator|.
name|parseEmbedded
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|buffer
operator|.
name|toByteArray
argument_list|()
argument_list|)
argument_list|,
operator|new
name|EmbeddedContentHandler
argument_list|(
name|handler
argument_list|)
argument_list|,
name|metadata
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|handleCatchableIOE
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
comment|//nearly directly copied from PDFBox ExtractImages
specifier|private
name|void
name|writeToBuffer
parameter_list|(
name|PDImageXObject
name|pdImage
parameter_list|,
name|String
name|suffix
parameter_list|,
name|OutputStream
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|BufferedImage
name|image
init|=
name|pdImage
operator|.
name|getImage
argument_list|()
decl_stmt|;
if|if
condition|(
name|image
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
literal|"jpg"
operator|.
name|equals
argument_list|(
name|suffix
argument_list|)
condition|)
block|{
name|String
name|colorSpaceName
init|=
name|pdImage
operator|.
name|getColorSpace
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
comment|//TODO: figure out if we want directJPEG as a configuration
comment|//previously: if (directJPeg || PDDeviceGray....
if|if
condition|(
name|PDDeviceGray
operator|.
name|INSTANCE
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|colorSpaceName
argument_list|)
operator|||
name|PDDeviceRGB
operator|.
name|INSTANCE
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|colorSpaceName
argument_list|)
condition|)
block|{
comment|// RGB or Gray colorspace: get and write the unmodifiedJPEG stream
name|InputStream
name|data
init|=
name|pdImage
operator|.
name|getStream
argument_list|()
operator|.
name|createInputStream
argument_list|(
name|JPEG
argument_list|)
decl_stmt|;
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|io
operator|.
name|IOUtils
operator|.
name|copy
argument_list|(
name|data
argument_list|,
name|out
argument_list|)
expr_stmt|;
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|io
operator|.
name|IOUtils
operator|.
name|closeQuietly
argument_list|(
name|data
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// for CMYK and other "unusual" colorspaces, the JPEG will be converted
name|ImageIOUtil
operator|.
name|writeImage
argument_list|(
name|image
argument_list|,
name|suffix
argument_list|,
name|out
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|ImageIOUtil
operator|.
name|writeImage
argument_list|(
name|image
argument_list|,
name|suffix
argument_list|,
name|out
argument_list|)
expr_stmt|;
block|}
block|}
name|out
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|EmbeddedDocumentExtractor
name|getEmbeddedDocumentExtractor
parameter_list|()
block|{
name|EmbeddedDocumentExtractor
name|extractor
init|=
name|context
operator|.
name|get
argument_list|(
name|EmbeddedDocumentExtractor
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|extractor
operator|==
literal|null
condition|)
block|{
name|extractor
operator|=
operator|new
name|ParsingEmbeddedDocumentExtractor
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
return|return
name|extractor
return|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|writeParagraphStart
parameter_list|()
throws|throws
name|IOException
block|{
name|super
operator|.
name|writeParagraphStart
argument_list|()
expr_stmt|;
try|try
block|{
name|handler
operator|.
name|startElement
argument_list|(
literal|"p"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SAXException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOExceptionWithCause
argument_list|(
literal|"Unable to start a paragraph"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|protected
name|void
name|writeParagraphEnd
parameter_list|()
throws|throws
name|IOException
block|{
name|super
operator|.
name|writeParagraphEnd
argument_list|()
expr_stmt|;
try|try
block|{
name|handler
operator|.
name|endElement
argument_list|(
literal|"p"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SAXException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOExceptionWithCause
argument_list|(
literal|"Unable to end a paragraph"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|protected
name|void
name|writeString
parameter_list|(
name|String
name|text
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|handler
operator|.
name|characters
argument_list|(
name|text
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SAXException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOExceptionWithCause
argument_list|(
literal|"Unable to write a string: "
operator|+
name|text
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|protected
name|void
name|writeCharacters
parameter_list|(
name|TextPosition
name|text
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|handler
operator|.
name|characters
argument_list|(
name|text
operator|.
name|getUnicode
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SAXException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOExceptionWithCause
argument_list|(
literal|"Unable to write a character: "
operator|+
name|text
operator|.
name|getUnicode
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|protected
name|void
name|writeWordSeparator
parameter_list|()
throws|throws
name|IOException
block|{
try|try
block|{
name|handler
operator|.
name|characters
argument_list|(
name|getWordSeparator
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SAXException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOExceptionWithCause
argument_list|(
literal|"Unable to write a space character"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|protected
name|void
name|writeLineSeparator
parameter_list|()
throws|throws
name|IOException
block|{
try|try
block|{
name|handler
operator|.
name|newline
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SAXException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOExceptionWithCause
argument_list|(
literal|"Unable to write a newline character"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
name|void
name|extractEmbeddedDocuments
parameter_list|(
name|PDDocument
name|document
parameter_list|,
name|ContentHandler
name|handler
parameter_list|)
throws|throws
name|IOException
throws|,
name|SAXException
throws|,
name|TikaException
block|{
name|PDDocumentNameDictionary
name|namesDictionary
init|=
operator|new
name|PDDocumentNameDictionary
argument_list|(
name|document
operator|.
name|getDocumentCatalog
argument_list|()
argument_list|)
decl_stmt|;
name|PDEmbeddedFilesNameTreeNode
name|efTree
init|=
name|namesDictionary
operator|.
name|getEmbeddedFiles
argument_list|()
decl_stmt|;
if|if
condition|(
name|efTree
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|PDComplexFileSpecification
argument_list|>
name|embeddedFileNames
init|=
name|efTree
operator|.
name|getNames
argument_list|()
decl_stmt|;
comment|//For now, try to get the embeddedFileNames out of embeddedFiles or its kids.
comment|//This code follows: pdfbox/examples/pdmodel/ExtractEmbeddedFiles.java
comment|//If there is a need we could add a fully recursive search to find a non-null
comment|//Map<String, COSObjectable> that contains the doc info.
if|if
condition|(
name|embeddedFileNames
operator|!=
literal|null
condition|)
block|{
name|processEmbeddedDocNames
argument_list|(
name|embeddedFileNames
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|List
argument_list|<
name|PDNameTreeNode
argument_list|<
name|PDComplexFileSpecification
argument_list|>
argument_list|>
name|kids
init|=
name|efTree
operator|.
name|getKids
argument_list|()
decl_stmt|;
if|if
condition|(
name|kids
operator|==
literal|null
condition|)
block|{
return|return;
block|}
for|for
control|(
name|PDNameTreeNode
argument_list|<
name|PDComplexFileSpecification
argument_list|>
name|node
range|:
name|kids
control|)
block|{
name|embeddedFileNames
operator|=
name|node
operator|.
name|getNames
argument_list|()
expr_stmt|;
if|if
condition|(
name|embeddedFileNames
operator|!=
literal|null
condition|)
block|{
name|processEmbeddedDocNames
argument_list|(
name|embeddedFileNames
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|private
name|void
name|processEmbeddedDocNames
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|PDComplexFileSpecification
argument_list|>
name|embeddedFileNames
parameter_list|)
throws|throws
name|IOException
throws|,
name|SAXException
throws|,
name|TikaException
block|{
if|if
condition|(
name|embeddedFileNames
operator|==
literal|null
operator|||
name|embeddedFileNames
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return;
block|}
name|EmbeddedDocumentExtractor
name|extractor
init|=
name|getEmbeddedDocumentExtractor
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|PDComplexFileSpecification
argument_list|>
name|ent
range|:
name|embeddedFileNames
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|PDComplexFileSpecification
name|spec
init|=
name|ent
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|extractMultiOSPDEmbeddedFiles
argument_list|(
name|ent
operator|.
name|getKey
argument_list|()
argument_list|,
name|spec
argument_list|,
name|extractor
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|extractMultiOSPDEmbeddedFiles
parameter_list|(
name|String
name|defaultName
parameter_list|,
name|PDComplexFileSpecification
name|spec
parameter_list|,
name|EmbeddedDocumentExtractor
name|extractor
parameter_list|)
throws|throws
name|IOException
throws|,
name|SAXException
throws|,
name|TikaException
block|{
if|if
condition|(
name|spec
operator|==
literal|null
condition|)
block|{
return|return;
block|}
comment|//current strategy is to pull all, not just first non-null
name|extractPDEmbeddedFile
argument_list|(
name|defaultName
argument_list|,
name|spec
operator|.
name|getFile
argument_list|()
argument_list|,
name|spec
operator|.
name|getEmbeddedFile
argument_list|()
argument_list|,
name|extractor
argument_list|)
expr_stmt|;
name|extractPDEmbeddedFile
argument_list|(
name|defaultName
argument_list|,
name|spec
operator|.
name|getFileMac
argument_list|()
argument_list|,
name|spec
operator|.
name|getEmbeddedFileMac
argument_list|()
argument_list|,
name|extractor
argument_list|)
expr_stmt|;
name|extractPDEmbeddedFile
argument_list|(
name|defaultName
argument_list|,
name|spec
operator|.
name|getFileDos
argument_list|()
argument_list|,
name|spec
operator|.
name|getEmbeddedFileDos
argument_list|()
argument_list|,
name|extractor
argument_list|)
expr_stmt|;
name|extractPDEmbeddedFile
argument_list|(
name|defaultName
argument_list|,
name|spec
operator|.
name|getFileUnix
argument_list|()
argument_list|,
name|spec
operator|.
name|getEmbeddedFileUnix
argument_list|()
argument_list|,
name|extractor
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|extractPDEmbeddedFile
parameter_list|(
name|String
name|defaultName
parameter_list|,
name|String
name|fileName
parameter_list|,
name|PDEmbeddedFile
name|file
parameter_list|,
name|EmbeddedDocumentExtractor
name|extractor
parameter_list|)
throws|throws
name|SAXException
throws|,
name|IOException
throws|,
name|TikaException
block|{
if|if
condition|(
name|file
operator|==
literal|null
condition|)
block|{
comment|//skip silently
return|return;
block|}
name|fileName
operator|=
operator|(
name|fileName
operator|==
literal|null
operator|)
condition|?
name|defaultName
else|:
name|fileName
expr_stmt|;
comment|// TODO: other metadata?
name|Metadata
name|metadata
init|=
operator|new
name|Metadata
argument_list|()
decl_stmt|;
name|metadata
operator|.
name|set
argument_list|(
name|Metadata
operator|.
name|RESOURCE_NAME_KEY
argument_list|,
name|fileName
argument_list|)
expr_stmt|;
name|metadata
operator|.
name|set
argument_list|(
name|Metadata
operator|.
name|CONTENT_TYPE
argument_list|,
name|file
operator|.
name|getSubtype
argument_list|()
argument_list|)
expr_stmt|;
name|metadata
operator|.
name|set
argument_list|(
name|Metadata
operator|.
name|CONTENT_LENGTH
argument_list|,
name|Long
operator|.
name|toString
argument_list|(
name|file
operator|.
name|getSize
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|metadata
operator|.
name|set
argument_list|(
name|TikaCoreProperties
operator|.
name|EMBEDDED_RESOURCE_TYPE
argument_list|,
name|TikaCoreProperties
operator|.
name|EmbeddedResourceType
operator|.
name|ATTACHMENT
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|extractor
operator|.
name|shouldParseEmbedded
argument_list|(
name|metadata
argument_list|)
condition|)
block|{
name|TikaInputStream
name|stream
init|=
literal|null
decl_stmt|;
try|try
block|{
name|stream
operator|=
name|TikaInputStream
operator|.
name|get
argument_list|(
name|file
operator|.
name|createInputStream
argument_list|()
argument_list|)
expr_stmt|;
name|extractor
operator|.
name|parseEmbedded
argument_list|(
name|stream
argument_list|,
operator|new
name|EmbeddedContentHandler
argument_list|(
name|handler
argument_list|)
argument_list|,
name|metadata
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|AttributesImpl
name|attributes
init|=
operator|new
name|AttributesImpl
argument_list|()
decl_stmt|;
name|attributes
operator|.
name|addAttribute
argument_list|(
literal|""
argument_list|,
literal|"class"
argument_list|,
literal|"class"
argument_list|,
literal|"CDATA"
argument_list|,
literal|"embedded"
argument_list|)
expr_stmt|;
name|attributes
operator|.
name|addAttribute
argument_list|(
literal|""
argument_list|,
literal|"id"
argument_list|,
literal|"id"
argument_list|,
literal|"CDATA"
argument_list|,
name|fileName
argument_list|)
expr_stmt|;
name|handler
operator|.
name|startElement
argument_list|(
literal|"div"
argument_list|,
name|attributes
argument_list|)
expr_stmt|;
name|handler
operator|.
name|endElement
argument_list|(
literal|"div"
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|closeQuietly
argument_list|(
name|stream
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|extractAcroForm
parameter_list|(
name|PDDocument
name|pdf
parameter_list|,
name|XHTMLContentHandler
name|handler
parameter_list|)
throws|throws
name|IOException
throws|,
name|SAXException
block|{
comment|//Thank you, Ben Litchfield, for org.apache.pdfbox.examples.fdf.PrintFields
comment|//this code derives from Ben's code
name|PDDocumentCatalog
name|catalog
init|=
name|pdf
operator|.
name|getDocumentCatalog
argument_list|()
decl_stmt|;
if|if
condition|(
name|catalog
operator|==
literal|null
condition|)
return|return;
name|PDAcroForm
name|form
init|=
name|catalog
operator|.
name|getAcroForm
argument_list|()
decl_stmt|;
if|if
condition|(
name|form
operator|==
literal|null
condition|)
return|return;
comment|//if it has xfa, try that.
comment|//if it doesn't exist or there's an exception,
comment|//go with traditional AcroForm
name|PDXFAResource
name|pdxfa
init|=
name|form
operator|.
name|getXFA
argument_list|()
decl_stmt|;
if|if
condition|(
name|pdxfa
operator|!=
literal|null
condition|)
block|{
comment|//if successful, return
name|XFAExtractor
name|xfaExtractor
init|=
operator|new
name|XFAExtractor
argument_list|()
decl_stmt|;
try|try
init|(
name|InputStream
name|is
init|=
operator|new
name|BufferedInputStream
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|pdxfa
operator|.
name|getBytes
argument_list|()
argument_list|)
argument_list|)
init|)
block|{
name|xfaExtractor
operator|.
name|extract
argument_list|(
name|is
argument_list|,
name|handler
argument_list|,
name|metadata
argument_list|,
name|context
argument_list|)
expr_stmt|;
return|return;
block|}
catch|catch
parameter_list|(
name|XMLStreamException
decl||
name|IOException
name|e
parameter_list|)
block|{
comment|//if there was an xml parse exception in xfa, try the AcroForm
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"rawtypes"
argument_list|)
name|List
name|fields
init|=
name|form
operator|.
name|getFields
argument_list|()
decl_stmt|;
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
return|return;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"rawtypes"
argument_list|)
name|ListIterator
name|itr
init|=
name|fields
operator|.
name|listIterator
argument_list|()
decl_stmt|;
if|if
condition|(
name|itr
operator|==
literal|null
condition|)
return|return;
name|handler
operator|.
name|startElement
argument_list|(
literal|"div"
argument_list|,
literal|"class"
argument_list|,
literal|"acroform"
argument_list|)
expr_stmt|;
name|handler
operator|.
name|startElement
argument_list|(
literal|"ol"
argument_list|)
expr_stmt|;
while|while
condition|(
name|itr
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Object
name|obj
init|=
name|itr
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|obj
operator|!=
literal|null
operator|&&
name|obj
operator|instanceof
name|PDField
condition|)
block|{
name|processAcroField
argument_list|(
operator|(
name|PDField
operator|)
name|obj
argument_list|,
name|handler
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
name|handler
operator|.
name|endElement
argument_list|(
literal|"ol"
argument_list|)
expr_stmt|;
name|handler
operator|.
name|endElement
argument_list|(
literal|"div"
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|processAcroField
parameter_list|(
name|PDField
name|field
parameter_list|,
name|XHTMLContentHandler
name|handler
parameter_list|,
specifier|final
name|int
name|currentRecursiveDepth
parameter_list|)
throws|throws
name|SAXException
throws|,
name|IOException
block|{
if|if
condition|(
name|currentRecursiveDepth
operator|>=
name|MAX_ACROFORM_RECURSIONS
condition|)
block|{
return|return;
block|}
name|addFieldString
argument_list|(
name|field
argument_list|,
name|handler
argument_list|)
expr_stmt|;
if|if
condition|(
name|field
operator|instanceof
name|PDNonTerminalField
condition|)
block|{
name|int
name|r
init|=
name|currentRecursiveDepth
operator|+
literal|1
decl_stmt|;
name|handler
operator|.
name|startElement
argument_list|(
literal|"ol"
argument_list|)
expr_stmt|;
for|for
control|(
name|PDField
name|child
range|:
operator|(
operator|(
name|PDNonTerminalField
operator|)
name|field
operator|)
operator|.
name|getChildren
argument_list|()
control|)
block|{
name|processAcroField
argument_list|(
name|child
argument_list|,
name|handler
argument_list|,
name|r
argument_list|)
expr_stmt|;
block|}
name|handler
operator|.
name|endElement
argument_list|(
literal|"ol"
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|addFieldString
parameter_list|(
name|PDField
name|field
parameter_list|,
name|XHTMLContentHandler
name|handler
parameter_list|)
throws|throws
name|SAXException
block|{
comment|//Pick partial name to present in content and altName for attribute
comment|//Ignoring FullyQualifiedName for now
name|String
name|partName
init|=
name|field
operator|.
name|getPartialName
argument_list|()
decl_stmt|;
name|String
name|altName
init|=
name|field
operator|.
name|getAlternateFieldName
argument_list|()
decl_stmt|;
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|AttributesImpl
name|attrs
init|=
operator|new
name|AttributesImpl
argument_list|()
decl_stmt|;
if|if
condition|(
name|partName
operator|!=
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|partName
argument_list|)
operator|.
name|append
argument_list|(
literal|": "
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|altName
operator|!=
literal|null
condition|)
block|{
name|attrs
operator|.
name|addAttribute
argument_list|(
literal|""
argument_list|,
literal|"altName"
argument_list|,
literal|"altName"
argument_list|,
literal|"CDATA"
argument_list|,
name|altName
argument_list|)
expr_stmt|;
block|}
comment|//return early if PDSignature field
if|if
condition|(
name|field
operator|instanceof
name|PDSignatureField
condition|)
block|{
name|handleSignature
argument_list|(
name|attrs
argument_list|,
operator|(
name|PDSignatureField
operator|)
name|field
argument_list|,
name|handler
argument_list|)
expr_stmt|;
return|return;
block|}
name|String
name|value
init|=
name|field
operator|.
name|getValueAsString
argument_list|()
decl_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
operator|&&
operator|!
name|value
operator|.
name|equals
argument_list|(
literal|"null"
argument_list|)
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|attrs
operator|.
name|getLength
argument_list|()
operator|>
literal|0
operator|||
name|sb
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|handler
operator|.
name|startElement
argument_list|(
literal|"li"
argument_list|,
name|attrs
argument_list|)
expr_stmt|;
name|handler
operator|.
name|characters
argument_list|(
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|handler
operator|.
name|endElement
argument_list|(
literal|"li"
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|handleSignature
parameter_list|(
name|AttributesImpl
name|parentAttributes
parameter_list|,
name|PDSignatureField
name|sigField
parameter_list|,
name|XHTMLContentHandler
name|handler
parameter_list|)
throws|throws
name|SAXException
block|{
name|PDSignature
name|sig
init|=
name|sigField
operator|.
name|getSignature
argument_list|()
decl_stmt|;
if|if
condition|(
name|sig
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|vals
init|=
operator|new
name|TreeMap
argument_list|<>
argument_list|()
decl_stmt|;
name|vals
operator|.
name|put
argument_list|(
literal|"name"
argument_list|,
name|sig
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|vals
operator|.
name|put
argument_list|(
literal|"contactInfo"
argument_list|,
name|sig
operator|.
name|getContactInfo
argument_list|()
argument_list|)
expr_stmt|;
name|vals
operator|.
name|put
argument_list|(
literal|"location"
argument_list|,
name|sig
operator|.
name|getLocation
argument_list|()
argument_list|)
expr_stmt|;
name|vals
operator|.
name|put
argument_list|(
literal|"reason"
argument_list|,
name|sig
operator|.
name|getReason
argument_list|()
argument_list|)
expr_stmt|;
name|Calendar
name|cal
init|=
name|sig
operator|.
name|getSignDate
argument_list|()
decl_stmt|;
if|if
condition|(
name|cal
operator|!=
literal|null
condition|)
block|{
name|dateFormat
operator|.
name|setTimeZone
argument_list|(
name|cal
operator|.
name|getTimeZone
argument_list|()
argument_list|)
expr_stmt|;
name|vals
operator|.
name|put
argument_list|(
literal|"date"
argument_list|,
name|dateFormat
operator|.
name|format
argument_list|(
name|cal
operator|.
name|getTime
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|//see if there is any data
name|int
name|nonNull
init|=
literal|0
decl_stmt|;
for|for
control|(
name|String
name|val
range|:
name|vals
operator|.
name|keySet
argument_list|()
control|)
block|{
if|if
condition|(
name|val
operator|!=
literal|null
operator|&&
operator|!
name|val
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|)
block|{
name|nonNull
operator|++
expr_stmt|;
block|}
block|}
comment|//if there is, process it
if|if
condition|(
name|nonNull
operator|>
literal|0
condition|)
block|{
name|handler
operator|.
name|startElement
argument_list|(
literal|"li"
argument_list|,
name|parentAttributes
argument_list|)
expr_stmt|;
name|AttributesImpl
name|attrs
init|=
operator|new
name|AttributesImpl
argument_list|()
decl_stmt|;
name|attrs
operator|.
name|addAttribute
argument_list|(
literal|""
argument_list|,
literal|"type"
argument_list|,
literal|"type"
argument_list|,
literal|"CDATA"
argument_list|,
literal|"signaturedata"
argument_list|)
expr_stmt|;
name|handler
operator|.
name|startElement
argument_list|(
literal|"ol"
argument_list|,
name|attrs
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|e
range|:
name|vals
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|e
operator|.
name|getValue
argument_list|()
operator|==
literal|null
operator|||
name|e
operator|.
name|getValue
argument_list|()
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|attrs
operator|=
operator|new
name|AttributesImpl
argument_list|()
expr_stmt|;
name|attrs
operator|.
name|addAttribute
argument_list|(
literal|""
argument_list|,
literal|"signdata"
argument_list|,
literal|"signdata"
argument_list|,
literal|"CDATA"
argument_list|,
name|e
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|handler
operator|.
name|startElement
argument_list|(
literal|"li"
argument_list|,
name|attrs
argument_list|)
expr_stmt|;
name|handler
operator|.
name|characters
argument_list|(
name|e
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|handler
operator|.
name|endElement
argument_list|(
literal|"li"
argument_list|)
expr_stmt|;
block|}
name|handler
operator|.
name|endElement
argument_list|(
literal|"ol"
argument_list|)
expr_stmt|;
name|handler
operator|.
name|endElement
argument_list|(
literal|"li"
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|handleCatchableIOE
parameter_list|(
name|IOException
name|e
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|config
operator|.
name|isCatchIntermediateIOExceptions
argument_list|()
condition|)
block|{
name|String
name|msg
init|=
name|e
operator|.
name|getMessage
argument_list|()
decl_stmt|;
if|if
condition|(
name|msg
operator|==
literal|null
condition|)
block|{
name|msg
operator|=
literal|"IOException, no message"
expr_stmt|;
block|}
name|metadata
operator|.
name|add
argument_list|(
name|TikaCoreProperties
operator|.
name|TIKA_META_EXCEPTION_WARNING
argument_list|,
name|msg
argument_list|)
expr_stmt|;
name|exceptions
operator|.
name|add
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
name|e
throw|;
block|}
block|}
block|}
end_class

end_unit

