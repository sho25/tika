begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|iwork
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|metadata
operator|.
name|Metadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|metadata
operator|.
name|Property
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|metadata
operator|.
name|TikaCoreProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|sax
operator|.
name|XHTMLContentHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|Attributes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|helpers
operator|.
name|DefaultHandler
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_class
class|class
name|PagesContentHandler
extends|extends
name|DefaultHandler
block|{
specifier|private
specifier|final
name|XHTMLContentHandler
name|xhtml
decl_stmt|;
specifier|private
specifier|final
name|Metadata
name|metadata
decl_stmt|;
comment|/** The (interesting) part of the document we're in. Should be more structured... */
specifier|private
enum|enum
name|DocumentPart
block|{
name|METADATA
block|,
name|PARSABLE_TEXT
block|,
name|HEADERS
block|,
name|HEADER_ODD
block|,
name|HEADER_EVEN
block|,
name|HEADER_FIRST
block|,
name|FOOTERS
block|,
name|FOOTER_ODD
block|,
name|FOOTER_EVEN
block|,
name|FOOTER_FIRST
block|,
name|FOOTNOTES
block|,
name|ANNOTATIONS
block|;     }
specifier|private
name|DocumentPart
name|inPart
init|=
literal|null
decl_stmt|;
specifier|private
name|boolean
name|ghostText
decl_stmt|;
specifier|private
specifier|static
name|String
name|alphabet
init|=
literal|"ABCDEFGHIJKLMNOPQRSTUVWXYZ"
decl_stmt|;
specifier|private
name|boolean
name|parseProperty
init|=
literal|false
decl_stmt|;
specifier|private
name|int
name|pageCount
init|=
literal|0
decl_stmt|;
specifier|private
name|int
name|slPageCount
init|=
literal|0
decl_stmt|;
specifier|private
name|HeaderFooter
name|headers
init|=
literal|null
decl_stmt|;
specifier|private
name|HeaderFooter
name|footers
init|=
literal|null
decl_stmt|;
specifier|private
name|Footnotes
name|footnotes
init|=
literal|null
decl_stmt|;
specifier|private
name|Annotations
name|annotations
init|=
literal|null
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|>
name|tableData
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|String
name|activeTableId
decl_stmt|;
specifier|private
name|int
name|numberOfColumns
init|=
literal|0
decl_stmt|;
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|activeRow
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|String
name|metaDataLocalName
decl_stmt|;
specifier|private
name|String
name|metaDataQName
decl_stmt|;
name|PagesContentHandler
parameter_list|(
name|XHTMLContentHandler
name|xhtml
parameter_list|,
name|Metadata
name|metadata
parameter_list|)
block|{
name|this
operator|.
name|xhtml
operator|=
name|xhtml
expr_stmt|;
name|this
operator|.
name|metadata
operator|=
name|metadata
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|endDocument
parameter_list|()
throws|throws
name|SAXException
block|{
name|metadata
operator|.
name|set
argument_list|(
name|Metadata
operator|.
name|PAGE_COUNT
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|pageCount
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|pageCount
operator|>
literal|0
condition|)
block|{
name|doFooter
argument_list|()
expr_stmt|;
name|xhtml
operator|.
name|endElement
argument_list|(
literal|"div"
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|startElement
parameter_list|(
name|String
name|uri
parameter_list|,
name|String
name|localName
parameter_list|,
name|String
name|qName
parameter_list|,
name|Attributes
name|attributes
parameter_list|)
throws|throws
name|SAXException
block|{
if|if
condition|(
name|parseProperty
condition|)
block|{
name|String
name|value
init|=
name|parsePrimitiveElementValue
argument_list|(
name|qName
argument_list|,
name|attributes
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
name|Object
name|metaDataKey
init|=
name|resolveMetaDataKey
argument_list|(
name|metaDataLocalName
argument_list|)
decl_stmt|;
if|if
condition|(
name|metaDataKey
operator|instanceof
name|Property
condition|)
block|{
name|metadata
operator|.
name|set
argument_list|(
operator|(
name|Property
operator|)
name|metaDataKey
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|metadata
operator|.
name|add
argument_list|(
operator|(
name|String
operator|)
name|metaDataKey
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
literal|"sl:publication-info"
operator|.
name|equals
argument_list|(
name|qName
argument_list|)
condition|)
block|{
name|inPart
operator|=
name|DocumentPart
operator|.
name|METADATA
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"sf:metadata"
operator|.
name|equals
argument_list|(
name|qName
argument_list|)
condition|)
block|{
name|inPart
operator|=
name|DocumentPart
operator|.
name|METADATA
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"sf:page-start"
operator|.
name|equals
argument_list|(
name|qName
argument_list|)
operator|||
literal|"sl:page-group"
operator|.
name|equals
argument_list|(
name|qName
argument_list|)
condition|)
block|{
if|if
condition|(
name|pageCount
operator|>
literal|0
condition|)
block|{
name|doFooter
argument_list|()
expr_stmt|;
name|xhtml
operator|.
name|endElement
argument_list|(
literal|"div"
argument_list|)
expr_stmt|;
block|}
name|xhtml
operator|.
name|startElement
argument_list|(
literal|"div"
argument_list|)
expr_stmt|;
if|if
condition|(
literal|"sl:page-group"
operator|.
name|equals
argument_list|(
name|qName
argument_list|)
condition|)
block|{
name|slPageCount
operator|++
expr_stmt|;
block|}
else|else
block|{
name|pageCount
operator|++
expr_stmt|;
block|}
name|doHeader
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"sf:p"
operator|.
name|equals
argument_list|(
name|qName
argument_list|)
condition|)
block|{
if|if
condition|(
name|pageCount
operator|+
name|slPageCount
operator|>
literal|0
condition|)
block|{
name|inPart
operator|=
name|DocumentPart
operator|.
name|PARSABLE_TEXT
expr_stmt|;
name|xhtml
operator|.
name|startElement
argument_list|(
literal|"p"
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
literal|"sf:attachment"
operator|.
name|equals
argument_list|(
name|qName
argument_list|)
condition|)
block|{
name|String
name|kind
init|=
name|attributes
operator|.
name|getValue
argument_list|(
literal|"sf:kind"
argument_list|)
decl_stmt|;
if|if
condition|(
literal|"tabular-attachment"
operator|.
name|equals
argument_list|(
name|kind
argument_list|)
condition|)
block|{
name|activeTableId
operator|=
name|attributes
operator|.
name|getValue
argument_list|(
literal|"sfa:ID"
argument_list|)
expr_stmt|;
name|tableData
operator|.
name|put
argument_list|(
name|activeTableId
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
literal|"sf:attachment-ref"
operator|.
name|equals
argument_list|(
name|qName
argument_list|)
condition|)
block|{
name|String
name|idRef
init|=
name|attributes
operator|.
name|getValue
argument_list|(
literal|"sfa:IDREF"
argument_list|)
decl_stmt|;
name|outputTable
argument_list|(
name|idRef
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"sf:headers"
operator|.
name|equals
argument_list|(
name|qName
argument_list|)
condition|)
block|{
name|headers
operator|=
operator|new
name|HeaderFooter
argument_list|(
name|qName
argument_list|)
expr_stmt|;
name|inPart
operator|=
name|DocumentPart
operator|.
name|HEADERS
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"sf:footers"
operator|.
name|equals
argument_list|(
name|qName
argument_list|)
condition|)
block|{
name|footers
operator|=
operator|new
name|HeaderFooter
argument_list|(
name|qName
argument_list|)
expr_stmt|;
name|inPart
operator|=
name|DocumentPart
operator|.
name|FOOTERS
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"sf:header"
operator|.
name|equals
argument_list|(
name|qName
argument_list|)
condition|)
block|{
name|inPart
operator|=
name|headers
operator|.
name|identifyPart
argument_list|(
name|attributes
operator|.
name|getValue
argument_list|(
literal|"sf:name"
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"sf:footer"
operator|.
name|equals
argument_list|(
name|qName
argument_list|)
condition|)
block|{
name|inPart
operator|=
name|footers
operator|.
name|identifyPart
argument_list|(
name|attributes
operator|.
name|getValue
argument_list|(
literal|"sf:name"
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"sf:page-number"
operator|.
name|equals
argument_list|(
name|qName
argument_list|)
condition|)
block|{
if|if
condition|(
name|inPart
operator|==
name|DocumentPart
operator|.
name|FOOTER_ODD
operator|||
name|inPart
operator|==
name|DocumentPart
operator|.
name|FOOTER_FIRST
operator|||
name|inPart
operator|==
name|DocumentPart
operator|.
name|FOOTER_EVEN
condition|)
block|{
comment|// We are in a footer
name|footers
operator|.
name|hasAutoPageNumber
operator|=
literal|true
expr_stmt|;
name|footers
operator|.
name|autoPageNumberFormat
operator|=
name|attributes
operator|.
name|getValue
argument_list|(
literal|"sf:format"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|headers
operator|.
name|hasAutoPageNumber
operator|=
literal|true
expr_stmt|;
name|headers
operator|.
name|autoPageNumberFormat
operator|=
name|attributes
operator|.
name|getValue
argument_list|(
literal|"sf:format"
argument_list|)
expr_stmt|;
block|}
name|xhtml
operator|.
name|characters
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|this
operator|.
name|pageCount
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"sf:footnotes"
operator|.
name|equals
argument_list|(
name|qName
argument_list|)
condition|)
block|{
name|footnotes
operator|=
operator|new
name|Footnotes
argument_list|()
expr_stmt|;
name|inPart
operator|=
name|DocumentPart
operator|.
name|FOOTNOTES
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"sf:footnote-mark"
operator|.
name|equals
argument_list|(
name|qName
argument_list|)
condition|)
block|{
name|footnotes
operator|.
name|recordMark
argument_list|(
name|attributes
operator|.
name|getValue
argument_list|(
literal|"sf:mark"
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"sf:footnote"
operator|.
name|equals
argument_list|(
name|qName
argument_list|)
operator|&&
name|inPart
operator|==
name|DocumentPart
operator|.
name|PARSABLE_TEXT
condition|)
block|{
comment|// What about non auto-numbered?
name|String
name|footnoteMark
init|=
name|attributes
operator|.
name|getValue
argument_list|(
literal|"sf:autonumber"
argument_list|)
decl_stmt|;
if|if
condition|(
name|footnotes
operator|!=
literal|null
condition|)
block|{
name|String
name|footnoteText
init|=
name|footnotes
operator|.
name|footnotes
operator|.
name|get
argument_list|(
name|footnoteMark
argument_list|)
decl_stmt|;
if|if
condition|(
name|footnoteText
operator|!=
literal|null
condition|)
block|{
name|xhtml
operator|.
name|startElement
argument_list|(
literal|"div"
argument_list|,
literal|"style"
argument_list|,
literal|"footnote"
argument_list|)
expr_stmt|;
name|xhtml
operator|.
name|characters
argument_list|(
literal|"Footnote:"
argument_list|)
expr_stmt|;
comment|// As shown in Pages
name|xhtml
operator|.
name|characters
argument_list|(
name|footnoteText
argument_list|)
expr_stmt|;
name|xhtml
operator|.
name|endElement
argument_list|(
literal|"div"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
elseif|else
if|if
condition|(
literal|"sf:annotations"
operator|.
name|equals
argument_list|(
name|qName
argument_list|)
condition|)
block|{
name|annotations
operator|=
operator|new
name|Annotations
argument_list|()
expr_stmt|;
name|inPart
operator|=
name|DocumentPart
operator|.
name|ANNOTATIONS
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"sf:annotation"
operator|.
name|equals
argument_list|(
name|qName
argument_list|)
operator|&&
name|inPart
operator|==
name|DocumentPart
operator|.
name|ANNOTATIONS
condition|)
block|{
name|annotations
operator|.
name|start
argument_list|(
name|attributes
operator|.
name|getValue
argument_list|(
literal|"sf:target"
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"sf:annotation-field"
operator|.
name|equals
argument_list|(
name|qName
argument_list|)
operator|&&
name|inPart
operator|==
name|DocumentPart
operator|.
name|PARSABLE_TEXT
condition|)
block|{
name|xhtml
operator|.
name|startElement
argument_list|(
literal|"div"
argument_list|,
literal|"style"
argument_list|,
literal|"annotated"
argument_list|)
expr_stmt|;
name|String
name|annotationText
init|=
name|annotations
operator|.
name|annotations
operator|.
name|get
argument_list|(
name|attributes
operator|.
name|getValue
argument_list|(
literal|"sfa:ID"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|annotationText
operator|!=
literal|null
condition|)
block|{
name|xhtml
operator|.
name|startElement
argument_list|(
literal|"div"
argument_list|,
literal|"style"
argument_list|,
literal|"annotation"
argument_list|)
expr_stmt|;
name|xhtml
operator|.
name|characters
argument_list|(
name|annotationText
argument_list|)
expr_stmt|;
name|xhtml
operator|.
name|endElement
argument_list|(
literal|"div"
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
literal|"sf:ghost-text"
operator|.
name|equals
argument_list|(
name|qName
argument_list|)
condition|)
block|{
name|ghostText
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|activeTableId
operator|!=
literal|null
condition|)
block|{
name|parseTableData
argument_list|(
name|qName
argument_list|,
name|attributes
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|inPart
operator|==
name|DocumentPart
operator|.
name|METADATA
condition|)
block|{
name|metaDataLocalName
operator|=
name|localName
expr_stmt|;
name|metaDataQName
operator|=
name|qName
expr_stmt|;
name|parseProperty
operator|=
literal|true
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|endElement
parameter_list|(
name|String
name|uri
parameter_list|,
name|String
name|localName
parameter_list|,
name|String
name|qName
parameter_list|)
throws|throws
name|SAXException
block|{
if|if
condition|(
name|metaDataLocalName
operator|!=
literal|null
operator|&&
name|metaDataLocalName
operator|.
name|equals
argument_list|(
name|localName
argument_list|)
condition|)
block|{
name|metaDataLocalName
operator|=
literal|null
expr_stmt|;
name|parseProperty
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
literal|"sl:publication-info"
operator|.
name|equals
argument_list|(
name|qName
argument_list|)
condition|)
block|{
name|inPart
operator|=
literal|null
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"sf:metadata"
operator|.
name|equals
argument_list|(
name|qName
argument_list|)
condition|)
block|{
name|inPart
operator|=
literal|null
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"sf:p"
operator|.
name|equals
argument_list|(
name|qName
argument_list|)
operator|&&
operator|(
name|pageCount
operator|+
name|slPageCount
operator|)
operator|>
literal|0
condition|)
block|{
name|inPart
operator|=
literal|null
expr_stmt|;
name|xhtml
operator|.
name|endElement
argument_list|(
literal|"p"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"sf:attachment"
operator|.
name|equals
argument_list|(
name|qName
argument_list|)
condition|)
block|{
name|activeTableId
operator|=
literal|null
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"sf:annotation"
operator|.
name|equals
argument_list|(
name|qName
argument_list|)
operator|&&
name|inPart
operator|==
name|DocumentPart
operator|.
name|ANNOTATIONS
condition|)
block|{
name|annotations
operator|.
name|end
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"sf:annotation-field"
operator|.
name|equals
argument_list|(
name|qName
argument_list|)
operator|&&
name|inPart
operator|==
name|DocumentPart
operator|.
name|PARSABLE_TEXT
condition|)
block|{
name|xhtml
operator|.
name|endElement
argument_list|(
literal|"div"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"sf:ghost-text"
operator|.
name|equals
argument_list|(
name|qName
argument_list|)
condition|)
block|{
name|ghostText
operator|=
literal|false
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|characters
parameter_list|(
name|char
index|[]
name|ch
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|length
parameter_list|)
throws|throws
name|SAXException
block|{
if|if
condition|(
name|length
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|inPart
operator|==
name|DocumentPart
operator|.
name|PARSABLE_TEXT
condition|)
block|{
if|if
condition|(
operator|!
name|ghostText
condition|)
block|{
name|xhtml
operator|.
name|characters
argument_list|(
name|ch
argument_list|,
name|start
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|inPart
operator|!=
literal|null
condition|)
block|{
name|String
name|str
init|=
operator|new
name|String
argument_list|(
name|ch
argument_list|,
name|start
argument_list|,
name|length
argument_list|)
decl_stmt|;
if|if
condition|(
name|inPart
operator|==
name|DocumentPart
operator|.
name|HEADER_FIRST
condition|)
name|headers
operator|.
name|defaultFirst
operator|=
name|str
expr_stmt|;
if|if
condition|(
name|inPart
operator|==
name|DocumentPart
operator|.
name|HEADER_EVEN
condition|)
name|headers
operator|.
name|defaultEven
operator|=
name|str
expr_stmt|;
if|if
condition|(
name|inPart
operator|==
name|DocumentPart
operator|.
name|HEADER_ODD
condition|)
name|headers
operator|.
name|defaultOdd
operator|=
name|str
expr_stmt|;
if|if
condition|(
name|inPart
operator|==
name|DocumentPart
operator|.
name|FOOTER_FIRST
condition|)
name|footers
operator|.
name|defaultFirst
operator|=
name|str
expr_stmt|;
if|if
condition|(
name|inPart
operator|==
name|DocumentPart
operator|.
name|FOOTER_EVEN
condition|)
name|footers
operator|.
name|defaultEven
operator|=
name|str
expr_stmt|;
if|if
condition|(
name|inPart
operator|==
name|DocumentPart
operator|.
name|FOOTER_ODD
condition|)
name|footers
operator|.
name|defaultOdd
operator|=
name|str
expr_stmt|;
if|if
condition|(
name|inPart
operator|==
name|DocumentPart
operator|.
name|FOOTNOTES
condition|)
name|footnotes
operator|.
name|text
argument_list|(
name|str
argument_list|)
expr_stmt|;
if|if
condition|(
name|inPart
operator|==
name|DocumentPart
operator|.
name|ANNOTATIONS
condition|)
name|annotations
operator|.
name|text
argument_list|(
name|str
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|parseTableData
parameter_list|(
name|String
name|qName
parameter_list|,
name|Attributes
name|attributes
parameter_list|)
block|{
if|if
condition|(
literal|"sf:grid"
operator|.
name|equals
argument_list|(
name|qName
argument_list|)
condition|)
block|{
name|String
name|numberOfColumns
init|=
name|attributes
operator|.
name|getValue
argument_list|(
literal|"sf:numcols"
argument_list|)
decl_stmt|;
name|this
operator|.
name|numberOfColumns
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|numberOfColumns
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"sf:ct"
operator|.
name|equals
argument_list|(
name|qName
argument_list|)
condition|)
block|{
name|activeRow
operator|.
name|add
argument_list|(
name|attributes
operator|.
name|getValue
argument_list|(
literal|"sfa:s"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|activeRow
operator|.
name|size
argument_list|()
operator|>=
literal|3
condition|)
block|{
name|tableData
operator|.
name|get
argument_list|(
name|activeTableId
argument_list|)
operator|.
name|add
argument_list|(
name|activeRow
argument_list|)
expr_stmt|;
name|activeRow
operator|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|outputTable
parameter_list|(
name|String
name|idRef
parameter_list|)
throws|throws
name|SAXException
block|{
name|List
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|tableData
init|=
name|this
operator|.
name|tableData
operator|.
name|get
argument_list|(
name|idRef
argument_list|)
decl_stmt|;
if|if
condition|(
name|tableData
operator|!=
literal|null
condition|)
block|{
name|xhtml
operator|.
name|startElement
argument_list|(
literal|"table"
argument_list|)
expr_stmt|;
for|for
control|(
name|List
argument_list|<
name|String
argument_list|>
name|row
range|:
name|tableData
control|)
block|{
name|xhtml
operator|.
name|startElement
argument_list|(
literal|"tr"
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|cell
range|:
name|row
control|)
block|{
name|xhtml
operator|.
name|element
argument_list|(
literal|"td"
argument_list|,
name|cell
argument_list|)
expr_stmt|;
block|}
name|xhtml
operator|.
name|endElement
argument_list|(
literal|"tr"
argument_list|)
expr_stmt|;
block|}
name|xhtml
operator|.
name|endElement
argument_list|(
literal|"table"
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Returns a resolved key that is common in other document types or      * returns the specified metaDataLocalName if no common key could be found.      * The key could be a simple String key, or could be a {@link Property}      *      * @param metaDataLocalName The localname of the element containing metadata      * @return a resolved key that is common in other document types      */
specifier|private
name|Object
name|resolveMetaDataKey
parameter_list|(
name|String
name|metaDataLocalName
parameter_list|)
block|{
name|Object
name|metaDataKey
init|=
name|metaDataLocalName
decl_stmt|;
if|if
condition|(
literal|"sf:authors"
operator|.
name|equals
argument_list|(
name|metaDataQName
argument_list|)
condition|)
block|{
name|metaDataKey
operator|=
name|TikaCoreProperties
operator|.
name|CREATOR
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"sf:title"
operator|.
name|equals
argument_list|(
name|metaDataQName
argument_list|)
condition|)
block|{
name|metaDataKey
operator|=
name|TikaCoreProperties
operator|.
name|TITLE
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"sl:SLCreationDateProperty"
operator|.
name|equals
argument_list|(
name|metaDataQName
argument_list|)
condition|)
block|{
name|metaDataKey
operator|=
name|TikaCoreProperties
operator|.
name|CREATED
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"sl:SLLastModifiedDateProperty"
operator|.
name|equals
argument_list|(
name|metaDataQName
argument_list|)
condition|)
block|{
name|metaDataKey
operator|=
name|Metadata
operator|.
name|LAST_MODIFIED
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"sl:language"
operator|.
name|equals
argument_list|(
name|metaDataQName
argument_list|)
condition|)
block|{
name|metaDataKey
operator|=
name|TikaCoreProperties
operator|.
name|LANGUAGE
expr_stmt|;
block|}
return|return
name|metaDataKey
return|;
block|}
comment|/**      * Returns the value of a primitive element e.g.:      *&lt;sl:number sfa:number="0" sfa:type="f"/&gt; - the number attribute      *&lt;sl:string sfa:string="en"/&gt; = the string attribute      *<p>      * Returns<code>null</code> if the value could not be extracted from      * the list of attributes.      *      * @param qName      The fully qualified name of the element containing      *                   the value to extract      * @param attributes The list of attributes of which one contains the      *                   value to be extracted      * @return the value of a primitive element      */
specifier|private
name|String
name|parsePrimitiveElementValue
parameter_list|(
name|String
name|qName
parameter_list|,
name|Attributes
name|attributes
parameter_list|)
block|{
if|if
condition|(
literal|"sl:string"
operator|.
name|equals
argument_list|(
name|qName
argument_list|)
operator|||
literal|"sf:string"
operator|.
name|equals
argument_list|(
name|qName
argument_list|)
condition|)
block|{
return|return
name|attributes
operator|.
name|getValue
argument_list|(
literal|"sfa:string"
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
literal|"sl:number"
operator|.
name|equals
argument_list|(
name|qName
argument_list|)
condition|)
block|{
return|return
name|attributes
operator|.
name|getValue
argument_list|(
literal|"sfa:number"
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
literal|"sl:date"
operator|.
name|equals
argument_list|(
name|qName
argument_list|)
condition|)
block|{
return|return
name|attributes
operator|.
name|getValue
argument_list|(
literal|"sf:val"
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|private
name|void
name|doHeader
parameter_list|()
throws|throws
name|SAXException
block|{
if|if
condition|(
name|headers
operator|!=
literal|null
condition|)
block|{
name|headers
operator|.
name|output
argument_list|(
literal|"header"
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|doFooter
parameter_list|()
throws|throws
name|SAXException
block|{
if|if
condition|(
name|footers
operator|!=
literal|null
condition|)
block|{
name|footers
operator|.
name|output
argument_list|(
literal|"footer"
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Represents the Headers or Footers in a document      */
specifier|private
class|class
name|HeaderFooter
block|{
specifier|private
name|String
name|type
decl_stmt|;
comment|// sf:headers or sf:footers
specifier|private
name|String
name|defaultOdd
decl_stmt|;
specifier|private
name|String
name|defaultEven
decl_stmt|;
specifier|private
name|String
name|defaultFirst
decl_stmt|;
specifier|private
name|boolean
name|hasAutoPageNumber
decl_stmt|;
specifier|private
name|String
name|autoPageNumberFormat
decl_stmt|;
comment|// TODO Can there be custom ones?
specifier|private
name|HeaderFooter
parameter_list|(
name|String
name|type
parameter_list|)
block|{
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
block|}
specifier|private
name|DocumentPart
name|identifyPart
parameter_list|(
name|String
name|name
parameter_list|)
block|{
if|if
condition|(
literal|"SFWPDefaultOddHeaderIdentifier"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
return|return
name|DocumentPart
operator|.
name|HEADER_ODD
return|;
if|if
condition|(
literal|"SFWPDefaultEvenHeaderIdentifier"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
return|return
name|DocumentPart
operator|.
name|HEADER_EVEN
return|;
if|if
condition|(
literal|"SFWPDefaultFirstHeaderIdentifier"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
return|return
name|DocumentPart
operator|.
name|HEADER_FIRST
return|;
if|if
condition|(
literal|"SFWPDefaultOddFooterIdentifier"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
return|return
name|DocumentPart
operator|.
name|FOOTER_ODD
return|;
if|if
condition|(
literal|"SFWPDefaultEvenFooterIdentifier"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
return|return
name|DocumentPart
operator|.
name|FOOTER_EVEN
return|;
if|if
condition|(
literal|"SFWPDefaultFirstFooterIdentifier"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
return|return
name|DocumentPart
operator|.
name|FOOTER_FIRST
return|;
return|return
literal|null
return|;
block|}
specifier|private
name|void
name|output
parameter_list|(
name|String
name|what
parameter_list|)
throws|throws
name|SAXException
block|{
name|String
name|text
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|pageCount
operator|==
literal|1
operator|&&
name|defaultFirst
operator|!=
literal|null
condition|)
block|{
name|text
operator|=
name|defaultFirst
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|pageCount
operator|%
literal|2
operator|==
literal|0
operator|&&
name|defaultEven
operator|!=
literal|null
condition|)
block|{
name|text
operator|=
name|defaultEven
expr_stmt|;
block|}
else|else
block|{
name|text
operator|=
name|defaultOdd
expr_stmt|;
block|}
if|if
condition|(
name|text
operator|!=
literal|null
condition|)
block|{
name|xhtml
operator|.
name|startElement
argument_list|(
literal|"div"
argument_list|,
literal|"class"
argument_list|,
literal|"header"
argument_list|)
expr_stmt|;
name|xhtml
operator|.
name|characters
argument_list|(
name|text
argument_list|)
expr_stmt|;
if|if
condition|(
name|hasAutoPageNumber
condition|)
block|{
if|if
condition|(
name|autoPageNumberFormat
operator|==
literal|null
condition|)
block|{
comment|// raw number
name|xhtml
operator|.
name|characters
argument_list|(
literal|"\t"
operator|+
name|pageCount
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|autoPageNumberFormat
operator|.
name|equals
argument_list|(
literal|"upper-roman"
argument_list|)
condition|)
block|{
name|xhtml
operator|.
name|characters
argument_list|(
literal|"\t"
operator|+
name|AutoPageNumberUtils
operator|.
name|asRomanNumerals
argument_list|(
name|pageCount
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|autoPageNumberFormat
operator|.
name|equals
argument_list|(
literal|"lower-roman"
argument_list|)
condition|)
block|{
name|xhtml
operator|.
name|characters
argument_list|(
literal|"\t"
operator|+
name|AutoPageNumberUtils
operator|.
name|asRomanNumeralsLower
argument_list|(
name|pageCount
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|autoPageNumberFormat
operator|.
name|equals
argument_list|(
literal|"upper-alpha"
argument_list|)
condition|)
block|{
name|xhtml
operator|.
name|characters
argument_list|(
literal|"\t"
operator|+
name|AutoPageNumberUtils
operator|.
name|asAlphaNumeric
argument_list|(
name|pageCount
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|autoPageNumberFormat
operator|.
name|equals
argument_list|(
literal|"lower-alpha"
argument_list|)
condition|)
block|{
name|xhtml
operator|.
name|characters
argument_list|(
literal|"\t"
operator|+
name|AutoPageNumberUtils
operator|.
name|asAlphaNumericLower
argument_list|(
name|pageCount
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|xhtml
operator|.
name|endElement
argument_list|(
literal|"div"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Represents Footnotes in a document. The way these work      *  in the file format isn't very clean...      */
specifier|private
specifier|static
class|class
name|Footnotes
block|{
comment|/** Mark -> Text */
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|footnotes
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|String
name|lastSeenMark
init|=
literal|null
decl_stmt|;
comment|/**         * Normally happens before the text of the mark         */
specifier|private
name|void
name|recordMark
parameter_list|(
name|String
name|mark
parameter_list|)
block|{
name|lastSeenMark
operator|=
name|mark
expr_stmt|;
block|}
specifier|private
name|void
name|text
parameter_list|(
name|String
name|text
parameter_list|)
block|{
if|if
condition|(
name|lastSeenMark
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|footnotes
operator|.
name|containsKey
argument_list|(
name|lastSeenMark
argument_list|)
condition|)
block|{
name|text
operator|=
name|footnotes
operator|.
name|get
argument_list|(
name|lastSeenMark
argument_list|)
operator|+
name|text
expr_stmt|;
block|}
name|footnotes
operator|.
name|put
argument_list|(
name|lastSeenMark
argument_list|,
name|text
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Represents Annotations in a document. We currently      *  just grab all the sf:p text in each one       */
specifier|private
class|class
name|Annotations
block|{
comment|/** ID -> Text */
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|annotations
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|String
name|currentID
init|=
literal|null
decl_stmt|;
name|StringBuffer
name|currentText
init|=
literal|null
decl_stmt|;
specifier|private
name|void
name|start
parameter_list|(
name|String
name|id
parameter_list|)
block|{
name|currentID
operator|=
name|id
expr_stmt|;
name|currentText
operator|=
operator|new
name|StringBuffer
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|text
parameter_list|(
name|String
name|text
parameter_list|)
block|{
if|if
condition|(
name|text
operator|!=
literal|null
operator|&&
name|text
operator|.
name|length
argument_list|()
operator|>
literal|0
operator|&&
name|currentText
operator|!=
literal|null
condition|)
block|{
name|currentText
operator|.
name|append
argument_list|(
name|text
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|end
parameter_list|()
block|{
if|if
condition|(
name|currentText
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|annotations
operator|.
name|put
argument_list|(
name|currentID
argument_list|,
name|currentText
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|currentID
operator|=
literal|null
expr_stmt|;
name|currentText
operator|=
literal|null
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

