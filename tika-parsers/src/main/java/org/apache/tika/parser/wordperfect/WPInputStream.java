begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|wordperfect
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|EOFException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|StringUtils
import|;
end_import

begin_comment
comment|/**  * {@link InputStream} wrapper adding WordPerfect-specific byte-reading methods.  * Applies to both 5.x and 6+ documents.  * @author Pascal Essiembre  */
end_comment

begin_class
class|class
name|WPInputStream
extends|extends
name|InputStream
block|{
specifier|private
specifier|final
name|DataInputStream
name|in
decl_stmt|;
comment|/**      * Constructor.      * @param in input stream      */
specifier|public
name|WPInputStream
parameter_list|(
name|InputStream
name|in
parameter_list|)
block|{
if|if
condition|(
operator|!
name|in
operator|.
name|markSupported
argument_list|()
condition|)
block|{
name|in
operator|=
operator|new
name|BufferedInputStream
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|in
operator|=
operator|new
name|DataInputStream
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
comment|/**      * Reads a WordPerfect "short": a 2 bytes (16-bit) unsigned value in       * reverse order.      * @return an integer value      * @throws IOException if not enough bytes remain      */
specifier|public
name|int
name|readWPShort
parameter_list|()
throws|throws
name|IOException
block|{
name|int
name|ch1
init|=
name|in
operator|.
name|read
argument_list|()
decl_stmt|;
name|int
name|ch2
init|=
name|in
operator|.
name|read
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
name|ch1
operator||
name|ch2
operator|)
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|EOFException
argument_list|()
throw|;
block|}
return|return
operator|(
name|ch2
operator|<<
literal|8
operator|)
operator|+
operator|(
name|ch1
operator|<<
literal|0
operator|)
return|;
block|}
comment|/**      * Reads a WordPerfect "long": a 4 bytes (32-bit) unsigned value in       * reverse order.      * @return a long value      * @throws IOException if not enough bytes remain      */
specifier|public
name|long
name|readWPLong
parameter_list|()
throws|throws
name|IOException
block|{
name|int
name|ch1
init|=
name|in
operator|.
name|read
argument_list|()
decl_stmt|;
name|int
name|ch2
init|=
name|in
operator|.
name|read
argument_list|()
decl_stmt|;
name|int
name|ch3
init|=
name|in
operator|.
name|read
argument_list|()
decl_stmt|;
name|int
name|ch4
init|=
name|in
operator|.
name|read
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
name|ch1
operator||
name|ch2
operator||
name|ch3
operator||
name|ch4
operator|)
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|EOFException
argument_list|()
throw|;
block|}
return|return
operator|(
operator|(
name|ch4
operator|<<
literal|24
operator|)
operator|+
operator|(
name|ch3
operator|<<
literal|16
operator|)
operator|+
operator|(
name|ch2
operator|<<
literal|8
operator|)
operator|+
operator|(
name|ch1
operator|<<
literal|0
operator|)
operator|)
return|;
block|}
comment|/**      * Reads a WordPerfect byte (8-bit).      * @return byte value      * @throws IOException if not enough bytes remain      */
specifier|public
name|byte
name|readWPByte
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|in
operator|.
name|readByte
argument_list|()
return|;
block|}
comment|/**      * Skips the specified number of WordPerfect byte (8-bit).      * @param numOfBytes number of bytes to skip      * @throws IOException if not enough bytes remain      */
specifier|public
name|void
name|skipWPByte
parameter_list|(
name|int
name|numOfBytes
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numOfBytes
condition|;
name|i
operator|++
control|)
block|{
name|readWPByte
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * Reads a WordPerfect character (8-bit).      * @return character      * @throws IOException if not enough bytes remain      */
specifier|public
name|char
name|readWPChar
parameter_list|()
throws|throws
name|IOException
block|{
name|int
name|c
init|=
name|in
operator|.
name|read
argument_list|()
decl_stmt|;
if|if
condition|(
name|c
operator|==
operator|-
literal|1
condition|)
block|{
throw|throw
operator|new
name|EOFException
argument_list|()
throw|;
block|}
return|return
operator|(
name|char
operator|)
name|c
return|;
block|}
comment|/**      * Reads a WordPerfect string of specified length (1 byte per character).      * @param length how many characters to read      * @return a string       * @throws IOException if not enough bytes remain      */
specifier|public
name|String
name|readWPString
parameter_list|(
name|int
name|length
parameter_list|)
throws|throws
name|IOException
block|{
name|char
index|[]
name|chars
init|=
operator|new
name|char
index|[
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
name|i
operator|++
control|)
block|{
name|int
name|c
init|=
name|in
operator|.
name|read
argument_list|()
decl_stmt|;
if|if
condition|(
name|c
operator|==
operator|-
literal|1
condition|)
block|{
throw|throw
operator|new
name|EOFException
argument_list|()
throw|;
block|}
name|chars
index|[
name|i
index|]
operator|=
operator|(
name|char
operator|)
name|c
expr_stmt|;
block|}
return|return
operator|new
name|String
argument_list|(
name|chars
argument_list|)
return|;
block|}
comment|/**      * Reads a series of bytes of the specified length, converting      * each byte to its hexadecimal representation.      * converting each characters to .      * @param numOfBytes how many byte to read      * @return an hexadecimal string      * @throws IOException if not enough bytes remain      */
specifier|public
name|String
name|readWPHexString
parameter_list|(
name|int
name|numOfBytes
parameter_list|)
throws|throws
name|IOException
block|{
name|StringBuilder
name|b
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numOfBytes
condition|;
name|i
operator|++
control|)
block|{
name|b
operator|.
name|append
argument_list|(
name|readWPHex
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|b
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**      * Reads the next byte and returns it as an hexadecimal value.      * @return hexadecimal string for a single byte      * @throws IOException if not enough bytes remain      */
specifier|public
name|String
name|readWPHex
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|StringUtils
operator|.
name|leftPad
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|readWP
argument_list|()
argument_list|,
literal|16
argument_list|)
argument_list|,
literal|2
argument_list|,
literal|'0'
argument_list|)
return|;
block|}
comment|/**      * Reads a byte      * @return byte read      * @throws IOException if not enough bytes remain      */
specifier|public
name|int
name|readWP
parameter_list|()
throws|throws
name|IOException
block|{
name|int
name|i
init|=
name|read
argument_list|()
decl_stmt|;
if|if
condition|(
name|i
operator|==
operator|-
literal|1
condition|)
block|{
throw|throw
operator|new
name|EOFException
argument_list|()
throw|;
block|}
return|return
name|i
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|read
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|in
operator|.
name|read
argument_list|()
return|;
block|}
comment|/**      * Does not guarantee full buffer is read.      */
annotation|@
name|Override
specifier|public
name|int
name|read
parameter_list|(
name|byte
index|[]
name|b
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|in
operator|.
name|read
argument_list|(
name|b
argument_list|)
return|;
block|}
comment|/**      * Does not guarantee full buffer is read.      */
annotation|@
name|Override
specifier|public
name|int
name|read
parameter_list|(
name|byte
index|[]
name|b
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|in
operator|.
name|read
argument_list|(
name|b
argument_list|,
name|off
argument_list|,
name|len
argument_list|)
return|;
block|}
comment|/**      * Does not guarantee full length is skipped.      */
annotation|@
name|Override
specifier|public
name|long
name|skip
parameter_list|(
name|long
name|n
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|in
operator|.
name|skip
argument_list|(
name|n
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|available
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|in
operator|.
name|available
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
specifier|synchronized
name|void
name|mark
parameter_list|(
name|int
name|readlimit
parameter_list|)
block|{
name|in
operator|.
name|mark
argument_list|(
name|readlimit
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
specifier|synchronized
name|void
name|reset
parameter_list|()
throws|throws
name|IOException
block|{
name|in
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|markSupported
parameter_list|()
block|{
return|return
name|in
operator|.
name|markSupported
argument_list|()
return|;
block|}
block|}
end_class

end_unit

