begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|pdf
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Calendar
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jempbox
operator|.
name|xmp
operator|.
name|XMPMetadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jempbox
operator|.
name|xmp
operator|.
name|XMPSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jempbox
operator|.
name|xmp
operator|.
name|XMPSchemaDublinCore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jempbox
operator|.
name|xmp
operator|.
name|pdfa
operator|.
name|XMPSchemaPDFAId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSArray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSDictionary
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSString
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|common
operator|.
name|PDMetadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|util
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|exception
operator|.
name|TikaException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|extractor
operator|.
name|EmbeddedDocumentUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|metadata
operator|.
name|Metadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|metadata
operator|.
name|PDF
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|metadata
operator|.
name|Property
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|metadata
operator|.
name|TikaCoreProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|mime
operator|.
name|MediaType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|ParseContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|image
operator|.
name|xmp
operator|.
name|JempboxExtractor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|utils
operator|.
name|XMLReaderUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_class
class|class
name|PDMetadataExtractor
block|{
specifier|private
specifier|static
specifier|final
name|MediaType
name|MEDIA_TYPE
init|=
name|MediaType
operator|.
name|application
argument_list|(
literal|"pdf"
argument_list|)
decl_stmt|;
specifier|static
name|void
name|extract
parameter_list|(
name|PDMetadata
name|pdMetadata
parameter_list|,
name|Metadata
name|metadata
parameter_list|,
name|ParseContext
name|context
parameter_list|)
block|{
if|if
condition|(
name|pdMetadata
operator|==
literal|null
condition|)
block|{
return|return;
block|}
comment|//now go for the XMP
name|Document
name|dom
init|=
name|loadDOM
argument_list|(
name|pdMetadata
argument_list|,
name|metadata
argument_list|,
name|context
argument_list|)
decl_stmt|;
name|XMPMetadata
name|xmp
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|dom
operator|!=
literal|null
condition|)
block|{
name|xmp
operator|=
operator|new
name|XMPMetadata
argument_list|(
name|dom
argument_list|)
expr_stmt|;
block|}
name|XMPSchemaDublinCore
name|dcSchema
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|xmp
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|dcSchema
operator|=
name|xmp
operator|.
name|getDublinCoreSchema
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{             }
name|JempboxExtractor
operator|.
name|extractXMPMM
argument_list|(
name|xmp
argument_list|,
name|metadata
argument_list|)
expr_stmt|;
block|}
name|extractMultilingualItems
argument_list|(
name|metadata
argument_list|,
name|TikaCoreProperties
operator|.
name|DESCRIPTION
argument_list|,
literal|null
argument_list|,
name|dcSchema
argument_list|)
expr_stmt|;
name|extractDublinCoreListItems
argument_list|(
name|metadata
argument_list|,
name|TikaCoreProperties
operator|.
name|CONTRIBUTOR
argument_list|,
name|dcSchema
argument_list|)
expr_stmt|;
name|extractDublinCoreListItems
argument_list|(
name|metadata
argument_list|,
name|TikaCoreProperties
operator|.
name|CREATOR
argument_list|,
name|dcSchema
argument_list|)
expr_stmt|;
name|extractMultilingualItems
argument_list|(
name|metadata
argument_list|,
name|TikaCoreProperties
operator|.
name|TITLE
argument_list|,
literal|null
argument_list|,
name|dcSchema
argument_list|)
expr_stmt|;
try|try
block|{
if|if
condition|(
name|xmp
operator|!=
literal|null
condition|)
block|{
name|xmp
operator|.
name|addXMLNSMapping
argument_list|(
name|XMPSchemaPDFAId
operator|.
name|NAMESPACE
argument_list|,
name|XMPSchemaPDFAId
operator|.
name|class
argument_list|)
expr_stmt|;
name|XMPSchemaPDFAId
name|pdfaxmp
init|=
operator|(
name|XMPSchemaPDFAId
operator|)
name|xmp
operator|.
name|getSchemaByClass
argument_list|(
name|XMPSchemaPDFAId
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|pdfaxmp
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|pdfaxmp
operator|.
name|getPart
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|metadata
operator|.
name|set
argument_list|(
name|PDF
operator|.
name|PDFAID_PART
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|pdfaxmp
operator|.
name|getPart
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|pdfaxmp
operator|.
name|getConformance
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|metadata
operator|.
name|set
argument_list|(
name|PDF
operator|.
name|PDFAID_CONFORMANCE
argument_list|,
name|pdfaxmp
operator|.
name|getConformance
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|version
init|=
literal|"A-"
operator|+
name|pdfaxmp
operator|.
name|getPart
argument_list|()
operator|+
name|pdfaxmp
operator|.
name|getConformance
argument_list|()
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|)
decl_stmt|;
name|metadata
operator|.
name|set
argument_list|(
name|PDF
operator|.
name|PDFA_VERSION
argument_list|,
name|version
argument_list|)
expr_stmt|;
name|metadata
operator|.
name|add
argument_list|(
name|TikaCoreProperties
operator|.
name|FORMAT
operator|.
name|getName
argument_list|()
argument_list|,
name|MEDIA_TYPE
operator|.
name|toString
argument_list|()
operator|+
literal|"; version=\""
operator|+
name|version
operator|+
literal|"\""
argument_list|)
expr_stmt|;
block|}
block|}
comment|// TODO WARN if this XMP version is inconsistent with document header version?
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|metadata
operator|.
name|set
argument_list|(
name|TikaCoreProperties
operator|.
name|TIKA_META_PREFIX
operator|+
literal|"pdf:metadata-xmp-parse-failed"
argument_list|,
literal|""
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * As of this writing, XMPSchema can contain bags or sequence lists      * for some attributes...despite standards documentation.      * JempBox expects one or the other for specific attributes.      * Until more flexibility is added to JempBox, Tika will have to handle both.      *      * @param schema      * @param name      * @return list of values or null      */
specifier|static
name|List
argument_list|<
name|String
argument_list|>
name|getXMPBagOrSeqList
parameter_list|(
name|XMPSchema
name|schema
parameter_list|,
name|String
name|name
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|ret
init|=
name|schema
operator|.
name|getBagList
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|ret
operator|==
literal|null
condition|)
block|{
name|ret
operator|=
name|schema
operator|.
name|getSequenceList
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
comment|/**      * Try to extract all multilingual items from the XMPSchema      *<p/>      * This relies on the property having a valid xmp getName()      *<p/>      * For now, this only extracts the first language if the property does not allow multiple values (see TIKA-1295)      *      * @param metadata      * @param property      * @param pdfBoxBaseline      * @param schema      */
specifier|private
specifier|static
name|void
name|extractMultilingualItems
parameter_list|(
name|Metadata
name|metadata
parameter_list|,
name|Property
name|property
parameter_list|,
name|String
name|pdfBoxBaseline
parameter_list|,
name|XMPSchema
name|schema
parameter_list|)
block|{
comment|//if schema is null, just go with pdfBoxBaseline
if|if
condition|(
name|schema
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|pdfBoxBaseline
operator|!=
literal|null
operator|&&
name|pdfBoxBaseline
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|addMetadata
argument_list|(
name|metadata
argument_list|,
name|property
argument_list|,
name|pdfBoxBaseline
argument_list|)
expr_stmt|;
block|}
return|return;
block|}
for|for
control|(
name|String
name|lang
range|:
name|schema
operator|.
name|getLanguagePropertyLanguages
argument_list|(
name|property
operator|.
name|getName
argument_list|()
argument_list|)
control|)
block|{
name|String
name|value
init|=
name|schema
operator|.
name|getLanguageProperty
argument_list|(
name|property
operator|.
name|getName
argument_list|()
argument_list|,
name|lang
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
operator|&&
name|value
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
comment|//if you're going to add it below in the baseline addition, don't add it now
if|if
condition|(
name|pdfBoxBaseline
operator|!=
literal|null
operator|&&
name|value
operator|.
name|equals
argument_list|(
name|pdfBoxBaseline
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|addMetadata
argument_list|(
name|metadata
argument_list|,
name|property
argument_list|,
name|value
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|property
operator|.
name|isMultiValuePermitted
argument_list|()
condition|)
block|{
return|return;
block|}
block|}
block|}
if|if
condition|(
name|pdfBoxBaseline
operator|!=
literal|null
operator|&&
name|pdfBoxBaseline
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
comment|//if we've already added something above and multivalue is not permitted
comment|//return.
if|if
condition|(
operator|!
name|property
operator|.
name|isMultiValuePermitted
argument_list|()
condition|)
block|{
if|if
condition|(
name|metadata
operator|.
name|get
argument_list|(
name|property
argument_list|)
operator|!=
literal|null
condition|)
block|{
return|return;
block|}
block|}
name|addMetadata
argument_list|(
name|metadata
argument_list|,
name|property
argument_list|,
name|pdfBoxBaseline
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * This tries to read a list from a particular property in      * XMPSchemaDublinCore.      *<p/>      * Until PDFBOX-1803/TIKA-1233 are fixed, do not call this      * on dates!      *<p/>      * This relies on the property having a DublinCore compliant getName()      *      * @param property      * @param dc      * @param metadata      */
specifier|private
specifier|static
name|void
name|extractDublinCoreListItems
parameter_list|(
name|Metadata
name|metadata
parameter_list|,
name|Property
name|property
parameter_list|,
name|XMPSchemaDublinCore
name|dc
parameter_list|)
block|{
comment|//if no dc, add baseline and return
if|if
condition|(
name|dc
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|items
init|=
name|getXMPBagOrSeqList
argument_list|(
name|dc
argument_list|,
name|property
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|items
operator|==
literal|null
condition|)
block|{
return|return;
block|}
for|for
control|(
name|String
name|item
range|:
name|items
control|)
block|{
name|addMetadata
argument_list|(
name|metadata
argument_list|,
name|property
argument_list|,
name|item
argument_list|)
expr_stmt|;
block|}
block|}
specifier|static
name|void
name|addMetadata
parameter_list|(
name|Metadata
name|metadata
parameter_list|,
name|Property
name|property
parameter_list|,
name|String
name|value
parameter_list|)
block|{
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
name|String
name|decoded
init|=
name|decode
argument_list|(
name|value
argument_list|)
decl_stmt|;
if|if
condition|(
name|property
operator|.
name|isMultiValuePermitted
argument_list|()
operator|||
name|metadata
operator|.
name|get
argument_list|(
name|property
argument_list|)
operator|==
literal|null
condition|)
block|{
name|metadata
operator|.
name|add
argument_list|(
name|property
argument_list|,
name|decoded
argument_list|)
expr_stmt|;
block|}
comment|//silently skip adding property that already exists if multiple values are not permitted
block|}
block|}
specifier|static
name|void
name|addMetadata
parameter_list|(
name|Metadata
name|metadata
parameter_list|,
name|String
name|name
parameter_list|,
name|String
name|value
parameter_list|)
block|{
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
name|metadata
operator|.
name|add
argument_list|(
name|name
argument_list|,
name|decode
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|static
name|String
name|decode
parameter_list|(
name|String
name|value
parameter_list|)
block|{
if|if
condition|(
name|PDFEncodedStringDecoder
operator|.
name|shouldDecode
argument_list|(
name|value
argument_list|)
condition|)
block|{
name|PDFEncodedStringDecoder
name|d
init|=
operator|new
name|PDFEncodedStringDecoder
argument_list|()
decl_stmt|;
return|return
name|d
operator|.
name|decode
argument_list|(
name|value
argument_list|)
return|;
block|}
return|return
name|value
return|;
block|}
comment|//can return null!
specifier|private
specifier|static
name|Document
name|loadDOM
parameter_list|(
name|PDMetadata
name|pdMetadata
parameter_list|,
name|Metadata
name|metadata
parameter_list|,
name|ParseContext
name|context
parameter_list|)
block|{
if|if
condition|(
name|pdMetadata
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|InputStream
name|is
init|=
literal|null
decl_stmt|;
try|try
block|{
try|try
block|{
name|is
operator|=
name|pdMetadata
operator|.
name|exportXMPMetadata
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|EmbeddedDocumentUtil
operator|.
name|recordEmbeddedStreamException
argument_list|(
name|e
argument_list|,
name|metadata
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
return|return
name|XMLReaderUtils
operator|.
name|buildDOM
argument_list|(
name|is
argument_list|,
name|context
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
decl||
name|SAXException
decl||
name|TikaException
name|e
parameter_list|)
block|{
name|EmbeddedDocumentUtil
operator|.
name|recordException
argument_list|(
name|e
argument_list|,
name|metadata
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|closeQuietly
argument_list|(
name|is
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
specifier|static
name|void
name|addMetadata
parameter_list|(
name|Metadata
name|metadata
parameter_list|,
name|Property
name|property
parameter_list|,
name|Calendar
name|value
parameter_list|)
block|{
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
name|metadata
operator|.
name|set
argument_list|(
name|property
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Used when processing custom metadata entries, as PDFBox won't do      * the conversion for us in the way it does for the standard ones      */
specifier|static
name|void
name|addMetadata
parameter_list|(
name|Metadata
name|metadata
parameter_list|,
name|String
name|name
parameter_list|,
name|COSBase
name|value
parameter_list|)
block|{
if|if
condition|(
name|value
operator|instanceof
name|COSArray
condition|)
block|{
for|for
control|(
name|Object
name|v
range|:
operator|(
operator|(
name|COSArray
operator|)
name|value
operator|)
operator|.
name|toList
argument_list|()
control|)
block|{
name|addMetadata
argument_list|(
name|metadata
argument_list|,
name|name
argument_list|,
operator|(
operator|(
name|COSBase
operator|)
name|v
operator|)
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|value
operator|instanceof
name|COSString
condition|)
block|{
name|addMetadata
argument_list|(
name|metadata
argument_list|,
name|name
argument_list|,
operator|(
operator|(
name|COSString
operator|)
name|value
operator|)
operator|.
name|getString
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Avoid calling COSDictionary#toString, since it can lead to infinite
comment|// recursion. See TIKA-1038 and PDFBOX-1835.
elseif|else
if|if
condition|(
name|value
operator|!=
literal|null
operator|&&
operator|!
operator|(
name|value
operator|instanceof
name|COSDictionary
operator|)
condition|)
block|{
name|addMetadata
argument_list|(
name|metadata
argument_list|,
name|name
argument_list|,
name|value
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

