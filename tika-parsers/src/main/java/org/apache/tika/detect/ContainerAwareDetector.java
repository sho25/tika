begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|detect
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|poifs
operator|.
name|common
operator|.
name|POIFSConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|poifs
operator|.
name|storage
operator|.
name|HeaderBlockConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|util
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|util
operator|.
name|LittleEndian
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|io
operator|.
name|TikaInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|metadata
operator|.
name|Metadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|mime
operator|.
name|MediaType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|mime
operator|.
name|MimeTypes
import|;
end_import

begin_comment
comment|/**  * A detector that knows about the container formats that we support   *  (eg POIFS, Zip), and is able to peek inside them to better figure   *  out the contents.  * Delegates to another {@link Detector} (normally {@link MimeTypes})  *  to handle detection for non container formats.   * Should normally be used with a {@link TikaInputStream} to minimise   *  the memory usage.  */
end_comment

begin_class
specifier|public
class|class
name|ContainerAwareDetector
implements|implements
name|Detector
block|{
specifier|private
name|Detector
name|fallbackDetector
decl_stmt|;
specifier|private
name|ZipContainerDetector
name|zipDetector
decl_stmt|;
specifier|private
name|POIFSContainerDetector
name|poifsDetector
decl_stmt|;
comment|/**      * Creates a new container detector, which will use the      *  given detector for non container formats.      * @param fallbackDetector The detector to use for non-containers      */
specifier|public
name|ContainerAwareDetector
parameter_list|(
name|Detector
name|fallbackDetector
parameter_list|)
block|{
name|this
operator|.
name|fallbackDetector
operator|=
name|fallbackDetector
expr_stmt|;
name|poifsDetector
operator|=
operator|new
name|POIFSContainerDetector
argument_list|()
expr_stmt|;
name|zipDetector
operator|=
operator|new
name|ZipContainerDetector
argument_list|()
expr_stmt|;
block|}
specifier|public
name|MediaType
name|detect
parameter_list|(
name|InputStream
name|input
parameter_list|,
name|Metadata
name|metadata
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|detect
argument_list|(
name|TikaInputStream
operator|.
name|get
argument_list|(
name|input
argument_list|)
argument_list|,
name|metadata
argument_list|)
return|;
block|}
specifier|public
name|MediaType
name|detect
parameter_list|(
name|TikaInputStream
name|input
parameter_list|,
name|Metadata
name|metadata
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Grab the first 8 bytes, used to do container detection
name|input
operator|.
name|mark
argument_list|(
literal|8
argument_list|)
expr_stmt|;
name|byte
index|[]
name|first8
init|=
operator|new
name|byte
index|[
literal|8
index|]
decl_stmt|;
name|IOUtils
operator|.
name|readFully
argument_list|(
name|input
argument_list|,
name|first8
argument_list|)
expr_stmt|;
name|input
operator|.
name|reset
argument_list|()
expr_stmt|;
comment|// Is this a zip file?
if|if
condition|(
name|first8
index|[
literal|0
index|]
operator|==
name|POIFSConstants
operator|.
name|OOXML_FILE_HEADER
index|[
literal|0
index|]
operator|&&
name|first8
index|[
literal|1
index|]
operator|==
name|POIFSConstants
operator|.
name|OOXML_FILE_HEADER
index|[
literal|1
index|]
operator|&&
name|first8
index|[
literal|2
index|]
operator|==
name|POIFSConstants
operator|.
name|OOXML_FILE_HEADER
index|[
literal|2
index|]
operator|&&
name|first8
index|[
literal|3
index|]
operator|==
name|POIFSConstants
operator|.
name|OOXML_FILE_HEADER
index|[
literal|3
index|]
condition|)
block|{
return|return
name|zipDetector
operator|.
name|detect
argument_list|(
name|input
argument_list|,
name|metadata
argument_list|)
return|;
block|}
comment|// Is this an ole2 file?
name|long
name|ole2Signature
init|=
name|LittleEndian
operator|.
name|getLong
argument_list|(
name|first8
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|ole2Signature
operator|==
name|HeaderBlockConstants
operator|.
name|_signature
condition|)
block|{
return|return
name|poifsDetector
operator|.
name|detect
argument_list|(
name|input
argument_list|,
name|metadata
argument_list|)
return|;
block|}
comment|// Not a supported container, ask our fall back
comment|//  detector to figure it out
return|return
name|fallbackDetector
operator|.
name|detect
argument_list|(
name|input
argument_list|,
name|metadata
argument_list|)
return|;
block|}
block|}
end_class

end_unit

