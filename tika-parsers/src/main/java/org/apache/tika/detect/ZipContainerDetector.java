begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|detect
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|ZipEntry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|ZipInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|metadata
operator|.
name|Metadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|mime
operator|.
name|MediaType
import|;
end_import

begin_comment
comment|/**  * A detector that works on a Zip document  *  to figure out exactly what the file is  */
end_comment

begin_class
specifier|public
class|class
name|ZipContainerDetector
implements|implements
name|Detector
block|{
specifier|public
name|MediaType
name|detect
parameter_list|(
name|InputStream
name|input
parameter_list|,
name|Metadata
name|metadata
parameter_list|)
throws|throws
name|IOException
block|{
name|ZipInputStream
name|zip
init|=
operator|new
name|ZipInputStream
argument_list|(
name|input
argument_list|)
decl_stmt|;
name|ZipEntry
name|entry
init|=
name|zip
operator|.
name|getNextEntry
argument_list|()
decl_stmt|;
while|while
condition|(
name|entry
operator|!=
literal|null
condition|)
block|{
comment|// Is it an Open Document file?
if|if
condition|(
name|entry
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"mimetype"
argument_list|)
condition|)
block|{
name|String
name|type
init|=
name|IOUtils
operator|.
name|toString
argument_list|(
name|zip
argument_list|,
literal|"UTF-8"
argument_list|)
decl_stmt|;
name|int
name|splitAt
init|=
name|type
operator|.
name|indexOf
argument_list|(
literal|'/'
argument_list|)
decl_stmt|;
if|if
condition|(
name|splitAt
operator|>
operator|-
literal|1
condition|)
block|{
return|return
operator|new
name|MediaType
argument_list|(
name|type
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|splitAt
argument_list|)
argument_list|,
name|type
operator|.
name|substring
argument_list|(
name|splitAt
operator|+
literal|1
argument_list|)
argument_list|)
return|;
block|}
return|return
name|MediaType
operator|.
name|APPLICATION_ZIP
return|;
block|}
elseif|else
if|if
condition|(
name|entry
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"[Content_Types].xml"
argument_list|)
condition|)
block|{
comment|// Office Open XML
comment|// TODO
block|}
name|entry
operator|=
name|zip
operator|.
name|getNextEntry
argument_list|()
expr_stmt|;
block|}
return|return
name|MediaType
operator|.
name|APPLICATION_ZIP
return|;
block|}
block|}
end_class

end_unit

