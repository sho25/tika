begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|detect
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|poifs
operator|.
name|filesystem
operator|.
name|DirectoryNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|poifs
operator|.
name|filesystem
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|poifs
operator|.
name|filesystem
operator|.
name|POIFSFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|io
operator|.
name|TikaInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|metadata
operator|.
name|Metadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|mime
operator|.
name|MediaType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|microsoft
operator|.
name|OfficeParser
operator|.
name|POIFSDocumentType
import|;
end_import

begin_comment
comment|/**  * A detector that works on a POIFS OLE2 document  *  to figure out exactly what the file is.  * This should work for all OLE2 documents, whether  *  they are ones supported by POI or not.  */
end_comment

begin_class
specifier|public
class|class
name|POIFSContainerDetector
implements|implements
name|ContainerDetector
block|{
specifier|private
specifier|static
specifier|final
name|MediaType
name|DEFAULT
init|=
name|MediaType
operator|.
name|application
argument_list|(
literal|"x-tika-msoffice"
argument_list|)
decl_stmt|;
specifier|public
name|MediaType
name|getDefault
parameter_list|()
block|{
return|return
name|DEFAULT
return|;
block|}
specifier|public
name|MediaType
name|detect
parameter_list|(
name|InputStream
name|input
parameter_list|,
name|Metadata
name|metadata
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|TikaInputStream
operator|.
name|isTikaInputStream
argument_list|(
name|input
argument_list|)
condition|)
block|{
name|TikaInputStream
name|stream
init|=
name|TikaInputStream
operator|.
name|get
argument_list|(
name|input
argument_list|)
decl_stmt|;
return|return
name|detect
argument_list|(
name|stream
argument_list|,
name|metadata
argument_list|)
return|;
block|}
else|else
block|{
comment|// We can't do proper detection if we don't
comment|//  have a TikaInputStream
return|return
name|DEFAULT
return|;
block|}
block|}
specifier|public
name|MediaType
name|detect
parameter_list|(
name|TikaInputStream
name|stream
parameter_list|,
name|Metadata
name|metadata
parameter_list|)
throws|throws
name|IOException
block|{
comment|// NOTE: POIFSFileSystem will close the FileInputStream
name|POIFSFileSystem
name|fs
init|=
operator|new
name|POIFSFileSystem
argument_list|(
operator|new
name|FileInputStream
argument_list|(
name|stream
operator|.
name|getFile
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|stream
operator|.
name|setOpenContainer
argument_list|(
name|fs
argument_list|)
expr_stmt|;
comment|// See if it's one of the Microsoft Office file formats?
name|POIFSDocumentType
name|type
init|=
name|POIFSDocumentType
operator|.
name|detectType
argument_list|(
name|fs
argument_list|)
decl_stmt|;
if|if
condition|(
name|type
operator|!=
name|POIFSDocumentType
operator|.
name|UNKNOWN
condition|)
block|{
return|return
name|type
operator|.
name|getType
argument_list|()
return|;
block|}
comment|// Is it one of the Corel formats which use OLE2?
name|MediaType
name|mt
init|=
name|detectCorel
argument_list|(
name|fs
operator|.
name|getRoot
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|mt
operator|!=
literal|null
condition|)
return|return
name|mt
return|;
comment|// We don't know, sorry
return|return
name|DEFAULT
return|;
block|}
specifier|protected
name|MediaType
name|detectCorel
parameter_list|(
name|DirectoryNode
name|directory
parameter_list|)
block|{
name|boolean
name|hasNativeContentMain
init|=
literal|false
decl_stmt|;
name|boolean
name|hasPerfectOfficeMain
init|=
literal|false
decl_stmt|;
name|boolean
name|hasPerfectOfficeObjects
init|=
literal|false
decl_stmt|;
name|boolean
name|hasSlideShow
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Entry
name|entry
range|:
name|directory
control|)
block|{
if|if
condition|(
name|entry
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"NativeContent_MAIN"
argument_list|)
condition|)
block|{
name|hasNativeContentMain
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|entry
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"PerfectOffice_MAIN"
argument_list|)
condition|)
block|{
name|hasPerfectOfficeMain
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|entry
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"PerfectOffice_OBJECTS"
argument_list|)
condition|)
block|{
name|hasPerfectOfficeObjects
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|entry
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"SlideShow"
argument_list|)
condition|)
block|{
name|hasSlideShow
operator|=
literal|true
expr_stmt|;
block|}
block|}
if|if
condition|(
name|hasPerfectOfficeMain
operator|&&
name|hasSlideShow
condition|)
block|{
return|return
name|MediaType
operator|.
name|application
argument_list|(
literal|"x-corelpresentations"
argument_list|)
return|;
comment|// .shw
block|}
if|if
condition|(
name|hasPerfectOfficeMain
operator|&&
name|hasPerfectOfficeObjects
condition|)
block|{
return|return
name|MediaType
operator|.
name|application
argument_list|(
literal|"x-quattro-pro"
argument_list|)
return|;
comment|// .wb?
block|}
if|if
condition|(
operator|!
name|hasPerfectOfficeMain
operator|&&
name|hasNativeContentMain
condition|)
block|{
return|return
name|MediaType
operator|.
name|application
argument_list|(
literal|"x-quattro-pro"
argument_list|)
return|;
comment|// .qpw
block|}
comment|// Don't know, sorry
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

