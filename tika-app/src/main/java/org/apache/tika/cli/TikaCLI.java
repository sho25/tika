begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|cli
package|;
end_package

begin_import
import|import static
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
operator|.
name|UTF_8
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStreamWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|UnsupportedEncodingException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Writer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|ServerSocket
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|Socket
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|Charset
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Paths
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|OutputKeys
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|TransformerConfigurationException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|sax
operator|.
name|SAXTransformerFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|sax
operator|.
name|TransformerHandler
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|stream
operator|.
name|StreamResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FilenameUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|input
operator|.
name|CloseShieldInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|LogManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|PropertyConfigurator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|poifs
operator|.
name|filesystem
operator|.
name|DirectoryEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|poifs
operator|.
name|filesystem
operator|.
name|DocumentEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|poifs
operator|.
name|filesystem
operator|.
name|DocumentInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|poifs
operator|.
name|filesystem
operator|.
name|POIFSFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|Tika
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|batch
operator|.
name|BatchProcessDriverCLI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|config
operator|.
name|TikaConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|config
operator|.
name|TikaConfigSerializer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|detect
operator|.
name|CompositeDetector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|detect
operator|.
name|DefaultDetector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|detect
operator|.
name|Detector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|exception
operator|.
name|TikaException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|extractor
operator|.
name|EmbeddedDocumentExtractor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|fork
operator|.
name|ForkParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|gui
operator|.
name|TikaGUI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|io
operator|.
name|TikaInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|langdetect
operator|.
name|LanguageHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|metadata
operator|.
name|Metadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|metadata
operator|.
name|serialization
operator|.
name|JsonMetadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|metadata
operator|.
name|serialization
operator|.
name|JsonMetadataList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|mime
operator|.
name|MediaType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|mime
operator|.
name|MediaTypeRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|mime
operator|.
name|MimeType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|mime
operator|.
name|MimeTypeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|mime
operator|.
name|MimeTypes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|AutoDetectParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|CompositeParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|DigestingParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|NetworkParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|ParseContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|Parser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|ParserDecorator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|PasswordProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|RecursiveParserWrapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|html
operator|.
name|BoilerpipeContentHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|utils
operator|.
name|CommonsDigester
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|sax
operator|.
name|BasicContentHandlerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|sax
operator|.
name|BodyContentHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|sax
operator|.
name|ContentHandlerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|sax
operator|.
name|ExpandedTitleContentHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|xmp
operator|.
name|XMPMetadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|ContentHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|helpers
operator|.
name|DefaultHandler
import|;
end_import

begin_comment
comment|/**  * Simple command line interface for Apache Tika.  */
end_comment

begin_class
specifier|public
class|class
name|TikaCLI
block|{
specifier|private
specifier|final
name|int
name|MAX_MARK
init|=
literal|20
operator|*
literal|1024
operator|*
literal|1024
decl_stmt|;
comment|//20MB
specifier|private
name|File
name|extractDir
init|=
operator|new
name|File
argument_list|(
literal|"."
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Log
name|logger
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TikaCLI
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
name|TikaCLI
name|cli
init|=
operator|new
name|TikaCLI
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|isConfigured
argument_list|()
condition|)
block|{
name|PropertyConfigurator
operator|.
name|configure
argument_list|(
name|cli
operator|.
name|getClass
argument_list|()
operator|.
name|getResourceAsStream
argument_list|(
literal|"/log4j.properties"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|cli
operator|.
name|testForHelp
argument_list|(
name|args
argument_list|)
condition|)
block|{
name|cli
operator|.
name|usage
argument_list|()
expr_stmt|;
return|return;
block|}
elseif|else
if|if
condition|(
name|cli
operator|.
name|testForBatch
argument_list|(
name|args
argument_list|)
condition|)
block|{
name|String
index|[]
name|batchArgs
init|=
name|BatchCommandLineBuilder
operator|.
name|build
argument_list|(
name|args
argument_list|)
decl_stmt|;
name|BatchProcessDriverCLI
name|batchDriver
init|=
operator|new
name|BatchProcessDriverCLI
argument_list|(
name|batchArgs
argument_list|)
decl_stmt|;
name|batchDriver
operator|.
name|execute
argument_list|()
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|args
operator|.
name|length
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|args
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|cli
operator|.
name|process
argument_list|(
name|args
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|cli
operator|.
name|pipeMode
condition|)
block|{
name|cli
operator|.
name|process
argument_list|(
literal|"-"
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// Started with no arguments. Wait for up to 0.1s to see if
comment|// we have something waiting in standard input and use the
comment|// pipe mode if we have. If no input is seen, start the GUI.
if|if
condition|(
name|System
operator|.
name|in
operator|.
name|available
argument_list|()
operator|==
literal|0
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|System
operator|.
name|in
operator|.
name|available
argument_list|()
operator|>
literal|0
condition|)
block|{
name|cli
operator|.
name|process
argument_list|(
literal|"-"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|cli
operator|.
name|process
argument_list|(
literal|"--gui"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
specifier|static
name|boolean
name|isConfigured
parameter_list|()
block|{
comment|//Borrowed from: http://wiki.apache.org/logging-log4j/UsefulCode
name|Enumeration
name|appenders
init|=
name|LogManager
operator|.
name|getRootLogger
argument_list|()
operator|.
name|getAllAppenders
argument_list|()
decl_stmt|;
if|if
condition|(
name|appenders
operator|.
name|hasMoreElements
argument_list|()
condition|)
block|{
return|return
literal|true
return|;
block|}
else|else
block|{
name|Enumeration
name|loggers
init|=
name|LogManager
operator|.
name|getCurrentLoggers
argument_list|()
decl_stmt|;
while|while
condition|(
name|loggers
operator|.
name|hasMoreElements
argument_list|()
condition|)
block|{
name|Logger
name|c
init|=
operator|(
name|Logger
operator|)
name|loggers
operator|.
name|nextElement
argument_list|()
decl_stmt|;
if|if
condition|(
name|c
operator|.
name|getAllAppenders
argument_list|()
operator|.
name|hasMoreElements
argument_list|()
condition|)
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
specifier|private
class|class
name|OutputType
block|{
specifier|public
name|void
name|process
parameter_list|(
name|InputStream
name|input
parameter_list|,
name|OutputStream
name|output
parameter_list|,
name|Metadata
name|metadata
parameter_list|)
throws|throws
name|Exception
block|{
name|Parser
name|p
init|=
name|parser
decl_stmt|;
if|if
condition|(
name|fork
condition|)
block|{
name|p
operator|=
operator|new
name|ForkParser
argument_list|(
name|TikaCLI
operator|.
name|class
operator|.
name|getClassLoader
argument_list|()
argument_list|,
name|p
argument_list|)
expr_stmt|;
block|}
name|ContentHandler
name|handler
init|=
name|getContentHandler
argument_list|(
name|output
argument_list|,
name|metadata
argument_list|)
decl_stmt|;
name|p
operator|.
name|parse
argument_list|(
name|input
argument_list|,
name|handler
argument_list|,
name|metadata
argument_list|,
name|context
argument_list|)
expr_stmt|;
comment|// fix for TIKA-596: if a parser doesn't generate
comment|// XHTML output, the lack of an output document prevents
comment|// metadata from being output: this fixes that
if|if
condition|(
name|handler
operator|instanceof
name|NoDocumentMetHandler
condition|)
block|{
name|NoDocumentMetHandler
name|metHandler
init|=
operator|(
name|NoDocumentMetHandler
operator|)
name|handler
decl_stmt|;
if|if
condition|(
operator|!
name|metHandler
operator|.
name|metOutput
argument_list|()
condition|)
block|{
name|metHandler
operator|.
name|endDocument
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|protected
name|ContentHandler
name|getContentHandler
parameter_list|(
name|OutputStream
name|output
parameter_list|,
name|Metadata
name|metadata
parameter_list|)
throws|throws
name|Exception
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
block|}
specifier|private
specifier|final
name|OutputType
name|XML
init|=
operator|new
name|OutputType
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|ContentHandler
name|getContentHandler
parameter_list|(
name|OutputStream
name|output
parameter_list|,
name|Metadata
name|metadata
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|getTransformerHandler
argument_list|(
name|output
argument_list|,
literal|"xml"
argument_list|,
name|encoding
argument_list|,
name|prettyPrint
argument_list|)
return|;
block|}
block|}
decl_stmt|;
specifier|private
specifier|final
name|OutputType
name|HTML
init|=
operator|new
name|OutputType
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|ContentHandler
name|getContentHandler
parameter_list|(
name|OutputStream
name|output
parameter_list|,
name|Metadata
name|metadata
parameter_list|)
throws|throws
name|Exception
block|{
return|return
operator|new
name|ExpandedTitleContentHandler
argument_list|(
name|getTransformerHandler
argument_list|(
name|output
argument_list|,
literal|"html"
argument_list|,
name|encoding
argument_list|,
name|prettyPrint
argument_list|)
argument_list|)
return|;
block|}
block|}
decl_stmt|;
specifier|private
specifier|final
name|OutputType
name|TEXT
init|=
operator|new
name|OutputType
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|ContentHandler
name|getContentHandler
parameter_list|(
name|OutputStream
name|output
parameter_list|,
name|Metadata
name|metadata
parameter_list|)
throws|throws
name|Exception
block|{
return|return
operator|new
name|BodyContentHandler
argument_list|(
name|getOutputWriter
argument_list|(
name|output
argument_list|,
name|encoding
argument_list|)
argument_list|)
return|;
block|}
block|}
decl_stmt|;
specifier|private
specifier|final
name|OutputType
name|NO_OUTPUT
init|=
operator|new
name|OutputType
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|ContentHandler
name|getContentHandler
parameter_list|(
name|OutputStream
name|output
parameter_list|,
name|Metadata
name|metadata
parameter_list|)
block|{
return|return
operator|new
name|DefaultHandler
argument_list|()
return|;
block|}
block|}
decl_stmt|;
specifier|private
specifier|final
name|OutputType
name|TEXT_MAIN
init|=
operator|new
name|OutputType
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|ContentHandler
name|getContentHandler
parameter_list|(
name|OutputStream
name|output
parameter_list|,
name|Metadata
name|metadata
parameter_list|)
throws|throws
name|Exception
block|{
return|return
operator|new
name|BoilerpipeContentHandler
argument_list|(
name|getOutputWriter
argument_list|(
name|output
argument_list|,
name|encoding
argument_list|)
argument_list|)
return|;
block|}
block|}
decl_stmt|;
specifier|private
specifier|final
name|OutputType
name|METADATA
init|=
operator|new
name|OutputType
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|ContentHandler
name|getContentHandler
parameter_list|(
name|OutputStream
name|output
parameter_list|,
name|Metadata
name|metadata
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|PrintWriter
name|writer
init|=
operator|new
name|PrintWriter
argument_list|(
name|getOutputWriter
argument_list|(
name|output
argument_list|,
name|encoding
argument_list|)
argument_list|)
decl_stmt|;
return|return
operator|new
name|NoDocumentMetHandler
argument_list|(
name|metadata
argument_list|,
name|writer
argument_list|)
return|;
block|}
block|}
decl_stmt|;
specifier|private
specifier|final
name|OutputType
name|JSON
init|=
operator|new
name|OutputType
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|ContentHandler
name|getContentHandler
parameter_list|(
name|OutputStream
name|output
parameter_list|,
name|Metadata
name|metadata
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|PrintWriter
name|writer
init|=
operator|new
name|PrintWriter
argument_list|(
name|getOutputWriter
argument_list|(
name|output
argument_list|,
name|encoding
argument_list|)
argument_list|)
decl_stmt|;
return|return
operator|new
name|NoDocumentJSONMetHandler
argument_list|(
name|metadata
argument_list|,
name|writer
argument_list|)
return|;
block|}
block|}
decl_stmt|;
specifier|private
specifier|final
name|OutputType
name|XMP
init|=
operator|new
name|OutputType
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|ContentHandler
name|getContentHandler
parameter_list|(
name|OutputStream
name|output
parameter_list|,
specifier|final
name|Metadata
name|metadata
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|PrintWriter
name|writer
init|=
operator|new
name|PrintWriter
argument_list|(
name|getOutputWriter
argument_list|(
name|output
argument_list|,
name|encoding
argument_list|)
argument_list|)
decl_stmt|;
return|return
operator|new
name|NoDocumentXMPMetaHandler
argument_list|(
name|metadata
argument_list|,
name|writer
argument_list|)
return|;
block|}
block|}
decl_stmt|;
specifier|private
specifier|final
name|OutputType
name|LANGUAGE
init|=
operator|new
name|OutputType
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|ContentHandler
name|getContentHandler
parameter_list|(
name|OutputStream
name|output
parameter_list|,
name|Metadata
name|metadata
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|PrintWriter
name|writer
init|=
operator|new
name|PrintWriter
argument_list|(
name|getOutputWriter
argument_list|(
name|output
argument_list|,
name|encoding
argument_list|)
argument_list|)
decl_stmt|;
return|return
operator|new
name|LanguageHandler
argument_list|()
block|{
specifier|public
name|void
name|endDocument
parameter_list|()
block|{
name|writer
operator|.
name|println
argument_list|(
name|getLanguage
argument_list|()
operator|.
name|getLanguage
argument_list|()
argument_list|)
expr_stmt|;
name|writer
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
block|}
return|;
block|}
block|}
decl_stmt|;
specifier|private
specifier|final
name|OutputType
name|DETECT
init|=
operator|new
name|OutputType
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|process
parameter_list|(
name|InputStream
name|stream
parameter_list|,
name|OutputStream
name|output
parameter_list|,
name|Metadata
name|metadata
parameter_list|)
throws|throws
name|Exception
block|{
name|PrintWriter
name|writer
init|=
operator|new
name|PrintWriter
argument_list|(
name|getOutputWriter
argument_list|(
name|output
argument_list|,
name|encoding
argument_list|)
argument_list|)
decl_stmt|;
name|writer
operator|.
name|println
argument_list|(
name|detector
operator|.
name|detect
argument_list|(
name|stream
argument_list|,
name|metadata
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|writer
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
block|}
decl_stmt|;
specifier|private
name|ParseContext
name|context
decl_stmt|;
specifier|private
name|Detector
name|detector
decl_stmt|;
specifier|private
name|Parser
name|parser
decl_stmt|;
specifier|private
name|TikaConfig
name|config
decl_stmt|;
specifier|private
name|String
name|configFilePath
decl_stmt|;
specifier|private
name|OutputType
name|type
init|=
name|XML
decl_stmt|;
specifier|private
name|boolean
name|recursiveJSON
init|=
literal|false
decl_stmt|;
comment|/**      * Output character encoding, or<code>null</code> for platform default      */
specifier|private
name|String
name|encoding
init|=
literal|null
decl_stmt|;
comment|/**      * Password for opening encrypted documents, or<code>null</code>.      */
specifier|private
name|String
name|password
init|=
name|System
operator|.
name|getenv
argument_list|(
literal|"TIKA_PASSWORD"
argument_list|)
decl_stmt|;
specifier|private
name|DigestingParser
operator|.
name|Digester
name|digester
init|=
literal|null
decl_stmt|;
specifier|private
name|boolean
name|pipeMode
init|=
literal|true
decl_stmt|;
specifier|private
name|boolean
name|serverMode
init|=
literal|false
decl_stmt|;
specifier|private
name|boolean
name|fork
init|=
literal|false
decl_stmt|;
specifier|private
name|boolean
name|prettyPrint
decl_stmt|;
specifier|public
name|TikaCLI
parameter_list|()
throws|throws
name|Exception
block|{
name|context
operator|=
operator|new
name|ParseContext
argument_list|()
expr_stmt|;
name|detector
operator|=
operator|new
name|DefaultDetector
argument_list|()
expr_stmt|;
name|parser
operator|=
operator|new
name|AutoDetectParser
argument_list|(
name|detector
argument_list|)
expr_stmt|;
name|context
operator|.
name|set
argument_list|(
name|Parser
operator|.
name|class
argument_list|,
name|parser
argument_list|)
expr_stmt|;
name|context
operator|.
name|set
argument_list|(
name|PasswordProvider
operator|.
name|class
argument_list|,
operator|new
name|PasswordProvider
argument_list|()
block|{
specifier|public
name|String
name|getPassword
parameter_list|(
name|Metadata
name|metadata
parameter_list|)
block|{
return|return
name|password
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|process
parameter_list|(
name|String
name|arg
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|arg
operator|.
name|equals
argument_list|(
literal|"-?"
argument_list|)
operator|||
name|arg
operator|.
name|equals
argument_list|(
literal|"--help"
argument_list|)
condition|)
block|{
name|pipeMode
operator|=
literal|false
expr_stmt|;
name|usage
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|arg
operator|.
name|equals
argument_list|(
literal|"-V"
argument_list|)
operator|||
name|arg
operator|.
name|equals
argument_list|(
literal|"--version"
argument_list|)
condition|)
block|{
name|pipeMode
operator|=
literal|false
expr_stmt|;
name|version
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|arg
operator|.
name|equals
argument_list|(
literal|"-v"
argument_list|)
operator|||
name|arg
operator|.
name|equals
argument_list|(
literal|"--verbose"
argument_list|)
condition|)
block|{
name|Logger
operator|.
name|getRootLogger
argument_list|()
operator|.
name|setLevel
argument_list|(
name|Level
operator|.
name|DEBUG
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|arg
operator|.
name|equals
argument_list|(
literal|"-g"
argument_list|)
operator|||
name|arg
operator|.
name|equals
argument_list|(
literal|"--gui"
argument_list|)
condition|)
block|{
name|pipeMode
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|configFilePath
operator|!=
literal|null
condition|)
block|{
name|TikaGUI
operator|.
name|main
argument_list|(
operator|new
name|String
index|[]
block|{
name|configFilePath
block|}
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|TikaGUI
operator|.
name|main
argument_list|(
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|arg
operator|.
name|equals
argument_list|(
literal|"--list-parser"
argument_list|)
operator|||
name|arg
operator|.
name|equals
argument_list|(
literal|"--list-parsers"
argument_list|)
condition|)
block|{
name|pipeMode
operator|=
literal|false
expr_stmt|;
name|displayParsers
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|arg
operator|.
name|equals
argument_list|(
literal|"--list-detector"
argument_list|)
operator|||
name|arg
operator|.
name|equals
argument_list|(
literal|"--list-detectors"
argument_list|)
condition|)
block|{
name|pipeMode
operator|=
literal|false
expr_stmt|;
name|displayDetectors
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|arg
operator|.
name|equals
argument_list|(
literal|"--list-parser-detail"
argument_list|)
operator|||
name|arg
operator|.
name|equals
argument_list|(
literal|"--list-parser-details"
argument_list|)
condition|)
block|{
name|pipeMode
operator|=
literal|false
expr_stmt|;
name|displayParsers
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|arg
operator|.
name|equals
argument_list|(
literal|"--list-parser-detail-apt"
argument_list|)
operator|||
name|arg
operator|.
name|equals
argument_list|(
literal|"--list-parser-details-apt"
argument_list|)
condition|)
block|{
name|pipeMode
operator|=
literal|false
expr_stmt|;
name|displayParsers
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|arg
operator|.
name|equals
argument_list|(
literal|"--list-met-models"
argument_list|)
condition|)
block|{
name|pipeMode
operator|=
literal|false
expr_stmt|;
name|displayMetModels
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|arg
operator|.
name|equals
argument_list|(
literal|"--list-supported-types"
argument_list|)
condition|)
block|{
name|pipeMode
operator|=
literal|false
expr_stmt|;
name|displaySupportedTypes
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|arg
operator|.
name|startsWith
argument_list|(
literal|"--compare-file-magic="
argument_list|)
condition|)
block|{
name|pipeMode
operator|=
literal|false
expr_stmt|;
name|compareFileMagic
argument_list|(
name|arg
operator|.
name|substring
argument_list|(
name|arg
operator|.
name|indexOf
argument_list|(
literal|'='
argument_list|)
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|arg
operator|.
name|equals
argument_list|(
literal|"--dump-minimal-config"
argument_list|)
condition|)
block|{
name|pipeMode
operator|=
literal|false
expr_stmt|;
name|dumpConfig
argument_list|(
name|TikaConfigSerializer
operator|.
name|Mode
operator|.
name|MINIMAL
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|arg
operator|.
name|equals
argument_list|(
literal|"--dump-current-config"
argument_list|)
condition|)
block|{
name|pipeMode
operator|=
literal|false
expr_stmt|;
name|dumpConfig
argument_list|(
name|TikaConfigSerializer
operator|.
name|Mode
operator|.
name|CURRENT
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|arg
operator|.
name|equals
argument_list|(
literal|"--dump-static-config"
argument_list|)
condition|)
block|{
name|pipeMode
operator|=
literal|false
expr_stmt|;
name|dumpConfig
argument_list|(
name|TikaConfigSerializer
operator|.
name|Mode
operator|.
name|STATIC
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|arg
operator|.
name|equals
argument_list|(
literal|"--container-aware"
argument_list|)
operator|||
name|arg
operator|.
name|equals
argument_list|(
literal|"--container-aware-detector"
argument_list|)
condition|)
block|{
comment|// ignore, as container-aware detectors are now always used
block|}
elseif|else
if|if
condition|(
name|arg
operator|.
name|equals
argument_list|(
literal|"-f"
argument_list|)
operator|||
name|arg
operator|.
name|equals
argument_list|(
literal|"--fork"
argument_list|)
condition|)
block|{
name|fork
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|arg
operator|.
name|startsWith
argument_list|(
literal|"--config="
argument_list|)
condition|)
block|{
name|configure
argument_list|(
name|arg
operator|.
name|substring
argument_list|(
literal|"--config="
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|arg
operator|.
name|startsWith
argument_list|(
literal|"--digest="
argument_list|)
condition|)
block|{
name|CommonsDigester
operator|.
name|DigestAlgorithm
index|[]
name|algos
init|=
name|CommonsDigester
operator|.
name|parse
argument_list|(
name|arg
operator|.
name|substring
argument_list|(
literal|"--digest="
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|digester
operator|=
operator|new
name|CommonsDigester
argument_list|(
name|MAX_MARK
argument_list|,
name|algos
argument_list|)
expr_stmt|;
name|parser
operator|=
operator|new
name|DigestingParser
argument_list|(
name|parser
argument_list|,
name|digester
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|arg
operator|.
name|startsWith
argument_list|(
literal|"-e"
argument_list|)
condition|)
block|{
name|encoding
operator|=
name|arg
operator|.
name|substring
argument_list|(
literal|"-e"
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|arg
operator|.
name|startsWith
argument_list|(
literal|"--encoding="
argument_list|)
condition|)
block|{
name|encoding
operator|=
name|arg
operator|.
name|substring
argument_list|(
literal|"--encoding="
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|arg
operator|.
name|startsWith
argument_list|(
literal|"-p"
argument_list|)
operator|&&
operator|!
name|arg
operator|.
name|equals
argument_list|(
literal|"-p"
argument_list|)
condition|)
block|{
name|password
operator|=
name|arg
operator|.
name|substring
argument_list|(
literal|"-p"
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|arg
operator|.
name|startsWith
argument_list|(
literal|"--password="
argument_list|)
condition|)
block|{
name|password
operator|=
name|arg
operator|.
name|substring
argument_list|(
literal|"--password="
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|arg
operator|.
name|equals
argument_list|(
literal|"-j"
argument_list|)
operator|||
name|arg
operator|.
name|equals
argument_list|(
literal|"--json"
argument_list|)
condition|)
block|{
name|type
operator|=
name|JSON
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|arg
operator|.
name|equals
argument_list|(
literal|"-J"
argument_list|)
operator|||
name|arg
operator|.
name|equals
argument_list|(
literal|"--jsonRecursive"
argument_list|)
condition|)
block|{
name|recursiveJSON
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|arg
operator|.
name|equals
argument_list|(
literal|"-y"
argument_list|)
operator|||
name|arg
operator|.
name|equals
argument_list|(
literal|"--xmp"
argument_list|)
condition|)
block|{
name|type
operator|=
name|XMP
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|arg
operator|.
name|equals
argument_list|(
literal|"-x"
argument_list|)
operator|||
name|arg
operator|.
name|equals
argument_list|(
literal|"--xml"
argument_list|)
condition|)
block|{
name|type
operator|=
name|XML
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|arg
operator|.
name|equals
argument_list|(
literal|"-h"
argument_list|)
operator|||
name|arg
operator|.
name|equals
argument_list|(
literal|"--html"
argument_list|)
condition|)
block|{
name|type
operator|=
name|HTML
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|arg
operator|.
name|equals
argument_list|(
literal|"-t"
argument_list|)
operator|||
name|arg
operator|.
name|equals
argument_list|(
literal|"--text"
argument_list|)
condition|)
block|{
name|type
operator|=
name|TEXT
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|arg
operator|.
name|equals
argument_list|(
literal|"-T"
argument_list|)
operator|||
name|arg
operator|.
name|equals
argument_list|(
literal|"--text-main"
argument_list|)
condition|)
block|{
name|type
operator|=
name|TEXT_MAIN
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|arg
operator|.
name|equals
argument_list|(
literal|"-m"
argument_list|)
operator|||
name|arg
operator|.
name|equals
argument_list|(
literal|"--metadata"
argument_list|)
condition|)
block|{
name|type
operator|=
name|METADATA
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|arg
operator|.
name|equals
argument_list|(
literal|"-l"
argument_list|)
operator|||
name|arg
operator|.
name|equals
argument_list|(
literal|"--language"
argument_list|)
condition|)
block|{
name|type
operator|=
name|LANGUAGE
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|arg
operator|.
name|equals
argument_list|(
literal|"-d"
argument_list|)
operator|||
name|arg
operator|.
name|equals
argument_list|(
literal|"--detect"
argument_list|)
condition|)
block|{
name|type
operator|=
name|DETECT
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|arg
operator|.
name|startsWith
argument_list|(
literal|"--extract-dir="
argument_list|)
condition|)
block|{
name|extractDir
operator|=
operator|new
name|File
argument_list|(
name|arg
operator|.
name|substring
argument_list|(
literal|"--extract-dir="
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|arg
operator|.
name|equals
argument_list|(
literal|"-z"
argument_list|)
operator|||
name|arg
operator|.
name|equals
argument_list|(
literal|"--extract"
argument_list|)
condition|)
block|{
name|type
operator|=
name|NO_OUTPUT
expr_stmt|;
name|context
operator|.
name|set
argument_list|(
name|EmbeddedDocumentExtractor
operator|.
name|class
argument_list|,
operator|new
name|FileEmbeddedDocumentExtractor
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|arg
operator|.
name|equals
argument_list|(
literal|"-r"
argument_list|)
operator|||
name|arg
operator|.
name|equals
argument_list|(
literal|"--pretty-print"
argument_list|)
condition|)
block|{
name|prettyPrint
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|arg
operator|.
name|equals
argument_list|(
literal|"-p"
argument_list|)
operator|||
name|arg
operator|.
name|equals
argument_list|(
literal|"--port"
argument_list|)
operator|||
name|arg
operator|.
name|equals
argument_list|(
literal|"-s"
argument_list|)
operator|||
name|arg
operator|.
name|equals
argument_list|(
literal|"--server"
argument_list|)
condition|)
block|{
name|serverMode
operator|=
literal|true
expr_stmt|;
name|pipeMode
operator|=
literal|false
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|arg
operator|.
name|startsWith
argument_list|(
literal|"-c"
argument_list|)
condition|)
block|{
name|URI
name|uri
init|=
operator|new
name|URI
argument_list|(
name|arg
operator|.
name|substring
argument_list|(
literal|"-c"
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|parser
operator|=
operator|new
name|NetworkParser
argument_list|(
name|uri
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|arg
operator|.
name|startsWith
argument_list|(
literal|"--client="
argument_list|)
condition|)
block|{
name|URI
name|uri
init|=
operator|new
name|URI
argument_list|(
name|arg
operator|.
name|substring
argument_list|(
literal|"--client="
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|parser
operator|=
operator|new
name|NetworkParser
argument_list|(
name|uri
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|pipeMode
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|serverMode
condition|)
block|{
operator|new
name|TikaServer
argument_list|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|arg
argument_list|)
argument_list|)
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|arg
operator|.
name|equals
argument_list|(
literal|"-"
argument_list|)
condition|)
block|{
try|try
init|(
name|InputStream
name|stream
init|=
name|TikaInputStream
operator|.
name|get
argument_list|(
operator|new
name|CloseShieldInputStream
argument_list|(
name|System
operator|.
name|in
argument_list|)
argument_list|)
init|)
block|{
name|type
operator|.
name|process
argument_list|(
name|stream
argument_list|,
name|System
operator|.
name|out
argument_list|,
operator|new
name|Metadata
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|URL
name|url
decl_stmt|;
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|arg
argument_list|)
decl_stmt|;
if|if
condition|(
name|file
operator|.
name|isFile
argument_list|()
condition|)
block|{
name|url
operator|=
name|file
operator|.
name|toURI
argument_list|()
operator|.
name|toURL
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|url
operator|=
operator|new
name|URL
argument_list|(
name|arg
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|recursiveJSON
condition|)
block|{
name|handleRecursiveJson
argument_list|(
name|url
argument_list|,
name|System
operator|.
name|out
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Metadata
name|metadata
init|=
operator|new
name|Metadata
argument_list|()
decl_stmt|;
try|try
init|(
name|InputStream
name|input
init|=
name|TikaInputStream
operator|.
name|get
argument_list|(
name|url
argument_list|,
name|metadata
argument_list|)
init|)
block|{
name|type
operator|.
name|process
argument_list|(
name|input
argument_list|,
name|System
operator|.
name|out
argument_list|,
name|metadata
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|System
operator|.
name|out
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
specifier|private
name|void
name|dumpConfig
parameter_list|(
name|TikaConfigSerializer
operator|.
name|Mode
name|mode
parameter_list|)
throws|throws
name|Exception
block|{
name|TikaConfig
name|localConfig
init|=
operator|(
name|config
operator|==
literal|null
operator|)
condition|?
name|TikaConfig
operator|.
name|getDefaultConfig
argument_list|()
else|:
name|config
decl_stmt|;
name|TikaConfigSerializer
operator|.
name|serialize
argument_list|(
name|localConfig
argument_list|,
name|mode
argument_list|,
operator|new
name|OutputStreamWriter
argument_list|(
name|System
operator|.
name|out
argument_list|,
name|UTF_8
argument_list|)
argument_list|,
name|UTF_8
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|handleRecursiveJson
parameter_list|(
name|URL
name|url
parameter_list|,
name|OutputStream
name|output
parameter_list|)
throws|throws
name|IOException
throws|,
name|SAXException
throws|,
name|TikaException
block|{
name|Metadata
name|metadata
init|=
operator|new
name|Metadata
argument_list|()
decl_stmt|;
name|RecursiveParserWrapper
name|wrapper
init|=
operator|new
name|RecursiveParserWrapper
argument_list|(
name|parser
argument_list|,
name|getContentHandlerFactory
argument_list|(
name|type
argument_list|)
argument_list|)
decl_stmt|;
try|try
init|(
name|InputStream
name|input
init|=
name|TikaInputStream
operator|.
name|get
argument_list|(
name|url
argument_list|,
name|metadata
argument_list|)
init|)
block|{
name|wrapper
operator|.
name|parse
argument_list|(
name|input
argument_list|,
literal|null
argument_list|,
name|metadata
argument_list|,
name|context
argument_list|)
expr_stmt|;
block|}
name|JsonMetadataList
operator|.
name|setPrettyPrinting
argument_list|(
name|prettyPrint
argument_list|)
expr_stmt|;
name|Writer
name|writer
init|=
name|getOutputWriter
argument_list|(
name|output
argument_list|,
name|encoding
argument_list|)
decl_stmt|;
try|try
block|{
name|JsonMetadataList
operator|.
name|toJson
argument_list|(
name|wrapper
operator|.
name|getMetadata
argument_list|()
argument_list|,
name|writer
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|writer
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|ContentHandlerFactory
name|getContentHandlerFactory
parameter_list|(
name|OutputType
name|type
parameter_list|)
block|{
name|BasicContentHandlerFactory
operator|.
name|HANDLER_TYPE
name|handlerType
init|=
name|BasicContentHandlerFactory
operator|.
name|HANDLER_TYPE
operator|.
name|IGNORE
decl_stmt|;
if|if
condition|(
name|type
operator|.
name|equals
argument_list|(
name|HTML
argument_list|)
condition|)
block|{
name|handlerType
operator|=
name|BasicContentHandlerFactory
operator|.
name|HANDLER_TYPE
operator|.
name|HTML
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|type
operator|.
name|equals
argument_list|(
name|XML
argument_list|)
condition|)
block|{
name|handlerType
operator|=
name|BasicContentHandlerFactory
operator|.
name|HANDLER_TYPE
operator|.
name|XML
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|type
operator|.
name|equals
argument_list|(
name|TEXT
argument_list|)
condition|)
block|{
name|handlerType
operator|=
name|BasicContentHandlerFactory
operator|.
name|HANDLER_TYPE
operator|.
name|TEXT
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|type
operator|.
name|equals
argument_list|(
name|TEXT_MAIN
argument_list|)
condition|)
block|{
name|handlerType
operator|=
name|BasicContentHandlerFactory
operator|.
name|HANDLER_TYPE
operator|.
name|BODY
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|type
operator|.
name|equals
argument_list|(
name|METADATA
argument_list|)
condition|)
block|{
name|handlerType
operator|=
name|BasicContentHandlerFactory
operator|.
name|HANDLER_TYPE
operator|.
name|IGNORE
expr_stmt|;
block|}
return|return
operator|new
name|BasicContentHandlerFactory
argument_list|(
name|handlerType
argument_list|,
operator|-
literal|1
argument_list|)
return|;
block|}
specifier|private
name|void
name|usage
parameter_list|()
block|{
name|PrintStream
name|out
init|=
name|System
operator|.
name|out
decl_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"usage: java -jar tika-app.jar [option...] [file|port...]"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"Options:"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"    -?  or --help          Print this usage message"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"    -v  or --verbose       Print debug level messages"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"    -V  or --version       Print the Apache Tika version number"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"    -g  or --gui           Start the Apache Tika GUI"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"    -s  or --server        Start the Apache Tika server"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"    -f  or --fork          Use Fork Mode for out-of-process extraction"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"    --config=<tika-config.xml>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"        TikaConfig file. Must be specified before -g, -s, -f or the dump-x-config !"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"    --dump-minimal-config  Print minimal TikaConfig"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"    --dump-current-config  Print current TikaConfig"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"    --dump-static-config   Print static config"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"    -x  or --xml           Output XHTML content (default)"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"    -h  or --html          Output HTML content"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"    -t  or --text          Output plain text content"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"    -T  or --text-main     Output plain text content (main content only)"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"    -m  or --metadata      Output only metadata"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"    -j  or --json          Output metadata in JSON"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"    -y  or --xmp           Output metadata in XMP"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"    -J  or --jsonRecursive Output metadata and content from all"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"                           embedded files (choose content type"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"                           with -x, -h, -t or -m; default is -x)"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"    -l  or --language      Output only language"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"    -d  or --detect        Detect document type"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"           --digest=X      Include digest X (md2, md5, sha1,"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"                               sha256, sha384, sha512"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"    -eX or --encoding=X    Use output encoding X"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"    -pX or --password=X    Use document password X"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"    -z  or --extract       Extract all attachements into current directory"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"    --extract-dir=<dir>    Specify target directory for -z"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"    -r  or --pretty-print  For JSON, XML and XHTML outputs, adds newlines and"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"                           whitespace, for better readability"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"    --list-parsers"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"         List the available document parsers"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"    --list-parser-details"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"         List the available document parsers and their supported mime types"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"    --list-parser-details-apt"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"         List the available document parsers and their supported mime types in apt format."
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"    --list-detectors"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"         List the available document detectors"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"    --list-met-models"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"         List the available metadata models, and their supported keys"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"    --list-supported-types"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"         List all known media types and related information"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"    --compare-file-magic=<dir>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"         Compares Tika's known media types to the File(1) tool's magic directory"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"Description:"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"    Apache Tika will parse the file(s) specified on the"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"    command line and output the extracted text content"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"    or metadata to standard output."
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"    Instead of a file name you can also specify the URL"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"    of a document to be parsed."
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"    If no file name or URL is specified (or the special"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"    name \"-\" is used), then the standard input stream"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"    is parsed. If no arguments were given and no input"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"    data is available, the GUI is started instead."
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"- GUI mode"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"    Use the \"--gui\" (or \"-g\") option to start the"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"    Apache Tika GUI. You can drag and drop files from"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"    a normal file explorer to the GUI window to extract"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"    text content and metadata from the files."
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"- Server mode"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"    Use the \"--server\" (or \"-s\") option to start the"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"    Apache Tika server. The server will listen to the"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"    ports you specify as one or more arguments."
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"- Batch mode"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"    Simplest method."
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"    Specify two directories as args with no other args:"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"         java -jar tika-app.jar<inputDirectory><outputDirectory>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"Batch Options:"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"    -i  or --inputDir          Input directory"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"    -o  or --outputDir         Output directory"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"    -numConsumers              Number of processing threads"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"    -bc                        Batch config file"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"    -maxRestarts               Maximum number of times the "
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"                               watchdog process will restart the child process."
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"    -timeoutThresholdMillis    Number of milliseconds allowed to a parse"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"                               before the process is killed and restarted"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"    -fileList                  List of files to process, with"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"                               paths relative to the input directory"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"    -includeFilePat            Regular expression to determine which"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"                               files to process, e.g. \"(?i)\\.pdf\""
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"    -excludeFilePat            Regular expression to determine which"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"                               files to avoid processing, e.g. \"(?i)\\.pdf\""
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"    -maxFileSizeBytes          Skip files longer than this value"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"    Control the type of output with -x, -h, -t and/or -J."
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"    To modify child process jvm args, prepend \"J\" as in:"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"    -JXmx4g or -JDlog4j.configuration=file:log4j.xml."
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|version
parameter_list|()
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
operator|new
name|Tika
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|boolean
name|testForHelp
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
for|for
control|(
name|String
name|s
range|:
name|args
control|)
block|{
if|if
condition|(
name|s
operator|.
name|equals
argument_list|(
literal|"-?"
argument_list|)
operator|||
name|s
operator|.
name|equals
argument_list|(
literal|"--help"
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|testForBatch
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
if|if
condition|(
name|args
operator|.
name|length
operator|==
literal|2
operator|&&
operator|!
name|args
index|[
literal|0
index|]
operator|.
name|startsWith
argument_list|(
literal|"-"
argument_list|)
operator|&&
operator|!
name|args
index|[
literal|1
index|]
operator|.
name|startsWith
argument_list|(
literal|"-"
argument_list|)
condition|)
block|{
name|Path
name|inputCand
init|=
name|Paths
operator|.
name|get
argument_list|(
name|args
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|Path
name|outputCand
init|=
name|Paths
operator|.
name|get
argument_list|(
name|args
index|[
literal|1
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|Files
operator|.
name|isDirectory
argument_list|(
name|inputCand
argument_list|)
operator|&&
operator|!
name|Files
operator|.
name|isRegularFile
argument_list|(
name|outputCand
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
for|for
control|(
name|String
name|s
range|:
name|args
control|)
block|{
if|if
condition|(
name|s
operator|.
name|equals
argument_list|(
literal|"-inputDir"
argument_list|)
operator|||
name|s
operator|.
name|equals
argument_list|(
literal|"--inputDir"
argument_list|)
operator|||
name|s
operator|.
name|equals
argument_list|(
literal|"-i"
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
specifier|private
name|void
name|configure
parameter_list|(
name|String
name|configFilePath
parameter_list|)
throws|throws
name|Exception
block|{
name|this
operator|.
name|configFilePath
operator|=
name|configFilePath
expr_stmt|;
name|config
operator|=
operator|new
name|TikaConfig
argument_list|(
operator|new
name|File
argument_list|(
name|configFilePath
argument_list|)
argument_list|)
expr_stmt|;
name|parser
operator|=
operator|new
name|AutoDetectParser
argument_list|(
name|config
argument_list|)
expr_stmt|;
if|if
condition|(
name|digester
operator|!=
literal|null
condition|)
block|{
name|parser
operator|=
operator|new
name|DigestingParser
argument_list|(
name|parser
argument_list|,
name|digester
argument_list|)
expr_stmt|;
block|}
name|detector
operator|=
name|config
operator|.
name|getDetector
argument_list|()
expr_stmt|;
name|context
operator|.
name|set
argument_list|(
name|Parser
operator|.
name|class
argument_list|,
name|parser
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|displayMetModels
parameter_list|()
block|{
name|Class
argument_list|<
name|?
argument_list|>
index|[]
name|modelClasses
init|=
name|Metadata
operator|.
name|class
operator|.
name|getInterfaces
argument_list|()
decl_stmt|;
name|Arrays
operator|.
name|sort
argument_list|(
name|modelClasses
argument_list|,
operator|new
name|Comparator
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
argument_list|()
block|{
specifier|public
name|int
name|compare
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|o1
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|o2
parameter_list|)
block|{
return|return
name|o1
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|o2
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
block|}
block|)
function|;
for|for
control|(
name|Class
argument_list|<
name|?
argument_list|>
name|modelClass
range|:
name|modelClasses
control|)
block|{
comment|// we don't care about internal Tika met classes
comment|// if we do, then we can take this conditional out
if|if
condition|(
operator|!
name|modelClass
operator|.
name|getSimpleName
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Tika"
argument_list|)
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|modelClass
operator|.
name|getSimpleName
argument_list|()
argument_list|)
expr_stmt|;
name|Field
index|[]
name|keyFields
init|=
name|modelClass
operator|.
name|getFields
argument_list|()
decl_stmt|;
name|Arrays
operator|.
name|sort
argument_list|(
name|keyFields
argument_list|,
operator|new
name|Comparator
argument_list|<
name|Field
argument_list|>
argument_list|()
block|{
specifier|public
name|int
name|compare
parameter_list|(
name|Field
name|o1
parameter_list|,
name|Field
name|o2
parameter_list|)
block|{
return|return
name|o1
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|o2
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
for|for
control|(
name|Field
name|keyField
range|:
name|keyFields
control|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|" "
operator|+
name|keyField
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

begin_comment
comment|/*      * Displays loaded parsers and their mime types      * If a parser is a composite parser, it will list the      * sub parsers and their mime-types.      */
end_comment

begin_function
specifier|private
name|void
name|displayParsers
parameter_list|(
name|boolean
name|includeMimeTypes
parameter_list|,
name|boolean
name|aptListFormat
parameter_list|)
block|{
name|displayParser
argument_list|(
name|parser
argument_list|,
name|includeMimeTypes
argument_list|,
name|aptListFormat
argument_list|,
literal|3
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|private
name|void
name|displayParser
parameter_list|(
name|Parser
name|p
parameter_list|,
name|boolean
name|includeMimeTypes
parameter_list|,
name|boolean
name|apt
parameter_list|,
name|int
name|i
parameter_list|)
block|{
name|String
name|decorated
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|p
operator|instanceof
name|ParserDecorator
condition|)
block|{
name|ParserDecorator
name|pd
init|=
operator|(
name|ParserDecorator
operator|)
name|p
decl_stmt|;
name|decorated
operator|=
literal|" (Wrapped by "
operator|+
name|pd
operator|.
name|getDecorationName
argument_list|()
operator|+
literal|")"
expr_stmt|;
name|p
operator|=
name|pd
operator|.
name|getWrappedParser
argument_list|()
expr_stmt|;
block|}
name|boolean
name|isComposite
init|=
operator|(
name|p
operator|instanceof
name|CompositeParser
operator|)
decl_stmt|;
name|String
name|name
init|=
name|p
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|apt
condition|)
block|{
name|name
operator|=
name|name
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|name
operator|.
name|lastIndexOf
argument_list|(
literal|"."
argument_list|)
operator|+
literal|1
argument_list|)
operator|+
literal|"{{{./api/"
operator|+
name|name
operator|.
name|replace
argument_list|(
literal|"."
argument_list|,
literal|"/"
argument_list|)
operator|+
literal|"}"
operator|+
name|name
operator|.
name|substring
argument_list|(
name|name
operator|.
name|lastIndexOf
argument_list|(
literal|"."
argument_list|)
operator|+
literal|1
argument_list|)
operator|+
literal|"}}"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|decorated
operator|!=
literal|null
condition|)
block|{
name|name
operator|+=
name|decorated
expr_stmt|;
block|}
if|if
condition|(
operator|(
name|apt
operator|&&
operator|!
name|isComposite
operator|)
operator|||
operator|!
name|apt
condition|)
block|{
comment|// Don't display Composite parsers in the apt output.
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|indent
argument_list|(
name|i
argument_list|)
operator|+
operator|(
operator|(
name|apt
operator|)
condition|?
literal|"* "
else|:
literal|""
operator|)
operator|+
name|name
operator|+
operator|(
name|isComposite
condition|?
literal|" (Composite Parser):"
else|:
literal|""
operator|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|apt
condition|)
name|System
operator|.
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
if|if
condition|(
name|includeMimeTypes
operator|&&
operator|!
name|isComposite
condition|)
block|{
for|for
control|(
name|MediaType
name|mt
range|:
name|p
operator|.
name|getSupportedTypes
argument_list|(
name|context
argument_list|)
control|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|indent
argument_list|(
name|i
operator|+
literal|3
argument_list|)
operator|+
operator|(
operator|(
name|apt
operator|)
condition|?
literal|"* "
else|:
literal|""
operator|)
operator|+
name|mt
argument_list|)
expr_stmt|;
if|if
condition|(
name|apt
condition|)
name|System
operator|.
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|isComposite
condition|)
block|{
name|Parser
index|[]
name|subParsers
init|=
name|sortParsers
argument_list|(
name|invertMediaTypeMap
argument_list|(
operator|(
operator|(
name|CompositeParser
operator|)
name|p
operator|)
operator|.
name|getParsers
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|Parser
name|sp
range|:
name|subParsers
control|)
block|{
name|displayParser
argument_list|(
name|sp
argument_list|,
name|includeMimeTypes
argument_list|,
name|apt
argument_list|,
name|i
operator|+
operator|(
operator|(
name|apt
operator|)
condition|?
literal|0
else|:
literal|3
operator|)
argument_list|)
expr_stmt|;
comment|// Don't indent for Composites in apt.
block|}
block|}
block|}
end_function

begin_comment
comment|/*      * Displays loaded detectors and their mime types      * If a detector is a composite detector, it will list the      *  sub detectors.      */
end_comment

begin_function
specifier|private
name|void
name|displayDetectors
parameter_list|()
block|{
name|displayDetector
argument_list|(
name|detector
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|private
name|void
name|displayDetector
parameter_list|(
name|Detector
name|d
parameter_list|,
name|int
name|i
parameter_list|)
block|{
name|boolean
name|isComposite
init|=
operator|(
name|d
operator|instanceof
name|CompositeDetector
operator|)
decl_stmt|;
name|String
name|name
init|=
name|d
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|indent
argument_list|(
name|i
argument_list|)
operator|+
name|name
operator|+
operator|(
name|isComposite
condition|?
literal|" (Composite Detector):"
else|:
literal|""
operator|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|isComposite
condition|)
block|{
name|List
argument_list|<
name|Detector
argument_list|>
name|subDetectors
init|=
operator|(
operator|(
name|CompositeDetector
operator|)
name|d
operator|)
operator|.
name|getDetectors
argument_list|()
decl_stmt|;
for|for
control|(
name|Detector
name|sd
range|:
name|subDetectors
control|)
block|{
name|displayDetector
argument_list|(
name|sd
argument_list|,
name|i
operator|+
literal|2
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function

begin_function
specifier|private
name|String
name|indent
parameter_list|(
name|int
name|indent
parameter_list|)
block|{
return|return
literal|"                     "
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|indent
argument_list|)
return|;
block|}
end_function

begin_function
specifier|private
name|Parser
index|[]
name|sortParsers
parameter_list|(
name|Map
argument_list|<
name|Parser
argument_list|,
name|Set
argument_list|<
name|MediaType
argument_list|>
argument_list|>
name|parsers
parameter_list|)
block|{
comment|// Get a nicely sorted list of the parsers
name|Parser
index|[]
name|sortedParsers
init|=
name|parsers
operator|.
name|keySet
argument_list|()
operator|.
name|toArray
argument_list|(
operator|new
name|Parser
index|[
name|parsers
operator|.
name|size
argument_list|()
index|]
argument_list|)
decl_stmt|;
name|Arrays
operator|.
name|sort
argument_list|(
name|sortedParsers
argument_list|,
operator|new
name|Comparator
argument_list|<
name|Parser
argument_list|>
argument_list|()
block|{
specifier|public
name|int
name|compare
parameter_list|(
name|Parser
name|p1
parameter_list|,
name|Parser
name|p2
parameter_list|)
block|{
name|String
name|name1
init|=
name|p1
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
name|String
name|name2
init|=
name|p2
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
return|return
name|name1
operator|.
name|compareTo
argument_list|(
name|name2
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
return|return
name|sortedParsers
return|;
block|}
end_function

begin_function
specifier|private
name|Map
argument_list|<
name|Parser
argument_list|,
name|Set
argument_list|<
name|MediaType
argument_list|>
argument_list|>
name|invertMediaTypeMap
parameter_list|(
name|Map
argument_list|<
name|MediaType
argument_list|,
name|Parser
argument_list|>
name|supported
parameter_list|)
block|{
name|Map
argument_list|<
name|Parser
argument_list|,
name|Set
argument_list|<
name|MediaType
argument_list|>
argument_list|>
name|parsers
init|=
operator|new
name|HashMap
argument_list|<
name|Parser
argument_list|,
name|Set
argument_list|<
name|MediaType
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|MediaType
argument_list|,
name|Parser
argument_list|>
name|e
range|:
name|supported
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|parsers
operator|.
name|containsKey
argument_list|(
name|e
operator|.
name|getValue
argument_list|()
argument_list|)
condition|)
block|{
name|parsers
operator|.
name|put
argument_list|(
name|e
operator|.
name|getValue
argument_list|()
argument_list|,
operator|new
name|HashSet
argument_list|<
name|MediaType
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|parsers
operator|.
name|get
argument_list|(
name|e
operator|.
name|getValue
argument_list|()
argument_list|)
operator|.
name|add
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|parsers
return|;
block|}
end_function

begin_comment
comment|/**      * Prints all the known media types, aliases and matching parser classes.      */
end_comment

begin_function
specifier|private
name|void
name|displaySupportedTypes
parameter_list|()
block|{
name|AutoDetectParser
name|parser
init|=
operator|new
name|AutoDetectParser
argument_list|()
decl_stmt|;
name|MediaTypeRegistry
name|registry
init|=
name|parser
operator|.
name|getMediaTypeRegistry
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|MediaType
argument_list|,
name|Parser
argument_list|>
name|parsers
init|=
name|parser
operator|.
name|getParsers
argument_list|()
decl_stmt|;
for|for
control|(
name|MediaType
name|type
range|:
name|registry
operator|.
name|getTypes
argument_list|()
control|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|type
argument_list|)
expr_stmt|;
for|for
control|(
name|MediaType
name|alias
range|:
name|registry
operator|.
name|getAliases
argument_list|(
name|type
argument_list|)
control|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  alias:     "
operator|+
name|alias
argument_list|)
expr_stmt|;
block|}
name|MediaType
name|supertype
init|=
name|registry
operator|.
name|getSupertype
argument_list|(
name|type
argument_list|)
decl_stmt|;
if|if
condition|(
name|supertype
operator|!=
literal|null
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  supertype: "
operator|+
name|supertype
argument_list|)
expr_stmt|;
block|}
name|Parser
name|p
init|=
name|parsers
operator|.
name|get
argument_list|(
name|type
argument_list|)
decl_stmt|;
if|if
condition|(
name|p
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|p
operator|instanceof
name|CompositeParser
condition|)
block|{
name|p
operator|=
operator|(
operator|(
name|CompositeParser
operator|)
name|p
operator|)
operator|.
name|getParsers
argument_list|()
operator|.
name|get
argument_list|(
name|type
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  parser:    "
operator|+
name|p
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function

begin_comment
comment|/**      * Compares our mime types registry with the File(1) tool's       *  directory of (uncompiled) Magic entries.       * (Well, those with mimetypes anyway)      * @param magicDir Path to the magic directory      */
end_comment

begin_function
specifier|private
name|void
name|compareFileMagic
parameter_list|(
name|String
name|magicDir
parameter_list|)
throws|throws
name|Exception
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|tikaLacking
init|=
operator|new
name|TreeSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|tikaNoMagic
init|=
operator|new
name|TreeSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
comment|// Sanity check
name|File
name|dir
init|=
operator|new
name|File
argument_list|(
name|magicDir
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
operator|new
name|File
argument_list|(
name|dir
argument_list|,
literal|"elf"
argument_list|)
operator|)
operator|.
name|exists
argument_list|()
operator|&&
operator|(
operator|new
name|File
argument_list|(
name|dir
argument_list|,
literal|"mime"
argument_list|)
operator|)
operator|.
name|exists
argument_list|()
operator|&&
operator|(
operator|new
name|File
argument_list|(
name|dir
argument_list|,
literal|"vorbis"
argument_list|)
operator|)
operator|.
name|exists
argument_list|()
condition|)
block|{
comment|// Looks plausible
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|magicDir
operator|+
literal|" doesn't seem to hold uncompressed file magic entries"
argument_list|)
throw|;
block|}
comment|// Find all the mimetypes in the directory
name|Set
argument_list|<
name|String
argument_list|>
name|fileMimes
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|File
name|mf
range|:
name|dir
operator|.
name|listFiles
argument_list|()
control|)
block|{
if|if
condition|(
name|mf
operator|.
name|isFile
argument_list|()
condition|)
block|{
name|BufferedReader
name|r
init|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
operator|new
name|FileInputStream
argument_list|(
name|mf
argument_list|)
argument_list|,
name|UTF_8
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|line
decl_stmt|;
while|while
condition|(
operator|(
name|line
operator|=
name|r
operator|.
name|readLine
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|line
operator|.
name|startsWith
argument_list|(
literal|"!:mime"
argument_list|)
operator|||
name|line
operator|.
name|startsWith
argument_list|(
literal|"#!:mime"
argument_list|)
condition|)
block|{
name|String
name|mime
init|=
name|line
operator|.
name|substring
argument_list|(
literal|7
argument_list|)
operator|.
name|trim
argument_list|()
decl_stmt|;
name|fileMimes
operator|.
name|add
argument_list|(
name|mime
argument_list|)
expr_stmt|;
block|}
block|}
name|r
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
comment|// See how those compare to the Tika ones
name|TikaConfig
name|config
init|=
name|TikaConfig
operator|.
name|getDefaultConfig
argument_list|()
decl_stmt|;
name|MimeTypes
name|mimeTypes
init|=
name|config
operator|.
name|getMimeRepository
argument_list|()
decl_stmt|;
name|MediaTypeRegistry
name|registry
init|=
name|config
operator|.
name|getMediaTypeRegistry
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|mime
range|:
name|fileMimes
control|)
block|{
try|try
block|{
specifier|final
name|MimeType
name|type
init|=
name|mimeTypes
operator|.
name|getRegisteredMimeType
argument_list|(
name|mime
argument_list|)
decl_stmt|;
if|if
condition|(
name|type
operator|==
literal|null
condition|)
block|{
comment|// Tika doesn't know about this one
name|tikaLacking
operator|.
name|add
argument_list|(
name|mime
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Tika knows about this one!
comment|// Does Tika have magic for it?
name|boolean
name|hasMagic
init|=
name|type
operator|.
name|hasMagic
argument_list|()
decl_stmt|;
comment|// How about the children?
if|if
condition|(
operator|!
name|hasMagic
condition|)
block|{
for|for
control|(
name|MediaType
name|child
range|:
name|registry
operator|.
name|getChildTypes
argument_list|(
name|type
operator|.
name|getType
argument_list|()
argument_list|)
control|)
block|{
name|MimeType
name|childType
init|=
name|mimeTypes
operator|.
name|getRegisteredMimeType
argument_list|(
name|child
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|childType
operator|!=
literal|null
operator|&&
name|childType
operator|.
name|hasMagic
argument_list|()
condition|)
block|{
name|hasMagic
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
comment|// How about the parents?
name|MimeType
name|parentType
init|=
name|type
decl_stmt|;
while|while
condition|(
name|parentType
operator|!=
literal|null
operator|&&
operator|!
name|hasMagic
condition|)
block|{
if|if
condition|(
name|parentType
operator|.
name|hasMagic
argument_list|()
condition|)
block|{
comment|// Has magic, fine
name|hasMagic
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
comment|// Check the parent next
name|MediaType
name|parent
init|=
name|registry
operator|.
name|getSupertype
argument_list|(
name|type
operator|.
name|getType
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|parent
operator|==
name|MediaType
operator|.
name|APPLICATION_XML
operator|||
name|parent
operator|==
name|MediaType
operator|.
name|TEXT_PLAIN
operator|||
name|parent
operator|==
name|MediaType
operator|.
name|OCTET_STREAM
condition|)
block|{
comment|// Stop checking parents if we hit a top level type
name|parent
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|parent
operator|!=
literal|null
condition|)
block|{
name|parentType
operator|=
name|mimeTypes
operator|.
name|getRegisteredMimeType
argument_list|(
name|parent
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|parentType
operator|=
literal|null
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
operator|!
name|hasMagic
condition|)
block|{
name|tikaNoMagic
operator|.
name|add
argument_list|(
name|mime
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|MimeTypeException
name|e
parameter_list|)
block|{
comment|// Broken entry in the file magic directory
comment|// Silently skip
block|}
block|}
comment|// Check how many tika knows about
name|int
name|tikaTypes
init|=
literal|0
decl_stmt|;
name|int
name|tikaAliases
init|=
literal|0
decl_stmt|;
for|for
control|(
name|MediaType
name|type
range|:
name|registry
operator|.
name|getTypes
argument_list|()
control|)
block|{
name|tikaTypes
operator|++
expr_stmt|;
name|tikaAliases
operator|+=
name|registry
operator|.
name|getAliases
argument_list|(
name|type
argument_list|)
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
comment|// Report
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Tika knows about "
operator|+
name|tikaTypes
operator|+
literal|" unique mime types"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Tika knows about "
operator|+
operator|(
name|tikaTypes
operator|+
name|tikaAliases
operator|)
operator|+
literal|" mime types including aliases"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"The File Magic directory knows about "
operator|+
name|fileMimes
operator|.
name|size
argument_list|()
operator|+
literal|" unique mime types"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"The following mime types are known to File but not Tika:"
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|mime
range|:
name|tikaLacking
control|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  "
operator|+
name|mime
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"The following mime types from File have no Tika magic (but their children might):"
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|mime
range|:
name|tikaNoMagic
control|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  "
operator|+
name|mime
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_comment
comment|/**      * Returns a output writer with the given encoding.      *      * @see<a href="https://issues.apache.org/jira/browse/TIKA-277">TIKA-277</a>      * @param output output stream      * @param encoding output encoding,      *                 or<code>null</code> for the platform default      * @return output writer      * @throws UnsupportedEncodingException      *         if the given encoding is not supported      */
end_comment

begin_function
specifier|private
specifier|static
name|Writer
name|getOutputWriter
parameter_list|(
name|OutputStream
name|output
parameter_list|,
name|String
name|encoding
parameter_list|)
throws|throws
name|UnsupportedEncodingException
block|{
if|if
condition|(
name|encoding
operator|!=
literal|null
condition|)
block|{
return|return
operator|new
name|OutputStreamWriter
argument_list|(
name|output
argument_list|,
name|encoding
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"os.name"
argument_list|)
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|)
operator|.
name|startsWith
argument_list|(
literal|"mac os x"
argument_list|)
condition|)
block|{
comment|// TIKA-324: Override the default encoding on Mac OS X
return|return
operator|new
name|OutputStreamWriter
argument_list|(
name|output
argument_list|,
name|UTF_8
argument_list|)
return|;
block|}
else|else
block|{
return|return
operator|new
name|OutputStreamWriter
argument_list|(
name|output
argument_list|,
name|Charset
operator|.
name|defaultCharset
argument_list|()
argument_list|)
return|;
block|}
block|}
end_function

begin_comment
comment|/**      * Returns a transformer handler that serializes incoming SAX events      * to XHTML or HTML (depending the given method) using the given output      * encoding.      *      * @see<a href="https://issues.apache.org/jira/browse/TIKA-277">TIKA-277</a>      * @param output output stream      * @param method "xml" or "html"      * @param encoding output encoding,      *                 or<code>null</code> for the platform default      * @return {@link System#out} transformer handler      * @throws TransformerConfigurationException      *         if the transformer can not be created      */
end_comment

begin_function
specifier|private
specifier|static
name|TransformerHandler
name|getTransformerHandler
parameter_list|(
name|OutputStream
name|output
parameter_list|,
name|String
name|method
parameter_list|,
name|String
name|encoding
parameter_list|,
name|boolean
name|prettyPrint
parameter_list|)
throws|throws
name|TransformerConfigurationException
block|{
name|SAXTransformerFactory
name|factory
init|=
operator|(
name|SAXTransformerFactory
operator|)
name|SAXTransformerFactory
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|TransformerHandler
name|handler
init|=
name|factory
operator|.
name|newTransformerHandler
argument_list|()
decl_stmt|;
name|handler
operator|.
name|getTransformer
argument_list|()
operator|.
name|setOutputProperty
argument_list|(
name|OutputKeys
operator|.
name|METHOD
argument_list|,
name|method
argument_list|)
expr_stmt|;
name|handler
operator|.
name|getTransformer
argument_list|()
operator|.
name|setOutputProperty
argument_list|(
name|OutputKeys
operator|.
name|INDENT
argument_list|,
name|prettyPrint
condition|?
literal|"yes"
else|:
literal|"no"
argument_list|)
expr_stmt|;
if|if
condition|(
name|encoding
operator|!=
literal|null
condition|)
block|{
name|handler
operator|.
name|getTransformer
argument_list|()
operator|.
name|setOutputProperty
argument_list|(
name|OutputKeys
operator|.
name|ENCODING
argument_list|,
name|encoding
argument_list|)
expr_stmt|;
block|}
name|handler
operator|.
name|setResult
argument_list|(
operator|new
name|StreamResult
argument_list|(
name|output
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|handler
return|;
block|}
end_function

begin_class
specifier|private
class|class
name|FileEmbeddedDocumentExtractor
implements|implements
name|EmbeddedDocumentExtractor
block|{
specifier|private
name|int
name|count
init|=
literal|0
decl_stmt|;
specifier|private
specifier|final
name|TikaConfig
name|config
init|=
name|TikaConfig
operator|.
name|getDefaultConfig
argument_list|()
decl_stmt|;
specifier|public
name|boolean
name|shouldParseEmbedded
parameter_list|(
name|Metadata
name|metadata
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
specifier|public
name|void
name|parseEmbedded
parameter_list|(
name|InputStream
name|inputStream
parameter_list|,
name|ContentHandler
name|contentHandler
parameter_list|,
name|Metadata
name|metadata
parameter_list|,
name|boolean
name|outputHtml
parameter_list|)
throws|throws
name|SAXException
throws|,
name|IOException
block|{
name|String
name|name
init|=
name|metadata
operator|.
name|get
argument_list|(
name|Metadata
operator|.
name|RESOURCE_NAME_KEY
argument_list|)
decl_stmt|;
if|if
condition|(
name|name
operator|==
literal|null
condition|)
block|{
name|name
operator|=
literal|"file"
operator|+
name|count
operator|++
expr_stmt|;
block|}
name|MediaType
name|contentType
init|=
name|detector
operator|.
name|detect
argument_list|(
name|inputStream
argument_list|,
name|metadata
argument_list|)
decl_stmt|;
if|if
condition|(
name|name
operator|.
name|indexOf
argument_list|(
literal|'.'
argument_list|)
operator|==
operator|-
literal|1
operator|&&
name|contentType
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|name
operator|+=
name|config
operator|.
name|getMimeRepository
argument_list|()
operator|.
name|forName
argument_list|(
name|contentType
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|getExtension
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MimeTypeException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
name|String
name|relID
init|=
name|metadata
operator|.
name|get
argument_list|(
name|Metadata
operator|.
name|EMBEDDED_RELATIONSHIP_ID
argument_list|)
decl_stmt|;
if|if
condition|(
name|relID
operator|!=
literal|null
operator|&&
operator|!
name|name
operator|.
name|startsWith
argument_list|(
name|relID
argument_list|)
condition|)
block|{
name|name
operator|=
name|relID
operator|+
literal|"_"
operator|+
name|name
expr_stmt|;
block|}
name|File
name|outputFile
init|=
operator|new
name|File
argument_list|(
name|extractDir
argument_list|,
name|FilenameUtils
operator|.
name|normalize
argument_list|(
name|name
argument_list|)
argument_list|)
decl_stmt|;
name|File
name|parent
init|=
name|outputFile
operator|.
name|getParentFile
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|parent
operator|.
name|exists
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|parent
operator|.
name|mkdirs
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"unable to create directory \""
operator|+
name|parent
operator|+
literal|"\""
argument_list|)
throw|;
block|}
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Extracting '"
operator|+
name|name
operator|+
literal|"' ("
operator|+
name|contentType
operator|+
literal|") to "
operator|+
name|outputFile
argument_list|)
expr_stmt|;
try|try
init|(
name|FileOutputStream
name|os
init|=
operator|new
name|FileOutputStream
argument_list|(
name|outputFile
argument_list|)
init|)
block|{
if|if
condition|(
name|inputStream
operator|instanceof
name|TikaInputStream
condition|)
block|{
name|TikaInputStream
name|tin
init|=
operator|(
name|TikaInputStream
operator|)
name|inputStream
decl_stmt|;
if|if
condition|(
name|tin
operator|.
name|getOpenContainer
argument_list|()
operator|!=
literal|null
operator|&&
name|tin
operator|.
name|getOpenContainer
argument_list|()
operator|instanceof
name|DirectoryEntry
condition|)
block|{
name|POIFSFileSystem
name|fs
init|=
operator|new
name|POIFSFileSystem
argument_list|()
decl_stmt|;
name|copy
argument_list|(
operator|(
name|DirectoryEntry
operator|)
name|tin
operator|.
name|getOpenContainer
argument_list|()
argument_list|,
name|fs
operator|.
name|getRoot
argument_list|()
argument_list|)
expr_stmt|;
name|fs
operator|.
name|writeFilesystem
argument_list|(
name|os
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|IOUtils
operator|.
name|copy
argument_list|(
name|inputStream
argument_list|,
name|os
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|IOUtils
operator|.
name|copy
argument_list|(
name|inputStream
argument_list|,
name|os
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|//
comment|// being a CLI program messages should go to the stderr too
comment|//
name|String
name|msg
init|=
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"Ignoring unexpected exception trying to save embedded file %s (%s)"
argument_list|,
name|name
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
decl_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|msg
argument_list|)
expr_stmt|;
name|logger
operator|.
name|warn
argument_list|(
name|msg
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|copy
parameter_list|(
name|DirectoryEntry
name|sourceDir
parameter_list|,
name|DirectoryEntry
name|destDir
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|poifs
operator|.
name|filesystem
operator|.
name|Entry
name|entry
range|:
name|sourceDir
control|)
block|{
if|if
condition|(
name|entry
operator|instanceof
name|DirectoryEntry
condition|)
block|{
comment|// Need to recurse
name|DirectoryEntry
name|newDir
init|=
name|destDir
operator|.
name|createDirectory
argument_list|(
name|entry
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|copy
argument_list|(
operator|(
name|DirectoryEntry
operator|)
name|entry
argument_list|,
name|newDir
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Copy entry
try|try
init|(
name|InputStream
name|contents
init|=
operator|new
name|DocumentInputStream
argument_list|(
operator|(
name|DocumentEntry
operator|)
name|entry
argument_list|)
init|)
block|{
name|destDir
operator|.
name|createDocument
argument_list|(
name|entry
operator|.
name|getName
argument_list|()
argument_list|,
name|contents
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
end_class

begin_class
specifier|private
class|class
name|TikaServer
extends|extends
name|Thread
block|{
specifier|private
specifier|final
name|ServerSocket
name|server
decl_stmt|;
specifier|public
name|TikaServer
parameter_list|(
name|int
name|port
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
literal|"Tika server at port "
operator|+
name|port
argument_list|)
expr_stmt|;
name|server
operator|=
operator|new
name|ServerSocket
argument_list|(
name|port
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
try|try
block|{
while|while
condition|(
literal|true
condition|)
block|{
name|processSocketInBackground
argument_list|(
name|server
operator|.
name|accept
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|server
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|processSocketInBackground
parameter_list|(
specifier|final
name|Socket
name|socket
parameter_list|)
block|{
name|Thread
name|thread
init|=
operator|new
name|Thread
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|InputStream
name|input
init|=
literal|null
decl_stmt|;
try|try
block|{
name|InputStream
name|rawInput
init|=
name|socket
operator|.
name|getInputStream
argument_list|()
decl_stmt|;
name|OutputStream
name|output
init|=
name|socket
operator|.
name|getOutputStream
argument_list|()
decl_stmt|;
name|input
operator|=
name|TikaInputStream
operator|.
name|get
argument_list|(
name|rawInput
argument_list|)
expr_stmt|;
name|type
operator|.
name|process
argument_list|(
name|input
argument_list|,
name|output
argument_list|,
operator|new
name|Metadata
argument_list|()
argument_list|)
expr_stmt|;
name|output
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|input
operator|!=
literal|null
condition|)
block|{
name|input
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|socket
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
decl_stmt|;
name|thread
operator|.
name|setDaemon
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|thread
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
block|}
end_class

begin_class
specifier|private
class|class
name|NoDocumentMetHandler
extends|extends
name|DefaultHandler
block|{
specifier|protected
specifier|final
name|Metadata
name|metadata
decl_stmt|;
specifier|protected
name|PrintWriter
name|writer
decl_stmt|;
specifier|private
name|boolean
name|metOutput
decl_stmt|;
specifier|public
name|NoDocumentMetHandler
parameter_list|(
name|Metadata
name|metadata
parameter_list|,
name|PrintWriter
name|writer
parameter_list|)
block|{
name|this
operator|.
name|metadata
operator|=
name|metadata
expr_stmt|;
name|this
operator|.
name|writer
operator|=
name|writer
expr_stmt|;
name|this
operator|.
name|metOutput
operator|=
literal|false
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|endDocument
parameter_list|()
block|{
name|String
index|[]
name|names
init|=
name|metadata
operator|.
name|names
argument_list|()
decl_stmt|;
name|Arrays
operator|.
name|sort
argument_list|(
name|names
argument_list|)
expr_stmt|;
name|outputMetadata
argument_list|(
name|names
argument_list|)
expr_stmt|;
name|writer
operator|.
name|flush
argument_list|()
expr_stmt|;
name|this
operator|.
name|metOutput
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|void
name|outputMetadata
parameter_list|(
name|String
index|[]
name|names
parameter_list|)
block|{
for|for
control|(
name|String
name|name
range|:
name|names
control|)
block|{
for|for
control|(
name|String
name|value
range|:
name|metadata
operator|.
name|getValues
argument_list|(
name|name
argument_list|)
control|)
block|{
name|writer
operator|.
name|println
argument_list|(
name|name
operator|+
literal|": "
operator|+
name|value
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|boolean
name|metOutput
parameter_list|()
block|{
return|return
name|this
operator|.
name|metOutput
return|;
block|}
block|}
end_class

begin_comment
comment|/**      * Outputs the Tika metadata as XMP using the Tika XMP module      */
end_comment

begin_class
specifier|private
class|class
name|NoDocumentXMPMetaHandler
extends|extends
name|DefaultHandler
block|{
specifier|protected
specifier|final
name|Metadata
name|metadata
decl_stmt|;
specifier|protected
name|PrintWriter
name|writer
decl_stmt|;
specifier|public
name|NoDocumentXMPMetaHandler
parameter_list|(
name|Metadata
name|metadata
parameter_list|,
name|PrintWriter
name|writer
parameter_list|)
block|{
name|this
operator|.
name|metadata
operator|=
name|metadata
expr_stmt|;
name|this
operator|.
name|writer
operator|=
name|writer
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|endDocument
parameter_list|()
throws|throws
name|SAXException
block|{
try|try
block|{
name|XMPMetadata
name|xmp
init|=
operator|new
name|XMPMetadata
argument_list|(
name|metadata
argument_list|)
decl_stmt|;
name|String
name|result
decl_stmt|;
name|result
operator|=
name|xmp
operator|.
name|toString
argument_list|()
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|writer
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TikaException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SAXException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
end_class

begin_class
specifier|private
class|class
name|NoDocumentJSONMetHandler
extends|extends
name|DefaultHandler
block|{
specifier|protected
specifier|final
name|Metadata
name|metadata
decl_stmt|;
specifier|protected
name|PrintWriter
name|writer
decl_stmt|;
specifier|public
name|NoDocumentJSONMetHandler
parameter_list|(
name|Metadata
name|metadata
parameter_list|,
name|PrintWriter
name|writer
parameter_list|)
block|{
name|this
operator|.
name|metadata
operator|=
name|metadata
expr_stmt|;
name|this
operator|.
name|writer
operator|=
name|writer
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|endDocument
parameter_list|()
throws|throws
name|SAXException
block|{
try|try
block|{
name|JsonMetadata
operator|.
name|setPrettyPrinting
argument_list|(
name|prettyPrint
argument_list|)
expr_stmt|;
name|JsonMetadata
operator|.
name|toJson
argument_list|(
name|metadata
argument_list|,
name|writer
argument_list|)
expr_stmt|;
name|writer
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TikaException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SAXException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
end_class

unit|}
end_unit

