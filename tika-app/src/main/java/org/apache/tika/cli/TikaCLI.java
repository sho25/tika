begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|cli
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStreamWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|UnsupportedEncodingException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Writer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|OutputKeys
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|TransformerConfigurationException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|sax
operator|.
name|SAXTransformerFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|sax
operator|.
name|TransformerHandler
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|stream
operator|.
name|StreamResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|BasicConfigurator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|SimpleLayout
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|WriterAppender
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|gui
operator|.
name|TikaGUI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|metadata
operator|.
name|Metadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|metadata
operator|.
name|MetadataHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|AutoDetectParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|ParseContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|Parser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|html
operator|.
name|BoilerpipeContentHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|sax
operator|.
name|BodyContentHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|ContentHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|helpers
operator|.
name|DefaultHandler
import|;
end_import

begin_comment
comment|/**  * Simple command line interface for Apache Tika.  */
end_comment

begin_class
specifier|public
class|class
name|TikaCLI
block|{
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
name|BasicConfigurator
operator|.
name|configure
argument_list|(
operator|new
name|WriterAppender
argument_list|(
operator|new
name|SimpleLayout
argument_list|()
argument_list|,
name|System
operator|.
name|err
argument_list|)
argument_list|)
expr_stmt|;
name|Logger
operator|.
name|getRootLogger
argument_list|()
operator|.
name|setLevel
argument_list|(
name|Level
operator|.
name|INFO
argument_list|)
expr_stmt|;
name|TikaCLI
name|cli
init|=
operator|new
name|TikaCLI
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|args
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|cli
operator|.
name|process
argument_list|(
name|args
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|cli
operator|.
name|pipeMode
condition|)
block|{
name|cli
operator|.
name|process
argument_list|(
literal|"-"
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
interface|interface
name|OutputType
block|{
name|ContentHandler
name|getContentHandler
parameter_list|()
throws|throws
name|Exception
function_decl|;
block|}
specifier|private
specifier|final
name|OutputType
name|XML
init|=
operator|new
name|OutputType
argument_list|()
block|{
specifier|public
name|ContentHandler
name|getContentHandler
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|getTransformerHandler
argument_list|(
literal|"xml"
argument_list|,
name|encoding
argument_list|)
return|;
block|}
block|}
decl_stmt|;
specifier|private
specifier|final
name|OutputType
name|HTML
init|=
operator|new
name|OutputType
argument_list|()
block|{
specifier|public
name|ContentHandler
name|getContentHandler
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|getTransformerHandler
argument_list|(
literal|"html"
argument_list|,
name|encoding
argument_list|)
return|;
block|}
block|}
decl_stmt|;
specifier|private
specifier|final
name|OutputType
name|TEXT
init|=
operator|new
name|OutputType
argument_list|()
block|{
specifier|public
name|ContentHandler
name|getContentHandler
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|new
name|BodyContentHandler
argument_list|(
name|getSystemOutWriter
argument_list|(
name|encoding
argument_list|)
argument_list|)
return|;
block|}
block|}
decl_stmt|;
specifier|private
specifier|final
name|OutputType
name|TEXT_MAIN
init|=
operator|new
name|OutputType
argument_list|()
block|{
specifier|public
name|ContentHandler
name|getContentHandler
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|new
name|BoilerpipeContentHandler
argument_list|(
name|getSystemOutWriter
argument_list|(
name|encoding
argument_list|)
argument_list|)
return|;
block|}
block|}
decl_stmt|;
specifier|private
specifier|final
name|OutputType
name|METADATA
init|=
operator|new
name|OutputType
argument_list|()
block|{
specifier|public
name|ContentHandler
name|getContentHandler
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|PrintWriter
name|writer
init|=
operator|new
name|PrintWriter
argument_list|(
name|getSystemOutWriter
argument_list|(
name|encoding
argument_list|)
argument_list|)
decl_stmt|;
return|return
operator|new
name|DefaultHandler
argument_list|()
block|{
specifier|public
name|void
name|endDocument
parameter_list|()
block|{
name|String
index|[]
name|names
init|=
name|metadata
operator|.
name|names
argument_list|()
decl_stmt|;
name|Arrays
operator|.
name|sort
argument_list|(
name|names
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|name
range|:
name|names
control|)
block|{
name|writer
operator|.
name|println
argument_list|(
name|name
operator|+
literal|": "
operator|+
name|metadata
operator|.
name|get
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
block|}
return|;
block|}
block|}
decl_stmt|;
specifier|private
name|ParseContext
name|context
decl_stmt|;
specifier|private
name|Parser
name|parser
decl_stmt|;
specifier|private
name|Metadata
name|metadata
decl_stmt|;
specifier|private
name|OutputType
name|type
init|=
name|XML
decl_stmt|;
comment|/**      * Output character encoding, or<code>null</code> for platform default      */
specifier|private
name|String
name|encoding
init|=
literal|null
decl_stmt|;
specifier|private
name|boolean
name|pipeMode
init|=
literal|true
decl_stmt|;
specifier|public
name|TikaCLI
parameter_list|()
throws|throws
name|TransformerConfigurationException
block|{
name|context
operator|=
operator|new
name|ParseContext
argument_list|()
expr_stmt|;
name|parser
operator|=
operator|new
name|AutoDetectParser
argument_list|()
expr_stmt|;
name|context
operator|.
name|set
argument_list|(
name|Parser
operator|.
name|class
argument_list|,
name|parser
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|process
parameter_list|(
name|String
name|arg
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|arg
operator|.
name|equals
argument_list|(
literal|"-?"
argument_list|)
operator|||
name|arg
operator|.
name|equals
argument_list|(
literal|"--help"
argument_list|)
condition|)
block|{
name|pipeMode
operator|=
literal|false
expr_stmt|;
name|usage
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|arg
operator|.
name|equals
argument_list|(
literal|"-v"
argument_list|)
operator|||
name|arg
operator|.
name|equals
argument_list|(
literal|"--verbose"
argument_list|)
condition|)
block|{
name|Logger
operator|.
name|getRootLogger
argument_list|()
operator|.
name|setLevel
argument_list|(
name|Level
operator|.
name|DEBUG
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|arg
operator|.
name|equals
argument_list|(
literal|"-g"
argument_list|)
operator|||
name|arg
operator|.
name|equals
argument_list|(
literal|"--gui"
argument_list|)
condition|)
block|{
name|pipeMode
operator|=
literal|false
expr_stmt|;
name|TikaGUI
operator|.
name|main
argument_list|(
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|arg
operator|.
name|startsWith
argument_list|(
literal|"-e"
argument_list|)
condition|)
block|{
name|encoding
operator|=
name|arg
operator|.
name|substring
argument_list|(
literal|"-e"
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|arg
operator|.
name|startsWith
argument_list|(
literal|"--encoding="
argument_list|)
condition|)
block|{
name|encoding
operator|=
name|arg
operator|.
name|substring
argument_list|(
literal|"--encoding="
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|arg
operator|.
name|equals
argument_list|(
literal|"-x"
argument_list|)
operator|||
name|arg
operator|.
name|equals
argument_list|(
literal|"--xml"
argument_list|)
condition|)
block|{
name|type
operator|=
name|XML
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|arg
operator|.
name|equals
argument_list|(
literal|"-h"
argument_list|)
operator|||
name|arg
operator|.
name|equals
argument_list|(
literal|"--html"
argument_list|)
condition|)
block|{
name|type
operator|=
name|HTML
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|arg
operator|.
name|equals
argument_list|(
literal|"-t"
argument_list|)
operator|||
name|arg
operator|.
name|equals
argument_list|(
literal|"--text"
argument_list|)
condition|)
block|{
name|type
operator|=
name|TEXT
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|arg
operator|.
name|equals
argument_list|(
literal|"-T"
argument_list|)
operator|||
name|arg
operator|.
name|equals
argument_list|(
literal|"--text-main"
argument_list|)
condition|)
block|{
name|type
operator|=
name|TEXT_MAIN
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|arg
operator|.
name|equals
argument_list|(
literal|"-m"
argument_list|)
operator|||
name|arg
operator|.
name|equals
argument_list|(
literal|"--metadata"
argument_list|)
condition|)
block|{
name|type
operator|=
name|METADATA
expr_stmt|;
block|}
else|else
block|{
name|pipeMode
operator|=
literal|false
expr_stmt|;
name|metadata
operator|=
operator|new
name|Metadata
argument_list|()
expr_stmt|;
if|if
condition|(
name|arg
operator|.
name|equals
argument_list|(
literal|"-"
argument_list|)
condition|)
block|{
name|parser
operator|.
name|parse
argument_list|(
name|System
operator|.
name|in
argument_list|,
name|type
operator|.
name|getContentHandler
argument_list|()
argument_list|,
name|metadata
argument_list|,
name|context
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|URL
name|url
decl_stmt|;
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|arg
argument_list|)
decl_stmt|;
if|if
condition|(
name|file
operator|.
name|isFile
argument_list|()
condition|)
block|{
name|url
operator|=
name|file
operator|.
name|toURI
argument_list|()
operator|.
name|toURL
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|url
operator|=
operator|new
name|URL
argument_list|(
name|arg
argument_list|)
expr_stmt|;
block|}
name|InputStream
name|input
init|=
name|MetadataHelper
operator|.
name|getInputStream
argument_list|(
name|url
argument_list|,
name|metadata
argument_list|)
decl_stmt|;
try|try
block|{
name|parser
operator|.
name|parse
argument_list|(
name|input
argument_list|,
name|type
operator|.
name|getContentHandler
argument_list|()
argument_list|,
name|metadata
argument_list|,
name|context
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|input
operator|.
name|close
argument_list|()
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|private
name|void
name|usage
parameter_list|()
block|{
name|PrintStream
name|out
init|=
name|System
operator|.
name|out
decl_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"usage: tika [option] [file]"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"Options:"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"    -?  or --help        Print this usage message"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"    -v  or --verbose     Print debug level messages"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"    -g  or --gui         Start the Apache Tika GUI"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"    -eX or --encoding=X  Use output encoding X"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"    -x  or --xml         Output XHTML content (default)"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"    -h  or --html        Output HTML content"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"    -t  or --text        Output plain text content"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"    -T  or --text-main   Output plain text content (main content only)"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"    -m  or --metadata    Output only metadata"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"Description:"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"    Apache Tika will parse the file(s) specified on the"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"    command line and output the extracted text content"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"    or metadata to standard output."
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"    Instead of a file name you can also specify the URL"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"    of a document to be parsed."
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"    If no file name or URL is specified (or the special"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"    name \"-\" is used), then the standard input stream"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"    is parsed."
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"    Use the \"--gui\" (or \"-g\") option to start"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"    the Apache Tika GUI. You can drag and drop files"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"    from a normal file explorer to the GUI window to"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"    extract text content and metadata from the files."
argument_list|)
expr_stmt|;
block|}
comment|/**      * Returns a {@link System#out} writer with the given output encoding.      *      * @see<a href="https://issues.apache.org/jira/browse/TIKA-277">TIKA-277</a>      * @param encoding output encoding,      *                 or<code>null</code> for the platform default      * @return {@link System#out} writer      * @throws UnsupportedEncodingException      *         if the configured encoding is not supported      */
specifier|private
specifier|static
name|Writer
name|getSystemOutWriter
parameter_list|(
name|String
name|encoding
parameter_list|)
throws|throws
name|UnsupportedEncodingException
block|{
if|if
condition|(
name|encoding
operator|!=
literal|null
condition|)
block|{
return|return
operator|new
name|OutputStreamWriter
argument_list|(
name|System
operator|.
name|out
argument_list|,
name|encoding
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"os.name"
argument_list|)
operator|.
name|toLowerCase
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"mac os x"
argument_list|)
condition|)
block|{
comment|// TIKA-324: Override the default encoding on Mac OS X
return|return
operator|new
name|OutputStreamWriter
argument_list|(
name|System
operator|.
name|out
argument_list|,
literal|"UTF-8"
argument_list|)
return|;
block|}
else|else
block|{
return|return
operator|new
name|OutputStreamWriter
argument_list|(
name|System
operator|.
name|out
argument_list|)
return|;
block|}
block|}
comment|/**      * Returns a transformer handler that serializes incoming SAX events      * to XHTML or HTML (depending the given method) using the given output      * encoding.      *      * @see<a href="https://issues.apache.org/jira/browse/TIKA-277">TIKA-277</a>      * @param method "xml" or "html"      * @param encoding output encoding,      *                 or<code>null</code> for the platform default      * @return {@link System#out} transformer handler      * @throws TransformerConfigurationException      *         if the transformer can not be created      */
specifier|private
specifier|static
name|TransformerHandler
name|getTransformerHandler
parameter_list|(
name|String
name|method
parameter_list|,
name|String
name|encoding
parameter_list|)
throws|throws
name|TransformerConfigurationException
block|{
name|SAXTransformerFactory
name|factory
init|=
operator|(
name|SAXTransformerFactory
operator|)
name|SAXTransformerFactory
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|TransformerHandler
name|handler
init|=
name|factory
operator|.
name|newTransformerHandler
argument_list|()
decl_stmt|;
name|handler
operator|.
name|getTransformer
argument_list|()
operator|.
name|setOutputProperty
argument_list|(
name|OutputKeys
operator|.
name|METHOD
argument_list|,
name|method
argument_list|)
expr_stmt|;
name|handler
operator|.
name|getTransformer
argument_list|()
operator|.
name|setOutputProperty
argument_list|(
name|OutputKeys
operator|.
name|INDENT
argument_list|,
literal|"yes"
argument_list|)
expr_stmt|;
if|if
condition|(
name|encoding
operator|!=
literal|null
condition|)
block|{
name|handler
operator|.
name|getTransformer
argument_list|()
operator|.
name|setOutputProperty
argument_list|(
name|OutputKeys
operator|.
name|ENCODING
argument_list|,
name|encoding
argument_list|)
expr_stmt|;
block|}
name|handler
operator|.
name|setResult
argument_list|(
operator|new
name|StreamResult
argument_list|(
name|System
operator|.
name|out
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|handler
return|;
block|}
block|}
end_class

end_unit

