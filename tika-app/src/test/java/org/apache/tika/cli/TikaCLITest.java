begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|cli
package|;
end_package

begin_import
import|import static
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
operator|.
name|UTF_8
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InvalidObjectException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|ZipEntry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|ZipFile
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|ZipOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FilenameUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|exception
operator|.
name|TikaException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Ignore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * Tests the Tika's cli  */
end_comment

begin_class
specifier|public
class|class
name|TikaCLITest
block|{
comment|/* Test members */
specifier|private
name|ByteArrayOutputStream
name|outContent
init|=
literal|null
decl_stmt|;
specifier|private
name|PrintStream
name|stdout
init|=
literal|null
decl_stmt|;
specifier|private
name|File
name|testDataFile
init|=
operator|new
name|File
argument_list|(
literal|"src/test/resources/test-data"
argument_list|)
decl_stmt|;
specifier|private
name|URI
name|testDataURI
init|=
name|testDataFile
operator|.
name|toURI
argument_list|()
decl_stmt|;
specifier|private
name|String
name|resourcePrefix
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|outContent
operator|=
operator|new
name|ByteArrayOutputStream
argument_list|()
expr_stmt|;
name|resourcePrefix
operator|=
name|testDataURI
operator|.
name|toString
argument_list|()
expr_stmt|;
name|stdout
operator|=
name|System
operator|.
name|out
expr_stmt|;
name|System
operator|.
name|setOut
argument_list|(
operator|new
name|PrintStream
argument_list|(
name|outContent
argument_list|,
literal|true
argument_list|,
name|UTF_8
operator|.
name|name
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Tests --list-parser-detail option of the cli      *       * @throws Exception      */
annotation|@
name|Test
specifier|public
name|void
name|testListParserDetail
parameter_list|()
throws|throws
name|Exception
block|{
name|String
index|[]
name|params
init|=
block|{
literal|"--list-parser-detail"
block|}
decl_stmt|;
name|TikaCLI
operator|.
name|main
argument_list|(
name|params
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|outContent
operator|.
name|toString
argument_list|(
name|UTF_8
operator|.
name|name
argument_list|()
argument_list|)
operator|.
name|contains
argument_list|(
literal|"application/vnd.oasis.opendocument.text-web"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Tests --list-parser option of the cli      *       * @throws Exception      */
annotation|@
name|Test
specifier|public
name|void
name|testListParsers
parameter_list|()
throws|throws
name|Exception
block|{
name|String
index|[]
name|params
init|=
block|{
literal|"--list-parser"
block|}
decl_stmt|;
name|TikaCLI
operator|.
name|main
argument_list|(
name|params
argument_list|)
expr_stmt|;
comment|//Assert was commented temporarily for finding the problem
comment|//		Assert.assertTrue(outContent != null&& outContent.toString("UTF-8").contains("org.apache.tika.parser.iwork.IWorkPackageParser"));
block|}
comment|/**      * Tests -x option of the cli      *       * @throws Exception      */
annotation|@
name|Test
specifier|public
name|void
name|testXMLOutput
parameter_list|()
throws|throws
name|Exception
block|{
name|String
index|[]
name|params
init|=
block|{
literal|"-x"
block|,
name|resourcePrefix
operator|+
literal|"alice.cli.test"
block|}
decl_stmt|;
name|TikaCLI
operator|.
name|main
argument_list|(
name|params
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|outContent
operator|.
name|toString
argument_list|(
name|UTF_8
operator|.
name|name
argument_list|()
argument_list|)
operator|.
name|contains
argument_list|(
literal|"?xml version=\"1.0\" encoding=\"UTF-8\"?"
argument_list|)
argument_list|)
expr_stmt|;
name|params
operator|=
operator|new
name|String
index|[]
block|{
literal|"-x"
block|,
literal|"--digest=SHA256"
block|,
name|resourcePrefix
operator|+
literal|"alice.cli.test"
block|}
expr_stmt|;
name|TikaCLI
operator|.
name|main
argument_list|(
name|params
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|outContent
operator|.
name|toString
argument_list|(
name|UTF_8
operator|.
name|name
argument_list|()
argument_list|)
operator|.
name|contains
argument_list|(
literal|"<meta name=\"X-TIKA:digest:SHA256\" content=\"e90779adbac09c4ee"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Tests a -h option of the cli      *       * @throws Exception      */
annotation|@
name|Test
specifier|public
name|void
name|testHTMLOutput
parameter_list|()
throws|throws
name|Exception
block|{
name|String
index|[]
name|params
init|=
block|{
literal|"-h"
block|,
name|resourcePrefix
operator|+
literal|"alice.cli.test"
block|}
decl_stmt|;
name|TikaCLI
operator|.
name|main
argument_list|(
name|params
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|outContent
operator|.
name|toString
argument_list|(
literal|"UTF-8"
argument_list|)
operator|.
name|contains
argument_list|(
literal|"html xmlns=\"http://www.w3.org/1999/xhtml"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Expanded<title></title> element should be present"
argument_list|,
name|outContent
operator|.
name|toString
argument_list|(
name|UTF_8
operator|.
name|name
argument_list|()
argument_list|)
operator|.
name|contains
argument_list|(
literal|"<title></title>"
argument_list|)
argument_list|)
expr_stmt|;
name|params
operator|=
operator|new
name|String
index|[]
block|{
literal|"-h"
block|,
literal|"--digest=SHA384"
block|,
name|resourcePrefix
operator|+
literal|"alice.cli.test"
block|}
expr_stmt|;
name|TikaCLI
operator|.
name|main
argument_list|(
name|params
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|outContent
operator|.
name|toString
argument_list|(
literal|"UTF-8"
argument_list|)
operator|.
name|contains
argument_list|(
literal|"<meta name=\"X-TIKA:digest:SHA384\" content=\"c69ea023f5da95a026"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Tests -t option of the cli      *       * @throws Exception      */
annotation|@
name|Test
specifier|public
name|void
name|testTextOutput
parameter_list|()
throws|throws
name|Exception
block|{
name|String
index|[]
name|params
init|=
block|{
literal|"-t"
block|,
name|resourcePrefix
operator|+
literal|"alice.cli.test"
block|}
decl_stmt|;
name|TikaCLI
operator|.
name|main
argument_list|(
name|params
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|outContent
operator|.
name|toString
argument_list|(
name|UTF_8
operator|.
name|name
argument_list|()
argument_list|)
operator|.
name|contains
argument_list|(
literal|"finished off the cake"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Tests -m option of the cli      * @throws Exception      */
annotation|@
name|Test
specifier|public
name|void
name|testMetadataOutput
parameter_list|()
throws|throws
name|Exception
block|{
name|String
index|[]
name|params
init|=
block|{
literal|"-m"
block|,
name|resourcePrefix
operator|+
literal|"alice.cli.test"
block|}
decl_stmt|;
name|TikaCLI
operator|.
name|main
argument_list|(
name|params
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|outContent
operator|.
name|toString
argument_list|(
name|UTF_8
operator|.
name|name
argument_list|()
argument_list|)
operator|.
name|contains
argument_list|(
literal|"text/plain"
argument_list|)
argument_list|)
expr_stmt|;
name|params
operator|=
operator|new
name|String
index|[]
block|{
literal|"-m"
block|,
literal|"--digest=SHA512"
block|,
name|resourcePrefix
operator|+
literal|"alice.cli.test"
block|}
expr_stmt|;
name|TikaCLI
operator|.
name|main
argument_list|(
name|params
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|outContent
operator|.
name|toString
argument_list|(
name|UTF_8
operator|.
name|name
argument_list|()
argument_list|)
operator|.
name|contains
argument_list|(
literal|"text/plain"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|outContent
operator|.
name|toString
argument_list|(
name|UTF_8
operator|.
name|name
argument_list|()
argument_list|)
operator|.
name|contains
argument_list|(
literal|"X-TIKA:digest:SHA512: dd459d99bc19ff78fd31fbae46e0"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Basic tests for -json option      *       * @throws Exception      */
annotation|@
name|Test
specifier|public
name|void
name|testJsonMetadataOutput
parameter_list|()
throws|throws
name|Exception
block|{
name|String
index|[]
name|params
init|=
block|{
literal|"--json"
block|,
literal|"--digest=MD2"
block|,
name|resourcePrefix
operator|+
literal|"testJsonMultipleInts.html"
block|}
decl_stmt|;
name|TikaCLI
operator|.
name|main
argument_list|(
name|params
argument_list|)
expr_stmt|;
name|String
name|json
init|=
name|outContent
operator|.
name|toString
argument_list|(
name|UTF_8
operator|.
name|name
argument_list|()
argument_list|)
decl_stmt|;
comment|//TIKA-1310
name|assertTrue
argument_list|(
name|json
operator|.
name|contains
argument_list|(
literal|"\"fb:admins\":\"1,2,3,4\","
argument_list|)
argument_list|)
expr_stmt|;
comment|//test legacy alphabetic sort of keys
name|int
name|enc
init|=
name|json
operator|.
name|indexOf
argument_list|(
literal|"\"Content-Encoding\""
argument_list|)
decl_stmt|;
name|int
name|fb
init|=
name|json
operator|.
name|indexOf
argument_list|(
literal|"fb:admins"
argument_list|)
decl_stmt|;
name|int
name|title
init|=
name|json
operator|.
name|indexOf
argument_list|(
literal|"\"dc:title\""
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|enc
operator|>
operator|-
literal|1
operator|&&
name|fb
operator|>
operator|-
literal|1
operator|&&
name|enc
operator|<
name|fb
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fb
operator|>
operator|-
literal|1
operator|&&
name|title
operator|>
operator|-
literal|1
operator|&&
name|fb
operator|>
name|title
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|json
operator|.
name|contains
argument_list|(
literal|"\"X-TIKA:digest:MD2\":"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Test for -json with prettyprint option      *      * @throws Exception      */
annotation|@
name|Test
specifier|public
name|void
name|testJsonMetadataPrettyPrintOutput
parameter_list|()
throws|throws
name|Exception
block|{
name|String
index|[]
name|params
init|=
block|{
literal|"--json"
block|,
literal|"-r"
block|,
name|resourcePrefix
operator|+
literal|"testJsonMultipleInts.html"
block|}
decl_stmt|;
name|TikaCLI
operator|.
name|main
argument_list|(
name|params
argument_list|)
expr_stmt|;
name|String
name|json
init|=
name|outContent
operator|.
name|toString
argument_list|(
name|UTF_8
operator|.
name|name
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|json
operator|.
name|contains
argument_list|(
literal|"  \"X-Parsed-By\": [\n"
operator|+
literal|"    \"org.apache.tika.parser.DefaultParser\",\n"
operator|+
literal|"    \"org.apache.tika.parser.html.HtmlParser\"\n"
operator|+
literal|"  ],\n"
argument_list|)
argument_list|)
expr_stmt|;
comment|//test legacy alphabetic sort of keys
name|int
name|enc
init|=
name|json
operator|.
name|indexOf
argument_list|(
literal|"\"Content-Encoding\""
argument_list|)
decl_stmt|;
name|int
name|fb
init|=
name|json
operator|.
name|indexOf
argument_list|(
literal|"fb:admins"
argument_list|)
decl_stmt|;
name|int
name|title
init|=
name|json
operator|.
name|indexOf
argument_list|(
literal|"\"dc:title\""
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|enc
operator|>
operator|-
literal|1
operator|&&
name|fb
operator|>
operator|-
literal|1
operator|&&
name|enc
operator|<
name|fb
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fb
operator|>
operator|-
literal|1
operator|&&
name|title
operator|>
operator|-
literal|1
operator|&&
name|fb
operator|>
name|title
argument_list|)
expr_stmt|;
block|}
comment|/**      * Tests -l option of the cli      *       * @throws Exception      */
annotation|@
name|Test
specifier|public
name|void
name|testLanguageOutput
parameter_list|()
throws|throws
name|Exception
block|{
name|String
index|[]
name|params
init|=
block|{
literal|"-l"
block|,
name|resourcePrefix
operator|+
literal|"alice.cli.test"
block|}
decl_stmt|;
name|TikaCLI
operator|.
name|main
argument_list|(
name|params
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|outContent
operator|.
name|toString
argument_list|(
name|UTF_8
operator|.
name|name
argument_list|()
argument_list|)
operator|.
name|contains
argument_list|(
literal|"en"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Tests -d option of the cli      *       * @throws Exception      */
annotation|@
name|Test
specifier|public
name|void
name|testDetectOutput
parameter_list|()
throws|throws
name|Exception
block|{
name|String
index|[]
name|params
init|=
block|{
literal|"-d"
block|,
name|resourcePrefix
operator|+
literal|"alice.cli.test"
block|}
decl_stmt|;
name|TikaCLI
operator|.
name|main
argument_list|(
name|params
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|outContent
operator|.
name|toString
argument_list|(
name|UTF_8
operator|.
name|name
argument_list|()
argument_list|)
operator|.
name|contains
argument_list|(
literal|"text/plain"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Tests --list-met-models option of the cli      *       * @throws Exception      */
annotation|@
name|Test
specifier|public
name|void
name|testListMetModels
parameter_list|()
throws|throws
name|Exception
block|{
name|String
index|[]
name|params
init|=
block|{
literal|"--list-met-models"
block|,
name|resourcePrefix
operator|+
literal|"alice.cli.test"
block|}
decl_stmt|;
name|TikaCLI
operator|.
name|main
argument_list|(
name|params
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|outContent
operator|.
name|toString
argument_list|(
name|UTF_8
operator|.
name|name
argument_list|()
argument_list|)
operator|.
name|contains
argument_list|(
literal|"text/plain"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Tests --list-supported-types option of the cli      *       * @throws Exception      */
annotation|@
name|Test
specifier|public
name|void
name|testListSupportedTypes
parameter_list|()
throws|throws
name|Exception
block|{
name|String
index|[]
name|params
init|=
block|{
literal|"--list-supported-types"
block|,
name|resourcePrefix
operator|+
literal|"alice.cli.test"
block|}
decl_stmt|;
name|TikaCLI
operator|.
name|main
argument_list|(
name|params
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|outContent
operator|.
name|toString
argument_list|(
name|UTF_8
operator|.
name|name
argument_list|()
argument_list|)
operator|.
name|contains
argument_list|(
literal|"supertype: application/octet-stream"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Tears down the test. Returns the System.out      */
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|System
operator|.
name|setOut
argument_list|(
name|stdout
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testExtractSimple
parameter_list|()
throws|throws
name|Exception
block|{
name|String
index|[]
name|expectedChildren
init|=
operator|new
name|String
index|[]
block|{
literal|"MBD002B040A.cdx"
block|,
literal|"file4.png"
block|,
literal|"MBD002B0FA6_file5.bin"
block|,
literal|"MBD00262FE3.txt"
block|,
literal|"file0.emf"
block|}
decl_stmt|;
name|testExtract
argument_list|(
literal|"/coffee.xls"
argument_list|,
name|expectedChildren
argument_list|,
literal|8
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testExtractAbsolute
parameter_list|()
throws|throws
name|Exception
block|{
name|String
index|[]
name|expectedChildren
init|=
operator|new
name|String
index|[]
block|{
literal|"dangerous/dont/touch.pl"
block|,         }
decl_stmt|;
name|testExtract
argument_list|(
literal|"testZip_absolutePath.zip"
argument_list|,
name|expectedChildren
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testExtractRelative
parameter_list|()
throws|throws
name|Exception
block|{
name|String
index|[]
name|expectedChildren
init|=
operator|new
name|String
index|[]
block|{
literal|"touch.pl"
block|,         }
decl_stmt|;
name|testExtract
argument_list|(
literal|"testZip_relative.zip"
argument_list|,
name|expectedChildren
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testExtractOverlapping
parameter_list|()
throws|throws
name|Exception
block|{
comment|//there should be two files, one with a prepended uuid-f1.txt
name|String
index|[]
name|expectedChildren
init|=
operator|new
name|String
index|[]
block|{
literal|"f1.txt"
block|,         }
decl_stmt|;
name|testExtract
argument_list|(
literal|"testZip_overlappingNames.zip"
argument_list|,
name|expectedChildren
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testExtract0x00
parameter_list|()
throws|throws
name|Exception
block|{
name|String
index|[]
name|expectedChildren
init|=
operator|new
name|String
index|[]
block|{
literal|"dang erous.pl"
block|,         }
decl_stmt|;
name|testExtract
argument_list|(
literal|"testZip_zeroByte.zip"
argument_list|,
name|expectedChildren
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|testExtract
parameter_list|(
name|String
name|targetFile
parameter_list|,
name|String
index|[]
name|expectedChildrenFileNames
parameter_list|)
throws|throws
name|Exception
block|{
name|testExtract
argument_list|(
name|targetFile
argument_list|,
name|expectedChildrenFileNames
argument_list|,
name|expectedChildrenFileNames
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|testExtract
parameter_list|(
name|String
name|targetFile
parameter_list|,
name|String
index|[]
name|expectedChildrenFileNames
parameter_list|,
name|int
name|expectedLength
parameter_list|)
throws|throws
name|Exception
block|{
name|File
name|tempFile
init|=
name|File
operator|.
name|createTempFile
argument_list|(
literal|"tika-test-"
argument_list|,
literal|""
argument_list|)
decl_stmt|;
name|tempFile
operator|.
name|delete
argument_list|()
expr_stmt|;
name|tempFile
operator|.
name|mkdir
argument_list|()
expr_stmt|;
try|try
block|{
name|String
index|[]
name|params
init|=
block|{
literal|"--extract-dir="
operator|+
name|tempFile
operator|.
name|getAbsolutePath
argument_list|()
block|,
literal|"-z"
block|,
name|resourcePrefix
operator|+
literal|"/"
operator|+
name|targetFile
block|}
decl_stmt|;
name|TikaCLI
operator|.
name|main
argument_list|(
name|params
argument_list|)
expr_stmt|;
name|StringBuffer
name|allFiles
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|expectedLength
argument_list|,
name|tempFile
operator|.
name|list
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|f
range|:
name|tempFile
operator|.
name|list
argument_list|()
control|)
block|{
if|if
condition|(
name|allFiles
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
name|allFiles
operator|.
name|append
argument_list|(
literal|" : "
argument_list|)
expr_stmt|;
name|allFiles
operator|.
name|append
argument_list|(
name|f
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|String
name|expectedChildName
range|:
name|expectedChildrenFileNames
control|)
block|{
name|assertExtracted
argument_list|(
operator|new
name|File
argument_list|(
name|tempFile
argument_list|,
name|expectedChildName
argument_list|)
argument_list|,
name|allFiles
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|FileUtils
operator|.
name|deleteDirectory
argument_list|(
name|tempFile
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testExtractTgz
parameter_list|()
throws|throws
name|Exception
block|{
comment|//TIKA-2564
name|File
name|tempFile
init|=
name|File
operator|.
name|createTempFile
argument_list|(
literal|"tika-test-"
argument_list|,
literal|""
argument_list|)
decl_stmt|;
name|tempFile
operator|.
name|delete
argument_list|()
expr_stmt|;
name|tempFile
operator|.
name|mkdir
argument_list|()
expr_stmt|;
try|try
block|{
name|String
index|[]
name|params
init|=
block|{
literal|"--extract-dir="
operator|+
name|tempFile
operator|.
name|getAbsolutePath
argument_list|()
block|,
literal|"-z"
block|,
name|resourcePrefix
operator|+
literal|"/test-documents.tgz"
block|}
decl_stmt|;
name|TikaCLI
operator|.
name|main
argument_list|(
name|params
argument_list|)
expr_stmt|;
name|StringBuffer
name|allFiles
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|f
range|:
name|tempFile
operator|.
name|list
argument_list|()
control|)
block|{
if|if
condition|(
name|allFiles
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
name|allFiles
operator|.
name|append
argument_list|(
literal|" : "
argument_list|)
expr_stmt|;
name|allFiles
operator|.
name|append
argument_list|(
name|f
argument_list|)
expr_stmt|;
block|}
name|File
name|expectedTAR
init|=
operator|new
name|File
argument_list|(
name|tempFile
argument_list|,
literal|"test-documents.tar"
argument_list|)
decl_stmt|;
name|assertExtracted
argument_list|(
name|expectedTAR
argument_list|,
name|allFiles
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|FileUtils
operator|.
name|deleteDirectory
argument_list|(
name|tempFile
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
specifier|static
name|void
name|assertExtracted
parameter_list|(
name|File
name|f
parameter_list|,
name|String
name|allFiles
parameter_list|)
block|{
name|assertTrue
argument_list|(
literal|"File "
operator|+
name|f
operator|.
name|getName
argument_list|()
operator|+
literal|" not found in "
operator|+
name|allFiles
argument_list|,
name|f
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"File "
operator|+
name|f
operator|.
name|getName
argument_list|()
operator|+
literal|" is a directory!"
argument_list|,
name|f
operator|.
name|isDirectory
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"File "
operator|+
name|f
operator|.
name|getName
argument_list|()
operator|+
literal|" wasn't extracted with contents"
argument_list|,
name|f
operator|.
name|length
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
block|}
comment|// TIKA-920
annotation|@
name|Test
specifier|public
name|void
name|testMultiValuedMetadata
parameter_list|()
throws|throws
name|Exception
block|{
name|String
index|[]
name|params
init|=
block|{
literal|"-m"
block|,
name|resourcePrefix
operator|+
literal|"testMultipleSheets.numbers"
block|}
decl_stmt|;
name|TikaCLI
operator|.
name|main
argument_list|(
name|params
argument_list|)
expr_stmt|;
name|String
name|content
init|=
name|outContent
operator|.
name|toString
argument_list|(
name|UTF_8
operator|.
name|name
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|content
operator|.
name|contains
argument_list|(
literal|"sheetNames: Checking"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|content
operator|.
name|contains
argument_list|(
literal|"sheetNames: Secon sheet"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|content
operator|.
name|contains
argument_list|(
literal|"sheetNames: Logical Sheet 3"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|content
operator|.
name|contains
argument_list|(
literal|"sheetNames: Sheet 4"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// TIKA-1031
annotation|@
name|Test
specifier|public
name|void
name|testZipWithSubdirs
parameter_list|()
throws|throws
name|Exception
block|{
name|String
index|[]
name|params
init|=
block|{
literal|"-z"
block|,
literal|"--extract-dir=target"
block|,
name|resourcePrefix
operator|+
literal|"testWithSubdirs.zip"
block|}
decl_stmt|;
operator|new
name|File
argument_list|(
literal|"subdir/foo.txt"
argument_list|)
operator|.
name|delete
argument_list|()
expr_stmt|;
operator|new
name|File
argument_list|(
literal|"subdir"
argument_list|)
operator|.
name|delete
argument_list|()
expr_stmt|;
name|TikaCLI
operator|.
name|main
argument_list|(
name|params
argument_list|)
expr_stmt|;
name|String
name|content
init|=
name|outContent
operator|.
name|toString
argument_list|(
name|UTF_8
operator|.
name|name
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|content
operator|.
name|contains
argument_list|(
literal|"Extracting 'subdir/foo.txt'"
argument_list|)
argument_list|)
expr_stmt|;
comment|// clean up. TODO: These should be in target.
operator|new
name|File
argument_list|(
literal|"target/subdir/foo.txt"
argument_list|)
operator|.
name|delete
argument_list|()
expr_stmt|;
operator|new
name|File
argument_list|(
literal|"target/subdir"
argument_list|)
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testExtractInlineImages
parameter_list|()
throws|throws
name|Exception
block|{
name|File
name|tempFile
init|=
name|File
operator|.
name|createTempFile
argument_list|(
literal|"tika-test-"
argument_list|,
literal|""
argument_list|)
decl_stmt|;
name|tempFile
operator|.
name|delete
argument_list|()
expr_stmt|;
name|tempFile
operator|.
name|mkdir
argument_list|()
expr_stmt|;
comment|// not really good method for production usage, but ok for tests
comment|// google guava library has better solution
try|try
block|{
name|String
index|[]
name|params
init|=
block|{
literal|"--extract-dir="
operator|+
name|tempFile
operator|.
name|getAbsolutePath
argument_list|()
block|,
literal|"-z"
block|,
name|resourcePrefix
operator|+
literal|"/testPDF_childAttachments.pdf"
block|}
decl_stmt|;
name|TikaCLI
operator|.
name|main
argument_list|(
name|params
argument_list|)
expr_stmt|;
name|StringBuffer
name|allFiles
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|f
range|:
name|tempFile
operator|.
name|list
argument_list|()
control|)
block|{
if|if
condition|(
name|allFiles
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
name|allFiles
operator|.
name|append
argument_list|(
literal|" : "
argument_list|)
expr_stmt|;
name|allFiles
operator|.
name|append
argument_list|(
name|f
argument_list|)
expr_stmt|;
block|}
name|File
name|jpeg
init|=
operator|new
name|File
argument_list|(
name|tempFile
argument_list|,
literal|"image0.jpg"
argument_list|)
decl_stmt|;
comment|//tiff isn't extracted without optional image dependency
comment|//            File tiff = new File(tempFile, "image1.tif");
name|File
name|jobOptions
init|=
operator|new
name|File
argument_list|(
name|tempFile
argument_list|,
literal|"Press Quality(1).joboptions"
argument_list|)
decl_stmt|;
name|File
name|doc
init|=
operator|new
name|File
argument_list|(
name|tempFile
argument_list|,
literal|"Unit10.doc"
argument_list|)
decl_stmt|;
name|assertExtracted
argument_list|(
name|jpeg
argument_list|,
name|allFiles
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertExtracted
argument_list|(
name|jobOptions
argument_list|,
name|allFiles
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertExtracted
argument_list|(
name|doc
argument_list|,
name|allFiles
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|FileUtils
operator|.
name|deleteDirectory
argument_list|(
name|tempFile
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDefaultConfigException
parameter_list|()
throws|throws
name|Exception
block|{
comment|//default xml parser will throw TikaException
comment|//this and TestConfig() are broken into separate tests so that
comment|//setUp and tearDown() are called each time
name|String
index|[]
name|params
init|=
block|{
name|resourcePrefix
operator|+
literal|"bad_xml.xml"
block|}
decl_stmt|;
name|boolean
name|tikaEx
init|=
literal|false
decl_stmt|;
try|try
block|{
name|TikaCLI
operator|.
name|main
argument_list|(
name|params
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TikaException
name|e
parameter_list|)
block|{
name|tikaEx
operator|=
literal|true
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|tikaEx
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testConfig
parameter_list|()
throws|throws
name|Exception
block|{
name|String
index|[]
name|params
init|=
operator|new
name|String
index|[]
block|{
literal|"--config="
operator|+
name|testDataFile
operator|.
name|toString
argument_list|()
operator|+
literal|"/tika-config1.xml"
block|,
name|resourcePrefix
operator|+
literal|"bad_xml.xml"
block|}
decl_stmt|;
name|TikaCLI
operator|.
name|main
argument_list|(
name|params
argument_list|)
expr_stmt|;
name|String
name|content
init|=
name|outContent
operator|.
name|toString
argument_list|(
name|UTF_8
operator|.
name|name
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|content
operator|.
name|contains
argument_list|(
literal|"apple"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|content
operator|.
name|contains
argument_list|(
literal|"org.apache.tika.parser.html.HtmlParser"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testConfigIgnoreInit
parameter_list|()
throws|throws
name|Exception
block|{
name|String
index|[]
name|params
init|=
operator|new
name|String
index|[]
block|{
literal|"--config="
operator|+
name|testDataFile
operator|.
name|toString
argument_list|()
operator|+
literal|"/TIKA-2389-ignore-init-problems.xml"
block|,
name|resourcePrefix
operator|+
literal|"test_recursive_embedded.docx"
block|}
decl_stmt|;
name|TikaCLI
operator|.
name|main
argument_list|(
name|params
argument_list|)
expr_stmt|;
name|String
name|content
init|=
name|outContent
operator|.
name|toString
argument_list|(
name|UTF_8
operator|.
name|name
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|content
operator|.
name|contains
argument_list|(
literal|"embed_1a"
argument_list|)
argument_list|)
expr_stmt|;
comment|//TODO: add a real unit test that configures logging to a file to test that nothing is
comment|//written at the various logging levels
block|}
annotation|@
name|Test
specifier|public
name|void
name|testJsonRecursiveMetadataParserMetadataOnly
parameter_list|()
throws|throws
name|Exception
block|{
name|String
index|[]
name|params
init|=
operator|new
name|String
index|[]
block|{
literal|"-m"
block|,
literal|"-J"
block|,
literal|"-r"
block|,
name|resourcePrefix
operator|+
literal|"test_recursive_embedded.docx"
block|}
decl_stmt|;
name|TikaCLI
operator|.
name|main
argument_list|(
name|params
argument_list|)
expr_stmt|;
name|String
name|content
init|=
name|outContent
operator|.
name|toString
argument_list|(
name|UTF_8
operator|.
name|name
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|content
operator|.
name|contains
argument_list|(
literal|"\"extended-properties:AppVersion\": \"15.0000\","
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|content
operator|.
name|contains
argument_list|(
literal|"\"extended-properties:Application\": \"Microsoft Office Word\","
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|content
operator|.
name|contains
argument_list|(
literal|"\"X-TIKA:embedded_resource_path\": \"/embed1.zip\""
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|content
operator|.
name|contains
argument_list|(
literal|"X-TIKA:content"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testJsonRecursiveMetadataParserDefault
parameter_list|()
throws|throws
name|Exception
block|{
name|String
index|[]
name|params
init|=
operator|new
name|String
index|[]
block|{
literal|"-J"
block|,
literal|"-r"
block|,
name|resourcePrefix
operator|+
literal|"test_recursive_embedded.docx"
block|}
decl_stmt|;
name|TikaCLI
operator|.
name|main
argument_list|(
name|params
argument_list|)
expr_stmt|;
name|String
name|content
init|=
name|outContent
operator|.
name|toString
argument_list|(
name|UTF_8
operator|.
name|name
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|content
operator|.
name|contains
argument_list|(
literal|"\"X-TIKA:content\": \"\\u003chtml xmlns\\u003d\\\"http://www.w3.org/1999/xhtml"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testJsonRecursiveMetadataParserText
parameter_list|()
throws|throws
name|Exception
block|{
name|String
index|[]
name|params
init|=
operator|new
name|String
index|[]
block|{
literal|"-J"
block|,
literal|"-r"
block|,
literal|"-t"
block|,
name|resourcePrefix
operator|+
literal|"test_recursive_embedded.docx"
block|}
decl_stmt|;
name|TikaCLI
operator|.
name|main
argument_list|(
name|params
argument_list|)
expr_stmt|;
name|String
name|content
init|=
name|outContent
operator|.
name|toString
argument_list|(
name|UTF_8
operator|.
name|name
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|content
operator|.
name|contains
argument_list|(
literal|"\\n\\nembed_4\\n"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|content
operator|.
name|contains
argument_list|(
literal|"\\n\\nembed_0"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDigestInJson
parameter_list|()
throws|throws
name|Exception
block|{
name|String
index|[]
name|params
init|=
operator|new
name|String
index|[]
block|{
literal|"-J"
block|,
literal|"-r"
block|,
literal|"-t"
block|,
literal|"--digest=MD5"
block|,
name|resourcePrefix
operator|+
literal|"test_recursive_embedded.docx"
block|}
decl_stmt|;
name|TikaCLI
operator|.
name|main
argument_list|(
name|params
argument_list|)
expr_stmt|;
name|String
name|content
init|=
name|outContent
operator|.
name|toString
argument_list|(
name|UTF_8
operator|.
name|name
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|content
operator|.
name|contains
argument_list|(
literal|"\"X-TIKA:digest:MD5\": \"59f626e09a8c16ab6dbc2800c685f772\","
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|content
operator|.
name|contains
argument_list|(
literal|"\"X-TIKA:digest:MD5\": \"f9627095ef86c482e61d99f0cc1cf87d\""
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testConfigSerializationStaticAndCurrent
parameter_list|()
throws|throws
name|Exception
block|{
name|String
index|[]
name|params
init|=
operator|new
name|String
index|[]
block|{
literal|"--dump-static-config"
block|}
decl_stmt|;
name|TikaCLI
operator|.
name|main
argument_list|(
name|params
argument_list|)
expr_stmt|;
name|String
name|content
init|=
name|outContent
operator|.
name|toString
argument_list|(
name|UTF_8
operator|.
name|name
argument_list|()
argument_list|)
decl_stmt|;
comment|//make sure at least one detector is there
name|assertTrue
argument_list|(
name|content
operator|.
name|contains
argument_list|(
literal|"<detector class=\"org.apache.tika.parser.microsoft.POIFSContainerDetector\"/>"
argument_list|)
argument_list|)
expr_stmt|;
comment|//make sure Executable is there because follow on tests of custom config
comment|//test that it has been turned off.
name|assertTrue
argument_list|(
name|content
operator|.
name|contains
argument_list|(
literal|"<parser class=\"org.apache.tika.parser.executable.ExecutableParser\"/>"
argument_list|)
argument_list|)
expr_stmt|;
name|params
operator|=
operator|new
name|String
index|[]
block|{
literal|"--dump-current-config"
block|}
expr_stmt|;
name|TikaCLI
operator|.
name|main
argument_list|(
name|params
argument_list|)
expr_stmt|;
name|content
operator|=
name|outContent
operator|.
name|toString
argument_list|(
name|UTF_8
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
comment|//make sure at least one detector is there
name|assertTrue
argument_list|(
name|content
operator|.
name|contains
argument_list|(
literal|"<detector class=\"org.apache.tika.parser.microsoft.POIFSContainerDetector\"/>"
argument_list|)
argument_list|)
expr_stmt|;
comment|//and at least one parser
name|assertTrue
argument_list|(
name|content
operator|.
name|contains
argument_list|(
literal|"<parser class=\"org.apache.tika.parser.executable.ExecutableParser\"/>"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testConfigSerializationCustomMinimal
parameter_list|()
throws|throws
name|Exception
block|{
name|String
index|[]
name|params
init|=
operator|new
name|String
index|[]
block|{
literal|"--config="
operator|+
name|testDataFile
operator|.
name|toString
argument_list|()
operator|+
literal|"/tika-config2.xml"
block|,
literal|"--dump-minimal-config"
block|}
decl_stmt|;
name|TikaCLI
operator|.
name|main
argument_list|(
name|params
argument_list|)
expr_stmt|;
name|String
name|content
init|=
name|outContent
operator|.
name|toString
argument_list|(
name|UTF_8
operator|.
name|name
argument_list|()
argument_list|)
operator|.
name|replaceAll
argument_list|(
literal|"[\r\n\t ]+"
argument_list|,
literal|" "
argument_list|)
decl_stmt|;
name|String
name|expected
init|=
literal|"<parser class=\"org.apache.tika.parser.DefaultParser\">"
operator|+
literal|"<mime-exclude>application/pdf</mime-exclude>"
operator|+
literal|"<mime-exclude>image/jpeg</mime-exclude> "
operator|+
literal|"</parser> "
operator|+
literal|"<parser class=\"org.apache.tika.parser.EmptyParser\">"
operator|+
literal|"<mime>application/pdf</mime> "
operator|+
literal|"</parser>"
decl_stmt|;
name|assertTrue
argument_list|(
name|content
operator|.
name|contains
argument_list|(
name|expected
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testConfigSerializationCustomStatic
parameter_list|()
throws|throws
name|Exception
block|{
name|String
index|[]
name|params
init|=
operator|new
name|String
index|[]
block|{
literal|"--config="
operator|+
name|testDataFile
operator|.
name|toString
argument_list|()
operator|+
literal|"/tika-config2.xml"
block|,
literal|"--dump-static-config"
block|}
decl_stmt|;
name|TikaCLI
operator|.
name|main
argument_list|(
name|params
argument_list|)
expr_stmt|;
name|String
name|content
init|=
name|outContent
operator|.
name|toString
argument_list|(
name|UTF_8
operator|.
name|name
argument_list|()
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|content
operator|.
name|contains
argument_list|(
literal|"org.apache.tika.parser.executable.Executable"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFileNameNormalization
parameter_list|()
throws|throws
name|Exception
block|{
name|File
name|z
init|=
operator|new
name|File
argument_list|(
literal|"C:/data/testZip_zeroByte.zip"
argument_list|)
decl_stmt|;
name|OutputStream
name|os
init|=
operator|new
name|FileOutputStream
argument_list|(
name|z
argument_list|)
decl_stmt|;
name|ZipOutputStream
name|outputStream
init|=
operator|new
name|ZipOutputStream
argument_list|(
name|os
argument_list|)
decl_stmt|;
name|ZipEntry
name|zipEntry
init|=
operator|new
name|ZipEntry
argument_list|(
literal|"dang\u0000erous.pl"
argument_list|)
decl_stmt|;
name|outputStream
operator|.
name|putNextEntry
argument_list|(
name|zipEntry
argument_list|)
expr_stmt|;
name|byte
index|[]
name|bytes
init|=
literal|"hello world1"
operator|.
name|getBytes
argument_list|(
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
decl_stmt|;
name|outputStream
operator|.
name|write
argument_list|(
name|bytes
argument_list|,
literal|0
argument_list|,
name|bytes
operator|.
name|length
argument_list|)
expr_stmt|;
name|outputStream
operator|.
name|closeEntry
argument_list|()
expr_stmt|;
name|outputStream
operator|.
name|flush
argument_list|()
expr_stmt|;
name|outputStream
operator|.
name|close
argument_list|()
expr_stmt|;
name|z
operator|=
operator|new
name|File
argument_list|(
literal|"C:/data/testZip_absolutePath.zip"
argument_list|)
expr_stmt|;
name|os
operator|=
operator|new
name|FileOutputStream
argument_list|(
name|z
argument_list|)
expr_stmt|;
name|outputStream
operator|=
operator|new
name|ZipOutputStream
argument_list|(
name|os
argument_list|)
expr_stmt|;
name|zipEntry
operator|=
operator|new
name|ZipEntry
argument_list|(
literal|"C:/dangerous/dont/touch.pl"
argument_list|)
expr_stmt|;
name|outputStream
operator|.
name|putNextEntry
argument_list|(
name|zipEntry
argument_list|)
expr_stmt|;
name|bytes
operator|=
literal|"hello world2"
operator|.
name|getBytes
argument_list|(
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
expr_stmt|;
name|outputStream
operator|.
name|write
argument_list|(
name|bytes
argument_list|,
literal|0
argument_list|,
name|bytes
operator|.
name|length
argument_list|)
expr_stmt|;
name|outputStream
operator|.
name|closeEntry
argument_list|()
expr_stmt|;
name|zipEntry
operator|=
operator|new
name|ZipEntry
argument_list|(
literal|"/dangerous/dont/touch.pl"
argument_list|)
expr_stmt|;
name|outputStream
operator|.
name|putNextEntry
argument_list|(
name|zipEntry
argument_list|)
expr_stmt|;
name|bytes
operator|=
literal|"hello world3"
operator|.
name|getBytes
argument_list|(
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
expr_stmt|;
name|outputStream
operator|.
name|write
argument_list|(
name|bytes
argument_list|,
literal|0
argument_list|,
name|bytes
operator|.
name|length
argument_list|)
expr_stmt|;
name|outputStream
operator|.
name|closeEntry
argument_list|()
expr_stmt|;
name|outputStream
operator|.
name|flush
argument_list|()
expr_stmt|;
name|outputStream
operator|.
name|close
argument_list|()
expr_stmt|;
name|z
operator|=
operator|new
name|File
argument_list|(
literal|"C:/data/testZip_relative.zip"
argument_list|)
expr_stmt|;
name|os
operator|=
operator|new
name|FileOutputStream
argument_list|(
name|z
argument_list|)
expr_stmt|;
name|outputStream
operator|=
operator|new
name|ZipOutputStream
argument_list|(
name|os
argument_list|)
expr_stmt|;
name|zipEntry
operator|=
operator|new
name|ZipEntry
argument_list|(
literal|"../../../dangerous/dont/touch.pl"
argument_list|)
expr_stmt|;
name|outputStream
operator|.
name|putNextEntry
argument_list|(
name|zipEntry
argument_list|)
expr_stmt|;
name|bytes
operator|=
literal|"hello world3"
operator|.
name|getBytes
argument_list|(
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
expr_stmt|;
name|outputStream
operator|.
name|write
argument_list|(
name|bytes
argument_list|,
literal|0
argument_list|,
name|bytes
operator|.
name|length
argument_list|)
expr_stmt|;
name|outputStream
operator|.
name|closeEntry
argument_list|()
expr_stmt|;
name|outputStream
operator|.
name|flush
argument_list|()
expr_stmt|;
name|outputStream
operator|.
name|close
argument_list|()
expr_stmt|;
name|z
operator|=
operator|new
name|File
argument_list|(
literal|"C:/data/testZip_overlappingNames.zip"
argument_list|)
expr_stmt|;
name|os
operator|=
operator|new
name|FileOutputStream
argument_list|(
name|z
argument_list|)
expr_stmt|;
name|outputStream
operator|=
operator|new
name|ZipOutputStream
argument_list|(
name|os
argument_list|)
expr_stmt|;
name|zipEntry
operator|=
operator|new
name|ZipEntry
argument_list|(
literal|"f1.txt"
argument_list|)
expr_stmt|;
name|outputStream
operator|.
name|putNextEntry
argument_list|(
name|zipEntry
argument_list|)
expr_stmt|;
name|bytes
operator|=
literal|"hello world4"
operator|.
name|getBytes
argument_list|(
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
expr_stmt|;
name|outputStream
operator|.
name|write
argument_list|(
name|bytes
argument_list|,
literal|0
argument_list|,
name|bytes
operator|.
name|length
argument_list|)
expr_stmt|;
name|outputStream
operator|.
name|closeEntry
argument_list|()
expr_stmt|;
name|zipEntry
operator|=
operator|new
name|ZipEntry
argument_list|(
literal|"../../../f1.txt"
argument_list|)
expr_stmt|;
name|outputStream
operator|.
name|putNextEntry
argument_list|(
name|zipEntry
argument_list|)
expr_stmt|;
name|bytes
operator|=
literal|"hello world5"
operator|.
name|getBytes
argument_list|(
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
expr_stmt|;
name|outputStream
operator|.
name|write
argument_list|(
name|bytes
argument_list|,
literal|0
argument_list|,
name|bytes
operator|.
name|length
argument_list|)
expr_stmt|;
name|outputStream
operator|.
name|closeEntry
argument_list|()
expr_stmt|;
name|outputStream
operator|.
name|flush
argument_list|()
expr_stmt|;
name|outputStream
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

