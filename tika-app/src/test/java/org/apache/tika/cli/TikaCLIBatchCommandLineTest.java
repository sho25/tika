begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|cli
package|;
end_package

begin_import
import|import static
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
operator|.
name|UTF_8
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Paths
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|TikaCLIBatchCommandLineTest
block|{
name|Path
name|testInput
init|=
literal|null
decl_stmt|;
name|Path
name|testFile
init|=
literal|null
decl_stmt|;
name|String
name|testInputPathForCommandLine
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|init
parameter_list|()
block|{
name|testInput
operator|=
name|Paths
operator|.
name|get
argument_list|(
literal|"testInput"
argument_list|)
expr_stmt|;
try|try
block|{
name|Files
operator|.
name|createDirectories
argument_list|(
name|testInput
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Failed to open test input directory"
argument_list|)
throw|;
block|}
name|testFile
operator|=
name|Paths
operator|.
name|get
argument_list|(
literal|"testFile.txt"
argument_list|)
expr_stmt|;
try|try
init|(
name|OutputStream
name|os
init|=
name|Files
operator|.
name|newOutputStream
argument_list|(
name|testFile
argument_list|)
init|)
block|{
name|IOUtils
operator|.
name|write
argument_list|(
literal|"test output"
argument_list|,
name|os
argument_list|,
name|UTF_8
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Couldn't open testFile"
argument_list|)
throw|;
block|}
name|testInputPathForCommandLine
operator|=
name|testInput
operator|.
name|toAbsolutePath
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
block|{
try|try
block|{
comment|//TODO: refactor this to use our FileUtils.deleteDirectory(Path)
comment|//when that is ready
name|FileUtils
operator|.
name|deleteDirectory
argument_list|(
name|testInput
operator|.
name|toFile
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
try|try
block|{
name|Files
operator|.
name|deleteIfExists
argument_list|(
name|testFile
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testJVMOpts
parameter_list|()
throws|throws
name|Exception
block|{
name|String
index|[]
name|params
init|=
block|{
literal|"-JXmx1g"
block|,
literal|"-JDlog4j.configuration=batch_process_log4j.xml"
block|,
literal|"-inputDir"
block|,
name|testInputPathForCommandLine
block|,
literal|"-outputDir"
block|,
literal|"testout-output"
block|}
decl_stmt|;
name|String
index|[]
name|commandLine
init|=
name|BatchCommandLineBuilder
operator|.
name|build
argument_list|(
name|params
argument_list|)
decl_stmt|;
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|s
range|:
name|commandLine
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|s
argument_list|)
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
block|}
name|String
name|s
init|=
name|sb
operator|.
name|toString
argument_list|()
decl_stmt|;
name|int
name|classInd
init|=
name|s
operator|.
name|indexOf
argument_list|(
literal|"org.apache.tika.batch.fs.FSBatchProcessCLI"
argument_list|)
decl_stmt|;
name|int
name|xmx
init|=
name|s
operator|.
name|indexOf
argument_list|(
literal|"-Xmx1g"
argument_list|)
decl_stmt|;
name|int
name|inputDir
init|=
name|s
operator|.
name|indexOf
argument_list|(
literal|"-inputDir"
argument_list|)
decl_stmt|;
name|int
name|log
init|=
name|s
operator|.
name|indexOf
argument_list|(
literal|"-Dlog4j.configuration"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|classInd
operator|>
operator|-
literal|1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|xmx
operator|>
operator|-
literal|1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|inputDir
operator|>
operator|-
literal|1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|log
operator|>
operator|-
literal|1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|xmx
operator|<
name|classInd
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|log
operator|<
name|classInd
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|inputDir
operator|>
name|classInd
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBasicMappingOfArgs
parameter_list|()
throws|throws
name|Exception
block|{
name|String
index|[]
name|params
init|=
block|{
literal|"-JXmx1g"
block|,
literal|"-JDlog4j.configuration=batch_process_log4j.xml"
block|,
literal|"-bc"
block|,
literal|"batch-config.xml"
block|,
literal|"-J"
block|,
literal|"-h"
block|,
literal|"-inputDir"
block|,
name|testInputPathForCommandLine
block|}
decl_stmt|;
name|String
index|[]
name|commandLine
init|=
name|BatchCommandLineBuilder
operator|.
name|build
argument_list|(
name|params
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|attrs
init|=
name|mapify
argument_list|(
name|commandLine
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"true"
argument_list|,
name|attrs
operator|.
name|get
argument_list|(
literal|"-recursiveParserWrapper"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"html"
argument_list|,
name|attrs
operator|.
name|get
argument_list|(
literal|"-basicHandlerType"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"json"
argument_list|,
name|attrs
operator|.
name|get
argument_list|(
literal|"-outputSuffix"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"batch-config.xml"
argument_list|,
name|attrs
operator|.
name|get
argument_list|(
literal|"-bc"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|testInputPathForCommandLine
argument_list|,
name|attrs
operator|.
name|get
argument_list|(
literal|"-inputDir"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTwoDirsNoFlags
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|outputRoot
init|=
literal|"outputRoot"
decl_stmt|;
name|String
index|[]
name|params
init|=
block|{
name|testInputPathForCommandLine
block|,
name|outputRoot
block|}
decl_stmt|;
name|String
index|[]
name|commandLine
init|=
name|BatchCommandLineBuilder
operator|.
name|build
argument_list|(
name|params
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|attrs
init|=
name|mapify
argument_list|(
name|commandLine
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|testInputPathForCommandLine
argument_list|,
name|attrs
operator|.
name|get
argument_list|(
literal|"-inputDir"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|outputRoot
argument_list|,
name|attrs
operator|.
name|get
argument_list|(
literal|"-outputDir"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTwoDirsVarious
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|outputRoot
init|=
literal|"outputRoot"
decl_stmt|;
name|String
index|[]
name|params
init|=
block|{
literal|"-i"
block|,
name|testInputPathForCommandLine
block|,
literal|"-o"
block|,
name|outputRoot
block|}
decl_stmt|;
name|String
index|[]
name|commandLine
init|=
name|BatchCommandLineBuilder
operator|.
name|build
argument_list|(
name|params
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|attrs
init|=
name|mapify
argument_list|(
name|commandLine
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|testInputPathForCommandLine
argument_list|,
name|attrs
operator|.
name|get
argument_list|(
literal|"-inputDir"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|outputRoot
argument_list|,
name|attrs
operator|.
name|get
argument_list|(
literal|"-outputDir"
argument_list|)
argument_list|)
expr_stmt|;
name|params
operator|=
operator|new
name|String
index|[]
block|{
literal|"--inputDir"
block|,
name|testInputPathForCommandLine
block|,
literal|"--outputDir"
block|,
name|outputRoot
block|}
expr_stmt|;
name|commandLine
operator|=
name|BatchCommandLineBuilder
operator|.
name|build
argument_list|(
name|params
argument_list|)
expr_stmt|;
name|attrs
operator|=
name|mapify
argument_list|(
name|commandLine
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|testInputPathForCommandLine
argument_list|,
name|attrs
operator|.
name|get
argument_list|(
literal|"-inputDir"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|outputRoot
argument_list|,
name|attrs
operator|.
name|get
argument_list|(
literal|"-outputDir"
argument_list|)
argument_list|)
expr_stmt|;
name|params
operator|=
operator|new
name|String
index|[]
block|{
literal|"-inputDir"
block|,
name|testInputPathForCommandLine
block|,
literal|"-outputDir"
block|,
name|outputRoot
block|}
expr_stmt|;
name|commandLine
operator|=
name|BatchCommandLineBuilder
operator|.
name|build
argument_list|(
name|params
argument_list|)
expr_stmt|;
name|attrs
operator|=
name|mapify
argument_list|(
name|commandLine
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|testInputPathForCommandLine
argument_list|,
name|attrs
operator|.
name|get
argument_list|(
literal|"-inputDir"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|outputRoot
argument_list|,
name|attrs
operator|.
name|get
argument_list|(
literal|"-outputDir"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testConfig
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|outputRoot
init|=
literal|"outputRoot"
decl_stmt|;
name|String
name|configPath
init|=
literal|"c:/somewhere/someConfig.xml"
decl_stmt|;
name|String
index|[]
name|params
init|=
block|{
literal|"--inputDir"
block|,
name|testInputPathForCommandLine
block|,
literal|"--outputDir"
block|,
name|outputRoot
block|,
literal|"--config="
operator|+
name|configPath
block|}
decl_stmt|;
name|String
index|[]
name|commandLine
init|=
name|BatchCommandLineBuilder
operator|.
name|build
argument_list|(
name|params
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|attrs
init|=
name|mapify
argument_list|(
name|commandLine
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|testInputPathForCommandLine
argument_list|,
name|attrs
operator|.
name|get
argument_list|(
literal|"-inputDir"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|outputRoot
argument_list|,
name|attrs
operator|.
name|get
argument_list|(
literal|"-outputDir"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|configPath
argument_list|,
name|attrs
operator|.
name|get
argument_list|(
literal|"-c"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testOneDirOneFileException
parameter_list|()
throws|throws
name|Exception
block|{
name|boolean
name|ex
init|=
literal|false
decl_stmt|;
try|try
block|{
name|String
name|path
init|=
name|testFile
operator|.
name|toAbsolutePath
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
name|path
operator|.
name|contains
argument_list|(
literal|" "
argument_list|)
condition|)
block|{
name|path
operator|=
literal|"\""
operator|+
name|path
operator|+
literal|"\""
expr_stmt|;
block|}
name|String
index|[]
name|params
init|=
block|{
name|testInputPathForCommandLine
block|,
name|path
block|}
decl_stmt|;
name|String
index|[]
name|commandLine
init|=
name|BatchCommandLineBuilder
operator|.
name|build
argument_list|(
name|params
argument_list|)
decl_stmt|;
name|fail
argument_list|(
literal|"Not allowed to have one dir and one file"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|ex
operator|=
literal|true
expr_stmt|;
block|}
name|assertTrue
argument_list|(
literal|"exception on<dir><file>"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|mapify
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|args
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|args
index|[
name|i
index|]
operator|.
name|startsWith
argument_list|(
literal|"-"
argument_list|)
condition|)
block|{
name|String
name|k
init|=
name|args
index|[
name|i
index|]
decl_stmt|;
name|String
name|v
init|=
literal|""
decl_stmt|;
if|if
condition|(
name|i
operator|<
name|args
operator|.
name|length
operator|-
literal|1
operator|&&
operator|!
name|args
index|[
name|i
operator|+
literal|1
index|]
operator|.
name|startsWith
argument_list|(
literal|"-"
argument_list|)
condition|)
block|{
name|v
operator|=
name|args
index|[
name|i
operator|+
literal|1
index|]
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
name|map
operator|.
name|put
argument_list|(
name|k
argument_list|,
name|v
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|map
return|;
block|}
block|}
end_class

end_unit

