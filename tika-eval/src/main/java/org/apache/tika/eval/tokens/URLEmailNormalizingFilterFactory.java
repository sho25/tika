begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|eval
operator|.
name|tokens
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|TokenFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|TokenStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|standard
operator|.
name|UAX29URLEmailTokenizer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|tokenattributes
operator|.
name|CharTermAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|tokenattributes
operator|.
name|TypeAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|util
operator|.
name|TokenFilterFactory
import|;
end_import

begin_comment
comment|/**  * Factory for filter that normalizes urls and emails to __url__ and __email__  * respectively.<b>WARNING:</b>This will not work correctly unless the  * {@link UAX29URLEmailTokenizer} is used!  This must be run _before_ the  * {@link AlphaIdeographFilterFactory}, or else the emails/urls will already  * be removed!  */
end_comment

begin_class
specifier|public
class|class
name|URLEmailNormalizingFilterFactory
extends|extends
name|TokenFilterFactory
block|{
specifier|public
specifier|static
specifier|final
name|String
name|URL
init|=
literal|"___url___"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|EMAIL
init|=
literal|"___email___"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|char
index|[]
name|URL_CHARS
init|=
name|URL
operator|.
name|toCharArray
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|char
index|[]
name|EMAIL_CHARS
init|=
name|EMAIL
operator|.
name|toCharArray
argument_list|()
decl_stmt|;
specifier|public
name|URLEmailNormalizingFilterFactory
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|args
parameter_list|)
block|{
name|super
argument_list|(
name|args
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|TokenStream
name|create
parameter_list|(
name|TokenStream
name|tokenStream
parameter_list|)
block|{
return|return
operator|new
name|URLEmailFilter
argument_list|(
name|tokenStream
argument_list|)
return|;
block|}
comment|/**      * Normalize urls and emails      */
specifier|private
class|class
name|URLEmailFilter
extends|extends
name|TokenFilter
block|{
specifier|private
specifier|final
name|CharTermAttribute
name|termAtt
init|=
name|addAttribute
argument_list|(
name|CharTermAttribute
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|TypeAttribute
name|typeAtt
init|=
name|addAttribute
argument_list|(
name|TypeAttribute
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
name|URLEmailFilter
parameter_list|(
name|TokenStream
name|input
parameter_list|)
block|{
name|super
argument_list|(
name|input
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|incrementToken
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|input
operator|.
name|incrementToken
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|//== is actually substantially faster than .equals(String)
if|if
condition|(
name|typeAtt
operator|.
name|type
argument_list|()
operator|==
name|UAX29URLEmailTokenizer
operator|.
name|TOKEN_TYPES
index|[
name|UAX29URLEmailTokenizer
operator|.
name|URL
index|]
condition|)
block|{
name|termAtt
operator|.
name|copyBuffer
argument_list|(
name|URL_CHARS
argument_list|,
literal|0
argument_list|,
name|URL_CHARS
operator|.
name|length
argument_list|)
expr_stmt|;
name|termAtt
operator|.
name|setLength
argument_list|(
name|URL_CHARS
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|typeAtt
operator|.
name|type
argument_list|()
operator|==
name|UAX29URLEmailTokenizer
operator|.
name|TOKEN_TYPES
index|[
name|UAX29URLEmailTokenizer
operator|.
name|EMAIL
index|]
condition|)
block|{
name|termAtt
operator|.
name|copyBuffer
argument_list|(
name|EMAIL_CHARS
argument_list|,
literal|0
argument_list|,
name|EMAIL_CHARS
operator|.
name|length
argument_list|)
expr_stmt|;
name|termAtt
operator|.
name|setLength
argument_list|(
name|EMAIL_CHARS
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
block|}
block|}
end_class

end_unit

