begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|eval
operator|.
name|textstats
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|Analyzer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|TokenStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|tokenattributes
operator|.
name|CharTermAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|eval
operator|.
name|langid
operator|.
name|Language
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|eval
operator|.
name|langid
operator|.
name|LanguageIDWrapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|eval
operator|.
name|tokens
operator|.
name|TokenCounts
import|;
end_import

begin_class
specifier|public
class|class
name|CompositeTextStatsCalculator
block|{
specifier|private
specifier|static
specifier|final
name|String
name|FIELD
init|=
literal|"f"
decl_stmt|;
specifier|private
specifier|final
name|Analyzer
name|analyzer
decl_stmt|;
specifier|private
specifier|final
name|LanguageIDWrapper
name|languageIDWrapper
decl_stmt|;
specifier|private
specifier|final
name|List
argument_list|<
name|LanguageAwareTokenCountStats
argument_list|>
name|languageAwareTokenCountStats
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|List
argument_list|<
name|TokenCountStatsCalculator
argument_list|>
name|tokenCountStatCalculators
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|List
argument_list|<
name|StringStatsCalculator
argument_list|>
name|stringStatCalculators
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|public
name|CompositeTextStatsCalculator
parameter_list|(
name|List
argument_list|<
name|TextStatsCalculator
argument_list|>
name|calculators
parameter_list|)
block|{
name|this
argument_list|(
name|calculators
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|public
name|CompositeTextStatsCalculator
parameter_list|(
name|List
argument_list|<
name|TextStatsCalculator
argument_list|>
name|calculators
parameter_list|,
name|Analyzer
name|analyzer
parameter_list|,
name|LanguageIDWrapper
name|languageIDWrapper
parameter_list|)
block|{
name|this
operator|.
name|analyzer
operator|=
name|analyzer
expr_stmt|;
name|this
operator|.
name|languageIDWrapper
operator|=
name|languageIDWrapper
expr_stmt|;
for|for
control|(
name|TextStatsCalculator
name|t
range|:
name|calculators
control|)
block|{
if|if
condition|(
name|t
operator|instanceof
name|StringStatsCalculator
condition|)
block|{
name|stringStatCalculators
operator|.
name|add
argument_list|(
operator|(
name|StringStatsCalculator
operator|)
name|t
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|t
operator|instanceof
name|LanguageAwareTokenCountStats
condition|)
block|{
name|languageAwareTokenCountStats
operator|.
name|add
argument_list|(
operator|(
name|LanguageAwareTokenCountStats
operator|)
name|t
argument_list|)
expr_stmt|;
if|if
condition|(
name|languageIDWrapper
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Must specify a LanguageIdWrapper "
operator|+
literal|"if you want to calculate languageAware stats: "
operator|+
name|t
operator|.
name|getClass
argument_list|()
argument_list|)
throw|;
block|}
block|}
elseif|else
if|if
condition|(
name|t
operator|instanceof
name|TokenCountStatsCalculator
condition|)
block|{
name|tokenCountStatCalculators
operator|.
name|add
argument_list|(
operator|(
name|TokenCountStatsCalculator
operator|)
name|t
argument_list|)
expr_stmt|;
if|if
condition|(
name|analyzer
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Analyzer must not be null if you are using "
operator|+
literal|"a TokenCountStats: "
operator|+
name|t
operator|.
name|getClass
argument_list|()
argument_list|)
throw|;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"I regret I don't yet handle: "
operator|+
name|t
operator|.
name|getClass
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
specifier|public
name|Map
argument_list|<
name|Class
argument_list|,
name|Object
argument_list|>
name|calculate
parameter_list|(
name|String
name|txt
parameter_list|)
block|{
name|Map
argument_list|<
name|Class
argument_list|,
name|Object
argument_list|>
name|results
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|StringStatsCalculator
name|calc
range|:
name|stringStatCalculators
control|)
block|{
name|results
operator|.
name|put
argument_list|(
name|calc
operator|.
name|getClass
argument_list|()
argument_list|,
name|calc
operator|.
name|calculate
argument_list|(
name|txt
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|TokenCounts
name|tokenCounts
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|tokenCountStatCalculators
operator|.
name|size
argument_list|()
operator|>
literal|0
operator|||
name|languageAwareTokenCountStats
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
try|try
block|{
name|tokenCounts
operator|=
name|tokenize
argument_list|(
name|txt
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|languageAwareTokenCountStats
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|List
argument_list|<
name|Language
argument_list|>
name|langs
init|=
name|results
operator|.
name|containsKey
argument_list|(
name|LanguageIDWrapper
operator|.
name|class
argument_list|)
condition|?
operator|(
name|List
operator|)
name|results
operator|.
name|get
argument_list|(
name|LanguageIDWrapper
operator|.
name|class
argument_list|)
else|:
name|languageIDWrapper
operator|.
name|calculate
argument_list|(
name|txt
argument_list|)
decl_stmt|;
name|results
operator|.
name|put
argument_list|(
name|LanguageIDWrapper
operator|.
name|class
argument_list|,
name|langs
argument_list|)
expr_stmt|;
for|for
control|(
name|LanguageAwareTokenCountStats
name|calc
range|:
name|languageAwareTokenCountStats
control|)
block|{
name|results
operator|.
name|put
argument_list|(
name|calc
operator|.
name|getClass
argument_list|()
argument_list|,
name|calc
operator|.
name|calculate
argument_list|(
name|langs
argument_list|,
name|tokenCounts
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|TokenCountStatsCalculator
name|calc
range|:
name|tokenCountStatCalculators
control|)
block|{
name|results
operator|.
name|put
argument_list|(
name|calc
operator|.
name|getClass
argument_list|()
argument_list|,
name|calc
operator|.
name|calculate
argument_list|(
name|tokenCounts
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|results
return|;
block|}
specifier|private
name|TokenCounts
name|tokenize
parameter_list|(
name|String
name|txt
parameter_list|)
throws|throws
name|IOException
block|{
name|TokenCounts
name|counts
init|=
operator|new
name|TokenCounts
argument_list|()
decl_stmt|;
name|TokenStream
name|ts
init|=
name|analyzer
operator|.
name|tokenStream
argument_list|(
name|FIELD
argument_list|,
name|txt
argument_list|)
decl_stmt|;
try|try
block|{
name|CharTermAttribute
name|termAtt
init|=
name|ts
operator|.
name|getAttribute
argument_list|(
name|CharTermAttribute
operator|.
name|class
argument_list|)
decl_stmt|;
name|ts
operator|.
name|reset
argument_list|()
expr_stmt|;
while|while
condition|(
name|ts
operator|.
name|incrementToken
argument_list|()
condition|)
block|{
name|String
name|token
init|=
name|termAtt
operator|.
name|toString
argument_list|()
decl_stmt|;
name|counts
operator|.
name|increment
argument_list|(
name|token
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|ts
operator|.
name|close
argument_list|()
expr_stmt|;
name|ts
operator|.
name|end
argument_list|()
expr_stmt|;
block|}
return|return
name|counts
return|;
block|}
block|}
end_class

end_unit

