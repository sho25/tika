begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|eval
operator|.
name|tokens
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|PriorityQueue
import|;
end_import

begin_class
specifier|public
class|class
name|TokenCountPriorityQueue
extends|extends
name|PriorityQueue
argument_list|<
name|TokenIntPair
argument_list|>
block|{
name|TokenCountPriorityQueue
parameter_list|(
name|int
name|maxSize
parameter_list|)
block|{
name|super
argument_list|(
name|maxSize
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|boolean
name|lessThan
parameter_list|(
name|TokenIntPair
name|arg0
parameter_list|,
name|TokenIntPair
name|arg1
parameter_list|)
block|{
if|if
condition|(
name|arg0
operator|.
name|getValue
argument_list|()
operator|<
name|arg1
operator|.
name|getValue
argument_list|()
condition|)
block|{
return|return
literal|true
return|;
block|}
elseif|else
if|if
condition|(
name|arg0
operator|.
name|getValue
argument_list|()
operator|>
name|arg1
operator|.
name|getValue
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
name|arg1
operator|.
name|token
operator|.
name|compareTo
argument_list|(
name|arg0
operator|.
name|token
argument_list|)
operator|<
literal|0
return|;
block|}
specifier|public
name|TokenIntPair
index|[]
name|getArray
parameter_list|()
block|{
name|TokenIntPair
index|[]
name|topN
init|=
operator|new
name|TokenIntPair
index|[
name|size
argument_list|()
index|]
decl_stmt|;
comment|//now we reverse the queue
name|TokenIntPair
name|term
init|=
name|pop
argument_list|()
decl_stmt|;
name|int
name|i
init|=
name|topN
operator|.
name|length
operator|-
literal|1
decl_stmt|;
while|while
condition|(
name|term
operator|!=
literal|null
operator|&&
name|i
operator|>
operator|-
literal|1
condition|)
block|{
name|topN
index|[
name|i
operator|--
index|]
operator|=
name|term
expr_stmt|;
name|term
operator|=
name|pop
argument_list|()
expr_stmt|;
block|}
return|return
name|topN
return|;
block|}
block|}
end_class

end_unit

