begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|eval
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|XMLInputFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|XMLStreamConstants
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|XMLStreamException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|XMLStreamReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Paths
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|ResultSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Statement
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|eval
operator|.
name|db
operator|.
name|Cols
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|eval
operator|.
name|db
operator|.
name|H2Util
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|eval
operator|.
name|db
operator|.
name|JDBCUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|eval
operator|.
name|db
operator|.
name|TableInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|eval
operator|.
name|io
operator|.
name|XMLLogMsgHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|eval
operator|.
name|io
operator|.
name|XMLLogReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|eval
operator|.
name|reports
operator|.
name|ResultsReporter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|io
operator|.
name|IOExceptionWithCause
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * This is a very task specific class that reads a log file and updates  * the "comparisons" table.  It should not be run in a multithreaded environment.  */
end_comment

begin_class
specifier|public
class|class
name|XMLErrorLogUpdater
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ResultsReporter
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|Statement
name|statement
decl_stmt|;
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
name|XMLErrorLogUpdater
name|writer
init|=
operator|new
name|XMLErrorLogUpdater
argument_list|()
decl_stmt|;
name|Path
name|xmlLogFileA
init|=
name|Paths
operator|.
name|get
argument_list|(
name|args
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|Path
name|xmlLogFileB
init|=
name|Paths
operator|.
name|get
argument_list|(
name|args
index|[
literal|1
index|]
argument_list|)
decl_stmt|;
name|Path
name|db
init|=
name|Paths
operator|.
name|get
argument_list|(
name|args
index|[
literal|2
index|]
argument_list|)
decl_stmt|;
name|JDBCUtil
name|dbUtil
init|=
operator|new
name|H2Util
argument_list|(
name|db
argument_list|)
decl_stmt|;
name|Connection
name|connection
init|=
name|dbUtil
operator|.
name|getConnection
argument_list|()
decl_stmt|;
name|writer
operator|.
name|update
argument_list|(
name|connection
argument_list|,
name|ExtractComparer
operator|.
name|EXTRACT_EXCEPTION_TABLE_A
argument_list|,
name|xmlLogFileA
argument_list|)
expr_stmt|;
name|writer
operator|.
name|update
argument_list|(
name|connection
argument_list|,
name|ExtractComparer
operator|.
name|EXTRACT_EXCEPTION_TABLE_B
argument_list|,
name|xmlLogFileB
argument_list|)
expr_stmt|;
name|connection
operator|.
name|commit
argument_list|()
expr_stmt|;
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|update
parameter_list|(
name|Connection
name|connection
parameter_list|,
name|TableInfo
name|tableInfo
parameter_list|,
name|Path
name|xmlLogFile
parameter_list|)
throws|throws
name|Exception
block|{
name|statement
operator|=
name|connection
operator|.
name|createStatement
argument_list|()
expr_stmt|;
name|XMLLogReader
name|reader
init|=
operator|new
name|XMLLogReader
argument_list|()
decl_stmt|;
try|try
init|(
name|InputStream
name|is
init|=
name|Files
operator|.
name|newInputStream
argument_list|(
name|xmlLogFile
argument_list|)
init|)
block|{
name|reader
operator|.
name|read
argument_list|(
name|is
argument_list|,
operator|new
name|ErrorMsgUpdater
argument_list|(
name|tableInfo
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Problem reading: "
operator|+
name|xmlLogFile
operator|.
name|toAbsolutePath
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
finally|finally
block|{
try|try
block|{
name|connection
operator|.
name|commit
argument_list|()
expr_stmt|;
name|statement
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Failed to close db connection!"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
specifier|private
class|class
name|ErrorMsgUpdater
implements|implements
name|XMLLogMsgHandler
block|{
specifier|private
specifier|final
name|String
name|errorTablename
decl_stmt|;
specifier|private
name|ErrorMsgUpdater
parameter_list|(
name|String
name|errorTablename
parameter_list|)
block|{
name|this
operator|.
name|errorTablename
operator|=
name|errorTablename
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|handleMsg
parameter_list|(
name|Level
name|level
parameter_list|,
name|String
name|xml
parameter_list|)
throws|throws
name|SQLException
throws|,
name|IOException
block|{
if|if
condition|(
operator|!
name|level
operator|.
name|equals
argument_list|(
name|Level
operator|.
name|ERROR
argument_list|)
condition|)
block|{
return|return;
block|}
name|XMLStreamReader
name|reader
init|=
literal|null
decl_stmt|;
try|try
block|{
name|reader
operator|=
name|XMLInputFactory
operator|.
name|newInstance
argument_list|()
operator|.
name|createXMLStreamReader
argument_list|(
operator|new
name|StringReader
argument_list|(
name|xml
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XMLStreamException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOExceptionWithCause
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|String
name|type
init|=
literal|null
decl_stmt|;
name|String
name|resourceId
init|=
literal|null
decl_stmt|;
try|try
block|{
while|while
condition|(
name|reader
operator|.
name|hasNext
argument_list|()
operator|&&
name|type
operator|==
literal|null
operator|&&
name|resourceId
operator|==
literal|null
condition|)
block|{
name|reader
operator|.
name|next
argument_list|()
expr_stmt|;
switch|switch
condition|(
name|reader
operator|.
name|getEventType
argument_list|()
condition|)
block|{
case|case
name|XMLStreamConstants
operator|.
name|START_ELEMENT
case|:
if|if
condition|(
literal|"timed_out"
operator|.
name|equals
argument_list|(
name|reader
operator|.
name|getLocalName
argument_list|()
argument_list|)
condition|)
block|{
name|resourceId
operator|=
name|reader
operator|.
name|getAttributeValue
argument_list|(
literal|""
argument_list|,
literal|"resourceId"
argument_list|)
expr_stmt|;
name|update
argument_list|(
name|errorTablename
argument_list|,
name|resourceId
argument_list|,
name|AbstractProfiler
operator|.
name|PARSE_ERROR_TYPE
operator|.
name|TIMEOUT
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"oom"
operator|.
name|equals
argument_list|(
name|reader
operator|.
name|getLocalName
argument_list|()
argument_list|)
condition|)
block|{
name|resourceId
operator|=
name|reader
operator|.
name|getAttributeValue
argument_list|(
literal|""
argument_list|,
literal|"resourceId"
argument_list|)
expr_stmt|;
name|update
argument_list|(
name|errorTablename
argument_list|,
name|resourceId
argument_list|,
name|AbstractProfiler
operator|.
name|PARSE_ERROR_TYPE
operator|.
name|OOM
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XMLStreamException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOExceptionWithCause
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
name|void
name|update
parameter_list|(
name|String
name|errorTableName
parameter_list|,
name|String
name|filePath
parameter_list|,
name|AbstractProfiler
operator|.
name|PARSE_ERROR_TYPE
name|type
parameter_list|)
throws|throws
name|SQLException
block|{
name|int
name|containerId
init|=
name|getContainerId
argument_list|(
name|filePath
argument_list|)
decl_stmt|;
name|String
name|sql
init|=
literal|"SELECT count(1) from "
operator|+
name|errorTableName
operator|+
literal|" where "
operator|+
name|Cols
operator|.
name|CONTAINER_ID
operator|+
literal|" = "
operator|+
name|containerId
operator|+
literal|" or "
operator|+
name|Cols
operator|.
name|FILE_PATH
operator|+
literal|"='"
operator|+
name|filePath
operator|+
literal|"'"
decl_stmt|;
name|ResultSet
name|rs
init|=
name|statement
operator|.
name|executeQuery
argument_list|(
name|sql
argument_list|)
decl_stmt|;
comment|//now try to figure out if that file already exists
comment|//in parse errors
name|int
name|hitCount
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|rs
operator|.
name|next
argument_list|()
condition|)
block|{
name|hitCount
operator|=
name|rs
operator|.
name|getInt
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
comment|//if it does, update all records matching that path or container id
if|if
condition|(
name|hitCount
operator|>
literal|0
condition|)
block|{
name|sql
operator|=
literal|"UPDATE "
operator|+
name|errorTableName
operator|+
literal|" SET "
operator|+
name|Cols
operator|.
name|PARSE_ERROR_TYPE_ID
operator|+
literal|" = "
operator|+
name|type
operator|.
name|ordinal
argument_list|()
operator|+
literal|","
operator|+
name|Cols
operator|.
name|FILE_PATH
operator|+
literal|"='"
operator|+
name|filePath
operator|+
literal|"'"
operator|+
literal|" where "
operator|+
name|Cols
operator|.
name|CONTAINER_ID
operator|+
literal|"="
operator|+
name|containerId
operator|+
literal|" or "
operator|+
name|Cols
operator|.
name|FILE_PATH
operator|+
literal|"='"
operator|+
name|filePath
operator|+
literal|"'"
expr_stmt|;
empty_stmt|;
block|}
else|else
block|{
comment|//if not and container id> -1
comment|//insert full record
if|if
condition|(
name|containerId
operator|>
operator|-
literal|1
condition|)
block|{
name|sql
operator|=
literal|"INSERT INTO "
operator|+
name|errorTableName
operator|+
literal|" ("
operator|+
name|Cols
operator|.
name|CONTAINER_ID
operator|+
literal|","
operator|+
name|Cols
operator|.
name|FILE_PATH
operator|+
literal|","
operator|+
name|Cols
operator|.
name|PARSE_ERROR_TYPE_ID
operator|+
literal|")"
operator|+
literal|" values ("
operator|+
name|containerId
operator|+
literal|", '"
operator|+
name|filePath
operator|+
literal|"',"
operator|+
name|type
operator|.
name|ordinal
argument_list|()
operator|+
literal|");"
expr_stmt|;
block|}
else|else
block|{
comment|//if container id == -1, insert only file path and parse error type id
name|sql
operator|=
literal|"INSERT INTO "
operator|+
name|errorTableName
operator|+
literal|" ("
operator|+
name|Cols
operator|.
name|FILE_PATH
operator|.
name|name
argument_list|()
operator|+
literal|","
operator|+
name|Cols
operator|.
name|PARSE_ERROR_TYPE_ID
operator|+
literal|")"
operator|+
literal|"values ('"
operator|+
name|filePath
operator|+
literal|"',"
operator|+
name|type
operator|.
name|ordinal
argument_list|()
operator|+
literal|");"
expr_stmt|;
block|}
block|}
name|int
name|updated
init|=
name|statement
operator|.
name|executeUpdate
argument_list|(
name|sql
argument_list|)
decl_stmt|;
if|if
condition|(
name|updated
operator|==
literal|0
condition|)
block|{
comment|//TODO: log
name|LOG
operator|.
name|warn
argument_list|(
literal|"made no updates in xmlerrorlogupdater!"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|updated
operator|>
literal|1
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"made too many updates"
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|int
name|getContainerId
parameter_list|(
name|String
name|resourceId
parameter_list|)
throws|throws
name|SQLException
block|{
name|int
name|containerId
init|=
operator|-
literal|1
decl_stmt|;
name|String
name|sql
init|=
literal|"SELECT "
operator|+
name|Cols
operator|.
name|CONTAINER_ID
operator|.
name|name
argument_list|()
operator|+
literal|" from "
operator|+
name|ExtractProfiler
operator|.
name|CONTAINER_TABLE
operator|.
name|getName
argument_list|()
operator|+
literal|" where "
operator|+
name|Cols
operator|.
name|FILE_PATH
operator|+
literal|" ='"
operator|+
name|resourceId
operator|+
literal|"'"
decl_stmt|;
name|ResultSet
name|rs
init|=
name|statement
operator|.
name|executeQuery
argument_list|(
name|sql
argument_list|)
decl_stmt|;
name|int
name|resultCount
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|rs
operator|.
name|next
argument_list|()
condition|)
block|{
name|containerId
operator|=
name|rs
operator|.
name|getInt
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|resultCount
operator|++
expr_stmt|;
block|}
name|rs
operator|.
name|close
argument_list|()
expr_stmt|;
if|if
condition|(
name|resultCount
operator|==
literal|0
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Should have found a container for: {}"
argument_list|,
name|resourceId
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|resultCount
operator|>
literal|1
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Records ids should be unique: {}"
argument_list|,
name|resourceId
argument_list|)
expr_stmt|;
block|}
comment|/*             if (containerId< 0) {                 System.err.println("CONTAINER ID< 0!!!");                 sql = "SELECT MAX("+ Cols.CONTAINER_ID.name() +                         ") from "+ExtractProfiler.CONTAINER_TABLE.getName();                 rs = statement.executeQuery(sql);                 while (rs.next()) {                     containerId = rs.getInt(1);                 }                 rs.close();                 if (containerId< 0) {                     //log and abort                     //return -1?                 } else {                     containerId++;                 }              }*/
return|return
name|containerId
return|;
block|}
block|}
block|}
end_class

end_unit

