begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|eval
operator|.
name|io
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Reader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|compress
operator|.
name|compressors
operator|.
name|bzip2
operator|.
name|BZip2CompressorInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|compress
operator|.
name|compressors
operator|.
name|gzip
operator|.
name|GzipCompressorInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|compress
operator|.
name|compressors
operator|.
name|z
operator|.
name|ZCompressorInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|config
operator|.
name|TikaConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|exception
operator|.
name|TikaException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|metadata
operator|.
name|Metadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|metadata
operator|.
name|serialization
operator|.
name|JsonMetadataList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|mime
operator|.
name|MediaType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|RecursiveParserWrapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_class
specifier|public
class|class
name|ExtractReader
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ExtractReader
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|long
name|IGNORE_LENGTH
init|=
operator|-
literal|1L
decl_stmt|;
specifier|public
enum|enum
name|ALTER_METADATA_LIST
block|{
name|AS_IS
block|,
comment|//leave the metadata list as is
name|FIRST_ONLY
block|,
comment|//take only the metadata list for the "container" document
name|CONCATENATE_CONTENT_INTO_FIRST
comment|// concatenate all of the content into the first
block|}
specifier|private
name|TikaConfig
name|tikaConfig
init|=
name|TikaConfig
operator|.
name|getDefaultConfig
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|ALTER_METADATA_LIST
name|alterMetadataList
decl_stmt|;
specifier|private
specifier|final
name|long
name|minExtractLength
decl_stmt|;
specifier|private
specifier|final
name|long
name|maxExtractLength
decl_stmt|;
comment|/**      * Reads full extract, no modification of metadata list, no min or max extract length checking      */
specifier|public
name|ExtractReader
parameter_list|()
block|{
name|this
argument_list|(
name|ALTER_METADATA_LIST
operator|.
name|AS_IS
argument_list|,
name|IGNORE_LENGTH
argument_list|,
name|IGNORE_LENGTH
argument_list|)
expr_stmt|;
block|}
specifier|public
name|ExtractReader
parameter_list|(
name|ALTER_METADATA_LIST
name|alterMetadataList
parameter_list|)
block|{
name|this
argument_list|(
name|alterMetadataList
argument_list|,
name|IGNORE_LENGTH
argument_list|,
name|IGNORE_LENGTH
argument_list|)
expr_stmt|;
block|}
specifier|public
name|ExtractReader
parameter_list|(
name|ALTER_METADATA_LIST
name|alterMetadataList
parameter_list|,
name|long
name|minExtractLength
parameter_list|,
name|long
name|maxExtractLength
parameter_list|)
block|{
name|this
operator|.
name|alterMetadataList
operator|=
name|alterMetadataList
expr_stmt|;
name|this
operator|.
name|minExtractLength
operator|=
name|minExtractLength
expr_stmt|;
name|this
operator|.
name|maxExtractLength
operator|=
name|maxExtractLength
expr_stmt|;
if|if
condition|(
name|maxExtractLength
operator|>
name|IGNORE_LENGTH
operator|&&
name|minExtractLength
operator|>=
name|maxExtractLength
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"minExtractLength("
operator|+
name|minExtractLength
operator|+
literal|") must be< maxExtractLength("
operator|+
name|maxExtractLength
operator|+
literal|")"
argument_list|)
throw|;
block|}
block|}
specifier|public
name|List
argument_list|<
name|Metadata
argument_list|>
name|loadExtract
parameter_list|(
name|Path
name|extractFile
parameter_list|)
throws|throws
name|ExtractReaderException
block|{
name|List
argument_list|<
name|Metadata
argument_list|>
name|metadataList
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|extractFile
operator|==
literal|null
operator|||
operator|!
name|Files
operator|.
name|isRegularFile
argument_list|(
name|extractFile
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|ExtractReaderException
argument_list|(
name|ExtractReaderException
operator|.
name|TYPE
operator|.
name|NO_EXTRACT_FILE
argument_list|)
throw|;
block|}
name|FileSuffixes
name|fileSuffixes
init|=
name|parseSuffixes
argument_list|(
name|extractFile
operator|.
name|getFileName
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|fileSuffixes
operator|.
name|txtOrJson
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ExtractReaderException
argument_list|(
name|ExtractReaderException
operator|.
name|TYPE
operator|.
name|INCORRECT_EXTRACT_FILE_SUFFIX
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|Files
operator|.
name|isRegularFile
argument_list|(
name|extractFile
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|ExtractReaderException
argument_list|(
name|ExtractReaderException
operator|.
name|TYPE
operator|.
name|NO_EXTRACT_FILE
argument_list|)
throw|;
block|}
name|long
name|length
init|=
operator|-
literal|1L
decl_stmt|;
try|try
block|{
name|length
operator|=
name|Files
operator|.
name|size
argument_list|(
name|extractFile
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ExtractReaderException
argument_list|(
name|ExtractReaderException
operator|.
name|TYPE
operator|.
name|IO_EXCEPTION
argument_list|)
throw|;
block|}
if|if
condition|(
name|length
operator|==
literal|0L
condition|)
block|{
throw|throw
operator|new
name|ExtractReaderException
argument_list|(
name|ExtractReaderException
operator|.
name|TYPE
operator|.
name|ZERO_BYTE_EXTRACT_FILE
argument_list|)
throw|;
block|}
if|if
condition|(
name|minExtractLength
operator|>
name|IGNORE_LENGTH
operator|&&
name|length
operator|<
name|minExtractLength
condition|)
block|{
throw|throw
operator|new
name|ExtractReaderException
argument_list|(
name|ExtractReaderException
operator|.
name|TYPE
operator|.
name|EXTRACT_FILE_TOO_SHORT
argument_list|)
throw|;
block|}
if|if
condition|(
name|maxExtractLength
operator|>
name|IGNORE_LENGTH
operator|&&
name|length
operator|>
name|maxExtractLength
condition|)
block|{
throw|throw
operator|new
name|ExtractReaderException
argument_list|(
name|ExtractReaderException
operator|.
name|TYPE
operator|.
name|EXTRACT_FILE_TOO_LONG
argument_list|)
throw|;
block|}
name|Reader
name|reader
init|=
literal|null
decl_stmt|;
name|InputStream
name|is
init|=
literal|null
decl_stmt|;
try|try
block|{
name|is
operator|=
name|Files
operator|.
name|newInputStream
argument_list|(
name|extractFile
argument_list|)
expr_stmt|;
if|if
condition|(
name|fileSuffixes
operator|.
name|compression
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|fileSuffixes
operator|.
name|compression
operator|.
name|equals
argument_list|(
literal|"bz2"
argument_list|)
condition|)
block|{
name|is
operator|=
operator|new
name|BZip2CompressorInputStream
argument_list|(
name|is
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|fileSuffixes
operator|.
name|compression
operator|.
name|equals
argument_list|(
literal|"gz"
argument_list|)
operator|||
name|fileSuffixes
operator|.
name|compression
operator|.
name|equals
argument_list|(
literal|"gzip"
argument_list|)
condition|)
block|{
name|is
operator|=
operator|new
name|GzipCompressorInputStream
argument_list|(
name|is
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|fileSuffixes
operator|.
name|compression
operator|.
name|equals
argument_list|(
literal|"zip"
argument_list|)
condition|)
block|{
name|is
operator|=
operator|new
name|ZCompressorInputStream
argument_list|(
name|is
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Can't yet process compression of type: {}"
argument_list|,
name|fileSuffixes
operator|.
name|compression
argument_list|)
expr_stmt|;
return|return
name|metadataList
return|;
block|}
block|}
name|reader
operator|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|is
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ExtractReaderException
argument_list|(
name|ExtractReaderException
operator|.
name|TYPE
operator|.
name|IO_EXCEPTION
argument_list|)
throw|;
block|}
try|try
block|{
if|if
condition|(
name|fileSuffixes
operator|.
name|txtOrJson
operator|.
name|equals
argument_list|(
literal|"json"
argument_list|)
condition|)
block|{
name|metadataList
operator|=
name|JsonMetadataList
operator|.
name|fromJson
argument_list|(
name|reader
argument_list|)
expr_stmt|;
if|if
condition|(
name|alterMetadataList
operator|.
name|equals
argument_list|(
name|ALTER_METADATA_LIST
operator|.
name|FIRST_ONLY
argument_list|)
operator|&&
name|metadataList
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
while|while
condition|(
name|metadataList
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
name|metadataList
operator|.
name|remove
argument_list|(
name|metadataList
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|alterMetadataList
operator|.
name|equals
argument_list|(
name|ALTER_METADATA_LIST
operator|.
name|AS_IS
operator|.
name|CONCATENATE_CONTENT_INTO_FIRST
argument_list|)
operator|&&
name|metadataList
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|Metadata
name|containerMetadata
init|=
name|metadataList
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|metadataList
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Metadata
name|m
init|=
name|metadataList
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|String
name|c
init|=
name|m
operator|.
name|get
argument_list|(
name|RecursiveParserWrapper
operator|.
name|TIKA_CONTENT
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|!=
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
block|}
block|}
name|containerMetadata
operator|.
name|set
argument_list|(
name|RecursiveParserWrapper
operator|.
name|TIKA_CONTENT
argument_list|,
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
while|while
condition|(
name|metadataList
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
name|metadataList
operator|.
name|remove
argument_list|(
name|metadataList
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|metadataList
operator|=
name|generateListFromTextFile
argument_list|(
name|reader
argument_list|,
name|fileSuffixes
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ExtractReaderException
argument_list|(
name|ExtractReaderException
operator|.
name|TYPE
operator|.
name|IO_EXCEPTION
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|TikaException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ExtractReaderException
argument_list|(
name|ExtractReaderException
operator|.
name|TYPE
operator|.
name|EXTRACT_PARSE_EXCEPTION
argument_list|)
throw|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|closeQuietly
argument_list|(
name|reader
argument_list|)
expr_stmt|;
name|IOUtils
operator|.
name|closeQuietly
argument_list|(
name|is
argument_list|)
expr_stmt|;
block|}
return|return
name|metadataList
return|;
block|}
specifier|private
name|List
argument_list|<
name|Metadata
argument_list|>
name|generateListFromTextFile
parameter_list|(
name|Reader
name|reader
parameter_list|,
name|FileSuffixes
name|fileSuffixes
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|Metadata
argument_list|>
name|metadataList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|String
name|content
init|=
name|IOUtils
operator|.
name|toString
argument_list|(
name|reader
argument_list|)
decl_stmt|;
name|Metadata
name|m
init|=
operator|new
name|Metadata
argument_list|()
decl_stmt|;
name|m
operator|.
name|set
argument_list|(
name|RecursiveParserWrapper
operator|.
name|TIKA_CONTENT
argument_list|,
name|content
argument_list|)
expr_stmt|;
comment|//Let's hope the file name has a suffix that can
comment|//be used to determine the mime.  Could be wrong or missing,
comment|//but better than nothing.
name|m
operator|.
name|set
argument_list|(
name|Metadata
operator|.
name|RESOURCE_NAME_KEY
argument_list|,
name|fileSuffixes
operator|.
name|originalFileName
argument_list|)
expr_stmt|;
name|MediaType
name|mimeType
init|=
name|tikaConfig
operator|.
name|getMimeRepository
argument_list|()
operator|.
name|detect
argument_list|(
literal|null
argument_list|,
name|m
argument_list|)
decl_stmt|;
if|if
condition|(
name|mimeType
operator|!=
literal|null
condition|)
block|{
name|m
operator|.
name|set
argument_list|(
name|Metadata
operator|.
name|CONTENT_TYPE
argument_list|,
name|mimeType
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|metadataList
operator|.
name|add
argument_list|(
name|m
argument_list|)
expr_stmt|;
return|return
name|metadataList
return|;
block|}
specifier|protected
specifier|static
name|FileSuffixes
name|parseSuffixes
parameter_list|(
name|String
name|fName
parameter_list|)
block|{
name|FileSuffixes
name|fileSuffixes
init|=
operator|new
name|FileSuffixes
argument_list|()
decl_stmt|;
if|if
condition|(
name|fName
operator|==
literal|null
condition|)
block|{
return|return
name|fileSuffixes
return|;
block|}
name|Matcher
name|m
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"^(.*?)\\.(json|txt)(?:\\.(bz2|gz(?:ip)?|zip))?$"
argument_list|)
operator|.
name|matcher
argument_list|(
name|fName
argument_list|)
decl_stmt|;
if|if
condition|(
name|m
operator|.
name|find
argument_list|()
condition|)
block|{
name|fileSuffixes
operator|.
name|originalFileName
operator|=
name|m
operator|.
name|group
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|fileSuffixes
operator|.
name|txtOrJson
operator|=
name|m
operator|.
name|group
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|fileSuffixes
operator|.
name|compression
operator|=
name|m
operator|.
name|group
argument_list|(
literal|3
argument_list|)
expr_stmt|;
block|}
return|return
name|fileSuffixes
return|;
block|}
specifier|private
specifier|static
class|class
name|FileSuffixes
block|{
name|String
name|compression
decl_stmt|;
name|String
name|txtOrJson
decl_stmt|;
name|String
name|originalFileName
decl_stmt|;
block|}
block|}
end_class

end_unit

