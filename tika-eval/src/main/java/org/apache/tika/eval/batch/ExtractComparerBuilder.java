begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|eval
operator|.
name|batch
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|batch
operator|.
name|FileResourceConsumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|eval
operator|.
name|AbstractProfiler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|eval
operator|.
name|ExtractComparer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|eval
operator|.
name|db
operator|.
name|TableInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|eval
operator|.
name|io
operator|.
name|ExtractReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|util
operator|.
name|PropsUtil
import|;
end_import

begin_class
specifier|public
class|class
name|ExtractComparerBuilder
extends|extends
name|EvalConsumerBuilder
block|{
specifier|private
specifier|final
name|List
argument_list|<
name|TableInfo
argument_list|>
name|tableInfosA
decl_stmt|;
specifier|private
specifier|final
name|List
argument_list|<
name|TableInfo
argument_list|>
name|tableInfosB
decl_stmt|;
specifier|private
specifier|final
name|List
argument_list|<
name|TableInfo
argument_list|>
name|tableInfosAandB
decl_stmt|;
specifier|private
specifier|final
name|List
argument_list|<
name|TableInfo
argument_list|>
name|refTableInfos
decl_stmt|;
specifier|public
name|ExtractComparerBuilder
parameter_list|()
block|{
name|List
argument_list|<
name|TableInfo
argument_list|>
name|tableInfosA
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|TableInfo
argument_list|>
name|tableInfosB
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|TableInfo
argument_list|>
name|tableInfosAandB
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|tableInfosA
operator|.
name|add
argument_list|(
name|ExtractComparer
operator|.
name|PROFILES_A
argument_list|)
expr_stmt|;
name|tableInfosA
operator|.
name|add
argument_list|(
name|ExtractComparer
operator|.
name|EXTRACT_EXCEPTION_TABLE_A
argument_list|)
expr_stmt|;
name|tableInfosA
operator|.
name|add
argument_list|(
name|ExtractComparer
operator|.
name|EXCEPTION_TABLE_A
argument_list|)
expr_stmt|;
name|tableInfosA
operator|.
name|add
argument_list|(
name|ExtractComparer
operator|.
name|CONTENTS_TABLE_A
argument_list|)
expr_stmt|;
name|tableInfosA
operator|.
name|add
argument_list|(
name|ExtractComparer
operator|.
name|EXTRACT_EXCEPTION_TABLE_A
argument_list|)
expr_stmt|;
name|tableInfosA
operator|.
name|add
argument_list|(
name|ExtractComparer
operator|.
name|EMBEDDED_FILE_PATH_TABLE_A
argument_list|)
expr_stmt|;
name|tableInfosB
operator|.
name|add
argument_list|(
name|ExtractComparer
operator|.
name|PROFILES_B
argument_list|)
expr_stmt|;
name|tableInfosB
operator|.
name|add
argument_list|(
name|ExtractComparer
operator|.
name|EXTRACT_EXCEPTION_TABLE_B
argument_list|)
expr_stmt|;
name|tableInfosB
operator|.
name|add
argument_list|(
name|ExtractComparer
operator|.
name|EXCEPTION_TABLE_B
argument_list|)
expr_stmt|;
name|tableInfosB
operator|.
name|add
argument_list|(
name|ExtractComparer
operator|.
name|EXTRACT_EXCEPTION_TABLE_B
argument_list|)
expr_stmt|;
name|tableInfosB
operator|.
name|add
argument_list|(
name|ExtractComparer
operator|.
name|CONTENTS_TABLE_B
argument_list|)
expr_stmt|;
name|tableInfosB
operator|.
name|add
argument_list|(
name|ExtractComparer
operator|.
name|EMBEDDED_FILE_PATH_TABLE_B
argument_list|)
expr_stmt|;
name|tableInfosAandB
operator|.
name|add
argument_list|(
name|ExtractComparer
operator|.
name|COMPARISON_CONTAINERS
argument_list|)
expr_stmt|;
name|tableInfosAandB
operator|.
name|add
argument_list|(
name|ExtractComparer
operator|.
name|CONTENT_COMPARISONS
argument_list|)
expr_stmt|;
name|tableInfosAandB
operator|.
name|add
argument_list|(
name|AbstractProfiler
operator|.
name|MIME_TABLE
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|TableInfo
argument_list|>
name|refTableInfos
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|refTableInfos
operator|.
name|add
argument_list|(
name|ExtractComparer
operator|.
name|REF_PAIR_NAMES
argument_list|)
expr_stmt|;
name|refTableInfos
operator|.
name|add
argument_list|(
name|AbstractProfiler
operator|.
name|REF_PARSE_ERROR_TYPES
argument_list|)
expr_stmt|;
name|refTableInfos
operator|.
name|add
argument_list|(
name|AbstractProfiler
operator|.
name|REF_PARSE_EXCEPTION_TYPES
argument_list|)
expr_stmt|;
name|refTableInfos
operator|.
name|add
argument_list|(
name|AbstractProfiler
operator|.
name|REF_EXTRACT_EXCEPTION_TYPES
argument_list|)
expr_stmt|;
name|this
operator|.
name|tableInfosA
operator|=
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|tableInfosA
argument_list|)
expr_stmt|;
name|this
operator|.
name|tableInfosB
operator|=
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|tableInfosB
argument_list|)
expr_stmt|;
name|this
operator|.
name|tableInfosAandB
operator|=
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|tableInfosAandB
argument_list|)
expr_stmt|;
name|this
operator|.
name|refTableInfos
operator|=
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|refTableInfos
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|FileResourceConsumer
name|build
parameter_list|()
throws|throws
name|IOException
throws|,
name|SQLException
block|{
name|Path
name|extractsA
init|=
name|PropsUtil
operator|.
name|getPath
argument_list|(
name|localAttrs
operator|.
name|get
argument_list|(
literal|"extractsA"
argument_list|)
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|extractsA
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Must specify \"extractsA\" -- directory for 'A' extracts"
argument_list|)
throw|;
block|}
name|Path
name|extractsB
init|=
name|PropsUtil
operator|.
name|getPath
argument_list|(
name|localAttrs
operator|.
name|get
argument_list|(
literal|"extractsB"
argument_list|)
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|extractsB
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Must specify \"extractsB\" -- directory for 'B' extracts"
argument_list|)
throw|;
block|}
name|Path
name|inputRootDir
init|=
name|PropsUtil
operator|.
name|getPath
argument_list|(
name|localAttrs
operator|.
name|get
argument_list|(
literal|"inputDir"
argument_list|)
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|long
name|minExtractLength
init|=
name|PropsUtil
operator|.
name|getLong
argument_list|(
name|localAttrs
operator|.
name|get
argument_list|(
literal|"minExtractLength"
argument_list|)
argument_list|,
operator|-
literal|1L
argument_list|)
decl_stmt|;
name|long
name|maxExtractLength
init|=
name|PropsUtil
operator|.
name|getLong
argument_list|(
name|localAttrs
operator|.
name|get
argument_list|(
literal|"maxExtractLength"
argument_list|)
argument_list|,
operator|-
literal|1L
argument_list|)
decl_stmt|;
name|ExtractReader
operator|.
name|ALTER_METADATA_LIST
name|alterExtractList
init|=
name|getAlterMetadata
argument_list|(
name|localAttrs
argument_list|)
decl_stmt|;
if|if
condition|(
name|inputRootDir
operator|==
literal|null
condition|)
block|{
comment|//this is for the sake of the crawler
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Must specify an -inputDir"
argument_list|)
throw|;
block|}
return|return
operator|new
name|ExtractComparer
argument_list|(
name|queue
argument_list|,
name|inputRootDir
argument_list|,
name|extractsA
argument_list|,
name|extractsB
argument_list|,
operator|new
name|ExtractReader
argument_list|(
name|alterExtractList
argument_list|,
name|minExtractLength
argument_list|,
name|maxExtractLength
argument_list|)
argument_list|,
name|getDBWriter
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|protected
name|List
argument_list|<
name|TableInfo
argument_list|>
name|getTableInfo
parameter_list|(
name|String
name|tableNamePrefixA
parameter_list|,
name|String
name|tableNamePrefixB
parameter_list|)
block|{
name|List
argument_list|<
name|TableInfo
argument_list|>
name|allTables
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|tableNamePrefixA
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|TableInfo
name|tableInfo
range|:
name|tableInfosA
control|)
block|{
name|tableInfo
operator|.
name|setNamePrefix
argument_list|(
name|tableNamePrefixA
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|tableNamePrefixB
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|TableInfo
name|tableInfo
range|:
name|tableInfosB
control|)
block|{
name|tableInfo
operator|.
name|setNamePrefix
argument_list|(
name|tableNamePrefixB
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|tableNamePrefixA
operator|!=
literal|null
operator|||
name|tableNamePrefixB
operator|!=
literal|null
condition|)
block|{
name|String
name|aAndB
init|=
operator|(
name|tableNamePrefixA
operator|==
literal|null
operator|)
condition|?
literal|""
else|:
name|tableNamePrefixA
decl_stmt|;
name|aAndB
operator|=
operator|(
name|tableNamePrefixB
operator|==
literal|null
operator|)
condition|?
name|aAndB
else|:
name|aAndB
operator|+
name|tableNamePrefixB
expr_stmt|;
for|for
control|(
name|TableInfo
name|tableInfo
range|:
name|tableInfosAandB
control|)
block|{
name|tableInfo
operator|.
name|setNamePrefix
argument_list|(
name|aAndB
argument_list|)
expr_stmt|;
block|}
block|}
name|allTables
operator|.
name|addAll
argument_list|(
name|tableInfosA
argument_list|)
expr_stmt|;
name|allTables
operator|.
name|addAll
argument_list|(
name|tableInfosB
argument_list|)
expr_stmt|;
name|allTables
operator|.
name|addAll
argument_list|(
name|tableInfosAandB
argument_list|)
expr_stmt|;
name|allTables
operator|.
name|addAll
argument_list|(
name|refTableInfos
argument_list|)
expr_stmt|;
name|allTables
operator|=
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|allTables
argument_list|)
expr_stmt|;
return|return
name|allTables
return|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|addErrorLogTablePairs
parameter_list|(
name|DBConsumersManager
name|manager
parameter_list|)
block|{
name|Path
name|errorLogA
init|=
name|PropsUtil
operator|.
name|getPath
argument_list|(
name|localAttrs
operator|.
name|get
argument_list|(
literal|"errorLogFileA"
argument_list|)
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|errorLogA
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|manager
operator|.
name|addErrorLogTablePair
argument_list|(
name|errorLogA
argument_list|,
name|ExtractComparer
operator|.
name|EXTRACT_EXCEPTION_TABLE_A
argument_list|)
expr_stmt|;
name|Path
name|errorLogB
init|=
name|PropsUtil
operator|.
name|getPath
argument_list|(
name|localAttrs
operator|.
name|get
argument_list|(
literal|"errorLogFileB"
argument_list|)
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|errorLogB
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|manager
operator|.
name|addErrorLogTablePair
argument_list|(
name|errorLogB
argument_list|,
name|ExtractComparer
operator|.
name|EXTRACT_EXCEPTION_TABLE_B
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

