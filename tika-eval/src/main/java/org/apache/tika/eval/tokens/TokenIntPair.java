begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|eval
operator|.
name|tokens
package|;
end_package

begin_import
import|import
name|org
operator|.
name|jetbrains
operator|.
name|annotations
operator|.
name|NotNull
import|;
end_import

begin_class
specifier|public
class|class
name|TokenIntPair
implements|implements
name|Comparable
argument_list|<
name|TokenIntPair
argument_list|>
block|{
specifier|final
name|String
name|token
decl_stmt|;
specifier|final
name|int
name|value
decl_stmt|;
specifier|public
name|TokenIntPair
parameter_list|(
name|String
name|token
parameter_list|,
name|int
name|value
parameter_list|)
block|{
name|this
operator|.
name|token
operator|=
name|token
expr_stmt|;
name|this
operator|.
name|value
operator|=
name|value
expr_stmt|;
block|}
specifier|public
name|long
name|getValue
parameter_list|()
block|{
return|return
name|value
return|;
block|}
specifier|public
name|String
name|getToken
parameter_list|()
block|{
return|return
name|token
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|o
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|o
operator|==
literal|null
operator|||
name|getClass
argument_list|()
operator|!=
name|o
operator|.
name|getClass
argument_list|()
condition|)
return|return
literal|false
return|;
name|TokenIntPair
name|that
init|=
operator|(
name|TokenIntPair
operator|)
name|o
decl_stmt|;
if|if
condition|(
name|value
operator|!=
name|that
operator|.
name|value
condition|)
return|return
literal|false
return|;
return|return
name|token
operator|.
name|equals
argument_list|(
name|that
operator|.
name|token
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
name|int
name|result
init|=
name|token
operator|.
name|hashCode
argument_list|()
decl_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
name|value
expr_stmt|;
return|return
name|result
return|;
block|}
comment|/**      * Descending by value, ascending by token      *      * @param o other tokenlong pair      * @return comparison      */
annotation|@
name|Override
specifier|public
name|int
name|compareTo
parameter_list|(
annotation|@
name|NotNull
name|TokenIntPair
name|o
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|value
operator|>
name|o
operator|.
name|value
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
elseif|else
if|if
condition|(
name|this
operator|.
name|value
operator|<
name|o
operator|.
name|value
condition|)
block|{
return|return
literal|1
return|;
block|}
return|return
name|this
operator|.
name|token
operator|.
name|compareTo
argument_list|(
name|o
operator|.
name|token
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"TokenIntPair{"
operator|+
literal|"token='"
operator|+
name|token
operator|+
literal|'\''
operator|+
literal|", value="
operator|+
name|value
operator|+
literal|'}'
return|;
block|}
block|}
end_class

end_unit

