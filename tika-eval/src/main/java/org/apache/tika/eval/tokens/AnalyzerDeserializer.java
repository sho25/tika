begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|eval
operator|.
name|tokens
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Reader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gson
operator|.
name|JsonArray
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gson
operator|.
name|JsonDeserializationContext
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gson
operator|.
name|JsonDeserializer
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gson
operator|.
name|JsonElement
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gson
operator|.
name|JsonObject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gson
operator|.
name|JsonParseException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|Analyzer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|TokenStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|Tokenizer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|miscellaneous
operator|.
name|LimitTokenCountFilterFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|util
operator|.
name|CharFilterFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|util
operator|.
name|ClasspathResourceLoader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|util
operator|.
name|ResourceLoaderAware
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|util
operator|.
name|TokenFilterFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|util
operator|.
name|TokenizerFactory
import|;
end_import

begin_class
class|class
name|AnalyzerDeserializer
implements|implements
name|JsonDeserializer
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Analyzer
argument_list|>
argument_list|>
block|{
specifier|private
specifier|static
specifier|final
name|String
name|ANALYZERS
init|=
literal|"analyzers"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|CHAR_FILTERS
init|=
literal|"charfilters"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|TOKEN_FILTERS
init|=
literal|"tokenfilters"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|TOKENIZER
init|=
literal|"tokenizer"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|FACTORY
init|=
literal|"factory"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|PARAMS
init|=
literal|"params"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|COMMENT
init|=
literal|"_comment"
decl_stmt|;
specifier|private
specifier|final
name|int
name|maxTokens
decl_stmt|;
name|AnalyzerDeserializer
parameter_list|(
name|int
name|maxTokens
parameter_list|)
block|{
name|this
operator|.
name|maxTokens
operator|=
name|maxTokens
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Analyzer
argument_list|>
name|deserialize
parameter_list|(
name|JsonElement
name|element
parameter_list|,
name|Type
name|type
parameter_list|,
name|JsonDeserializationContext
name|jsonDeserializationContext
parameter_list|)
throws|throws
name|JsonParseException
block|{
if|if
condition|(
operator|!
name|element
operator|.
name|isJsonObject
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Expecting top level 'analyzers:{}'"
argument_list|)
throw|;
block|}
name|JsonElement
name|root
init|=
name|element
operator|.
name|getAsJsonObject
argument_list|()
operator|.
name|get
argument_list|(
name|ANALYZERS
argument_list|)
decl_stmt|;
if|if
condition|(
name|root
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Expecting top level 'analyzers:{}"
argument_list|)
throw|;
block|}
try|try
block|{
return|return
name|buildAnalyzers
argument_list|(
name|root
argument_list|,
name|maxTokens
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|Analyzer
argument_list|>
name|buildAnalyzers
parameter_list|(
name|JsonElement
name|value
parameter_list|,
name|int
name|maxTokens
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|value
operator|.
name|isJsonObject
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Expecting map with analyzer names/analyzer definitions"
argument_list|)
throw|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|Analyzer
argument_list|>
name|analyzers
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|JsonObject
name|root
init|=
operator|(
name|JsonObject
operator|)
name|value
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|JsonElement
argument_list|>
name|e
range|:
name|root
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|analyzerName
init|=
name|e
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|Analyzer
name|analyzer
init|=
name|buildAnalyzer
argument_list|(
name|analyzerName
argument_list|,
name|e
operator|.
name|getValue
argument_list|()
argument_list|,
name|maxTokens
argument_list|)
decl_stmt|;
name|analyzers
operator|.
name|put
argument_list|(
name|analyzerName
argument_list|,
name|analyzer
argument_list|)
expr_stmt|;
block|}
return|return
name|analyzers
return|;
block|}
specifier|public
specifier|static
name|Analyzer
name|buildAnalyzer
parameter_list|(
name|String
name|analyzerName
parameter_list|,
name|JsonElement
name|value
parameter_list|,
name|int
name|maxTokens
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|value
operator|.
name|isJsonObject
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Expecting map of charfilter, tokenizer, tokenfilters"
argument_list|)
throw|;
block|}
name|JsonObject
name|aRoot
init|=
operator|(
name|JsonObject
operator|)
name|value
decl_stmt|;
name|CharFilterFactory
index|[]
name|charFilters
init|=
operator|new
name|CharFilterFactory
index|[
literal|0
index|]
decl_stmt|;
name|TokenizerFactory
name|tokenizerFactory
init|=
literal|null
decl_stmt|;
name|TokenFilterFactory
index|[]
name|tokenFilterFactories
init|=
operator|new
name|TokenFilterFactory
index|[
literal|0
index|]
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|JsonElement
argument_list|>
name|e
range|:
name|aRoot
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|k
init|=
name|e
operator|.
name|getKey
argument_list|()
decl_stmt|;
if|if
condition|(
name|k
operator|.
name|equals
argument_list|(
name|CHAR_FILTERS
argument_list|)
condition|)
block|{
name|charFilters
operator|=
name|buildCharFilters
argument_list|(
name|e
operator|.
name|getValue
argument_list|()
argument_list|,
name|analyzerName
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|k
operator|.
name|equals
argument_list|(
name|TOKEN_FILTERS
argument_list|)
condition|)
block|{
name|tokenFilterFactories
operator|=
name|buildTokenFilterFactories
argument_list|(
name|e
operator|.
name|getValue
argument_list|()
argument_list|,
name|analyzerName
argument_list|,
name|maxTokens
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|k
operator|.
name|equals
argument_list|(
name|TOKENIZER
argument_list|)
condition|)
block|{
name|tokenizerFactory
operator|=
name|buildTokenizerFactory
argument_list|(
name|e
operator|.
name|getValue
argument_list|()
argument_list|,
name|analyzerName
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|k
operator|.
name|equals
argument_list|(
name|COMMENT
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Should have one of three values here:"
operator|+
name|CHAR_FILTERS
operator|+
literal|", "
operator|+
name|TOKENIZER
operator|+
literal|", "
operator|+
name|TOKEN_FILTERS
operator|+
literal|". I don't recognize: "
operator|+
name|k
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|tokenizerFactory
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Must specify at least a tokenizer factory for an analyzer!"
argument_list|)
throw|;
block|}
return|return
operator|new
name|MyTokenizerChain
argument_list|(
name|charFilters
argument_list|,
name|tokenizerFactory
argument_list|,
name|tokenFilterFactories
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|TokenizerFactory
name|buildTokenizerFactory
parameter_list|(
name|JsonElement
name|map
parameter_list|,
name|String
name|analyzerName
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
operator|(
name|map
operator|instanceof
name|JsonObject
operator|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Expecting a map with \"factory\" string and "
operator|+
literal|"\"params\" map in tokenizer factory;"
operator|+
literal|" not: "
operator|+
name|map
operator|.
name|toString
argument_list|()
operator|+
literal|" in "
operator|+
name|analyzerName
argument_list|)
throw|;
block|}
name|JsonElement
name|factoryEl
init|=
operator|(
operator|(
name|JsonObject
operator|)
name|map
operator|)
operator|.
name|get
argument_list|(
name|FACTORY
argument_list|)
decl_stmt|;
if|if
condition|(
name|factoryEl
operator|==
literal|null
operator|||
operator|!
name|factoryEl
operator|.
name|isJsonPrimitive
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Expecting value for factory in char filter factory builder in:"
operator|+
name|analyzerName
argument_list|)
throw|;
block|}
name|String
name|factoryName
init|=
name|factoryEl
operator|.
name|getAsString
argument_list|()
decl_stmt|;
name|factoryName
operator|=
name|factoryName
operator|.
name|startsWith
argument_list|(
literal|"oala."
argument_list|)
condition|?
name|factoryName
operator|.
name|replaceFirst
argument_list|(
literal|"oala."
argument_list|,
literal|"org.apache.lucene.analysis."
argument_list|)
else|:
name|factoryName
expr_stmt|;
name|JsonElement
name|paramsEl
init|=
operator|(
operator|(
name|JsonObject
operator|)
name|map
operator|)
operator|.
name|get
argument_list|(
name|PARAMS
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
init|=
name|mapify
argument_list|(
name|paramsEl
argument_list|)
decl_stmt|;
name|String
name|spiName
init|=
literal|""
decl_stmt|;
for|for
control|(
name|String
name|s
range|:
name|TokenizerFactory
operator|.
name|availableTokenizers
argument_list|()
control|)
block|{
name|Class
name|clazz
init|=
name|TokenizerFactory
operator|.
name|lookupClass
argument_list|(
name|s
argument_list|)
decl_stmt|;
if|if
condition|(
name|clazz
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|factoryName
argument_list|)
condition|)
block|{
name|spiName
operator|=
name|s
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|spiName
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"A SPI class of type org.apache.lucene.analysis.util.TokenizerFactory with name"
operator|+
literal|"'"
operator|+
name|factoryName
operator|+
literal|"' does not exist."
argument_list|)
throw|;
block|}
try|try
block|{
name|TokenizerFactory
name|tokenizerFactory
init|=
name|TokenizerFactory
operator|.
name|forName
argument_list|(
name|spiName
argument_list|,
name|params
argument_list|)
decl_stmt|;
if|if
condition|(
name|tokenizerFactory
operator|instanceof
name|ResourceLoaderAware
condition|)
block|{
operator|(
operator|(
name|ResourceLoaderAware
operator|)
name|tokenizerFactory
operator|)
operator|.
name|inform
argument_list|(
operator|new
name|ClasspathResourceLoader
argument_list|(
name|AnalyzerDeserializer
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|tokenizerFactory
return|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"While working on "
operator|+
name|analyzerName
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|static
name|CharFilterFactory
index|[]
name|buildCharFilters
parameter_list|(
name|JsonElement
name|el
parameter_list|,
name|String
name|analyzerName
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|el
operator|==
literal|null
operator|||
name|el
operator|.
name|isJsonNull
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
operator|!
name|el
operator|.
name|isJsonArray
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Expecting array for charfilters, but got:"
operator|+
name|el
operator|.
name|toString
argument_list|()
operator|+
literal|" for "
operator|+
name|analyzerName
argument_list|)
throw|;
block|}
name|JsonArray
name|jsonArray
init|=
operator|(
name|JsonArray
operator|)
name|el
decl_stmt|;
name|List
argument_list|<
name|CharFilterFactory
argument_list|>
name|ret
init|=
operator|new
name|LinkedList
argument_list|<
name|CharFilterFactory
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|JsonElement
name|filterMap
range|:
name|jsonArray
control|)
block|{
if|if
condition|(
operator|!
operator|(
name|filterMap
operator|instanceof
name|JsonObject
operator|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Expecting a map with \"factory\" string and \"params\" map in char filter factory;"
operator|+
literal|" not: "
operator|+
name|filterMap
operator|.
name|toString
argument_list|()
operator|+
literal|" in "
operator|+
name|analyzerName
argument_list|)
throw|;
block|}
name|JsonElement
name|factoryEl
init|=
operator|(
operator|(
name|JsonObject
operator|)
name|filterMap
operator|)
operator|.
name|get
argument_list|(
name|FACTORY
argument_list|)
decl_stmt|;
if|if
condition|(
name|factoryEl
operator|==
literal|null
operator|||
operator|!
name|factoryEl
operator|.
name|isJsonPrimitive
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Expecting value for factory in char filter factory builder in:"
operator|+
name|analyzerName
argument_list|)
throw|;
block|}
name|String
name|factoryName
init|=
name|factoryEl
operator|.
name|getAsString
argument_list|()
decl_stmt|;
name|factoryName
operator|=
name|factoryName
operator|.
name|replaceAll
argument_list|(
literal|"oala."
argument_list|,
literal|"org.apache.lucene.analysis."
argument_list|)
expr_stmt|;
name|JsonElement
name|paramsEl
init|=
operator|(
operator|(
name|JsonObject
operator|)
name|filterMap
operator|)
operator|.
name|get
argument_list|(
name|PARAMS
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
init|=
name|mapify
argument_list|(
name|paramsEl
argument_list|)
decl_stmt|;
name|String
name|spiName
init|=
literal|""
decl_stmt|;
for|for
control|(
name|String
name|s
range|:
name|CharFilterFactory
operator|.
name|availableCharFilters
argument_list|()
control|)
block|{
name|Class
name|clazz
init|=
name|CharFilterFactory
operator|.
name|lookupClass
argument_list|(
name|s
argument_list|)
decl_stmt|;
if|if
condition|(
name|clazz
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|factoryName
argument_list|)
condition|)
block|{
name|spiName
operator|=
name|s
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|spiName
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"A SPI class of type org.apache.lucene.analysis.util.CharFilterFactory with name"
operator|+
literal|"'"
operator|+
name|factoryName
operator|+
literal|"' does not exist."
argument_list|)
throw|;
block|}
try|try
block|{
name|CharFilterFactory
name|charFilterFactory
init|=
name|CharFilterFactory
operator|.
name|forName
argument_list|(
name|spiName
argument_list|,
name|params
argument_list|)
decl_stmt|;
if|if
condition|(
name|charFilterFactory
operator|instanceof
name|ResourceLoaderAware
condition|)
block|{
operator|(
operator|(
name|ResourceLoaderAware
operator|)
name|charFilterFactory
operator|)
operator|.
name|inform
argument_list|(
operator|new
name|ClasspathResourceLoader
argument_list|(
name|AnalyzerDeserializer
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|ret
operator|.
name|add
argument_list|(
name|charFilterFactory
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"While trying to load "
operator|+
name|analyzerName
operator|+
literal|": "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|ret
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
operator|new
name|CharFilterFactory
index|[
literal|0
index|]
return|;
block|}
return|return
name|ret
operator|.
name|toArray
argument_list|(
operator|new
name|CharFilterFactory
index|[
name|ret
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|TokenFilterFactory
index|[]
name|buildTokenFilterFactories
parameter_list|(
name|JsonElement
name|el
parameter_list|,
name|String
name|analyzerName
parameter_list|,
name|int
name|maxTokens
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|el
operator|==
literal|null
operator|||
name|el
operator|.
name|isJsonNull
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
operator|!
name|el
operator|.
name|isJsonArray
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Expecting array for tokenfilters, but got:"
operator|+
name|el
operator|.
name|toString
argument_list|()
operator|+
literal|" in "
operator|+
name|analyzerName
argument_list|)
throw|;
block|}
name|JsonArray
name|jsonArray
init|=
operator|(
name|JsonArray
operator|)
name|el
decl_stmt|;
name|List
argument_list|<
name|TokenFilterFactory
argument_list|>
name|ret
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|JsonElement
name|filterMap
range|:
name|jsonArray
control|)
block|{
if|if
condition|(
operator|!
operator|(
name|filterMap
operator|instanceof
name|JsonObject
operator|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Expecting a map with \"factory\" string and \"params\" map in token filter factory;"
operator|+
literal|" not: "
operator|+
name|filterMap
operator|.
name|toString
argument_list|()
operator|+
literal|" in "
operator|+
name|analyzerName
argument_list|)
throw|;
block|}
name|JsonElement
name|factoryEl
init|=
operator|(
operator|(
name|JsonObject
operator|)
name|filterMap
operator|)
operator|.
name|get
argument_list|(
name|FACTORY
argument_list|)
decl_stmt|;
if|if
condition|(
name|factoryEl
operator|==
literal|null
operator|||
operator|!
name|factoryEl
operator|.
name|isJsonPrimitive
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Expecting value for factory in token filter factory builder in "
operator|+
name|analyzerName
argument_list|)
throw|;
block|}
name|String
name|factoryName
init|=
name|factoryEl
operator|.
name|getAsString
argument_list|()
decl_stmt|;
name|factoryName
operator|=
name|factoryName
operator|.
name|startsWith
argument_list|(
literal|"oala."
argument_list|)
condition|?
name|factoryName
operator|.
name|replaceFirst
argument_list|(
literal|"oala."
argument_list|,
literal|"org.apache.lucene.analysis."
argument_list|)
else|:
name|factoryName
expr_stmt|;
name|JsonElement
name|paramsEl
init|=
operator|(
operator|(
name|JsonObject
operator|)
name|filterMap
operator|)
operator|.
name|get
argument_list|(
name|PARAMS
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
init|=
name|mapify
argument_list|(
name|paramsEl
argument_list|)
decl_stmt|;
name|String
name|spiName
init|=
literal|""
decl_stmt|;
for|for
control|(
name|String
name|s
range|:
name|TokenFilterFactory
operator|.
name|availableTokenFilters
argument_list|()
control|)
block|{
name|Class
name|clazz
init|=
name|TokenFilterFactory
operator|.
name|lookupClass
argument_list|(
name|s
argument_list|)
decl_stmt|;
if|if
condition|(
name|clazz
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|factoryName
argument_list|)
condition|)
block|{
name|spiName
operator|=
name|s
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|spiName
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"A SPI class of type org.apache.lucene.analysis.util.TokenFilterFactory with name"
operator|+
literal|"'"
operator|+
name|factoryName
operator|+
literal|"' does not exist."
argument_list|)
throw|;
block|}
try|try
block|{
name|TokenFilterFactory
name|tokenFilterFactory
init|=
name|TokenFilterFactory
operator|.
name|forName
argument_list|(
name|spiName
argument_list|,
name|params
argument_list|)
decl_stmt|;
if|if
condition|(
name|tokenFilterFactory
operator|instanceof
name|ResourceLoaderAware
condition|)
block|{
operator|(
operator|(
name|ResourceLoaderAware
operator|)
name|tokenFilterFactory
operator|)
operator|.
name|inform
argument_list|(
operator|new
name|ClasspathResourceLoader
argument_list|(
name|AnalyzerDeserializer
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|ret
operator|.
name|add
argument_list|(
name|tokenFilterFactory
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"While loading "
operator|+
name|analyzerName
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|maxTokens
operator|>
operator|-
literal|1
condition|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|m
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|m
operator|.
name|put
argument_list|(
literal|"maxTokenCount"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|maxTokens
argument_list|)
argument_list|)
expr_stmt|;
name|ret
operator|.
name|add
argument_list|(
operator|new
name|LimitTokenCountFilterFactory
argument_list|(
name|m
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ret
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
operator|new
name|TokenFilterFactory
index|[
literal|0
index|]
return|;
block|}
return|return
name|ret
operator|.
name|toArray
argument_list|(
operator|new
name|TokenFilterFactory
index|[
name|ret
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|mapify
parameter_list|(
name|JsonElement
name|paramsEl
parameter_list|)
block|{
if|if
condition|(
name|paramsEl
operator|==
literal|null
operator|||
name|paramsEl
operator|.
name|isJsonNull
argument_list|()
condition|)
block|{
return|return
name|Collections
operator|.
name|EMPTY_MAP
return|;
block|}
if|if
condition|(
operator|!
name|paramsEl
operator|.
name|isJsonObject
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Expecting map, not: "
operator|+
name|paramsEl
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|JsonElement
argument_list|>
name|e
range|:
operator|(
operator|(
name|JsonObject
operator|)
name|paramsEl
operator|)
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|JsonElement
name|value
init|=
name|e
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|value
operator|.
name|isJsonPrimitive
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Expecting parameter to have primitive value: "
operator|+
name|value
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
name|String
name|v
init|=
name|e
operator|.
name|getValue
argument_list|()
operator|.
name|getAsString
argument_list|()
decl_stmt|;
name|params
operator|.
name|put
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|,
name|v
argument_list|)
expr_stmt|;
block|}
return|return
name|params
return|;
block|}
comment|/**      * Plagiarized verbatim from Solr!      */
specifier|private
specifier|static
class|class
name|MyTokenizerChain
extends|extends
name|Analyzer
block|{
specifier|final
specifier|private
name|CharFilterFactory
index|[]
name|charFilters
decl_stmt|;
specifier|final
specifier|private
name|TokenizerFactory
name|tokenizer
decl_stmt|;
specifier|final
specifier|private
name|TokenFilterFactory
index|[]
name|filters
decl_stmt|;
specifier|public
name|MyTokenizerChain
parameter_list|(
name|TokenizerFactory
name|tokenizer
parameter_list|,
name|TokenFilterFactory
index|[]
name|filters
parameter_list|)
block|{
name|this
argument_list|(
literal|null
argument_list|,
name|tokenizer
argument_list|,
name|filters
argument_list|)
expr_stmt|;
block|}
specifier|public
name|MyTokenizerChain
parameter_list|(
name|CharFilterFactory
index|[]
name|charFilters
parameter_list|,
name|TokenizerFactory
name|tokenizer
parameter_list|,
name|TokenFilterFactory
index|[]
name|filters
parameter_list|)
block|{
name|this
operator|.
name|charFilters
operator|=
name|charFilters
expr_stmt|;
name|this
operator|.
name|tokenizer
operator|=
name|tokenizer
expr_stmt|;
name|this
operator|.
name|filters
operator|=
name|filters
expr_stmt|;
block|}
specifier|public
name|CharFilterFactory
index|[]
name|getCharFilterFactories
parameter_list|()
block|{
return|return
name|charFilters
return|;
block|}
specifier|public
name|TokenizerFactory
name|getTokenizerFactory
parameter_list|()
block|{
return|return
name|tokenizer
return|;
block|}
specifier|public
name|TokenFilterFactory
index|[]
name|getTokenFilterFactories
parameter_list|()
block|{
return|return
name|filters
return|;
block|}
annotation|@
name|Override
specifier|public
name|Reader
name|initReader
parameter_list|(
name|String
name|fieldName
parameter_list|,
name|Reader
name|reader
parameter_list|)
block|{
if|if
condition|(
name|charFilters
operator|!=
literal|null
operator|&&
name|charFilters
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|Reader
name|cs
init|=
name|reader
decl_stmt|;
for|for
control|(
name|CharFilterFactory
name|charFilter
range|:
name|charFilters
control|)
block|{
name|cs
operator|=
name|charFilter
operator|.
name|create
argument_list|(
name|cs
argument_list|)
expr_stmt|;
block|}
name|reader
operator|=
name|cs
expr_stmt|;
block|}
return|return
name|reader
return|;
block|}
annotation|@
name|Override
specifier|protected
name|TokenStreamComponents
name|createComponents
parameter_list|(
name|String
name|fieldName
parameter_list|)
block|{
name|Tokenizer
name|tk
init|=
name|tokenizer
operator|.
name|create
argument_list|()
decl_stmt|;
name|TokenStream
name|ts
init|=
name|tk
decl_stmt|;
for|for
control|(
name|TokenFilterFactory
name|filter
range|:
name|filters
control|)
block|{
name|ts
operator|=
name|filter
operator|.
name|create
argument_list|(
name|ts
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|TokenStreamComponents
argument_list|(
name|tk
argument_list|,
name|ts
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

