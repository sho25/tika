begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|eval
operator|.
name|db
package|;
end_package

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|PreparedStatement
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Types
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|config
operator|.
name|TikaConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|eval
operator|.
name|AbstractProfiler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|mime
operator|.
name|MediaType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|mime
operator|.
name|MimeType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|mime
operator|.
name|MimeTypeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|mime
operator|.
name|MimeTypes
import|;
end_import

begin_class
specifier|public
class|class
name|MimeBuffer
extends|extends
name|AbstractDBBuffer
block|{
specifier|private
specifier|final
name|PreparedStatement
name|st
decl_stmt|;
specifier|private
specifier|final
name|TikaConfig
name|config
decl_stmt|;
specifier|private
specifier|final
name|Connection
name|connection
decl_stmt|;
specifier|public
name|MimeBuffer
parameter_list|(
name|Connection
name|connection
parameter_list|,
name|TikaConfig
name|config
parameter_list|)
throws|throws
name|SQLException
block|{
name|st
operator|=
name|connection
operator|.
name|prepareStatement
argument_list|(
literal|"insert into "
operator|+
name|AbstractProfiler
operator|.
name|MIME_TABLE
operator|.
name|getName
argument_list|()
operator|+
literal|"( "
operator|+
name|Cols
operator|.
name|MIME_TYPE_ID
operator|.
name|name
argument_list|()
operator|+
literal|", "
operator|+
name|Cols
operator|.
name|MIME_STRING
operator|+
literal|", "
operator|+
name|Cols
operator|.
name|FILE_EXTENSION
operator|+
literal|") values (?,?,?);"
argument_list|)
expr_stmt|;
name|this
operator|.
name|config
operator|=
name|config
expr_stmt|;
name|this
operator|.
name|connection
operator|=
name|connection
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|int
name|id
parameter_list|,
name|String
name|value
parameter_list|)
throws|throws
name|RuntimeException
block|{
try|try
block|{
name|st
operator|.
name|clearParameters
argument_list|()
expr_stmt|;
name|st
operator|.
name|setInt
argument_list|(
literal|1
argument_list|,
name|id
argument_list|)
expr_stmt|;
name|st
operator|.
name|setString
argument_list|(
literal|2
argument_list|,
name|value
argument_list|)
expr_stmt|;
try|try
block|{
name|String
name|ext
init|=
name|MimeUtil
operator|.
name|getExtension
argument_list|(
name|value
argument_list|,
name|config
argument_list|)
decl_stmt|;
if|if
condition|(
name|ext
operator|==
literal|null
operator|||
name|ext
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
name|st
operator|.
name|setNull
argument_list|(
literal|3
argument_list|,
name|Types
operator|.
name|VARCHAR
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|st
operator|.
name|setString
argument_list|(
literal|3
argument_list|,
name|ext
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|MimeTypeException
name|e
parameter_list|)
block|{
name|st
operator|.
name|setNull
argument_list|(
literal|3
argument_list|,
name|Types
operator|.
name|VARCHAR
argument_list|)
expr_stmt|;
block|}
name|st
operator|.
name|execute
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|SQLException
block|{
name|st
operator|.
name|close
argument_list|()
expr_stmt|;
name|connection
operator|.
name|commit
argument_list|()
expr_stmt|;
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
specifier|private
specifier|static
class|class
name|MimeUtil
block|{
comment|//TODO: see if MimeType now works for these
specifier|private
specifier|static
specifier|final
name|String
name|APPLICATION
init|=
literal|"application"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|TEXT
init|=
literal|"text"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|HTML
init|=
literal|"html"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|XML
init|=
literal|"xml"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|XHTML_XML
init|=
literal|"xhtml+xml"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|CSS
init|=
literal|"css"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|CSV
init|=
literal|"csv"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|PLAIN
init|=
literal|"plain"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|EMPTY_STRING
init|=
literal|""
decl_stmt|;
comment|/**          * Utility method to convert from a string value representing a content type          * (e.g. "application/pdf") into the most common extension for that file type          * (e.g. "pdf").          *<p>          * This will has special handling for texty filetypes whose MimeTypes          * don't currently return anything for {@link org.apache.tika.mime.MimeType#getExtension};          *          * @param contentType string representing a content type, for example: "application/pdf"          * @param config      config from which to get MimeRepository          * @return extension or empty string          * @throws org.apache.tika.mime.MimeTypeException thrown if MimeTypes can't parse the contentType          */
specifier|public
specifier|static
name|String
name|getExtension
parameter_list|(
name|String
name|contentType
parameter_list|,
name|TikaConfig
name|config
parameter_list|)
throws|throws
name|MimeTypeException
block|{
name|MimeTypes
name|types
init|=
name|config
operator|.
name|getMimeRepository
argument_list|()
decl_stmt|;
name|MimeType
name|mime
init|=
name|types
operator|.
name|forName
argument_list|(
name|contentType
argument_list|)
decl_stmt|;
return|return
name|getExtension
argument_list|(
name|mime
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|String
name|getExtension
parameter_list|(
name|MimeType
name|mime
parameter_list|)
block|{
name|String
name|ext
init|=
name|mime
operator|.
name|getExtension
argument_list|()
decl_stmt|;
if|if
condition|(
name|ext
operator|.
name|startsWith
argument_list|(
literal|"."
argument_list|)
condition|)
block|{
name|ext
operator|=
name|ext
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
comment|//special handling for text/html/xml
if|if
condition|(
name|ext
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
name|ext
operator|=
name|tryTextyTypes
argument_list|(
name|mime
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|ext
return|;
block|}
specifier|private
specifier|static
name|String
name|tryTextyTypes
parameter_list|(
name|MediaType
name|mediaType
parameter_list|)
block|{
name|String
name|type
init|=
name|mediaType
operator|.
name|getType
argument_list|()
decl_stmt|;
name|String
name|subtype
init|=
name|mediaType
operator|.
name|getSubtype
argument_list|()
decl_stmt|;
if|if
condition|(
name|type
operator|.
name|equals
argument_list|(
name|TEXT
argument_list|)
condition|)
block|{
if|if
condition|(
name|subtype
operator|.
name|equals
argument_list|(
name|HTML
argument_list|)
condition|)
block|{
return|return
name|HTML
return|;
block|}
elseif|else
if|if
condition|(
name|subtype
operator|.
name|equals
argument_list|(
name|PLAIN
argument_list|)
condition|)
block|{
return|return
literal|"txt"
return|;
block|}
elseif|else
if|if
condition|(
name|subtype
operator|.
name|equals
argument_list|(
name|CSS
argument_list|)
condition|)
block|{
return|return
name|CSS
return|;
block|}
elseif|else
if|if
condition|(
name|subtype
operator|.
name|equals
argument_list|(
name|CSV
argument_list|)
condition|)
block|{
return|return
name|CSV
return|;
block|}
block|}
elseif|else
if|if
condition|(
name|type
operator|.
name|equals
argument_list|(
name|APPLICATION
argument_list|)
condition|)
block|{
if|if
condition|(
name|subtype
operator|.
name|equals
argument_list|(
name|XML
argument_list|)
condition|)
block|{
return|return
name|XML
return|;
block|}
elseif|else
if|if
condition|(
name|subtype
operator|.
name|equals
argument_list|(
name|XHTML_XML
argument_list|)
condition|)
block|{
return|return
literal|"html"
return|;
block|}
block|}
return|return
name|EMPTY_STRING
return|;
block|}
block|}
block|}
end_class

end_unit

