begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|eval
operator|.
name|tokens
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_class
specifier|public
class|class
name|LangModel
block|{
specifier|public
specifier|static
name|LangModel
name|EMPTY_MODEL
init|=
operator|new
name|LangModel
argument_list|(
operator|-
literal|1
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|long
name|totalTokens
decl_stmt|;
specifier|private
specifier|final
name|double
name|unseenPercentage
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Double
argument_list|>
name|percentages
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|counts
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|public
name|LangModel
parameter_list|(
name|long
name|totalTokens
parameter_list|)
block|{
name|this
operator|.
name|totalTokens
operator|=
name|totalTokens
expr_stmt|;
name|this
operator|.
name|unseenPercentage
operator|=
operator|(
name|double
operator|)
literal|1
operator|/
operator|(
name|double
operator|)
name|totalTokens
expr_stmt|;
block|}
specifier|public
name|boolean
name|contains
parameter_list|(
name|String
name|token
parameter_list|)
block|{
return|return
operator|(
name|percentages
operator|.
name|containsKey
argument_list|(
name|token
argument_list|)
operator|)
return|;
block|}
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|getTokens
parameter_list|()
block|{
return|return
name|percentages
operator|.
name|keySet
argument_list|()
return|;
block|}
specifier|public
name|double
name|getProbability
parameter_list|(
name|String
name|token
parameter_list|)
block|{
name|Double
name|p
init|=
name|percentages
operator|.
name|get
argument_list|(
name|token
argument_list|)
decl_stmt|;
if|if
condition|(
name|p
operator|!=
literal|null
condition|)
block|{
return|return
name|p
return|;
block|}
else|else
block|{
return|return
name|unseenPercentage
return|;
block|}
block|}
specifier|public
name|void
name|add
parameter_list|(
name|String
name|t
parameter_list|,
name|long
name|tf
parameter_list|)
block|{
name|double
name|p
init|=
operator|(
name|double
operator|)
name|tf
operator|/
operator|(
name|double
operator|)
name|totalTokens
decl_stmt|;
name|percentages
operator|.
name|put
argument_list|(
name|t
argument_list|,
name|p
argument_list|)
expr_stmt|;
name|counts
operator|.
name|put
argument_list|(
name|t
argument_list|,
name|tf
argument_list|)
expr_stmt|;
block|}
specifier|public
name|double
name|getUnseenProbability
parameter_list|()
block|{
return|return
name|unseenPercentage
return|;
block|}
specifier|public
name|long
name|getCount
parameter_list|(
name|String
name|token
parameter_list|)
block|{
name|Long
name|cnt
init|=
name|counts
operator|.
name|get
argument_list|(
name|token
argument_list|)
decl_stmt|;
if|if
condition|(
name|cnt
operator|==
literal|null
condition|)
block|{
return|return
literal|0
return|;
block|}
else|else
block|{
return|return
name|cnt
return|;
block|}
block|}
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|getCounts
parameter_list|()
block|{
return|return
name|counts
return|;
block|}
block|}
end_class

end_unit

