begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|eval
operator|.
name|reports
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|ResultSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|ResultSetMetaData
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Statement
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Types
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|ss
operator|.
name|usermodel
operator|.
name|Cell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|ss
operator|.
name|usermodel
operator|.
name|CellStyle
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|ss
operator|.
name|usermodel
operator|.
name|Row
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|ss
operator|.
name|usermodel
operator|.
name|VerticalAlignment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|xssf
operator|.
name|streaming
operator|.
name|SXSSFSheet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|xssf
operator|.
name|streaming
operator|.
name|SXSSFWorkbook
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|xssf
operator|.
name|usermodel
operator|.
name|XSSFWorkbook
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * This class represents a single report.  */
end_comment

begin_class
specifier|public
class|class
name|Report
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|Report
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|String
name|NULL_VALUE
init|=
literal|""
decl_stmt|;
comment|//TODO: make this configurable!!!
name|Map
argument_list|<
name|String
argument_list|,
name|XSLXCellFormatter
argument_list|>
name|cellFormatters
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
name|XLSXNumFormatter
name|defaultDoubleFormatter
init|=
operator|new
name|XLSXNumFormatter
argument_list|(
literal|"0.000"
argument_list|)
decl_stmt|;
specifier|private
name|XLSXNumFormatter
name|defaultIntegerFormatter
init|=
operator|new
name|XLSXNumFormatter
argument_list|(
literal|"0"
argument_list|)
decl_stmt|;
specifier|private
name|CellStyle
name|sqlCellStyle
decl_stmt|;
name|String
name|sql
decl_stmt|;
name|String
name|reportFilename
decl_stmt|;
name|boolean
name|includeSql
init|=
literal|true
decl_stmt|;
name|String
name|reportName
decl_stmt|;
specifier|public
name|void
name|writeReport
parameter_list|(
name|Connection
name|c
parameter_list|,
name|Path
name|reportsRoot
parameter_list|)
throws|throws
name|SQLException
throws|,
name|IOException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Writing report: {} to {}"
argument_list|,
name|reportName
argument_list|,
name|reportFilename
argument_list|)
expr_stmt|;
name|dumpXLSX
argument_list|(
name|c
argument_list|,
name|reportsRoot
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|dumpXLSX
parameter_list|(
name|Connection
name|c
parameter_list|,
name|Path
name|reportsRoot
parameter_list|)
throws|throws
name|IOException
throws|,
name|SQLException
block|{
name|Statement
name|st
init|=
name|c
operator|.
name|createStatement
argument_list|()
decl_stmt|;
name|Path
name|out
init|=
name|reportsRoot
operator|.
name|resolve
argument_list|(
name|reportFilename
argument_list|)
decl_stmt|;
name|Files
operator|.
name|createDirectories
argument_list|(
name|out
operator|.
name|getParent
argument_list|()
argument_list|)
expr_stmt|;
name|SXSSFWorkbook
name|wb
init|=
operator|new
name|SXSSFWorkbook
argument_list|(
operator|new
name|XSSFWorkbook
argument_list|()
argument_list|,
literal|100
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|wb
operator|.
name|setCompressTempFiles
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|defaultIntegerFormatter
operator|.
name|reset
argument_list|(
name|wb
operator|.
name|getXSSFWorkbook
argument_list|()
argument_list|)
expr_stmt|;
name|defaultDoubleFormatter
operator|.
name|reset
argument_list|(
name|wb
operator|.
name|getXSSFWorkbook
argument_list|()
argument_list|)
expr_stmt|;
name|sqlCellStyle
operator|=
name|wb
operator|.
name|createCellStyle
argument_list|()
expr_stmt|;
name|sqlCellStyle
operator|.
name|setVerticalAlignment
argument_list|(
name|VerticalAlignment
operator|.
name|TOP
argument_list|)
expr_stmt|;
name|sqlCellStyle
operator|.
name|setWrapText
argument_list|(
literal|true
argument_list|)
expr_stmt|;
try|try
block|{
name|dumpReportToWorkbook
argument_list|(
name|st
argument_list|,
name|wb
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
try|try
init|(
name|OutputStream
name|os
init|=
name|Files
operator|.
name|newOutputStream
argument_list|(
name|out
argument_list|)
init|)
block|{
name|wb
operator|.
name|write
argument_list|(
name|os
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|wb
operator|.
name|dispose
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|dumpReportToWorkbook
parameter_list|(
name|Statement
name|st
parameter_list|,
name|SXSSFWorkbook
name|wb
parameter_list|)
throws|throws
name|IOException
throws|,
name|SQLException
block|{
name|ResultSet
name|rs
init|=
name|st
operator|.
name|executeQuery
argument_list|(
name|sql
argument_list|)
decl_stmt|;
name|SXSSFSheet
name|sheet
init|=
name|wb
operator|.
name|createSheet
argument_list|(
literal|"tika-eval Report"
argument_list|)
decl_stmt|;
name|sheet
operator|.
name|trackColumnForAutoSizing
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|int
name|rowCount
init|=
literal|0
decl_stmt|;
name|ResultSetMetaData
name|meta
init|=
name|rs
operator|.
name|getMetaData
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|colNames
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|Row
name|xssfRow
init|=
name|sheet
operator|.
name|createRow
argument_list|(
name|rowCount
operator|++
argument_list|)
decl_stmt|;
comment|//write headers and cache them to check against styles
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
name|meta
operator|.
name|getColumnCount
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Cell
name|cell
init|=
name|xssfRow
operator|.
name|createCell
argument_list|(
name|i
operator|-
literal|1
argument_list|)
decl_stmt|;
name|cell
operator|.
name|setCellValue
argument_list|(
name|meta
operator|.
name|getColumnLabel
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|colNames
operator|.
name|add
argument_list|(
name|meta
operator|.
name|getColumnLabel
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|ResultSetMetaData
name|resultSetMetaData
init|=
name|rs
operator|.
name|getMetaData
argument_list|()
decl_stmt|;
while|while
condition|(
name|rs
operator|.
name|next
argument_list|()
condition|)
block|{
name|xssfRow
operator|=
name|sheet
operator|.
name|createRow
argument_list|(
name|rowCount
operator|++
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
name|meta
operator|.
name|getColumnCount
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Cell
name|cell
init|=
name|xssfRow
operator|.
name|createCell
argument_list|(
name|i
operator|-
literal|1
argument_list|)
decl_stmt|;
name|XSLXCellFormatter
name|formatter
init|=
name|cellFormatters
operator|.
name|get
argument_list|(
name|meta
operator|.
name|getColumnLabel
argument_list|(
name|i
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|formatter
operator|==
literal|null
condition|)
block|{
name|formatter
operator|=
name|getDefaultFormatter
argument_list|(
name|resultSetMetaData
operator|.
name|getColumnType
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|formatter
operator|!=
literal|null
condition|)
block|{
name|formatter
operator|.
name|applyStyleAndValue
argument_list|(
name|i
argument_list|,
name|rs
argument_list|,
name|cell
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|writeCell
argument_list|(
name|meta
argument_list|,
name|i
argument_list|,
name|rs
argument_list|,
name|cell
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|sheet
operator|.
name|autoSizeColumn
argument_list|(
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|includeSql
condition|)
block|{
return|return;
block|}
name|SXSSFSheet
name|sqlSheet
init|=
name|wb
operator|.
name|createSheet
argument_list|(
literal|"tika-eval SQL"
argument_list|)
decl_stmt|;
name|sqlSheet
operator|.
name|setColumnWidth
argument_list|(
literal|0
argument_list|,
literal|100
operator|*
literal|250
argument_list|)
expr_stmt|;
name|Row
name|sqlRow
init|=
name|sqlSheet
operator|.
name|createRow
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|short
name|height
init|=
literal|5000
decl_stmt|;
name|sqlRow
operator|.
name|setHeight
argument_list|(
name|height
argument_list|)
expr_stmt|;
name|Cell
name|cell
init|=
name|sqlRow
operator|.
name|createCell
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|cell
operator|.
name|setCellStyle
argument_list|(
name|sqlCellStyle
argument_list|)
expr_stmt|;
name|cell
operator|.
name|setCellValue
argument_list|(
name|sql
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
comment|//.replaceAll("[\r\n]+", "\r\n"));
block|}
specifier|private
name|XSLXCellFormatter
name|getDefaultFormatter
parameter_list|(
name|int
name|columnType
parameter_list|)
block|{
switch|switch
condition|(
name|columnType
condition|)
block|{
case|case
name|Types
operator|.
name|INTEGER
case|:
return|return
name|defaultIntegerFormatter
return|;
case|case
name|Types
operator|.
name|DOUBLE
case|:
case|case
name|Types
operator|.
name|FLOAT
case|:
case|case
name|Types
operator|.
name|DECIMAL
case|:
return|return
name|defaultDoubleFormatter
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
specifier|private
name|void
name|writeCell
parameter_list|(
name|ResultSetMetaData
name|meta
parameter_list|,
name|int
name|colIndex
parameter_list|,
name|ResultSet
name|rs
parameter_list|,
name|Cell
name|cell
parameter_list|)
throws|throws
name|SQLException
block|{
switch|switch
condition|(
name|meta
operator|.
name|getColumnType
argument_list|(
name|colIndex
argument_list|)
condition|)
block|{
comment|//fall through on numerics
case|case
name|Types
operator|.
name|BIGINT
case|:
case|case
name|Types
operator|.
name|SMALLINT
case|:
case|case
name|Types
operator|.
name|INTEGER
case|:
case|case
name|Types
operator|.
name|DOUBLE
case|:
case|case
name|Types
operator|.
name|FLOAT
case|:
case|case
name|Types
operator|.
name|DECIMAL
case|:
case|case
name|Types
operator|.
name|NUMERIC
case|:
name|double
name|dbl
init|=
name|rs
operator|.
name|getDouble
argument_list|(
name|colIndex
argument_list|)
decl_stmt|;
if|if
condition|(
name|rs
operator|.
name|wasNull
argument_list|()
condition|)
block|{
name|cell
operator|.
name|setCellValue
argument_list|(
name|NULL_VALUE
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|cell
operator|.
name|setCellValue
argument_list|(
name|dbl
argument_list|)
expr_stmt|;
block|}
break|break;
comment|//fall through strings
case|case
name|Types
operator|.
name|BOOLEAN
case|:
case|case
name|Types
operator|.
name|CHAR
case|:
case|case
name|Types
operator|.
name|VARCHAR
case|:
case|case
name|Types
operator|.
name|LONGNVARCHAR
case|:
name|String
name|val
init|=
name|rs
operator|.
name|getString
argument_list|(
name|colIndex
argument_list|)
decl_stmt|;
if|if
condition|(
name|rs
operator|.
name|wasNull
argument_list|()
condition|)
block|{
name|cell
operator|.
name|setCellValue
argument_list|(
name|NULL_VALUE
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|cell
operator|.
name|setCellValue
argument_list|(
name|val
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
if|if
condition|(
name|rs
operator|.
name|wasNull
argument_list|()
condition|)
block|{
name|cell
operator|.
name|setCellValue
argument_list|(
name|NULL_VALUE
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|cell
operator|.
name|setCellValue
argument_list|(
name|rs
operator|.
name|getString
argument_list|(
name|colIndex
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|warn
argument_list|(
literal|"Couldn't find type for: {}. Defaulting to String"
argument_list|,
name|meta
operator|.
name|getColumnType
argument_list|(
name|colIndex
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

