begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|eval
operator|.
name|tokens
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|mutable
operator|.
name|MutableInt
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|PriorityQueue
import|;
end_import

begin_comment
comment|/**  * Computes some corpus contrast statistics.  *  * Not thread safe.  */
end_comment

begin_class
specifier|public
class|class
name|TokenContraster
block|{
specifier|private
name|TokenStatistics
name|tokenStatisticsA
decl_stmt|;
specifier|private
name|TokenStatistics
name|tokenStatisticsB
decl_stmt|;
specifier|private
name|TokenCountPriorityQueue
name|uniqA
decl_stmt|;
specifier|private
name|TokenCountPriorityQueue
name|uniqB
decl_stmt|;
specifier|private
name|TokenCountDiffQueue
name|moreA
decl_stmt|;
specifier|private
name|TokenCountDiffQueue
name|moreB
decl_stmt|;
specifier|private
name|int
name|topN
init|=
literal|10
decl_stmt|;
specifier|private
name|int
name|diceCoefficientNum
init|=
literal|0
decl_stmt|;
specifier|private
name|int
name|overlapNum
init|=
literal|0
decl_stmt|;
specifier|private
name|double
name|diceCoefficient
init|=
literal|0.0d
decl_stmt|;
specifier|private
name|double
name|overlap
init|=
literal|0.0
decl_stmt|;
specifier|public
name|ContrastStatistics
name|calculateContrastStatistics
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|MutableInt
argument_list|>
name|mapA
parameter_list|,
name|TokenStatistics
name|tokenStatisticsA
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|MutableInt
argument_list|>
name|mapB
parameter_list|,
name|TokenStatistics
name|tokenStatisticsB
parameter_list|)
block|{
name|reset
argument_list|()
expr_stmt|;
name|this
operator|.
name|tokenStatisticsA
operator|=
name|tokenStatisticsA
expr_stmt|;
name|this
operator|.
name|tokenStatisticsB
operator|=
name|tokenStatisticsB
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|MutableInt
argument_list|>
name|e
range|:
name|mapA
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|MutableInt
name|bVal
init|=
name|mapB
operator|.
name|get
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|b
init|=
operator|(
name|bVal
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|bVal
operator|.
name|intValue
argument_list|()
decl_stmt|;
name|add
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|,
name|e
operator|.
name|getValue
argument_list|()
operator|.
name|intValue
argument_list|()
argument_list|,
name|b
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|MutableInt
argument_list|>
name|e
range|:
name|mapB
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|mapA
operator|.
name|containsKey
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|add
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|,
literal|0
argument_list|,
name|e
operator|.
name|getValue
argument_list|()
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|finishComputing
argument_list|()
expr_stmt|;
name|ContrastStatistics
name|contrastStatistics
init|=
operator|new
name|ContrastStatistics
argument_list|()
decl_stmt|;
name|contrastStatistics
operator|.
name|setDiceCoefficient
argument_list|(
name|diceCoefficient
argument_list|)
expr_stmt|;
name|contrastStatistics
operator|.
name|setOverlap
argument_list|(
name|overlap
argument_list|)
expr_stmt|;
name|contrastStatistics
operator|.
name|setTopNUniqueA
argument_list|(
name|uniqA
operator|.
name|getArray
argument_list|()
argument_list|)
expr_stmt|;
name|contrastStatistics
operator|.
name|setTopNUniqueB
argument_list|(
name|uniqB
operator|.
name|getArray
argument_list|()
argument_list|)
expr_stmt|;
name|contrastStatistics
operator|.
name|setTopNMoreA
argument_list|(
name|moreA
operator|.
name|getArray
argument_list|()
argument_list|)
expr_stmt|;
name|contrastStatistics
operator|.
name|setTopNMoreB
argument_list|(
name|moreB
operator|.
name|getArray
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|contrastStatistics
return|;
block|}
specifier|private
name|void
name|reset
parameter_list|()
block|{
name|this
operator|.
name|uniqA
operator|=
operator|new
name|TokenCountPriorityQueue
argument_list|(
name|topN
argument_list|)
expr_stmt|;
name|this
operator|.
name|uniqB
operator|=
operator|new
name|TokenCountPriorityQueue
argument_list|(
name|topN
argument_list|)
expr_stmt|;
name|this
operator|.
name|moreA
operator|=
operator|new
name|TokenCountDiffQueue
argument_list|(
name|topN
argument_list|)
expr_stmt|;
name|this
operator|.
name|moreB
operator|=
operator|new
name|TokenCountDiffQueue
argument_list|(
name|topN
argument_list|)
expr_stmt|;
name|diceCoefficientNum
operator|=
literal|0
expr_stmt|;
name|overlapNum
operator|=
literal|0
expr_stmt|;
name|diceCoefficient
operator|=
literal|0.0d
expr_stmt|;
name|overlap
operator|=
literal|0.0
expr_stmt|;
block|}
specifier|private
name|void
name|add
parameter_list|(
name|String
name|token
parameter_list|,
name|int
name|tokenCountA
parameter_list|,
name|int
name|tokenCountB
parameter_list|)
block|{
if|if
condition|(
name|tokenCountA
operator|>
literal|0
operator|&&
name|tokenCountB
operator|>
literal|0
condition|)
block|{
name|diceCoefficientNum
operator|+=
literal|2
expr_stmt|;
name|overlapNum
operator|+=
literal|2
operator|*
name|Math
operator|.
name|min
argument_list|(
name|tokenCountA
argument_list|,
name|tokenCountB
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|tokenCountA
operator|==
literal|0L
operator|&&
name|tokenCountB
operator|>
literal|0L
condition|)
block|{
name|addToken
argument_list|(
name|token
argument_list|,
name|tokenCountB
argument_list|,
name|uniqB
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|tokenCountB
operator|==
literal|0L
operator|&&
name|tokenCountA
operator|>
literal|0L
condition|)
block|{
name|addToken
argument_list|(
name|token
argument_list|,
name|tokenCountA
argument_list|,
name|uniqA
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|tokenCountA
operator|>
name|tokenCountB
condition|)
block|{
name|addTokenDiff
argument_list|(
name|token
argument_list|,
name|tokenCountA
argument_list|,
name|tokenCountA
operator|-
name|tokenCountB
argument_list|,
name|moreA
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|tokenCountB
operator|>
name|tokenCountA
condition|)
block|{
name|addTokenDiff
argument_list|(
name|token
argument_list|,
name|tokenCountB
argument_list|,
name|tokenCountB
operator|-
name|tokenCountA
argument_list|,
name|moreB
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|finishComputing
parameter_list|()
block|{
name|long
name|sumUniqTokens
init|=
name|tokenStatisticsA
operator|.
name|getTotalUniqueTokens
argument_list|()
operator|+
name|tokenStatisticsB
operator|.
name|getTotalUniqueTokens
argument_list|()
decl_stmt|;
name|diceCoefficient
operator|=
operator|(
name|double
operator|)
name|diceCoefficientNum
operator|/
operator|(
name|double
operator|)
name|sumUniqTokens
expr_stmt|;
name|overlap
operator|=
operator|(
name|float
operator|)
name|overlapNum
operator|/
call|(
name|double
call|)
argument_list|(
name|tokenStatisticsA
operator|.
name|getTotalTokens
argument_list|()
operator|+
name|tokenStatisticsB
operator|.
name|getTotalTokens
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|addTokenDiff
parameter_list|(
name|String
name|token
parameter_list|,
name|int
name|tokenCount
parameter_list|,
name|int
name|diff
parameter_list|,
name|TokenCountDiffQueue
name|queue
parameter_list|)
block|{
if|if
condition|(
name|queue
operator|.
name|top
argument_list|()
operator|==
literal|null
operator|||
name|queue
operator|.
name|size
argument_list|()
operator|<
name|topN
operator|||
name|diff
operator|>=
name|queue
operator|.
name|top
argument_list|()
operator|.
name|diff
condition|)
block|{
name|queue
operator|.
name|insertWithOverflow
argument_list|(
operator|new
name|TokenCountDiff
argument_list|(
name|token
argument_list|,
name|diff
argument_list|,
name|tokenCount
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|addToken
parameter_list|(
name|String
name|token
parameter_list|,
name|int
name|tokenCount
parameter_list|,
name|TokenCountPriorityQueue
name|queue
parameter_list|)
block|{
if|if
condition|(
name|queue
operator|.
name|top
argument_list|()
operator|==
literal|null
operator|||
name|queue
operator|.
name|size
argument_list|()
operator|<
name|topN
operator|||
name|tokenCount
operator|>=
name|queue
operator|.
name|top
argument_list|()
operator|.
name|getValue
argument_list|()
condition|)
block|{
name|queue
operator|.
name|insertWithOverflow
argument_list|(
operator|new
name|TokenIntPair
argument_list|(
name|token
argument_list|,
name|tokenCount
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
class|class
name|TokenCountDiffQueue
extends|extends
name|PriorityQueue
argument_list|<
name|TokenCountDiff
argument_list|>
block|{
name|TokenCountDiffQueue
parameter_list|(
name|int
name|maxSize
parameter_list|)
block|{
name|super
argument_list|(
name|maxSize
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|boolean
name|lessThan
parameter_list|(
name|TokenCountDiff
name|arg0
parameter_list|,
name|TokenCountDiff
name|arg1
parameter_list|)
block|{
if|if
condition|(
name|arg0
operator|.
name|diff
operator|<
name|arg1
operator|.
name|diff
condition|)
block|{
return|return
literal|true
return|;
block|}
elseif|else
if|if
condition|(
name|arg0
operator|.
name|diff
operator|>
name|arg1
operator|.
name|diff
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
name|arg1
operator|.
name|token
operator|.
name|compareTo
argument_list|(
name|arg0
operator|.
name|token
argument_list|)
operator|<
literal|0
return|;
block|}
specifier|public
name|TokenIntPair
index|[]
name|getArray
parameter_list|()
block|{
name|TokenIntPair
index|[]
name|topN
init|=
operator|new
name|TokenIntPair
index|[
name|size
argument_list|()
index|]
decl_stmt|;
comment|//now we reverse the queue
name|TokenCountDiff
name|token
init|=
name|pop
argument_list|()
decl_stmt|;
name|int
name|i
init|=
name|topN
operator|.
name|length
operator|-
literal|1
decl_stmt|;
while|while
condition|(
name|token
operator|!=
literal|null
operator|&&
name|i
operator|>
operator|-
literal|1
condition|)
block|{
name|topN
index|[
name|i
operator|--
index|]
operator|=
operator|new
name|TokenIntPair
argument_list|(
name|token
operator|.
name|token
argument_list|,
name|token
operator|.
name|diff
argument_list|)
expr_stmt|;
name|token
operator|=
name|pop
argument_list|()
expr_stmt|;
block|}
return|return
name|topN
return|;
block|}
block|}
specifier|private
class|class
name|TokenCountDiff
block|{
specifier|private
specifier|final
name|String
name|token
decl_stmt|;
specifier|private
specifier|final
name|int
name|diff
decl_stmt|;
specifier|private
specifier|final
name|int
name|count
decl_stmt|;
specifier|private
name|TokenCountDiff
parameter_list|(
name|String
name|token
parameter_list|,
name|int
name|diff
parameter_list|,
name|int
name|count
parameter_list|)
block|{
name|this
operator|.
name|token
operator|=
name|token
expr_stmt|;
name|this
operator|.
name|diff
operator|=
name|diff
expr_stmt|;
name|this
operator|.
name|count
operator|=
name|count
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

