begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|eval
operator|.
name|db
package|;
end_package

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|PreparedStatement
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLException
import|;
end_import

begin_class
specifier|public
class|class
name|DBBuffer
extends|extends
name|AbstractDBBuffer
block|{
specifier|private
specifier|final
name|PreparedStatement
name|st
decl_stmt|;
specifier|public
name|DBBuffer
parameter_list|(
name|Connection
name|connection
parameter_list|,
name|String
name|tableName
parameter_list|,
name|String
name|idColumnName
parameter_list|,
name|String
name|valueColumnName
parameter_list|)
throws|throws
name|SQLException
block|{
name|st
operator|=
name|connection
operator|.
name|prepareStatement
argument_list|(
literal|"insert into "
operator|+
name|tableName
operator|+
literal|"( "
operator|+
name|idColumnName
operator|+
literal|", "
operator|+
name|valueColumnName
operator|+
literal|") values (?,?);"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|int
name|id
parameter_list|,
name|String
name|value
parameter_list|)
throws|throws
name|RuntimeException
block|{
try|try
block|{
name|st
operator|.
name|clearParameters
argument_list|()
expr_stmt|;
name|st
operator|.
name|setInt
argument_list|(
literal|1
argument_list|,
name|id
argument_list|)
expr_stmt|;
name|st
operator|.
name|setString
argument_list|(
literal|2
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|st
operator|.
name|execute
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|SQLException
block|{
name|st
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

