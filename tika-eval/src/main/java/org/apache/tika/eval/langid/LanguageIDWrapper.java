begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|eval
operator|.
name|langid
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|opennlp
operator|.
name|tools
operator|.
name|langdetect
operator|.
name|LanguageDetectorModel
import|;
end_import

begin_import
import|import
name|opennlp
operator|.
name|tools
operator|.
name|util
operator|.
name|normalizer
operator|.
name|CharSequenceNormalizer
import|;
end_import

begin_import
import|import
name|opennlp
operator|.
name|tools
operator|.
name|util
operator|.
name|normalizer
operator|.
name|EmojiCharSequenceNormalizer
import|;
end_import

begin_import
import|import
name|opennlp
operator|.
name|tools
operator|.
name|util
operator|.
name|normalizer
operator|.
name|NumberCharSequenceNormalizer
import|;
end_import

begin_import
import|import
name|opennlp
operator|.
name|tools
operator|.
name|util
operator|.
name|normalizer
operator|.
name|ShrinkCharSequenceNormalizer
import|;
end_import

begin_import
import|import
name|opennlp
operator|.
name|tools
operator|.
name|util
operator|.
name|normalizer
operator|.
name|TwitterCharSequenceNormalizer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|eval
operator|.
name|textstats
operator|.
name|StringStatsCalculator
import|;
end_import

begin_comment
comment|/**  * The most efficient way to call this in a multithreaded environment  * is to call {@link LanguageIDWrapper#loadBuiltInModels()} before  * instantiating the  */
end_comment

begin_class
specifier|public
class|class
name|LanguageIDWrapper
implements|implements
name|StringStatsCalculator
argument_list|<
name|List
argument_list|<
name|Language
argument_list|>
argument_list|>
block|{
specifier|static
name|LanguageDetectorModel
name|LANG_MODEL
decl_stmt|;
specifier|static
name|int
name|MAX_TEXT_LENGTH
init|=
literal|50000
decl_stmt|;
specifier|public
specifier|static
specifier|synchronized
name|void
name|loadBuiltInModels
parameter_list|()
throws|throws
name|IOException
block|{
try|try
init|(
name|InputStream
name|is
init|=
name|LanguageIDWrapper
operator|.
name|class
operator|.
name|getResourceAsStream
argument_list|(
literal|"/opennlp/model_20190626.bin"
argument_list|)
init|)
block|{
name|LANG_MODEL
operator|=
operator|new
name|LanguageDetectorModel
argument_list|(
name|is
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
name|void
name|loadModels
parameter_list|(
name|Path
name|path
parameter_list|)
throws|throws
name|IOException
block|{
name|LANG_MODEL
operator|=
operator|new
name|LanguageDetectorModel
argument_list|(
name|path
operator|.
name|toFile
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|CharSequenceNormalizer
index|[]
name|getNormalizers
parameter_list|()
block|{
return|return
operator|new
name|CharSequenceNormalizer
index|[]
block|{
name|EmojiCharSequenceNormalizer
operator|.
name|getInstance
argument_list|()
block|,
name|TikaUrlCharSequenceNormalizer
operator|.
name|getInstance
argument_list|()
block|,
name|TwitterCharSequenceNormalizer
operator|.
name|getInstance
argument_list|()
block|,
name|NumberCharSequenceNormalizer
operator|.
name|getInstance
argument_list|()
block|,
name|ShrinkCharSequenceNormalizer
operator|.
name|getInstance
argument_list|()
block|}
return|;
block|}
specifier|private
specifier|final
name|opennlp
operator|.
name|tools
operator|.
name|langdetect
operator|.
name|LanguageDetector
name|detector
decl_stmt|;
specifier|public
name|LanguageIDWrapper
parameter_list|()
block|{
if|if
condition|(
name|LANG_MODEL
operator|==
literal|null
condition|)
block|{
try|try
block|{
name|loadBuiltInModels
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"couldn't load built in lang models"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
name|detector
operator|=
operator|new
name|ProbingLanguageDetector
argument_list|(
name|LANG_MODEL
argument_list|)
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|Language
argument_list|>
name|getProbabilities
parameter_list|(
name|String
name|s
parameter_list|)
block|{
name|opennlp
operator|.
name|tools
operator|.
name|langdetect
operator|.
name|Language
index|[]
name|detected
init|=
name|detector
operator|.
name|predictLanguages
argument_list|(
name|s
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Language
argument_list|>
name|ret
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|detected
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|ret
operator|.
name|add
argument_list|(
operator|new
name|Language
argument_list|(
name|detected
index|[
name|i
index|]
operator|.
name|getLang
argument_list|()
argument_list|,
name|detected
index|[
name|i
index|]
operator|.
name|getConfidence
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
specifier|public
name|String
index|[]
name|getSupportedLanguages
parameter_list|()
block|{
return|return
name|detector
operator|.
name|getSupportedLanguages
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|void
name|setMaxTextLength
parameter_list|(
name|int
name|maxTextLength
parameter_list|)
block|{
name|MAX_TEXT_LENGTH
operator|=
name|maxTextLength
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|Language
argument_list|>
name|calculate
parameter_list|(
name|String
name|txt
parameter_list|)
block|{
return|return
name|getProbabilities
argument_list|(
name|txt
argument_list|)
return|;
block|}
specifier|private
specifier|static
class|class
name|TikaUrlCharSequenceNormalizer
implements|implements
name|CharSequenceNormalizer
block|{
comment|//use this custom copy/paste of opennlo to avoid long, long hang with mail_regex
comment|//TIKA-2777
specifier|private
specifier|static
specifier|final
name|Pattern
name|URL_REGEX
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"https?://[-_.?&~;+=/#0-9A-Za-z]{10,10000}"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Pattern
name|MAIL_REGEX
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"[-_.0-9A-Za-z]{1,100}@[-_0-9A-Za-z]{1,100}[-_.0-9A-Za-z]{1,100}"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TikaUrlCharSequenceNormalizer
name|INSTANCE
init|=
operator|new
name|TikaUrlCharSequenceNormalizer
argument_list|()
decl_stmt|;
specifier|public
specifier|static
name|TikaUrlCharSequenceNormalizer
name|getInstance
parameter_list|()
block|{
return|return
name|INSTANCE
return|;
block|}
specifier|private
name|TikaUrlCharSequenceNormalizer
parameter_list|()
block|{         }
annotation|@
name|Override
specifier|public
name|CharSequence
name|normalize
parameter_list|(
name|CharSequence
name|charSequence
parameter_list|)
block|{
name|String
name|modified
init|=
name|URL_REGEX
operator|.
name|matcher
argument_list|(
name|charSequence
argument_list|)
operator|.
name|replaceAll
argument_list|(
literal|" "
argument_list|)
decl_stmt|;
return|return
name|MAIL_REGEX
operator|.
name|matcher
argument_list|(
name|modified
argument_list|)
operator|.
name|replaceAll
argument_list|(
literal|" "
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

