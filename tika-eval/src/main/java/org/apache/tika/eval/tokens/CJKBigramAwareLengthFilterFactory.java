begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|eval
operator|.
name|tokens
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|TokenStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|cjk
operator|.
name|CJKBigramFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|tokenattributes
operator|.
name|CharTermAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|tokenattributes
operator|.
name|TypeAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|util
operator|.
name|FilteringTokenFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|util
operator|.
name|TokenFilterFactory
import|;
end_import

begin_comment
comment|/**  * Creates a very narrowly focused TokenFilter that limits tokens based on length  * _unless_ they've been identified as&lt;DOUBLE&gt; or&lt;SINGLE&gt;  * by the CJKBigramFilter.  *  * This class is intended to be used when generating "common tokens" files.  */
end_comment

begin_class
specifier|public
class|class
name|CJKBigramAwareLengthFilterFactory
extends|extends
name|TokenFilterFactory
block|{
specifier|private
specifier|final
name|int
name|min
decl_stmt|;
specifier|private
specifier|final
name|int
name|max
decl_stmt|;
specifier|public
name|CJKBigramAwareLengthFilterFactory
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|args
parameter_list|)
block|{
name|super
argument_list|(
name|args
argument_list|)
expr_stmt|;
name|min
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|args
operator|.
name|get
argument_list|(
literal|"min"
argument_list|)
argument_list|)
expr_stmt|;
name|max
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|args
operator|.
name|get
argument_list|(
literal|"max"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|TokenStream
name|create
parameter_list|(
name|TokenStream
name|tokenStream
parameter_list|)
block|{
return|return
operator|new
name|CJKAwareLengthFilter
argument_list|(
name|tokenStream
argument_list|)
return|;
block|}
specifier|private
class|class
name|CJKAwareLengthFilter
extends|extends
name|FilteringTokenFilter
block|{
specifier|private
specifier|final
name|CharTermAttribute
name|termAtt
init|=
name|addAttribute
argument_list|(
name|CharTermAttribute
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|TypeAttribute
name|typeAtt
init|=
name|addAttribute
argument_list|(
name|TypeAttribute
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
name|CJKAwareLengthFilter
parameter_list|(
name|TokenStream
name|in
parameter_list|)
block|{
name|super
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|boolean
name|accept
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|termAtt
operator|.
name|length
argument_list|()
operator|<
name|min
condition|)
block|{
name|String
name|type
init|=
name|typeAtt
operator|.
name|type
argument_list|()
decl_stmt|;
if|if
condition|(
name|type
operator|==
name|CJKBigramFilter
operator|.
name|DOUBLE_TYPE
operator|||
name|type
operator|==
name|CJKBigramFilter
operator|.
name|SINGLE_TYPE
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
name|termAtt
operator|.
name|length
argument_list|()
operator|>=
name|min
operator|&&
name|termAtt
operator|.
name|length
argument_list|()
operator|<=
name|max
return|;
block|}
block|}
comment|/*     private static boolean isCJ(int codePoint) {         if (                 (codePoint>= 0x4E00&& codePoint<= 0x9FFF) ||                         ( codePoint>= 0x3400&& codePoint<= 0x4dbf) ||                         ( codePoint>= 0x20000&& codePoint<= 0x2a6df) ||                         ( codePoint>= 0x2A700&& codePoint<= 0x2b73f) ||                         ( codePoint>= 0x2B740&& codePoint<= 0x2B81F) ||                         ( codePoint>= 0x2B820&& codePoint<- 0x2CEAF) ||                         ( codePoint>= 0xF900&& codePoint<= 0xFAFF) ||                         ( codePoint>= 0x2F800&& codePoint<= 0x2Fa1F)         ) {             return true;         }         return false;     }*/
block|}
end_class

end_unit

