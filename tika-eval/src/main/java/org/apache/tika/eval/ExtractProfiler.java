begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|eval
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Types
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ArrayBlockingQueue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|HelpFormatter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|Option
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|Options
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|batch
operator|.
name|FileResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|eval
operator|.
name|db
operator|.
name|ColInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|eval
operator|.
name|db
operator|.
name|Cols
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|eval
operator|.
name|db
operator|.
name|TableInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|eval
operator|.
name|io
operator|.
name|ExtractReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|eval
operator|.
name|io
operator|.
name|ExtractReaderException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|eval
operator|.
name|io
operator|.
name|IDBWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|metadata
operator|.
name|Metadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|RecursiveParserWrapper
import|;
end_import

begin_class
specifier|public
class|class
name|ExtractProfiler
extends|extends
name|AbstractProfiler
block|{
specifier|static
name|Options
name|OPTIONS
decl_stmt|;
static|static
block|{
comment|//By the time this commandline is parsed, there should be both an extracts and an inputDir
name|Option
name|extracts
init|=
operator|new
name|Option
argument_list|(
literal|"extracts"
argument_list|,
literal|true
argument_list|,
literal|"directory for extract files"
argument_list|)
decl_stmt|;
name|extracts
operator|.
name|setRequired
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Option
name|inputDir
init|=
operator|new
name|Option
argument_list|(
literal|"inputDir"
argument_list|,
literal|true
argument_list|,
literal|"optional: directory for original binary input documents."
operator|+
literal|" If not specified, -extracts is crawled as is."
argument_list|)
decl_stmt|;
name|OPTIONS
operator|=
operator|new
name|Options
argument_list|()
operator|.
name|addOption
argument_list|(
name|extracts
argument_list|)
operator|.
name|addOption
argument_list|(
name|inputDir
argument_list|)
operator|.
name|addOption
argument_list|(
literal|"bc"
argument_list|,
literal|"optional: tika-batch config file"
argument_list|)
operator|.
name|addOption
argument_list|(
literal|"numConsumers"
argument_list|,
literal|true
argument_list|,
literal|"optional: number of consumer threads"
argument_list|)
operator|.
name|addOption
argument_list|(
operator|new
name|Option
argument_list|(
literal|"alterExtract"
argument_list|,
literal|true
argument_list|,
literal|"for json-formatted extract files, "
operator|+
literal|"process full metadata list ('as_is'=default), "
operator|+
literal|"take just the first/container document ('first_only'), "
operator|+
literal|"concatenate all content into the first metadata item ('concatenate_content')"
argument_list|)
argument_list|)
operator|.
name|addOption
argument_list|(
literal|"minExtractLength"
argument_list|,
literal|true
argument_list|,
literal|"minimum extract length to process (in bytes)"
argument_list|)
operator|.
name|addOption
argument_list|(
literal|"maxExtractLength"
argument_list|,
literal|true
argument_list|,
literal|"maximum extract length to process (in bytes)"
argument_list|)
operator|.
name|addOption
argument_list|(
literal|"db"
argument_list|,
literal|true
argument_list|,
literal|"db file to which to write results"
argument_list|)
operator|.
name|addOption
argument_list|(
literal|"jdbc"
argument_list|,
literal|true
argument_list|,
literal|"EXPERT: full jdbc connection string. Must specify this or -db<h2db>"
argument_list|)
operator|.
name|addOption
argument_list|(
literal|"jdbcDriver"
argument_list|,
literal|true
argument_list|,
literal|"EXPERT: jdbc driver, or specify via -Djdbc.driver"
argument_list|)
operator|.
name|addOption
argument_list|(
literal|"tablePrefix"
argument_list|,
literal|true
argument_list|,
literal|"EXPERT: optional prefix for table names"
argument_list|)
operator|.
name|addOption
argument_list|(
literal|"drop"
argument_list|,
literal|true
argument_list|,
literal|"drop tables if they exist"
argument_list|)
operator|.
name|addOption
argument_list|(
literal|"maxFilesToAdd"
argument_list|,
literal|true
argument_list|,
literal|"maximum number of files to add to the crawler"
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|USAGE
parameter_list|()
block|{
name|HelpFormatter
name|helpFormatter
init|=
operator|new
name|HelpFormatter
argument_list|()
decl_stmt|;
name|helpFormatter
operator|.
name|printHelp
argument_list|(
literal|80
argument_list|,
literal|"java -jar tika-eval-x.y.jar Profile -extracts extracts -db mydb [-inputDir input]"
argument_list|,
literal|"Tool: Profile"
argument_list|,
name|ExtractProfiler
operator|.
name|OPTIONS
argument_list|,
literal|"Note: for the default h2 db, do not include the .mv.db at the end of the db name."
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|final
specifier|static
name|String
name|FIELD
init|=
literal|"f"
decl_stmt|;
specifier|public
specifier|static
name|TableInfo
name|EXTRACT_EXCEPTION_TABLE
init|=
operator|new
name|TableInfo
argument_list|(
literal|"extract_exceptions"
argument_list|,
operator|new
name|ColInfo
argument_list|(
name|Cols
operator|.
name|CONTAINER_ID
argument_list|,
name|Types
operator|.
name|INTEGER
argument_list|)
argument_list|,
operator|new
name|ColInfo
argument_list|(
name|Cols
operator|.
name|FILE_PATH
argument_list|,
name|Types
operator|.
name|VARCHAR
argument_list|,
name|FILE_PATH_MAX_LEN
argument_list|)
argument_list|,
operator|new
name|ColInfo
argument_list|(
name|Cols
operator|.
name|EXTRACT_EXCEPTION_TYPE_ID
argument_list|,
name|Types
operator|.
name|INTEGER
argument_list|)
argument_list|,
operator|new
name|ColInfo
argument_list|(
name|Cols
operator|.
name|PARSE_ERROR_TYPE_ID
argument_list|,
name|Types
operator|.
name|INTEGER
argument_list|)
argument_list|)
decl_stmt|;
specifier|public
specifier|static
name|TableInfo
name|EXCEPTION_TABLE
init|=
operator|new
name|TableInfo
argument_list|(
literal|"parse_exceptions"
argument_list|,
operator|new
name|ColInfo
argument_list|(
name|Cols
operator|.
name|ID
argument_list|,
name|Types
operator|.
name|INTEGER
argument_list|,
literal|"PRIMARY KEY"
argument_list|)
argument_list|,
operator|new
name|ColInfo
argument_list|(
name|Cols
operator|.
name|ORIG_STACK_TRACE
argument_list|,
name|Types
operator|.
name|VARCHAR
argument_list|,
literal|8192
argument_list|)
argument_list|,
operator|new
name|ColInfo
argument_list|(
name|Cols
operator|.
name|SORT_STACK_TRACE
argument_list|,
name|Types
operator|.
name|VARCHAR
argument_list|,
literal|8192
argument_list|)
argument_list|,
operator|new
name|ColInfo
argument_list|(
name|Cols
operator|.
name|PARSE_EXCEPTION_TYPE_ID
argument_list|,
name|Types
operator|.
name|INTEGER
argument_list|)
argument_list|)
decl_stmt|;
specifier|public
specifier|static
name|TableInfo
name|CONTAINER_TABLE
init|=
operator|new
name|TableInfo
argument_list|(
literal|"containers"
argument_list|,
operator|new
name|ColInfo
argument_list|(
name|Cols
operator|.
name|CONTAINER_ID
argument_list|,
name|Types
operator|.
name|INTEGER
argument_list|,
literal|"PRIMARY KEY"
argument_list|)
argument_list|,
operator|new
name|ColInfo
argument_list|(
name|Cols
operator|.
name|FILE_PATH
argument_list|,
name|Types
operator|.
name|VARCHAR
argument_list|,
name|FILE_PATH_MAX_LEN
argument_list|)
argument_list|,
operator|new
name|ColInfo
argument_list|(
name|Cols
operator|.
name|LENGTH
argument_list|,
name|Types
operator|.
name|BIGINT
argument_list|)
argument_list|,
operator|new
name|ColInfo
argument_list|(
name|Cols
operator|.
name|EXTRACT_FILE_LENGTH
argument_list|,
name|Types
operator|.
name|BIGINT
argument_list|)
argument_list|)
decl_stmt|;
specifier|public
specifier|static
name|TableInfo
name|PROFILE_TABLE
init|=
operator|new
name|TableInfo
argument_list|(
literal|"profiles"
argument_list|,
operator|new
name|ColInfo
argument_list|(
name|Cols
operator|.
name|ID
argument_list|,
name|Types
operator|.
name|INTEGER
argument_list|,
literal|"PRIMARY KEY"
argument_list|)
argument_list|,
operator|new
name|ColInfo
argument_list|(
name|Cols
operator|.
name|CONTAINER_ID
argument_list|,
name|Types
operator|.
name|INTEGER
argument_list|)
argument_list|,
operator|new
name|ColInfo
argument_list|(
name|Cols
operator|.
name|FILE_NAME
argument_list|,
name|Types
operator|.
name|VARCHAR
argument_list|,
literal|256
argument_list|)
argument_list|,
operator|new
name|ColInfo
argument_list|(
name|Cols
operator|.
name|MD5
argument_list|,
name|Types
operator|.
name|CHAR
argument_list|,
literal|32
argument_list|)
argument_list|,
operator|new
name|ColInfo
argument_list|(
name|Cols
operator|.
name|LENGTH
argument_list|,
name|Types
operator|.
name|BIGINT
argument_list|)
argument_list|,
operator|new
name|ColInfo
argument_list|(
name|Cols
operator|.
name|IS_EMBEDDED
argument_list|,
name|Types
operator|.
name|BOOLEAN
argument_list|)
argument_list|,
operator|new
name|ColInfo
argument_list|(
name|Cols
operator|.
name|FILE_EXTENSION
argument_list|,
name|Types
operator|.
name|VARCHAR
argument_list|,
literal|12
argument_list|)
argument_list|,
operator|new
name|ColInfo
argument_list|(
name|Cols
operator|.
name|MIME_TYPE_ID
argument_list|,
name|Types
operator|.
name|INTEGER
argument_list|)
argument_list|,
operator|new
name|ColInfo
argument_list|(
name|Cols
operator|.
name|ELAPSED_TIME_MILLIS
argument_list|,
name|Types
operator|.
name|INTEGER
argument_list|)
argument_list|,
operator|new
name|ColInfo
argument_list|(
name|Cols
operator|.
name|NUM_ATTACHMENTS
argument_list|,
name|Types
operator|.
name|INTEGER
argument_list|)
argument_list|,
operator|new
name|ColInfo
argument_list|(
name|Cols
operator|.
name|NUM_METADATA_VALUES
argument_list|,
name|Types
operator|.
name|INTEGER
argument_list|)
argument_list|,
operator|new
name|ColInfo
argument_list|(
name|Cols
operator|.
name|NUM_PAGES
argument_list|,
name|Types
operator|.
name|INTEGER
argument_list|)
argument_list|,
operator|new
name|ColInfo
argument_list|(
name|Cols
operator|.
name|HAS_CONTENT
argument_list|,
name|Types
operator|.
name|BOOLEAN
argument_list|)
argument_list|)
decl_stmt|;
specifier|public
specifier|static
name|TableInfo
name|EMBEDDED_FILE_PATH_TABLE
init|=
operator|new
name|TableInfo
argument_list|(
literal|"emb_file_names"
argument_list|,
operator|new
name|ColInfo
argument_list|(
name|Cols
operator|.
name|ID
argument_list|,
name|Types
operator|.
name|INTEGER
argument_list|,
literal|"PRIMARY KEY"
argument_list|)
argument_list|,
operator|new
name|ColInfo
argument_list|(
name|Cols
operator|.
name|EMBEDDED_FILE_PATH
argument_list|,
name|Types
operator|.
name|VARCHAR
argument_list|,
literal|1024
argument_list|)
argument_list|)
decl_stmt|;
specifier|public
specifier|static
name|TableInfo
name|CONTENTS_TABLE
init|=
operator|new
name|TableInfo
argument_list|(
literal|"contents"
argument_list|,
operator|new
name|ColInfo
argument_list|(
name|Cols
operator|.
name|ID
argument_list|,
name|Types
operator|.
name|INTEGER
argument_list|,
literal|"PRIMARY KEY"
argument_list|)
argument_list|,
operator|new
name|ColInfo
argument_list|(
name|Cols
operator|.
name|CONTENT_LENGTH
argument_list|,
name|Types
operator|.
name|INTEGER
argument_list|)
argument_list|,
operator|new
name|ColInfo
argument_list|(
name|Cols
operator|.
name|NUM_TOKENS
argument_list|,
name|Types
operator|.
name|INTEGER
argument_list|)
argument_list|,
operator|new
name|ColInfo
argument_list|(
name|Cols
operator|.
name|NUM_UNIQUE_TOKENS
argument_list|,
name|Types
operator|.
name|INTEGER
argument_list|)
argument_list|,
operator|new
name|ColInfo
argument_list|(
name|Cols
operator|.
name|COMMON_TOKENS_LANG
argument_list|,
name|Types
operator|.
name|VARCHAR
argument_list|,
literal|12
argument_list|)
argument_list|,
operator|new
name|ColInfo
argument_list|(
name|Cols
operator|.
name|NUM_COMMON_TOKENS
argument_list|,
name|Types
operator|.
name|INTEGER
argument_list|)
argument_list|,
operator|new
name|ColInfo
argument_list|(
name|Cols
operator|.
name|NUM_ALPHABETIC_TOKENS
argument_list|,
name|Types
operator|.
name|INTEGER
argument_list|)
argument_list|,
operator|new
name|ColInfo
argument_list|(
name|Cols
operator|.
name|TOP_N_TOKENS
argument_list|,
name|Types
operator|.
name|VARCHAR
argument_list|,
literal|1024
argument_list|)
argument_list|,
operator|new
name|ColInfo
argument_list|(
name|Cols
operator|.
name|LANG_ID_1
argument_list|,
name|Types
operator|.
name|VARCHAR
argument_list|,
literal|12
argument_list|)
argument_list|,
operator|new
name|ColInfo
argument_list|(
name|Cols
operator|.
name|LANG_ID_PROB_1
argument_list|,
name|Types
operator|.
name|FLOAT
argument_list|)
argument_list|,
operator|new
name|ColInfo
argument_list|(
name|Cols
operator|.
name|LANG_ID_2
argument_list|,
name|Types
operator|.
name|VARCHAR
argument_list|,
literal|12
argument_list|)
argument_list|,
operator|new
name|ColInfo
argument_list|(
name|Cols
operator|.
name|LANG_ID_PROB_2
argument_list|,
name|Types
operator|.
name|FLOAT
argument_list|)
argument_list|,
operator|new
name|ColInfo
argument_list|(
name|Cols
operator|.
name|UNICODE_CHAR_BLOCKS
argument_list|,
name|Types
operator|.
name|VARCHAR
argument_list|,
literal|1024
argument_list|)
argument_list|,
operator|new
name|ColInfo
argument_list|(
name|Cols
operator|.
name|TOKEN_ENTROPY_RATE
argument_list|,
name|Types
operator|.
name|FLOAT
argument_list|)
argument_list|,
operator|new
name|ColInfo
argument_list|(
name|Cols
operator|.
name|TOKEN_LENGTH_SUM
argument_list|,
name|Types
operator|.
name|INTEGER
argument_list|)
argument_list|,
operator|new
name|ColInfo
argument_list|(
name|Cols
operator|.
name|TOKEN_LENGTH_MEAN
argument_list|,
name|Types
operator|.
name|FLOAT
argument_list|)
argument_list|,
operator|new
name|ColInfo
argument_list|(
name|Cols
operator|.
name|TOKEN_LENGTH_STD_DEV
argument_list|,
name|Types
operator|.
name|FLOAT
argument_list|)
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|Path
name|inputDir
decl_stmt|;
specifier|private
specifier|final
name|Path
name|extracts
decl_stmt|;
specifier|private
specifier|final
name|ExtractReader
name|extractReader
decl_stmt|;
specifier|public
name|ExtractProfiler
parameter_list|(
name|ArrayBlockingQueue
argument_list|<
name|FileResource
argument_list|>
name|queue
parameter_list|,
name|Path
name|inputDir
parameter_list|,
name|Path
name|extracts
parameter_list|,
name|ExtractReader
name|extractReader
parameter_list|,
name|IDBWriter
name|dbWriter
parameter_list|)
block|{
name|super
argument_list|(
name|queue
argument_list|,
name|dbWriter
argument_list|)
expr_stmt|;
name|this
operator|.
name|inputDir
operator|=
name|inputDir
expr_stmt|;
name|this
operator|.
name|extracts
operator|=
name|extracts
expr_stmt|;
name|this
operator|.
name|extractReader
operator|=
name|extractReader
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|processFileResource
parameter_list|(
name|FileResource
name|fileResource
parameter_list|)
block|{
name|Metadata
name|metadata
init|=
name|fileResource
operator|.
name|getMetadata
argument_list|()
decl_stmt|;
name|EvalFilePaths
name|fps
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|inputDir
operator|!=
literal|null
operator|&&
name|inputDir
operator|.
name|equals
argument_list|(
name|extracts
argument_list|)
condition|)
block|{
comment|//crawling an extract dir
name|fps
operator|=
name|getPathsFromExtractCrawl
argument_list|(
name|metadata
argument_list|,
name|extracts
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|fps
operator|=
name|getPathsFromSrcCrawl
argument_list|(
name|metadata
argument_list|,
name|inputDir
argument_list|,
name|extracts
argument_list|)
expr_stmt|;
block|}
name|int
name|containerId
init|=
name|ID
operator|.
name|incrementAndGet
argument_list|()
decl_stmt|;
name|String
name|containerIdString
init|=
name|Integer
operator|.
name|toString
argument_list|(
name|containerId
argument_list|)
decl_stmt|;
name|ExtractReaderException
operator|.
name|TYPE
name|extractExceptionType
init|=
literal|null
decl_stmt|;
name|List
argument_list|<
name|Metadata
argument_list|>
name|metadataList
init|=
literal|null
decl_stmt|;
try|try
block|{
name|metadataList
operator|=
name|extractReader
operator|.
name|loadExtract
argument_list|(
name|fps
operator|.
name|getExtractFile
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ExtractReaderException
name|e
parameter_list|)
block|{
name|extractExceptionType
operator|=
name|e
operator|.
name|getType
argument_list|()
expr_stmt|;
block|}
name|Map
argument_list|<
name|Cols
argument_list|,
name|String
argument_list|>
name|contOutput
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|Long
name|srcFileLen
init|=
name|getSourceFileLength
argument_list|(
name|fps
argument_list|,
name|metadataList
argument_list|)
decl_stmt|;
name|contOutput
operator|.
name|put
argument_list|(
name|Cols
operator|.
name|LENGTH
argument_list|,
name|srcFileLen
operator|>
name|NON_EXISTENT_FILE_LENGTH
condition|?
name|Long
operator|.
name|toString
argument_list|(
name|srcFileLen
argument_list|)
else|:
literal|""
argument_list|)
expr_stmt|;
name|contOutput
operator|.
name|put
argument_list|(
name|Cols
operator|.
name|CONTAINER_ID
argument_list|,
name|containerIdString
argument_list|)
expr_stmt|;
name|contOutput
operator|.
name|put
argument_list|(
name|Cols
operator|.
name|FILE_PATH
argument_list|,
name|fps
operator|.
name|getRelativeSourceFilePath
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|fps
operator|.
name|getExtractFileLength
argument_list|()
operator|>
literal|0
condition|)
block|{
name|contOutput
operator|.
name|put
argument_list|(
name|Cols
operator|.
name|EXTRACT_FILE_LENGTH
argument_list|,
operator|(
name|fps
operator|.
name|getExtractFile
argument_list|()
operator|==
literal|null
operator|)
condition|?
literal|""
else|:
name|Long
operator|.
name|toString
argument_list|(
name|fps
operator|.
name|getExtractFileLength
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|writer
operator|.
name|writeRow
argument_list|(
name|CONTAINER_TABLE
argument_list|,
name|contOutput
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
if|if
condition|(
name|extractExceptionType
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|writeExtractException
argument_list|(
name|EXTRACT_EXCEPTION_TABLE
argument_list|,
name|containerIdString
argument_list|,
name|fps
operator|.
name|getRelativeSourceFilePath
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|extractExceptionType
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
return|return
literal|true
return|;
block|}
name|List
argument_list|<
name|Integer
argument_list|>
name|numAttachments
init|=
name|countAttachments
argument_list|(
name|metadataList
argument_list|)
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Metadata
name|m
range|:
name|metadataList
control|)
block|{
comment|//the first file should have the same id as the container id
name|String
name|fileId
init|=
operator|(
name|i
operator|==
literal|0
operator|)
condition|?
name|containerIdString
else|:
name|Integer
operator|.
name|toString
argument_list|(
name|ID
operator|.
name|incrementAndGet
argument_list|()
argument_list|)
decl_stmt|;
name|writeProfileData
argument_list|(
name|fps
argument_list|,
name|i
argument_list|,
name|m
argument_list|,
name|fileId
argument_list|,
name|containerIdString
argument_list|,
name|numAttachments
argument_list|,
name|PROFILE_TABLE
argument_list|)
expr_stmt|;
name|writeEmbeddedPathData
argument_list|(
name|i
argument_list|,
name|fileId
argument_list|,
name|m
argument_list|,
name|EMBEDDED_FILE_PATH_TABLE
argument_list|)
expr_stmt|;
name|writeExceptionData
argument_list|(
name|fileId
argument_list|,
name|m
argument_list|,
name|EXCEPTION_TABLE
argument_list|)
expr_stmt|;
try|try
block|{
name|writeContentData
argument_list|(
name|fileId
argument_list|,
name|m
argument_list|,
name|FIELD
argument_list|,
name|CONTENTS_TABLE
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|i
operator|++
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
specifier|private
name|void
name|writeEmbeddedPathData
parameter_list|(
name|int
name|i
parameter_list|,
name|String
name|fileId
parameter_list|,
name|Metadata
name|m
parameter_list|,
name|TableInfo
name|embeddedFilePathTable
parameter_list|)
block|{
if|if
condition|(
name|i
operator|==
literal|0
condition|)
block|{
return|return;
block|}
name|Map
argument_list|<
name|Cols
argument_list|,
name|String
argument_list|>
name|data
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|data
operator|.
name|put
argument_list|(
name|Cols
operator|.
name|ID
argument_list|,
name|fileId
argument_list|)
expr_stmt|;
name|data
operator|.
name|put
argument_list|(
name|Cols
operator|.
name|EMBEDDED_FILE_PATH
argument_list|,
name|m
operator|.
name|get
argument_list|(
name|RecursiveParserWrapper
operator|.
name|EMBEDDED_RESOURCE_PATH
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|writer
operator|.
name|writeRow
argument_list|(
name|embeddedFilePathTable
argument_list|,
name|data
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

