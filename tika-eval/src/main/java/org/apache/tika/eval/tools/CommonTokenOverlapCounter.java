begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|eval
operator|.
name|tools
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Paths
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|eval
operator|.
name|tokens
operator|.
name|CommonTokenCountManager
import|;
end_import

begin_class
specifier|public
class|class
name|CommonTokenOverlapCounter
block|{
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
name|Path
name|commonTokensDir
init|=
name|Paths
operator|.
name|get
argument_list|(
name|args
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|CommonTokenOverlapCounter
name|counter
init|=
operator|new
name|CommonTokenOverlapCounter
argument_list|()
decl_stmt|;
name|counter
operator|.
name|execute
argument_list|(
name|commonTokensDir
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|execute
parameter_list|(
name|Path
name|commonTokensDir
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|String
argument_list|>
name|langs
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|File
name|f
range|:
name|commonTokensDir
operator|.
name|toFile
argument_list|()
operator|.
name|listFiles
argument_list|()
control|)
block|{
name|langs
operator|.
name|add
argument_list|(
name|f
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|CommonTokenCountManager
name|mgr
init|=
operator|new
name|CommonTokenCountManager
argument_list|(
name|commonTokensDir
argument_list|,
literal|""
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|langs
operator|.
name|size
argument_list|()
operator|-
literal|1
condition|;
name|i
operator|++
control|)
block|{
for|for
control|(
name|int
name|j
init|=
name|i
operator|+
literal|1
init|;
name|j
operator|<
name|langs
operator|.
name|size
argument_list|()
condition|;
name|j
operator|++
control|)
block|{
name|compare
argument_list|(
name|langs
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|langs
operator|.
name|get
argument_list|(
name|j
argument_list|)
argument_list|,
name|mgr
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|compare
parameter_list|(
name|String
name|langA
parameter_list|,
name|String
name|langB
parameter_list|,
name|CommonTokenCountManager
name|mgr
parameter_list|)
block|{
name|int
name|overlap
init|=
literal|0
decl_stmt|;
name|int
name|denom
init|=
literal|0
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|setA
init|=
name|mgr
operator|.
name|getTokens
argument_list|(
name|langA
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|setB
init|=
name|mgr
operator|.
name|getTokens
argument_list|(
name|langB
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|a
range|:
name|setA
control|)
block|{
if|if
condition|(
name|setB
operator|.
name|contains
argument_list|(
name|a
argument_list|)
condition|)
block|{
name|overlap
operator|+=
literal|2
expr_stmt|;
block|}
block|}
name|denom
operator|=
name|setA
operator|.
name|size
argument_list|()
operator|+
name|setB
operator|.
name|size
argument_list|()
expr_stmt|;
name|double
name|percent
init|=
operator|(
name|double
operator|)
name|overlap
operator|/
operator|(
name|double
operator|)
name|denom
decl_stmt|;
if|if
condition|(
name|percent
operator|>
literal|0.01
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|US
argument_list|,
literal|"%s %s %.2f"
argument_list|,
name|langA
argument_list|,
name|langB
argument_list|,
name|percent
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

