begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|eval
operator|.
name|batch
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|batch
operator|.
name|FileResourceConsumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|config
operator|.
name|TikaConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|eval
operator|.
name|AbstractProfiler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|eval
operator|.
name|ExtractProfiler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|eval
operator|.
name|db
operator|.
name|TableInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|eval
operator|.
name|io
operator|.
name|DBWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|eval
operator|.
name|io
operator|.
name|ExtractReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|eval
operator|.
name|io
operator|.
name|IDBWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|util
operator|.
name|PropsUtil
import|;
end_import

begin_class
specifier|public
class|class
name|SingleFileConsumerBuilder
extends|extends
name|EvalConsumerBuilder
block|{
annotation|@
name|Override
specifier|public
name|FileResourceConsumer
name|build
parameter_list|()
throws|throws
name|IOException
block|{
name|Path
name|extractDir
init|=
name|PropsUtil
operator|.
name|getPath
argument_list|(
name|localAttrs
operator|.
name|get
argument_list|(
literal|"extractDir"
argument_list|)
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|extractDir
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Must specify \"extractDir\" -- directory to crawl"
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|Files
operator|.
name|isDirectory
argument_list|(
name|extractDir
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"ROOT DIRECTORY DOES NOT EXIST: "
operator|+
name|extractDir
operator|.
name|toAbsolutePath
argument_list|()
argument_list|)
throw|;
block|}
name|Path
name|inputDir
init|=
name|PropsUtil
operator|.
name|getPath
argument_list|(
name|localAttrs
operator|.
name|get
argument_list|(
literal|"inputDir"
argument_list|)
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|ExtractReader
operator|.
name|ALTER_METADATA_LIST
name|alterExtractList
init|=
name|getAlterMetadata
argument_list|(
name|localAttrs
argument_list|)
decl_stmt|;
name|IDBWriter
name|writer
init|=
literal|null
decl_stmt|;
try|try
block|{
name|writer
operator|=
name|getDBWriter
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
comment|//TODO: clean up the writing of the ref tables!!!
try|try
block|{
name|populateRefTables
argument_list|(
name|writer
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Can't populate ref tables"
argument_list|,
name|e
argument_list|)
throw|;
block|}
comment|//we _could_ set this to extractDir (if not null)
comment|//here, but the Crawler defaults to "input" if nothing is passed
comment|//so this won't work
if|if
condition|(
name|inputDir
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Must specify -inputDir"
argument_list|)
throw|;
block|}
if|if
condition|(
name|extractDir
operator|==
literal|null
operator|&&
name|inputDir
operator|!=
literal|null
condition|)
block|{
name|extractDir
operator|=
name|inputDir
expr_stmt|;
block|}
return|return
operator|new
name|ExtractProfiler
argument_list|(
name|queue
argument_list|,
name|inputDir
argument_list|,
name|extractDir
argument_list|,
name|writer
argument_list|,
name|alterExtractList
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|protected
name|List
argument_list|<
name|TableInfo
argument_list|>
name|getTableInfo
parameter_list|()
block|{
name|List
argument_list|<
name|TableInfo
argument_list|>
name|tableInfos
init|=
operator|new
name|ArrayList
argument_list|<
name|TableInfo
argument_list|>
argument_list|()
decl_stmt|;
name|tableInfos
operator|.
name|add
argument_list|(
name|AbstractProfiler
operator|.
name|MIME_TABLE
argument_list|)
expr_stmt|;
name|tableInfos
operator|.
name|add
argument_list|(
name|AbstractProfiler
operator|.
name|REF_PARSE_ERROR_TYPES
argument_list|)
expr_stmt|;
name|tableInfos
operator|.
name|add
argument_list|(
name|AbstractProfiler
operator|.
name|REF_PARSE_EXCEPTION_TYPES
argument_list|)
expr_stmt|;
name|tableInfos
operator|.
name|add
argument_list|(
name|AbstractProfiler
operator|.
name|REF_EXTRACT_ERROR_TYPES
argument_list|)
expr_stmt|;
name|tableInfos
operator|.
name|add
argument_list|(
name|ExtractProfiler
operator|.
name|CONTAINER_TABLE
argument_list|)
expr_stmt|;
name|tableInfos
operator|.
name|add
argument_list|(
name|ExtractProfiler
operator|.
name|PROFILE_TABLE
argument_list|)
expr_stmt|;
name|tableInfos
operator|.
name|add
argument_list|(
name|ExtractProfiler
operator|.
name|ERROR_TABLE
argument_list|)
expr_stmt|;
name|tableInfos
operator|.
name|add
argument_list|(
name|ExtractProfiler
operator|.
name|EXCEPTION_TABLE
argument_list|)
expr_stmt|;
name|tableInfos
operator|.
name|add
argument_list|(
name|ExtractProfiler
operator|.
name|CONTENTS_TABLE
argument_list|)
expr_stmt|;
name|tableInfos
operator|.
name|add
argument_list|(
name|ExtractProfiler
operator|.
name|EMBEDDED_FILE_PATH_TABLE
argument_list|)
expr_stmt|;
return|return
name|tableInfos
return|;
block|}
annotation|@
name|Override
specifier|protected
name|IDBWriter
name|getDBWriter
parameter_list|()
throws|throws
name|IOException
throws|,
name|SQLException
block|{
return|return
operator|new
name|DBWriter
argument_list|(
name|getTableInfo
argument_list|()
argument_list|,
name|TikaConfig
operator|.
name|getDefaultConfig
argument_list|()
argument_list|,
name|dbUtil
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|addErrorLogTablePairs
parameter_list|(
name|DBConsumersManager
name|manager
parameter_list|)
block|{
name|Path
name|errorLog
init|=
name|PropsUtil
operator|.
name|getPath
argument_list|(
name|localAttrs
operator|.
name|get
argument_list|(
literal|"errorLogFile"
argument_list|)
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|errorLog
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|manager
operator|.
name|addErrorLogTablePair
argument_list|(
name|errorLog
argument_list|,
name|ExtractProfiler
operator|.
name|ERROR_TABLE
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

