begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|eval
package|;
end_package

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|StandardCopyOption
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|DefaultParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|ParseException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|batch
operator|.
name|fs
operator|.
name|FSBatchProcessCLI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|eval
operator|.
name|reports
operator|.
name|ResultsReporter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|h2
operator|.
name|tools
operator|.
name|Console
import|;
end_import

begin_class
specifier|public
class|class
name|TikaEvalCLI
block|{
specifier|static
specifier|final
name|String
index|[]
name|tools
init|=
block|{
literal|"Profile"
block|,
literal|"Compare"
block|,
literal|"Report"
block|,
literal|"StartDB"
block|}
decl_stmt|;
specifier|private
specifier|static
name|String
name|specifyTools
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"Must specify one of the following tools in the first parameter:\n"
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|s
range|:
name|tools
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|s
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|private
name|void
name|execute
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|tool
init|=
name|args
index|[
literal|0
index|]
decl_stmt|;
name|String
index|[]
name|subsetArgs
init|=
operator|new
name|String
index|[
name|args
operator|.
name|length
operator|-
literal|1
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|args
argument_list|,
literal|1
argument_list|,
name|subsetArgs
argument_list|,
literal|0
argument_list|,
name|args
operator|.
name|length
operator|-
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|tool
operator|.
name|equals
argument_list|(
literal|"Report"
argument_list|)
condition|)
block|{
name|handleReport
argument_list|(
name|subsetArgs
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|tool
operator|.
name|equals
argument_list|(
literal|"Compare"
argument_list|)
condition|)
block|{
name|handleCompare
argument_list|(
name|subsetArgs
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|tool
operator|.
name|equals
argument_list|(
literal|"Profile"
argument_list|)
condition|)
block|{
name|handleProfile
argument_list|(
name|subsetArgs
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|tool
operator|.
name|equals
argument_list|(
literal|"StartDB"
argument_list|)
condition|)
block|{
name|handleStartDB
argument_list|(
name|subsetArgs
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|specifyTools
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|handleStartDB
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|SQLException
block|{
name|List
argument_list|<
name|String
argument_list|>
name|argList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|argList
operator|.
name|add
argument_list|(
literal|"-web"
argument_list|)
expr_stmt|;
name|Console
operator|.
name|main
argument_list|(
name|argList
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|argList
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
break|break;
block|}
block|}
block|}
specifier|private
name|void
name|handleProfile
parameter_list|(
name|String
index|[]
name|subsetArgs
parameter_list|)
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|String
argument_list|>
name|argList
init|=
operator|new
name|ArrayList
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|subsetArgs
argument_list|)
argument_list|)
decl_stmt|;
name|boolean
name|containsBC
init|=
literal|false
decl_stmt|;
name|String
name|inputDir
init|=
literal|null
decl_stmt|;
name|String
name|extractDir
init|=
literal|null
decl_stmt|;
name|String
name|alterExtract
init|=
literal|null
decl_stmt|;
comment|//confirm there's a batch-config file
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|argList
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|String
name|arg
init|=
name|argList
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|arg
operator|.
name|equals
argument_list|(
literal|"-bc"
argument_list|)
condition|)
block|{
name|containsBC
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|arg
operator|.
name|equals
argument_list|(
literal|"-inputDir"
argument_list|)
condition|)
block|{
if|if
condition|(
name|i
operator|+
literal|1
operator|>=
name|argList
operator|.
name|size
argument_list|()
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Must specify directory after -inputDir"
argument_list|)
expr_stmt|;
name|ExtractProfiler
operator|.
name|USAGE
argument_list|()
expr_stmt|;
return|return;
block|}
name|inputDir
operator|=
name|argList
operator|.
name|get
argument_list|(
name|i
operator|+
literal|1
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|arg
operator|.
name|equals
argument_list|(
literal|"-extractDir"
argument_list|)
condition|)
block|{
if|if
condition|(
name|i
operator|+
literal|1
operator|>=
name|argList
operator|.
name|size
argument_list|()
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Must specify directory after -extractDir"
argument_list|)
expr_stmt|;
name|ExtractProfiler
operator|.
name|USAGE
argument_list|()
expr_stmt|;
return|return;
block|}
name|extractDir
operator|=
name|argList
operator|.
name|get
argument_list|(
name|i
operator|+
literal|1
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|arg
operator|.
name|equals
argument_list|(
literal|"-alterExtract"
argument_list|)
condition|)
block|{
if|if
condition|(
name|i
operator|+
literal|1
operator|>=
name|argList
operator|.
name|size
argument_list|()
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Must specify directory after -extractsB"
argument_list|)
expr_stmt|;
name|ExtractComparer
operator|.
name|USAGE
argument_list|()
expr_stmt|;
return|return;
block|}
name|alterExtract
operator|=
name|argList
operator|.
name|get
argument_list|(
name|i
operator|+
literal|1
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
block|}
if|if
condition|(
name|alterExtract
operator|!=
literal|null
operator|&&
operator|!
name|alterExtract
operator|.
name|equals
argument_list|(
literal|"as_is"
argument_list|)
operator|&&
operator|!
name|alterExtract
operator|.
name|equals
argument_list|(
literal|"concatenate_content"
argument_list|)
operator|&&
operator|!
name|alterExtract
operator|.
name|equals
argument_list|(
literal|"first_only"
argument_list|)
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Sorry, I don't understand:"
operator|+
name|alterExtract
operator|+
literal|". The values must be one of: as_is, first_only, concatenate_content"
argument_list|)
expr_stmt|;
name|ExtractProfiler
operator|.
name|USAGE
argument_list|()
expr_stmt|;
return|return;
block|}
comment|//need to specify each in this commandline
comment|//if only extractDir is passed to tika-batch,
comment|//the crawler will see no inputDir and start crawling "input".
comment|//this allows the user to specify either extractDir or inputDir
if|if
condition|(
name|extractDir
operator|==
literal|null
operator|&&
name|inputDir
operator|!=
literal|null
condition|)
block|{
name|argList
operator|.
name|add
argument_list|(
literal|"-extractDir"
argument_list|)
expr_stmt|;
name|argList
operator|.
name|add
argument_list|(
name|inputDir
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|inputDir
operator|==
literal|null
operator|&&
name|extractDir
operator|!=
literal|null
condition|)
block|{
name|argList
operator|.
name|add
argument_list|(
literal|"-inputDir"
argument_list|)
expr_stmt|;
name|argList
operator|.
name|add
argument_list|(
name|extractDir
argument_list|)
expr_stmt|;
block|}
name|Path
name|tmpBCConfig
init|=
literal|null
decl_stmt|;
try|try
block|{
name|tmpBCConfig
operator|=
name|Files
operator|.
name|createTempFile
argument_list|(
literal|"tika-eval-profiler"
argument_list|,
literal|".xml"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|containsBC
condition|)
block|{
name|Files
operator|.
name|copy
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getResourceAsStream
argument_list|(
literal|"/tika-eval-profiler-config.xml"
argument_list|)
argument_list|,
name|tmpBCConfig
argument_list|,
name|StandardCopyOption
operator|.
name|REPLACE_EXISTING
argument_list|)
expr_stmt|;
name|argList
operator|.
name|add
argument_list|(
literal|"-bc"
argument_list|)
expr_stmt|;
name|argList
operator|.
name|add
argument_list|(
name|tmpBCConfig
operator|.
name|toAbsolutePath
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|String
index|[]
name|updatedArgs
init|=
name|argList
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|argList
operator|.
name|size
argument_list|()
index|]
argument_list|)
decl_stmt|;
name|DefaultParser
name|defaultCLIParser
init|=
operator|new
name|DefaultParser
argument_list|()
decl_stmt|;
try|try
block|{
name|defaultCLIParser
operator|.
name|parse
argument_list|(
name|ExtractProfiler
operator|.
name|OPTIONS
argument_list|,
name|updatedArgs
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|e
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
name|ExtractProfiler
operator|.
name|USAGE
argument_list|()
expr_stmt|;
return|return;
block|}
name|FSBatchProcessCLI
operator|.
name|main
argument_list|(
name|updatedArgs
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|tmpBCConfig
operator|!=
literal|null
operator|&&
name|Files
operator|.
name|isRegularFile
argument_list|(
name|tmpBCConfig
argument_list|)
condition|)
block|{
name|Files
operator|.
name|delete
argument_list|(
name|tmpBCConfig
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|handleCompare
parameter_list|(
name|String
index|[]
name|subsetArgs
parameter_list|)
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|String
argument_list|>
name|argList
init|=
operator|new
name|ArrayList
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|subsetArgs
argument_list|)
argument_list|)
decl_stmt|;
name|boolean
name|containsBC
init|=
literal|false
decl_stmt|;
name|String
name|inputDir
init|=
literal|null
decl_stmt|;
name|String
name|extractsA
init|=
literal|null
decl_stmt|;
name|String
name|alterExtract
init|=
literal|null
decl_stmt|;
comment|//confirm there's a batch-config file
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|argList
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|String
name|arg
init|=
name|argList
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|arg
operator|.
name|equals
argument_list|(
literal|"-bc"
argument_list|)
condition|)
block|{
name|containsBC
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|arg
operator|.
name|equals
argument_list|(
literal|"-inputDir"
argument_list|)
condition|)
block|{
if|if
condition|(
name|i
operator|+
literal|1
operator|>=
name|argList
operator|.
name|size
argument_list|()
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Must specify directory after -inputDir"
argument_list|)
expr_stmt|;
name|ExtractComparer
operator|.
name|USAGE
argument_list|()
expr_stmt|;
return|return;
block|}
name|inputDir
operator|=
name|argList
operator|.
name|get
argument_list|(
name|i
operator|+
literal|1
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|arg
operator|.
name|equals
argument_list|(
literal|"-extractsA"
argument_list|)
condition|)
block|{
if|if
condition|(
name|i
operator|+
literal|1
operator|>=
name|argList
operator|.
name|size
argument_list|()
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Must specify directory after -extractsA"
argument_list|)
expr_stmt|;
name|ExtractComparer
operator|.
name|USAGE
argument_list|()
expr_stmt|;
return|return;
block|}
name|extractsA
operator|=
name|argList
operator|.
name|get
argument_list|(
name|i
operator|+
literal|1
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|arg
operator|.
name|equals
argument_list|(
literal|"-alterExtract"
argument_list|)
condition|)
block|{
if|if
condition|(
name|i
operator|+
literal|1
operator|>=
name|argList
operator|.
name|size
argument_list|()
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Must specify directory after -extractsB"
argument_list|)
expr_stmt|;
name|ExtractComparer
operator|.
name|USAGE
argument_list|()
expr_stmt|;
return|return;
block|}
name|alterExtract
operator|=
name|argList
operator|.
name|get
argument_list|(
name|i
operator|+
literal|1
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
block|}
if|if
condition|(
name|alterExtract
operator|!=
literal|null
operator|&&
operator|!
name|alterExtract
operator|.
name|equals
argument_list|(
literal|"as_is"
argument_list|)
operator|&&
operator|!
name|alterExtract
operator|.
name|equals
argument_list|(
literal|"concatenate_content"
argument_list|)
operator|&&
operator|!
name|alterExtract
operator|.
name|equals
argument_list|(
literal|"first_only"
argument_list|)
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Sorry, I don't understand:"
operator|+
name|alterExtract
operator|+
literal|". The values must be one of: as_is, first_only, concatenate_content"
argument_list|)
expr_stmt|;
name|ExtractComparer
operator|.
name|USAGE
argument_list|()
expr_stmt|;
return|return;
block|}
comment|//need to specify each in the commandline that goes into tika-batch
comment|//if only extractDir is passed to tika-batch,
comment|//the crawler will see no inputDir and start crawling "input".
comment|//if the user doesn't specify inputDir, crawl extractsA
if|if
condition|(
name|inputDir
operator|==
literal|null
operator|&&
name|extractsA
operator|!=
literal|null
condition|)
block|{
name|argList
operator|.
name|add
argument_list|(
literal|"-inputDir"
argument_list|)
expr_stmt|;
name|argList
operator|.
name|add
argument_list|(
name|extractsA
argument_list|)
expr_stmt|;
block|}
name|Path
name|tmpBCConfig
init|=
literal|null
decl_stmt|;
try|try
block|{
name|tmpBCConfig
operator|=
name|Files
operator|.
name|createTempFile
argument_list|(
literal|"tika-eval"
argument_list|,
literal|".xml"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|containsBC
condition|)
block|{
name|Files
operator|.
name|copy
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getResourceAsStream
argument_list|(
literal|"/tika-eval-comparison-config.xml"
argument_list|)
argument_list|,
name|tmpBCConfig
argument_list|,
name|StandardCopyOption
operator|.
name|REPLACE_EXISTING
argument_list|)
expr_stmt|;
name|argList
operator|.
name|add
argument_list|(
literal|"-bc"
argument_list|)
expr_stmt|;
name|argList
operator|.
name|add
argument_list|(
name|tmpBCConfig
operator|.
name|toAbsolutePath
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|String
index|[]
name|updatedArgs
init|=
name|argList
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|argList
operator|.
name|size
argument_list|()
index|]
argument_list|)
decl_stmt|;
name|DefaultParser
name|defaultCLIParser
init|=
operator|new
name|DefaultParser
argument_list|()
decl_stmt|;
try|try
block|{
name|defaultCLIParser
operator|.
name|parse
argument_list|(
name|ExtractComparer
operator|.
name|OPTIONS
argument_list|,
name|updatedArgs
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|e
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
name|ExtractComparer
operator|.
name|USAGE
argument_list|()
expr_stmt|;
return|return;
block|}
name|FSBatchProcessCLI
operator|.
name|main
argument_list|(
name|updatedArgs
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|tmpBCConfig
operator|!=
literal|null
operator|&&
name|Files
operator|.
name|isRegularFile
argument_list|(
name|tmpBCConfig
argument_list|)
condition|)
block|{
name|Files
operator|.
name|delete
argument_list|(
name|tmpBCConfig
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|handleReport
parameter_list|(
name|String
index|[]
name|subsetArgs
parameter_list|)
throws|throws
name|Exception
block|{
name|ResultsReporter
operator|.
name|main
argument_list|(
name|subsetArgs
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
name|TikaEvalCLI
name|cli
init|=
operator|new
name|TikaEvalCLI
argument_list|()
decl_stmt|;
if|if
condition|(
name|args
operator|.
name|length
operator|==
literal|0
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|specifyTools
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
name|cli
operator|.
name|execute
argument_list|(
name|args
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

