begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|eval
operator|.
name|reports
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|DocumentBuilder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Paths
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|StandardCopyOption
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|DatabaseMetaData
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|ResultSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Statement
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|CommandLine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|DefaultParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|HelpFormatter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|Options
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|ParseException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|common
operator|.
name|usermodel
operator|.
name|Hyperlink
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|eval
operator|.
name|ExtractComparer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|eval
operator|.
name|ExtractProfiler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|eval
operator|.
name|db
operator|.
name|H2Util
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|eval
operator|.
name|db
operator|.
name|JDBCUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|ParseContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|utils
operator|.
name|XMLReaderUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|NamedNodeMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|NodeList
import|;
end_import

begin_class
specifier|public
class|class
name|ResultsReporter
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ResultsReporter
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|Options
name|OPTIONS
decl_stmt|;
static|static
block|{
name|OPTIONS
operator|=
operator|new
name|Options
argument_list|()
expr_stmt|;
name|OPTIONS
operator|.
name|addOption
argument_list|(
literal|"rd"
argument_list|,
literal|"reportsDir"
argument_list|,
literal|true
argument_list|,
literal|"directory for the reports. "
operator|+
literal|"If not specified, will write to 'reports'"
operator|+
literal|"BEWARE: Will overwrite existing reports without warning!"
argument_list|)
operator|.
name|addOption
argument_list|(
literal|"rf"
argument_list|,
literal|"reportsFile"
argument_list|,
literal|true
argument_list|,
literal|"xml specifying sql to call for the reports."
operator|+
literal|"If not specified, will use default reports in resources/tika-eval-*-config.xml"
argument_list|)
operator|.
name|addOption
argument_list|(
literal|"db"
argument_list|,
literal|true
argument_list|,
literal|"default database (in memory H2). Specify a file name for the H2 database."
argument_list|)
operator|.
name|addOption
argument_list|(
literal|"jdbc"
argument_list|,
literal|true
argument_list|,
literal|"EXPERT: full jdbc connection string. Specify this or use -db<h2db_name>"
argument_list|)
operator|.
name|addOption
argument_list|(
literal|"jdbcdriver"
argument_list|,
literal|true
argument_list|,
literal|"EXPERT: specify the jdbc driver class if all else fails"
argument_list|)
operator|.
name|addOption
argument_list|(
literal|"tablePrefix"
argument_list|,
literal|true
argument_list|,
literal|"EXPERT: if not using the default tables, specify your table name prefix"
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|USAGE
parameter_list|()
block|{
name|HelpFormatter
name|helpFormatter
init|=
operator|new
name|HelpFormatter
argument_list|()
decl_stmt|;
name|helpFormatter
operator|.
name|printHelp
argument_list|(
literal|80
argument_list|,
literal|"java -jar tika-eval-x.y.jar Report -db mydb [-rd myreports] [-rf myreports.xml]"
argument_list|,
literal|"Tool: Report"
argument_list|,
name|ResultsReporter
operator|.
name|OPTIONS
argument_list|,
literal|"Note: for h2 db, do not include the .mv.db at the end of the db name."
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|before
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|after
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Report
argument_list|>
name|reports
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
name|void
name|addBefore
parameter_list|(
name|String
name|b
parameter_list|)
block|{
name|before
operator|.
name|add
argument_list|(
name|b
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|addAfter
parameter_list|(
name|String
name|a
parameter_list|)
block|{
name|after
operator|.
name|add
argument_list|(
name|a
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|addReport
parameter_list|(
name|Report
name|r
parameter_list|)
block|{
name|reports
operator|.
name|add
argument_list|(
name|r
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|ResultsReporter
name|build
parameter_list|(
name|Path
name|p
parameter_list|)
throws|throws
name|Exception
block|{
name|ResultsReporter
name|r
init|=
operator|new
name|ResultsReporter
argument_list|()
decl_stmt|;
name|DocumentBuilder
name|docBuilder
init|=
name|XMLReaderUtils
operator|.
name|getDocumentBuilder
argument_list|()
decl_stmt|;
name|Document
name|doc
decl_stmt|;
try|try
init|(
name|InputStream
name|is
init|=
name|Files
operator|.
name|newInputStream
argument_list|(
name|p
argument_list|)
init|)
block|{
name|doc
operator|=
name|docBuilder
operator|.
name|parse
argument_list|(
name|is
argument_list|)
expr_stmt|;
block|}
name|Node
name|docElement
init|=
name|doc
operator|.
name|getDocumentElement
argument_list|()
decl_stmt|;
assert|assert
operator|(
name|docElement
operator|.
name|getNodeName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"reports"
argument_list|)
operator|)
assert|;
name|NodeList
name|children
init|=
name|docElement
operator|.
name|getChildNodes
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|children
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Node
name|n
init|=
name|children
operator|.
name|item
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
literal|"before"
operator|.
name|equals
argument_list|(
name|n
operator|.
name|getNodeName
argument_list|()
argument_list|)
condition|)
block|{
for|for
control|(
name|String
name|before
range|:
name|getSql
argument_list|(
name|n
argument_list|)
control|)
block|{
name|r
operator|.
name|addBefore
argument_list|(
name|before
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
literal|"after"
operator|.
name|equals
argument_list|(
name|n
operator|.
name|getNodeName
argument_list|()
argument_list|)
condition|)
block|{
for|for
control|(
name|String
name|after
range|:
name|getSql
argument_list|(
name|n
argument_list|)
control|)
block|{
name|r
operator|.
name|addAfter
argument_list|(
name|after
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
literal|"report"
operator|.
name|equals
argument_list|(
name|n
operator|.
name|getNodeName
argument_list|()
argument_list|)
condition|)
block|{
name|Report
name|report
init|=
name|buildReport
argument_list|(
name|n
argument_list|)
decl_stmt|;
name|r
operator|.
name|addReport
argument_list|(
name|report
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|r
return|;
block|}
specifier|private
specifier|static
name|Report
name|buildReport
parameter_list|(
name|Node
name|n
parameter_list|)
block|{
name|NodeList
name|children
init|=
name|n
operator|.
name|getChildNodes
argument_list|()
decl_stmt|;
name|Report
name|r
init|=
operator|new
name|Report
argument_list|()
decl_stmt|;
name|NamedNodeMap
name|attrs
init|=
name|n
operator|.
name|getAttributes
argument_list|()
decl_stmt|;
name|r
operator|.
name|includeSql
operator|=
name|Boolean
operator|.
name|parseBoolean
argument_list|(
name|attrs
operator|.
name|getNamedItem
argument_list|(
literal|"includeSql"
argument_list|)
operator|.
name|getNodeValue
argument_list|()
argument_list|)
expr_stmt|;
name|r
operator|.
name|reportFilename
operator|=
name|attrs
operator|.
name|getNamedItem
argument_list|(
literal|"reportFilename"
argument_list|)
operator|.
name|getNodeValue
argument_list|()
expr_stmt|;
name|r
operator|.
name|reportName
operator|=
name|attrs
operator|.
name|getNamedItem
argument_list|(
literal|"reportName"
argument_list|)
operator|.
name|getNodeValue
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|children
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Node
name|child
init|=
name|children
operator|.
name|item
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|child
operator|.
name|getNodeType
argument_list|()
operator|!=
literal|1
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
literal|"sql"
operator|.
name|equals
argument_list|(
name|child
operator|.
name|getNodeName
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|r
operator|.
name|sql
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Can only have one sql statement per report"
argument_list|)
throw|;
block|}
name|r
operator|.
name|sql
operator|=
name|child
operator|.
name|getTextContent
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"colformats"
operator|.
name|equals
argument_list|(
name|child
operator|.
name|getNodeName
argument_list|()
argument_list|)
condition|)
block|{
name|r
operator|.
name|cellFormatters
operator|=
name|getCellFormatters
argument_list|(
name|child
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Not expecting to see:"
operator|+
name|child
operator|.
name|getNodeName
argument_list|()
argument_list|)
throw|;
block|}
block|}
return|return
name|r
return|;
block|}
specifier|private
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|XSLXCellFormatter
argument_list|>
name|getCellFormatters
parameter_list|(
name|Node
name|n
parameter_list|)
block|{
name|NodeList
name|children
init|=
name|n
operator|.
name|getChildNodes
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|XSLXCellFormatter
argument_list|>
name|ret
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|children
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Node
name|child
init|=
name|children
operator|.
name|item
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|child
operator|.
name|getNodeType
argument_list|()
operator|!=
literal|1
condition|)
block|{
continue|continue;
block|}
name|NamedNodeMap
name|attrs
init|=
name|child
operator|.
name|getAttributes
argument_list|()
decl_stmt|;
name|String
name|columnName
init|=
name|attrs
operator|.
name|getNamedItem
argument_list|(
literal|"name"
argument_list|)
operator|.
name|getNodeValue
argument_list|()
decl_stmt|;
assert|assert
operator|(
operator|!
name|ret
operator|.
name|containsKey
argument_list|(
name|columnName
argument_list|)
operator|)
assert|;
name|String
name|type
init|=
name|attrs
operator|.
name|getNamedItem
argument_list|(
literal|"type"
argument_list|)
operator|.
name|getNodeValue
argument_list|()
decl_stmt|;
if|if
condition|(
literal|"numberFormatter"
operator|.
name|equals
argument_list|(
name|type
argument_list|)
condition|)
block|{
name|String
name|format
init|=
name|attrs
operator|.
name|getNamedItem
argument_list|(
literal|"format"
argument_list|)
operator|.
name|getNodeValue
argument_list|()
decl_stmt|;
name|XSLXCellFormatter
name|f
init|=
operator|new
name|XLSXNumFormatter
argument_list|(
name|format
argument_list|)
decl_stmt|;
name|ret
operator|.
name|put
argument_list|(
name|columnName
argument_list|,
name|f
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"urlLink"
operator|.
name|equals
argument_list|(
name|type
argument_list|)
condition|)
block|{
name|String
name|base
init|=
literal|""
decl_stmt|;
name|Node
name|baseNode
init|=
name|attrs
operator|.
name|getNamedItem
argument_list|(
literal|"base"
argument_list|)
decl_stmt|;
if|if
condition|(
name|baseNode
operator|!=
literal|null
condition|)
block|{
name|base
operator|=
name|baseNode
operator|.
name|getNodeValue
argument_list|()
expr_stmt|;
block|}
name|XLSXHREFFormatter
name|f
init|=
operator|new
name|XLSXHREFFormatter
argument_list|(
name|base
argument_list|,
name|Hyperlink
operator|.
name|LINK_URL
argument_list|)
decl_stmt|;
name|ret
operator|.
name|put
argument_list|(
name|columnName
argument_list|,
name|f
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"fileLink"
operator|.
name|equals
argument_list|(
name|type
argument_list|)
condition|)
block|{
name|String
name|base
init|=
literal|""
decl_stmt|;
name|Node
name|baseNode
init|=
name|attrs
operator|.
name|getNamedItem
argument_list|(
literal|"base"
argument_list|)
decl_stmt|;
if|if
condition|(
name|baseNode
operator|!=
literal|null
condition|)
block|{
name|base
operator|=
name|baseNode
operator|.
name|getNodeValue
argument_list|()
expr_stmt|;
block|}
name|XLSXHREFFormatter
name|f
init|=
operator|new
name|XLSXHREFFormatter
argument_list|(
name|base
argument_list|,
name|Hyperlink
operator|.
name|LINK_FILE
argument_list|)
decl_stmt|;
name|ret
operator|.
name|put
argument_list|(
name|columnName
argument_list|,
name|f
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|ret
return|;
block|}
specifier|private
specifier|static
name|List
argument_list|<
name|String
argument_list|>
name|getSql
parameter_list|(
name|Node
name|n
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|ret
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|NodeList
name|children
init|=
name|n
operator|.
name|getChildNodes
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|children
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Node
name|child
init|=
name|children
operator|.
name|item
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|child
operator|.
name|getNodeType
argument_list|()
operator|!=
literal|1
condition|)
block|{
continue|continue;
block|}
name|ret
operator|.
name|add
argument_list|(
name|child
operator|.
name|getTextContent
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
name|DefaultParser
name|defaultCLIParser
init|=
operator|new
name|DefaultParser
argument_list|()
decl_stmt|;
name|CommandLine
name|commandLine
init|=
literal|null
decl_stmt|;
try|try
block|{
name|commandLine
operator|=
name|defaultCLIParser
operator|.
name|parse
argument_list|(
name|OPTIONS
argument_list|,
name|args
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|e
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|USAGE
argument_list|()
expr_stmt|;
return|return;
block|}
name|JDBCUtil
name|dbUtil
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|commandLine
operator|.
name|hasOption
argument_list|(
literal|"db"
argument_list|)
condition|)
block|{
name|String
name|dbString
init|=
name|commandLine
operator|.
name|getOptionValue
argument_list|(
literal|"db"
argument_list|)
decl_stmt|;
if|if
condition|(
name|dbString
operator|.
name|endsWith
argument_list|(
literal|".mv.db"
argument_list|)
condition|)
block|{
name|dbString
operator|=
name|dbString
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|dbString
operator|.
name|length
argument_list|()
operator|-
literal|6
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"trimming .mv.db from db name"
argument_list|)
expr_stmt|;
block|}
name|Path
name|db
init|=
name|Paths
operator|.
name|get
argument_list|(
name|dbString
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|H2Util
operator|.
name|databaseExists
argument_list|(
name|db
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"I'm sorry, but I couldn't find this h2 database: "
operator|+
name|db
argument_list|)
throw|;
block|}
name|dbUtil
operator|=
operator|new
name|H2Util
argument_list|(
name|db
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|commandLine
operator|.
name|hasOption
argument_list|(
literal|"jdbc"
argument_list|)
condition|)
block|{
name|String
name|driverClass
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|commandLine
operator|.
name|hasOption
argument_list|(
literal|"jdbcdriver"
argument_list|)
condition|)
block|{
name|driverClass
operator|=
name|commandLine
operator|.
name|getOptionValue
argument_list|(
literal|"jdbcdriver"
argument_list|)
expr_stmt|;
block|}
name|dbUtil
operator|=
operator|new
name|JDBCUtil
argument_list|(
name|commandLine
operator|.
name|getOptionValue
argument_list|(
literal|"jdbc"
argument_list|)
argument_list|,
name|driverClass
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Must specify either -db for the default in-memory h2 database\n"
operator|+
literal|"or -jdbc for a full jdbc connection string"
argument_list|)
expr_stmt|;
name|USAGE
argument_list|()
expr_stmt|;
return|return;
block|}
try|try
init|(
name|Connection
name|c
init|=
name|dbUtil
operator|.
name|getConnection
argument_list|()
init|)
block|{
name|Path
name|tmpReportsFile
init|=
literal|null
decl_stmt|;
try|try
block|{
name|ResultsReporter
name|resultsReporter
init|=
literal|null
decl_stmt|;
name|String
name|reportsFile
init|=
name|commandLine
operator|.
name|getOptionValue
argument_list|(
literal|"rf"
argument_list|)
decl_stmt|;
if|if
condition|(
name|reportsFile
operator|==
literal|null
condition|)
block|{
name|tmpReportsFile
operator|=
name|getDefaultReportsConfig
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|resultsReporter
operator|=
name|ResultsReporter
operator|.
name|build
argument_list|(
name|tmpReportsFile
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|resultsReporter
operator|=
name|ResultsReporter
operator|.
name|build
argument_list|(
name|Paths
operator|.
name|get
argument_list|(
name|reportsFile
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Path
name|reportsRootDirectory
init|=
name|Paths
operator|.
name|get
argument_list|(
name|commandLine
operator|.
name|getOptionValue
argument_list|(
literal|"rd"
argument_list|,
literal|"reports"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|Files
operator|.
name|isDirectory
argument_list|(
name|reportsRootDirectory
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"'Reports' directory exists.  Will overwrite existing reports."
argument_list|)
expr_stmt|;
block|}
name|resultsReporter
operator|.
name|execute
argument_list|(
name|c
argument_list|,
name|reportsRootDirectory
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|tmpReportsFile
operator|!=
literal|null
condition|)
block|{
name|Files
operator|.
name|delete
argument_list|(
name|tmpReportsFile
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|private
specifier|static
name|Path
name|getDefaultReportsConfig
parameter_list|(
name|Connection
name|c
parameter_list|)
throws|throws
name|IOException
throws|,
name|SQLException
block|{
name|DatabaseMetaData
name|md
init|=
name|c
operator|.
name|getMetaData
argument_list|()
decl_stmt|;
name|String
name|internalPath
init|=
literal|null
decl_stmt|;
try|try
init|(
name|ResultSet
name|rs
init|=
name|md
operator|.
name|getTables
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|"%"
argument_list|,
literal|null
argument_list|)
init|)
block|{
while|while
condition|(
name|rs
operator|.
name|next
argument_list|()
condition|)
block|{
name|String
name|tName
init|=
name|rs
operator|.
name|getString
argument_list|(
literal|3
argument_list|)
decl_stmt|;
if|if
condition|(
name|ExtractComparer
operator|.
name|CONTENTS_TABLE_B
operator|.
name|getName
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
name|tName
argument_list|)
condition|)
block|{
name|internalPath
operator|=
literal|"/comparison-reports.xml"
expr_stmt|;
break|break;
block|}
elseif|else
if|if
condition|(
name|ExtractProfiler
operator|.
name|PROFILE_TABLE
operator|.
name|getName
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
name|tName
argument_list|)
condition|)
block|{
name|internalPath
operator|=
literal|"/profile-reports.xml"
expr_stmt|;
break|break;
block|}
block|}
block|}
if|if
condition|(
name|internalPath
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Couldn't determine if this database was a 'profiler' or 'comparison' db"
argument_list|)
throw|;
block|}
name|Path
name|tmp
init|=
name|Files
operator|.
name|createTempFile
argument_list|(
literal|"tmp-tika-reports"
argument_list|,
literal|".xml"
argument_list|)
decl_stmt|;
name|Files
operator|.
name|copy
argument_list|(
name|ResultsReporter
operator|.
name|class
operator|.
name|getResourceAsStream
argument_list|(
name|internalPath
argument_list|)
argument_list|,
name|tmp
argument_list|,
name|StandardCopyOption
operator|.
name|REPLACE_EXISTING
argument_list|)
expr_stmt|;
return|return
name|tmp
return|;
block|}
specifier|public
name|void
name|execute
parameter_list|(
name|Connection
name|c
parameter_list|,
name|Path
name|reportsDirectory
parameter_list|)
throws|throws
name|IOException
throws|,
name|SQLException
block|{
name|Statement
name|st
init|=
name|c
operator|.
name|createStatement
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|sql
range|:
name|before
control|)
block|{
name|st
operator|.
name|execute
argument_list|(
name|sql
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Report
name|r
range|:
name|reports
control|)
block|{
name|r
operator|.
name|writeReport
argument_list|(
name|c
argument_list|,
name|reportsDirectory
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|String
name|sql
range|:
name|after
control|)
block|{
name|st
operator|.
name|execute
argument_list|(
name|sql
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

