begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|eval
operator|.
name|db
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_class
specifier|public
class|class
name|TableInfo
block|{
specifier|private
specifier|final
name|String
name|name
decl_stmt|;
specifier|private
specifier|final
name|List
argument_list|<
name|ColInfo
argument_list|>
name|colInfos
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Set
argument_list|<
name|Cols
argument_list|>
name|colNames
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
name|String
name|prefix
decl_stmt|;
specifier|public
name|TableInfo
parameter_list|(
name|String
name|name
parameter_list|,
name|ColInfo
modifier|...
name|cols
parameter_list|)
block|{
name|Collections
operator|.
name|addAll
argument_list|(
name|colInfos
argument_list|,
name|cols
argument_list|)
expr_stmt|;
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|colInfos
argument_list|)
expr_stmt|;
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
for|for
control|(
name|ColInfo
name|c
range|:
name|colInfos
control|)
block|{
assert|assert
operator|(
operator|!
name|colNames
operator|.
name|contains
argument_list|(
name|c
operator|.
name|getName
argument_list|()
argument_list|)
operator|)
assert|;
name|colNames
operator|.
name|add
argument_list|(
name|c
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|TableInfo
parameter_list|(
name|String
name|name
parameter_list|,
name|List
argument_list|<
name|ColInfo
argument_list|>
name|cols
parameter_list|)
block|{
name|colInfos
operator|.
name|addAll
argument_list|(
name|cols
argument_list|)
expr_stmt|;
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|colInfos
argument_list|)
expr_stmt|;
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
for|for
control|(
name|ColInfo
name|c
range|:
name|colInfos
control|)
block|{
assert|assert
operator|(
operator|!
name|colNames
operator|.
name|contains
argument_list|(
name|c
operator|.
name|getName
argument_list|()
argument_list|)
operator|)
assert|;
name|colNames
operator|.
name|add
argument_list|(
name|c
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|String
name|getName
parameter_list|()
block|{
if|if
condition|(
name|prefix
operator|==
literal|null
condition|)
block|{
return|return
name|name
return|;
block|}
return|return
name|prefix
operator|+
name|name
return|;
block|}
specifier|public
name|void
name|setNamePrefix
parameter_list|(
name|String
name|prefix
parameter_list|)
block|{
name|this
operator|.
name|prefix
operator|=
name|prefix
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|ColInfo
argument_list|>
name|getColInfos
parameter_list|()
block|{
return|return
name|colInfos
return|;
block|}
specifier|public
name|boolean
name|containsColumn
parameter_list|(
name|Cols
name|cols
parameter_list|)
block|{
return|return
name|colNames
operator|.
name|contains
argument_list|(
name|cols
argument_list|)
return|;
block|}
block|}
end_class

end_unit

