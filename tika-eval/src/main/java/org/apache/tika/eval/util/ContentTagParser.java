begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|eval
operator|.
name|util
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|exception
operator|.
name|TikaException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|ParseContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|sax
operator|.
name|ToTextContentHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|utils
operator|.
name|XMLReaderUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|ccil
operator|.
name|cowan
operator|.
name|tagsoup
operator|.
name|jaxp
operator|.
name|SAXParserImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|Attributes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|InputSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_class
specifier|public
class|class
name|ContentTagParser
block|{
specifier|private
specifier|static
specifier|final
name|ParseContext
name|EMPTY_PARSE_CONTEXT
init|=
operator|new
name|ParseContext
argument_list|()
decl_stmt|;
specifier|public
specifier|static
name|ContentTags
name|parseXML
parameter_list|(
name|String
name|html
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|uppercaseTagsOfInterest
parameter_list|)
throws|throws
name|TikaException
throws|,
name|IOException
throws|,
name|SAXException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|tags
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|XHTMLContentTagHandler
name|xhtmlContentTagHandler
init|=
operator|new
name|XHTMLContentTagHandler
argument_list|(
name|uppercaseTagsOfInterest
argument_list|,
name|tags
argument_list|)
decl_stmt|;
name|XMLReaderUtils
operator|.
name|parseSAX
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|html
operator|.
name|getBytes
argument_list|(
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
argument_list|)
argument_list|,
name|xhtmlContentTagHandler
argument_list|,
name|EMPTY_PARSE_CONTEXT
argument_list|)
expr_stmt|;
return|return
operator|new
name|ContentTags
argument_list|(
name|xhtmlContentTagHandler
operator|.
name|toString
argument_list|()
argument_list|,
name|tags
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|ContentTags
name|parseHTML
parameter_list|(
name|String
name|html
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|uppercaseTagsOfInterest
parameter_list|)
throws|throws
name|SAXException
throws|,
name|IOException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|tags
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|XHTMLContentTagHandler
name|xhtmlContentTagHandler
init|=
operator|new
name|XHTMLContentTagHandler
argument_list|(
name|uppercaseTagsOfInterest
argument_list|,
name|tags
argument_list|)
decl_stmt|;
name|SAXParserImpl
operator|.
name|newInstance
argument_list|(
literal|null
argument_list|)
operator|.
name|parse
argument_list|(
operator|new
name|InputSource
argument_list|(
operator|new
name|StringReader
argument_list|(
name|html
argument_list|)
argument_list|)
argument_list|,
name|xhtmlContentTagHandler
argument_list|)
expr_stmt|;
return|return
operator|new
name|ContentTags
argument_list|(
name|xhtmlContentTagHandler
operator|.
name|toString
argument_list|()
argument_list|,
name|tags
argument_list|)
return|;
block|}
specifier|private
specifier|static
class|class
name|XHTMLContentTagHandler
extends|extends
name|ToTextContentHandler
block|{
comment|//Used to have a stack to make sure that starting/ending tags were matched
comment|//However, this was a non-starter because tag soup fixes non-matching tags for html
comment|//and the straight SAXParser throws an exception for mismatched tags in xml
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|tags
decl_stmt|;
specifier|private
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|uppercaseTagsOfInterest
decl_stmt|;
specifier|public
name|XHTMLContentTagHandler
parameter_list|(
name|Set
argument_list|<
name|String
argument_list|>
name|uppercaseTagsOfInterest
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|tags
parameter_list|)
block|{
name|this
operator|.
name|uppercaseTagsOfInterest
operator|=
name|uppercaseTagsOfInterest
expr_stmt|;
name|this
operator|.
name|tags
operator|=
name|tags
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|startElement
parameter_list|(
name|String
name|uri
parameter_list|,
name|String
name|localName
parameter_list|,
name|String
name|qName
parameter_list|,
name|Attributes
name|atts
parameter_list|)
throws|throws
name|SAXException
block|{
name|super
operator|.
name|startElement
argument_list|(
name|uri
argument_list|,
name|localName
argument_list|,
name|qName
argument_list|,
name|atts
argument_list|)
expr_stmt|;
name|String
name|uc
init|=
operator|(
name|qName
operator|==
literal|null
operator|)
condition|?
literal|""
else|:
name|qName
operator|.
name|toUpperCase
argument_list|(
name|Locale
operator|.
name|ENGLISH
argument_list|)
decl_stmt|;
if|if
condition|(
name|uppercaseTagsOfInterest
operator|.
name|contains
argument_list|(
name|uc
argument_list|)
condition|)
block|{
name|Integer
name|i
init|=
name|tags
operator|.
name|get
argument_list|(
name|uc
argument_list|)
decl_stmt|;
if|if
condition|(
name|i
operator|==
literal|null
condition|)
block|{
name|i
operator|=
literal|1
expr_stmt|;
block|}
else|else
block|{
name|i
operator|++
expr_stmt|;
block|}
name|tags
operator|.
name|put
argument_list|(
name|uc
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

