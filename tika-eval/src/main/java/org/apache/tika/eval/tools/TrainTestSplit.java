begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|eval
operator|.
name|tools
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStreamWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Writer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Paths
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|compress
operator|.
name|compressors
operator|.
name|gzip
operator|.
name|GzipCompressorOutputStream
import|;
end_import

begin_class
specifier|public
class|class
name|TrainTestSplit
block|{
specifier|private
specifier|static
name|String
name|TRAINING
init|=
literal|"train"
decl_stmt|;
specifier|private
specifier|static
name|String
name|TESTING
init|=
literal|"test"
decl_stmt|;
specifier|private
specifier|static
name|String
name|DEVTEST
init|=
literal|"devtest"
decl_stmt|;
specifier|private
name|float
name|trainingP
init|=
literal|0.7f
decl_stmt|;
specifier|private
name|float
name|devTestP
init|=
literal|0.1f
decl_stmt|;
specifier|private
name|float
name|testP
init|=
literal|0.2f
decl_stmt|;
specifier|private
name|Random
name|random
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
name|Path
name|leipzigDir
init|=
name|Paths
operator|.
name|get
argument_list|(
name|args
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|Path
name|outputDir
init|=
name|Paths
operator|.
name|get
argument_list|(
name|args
index|[
literal|1
index|]
argument_list|)
decl_stmt|;
name|TrainTestSplit
name|splitter
init|=
operator|new
name|TrainTestSplit
argument_list|()
decl_stmt|;
name|splitter
operator|.
name|execute
argument_list|(
name|leipzigDir
argument_list|,
name|outputDir
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|execute
parameter_list|(
name|Path
name|leipzigDir
parameter_list|,
name|Path
name|outputDir
parameter_list|)
throws|throws
name|Exception
block|{
name|initOutDirs
argument_list|(
name|outputDir
argument_list|)
expr_stmt|;
for|for
control|(
name|File
name|f
range|:
name|leipzigDir
operator|.
name|toFile
argument_list|()
operator|.
name|listFiles
argument_list|()
control|)
block|{
if|if
condition|(
name|f
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
continue|continue;
block|}
name|processFile
argument_list|(
name|f
argument_list|,
name|outputDir
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|initOutDirs
parameter_list|(
name|Path
name|outputDir
parameter_list|)
throws|throws
name|Exception
block|{
for|for
control|(
name|String
name|which
range|:
operator|new
name|String
index|[]
block|{
name|TRAINING
block|,
name|DEVTEST
block|,
name|TESTING
block|}
control|)
block|{
name|Path
name|target
init|=
name|outputDir
operator|.
name|resolve
argument_list|(
name|which
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|Files
operator|.
name|isDirectory
argument_list|(
name|target
argument_list|)
condition|)
block|{
name|Files
operator|.
name|createDirectories
argument_list|(
name|target
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|processFile
parameter_list|(
name|File
name|f
parameter_list|,
name|Path
name|outputDir
parameter_list|)
throws|throws
name|Exception
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|BufferedWriter
argument_list|>
name|writers
init|=
name|getWriters
argument_list|(
name|outputDir
argument_list|,
name|f
argument_list|)
decl_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"working on "
operator|+
name|f
argument_list|)
expr_stmt|;
try|try
init|(
name|BufferedReader
name|reader
init|=
name|Files
operator|.
name|newBufferedReader
argument_list|(
name|f
operator|.
name|toPath
argument_list|()
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
init|)
block|{
name|String
name|line
init|=
name|reader
operator|.
name|readLine
argument_list|()
decl_stmt|;
while|while
condition|(
name|line
operator|!=
literal|null
condition|)
block|{
name|float
name|r
init|=
name|random
operator|.
name|nextFloat
argument_list|()
decl_stmt|;
if|if
condition|(
name|r
operator|<=
name|trainingP
condition|)
block|{
name|writers
operator|.
name|get
argument_list|(
name|TRAINING
argument_list|)
operator|.
name|write
argument_list|(
name|line
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|r
operator|<
name|trainingP
operator|+
name|devTestP
condition|)
block|{
name|writers
operator|.
name|get
argument_list|(
name|DEVTEST
argument_list|)
operator|.
name|write
argument_list|(
name|line
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|writers
operator|.
name|get
argument_list|(
name|TESTING
argument_list|)
operator|.
name|write
argument_list|(
name|line
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
block|}
name|line
operator|=
name|reader
operator|.
name|readLine
argument_list|()
expr_stmt|;
block|}
block|}
for|for
control|(
name|Writer
name|w
range|:
name|writers
operator|.
name|values
argument_list|()
control|)
block|{
name|w
operator|.
name|flush
argument_list|()
expr_stmt|;
name|w
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|BufferedWriter
argument_list|>
name|getWriters
parameter_list|(
name|Path
name|outputDir
parameter_list|,
name|File
name|f
parameter_list|)
throws|throws
name|IOException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|BufferedWriter
argument_list|>
name|writers
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|which
range|:
operator|new
name|String
index|[]
block|{
name|TRAINING
block|,
name|DEVTEST
block|,
name|TESTING
block|}
control|)
block|{
name|writers
operator|.
name|put
argument_list|(
name|which
argument_list|,
name|getWriter
argument_list|(
name|outputDir
argument_list|,
name|which
argument_list|,
name|f
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|writers
return|;
block|}
specifier|private
name|BufferedWriter
name|getWriter
parameter_list|(
name|Path
name|outputDir
parameter_list|,
name|String
name|which
parameter_list|,
name|File
name|f
parameter_list|)
throws|throws
name|IOException
block|{
name|OutputStream
name|os
init|=
operator|new
name|GzipCompressorOutputStream
argument_list|(
operator|new
name|BufferedOutputStream
argument_list|(
name|Files
operator|.
name|newOutputStream
argument_list|(
name|outputDir
operator|.
name|resolve
argument_list|(
name|which
argument_list|)
operator|.
name|resolve
argument_list|(
name|f
operator|.
name|getName
argument_list|()
operator|+
literal|".gz"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
return|return
operator|new
name|BufferedWriter
argument_list|(
operator|new
name|OutputStreamWriter
argument_list|(
name|os
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
argument_list|)
return|;
block|}
block|}
end_class

end_unit

