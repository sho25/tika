begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|eval
operator|.
name|tools
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_class
specifier|public
class|class
name|LeipzigHelper
block|{
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|Path
argument_list|>
argument_list|>
name|getFiles
parameter_list|(
name|Path
name|leipzigDir
parameter_list|)
throws|throws
name|IOException
block|{
name|Matcher
name|tableMatcher
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"([a-z]+)_table(\\.txt)?(\\.gz)?$"
argument_list|)
operator|.
name|matcher
argument_list|(
literal|""
argument_list|)
decl_stmt|;
name|Matcher
name|leipzigMatcher
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"([a-z]{3,3})[-_].*$"
argument_list|)
operator|.
name|matcher
argument_list|(
literal|""
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|Path
argument_list|>
argument_list|>
name|m
init|=
operator|new
name|TreeMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|File
name|f
range|:
name|leipzigDir
operator|.
name|toFile
argument_list|()
operator|.
name|listFiles
argument_list|()
control|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|f
argument_list|)
expr_stmt|;
name|String
name|lang
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|tableMatcher
operator|.
name|reset
argument_list|(
name|f
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|find
argument_list|()
condition|)
block|{
name|lang
operator|=
name|tableMatcher
operator|.
name|group
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|leipzigMatcher
operator|.
name|reset
argument_list|(
name|f
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|find
argument_list|()
condition|)
block|{
name|lang
operator|=
name|leipzigMatcher
operator|.
name|group
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|lang
operator|==
literal|null
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"couldn't find a lang: "
operator|+
name|f
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|List
argument_list|<
name|Path
argument_list|>
name|files
init|=
name|m
operator|.
name|get
argument_list|(
name|lang
argument_list|)
decl_stmt|;
if|if
condition|(
name|files
operator|==
literal|null
condition|)
block|{
name|files
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
block|}
name|files
operator|.
name|add
argument_list|(
name|f
operator|.
name|toPath
argument_list|()
argument_list|)
expr_stmt|;
name|m
operator|.
name|put
argument_list|(
name|lang
argument_list|,
name|files
argument_list|)
expr_stmt|;
block|}
return|return
name|m
return|;
block|}
block|}
end_class

end_unit

