begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|eval
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Paths
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Types
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ArrayBlockingQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FilenameUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|mutable
operator|.
name|MutableInt
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|tuple
operator|.
name|Pair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|math3
operator|.
name|stat
operator|.
name|descriptive
operator|.
name|SummaryStatistics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|batch
operator|.
name|FileResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|batch
operator|.
name|FileResourceConsumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|batch
operator|.
name|fs
operator|.
name|FSProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|config
operator|.
name|TikaConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|eval
operator|.
name|db
operator|.
name|ColInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|eval
operator|.
name|db
operator|.
name|Cols
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|eval
operator|.
name|db
operator|.
name|TableInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|eval
operator|.
name|io
operator|.
name|ExtractReaderException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|eval
operator|.
name|io
operator|.
name|IDBWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|eval
operator|.
name|langid
operator|.
name|Language
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|eval
operator|.
name|textstats
operator|.
name|BasicTokenCountStatsCalculator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|eval
operator|.
name|textstats
operator|.
name|CommonTokens
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|eval
operator|.
name|textstats
operator|.
name|CompositeTextStatsCalculator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|eval
operator|.
name|textstats
operator|.
name|ContentLengthCalculator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|eval
operator|.
name|textstats
operator|.
name|TextStatsCalculator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|eval
operator|.
name|textstats
operator|.
name|TokenEntropy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|eval
operator|.
name|textstats
operator|.
name|TokenLengths
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|eval
operator|.
name|textstats
operator|.
name|TopNTokens
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|eval
operator|.
name|textstats
operator|.
name|UnicodeBlockCounter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|eval
operator|.
name|tokens
operator|.
name|AnalyzerManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|eval
operator|.
name|tokens
operator|.
name|CommonTokenCountManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|eval
operator|.
name|tokens
operator|.
name|CommonTokenResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|eval
operator|.
name|tokens
operator|.
name|TokenCounts
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|eval
operator|.
name|tokens
operator|.
name|TokenIntPair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|eval
operator|.
name|util
operator|.
name|ContentTags
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|eval
operator|.
name|util
operator|.
name|ContentTagParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|eval
operator|.
name|langid
operator|.
name|LanguageIDWrapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|exception
operator|.
name|TikaException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|metadata
operator|.
name|Metadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|metadata
operator|.
name|PagedText
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|metadata
operator|.
name|TikaCoreProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|sax
operator|.
name|AbstractRecursiveParserWrapperHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|sax
operator|.
name|RecursiveParserWrapperHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|sax
operator|.
name|ToXMLContentHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|utils
operator|.
name|ExceptionUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_class
specifier|public
specifier|abstract
class|class
name|AbstractProfiler
extends|extends
name|FileResourceConsumer
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|AbstractProfiler
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
index|[]
name|EXTRACT_EXTENSIONS
init|=
block|{
literal|".json"
block|,
literal|".txt"
block|,
literal|""
block|}
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
index|[]
name|COMPRESSION_EXTENSIONS
init|=
block|{
literal|""
block|,
literal|".bz2"
block|,
literal|".gzip"
block|,
literal|".zip"
block|,     }
decl_stmt|;
specifier|static
specifier|final
name|long
name|NON_EXISTENT_FILE_LENGTH
init|=
operator|-
literal|1l
decl_stmt|;
specifier|public
specifier|static
name|TableInfo
name|REF_EXTRACT_EXCEPTION_TYPES
init|=
operator|new
name|TableInfo
argument_list|(
literal|"ref_extract_exception_types"
argument_list|,
operator|new
name|ColInfo
argument_list|(
name|Cols
operator|.
name|EXTRACT_EXCEPTION_ID
argument_list|,
name|Types
operator|.
name|INTEGER
argument_list|)
argument_list|,
operator|new
name|ColInfo
argument_list|(
name|Cols
operator|.
name|EXTRACT_EXCEPTION_DESCRIPTION
argument_list|,
name|Types
operator|.
name|VARCHAR
argument_list|,
literal|128
argument_list|)
argument_list|)
decl_stmt|;
specifier|public
specifier|static
name|TableInfo
name|REF_PARSE_ERROR_TYPES
init|=
operator|new
name|TableInfo
argument_list|(
literal|"ref_parse_error_types"
argument_list|,
operator|new
name|ColInfo
argument_list|(
name|Cols
operator|.
name|PARSE_ERROR_ID
argument_list|,
name|Types
operator|.
name|INTEGER
argument_list|)
argument_list|,
operator|new
name|ColInfo
argument_list|(
name|Cols
operator|.
name|PARSE_ERROR_DESCRIPTION
argument_list|,
name|Types
operator|.
name|VARCHAR
argument_list|,
literal|128
argument_list|)
argument_list|)
decl_stmt|;
specifier|public
specifier|static
name|TableInfo
name|REF_PARSE_EXCEPTION_TYPES
init|=
operator|new
name|TableInfo
argument_list|(
literal|"ref_parse_exception_types"
argument_list|,
operator|new
name|ColInfo
argument_list|(
name|Cols
operator|.
name|PARSE_EXCEPTION_ID
argument_list|,
name|Types
operator|.
name|INTEGER
argument_list|)
argument_list|,
operator|new
name|ColInfo
argument_list|(
name|Cols
operator|.
name|PARSE_EXCEPTION_DESCRIPTION
argument_list|,
name|Types
operator|.
name|VARCHAR
argument_list|,
literal|128
argument_list|)
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|TRUE
init|=
name|Boolean
operator|.
name|toString
argument_list|(
literal|true
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|FALSE
init|=
name|Boolean
operator|.
name|toString
argument_list|(
literal|false
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|ZERO
init|=
literal|"0"
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|AtomicInteger
name|ID
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|UNKNOWN_EXTENSION
init|=
literal|"unk"
decl_stmt|;
comment|//make this configurable
specifier|private
specifier|static
specifier|final
name|String
name|DIGEST_KEY
init|=
literal|"X-TIKA:digest:MD5"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Cols
argument_list|>
name|UC_TAGS_OF_INTEREST
init|=
name|initTags
argument_list|()
decl_stmt|;
specifier|private
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|Cols
argument_list|>
name|initTags
parameter_list|()
block|{
comment|//simplify this mess
name|Map
argument_list|<
name|String
argument_list|,
name|Cols
argument_list|>
name|tmp
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|tmp
operator|.
name|put
argument_list|(
literal|"A"
argument_list|,
name|Cols
operator|.
name|TAGS_A
argument_list|)
expr_stmt|;
name|tmp
operator|.
name|put
argument_list|(
literal|"B"
argument_list|,
name|Cols
operator|.
name|TAGS_B
argument_list|)
expr_stmt|;
name|tmp
operator|.
name|put
argument_list|(
literal|"DIV"
argument_list|,
name|Cols
operator|.
name|TAGS_DIV
argument_list|)
expr_stmt|;
name|tmp
operator|.
name|put
argument_list|(
literal|"I"
argument_list|,
name|Cols
operator|.
name|TAGS_I
argument_list|)
expr_stmt|;
name|tmp
operator|.
name|put
argument_list|(
literal|"IMG"
argument_list|,
name|Cols
operator|.
name|TAGS_IMG
argument_list|)
expr_stmt|;
name|tmp
operator|.
name|put
argument_list|(
literal|"LI"
argument_list|,
name|Cols
operator|.
name|TAGS_LI
argument_list|)
expr_stmt|;
name|tmp
operator|.
name|put
argument_list|(
literal|"OL"
argument_list|,
name|Cols
operator|.
name|TAGS_OL
argument_list|)
expr_stmt|;
name|tmp
operator|.
name|put
argument_list|(
literal|"P"
argument_list|,
name|Cols
operator|.
name|TAGS_P
argument_list|)
expr_stmt|;
name|tmp
operator|.
name|put
argument_list|(
literal|"TABLE"
argument_list|,
name|Cols
operator|.
name|TAGS_TABLE
argument_list|)
expr_stmt|;
name|tmp
operator|.
name|put
argument_list|(
literal|"TD"
argument_list|,
name|Cols
operator|.
name|TAGS_TD
argument_list|)
expr_stmt|;
name|tmp
operator|.
name|put
argument_list|(
literal|"TITLE"
argument_list|,
name|Cols
operator|.
name|TAGS_TITLE
argument_list|)
expr_stmt|;
name|tmp
operator|.
name|put
argument_list|(
literal|"TR"
argument_list|,
name|Cols
operator|.
name|TAGS_TR
argument_list|)
expr_stmt|;
name|tmp
operator|.
name|put
argument_list|(
literal|"U"
argument_list|,
name|Cols
operator|.
name|TAGS_U
argument_list|)
expr_stmt|;
name|tmp
operator|.
name|put
argument_list|(
literal|"UL"
argument_list|,
name|Cols
operator|.
name|TAGS_UL
argument_list|)
expr_stmt|;
return|return
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|tmp
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|CommonTokenCountManager
name|COMMON_TOKEN_COUNT_MANAGER
decl_stmt|;
specifier|private
name|String
name|lastExtractExtension
init|=
literal|null
decl_stmt|;
name|AnalyzerManager
name|analyzerManager
decl_stmt|;
specifier|public
enum|enum
name|EXCEPTION_TYPE
block|{
name|RUNTIME
block|,
name|ENCRYPTION
block|,
name|ACCESS_PERMISSION
block|,
name|UNSUPPORTED_VERSION
block|,     }
comment|/**      * If information was gathered from the log file about      * a parse error      */
specifier|public
enum|enum
name|PARSE_ERROR_TYPE
block|{
name|OOM
block|,
name|TIMEOUT
block|}
specifier|public
specifier|static
name|TableInfo
name|MIME_TABLE
init|=
operator|new
name|TableInfo
argument_list|(
literal|"mimes"
argument_list|,
operator|new
name|ColInfo
argument_list|(
name|Cols
operator|.
name|MIME_ID
argument_list|,
name|Types
operator|.
name|INTEGER
argument_list|,
literal|"PRIMARY KEY"
argument_list|)
argument_list|,
operator|new
name|ColInfo
argument_list|(
name|Cols
operator|.
name|MIME_STRING
argument_list|,
name|Types
operator|.
name|VARCHAR
argument_list|,
literal|256
argument_list|)
argument_list|,
operator|new
name|ColInfo
argument_list|(
name|Cols
operator|.
name|FILE_EXTENSION
argument_list|,
name|Types
operator|.
name|VARCHAR
argument_list|,
literal|12
argument_list|)
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|Pattern
name|FILE_NAME_CLEANER
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"\\.(json|txt)(\\.(bz2|gz|zip))?$"
argument_list|)
decl_stmt|;
specifier|final
specifier|static
name|int
name|FILE_PATH_MAX_LEN
init|=
literal|1024
decl_stmt|;
comment|//max len for varchar for file_path
name|int
name|maxContentLength
init|=
literal|10000000
decl_stmt|;
name|int
name|maxContentLengthForLangId
init|=
literal|50000
decl_stmt|;
name|int
name|maxTokens
init|=
literal|200000
decl_stmt|;
comment|//these remove runtime info from the stacktraces so
comment|//that actual causes can be counted.
specifier|private
specifier|final
specifier|static
name|Pattern
name|CAUSED_BY_SNIPPER
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"(Caused by: [^:]+):[^\\r\\n]+"
argument_list|)
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|Pattern
name|ACCESS_PERMISSION_EXCEPTION
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"org\\.apache\\.tika\\.exception\\.AccessPermissionException"
argument_list|)
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|Pattern
name|ENCRYPTION_EXCEPTION
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"org\\.apache\\.tika.exception\\.EncryptedDocumentException"
argument_list|)
decl_stmt|;
specifier|private
name|TikaConfig
name|config
init|=
name|TikaConfig
operator|.
name|getDefaultConfig
argument_list|()
decl_stmt|;
comment|//TODO: allow configuration
name|CompositeTextStatsCalculator
name|compositeTextStatsCalculator
decl_stmt|;
specifier|protected
name|IDBWriter
name|writer
decl_stmt|;
comment|/**      *      * @param p path to the common_tokens directory.  If this is null, try to load from classPath      * @throws IOException      */
specifier|public
specifier|static
name|void
name|loadCommonTokens
parameter_list|(
name|Path
name|p
parameter_list|,
name|String
name|defaultLangCode
parameter_list|)
throws|throws
name|IOException
block|{
name|COMMON_TOKEN_COUNT_MANAGER
operator|=
operator|new
name|CommonTokenCountManager
argument_list|(
name|p
argument_list|,
name|defaultLangCode
argument_list|)
expr_stmt|;
block|}
specifier|public
name|AbstractProfiler
parameter_list|(
name|ArrayBlockingQueue
argument_list|<
name|FileResource
argument_list|>
name|fileQueue
parameter_list|,
name|IDBWriter
name|writer
parameter_list|)
block|{
name|super
argument_list|(
name|fileQueue
argument_list|)
expr_stmt|;
name|this
operator|.
name|writer
operator|=
name|writer
expr_stmt|;
name|LanguageIDWrapper
operator|.
name|setMaxTextLength
argument_list|(
name|maxContentLengthForLangId
argument_list|)
expr_stmt|;
name|this
operator|.
name|compositeTextStatsCalculator
operator|=
name|initAnalyzersAndTokenCounter
argument_list|(
name|maxTokens
argument_list|,
operator|new
name|LanguageIDWrapper
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|CompositeTextStatsCalculator
name|initAnalyzersAndTokenCounter
parameter_list|(
name|int
name|maxTokens
parameter_list|,
name|LanguageIDWrapper
name|langIder
parameter_list|)
block|{
try|try
block|{
name|analyzerManager
operator|=
name|AnalyzerManager
operator|.
name|newInstance
argument_list|(
name|maxTokens
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|TextStatsCalculator
argument_list|>
name|calculators
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|calculators
operator|.
name|add
argument_list|(
operator|new
name|CommonTokens
argument_list|(
name|COMMON_TOKEN_COUNT_MANAGER
argument_list|)
argument_list|)
expr_stmt|;
name|calculators
operator|.
name|add
argument_list|(
operator|new
name|TokenEntropy
argument_list|()
argument_list|)
expr_stmt|;
name|calculators
operator|.
name|add
argument_list|(
operator|new
name|TokenLengths
argument_list|()
argument_list|)
expr_stmt|;
name|calculators
operator|.
name|add
argument_list|(
operator|new
name|TopNTokens
argument_list|(
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|calculators
operator|.
name|add
argument_list|(
operator|new
name|BasicTokenCountStatsCalculator
argument_list|()
argument_list|)
expr_stmt|;
name|calculators
operator|.
name|add
argument_list|(
operator|new
name|ContentLengthCalculator
argument_list|()
argument_list|)
expr_stmt|;
name|calculators
operator|.
name|add
argument_list|(
operator|new
name|UnicodeBlockCounter
argument_list|(
name|maxContentLengthForLangId
argument_list|)
argument_list|)
expr_stmt|;
return|return
operator|new
name|CompositeTextStatsCalculator
argument_list|(
name|calculators
argument_list|,
name|analyzerManager
operator|.
name|getGeneralAnalyzer
argument_list|()
argument_list|,
name|langIder
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**      * Truncate the content string if greater than this length to this length      * @param maxContentLength      */
specifier|public
name|void
name|setMaxContentLength
parameter_list|(
name|int
name|maxContentLength
parameter_list|)
block|{
name|this
operator|.
name|maxContentLength
operator|=
name|maxContentLength
expr_stmt|;
block|}
comment|/**      * Truncate content string if greater than this length to this length for lang id      *      * @param maxContentLengthForLangId      */
specifier|public
name|void
name|setMaxContentLengthForLangId
parameter_list|(
name|int
name|maxContentLengthForLangId
parameter_list|)
block|{
name|this
operator|.
name|maxContentLengthForLangId
operator|=
name|maxContentLengthForLangId
expr_stmt|;
name|LanguageIDWrapper
operator|.
name|setMaxTextLength
argument_list|(
name|maxContentLengthForLangId
argument_list|)
expr_stmt|;
block|}
comment|/**      * Add a LimitTokenCountFilterFactory if&gt; -1      *      * @param maxTokens      */
specifier|public
name|void
name|setMaxTokens
parameter_list|(
name|int
name|maxTokens
parameter_list|)
block|{
name|this
operator|.
name|maxTokens
operator|=
name|maxTokens
expr_stmt|;
name|initAnalyzersAndTokenCounter
argument_list|(
name|maxTokens
argument_list|,
operator|new
name|LanguageIDWrapper
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|writeExtractException
parameter_list|(
name|TableInfo
name|extractExceptionTable
parameter_list|,
name|String
name|containerId
parameter_list|,
name|String
name|filePath
parameter_list|,
name|ExtractReaderException
operator|.
name|TYPE
name|type
parameter_list|)
throws|throws
name|IOException
block|{
name|Map
argument_list|<
name|Cols
argument_list|,
name|String
argument_list|>
name|data
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|data
operator|.
name|put
argument_list|(
name|Cols
operator|.
name|CONTAINER_ID
argument_list|,
name|containerId
argument_list|)
expr_stmt|;
name|data
operator|.
name|put
argument_list|(
name|Cols
operator|.
name|FILE_PATH
argument_list|,
name|filePath
argument_list|)
expr_stmt|;
name|data
operator|.
name|put
argument_list|(
name|Cols
operator|.
name|EXTRACT_EXCEPTION_ID
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|type
operator|.
name|ordinal
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeRow
argument_list|(
name|extractExceptionTable
argument_list|,
name|data
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|writeProfileData
parameter_list|(
name|EvalFilePaths
name|fps
parameter_list|,
name|int
name|i
parameter_list|,
name|ContentTags
name|contentTags
parameter_list|,
name|Metadata
name|m
parameter_list|,
name|String
name|fileId
parameter_list|,
name|String
name|containerId
parameter_list|,
name|List
argument_list|<
name|Integer
argument_list|>
name|numAttachments
parameter_list|,
name|TableInfo
name|profileTable
parameter_list|)
block|{
name|Map
argument_list|<
name|Cols
argument_list|,
name|String
argument_list|>
name|data
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|data
operator|.
name|put
argument_list|(
name|Cols
operator|.
name|ID
argument_list|,
name|fileId
argument_list|)
expr_stmt|;
name|data
operator|.
name|put
argument_list|(
name|Cols
operator|.
name|CONTAINER_ID
argument_list|,
name|containerId
argument_list|)
expr_stmt|;
name|data
operator|.
name|put
argument_list|(
name|Cols
operator|.
name|MD5
argument_list|,
name|m
operator|.
name|get
argument_list|(
name|DIGEST_KEY
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|<
name|numAttachments
operator|.
name|size
argument_list|()
condition|)
block|{
name|data
operator|.
name|put
argument_list|(
name|Cols
operator|.
name|NUM_ATTACHMENTS
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|numAttachments
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|data
operator|.
name|put
argument_list|(
name|Cols
operator|.
name|ELAPSED_TIME_MILLIS
argument_list|,
name|getTime
argument_list|(
name|m
argument_list|)
argument_list|)
expr_stmt|;
name|data
operator|.
name|put
argument_list|(
name|Cols
operator|.
name|NUM_METADATA_VALUES
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|countMetadataValues
argument_list|(
name|m
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Integer
name|nPages
init|=
name|m
operator|.
name|getInt
argument_list|(
name|PagedText
operator|.
name|N_PAGES
argument_list|)
decl_stmt|;
if|if
condition|(
name|nPages
operator|!=
literal|null
condition|)
block|{
name|data
operator|.
name|put
argument_list|(
name|Cols
operator|.
name|NUM_PAGES
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|nPages
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|//if the outer wrapper document
if|if
condition|(
name|i
operator|==
literal|0
condition|)
block|{
name|data
operator|.
name|put
argument_list|(
name|Cols
operator|.
name|IS_EMBEDDED
argument_list|,
name|FALSE
argument_list|)
expr_stmt|;
name|data
operator|.
name|put
argument_list|(
name|Cols
operator|.
name|FILE_NAME
argument_list|,
name|fps
operator|.
name|getRelativeSourceFilePath
argument_list|()
operator|.
name|getFileName
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|data
operator|.
name|put
argument_list|(
name|Cols
operator|.
name|IS_EMBEDDED
argument_list|,
name|TRUE
argument_list|)
expr_stmt|;
name|data
operator|.
name|put
argument_list|(
name|Cols
operator|.
name|FILE_NAME
argument_list|,
name|getFileName
argument_list|(
name|m
operator|.
name|get
argument_list|(
name|AbstractRecursiveParserWrapperHandler
operator|.
name|EMBEDDED_RESOURCE_PATH
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|String
name|ext
init|=
name|FilenameUtils
operator|.
name|getExtension
argument_list|(
name|data
operator|.
name|get
argument_list|(
name|Cols
operator|.
name|FILE_NAME
argument_list|)
argument_list|)
decl_stmt|;
name|ext
operator|=
operator|(
name|ext
operator|==
literal|null
operator|)
condition|?
literal|""
else|:
name|ext
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|US
argument_list|)
expr_stmt|;
name|data
operator|.
name|put
argument_list|(
name|Cols
operator|.
name|FILE_EXTENSION
argument_list|,
name|ext
argument_list|)
expr_stmt|;
name|long
name|srcFileLen
init|=
name|getSourceFileLength
argument_list|(
name|m
argument_list|)
decl_stmt|;
if|if
condition|(
name|srcFileLen
operator|>
name|NON_EXISTENT_FILE_LENGTH
condition|)
block|{
name|data
operator|.
name|put
argument_list|(
name|Cols
operator|.
name|LENGTH
argument_list|,
name|Long
operator|.
name|toString
argument_list|(
name|srcFileLen
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|data
operator|.
name|put
argument_list|(
name|Cols
operator|.
name|LENGTH
argument_list|,
literal|""
argument_list|)
expr_stmt|;
block|}
name|int
name|numMetadataValues
init|=
name|countMetadataValues
argument_list|(
name|m
argument_list|)
decl_stmt|;
name|data
operator|.
name|put
argument_list|(
name|Cols
operator|.
name|NUM_METADATA_VALUES
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|numMetadataValues
argument_list|)
argument_list|)
expr_stmt|;
name|data
operator|.
name|put
argument_list|(
name|Cols
operator|.
name|ELAPSED_TIME_MILLIS
argument_list|,
name|getTime
argument_list|(
name|m
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|content
init|=
name|contentTags
operator|.
name|getContent
argument_list|()
decl_stmt|;
if|if
condition|(
name|content
operator|==
literal|null
operator|||
name|content
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
name|data
operator|.
name|put
argument_list|(
name|Cols
operator|.
name|HAS_CONTENT
argument_list|,
name|FALSE
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|data
operator|.
name|put
argument_list|(
name|Cols
operator|.
name|HAS_CONTENT
argument_list|,
name|TRUE
argument_list|)
expr_stmt|;
block|}
name|getFileTypes
argument_list|(
name|m
argument_list|,
name|data
argument_list|)
expr_stmt|;
try|try
block|{
name|writer
operator|.
name|writeRow
argument_list|(
name|profileTable
argument_list|,
name|data
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|static
name|String
name|getFileName
parameter_list|(
name|String
name|path
parameter_list|)
block|{
if|if
condition|(
name|path
operator|==
literal|null
condition|)
block|{
return|return
literal|""
return|;
block|}
comment|//filenameUtils checks for a null byte in the path.
comment|//it will throw an IllegalArgumentException if there is a null byte.
comment|//given that we're recording names and not using them on a file path
comment|//we should ignore this.
try|try
block|{
return|return
name|FilenameUtils
operator|.
name|getName
argument_list|(
name|path
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"{} in {}"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
name|path
operator|=
name|path
operator|.
name|replaceAll
argument_list|(
literal|"\u0000"
argument_list|,
literal|" "
argument_list|)
expr_stmt|;
try|try
block|{
return|return
name|FilenameUtils
operator|.
name|getName
argument_list|(
name|path
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Again: {} in {}"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
comment|//give up
return|return
literal|""
return|;
block|}
specifier|protected
name|void
name|writeExceptionData
parameter_list|(
name|String
name|fileId
parameter_list|,
name|Metadata
name|m
parameter_list|,
name|TableInfo
name|exceptionTable
parameter_list|)
block|{
name|Map
argument_list|<
name|Cols
argument_list|,
name|String
argument_list|>
name|data
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|getExceptionStrings
argument_list|(
name|m
argument_list|,
name|data
argument_list|)
expr_stmt|;
if|if
condition|(
name|data
operator|.
name|keySet
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
try|try
block|{
name|data
operator|.
name|put
argument_list|(
name|Cols
operator|.
name|ID
argument_list|,
name|fileId
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeRow
argument_list|(
name|exceptionTable
argument_list|,
name|data
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
specifier|protected
name|Map
argument_list|<
name|Class
argument_list|,
name|Object
argument_list|>
name|calcTextStats
parameter_list|(
name|ContentTags
name|contentTags
parameter_list|)
block|{
comment|/*        if (contentTags == ContentTags.EMPTY_CONTENT_TAGS) {             return Collections.EMPTY_MAP;         }*/
name|Map
argument_list|<
name|Cols
argument_list|,
name|String
argument_list|>
name|data
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|String
name|content
init|=
name|truncateContent
argument_list|(
name|contentTags
argument_list|,
name|maxContentLength
argument_list|,
name|data
argument_list|)
decl_stmt|;
if|if
condition|(
name|content
operator|==
literal|null
operator|||
name|content
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
name|content
operator|=
literal|""
expr_stmt|;
block|}
return|return
name|compositeTextStatsCalculator
operator|.
name|calculate
argument_list|(
name|content
argument_list|)
return|;
block|}
comment|/**      * Checks to see if metadata is null or content is empty (null or only whitespace).      * If any of these, then this does no processing, and the fileId is not      * entered into the content table.      *      * @param fileId      * @param textStats      * @param contentsTable      */
specifier|protected
name|void
name|writeContentData
parameter_list|(
name|String
name|fileId
parameter_list|,
name|Map
argument_list|<
name|Class
argument_list|,
name|Object
argument_list|>
name|textStats
parameter_list|,
name|TableInfo
name|contentsTable
parameter_list|)
throws|throws
name|IOException
block|{
name|Map
argument_list|<
name|Cols
argument_list|,
name|String
argument_list|>
name|data
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|data
operator|.
name|put
argument_list|(
name|Cols
operator|.
name|ID
argument_list|,
name|fileId
argument_list|)
expr_stmt|;
if|if
condition|(
name|textStats
operator|.
name|containsKey
argument_list|(
name|ContentLengthCalculator
operator|.
name|class
argument_list|)
condition|)
block|{
name|data
operator|.
name|put
argument_list|(
name|Cols
operator|.
name|CONTENT_LENGTH
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
operator|(
name|Integer
operator|)
name|textStats
operator|.
name|get
argument_list|(
name|ContentLengthCalculator
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|data
operator|.
name|put
argument_list|(
name|Cols
operator|.
name|CONTENT_LENGTH
argument_list|,
literal|"0"
argument_list|)
expr_stmt|;
block|}
name|langid
argument_list|(
name|textStats
argument_list|,
name|data
argument_list|)
expr_stmt|;
name|writeTokenCounts
argument_list|(
name|textStats
argument_list|,
name|data
argument_list|)
expr_stmt|;
name|CommonTokenResult
name|commonTokenResult
init|=
operator|(
name|CommonTokenResult
operator|)
name|textStats
operator|.
name|get
argument_list|(
name|CommonTokens
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|commonTokenResult
operator|!=
literal|null
condition|)
block|{
name|data
operator|.
name|put
argument_list|(
name|Cols
operator|.
name|COMMON_TOKENS_LANG
argument_list|,
name|commonTokenResult
operator|.
name|getLangCode
argument_list|()
argument_list|)
expr_stmt|;
name|data
operator|.
name|put
argument_list|(
name|Cols
operator|.
name|NUM_UNIQUE_COMMON_TOKENS
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|commonTokenResult
operator|.
name|getUniqueCommonTokens
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|data
operator|.
name|put
argument_list|(
name|Cols
operator|.
name|NUM_COMMON_TOKENS
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|commonTokenResult
operator|.
name|getCommonTokens
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|data
operator|.
name|put
argument_list|(
name|Cols
operator|.
name|NUM_UNIQUE_ALPHABETIC_TOKENS
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|commonTokenResult
operator|.
name|getUniqueAlphabeticTokens
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|data
operator|.
name|put
argument_list|(
name|Cols
operator|.
name|NUM_ALPHABETIC_TOKENS
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|commonTokenResult
operator|.
name|getAlphabeticTokens
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|TokenCounts
name|tokenCounts
init|=
operator|(
name|TokenCounts
operator|)
name|textStats
operator|.
name|get
argument_list|(
name|BasicTokenCountStatsCalculator
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|tokenCounts
operator|!=
literal|null
condition|)
block|{
name|data
operator|.
name|put
argument_list|(
name|Cols
operator|.
name|NUM_UNIQUE_TOKENS
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|tokenCounts
operator|.
name|getTotalUniqueTokens
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|data
operator|.
name|put
argument_list|(
name|Cols
operator|.
name|NUM_TOKENS
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|tokenCounts
operator|.
name|getTotalTokens
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|textStats
operator|.
name|get
argument_list|(
name|TokenEntropy
operator|.
name|class
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|data
operator|.
name|put
argument_list|(
name|Cols
operator|.
name|TOKEN_ENTROPY_RATE
argument_list|,
name|Double
operator|.
name|toString
argument_list|(
operator|(
name|Double
operator|)
name|textStats
operator|.
name|get
argument_list|(
name|TokenEntropy
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|SummaryStatistics
name|summStats
init|=
operator|(
name|SummaryStatistics
operator|)
name|textStats
operator|.
name|get
argument_list|(
name|TokenLengths
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|summStats
operator|!=
literal|null
condition|)
block|{
name|data
operator|.
name|put
argument_list|(
name|Cols
operator|.
name|TOKEN_LENGTH_SUM
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
operator|(
name|int
operator|)
name|summStats
operator|.
name|getSum
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|data
operator|.
name|put
argument_list|(
name|Cols
operator|.
name|TOKEN_LENGTH_MEAN
argument_list|,
name|Double
operator|.
name|toString
argument_list|(
name|summStats
operator|.
name|getMean
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|data
operator|.
name|put
argument_list|(
name|Cols
operator|.
name|TOKEN_LENGTH_STD_DEV
argument_list|,
name|Double
operator|.
name|toString
argument_list|(
name|summStats
operator|.
name|getStandardDeviation
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|unicodeBlocks
argument_list|(
name|textStats
argument_list|,
name|data
argument_list|)
expr_stmt|;
try|try
block|{
name|writer
operator|.
name|writeRow
argument_list|(
name|contentsTable
argument_list|,
name|data
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
name|void
name|writeTagData
parameter_list|(
name|String
name|fileId
parameter_list|,
name|ContentTags
name|contentTags
parameter_list|,
name|TableInfo
name|tagsTable
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|tags
init|=
name|contentTags
operator|.
name|getTags
argument_list|()
decl_stmt|;
if|if
condition|(
name|tags
operator|.
name|size
argument_list|()
operator|==
literal|0
operator|&&
name|contentTags
operator|.
name|getParseException
argument_list|()
operator|==
literal|false
condition|)
block|{
return|return;
block|}
name|Map
argument_list|<
name|Cols
argument_list|,
name|String
argument_list|>
name|data
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|data
operator|.
name|put
argument_list|(
name|Cols
operator|.
name|ID
argument_list|,
name|fileId
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Cols
argument_list|>
name|e
range|:
name|UC_TAGS_OF_INTEREST
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|Integer
name|count
init|=
name|tags
operator|.
name|get
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|count
operator|==
literal|null
condition|)
block|{
name|data
operator|.
name|put
argument_list|(
name|e
operator|.
name|getValue
argument_list|()
argument_list|,
name|ZERO
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|data
operator|.
name|put
argument_list|(
name|e
operator|.
name|getValue
argument_list|()
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|count
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|contentTags
operator|.
name|getParseException
argument_list|()
condition|)
block|{
name|data
operator|.
name|put
argument_list|(
name|Cols
operator|.
name|TAGS_PARSE_EXCEPTION
argument_list|,
name|TRUE
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|data
operator|.
name|put
argument_list|(
name|Cols
operator|.
name|TAGS_PARSE_EXCEPTION
argument_list|,
name|FALSE
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|writer
operator|.
name|writeRow
argument_list|(
name|tagsTable
argument_list|,
name|data
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
name|String
name|getTime
parameter_list|(
name|Metadata
name|m
parameter_list|)
block|{
name|String
name|elapsed
init|=
literal|"-1"
decl_stmt|;
name|String
name|v
init|=
name|m
operator|.
name|get
argument_list|(
name|AbstractRecursiveParserWrapperHandler
operator|.
name|PARSE_TIME_MILLIS
argument_list|)
decl_stmt|;
if|if
condition|(
name|v
operator|!=
literal|null
condition|)
block|{
return|return
name|v
return|;
block|}
return|return
name|elapsed
return|;
block|}
name|int
name|countMetadataValues
parameter_list|(
name|Metadata
name|m
parameter_list|)
block|{
if|if
condition|(
name|m
operator|==
literal|null
condition|)
block|{
return|return
literal|0
return|;
block|}
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|String
name|n
range|:
name|m
operator|.
name|names
argument_list|()
control|)
block|{
name|i
operator|+=
name|m
operator|.
name|getValues
argument_list|(
name|n
argument_list|)
operator|.
name|length
expr_stmt|;
block|}
return|return
name|i
return|;
block|}
name|void
name|getExceptionStrings
parameter_list|(
name|Metadata
name|metadata
parameter_list|,
name|Map
argument_list|<
name|Cols
argument_list|,
name|String
argument_list|>
name|data
parameter_list|)
block|{
name|String
name|fullTrace
init|=
name|metadata
operator|.
name|get
argument_list|(
name|TikaCoreProperties
operator|.
name|TIKA_META_EXCEPTION_PREFIX
operator|+
literal|"runtime"
argument_list|)
decl_stmt|;
if|if
condition|(
name|fullTrace
operator|==
literal|null
condition|)
block|{
name|fullTrace
operator|=
name|metadata
operator|.
name|get
argument_list|(
name|AbstractRecursiveParserWrapperHandler
operator|.
name|EMBEDDED_EXCEPTION
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|fullTrace
operator|!=
literal|null
condition|)
block|{
comment|//check for "expected" exceptions...exceptions
comment|//that can't be fixed.
comment|//Do not store trace for "expected" exceptions
name|Matcher
name|matcher
init|=
name|ACCESS_PERMISSION_EXCEPTION
operator|.
name|matcher
argument_list|(
name|fullTrace
argument_list|)
decl_stmt|;
if|if
condition|(
name|matcher
operator|.
name|find
argument_list|()
condition|)
block|{
name|data
operator|.
name|put
argument_list|(
name|Cols
operator|.
name|PARSE_EXCEPTION_ID
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|EXCEPTION_TYPE
operator|.
name|ACCESS_PERMISSION
operator|.
name|ordinal
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|matcher
operator|=
name|ENCRYPTION_EXCEPTION
operator|.
name|matcher
argument_list|(
name|fullTrace
argument_list|)
expr_stmt|;
if|if
condition|(
name|matcher
operator|.
name|find
argument_list|()
condition|)
block|{
name|data
operator|.
name|put
argument_list|(
name|Cols
operator|.
name|PARSE_EXCEPTION_ID
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|EXCEPTION_TYPE
operator|.
name|ENCRYPTION
operator|.
name|ordinal
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|data
operator|.
name|put
argument_list|(
name|Cols
operator|.
name|PARSE_EXCEPTION_ID
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|EXCEPTION_TYPE
operator|.
name|RUNTIME
operator|.
name|ordinal
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|data
operator|.
name|put
argument_list|(
name|Cols
operator|.
name|ORIG_STACK_TRACE
argument_list|,
name|fullTrace
argument_list|)
expr_stmt|;
comment|//TikaExceptions can have object ids, as in the "@2b1ea6ee" in:
comment|//org.apache.tika.exception.TikaException: TIKA-198: Illegal
comment|//IOException from org.apache.tika.parser.microsoft.OfficeParser@2b1ea6ee
comment|//For reporting purposes, let's snip off the object id so that we can more
comment|//easily count exceptions.
name|String
name|sortTrace
init|=
name|ExceptionUtils
operator|.
name|trimMessage
argument_list|(
name|fullTrace
argument_list|)
decl_stmt|;
name|matcher
operator|=
name|CAUSED_BY_SNIPPER
operator|.
name|matcher
argument_list|(
name|sortTrace
argument_list|)
expr_stmt|;
name|sortTrace
operator|=
name|matcher
operator|.
name|replaceAll
argument_list|(
literal|"$1"
argument_list|)
expr_stmt|;
name|sortTrace
operator|=
name|sortTrace
operator|.
name|replaceAll
argument_list|(
literal|"org.apache.tika."
argument_list|,
literal|"o.a.t."
argument_list|)
expr_stmt|;
name|data
operator|.
name|put
argument_list|(
name|Cols
operator|.
name|SORT_STACK_TRACE
argument_list|,
name|sortTrace
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Get the content and record in the data {@link Cols#CONTENT_TRUNCATED_AT_MAX_LEN} whether the string was truncated      *      * @param contentTags      * @param maxLength      * @param data      * @return      */
specifier|protected
specifier|static
name|String
name|truncateContent
parameter_list|(
name|ContentTags
name|contentTags
parameter_list|,
name|int
name|maxLength
parameter_list|,
name|Map
argument_list|<
name|Cols
argument_list|,
name|String
argument_list|>
name|data
parameter_list|)
block|{
name|data
operator|.
name|put
argument_list|(
name|Cols
operator|.
name|CONTENT_TRUNCATED_AT_MAX_LEN
argument_list|,
literal|"FALSE"
argument_list|)
expr_stmt|;
if|if
condition|(
name|contentTags
operator|==
literal|null
condition|)
block|{
return|return
literal|""
return|;
block|}
name|String
name|c
init|=
name|contentTags
operator|.
name|getContent
argument_list|()
decl_stmt|;
if|if
condition|(
name|maxLength
operator|>
operator|-
literal|1
operator|&&
name|c
operator|.
name|length
argument_list|()
operator|>
name|maxLength
condition|)
block|{
name|c
operator|=
name|c
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|maxLength
argument_list|)
expr_stmt|;
name|data
operator|.
name|put
argument_list|(
name|Cols
operator|.
name|CONTENT_TRUNCATED_AT_MAX_LEN
argument_list|,
literal|"TRUE"
argument_list|)
expr_stmt|;
block|}
return|return
name|c
return|;
block|}
specifier|protected
specifier|static
name|ContentTags
name|getContent
parameter_list|(
name|EvalFilePaths
name|evalFilePaths
parameter_list|,
name|Metadata
name|metadata
parameter_list|)
block|{
if|if
condition|(
name|metadata
operator|==
literal|null
condition|)
block|{
return|return
name|ContentTags
operator|.
name|EMPTY_CONTENT_TAGS
return|;
block|}
return|return
name|parseContentAndTags
argument_list|(
name|evalFilePaths
argument_list|,
name|metadata
argument_list|)
return|;
block|}
name|void
name|unicodeBlocks
parameter_list|(
name|Map
argument_list|<
name|Class
argument_list|,
name|Object
argument_list|>
name|tokenStats
parameter_list|,
name|Map
argument_list|<
name|Cols
argument_list|,
name|String
argument_list|>
name|data
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|MutableInt
argument_list|>
name|blocks
init|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|MutableInt
argument_list|>
operator|)
name|tokenStats
operator|.
name|get
argument_list|(
name|UnicodeBlockCounter
operator|.
name|class
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Pair
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|>
name|pairs
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|MutableInt
argument_list|>
name|e
range|:
name|blocks
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|pairs
operator|.
name|add
argument_list|(
name|Pair
operator|.
name|of
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|,
name|e
operator|.
name|getValue
argument_list|()
operator|.
name|intValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Collections
operator|.
name|sort
argument_list|(
name|pairs
argument_list|,
operator|new
name|Comparator
argument_list|<
name|Pair
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|Pair
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|o1
parameter_list|,
name|Pair
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|o2
parameter_list|)
block|{
return|return
name|o2
operator|.
name|getValue
argument_list|()
operator|.
name|compareTo
argument_list|(
name|o1
operator|.
name|getValue
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|20
operator|&&
name|i
operator|<
name|pairs
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|>
literal|0
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|" | "
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
name|pairs
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getKey
argument_list|()
operator|+
literal|": "
operator|+
name|pairs
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|data
operator|.
name|put
argument_list|(
name|Cols
operator|.
name|UNICODE_CHAR_BLOCKS
argument_list|,
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|void
name|langid
parameter_list|(
name|Map
argument_list|<
name|Class
argument_list|,
name|Object
argument_list|>
name|stats
parameter_list|,
name|Map
argument_list|<
name|Cols
argument_list|,
name|String
argument_list|>
name|data
parameter_list|)
block|{
name|List
argument_list|<
name|Language
argument_list|>
name|probabilities
init|=
operator|(
name|List
argument_list|<
name|Language
argument_list|>
operator|)
name|stats
operator|.
name|get
argument_list|(
name|LanguageIDWrapper
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|probabilities
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|data
operator|.
name|put
argument_list|(
name|Cols
operator|.
name|LANG_ID_1
argument_list|,
name|probabilities
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getLanguage
argument_list|()
argument_list|)
expr_stmt|;
name|data
operator|.
name|put
argument_list|(
name|Cols
operator|.
name|LANG_ID_PROB_1
argument_list|,
name|Double
operator|.
name|toString
argument_list|(
name|probabilities
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getConfidence
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|probabilities
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
name|data
operator|.
name|put
argument_list|(
name|Cols
operator|.
name|LANG_ID_2
argument_list|,
name|probabilities
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getLanguage
argument_list|()
argument_list|)
expr_stmt|;
name|data
operator|.
name|put
argument_list|(
name|Cols
operator|.
name|LANG_ID_PROB_2
argument_list|,
name|Double
operator|.
name|toString
argument_list|(
name|probabilities
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getConfidence
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|void
name|getFileTypes
parameter_list|(
name|Metadata
name|metadata
parameter_list|,
name|Map
argument_list|<
name|Cols
argument_list|,
name|String
argument_list|>
name|output
parameter_list|)
block|{
if|if
condition|(
name|metadata
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|String
name|type
init|=
name|metadata
operator|.
name|get
argument_list|(
name|Metadata
operator|.
name|CONTENT_TYPE
argument_list|)
decl_stmt|;
if|if
condition|(
name|type
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|int
name|mimeId
init|=
name|writer
operator|.
name|getMimeId
argument_list|(
name|type
argument_list|)
decl_stmt|;
name|output
operator|.
name|put
argument_list|(
name|Cols
operator|.
name|MIME_ID
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|mimeId
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|void
name|writeTokenCounts
parameter_list|(
name|Map
argument_list|<
name|Class
argument_list|,
name|Object
argument_list|>
name|textStats
parameter_list|,
name|Map
argument_list|<
name|Cols
argument_list|,
name|String
argument_list|>
name|data
parameter_list|)
block|{
name|TokenIntPair
index|[]
name|tokenIntPairs
init|=
operator|(
name|TokenIntPair
index|[]
operator|)
name|textStats
operator|.
name|get
argument_list|(
name|TopNTokens
operator|.
name|class
argument_list|)
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|TokenIntPair
name|t
range|:
name|tokenIntPairs
control|)
block|{
if|if
condition|(
name|i
operator|++
operator|>
literal|0
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|" | "
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
name|t
operator|.
name|getToken
argument_list|()
operator|+
literal|": "
operator|+
name|t
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|data
operator|.
name|put
argument_list|(
name|Cols
operator|.
name|TOP_N_TOKENS
argument_list|,
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|closeWriter
parameter_list|()
throws|throws
name|IOException
block|{
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/**      *      * @param metadata      * @param extracts      * @return evalfilepaths for files if crawling an extract directory      */
specifier|protected
name|EvalFilePaths
name|getPathsFromExtractCrawl
parameter_list|(
name|Metadata
name|metadata
parameter_list|,
name|Path
name|extracts
parameter_list|)
block|{
name|String
name|relExtractFilePath
init|=
name|metadata
operator|.
name|get
argument_list|(
name|FSProperties
operator|.
name|FS_REL_PATH
argument_list|)
decl_stmt|;
name|Matcher
name|m
init|=
name|FILE_NAME_CLEANER
operator|.
name|matcher
argument_list|(
name|relExtractFilePath
argument_list|)
decl_stmt|;
name|Path
name|relativeSourceFilePath
init|=
name|Paths
operator|.
name|get
argument_list|(
name|m
operator|.
name|replaceAll
argument_list|(
literal|""
argument_list|)
argument_list|)
decl_stmt|;
comment|//just try slapping the relextractfilepath on the extractdir
name|Path
name|extractFile
init|=
name|extracts
operator|.
name|resolve
argument_list|(
name|relExtractFilePath
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|Files
operator|.
name|isRegularFile
argument_list|(
name|extractFile
argument_list|)
condition|)
block|{
comment|//if that doesn't work, try to find the right extract file.
comment|//This is necessary if crawling extractsA and trying to find a file in
comment|//extractsB that is not in the same format: json vs txt or compressed
name|extractFile
operator|=
name|findFile
argument_list|(
name|extracts
argument_list|,
name|relativeSourceFilePath
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|EvalFilePaths
argument_list|(
name|relativeSourceFilePath
argument_list|,
name|extractFile
argument_list|)
return|;
block|}
comment|//call this if the crawler is crawling through the src directory
specifier|protected
name|EvalFilePaths
name|getPathsFromSrcCrawl
parameter_list|(
name|Metadata
name|metadata
parameter_list|,
name|Path
name|srcDir
parameter_list|,
name|Path
name|extracts
parameter_list|)
block|{
name|Path
name|relativeSourceFilePath
init|=
name|Paths
operator|.
name|get
argument_list|(
name|metadata
operator|.
name|get
argument_list|(
name|FSProperties
operator|.
name|FS_REL_PATH
argument_list|)
argument_list|)
decl_stmt|;
name|Path
name|extractFile
init|=
name|findFile
argument_list|(
name|extracts
argument_list|,
name|relativeSourceFilePath
argument_list|)
decl_stmt|;
name|Path
name|inputFile
init|=
name|srcDir
operator|.
name|resolve
argument_list|(
name|relativeSourceFilePath
argument_list|)
decl_stmt|;
name|long
name|srcLen
init|=
operator|-
literal|1l
decl_stmt|;
comment|//try to get the length of the source file in case there was an error
comment|//in both extracts
try|try
block|{
name|srcLen
operator|=
name|Files
operator|.
name|size
argument_list|(
name|inputFile
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Couldn't get length for: {}"
argument_list|,
name|inputFile
operator|.
name|toAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|EvalFilePaths
argument_list|(
name|relativeSourceFilePath
argument_list|,
name|extractFile
argument_list|,
name|srcLen
argument_list|)
return|;
block|}
comment|/**      *      * @param extractRootDir      * @param relativeSourceFilePath      * @return extractFile or null if couldn't find one.      */
specifier|private
name|Path
name|findFile
parameter_list|(
name|Path
name|extractRootDir
parameter_list|,
name|Path
name|relativeSourceFilePath
parameter_list|)
block|{
name|String
name|relSrcFilePathString
init|=
name|relativeSourceFilePath
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
name|lastExtractExtension
operator|!=
literal|null
condition|)
block|{
name|Path
name|candidate
init|=
name|extractRootDir
operator|.
name|resolve
argument_list|(
name|relSrcFilePathString
operator|+
name|lastExtractExtension
argument_list|)
decl_stmt|;
if|if
condition|(
name|Files
operator|.
name|isRegularFile
argument_list|(
name|candidate
argument_list|)
condition|)
block|{
return|return
name|candidate
return|;
block|}
block|}
for|for
control|(
name|String
name|ext
range|:
name|EXTRACT_EXTENSIONS
control|)
block|{
for|for
control|(
name|String
name|compress
range|:
name|COMPRESSION_EXTENSIONS
control|)
block|{
name|Path
name|candidate
init|=
name|extractRootDir
operator|.
name|resolve
argument_list|(
name|relSrcFilePathString
operator|+
name|ext
operator|+
name|compress
argument_list|)
decl_stmt|;
if|if
condition|(
name|Files
operator|.
name|isRegularFile
argument_list|(
name|candidate
argument_list|)
condition|)
block|{
name|lastExtractExtension
operator|=
name|ext
operator|+
name|compress
expr_stmt|;
return|return
name|candidate
return|;
block|}
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|protected
name|long
name|getSourceFileLength
parameter_list|(
name|EvalFilePaths
name|fps
parameter_list|,
name|List
argument_list|<
name|Metadata
argument_list|>
name|metadataList
parameter_list|)
block|{
if|if
condition|(
name|fps
operator|.
name|getSourceFileLength
argument_list|()
operator|>
name|NON_EXISTENT_FILE_LENGTH
condition|)
block|{
return|return
name|fps
operator|.
name|getSourceFileLength
argument_list|()
return|;
block|}
return|return
name|getSourceFileLength
argument_list|(
name|metadataList
argument_list|)
return|;
block|}
name|long
name|getSourceFileLength
parameter_list|(
name|List
argument_list|<
name|Metadata
argument_list|>
name|metadataList
parameter_list|)
block|{
if|if
condition|(
name|metadataList
operator|==
literal|null
operator|||
name|metadataList
operator|.
name|size
argument_list|()
operator|<
literal|1
condition|)
block|{
return|return
name|NON_EXISTENT_FILE_LENGTH
return|;
block|}
return|return
name|getSourceFileLength
argument_list|(
name|metadataList
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
return|;
block|}
name|long
name|getSourceFileLength
parameter_list|(
name|Metadata
name|m
parameter_list|)
block|{
name|String
name|lenString
init|=
name|m
operator|.
name|get
argument_list|(
name|Metadata
operator|.
name|CONTENT_LENGTH
argument_list|)
decl_stmt|;
if|if
condition|(
name|lenString
operator|==
literal|null
condition|)
block|{
return|return
name|NON_EXISTENT_FILE_LENGTH
return|;
block|}
try|try
block|{
return|return
name|Long
operator|.
name|parseLong
argument_list|(
name|lenString
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
comment|//swallow
block|}
return|return
name|NON_EXISTENT_FILE_LENGTH
return|;
block|}
specifier|protected
name|long
name|getFileLength
parameter_list|(
name|Path
name|p
parameter_list|)
block|{
if|if
condition|(
name|p
operator|!=
literal|null
operator|&&
name|Files
operator|.
name|isRegularFile
argument_list|(
name|p
argument_list|)
condition|)
block|{
try|try
block|{
return|return
name|Files
operator|.
name|size
argument_list|(
name|p
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|//swallow
block|}
block|}
return|return
name|NON_EXISTENT_FILE_LENGTH
return|;
block|}
comment|/**      *      * @param list      * @return empty list if input list is empty or null      */
specifier|static
name|List
argument_list|<
name|Integer
argument_list|>
name|countAttachments
parameter_list|(
name|List
argument_list|<
name|Metadata
argument_list|>
name|list
parameter_list|)
block|{
name|List
argument_list|<
name|Integer
argument_list|>
name|ret
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|list
operator|==
literal|null
operator|||
name|list
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
name|ret
return|;
block|}
comment|//container document attachment count = list.size()-1
name|ret
operator|.
name|add
argument_list|(
name|list
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|counts
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|list
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|String
name|path
init|=
name|list
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|get
argument_list|(
name|AbstractRecursiveParserWrapperHandler
operator|.
name|EMBEDDED_RESOURCE_PATH
argument_list|)
decl_stmt|;
if|if
condition|(
name|path
operator|==
literal|null
condition|)
block|{
comment|//shouldn't ever happen
continue|continue;
block|}
name|String
index|[]
name|parts
init|=
name|path
operator|.
name|split
argument_list|(
literal|"/"
argument_list|)
decl_stmt|;
name|StringBuilder
name|parent
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|end
init|=
literal|1
init|;
name|end
operator|<
name|parts
operator|.
name|length
operator|-
literal|1
condition|;
name|end
operator|++
control|)
block|{
name|parent
operator|.
name|setLength
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|join
argument_list|(
literal|"/"
argument_list|,
name|parent
argument_list|,
name|parts
argument_list|,
literal|1
argument_list|,
name|end
argument_list|)
expr_stmt|;
name|String
name|parentPath
init|=
name|parent
operator|.
name|toString
argument_list|()
decl_stmt|;
name|Integer
name|count
init|=
name|counts
operator|.
name|get
argument_list|(
name|parentPath
argument_list|)
decl_stmt|;
if|if
condition|(
name|count
operator|==
literal|null
condition|)
block|{
name|count
operator|=
literal|1
expr_stmt|;
block|}
else|else
block|{
name|count
operator|++
expr_stmt|;
block|}
name|counts
operator|.
name|put
argument_list|(
name|parentPath
argument_list|,
name|count
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|list
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Integer
name|count
init|=
name|counts
operator|.
name|get
argument_list|(
name|list
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|get
argument_list|(
name|AbstractRecursiveParserWrapperHandler
operator|.
name|EMBEDDED_RESOURCE_PATH
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|count
operator|==
literal|null
condition|)
block|{
name|count
operator|=
literal|0
expr_stmt|;
block|}
name|ret
operator|.
name|add
argument_list|(
name|i
argument_list|,
name|count
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
specifier|private
specifier|static
name|void
name|join
parameter_list|(
name|String
name|delimiter
parameter_list|,
name|StringBuilder
name|sb
parameter_list|,
name|String
index|[]
name|parts
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|end
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
name|start
init|;
name|i
operator|<=
name|end
condition|;
name|i
operator|++
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|delimiter
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|parts
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|ContentTags
name|parseContentAndTags
parameter_list|(
name|EvalFilePaths
name|evalFilePaths
parameter_list|,
name|Metadata
name|metadata
parameter_list|)
block|{
name|String
name|s
init|=
name|metadata
operator|.
name|get
argument_list|(
name|RecursiveParserWrapperHandler
operator|.
name|TIKA_CONTENT
argument_list|)
decl_stmt|;
if|if
condition|(
name|s
operator|==
literal|null
operator|||
name|s
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
name|ContentTags
operator|.
name|EMPTY_CONTENT_TAGS
return|;
block|}
name|String
name|handlerClass
init|=
name|metadata
operator|.
name|get
argument_list|(
name|RecursiveParserWrapperHandler
operator|.
name|TIKA_CONTENT_HANDLER
argument_list|)
decl_stmt|;
if|if
condition|(
name|evalFilePaths
operator|.
name|getExtractFile
argument_list|()
operator|.
name|getFileName
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|ENGLISH
argument_list|)
operator|.
name|endsWith
argument_list|(
literal|".html"
argument_list|)
condition|)
block|{
try|try
block|{
return|return
name|ContentTagParser
operator|.
name|parseHTML
argument_list|(
name|s
argument_list|,
name|UC_TAGS_OF_INTEREST
operator|.
name|keySet
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
decl||
name|SAXException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Problem parsing html in {}; backing off to treat string as text"
argument_list|,
name|evalFilePaths
operator|.
name|getExtractFile
argument_list|()
operator|.
name|toAbsolutePath
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
operator|new
name|ContentTags
argument_list|(
name|s
argument_list|,
literal|true
argument_list|)
return|;
block|}
block|}
elseif|else
if|if
condition|(
name|evalFilePaths
operator|.
name|getExtractFile
argument_list|()
operator|.
name|getFileName
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|ENGLISH
argument_list|)
operator|.
name|endsWith
argument_list|(
literal|".xhtml"
argument_list|)
operator|||
operator|(
name|handlerClass
operator|!=
literal|null
operator|&&
name|handlerClass
operator|.
name|equals
argument_list|(
name|ToXMLContentHandler
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
argument_list|)
operator|)
condition|)
block|{
try|try
block|{
return|return
name|ContentTagParser
operator|.
name|parseXML
argument_list|(
name|s
argument_list|,
name|UC_TAGS_OF_INTEREST
operator|.
name|keySet
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|TikaException
decl||
name|IOException
decl||
name|SAXException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Problem parsing xhtml in {}; backing off to html parser"
argument_list|,
name|evalFilePaths
operator|.
name|getExtractFile
argument_list|()
operator|.
name|toAbsolutePath
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
try|try
block|{
name|ContentTags
name|contentTags
init|=
name|ContentTagParser
operator|.
name|parseHTML
argument_list|(
name|s
argument_list|,
name|UC_TAGS_OF_INTEREST
operator|.
name|keySet
argument_list|()
argument_list|)
decl_stmt|;
name|contentTags
operator|.
name|setParseException
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|contentTags
return|;
block|}
catch|catch
parameter_list|(
name|IOException
decl||
name|SAXException
name|e2
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Problem parsing html in {}; backing off to treat string as text"
argument_list|,
name|evalFilePaths
operator|.
name|getExtractFile
argument_list|()
operator|.
name|toAbsolutePath
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|e2
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|ContentTags
argument_list|(
name|s
argument_list|,
literal|true
argument_list|)
return|;
block|}
block|}
return|return
operator|new
name|ContentTags
argument_list|(
name|s
argument_list|)
return|;
block|}
block|}
end_class

end_unit

