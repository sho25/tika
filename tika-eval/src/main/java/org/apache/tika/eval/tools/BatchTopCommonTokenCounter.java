begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|eval
operator|.
name|tools
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Paths
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|utils
operator|.
name|ProcessUtils
import|;
end_import

begin_comment
comment|/**  * Utility class that runs TopCommonTokenCounter against a directory  * of table files (named {lang}_table.gz) and outputs common tokens  * files for each input table file in the output directory.  */
end_comment

begin_class
specifier|public
class|class
name|BatchTopCommonTokenCounter
block|{
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
name|Path
name|tableFileDir
init|=
name|Paths
operator|.
name|get
argument_list|(
name|args
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|Path
name|commonTokensDir
init|=
name|Paths
operator|.
name|get
argument_list|(
name|args
index|[
literal|1
index|]
argument_list|)
decl_stmt|;
for|for
control|(
name|File
name|f
range|:
name|tableFileDir
operator|.
name|toFile
argument_list|()
operator|.
name|listFiles
argument_list|()
control|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|f
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|f
operator|.
name|getName
argument_list|()
operator|.
name|contains
argument_list|(
literal|"bn_table"
argument_list|)
condition|)
block|{
comment|//continue;
block|}
name|Path
name|commonTokensFile
init|=
name|commonTokensDir
operator|.
name|resolve
argument_list|(
name|f
operator|.
name|getName
argument_list|()
operator|.
name|replaceAll
argument_list|(
literal|"_table(\\.txt)?(\\.gz)?$"
argument_list|,
literal|""
argument_list|)
argument_list|)
decl_stmt|;
name|TopCommonTokenCounter
operator|.
name|main
argument_list|(
operator|new
name|String
index|[]
block|{
name|ProcessUtils
operator|.
name|escapeCommandLine
argument_list|(
name|f
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
block|,
name|ProcessUtils
operator|.
name|escapeCommandLine
argument_list|(
name|commonTokensFile
operator|.
name|toAbsolutePath
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
block|}
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

