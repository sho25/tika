begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|eval
operator|.
name|batch
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ArrayBlockingQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|batch
operator|.
name|FileResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|batch
operator|.
name|FileResourceConsumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|eval
operator|.
name|AbstractProfiler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|eval
operator|.
name|db
operator|.
name|Cols
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|eval
operator|.
name|db
operator|.
name|DBUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|eval
operator|.
name|db
operator|.
name|MimeBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|eval
operator|.
name|db
operator|.
name|TableInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|eval
operator|.
name|io
operator|.
name|DBWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|eval
operator|.
name|io
operator|.
name|ExtractReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|eval
operator|.
name|io
operator|.
name|ExtractReaderException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|eval
operator|.
name|io
operator|.
name|IDBWriter
import|;
end_import

begin_class
specifier|public
specifier|abstract
class|class
name|EvalConsumerBuilder
block|{
specifier|private
name|AtomicInteger
name|count
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|protected
name|ArrayBlockingQueue
argument_list|<
name|FileResource
argument_list|>
name|queue
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|localAttrs
decl_stmt|;
name|DBUtil
name|dbUtil
decl_stmt|;
specifier|private
name|MimeBuffer
name|mimeBuffer
decl_stmt|;
name|AtomicInteger
name|initialized
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|public
name|void
name|init
parameter_list|(
name|ArrayBlockingQueue
argument_list|<
name|FileResource
argument_list|>
name|queue
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|localAttrs
parameter_list|,
name|DBUtil
name|dbUtil
parameter_list|,
name|MimeBuffer
name|mimeBuffer
parameter_list|)
throws|throws
name|IOException
throws|,
name|SQLException
block|{
name|this
operator|.
name|queue
operator|=
name|queue
expr_stmt|;
name|this
operator|.
name|localAttrs
operator|=
name|localAttrs
expr_stmt|;
name|this
operator|.
name|dbUtil
operator|=
name|dbUtil
expr_stmt|;
name|this
operator|.
name|mimeBuffer
operator|=
name|mimeBuffer
expr_stmt|;
name|populateRefTables
argument_list|()
expr_stmt|;
if|if
condition|(
name|initialized
operator|.
name|getAndIncrement
argument_list|()
operator|>
literal|0
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Can only init a consumer builder once!"
argument_list|)
throw|;
block|}
block|}
specifier|public
specifier|abstract
name|FileResourceConsumer
name|build
parameter_list|()
throws|throws
name|IOException
throws|,
name|SQLException
function_decl|;
specifier|protected
specifier|abstract
name|List
argument_list|<
name|TableInfo
argument_list|>
name|getTableInfo
parameter_list|()
function_decl|;
specifier|protected
specifier|abstract
name|void
name|addErrorLogTablePairs
parameter_list|(
name|DBConsumersManager
name|manager
parameter_list|)
function_decl|;
specifier|public
name|void
name|populateRefTables
parameter_list|()
throws|throws
name|IOException
throws|,
name|SQLException
block|{
name|IDBWriter
name|writer
init|=
name|getDBWriter
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|Cols
argument_list|,
name|String
argument_list|>
name|m
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|AbstractProfiler
operator|.
name|PARSE_ERROR_TYPE
name|t
range|:
name|AbstractProfiler
operator|.
name|PARSE_ERROR_TYPE
operator|.
name|values
argument_list|()
control|)
block|{
name|m
operator|.
name|clear
argument_list|()
expr_stmt|;
name|m
operator|.
name|put
argument_list|(
name|Cols
operator|.
name|PARSE_ERROR_TYPE_ID
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|t
operator|.
name|ordinal
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|m
operator|.
name|put
argument_list|(
name|Cols
operator|.
name|PARSE_ERROR_DESCRIPTION
argument_list|,
name|t
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeRow
argument_list|(
name|AbstractProfiler
operator|.
name|REF_PARSE_ERROR_TYPES
argument_list|,
name|m
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|AbstractProfiler
operator|.
name|EXCEPTION_TYPE
name|t
range|:
name|AbstractProfiler
operator|.
name|EXCEPTION_TYPE
operator|.
name|values
argument_list|()
control|)
block|{
name|m
operator|.
name|clear
argument_list|()
expr_stmt|;
name|m
operator|.
name|put
argument_list|(
name|Cols
operator|.
name|PARSE_EXCEPTION_TYPE_ID
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|t
operator|.
name|ordinal
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|m
operator|.
name|put
argument_list|(
name|Cols
operator|.
name|PARSE_EXCEPTION_DESCRIPTION
argument_list|,
name|t
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeRow
argument_list|(
name|AbstractProfiler
operator|.
name|REF_PARSE_EXCEPTION_TYPES
argument_list|,
name|m
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|ExtractReaderException
operator|.
name|TYPE
name|t
range|:
name|ExtractReaderException
operator|.
name|TYPE
operator|.
name|values
argument_list|()
control|)
block|{
name|m
operator|.
name|clear
argument_list|()
expr_stmt|;
name|m
operator|.
name|put
argument_list|(
name|Cols
operator|.
name|EXTRACT_EXCEPTION_TYPE_ID
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|t
operator|.
name|ordinal
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|m
operator|.
name|put
argument_list|(
name|Cols
operator|.
name|EXTRACT_EXCEPTION_DESCRIPTION
argument_list|,
name|t
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeRow
argument_list|(
name|AbstractProfiler
operator|.
name|REF_EXTRACT_EXCEPTION_TYPES
argument_list|,
name|m
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|IDBWriter
name|getDBWriter
parameter_list|()
throws|throws
name|IOException
throws|,
name|SQLException
block|{
name|Connection
name|conn
init|=
name|dbUtil
operator|.
name|getConnection
argument_list|(
literal|true
argument_list|)
decl_stmt|;
return|return
operator|new
name|DBWriter
argument_list|(
name|conn
argument_list|,
name|getTableInfo
argument_list|()
argument_list|,
name|dbUtil
argument_list|,
name|mimeBuffer
argument_list|)
return|;
block|}
name|ExtractReader
operator|.
name|ALTER_METADATA_LIST
name|getAlterMetadata
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|localAttrs
parameter_list|)
block|{
name|String
name|alterExtractString
init|=
name|localAttrs
operator|.
name|get
argument_list|(
literal|"alterExtract"
argument_list|)
decl_stmt|;
name|ExtractReader
operator|.
name|ALTER_METADATA_LIST
name|alterExtractList
init|=
name|ExtractReader
operator|.
name|ALTER_METADATA_LIST
operator|.
name|AS_IS
decl_stmt|;
if|if
condition|(
name|alterExtractString
operator|==
literal|null
operator|||
name|alterExtractString
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"as_is"
argument_list|)
condition|)
block|{
name|alterExtractList
operator|=
name|ExtractReader
operator|.
name|ALTER_METADATA_LIST
operator|.
name|AS_IS
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|alterExtractString
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"first_only"
argument_list|)
condition|)
block|{
name|alterExtractList
operator|=
name|ExtractReader
operator|.
name|ALTER_METADATA_LIST
operator|.
name|FIRST_ONLY
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|alterExtractString
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"concatenate_content"
argument_list|)
condition|)
block|{
name|alterExtractList
operator|=
name|ExtractReader
operator|.
name|ALTER_METADATA_LIST
operator|.
name|CONCATENATE_CONTENT_INTO_FIRST
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"options for alterExtract: as_is, first_only, concatenate_content."
operator|+
literal|" I don't understand:"
operator|+
name|alterExtractString
argument_list|)
throw|;
block|}
return|return
name|alterExtractList
return|;
block|}
comment|/*     public abstract Map<String, String> getIndexInfo();      class ValueComparator implements Comparator<String> {          Map<String, ColInfo> map;          public ValueComparator(Map<String, ColInfo> base) {             this.map = base;         }          public int compare(String a, String b) {             Integer aVal = map.get(a).getDBColOffset();             Integer bVal = map.get(b).getDBColOffset();             if (aVal == null || bVal == null) {                 throw new IllegalArgumentException("Column offset must be specified!");             }             if (aVal == bVal&& ! map.get(a).equals(map.get(b))) {                 throw new IllegalArgumentException("Column offsets must be unique: " + a + " and " + b + " both have: "+aVal);             }             if (aVal< bVal) {                 return -1;             } else {                 return 1;             }         }     } */
block|}
end_class

end_unit

