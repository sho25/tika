begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|eval
operator|.
name|langid
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License. You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|opennlp
operator|.
name|tools
operator|.
name|langdetect
operator|.
name|LanguageDetector
import|;
end_import

begin_import
import|import
name|opennlp
operator|.
name|tools
operator|.
name|langdetect
operator|.
name|LanguageDetectorModel
import|;
end_import

begin_import
import|import
name|opennlp
operator|.
name|tools
operator|.
name|util
operator|.
name|normalizer
operator|.
name|AggregateCharSequenceNormalizer
import|;
end_import

begin_import
import|import
name|opennlp
operator|.
name|tools
operator|.
name|util
operator|.
name|normalizer
operator|.
name|CharSequenceNormalizer
import|;
end_import

begin_import
import|import
name|opennlp
operator|.
name|tools
operator|.
name|util
operator|.
name|normalizer
operator|.
name|EmojiCharSequenceNormalizer
import|;
end_import

begin_import
import|import
name|opennlp
operator|.
name|tools
operator|.
name|util
operator|.
name|normalizer
operator|.
name|NumberCharSequenceNormalizer
import|;
end_import

begin_import
import|import
name|opennlp
operator|.
name|tools
operator|.
name|util
operator|.
name|normalizer
operator|.
name|ShrinkCharSequenceNormalizer
import|;
end_import

begin_import
import|import
name|opennlp
operator|.
name|tools
operator|.
name|util
operator|.
name|normalizer
operator|.
name|TwitterCharSequenceNormalizer
import|;
end_import

begin_import
import|import
name|opennlp
operator|.
name|tools
operator|.
name|util
operator|.
name|normalizer
operator|.
name|UrlCharSequenceNormalizer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|mutable
operator|.
name|MutableInt
import|;
end_import

begin_comment
comment|/**  * Implements learnable Language Detector.  *<p>  * Starts at the beginning of the charsequence and runs language  * detection on chunks of text.  If the end of the  * string is reached or there are {@link #minConsecImprovements}  * consecutive predictions for the best language and the confidence  * increases over those last predictions and if the difference  * in confidence between the highest confidence language  * and the second highest confidence language is greater than {@link #minDiff},  * the language detector will stop and report the results.  *</p>  *<p>  * The authors wish to thank Ken Krugler and  *<a href="https://github.com/kkrugler/yalder">Yalder</a>}  * for the inspiration for many of the design  * components of this detector.  *</p>  *  */
end_comment

begin_class
class|class
name|ProbingLanguageDetector
implements|implements
name|LanguageDetector
block|{
comment|/**      * Default chunk size (in codepoints) to take from the      * initial String      */
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_CHUNK_SIZE
init|=
literal|300
decl_stmt|;
comment|/**      * Default minimum consecutive improvements in confidence.      * If the best language is the same over this many consecutive      * probes, and if the confidence did not go down over those probes,      * the detector stops early.      */
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_MIN_CONSEC_IMPROVEMENTS
init|=
literal|2
decl_stmt|;
comment|/**      * Default minimum difference in confidence between the language with      * the highest confidence and the language with the second highest confidence.      */
specifier|public
specifier|static
specifier|final
name|double
name|DEFAULT_MIN_DIFF
init|=
literal|0.20
decl_stmt|;
comment|/**      * Default absolute maximum length of the String (in codepoints) to process      */
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_MAX_LENGTH
init|=
literal|10000
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|SPACE
init|=
literal|" "
decl_stmt|;
comment|//size at which to break strings for detection (in codepoints)
specifier|private
name|int
name|chunkSize
init|=
name|DEFAULT_CHUNK_SIZE
decl_stmt|;
comment|//require that the "best" language be the same
comment|//and that the confidence in that language increase over
comment|//this number of probes.
specifier|private
name|int
name|minConsecImprovements
init|=
name|DEFAULT_MIN_CONSEC_IMPROVEMENTS
decl_stmt|;
comment|//Minimum difference in confidence between the best candidate
comment|//and the second best candidate
specifier|private
name|double
name|minDiff
init|=
name|DEFAULT_MIN_DIFF
decl_stmt|;
comment|/**      * Absolute maximum length (in codepoints) that will processed      */
specifier|private
name|int
name|maxLength
init|=
name|DEFAULT_MAX_LENGTH
decl_stmt|;
specifier|private
name|CharSequenceNormalizer
name|normalizer
decl_stmt|;
specifier|private
name|LanguageDetectorModel
name|model
decl_stmt|;
comment|/**      * Initializes the current instance with a language detector model. Default feature      * generation is used.      *      * @param model the language detector model      */
specifier|public
name|ProbingLanguageDetector
parameter_list|(
name|LanguageDetectorModel
name|model
parameter_list|,
name|CharSequenceNormalizer
modifier|...
name|normalizers
parameter_list|)
block|{
name|this
operator|.
name|model
operator|=
name|model
expr_stmt|;
name|this
operator|.
name|normalizer
operator|=
operator|new
name|AggregateCharSequenceNormalizer
argument_list|(
name|normalizers
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|opennlp
operator|.
name|tools
operator|.
name|langdetect
operator|.
name|Language
name|predictLanguage
parameter_list|(
name|CharSequence
name|content
parameter_list|)
block|{
return|return
name|predictLanguages
argument_list|(
name|content
argument_list|)
index|[
literal|0
index|]
return|;
block|}
annotation|@
name|Override
specifier|public
name|opennlp
operator|.
name|tools
operator|.
name|langdetect
operator|.
name|Language
index|[]
name|predictLanguages
parameter_list|(
name|CharSequence
name|content
parameter_list|)
block|{
comment|//list of the languages that received the highest
comment|//confidence over the last n chunk detections
name|LinkedList
argument_list|<
name|opennlp
operator|.
name|tools
operator|.
name|langdetect
operator|.
name|Language
index|[]
argument_list|>
name|predictions
init|=
operator|new
name|LinkedList
argument_list|()
decl_stmt|;
name|int
name|start
init|=
literal|0
decl_stmt|;
comment|//where to start the next chunk in codepoints
name|opennlp
operator|.
name|tools
operator|.
name|langdetect
operator|.
name|Language
index|[]
name|currPredictions
init|=
literal|null
decl_stmt|;
comment|//cache ngram counts across chunks
name|Map
argument_list|<
name|String
argument_list|,
name|MutableInt
argument_list|>
name|ngramCounts
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|CharIntNGrammer
name|ngrammer
init|=
operator|new
name|CharIntNGrammer
argument_list|(
literal|1
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|int
name|nGrams
init|=
literal|0
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|int
name|actualChunkSize
init|=
operator|(
name|start
operator|+
name|chunkSize
operator|>
name|maxLength
operator|)
condition|?
name|maxLength
operator|-
name|start
else|:
name|chunkSize
decl_stmt|;
name|CSAndLength
name|csAndLength
init|=
name|chunk
argument_list|(
name|content
argument_list|,
name|start
argument_list|,
name|actualChunkSize
argument_list|)
decl_stmt|;
name|int
index|[]
name|chunk
init|=
name|csAndLength
operator|.
name|normed
operator|.
name|codePoints
argument_list|()
operator|.
name|toArray
argument_list|()
decl_stmt|;
if|if
condition|(
name|csAndLength
operator|.
name|originalLength
operator|==
literal|0
condition|)
block|{
if|if
condition|(
name|currPredictions
operator|==
literal|null
condition|)
block|{
return|return
name|predict
argument_list|(
name|ngramCounts
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|currPredictions
return|;
block|}
block|}
name|start
operator|+=
name|csAndLength
operator|.
name|originalLength
expr_stmt|;
name|ngrammer
operator|.
name|reset
argument_list|(
name|chunk
argument_list|)
expr_stmt|;
while|while
condition|(
name|ngrammer
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|String
name|nGram
init|=
name|ngrammer
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|nGram
operator|.
name|equals
argument_list|(
name|SPACE
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|MutableInt
name|cnt
init|=
name|ngramCounts
operator|.
name|get
argument_list|(
name|nGram
argument_list|)
decl_stmt|;
if|if
condition|(
name|cnt
operator|==
literal|null
condition|)
block|{
name|ngramCounts
operator|.
name|put
argument_list|(
name|nGram
argument_list|,
operator|new
name|MutableInt
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|cnt
operator|.
name|increment
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|++
name|nGrams
operator|%
literal|110
operator|==
literal|0
condition|)
block|{
name|currPredictions
operator|=
name|predict
argument_list|(
name|ngramCounts
argument_list|)
expr_stmt|;
if|if
condition|(
name|seenEnough
argument_list|(
name|predictions
argument_list|,
name|currPredictions
argument_list|,
name|ngramCounts
argument_list|)
condition|)
block|{
return|return
name|currPredictions
return|;
block|}
block|}
block|}
block|}
block|}
specifier|private
name|opennlp
operator|.
name|tools
operator|.
name|langdetect
operator|.
name|Language
index|[]
name|predict
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|MutableInt
argument_list|>
name|ngramCounts
parameter_list|)
block|{
name|String
index|[]
name|allGrams
init|=
operator|new
name|String
index|[
name|ngramCounts
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|float
index|[]
name|counts
init|=
operator|new
name|float
index|[
name|ngramCounts
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|MutableInt
argument_list|>
name|e
range|:
name|ngramCounts
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|allGrams
index|[
name|i
index|]
operator|=
name|e
operator|.
name|getKey
argument_list|()
expr_stmt|;
comment|// TODO -- once OPENNLP-1261 is fixed,
comment|// change this to e.getValue().getValue().
name|counts
index|[
name|i
index|]
operator|=
literal|1
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
name|double
index|[]
name|eval
init|=
name|model
operator|.
name|getMaxentModel
argument_list|()
operator|.
name|eval
argument_list|(
name|allGrams
argument_list|,
name|counts
argument_list|)
decl_stmt|;
name|opennlp
operator|.
name|tools
operator|.
name|langdetect
operator|.
name|Language
index|[]
name|arr
init|=
operator|new
name|opennlp
operator|.
name|tools
operator|.
name|langdetect
operator|.
name|Language
index|[
name|eval
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|eval
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
name|arr
index|[
name|j
index|]
operator|=
operator|new
name|opennlp
operator|.
name|tools
operator|.
name|langdetect
operator|.
name|Language
argument_list|(
name|model
operator|.
name|getMaxentModel
argument_list|()
operator|.
name|getOutcome
argument_list|(
name|j
argument_list|)
argument_list|,
name|eval
index|[
name|j
index|]
argument_list|)
expr_stmt|;
block|}
name|Arrays
operator|.
name|sort
argument_list|(
name|arr
argument_list|,
parameter_list|(
name|o1
parameter_list|,
name|o2
parameter_list|)
lambda|->
name|Double
operator|.
name|compare
argument_list|(
name|o2
operator|.
name|getConfidence
argument_list|()
argument_list|,
name|o1
operator|.
name|getConfidence
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|arr
return|;
block|}
comment|/**      * Size in codepoints at which to chunk the      * text for detection.      *      * @return the chunk size in codepoints      */
specifier|public
name|int
name|getChunkSize
parameter_list|()
block|{
return|return
name|chunkSize
return|;
block|}
comment|/**      * Size in codepoints at which to chunk the      * text for detection.      *      * @param chunkSize      */
specifier|public
name|void
name|setChunkSize
parameter_list|(
name|int
name|chunkSize
parameter_list|)
block|{
name|this
operator|.
name|chunkSize
operator|=
name|chunkSize
expr_stmt|;
block|}
comment|/**      * Number of consecutive improvements in the      * confidence of the most likely language required      * for this language detector to stop.      *      * @return the minimum consecutive improvements      */
specifier|public
name|int
name|getMinConsecImprovements
parameter_list|()
block|{
return|return
name|minConsecImprovements
return|;
block|}
comment|/**      * Number of consecutive improvements in the      * confidence of the most likely language required      * for this language detector to stop.      *      * @param minConsecImprovements minimum consecutive improvements      */
specifier|public
name|void
name|setMinConsecImprovements
parameter_list|(
name|int
name|minConsecImprovements
parameter_list|)
block|{
name|this
operator|.
name|minConsecImprovements
operator|=
name|minConsecImprovements
expr_stmt|;
block|}
comment|/**      * The minimum difference between the highest confidence and the      * second highest confidence required to stop.      * @return the minimum difference required      */
specifier|public
name|double
name|getMinDiff
parameter_list|()
block|{
return|return
name|minDiff
return|;
block|}
comment|/**      * The minimum difference between the highest confidence and the      * second highest confidence required to stop.      *      * Throws {@link IllegalArgumentException} if&lt; 0.0      * @param minDiff      */
specifier|public
name|void
name|setMinDiff
parameter_list|(
name|double
name|minDiff
parameter_list|)
block|{
if|if
condition|(
name|minDiff
operator|<
literal|0.0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"minDiff must be>= 0.0"
argument_list|)
throw|;
block|}
name|this
operator|.
name|minDiff
operator|=
name|minDiff
expr_stmt|;
block|}
comment|/**      * The absolute maximum length of the string (in codepoints)      * to be processed.      *      * @return the absolute maximum length of the string (in codepoints)      * to be processed.      */
specifier|public
name|int
name|getMaxLength
parameter_list|()
block|{
return|return
name|maxLength
return|;
block|}
comment|/**      * The absolute maximum length of the string (in codepoints)      * to be processed.      *      * @param maxLength      */
specifier|public
name|void
name|setMaxLength
parameter_list|(
name|int
name|maxLength
parameter_list|)
block|{
name|this
operator|.
name|maxLength
operator|=
name|maxLength
expr_stmt|;
block|}
comment|/**      * Set the normalizer used on each chunk      *      * @param normalizer      */
specifier|public
name|void
name|setNormalizer
parameter_list|(
name|CharSequenceNormalizer
name|normalizer
parameter_list|)
block|{
name|this
operator|.
name|normalizer
operator|=
name|normalizer
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
index|[]
name|getSupportedLanguages
parameter_list|()
block|{
name|int
name|numberLanguages
init|=
name|model
operator|.
name|getMaxentModel
argument_list|()
operator|.
name|getNumOutcomes
argument_list|()
decl_stmt|;
name|String
index|[]
name|languages
init|=
operator|new
name|String
index|[
name|numberLanguages
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numberLanguages
condition|;
name|i
operator|++
control|)
block|{
name|languages
index|[
name|i
index|]
operator|=
name|model
operator|.
name|getMaxentModel
argument_list|()
operator|.
name|getOutcome
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
return|return
name|languages
return|;
block|}
comment|/**      * Override this for different behavior to determine if there is enough      * confidence in the predictions to stop.      *      * @param predictionsQueue      * @param newPredictions      * @param ngramCounts      * @return      */
name|boolean
name|seenEnough
parameter_list|(
name|LinkedList
argument_list|<
name|opennlp
operator|.
name|tools
operator|.
name|langdetect
operator|.
name|Language
index|[]
argument_list|>
name|predictionsQueue
parameter_list|,
name|opennlp
operator|.
name|tools
operator|.
name|langdetect
operator|.
name|Language
index|[]
name|newPredictions
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|MutableInt
argument_list|>
name|ngramCounts
parameter_list|)
block|{
if|if
condition|(
name|predictionsQueue
operator|.
name|size
argument_list|()
operator|<
name|minConsecImprovements
condition|)
block|{
name|predictionsQueue
operator|.
name|add
argument_list|(
name|newPredictions
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
elseif|else
if|if
condition|(
name|predictionsQueue
operator|.
name|size
argument_list|()
operator|>
name|minConsecImprovements
condition|)
block|{
name|predictionsQueue
operator|.
name|removeFirst
argument_list|()
expr_stmt|;
block|}
name|predictionsQueue
operator|.
name|add
argument_list|(
name|newPredictions
argument_list|)
expr_stmt|;
if|if
condition|(
name|minDiff
operator|>
literal|0.0
operator|&&
name|newPredictions
index|[
literal|0
index|]
operator|.
name|getConfidence
argument_list|()
operator|-
name|newPredictions
index|[
literal|1
index|]
operator|.
name|getConfidence
argument_list|()
operator|<
name|minDiff
condition|)
block|{
return|return
literal|false
return|;
block|}
name|String
name|lastLang
init|=
literal|null
decl_stmt|;
name|double
name|lastConf
init|=
operator|-
literal|1.0
decl_stmt|;
comment|//iterate through the last predictions
comment|//and check that the lang with the highest confidence
comment|//hasn't changed, and that the confidence in it
comment|//hasn't decreased
for|for
control|(
name|opennlp
operator|.
name|tools
operator|.
name|langdetect
operator|.
name|Language
index|[]
name|predictions
range|:
name|predictionsQueue
control|)
block|{
if|if
condition|(
name|lastLang
operator|==
literal|null
condition|)
block|{
name|lastLang
operator|=
name|predictions
index|[
literal|0
index|]
operator|.
name|getLang
argument_list|()
expr_stmt|;
name|lastConf
operator|=
name|predictions
index|[
literal|0
index|]
operator|.
name|getConfidence
argument_list|()
expr_stmt|;
continue|continue;
block|}
else|else
block|{
if|if
condition|(
operator|!
name|lastLang
operator|.
name|equals
argument_list|(
name|predictions
index|[
literal|0
index|]
operator|.
name|getLang
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|lastConf
operator|>
name|predictions
index|[
literal|0
index|]
operator|.
name|getConfidence
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
name|lastLang
operator|=
name|predictions
index|[
literal|0
index|]
operator|.
name|getLang
argument_list|()
expr_stmt|;
name|lastConf
operator|=
name|predictions
index|[
literal|0
index|]
operator|.
name|getConfidence
argument_list|()
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
specifier|private
name|CSAndLength
name|chunk
parameter_list|(
name|CharSequence
name|content
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|chunkSize
parameter_list|)
block|{
if|if
condition|(
name|start
operator|==
literal|0
operator|&&
name|chunkSize
operator|>
name|content
operator|.
name|length
argument_list|()
condition|)
block|{
name|int
name|length
init|=
name|content
operator|.
name|codePoints
argument_list|()
operator|.
name|toArray
argument_list|()
operator|.
name|length
decl_stmt|;
return|return
operator|new
name|CSAndLength
argument_list|(
name|normalizer
operator|.
name|normalize
argument_list|(
name|content
argument_list|)
argument_list|,
name|length
argument_list|)
return|;
block|}
name|int
index|[]
name|codepoints
init|=
name|content
operator|.
name|codePoints
argument_list|()
operator|.
name|skip
argument_list|(
name|start
argument_list|)
operator|.
name|limit
argument_list|(
name|chunkSize
argument_list|)
operator|.
name|toArray
argument_list|()
decl_stmt|;
name|String
name|chunk
init|=
operator|new
name|String
argument_list|(
name|codepoints
argument_list|,
literal|0
argument_list|,
name|codepoints
operator|.
name|length
argument_list|)
decl_stmt|;
return|return
operator|new
name|CSAndLength
argument_list|(
name|normalizer
operator|.
name|normalize
argument_list|(
name|chunk
argument_list|)
argument_list|,
name|codepoints
operator|.
name|length
argument_list|)
return|;
block|}
specifier|private
specifier|static
class|class
name|CSAndLength
block|{
specifier|private
specifier|final
name|CharSequence
name|normed
decl_stmt|;
specifier|private
specifier|final
name|int
name|originalLength
decl_stmt|;
specifier|public
name|CSAndLength
parameter_list|(
name|CharSequence
name|normed
parameter_list|,
name|int
name|originalLength
parameter_list|)
block|{
name|this
operator|.
name|normed
operator|=
name|normed
expr_stmt|;
name|this
operator|.
name|originalLength
operator|=
name|originalLength
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
class|class
name|CharIntNGrammer
implements|implements
name|Iterator
argument_list|<
name|String
argument_list|>
block|{
specifier|private
name|String
name|next
decl_stmt|;
specifier|private
name|int
name|pos
init|=
literal|0
decl_stmt|;
specifier|private
name|int
index|[]
name|buffer
decl_stmt|;
specifier|private
specifier|final
name|int
name|minGram
decl_stmt|;
specifier|private
specifier|final
name|int
name|maxGram
decl_stmt|;
specifier|private
name|int
name|currGram
decl_stmt|;
name|CharIntNGrammer
parameter_list|(
name|int
name|minGram
parameter_list|,
name|int
name|maxGram
parameter_list|)
block|{
name|this
operator|.
name|minGram
operator|=
name|minGram
expr_stmt|;
name|this
operator|.
name|maxGram
operator|=
name|maxGram
expr_stmt|;
name|this
operator|.
name|currGram
operator|=
name|minGram
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
return|return
name|next
operator|!=
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|next
parameter_list|()
block|{
name|String
name|ret
init|=
name|next
decl_stmt|;
name|currGram
operator|++
expr_stmt|;
if|if
condition|(
name|currGram
operator|>
name|maxGram
condition|)
block|{
name|currGram
operator|=
name|minGram
expr_stmt|;
name|pos
operator|++
expr_stmt|;
if|if
condition|(
name|pos
operator|+
name|maxGram
operator|<
name|buffer
operator|.
name|length
condition|)
block|{
comment|//lowercase the last character; we've already
comment|//lowercased all previous chars
name|buffer
index|[
name|pos
operator|+
name|maxGram
index|]
operator|=
name|Character
operator|.
name|toLowerCase
argument_list|(
name|buffer
index|[
name|pos
operator|+
name|maxGram
index|]
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|pos
operator|+
name|currGram
operator|>
name|buffer
operator|.
name|length
condition|)
block|{
name|currGram
operator|=
name|minGram
expr_stmt|;
name|pos
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|pos
operator|>=
name|buffer
operator|.
name|length
operator|-
literal|1
condition|)
block|{
name|next
operator|=
literal|null
expr_stmt|;
return|return
name|ret
return|;
block|}
else|else
block|{
name|next
operator|=
operator|new
name|String
argument_list|(
name|buffer
argument_list|,
name|pos
argument_list|,
name|currGram
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
block|}
comment|/**          *          * @param chunk this is the chunk that will be ngrammed.  Note:          *              The ngrammer will lowercase the codepoints in place!          *              If you don't want the original data transformed,          *              copy it before calling this!          */
name|void
name|reset
parameter_list|(
name|int
index|[]
name|chunk
parameter_list|)
block|{
name|next
operator|=
literal|null
expr_stmt|;
name|pos
operator|=
literal|0
expr_stmt|;
name|currGram
operator|=
name|minGram
expr_stmt|;
name|buffer
operator|=
name|chunk
expr_stmt|;
if|if
condition|(
name|buffer
operator|.
name|length
operator|<
name|minGram
condition|)
block|{
return|return;
block|}
name|int
name|end
init|=
name|Math
operator|.
name|min
argument_list|(
name|buffer
operator|.
name|length
argument_list|,
name|maxGram
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|end
condition|;
name|i
operator|++
control|)
block|{
name|buffer
index|[
name|i
index|]
operator|=
name|Character
operator|.
name|toLowerCase
argument_list|(
name|buffer
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|buffer
operator|.
name|length
operator|>=
name|minGram
condition|)
block|{
name|next
operator|=
operator|new
name|String
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
name|minGram
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

