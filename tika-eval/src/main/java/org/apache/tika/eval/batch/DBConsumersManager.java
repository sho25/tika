begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|eval
operator|.
name|batch
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|batch
operator|.
name|ConsumersManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|batch
operator|.
name|FileResourceConsumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|eval
operator|.
name|AbstractProfiler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|eval
operator|.
name|XMLErrorLogUpdater
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|eval
operator|.
name|db
operator|.
name|DBUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|eval
operator|.
name|db
operator|.
name|MimeBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|eval
operator|.
name|db
operator|.
name|TableInfo
import|;
end_import

begin_class
specifier|public
class|class
name|DBConsumersManager
extends|extends
name|ConsumersManager
block|{
specifier|private
specifier|final
name|Connection
name|conn
decl_stmt|;
specifier|private
specifier|final
name|MimeBuffer
name|mimeBuffer
decl_stmt|;
specifier|private
specifier|final
name|List
argument_list|<
name|LogTablePair
argument_list|>
name|errorLogs
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|public
name|DBConsumersManager
parameter_list|(
name|DBUtil
name|dbUtil
parameter_list|,
name|MimeBuffer
name|mimeBuffer
parameter_list|,
name|List
argument_list|<
name|FileResourceConsumer
argument_list|>
name|consumers
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|consumers
argument_list|)
expr_stmt|;
name|this
operator|.
name|conn
operator|=
name|dbUtil
operator|.
name|getConnection
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|this
operator|.
name|mimeBuffer
operator|=
name|mimeBuffer
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|shutdown
parameter_list|()
block|{
for|for
control|(
name|FileResourceConsumer
name|consumer
range|:
name|getConsumers
argument_list|()
control|)
block|{
if|if
condition|(
name|consumer
operator|instanceof
name|AbstractProfiler
condition|)
block|{
try|try
block|{
operator|(
operator|(
name|AbstractProfiler
operator|)
name|consumer
operator|)
operator|.
name|closeWriter
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
try|try
block|{
name|mimeBuffer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
comment|//MUST HAPPEN AFTER consumers have closed and
comment|//committed container information!!!
name|XMLErrorLogUpdater
name|up
init|=
operator|new
name|XMLErrorLogUpdater
argument_list|()
decl_stmt|;
for|for
control|(
name|LogTablePair
name|p
range|:
name|errorLogs
control|)
block|{
try|try
block|{
name|up
operator|.
name|update
argument_list|(
name|conn
argument_list|,
name|p
operator|.
name|tableInfo
argument_list|,
name|p
operator|.
name|log
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
try|try
block|{
name|conn
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
try|try
block|{
name|conn
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|void
name|addErrorLogTablePair
parameter_list|(
name|Path
name|log
parameter_list|,
name|TableInfo
name|tableName
parameter_list|)
block|{
name|LogTablePair
name|p
init|=
operator|new
name|LogTablePair
argument_list|()
decl_stmt|;
name|p
operator|.
name|log
operator|=
name|log
expr_stmt|;
name|p
operator|.
name|tableInfo
operator|=
name|tableName
expr_stmt|;
name|errorLogs
operator|.
name|add
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
class|class
name|LogTablePair
block|{
name|Path
name|log
decl_stmt|;
name|TableInfo
name|tableInfo
decl_stmt|;
block|}
block|}
end_class

end_unit

