begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|eval
operator|.
name|db
package|;
end_package

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|DriverManager
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|ResultSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Statement
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FilenameUtils
import|;
end_import

begin_class
specifier|public
class|class
name|H2Util
extends|extends
name|JDBCUtil
block|{
specifier|private
specifier|final
specifier|static
name|String
name|DRIVER_CLASS
init|=
literal|"org.h2.Driver"
decl_stmt|;
specifier|private
specifier|final
name|Path
name|db
decl_stmt|;
specifier|public
name|H2Util
parameter_list|(
name|Path
name|db
parameter_list|)
block|{
name|super
argument_list|(
name|getConnectionString
argument_list|(
name|db
argument_list|,
literal|true
argument_list|)
argument_list|,
name|DRIVER_CLASS
argument_list|)
expr_stmt|;
name|this
operator|.
name|db
operator|=
name|db
expr_stmt|;
block|}
specifier|public
specifier|static
name|boolean
name|databaseExists
parameter_list|(
name|Path
name|db
parameter_list|)
block|{
name|String
name|connString
init|=
name|getConnectionString
argument_list|(
name|db
argument_list|,
literal|false
argument_list|)
decl_stmt|;
try|try
init|(
name|Connection
name|conn
init|=
name|DriverManager
operator|.
name|getConnection
argument_list|(
name|connString
argument_list|)
init|)
block|{         }
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getJDBCDriverClass
parameter_list|()
block|{
return|return
literal|"org.h2.Driver"
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|dropTableIfExists
parameter_list|(
name|Connection
name|conn
parameter_list|,
name|String
name|tableName
parameter_list|)
throws|throws
name|SQLException
block|{
name|Statement
name|st
init|=
name|conn
operator|.
name|createStatement
argument_list|()
decl_stmt|;
name|String
name|sql
init|=
literal|"drop table if exists "
operator|+
name|tableName
decl_stmt|;
name|boolean
name|success
init|=
name|st
operator|.
name|execute
argument_list|(
name|sql
argument_list|)
decl_stmt|;
name|st
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|success
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getConnectionString
parameter_list|()
block|{
return|return
name|getConnectionString
argument_list|(
name|db
argument_list|,
literal|true
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|String
name|getConnectionString
parameter_list|(
name|Path
name|db
parameter_list|,
name|boolean
name|createDBIfItDoesntExist
parameter_list|)
block|{
name|String
name|s
init|=
literal|"jdbc:h2:"
operator|+
name|FilenameUtils
operator|.
name|separatorsToUnix
argument_list|(
name|db
operator|.
name|toAbsolutePath
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|createDBIfItDoesntExist
condition|)
block|{
name|s
operator|+=
literal|";IFEXISTS=TRUE"
expr_stmt|;
block|}
return|return
name|s
return|;
block|}
annotation|@
name|Override
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|getTables
parameter_list|(
name|Connection
name|connection
parameter_list|)
throws|throws
name|SQLException
block|{
name|String
name|sql
init|=
literal|"SHOW TABLES"
decl_stmt|;
name|Statement
name|st
init|=
name|connection
operator|.
name|createStatement
argument_list|()
decl_stmt|;
name|ResultSet
name|rs
init|=
name|st
operator|.
name|executeQuery
argument_list|(
name|sql
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|tables
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
while|while
condition|(
name|rs
operator|.
name|next
argument_list|()
condition|)
block|{
name|String
name|table
init|=
name|rs
operator|.
name|getString
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|tables
operator|.
name|add
argument_list|(
name|table
argument_list|)
expr_stmt|;
block|}
return|return
name|tables
return|;
block|}
block|}
end_class

end_unit

