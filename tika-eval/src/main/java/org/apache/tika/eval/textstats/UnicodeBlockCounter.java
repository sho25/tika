begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|eval
operator|.
name|textstats
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Reader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|mutable
operator|.
name|MutableInt
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|eval
operator|.
name|AbstractProfiler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
specifier|public
class|class
name|UnicodeBlockCounter
implements|implements
name|StringStatsCalculator
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|MutableInt
argument_list|>
argument_list|>
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|AbstractProfiler
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|int
name|maxContentLength
decl_stmt|;
specifier|public
name|UnicodeBlockCounter
parameter_list|(
name|int
name|maxContentLength
parameter_list|)
block|{
name|this
operator|.
name|maxContentLength
operator|=
name|maxContentLength
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|MutableInt
argument_list|>
name|calculate
parameter_list|(
name|String
name|txt
parameter_list|)
block|{
if|if
condition|(
name|txt
operator|.
name|length
argument_list|()
operator|<
literal|200
condition|)
block|{
return|return
name|Collections
operator|.
name|EMPTY_MAP
return|;
block|}
name|String
name|s
init|=
name|txt
decl_stmt|;
if|if
condition|(
name|s
operator|.
name|length
argument_list|()
operator|>
name|maxContentLength
condition|)
block|{
name|s
operator|=
name|s
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|maxContentLength
argument_list|)
expr_stmt|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|MutableInt
argument_list|>
name|m
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|Reader
name|r
init|=
operator|new
name|StringReader
argument_list|(
name|s
argument_list|)
decl_stmt|;
try|try
block|{
name|int
name|c
init|=
name|r
operator|.
name|read
argument_list|()
decl_stmt|;
while|while
condition|(
name|c
operator|!=
operator|-
literal|1
condition|)
block|{
name|Character
operator|.
name|UnicodeBlock
name|block
init|=
name|Character
operator|.
name|UnicodeBlock
operator|.
name|of
argument_list|(
name|c
argument_list|)
decl_stmt|;
name|String
name|blockString
init|=
operator|(
name|block
operator|==
literal|null
operator|)
condition|?
literal|"NULL"
else|:
name|block
operator|.
name|toString
argument_list|()
decl_stmt|;
name|MutableInt
name|i
init|=
name|m
operator|.
name|get
argument_list|(
name|blockString
argument_list|)
decl_stmt|;
if|if
condition|(
name|i
operator|==
literal|null
condition|)
block|{
name|i
operator|=
operator|new
name|MutableInt
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|m
operator|.
name|put
argument_list|(
name|blockString
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
name|i
operator|.
name|increment
argument_list|()
expr_stmt|;
if|if
condition|(
name|block
operator|==
literal|null
condition|)
block|{
name|blockString
operator|=
literal|"NULL"
expr_stmt|;
block|}
name|m
operator|.
name|put
argument_list|(
name|blockString
argument_list|,
name|i
argument_list|)
expr_stmt|;
name|c
operator|=
name|r
operator|.
name|read
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"IOException"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
name|m
return|;
block|}
block|}
end_class

end_unit

