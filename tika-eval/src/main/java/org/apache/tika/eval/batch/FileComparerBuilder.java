begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|eval
operator|.
name|batch
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|batch
operator|.
name|FileResourceConsumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|config
operator|.
name|TikaConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|eval
operator|.
name|AbstractProfiler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|eval
operator|.
name|ExtractComparer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|eval
operator|.
name|db
operator|.
name|TableInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|eval
operator|.
name|io
operator|.
name|DBWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|eval
operator|.
name|io
operator|.
name|ExtractReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|eval
operator|.
name|io
operator|.
name|IDBWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|util
operator|.
name|PropsUtil
import|;
end_import

begin_class
specifier|public
class|class
name|FileComparerBuilder
extends|extends
name|EvalConsumerBuilder
block|{
specifier|private
specifier|final
specifier|static
name|String
name|WHICH_DB
init|=
literal|"h2"
decl_stmt|;
comment|//TODO: allow flexibility
annotation|@
name|Override
specifier|public
name|FileResourceConsumer
name|build
parameter_list|()
throws|throws
name|IOException
throws|,
name|SQLException
block|{
name|Path
name|thisRootDir
init|=
name|PropsUtil
operator|.
name|getPath
argument_list|(
name|localAttrs
operator|.
name|get
argument_list|(
literal|"extractsA"
argument_list|)
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|thisRootDir
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Must specify \"extractsA\" -- directory for 'A' extracts"
argument_list|)
throw|;
block|}
name|Path
name|thatRootDir
init|=
name|PropsUtil
operator|.
name|getPath
argument_list|(
name|localAttrs
operator|.
name|get
argument_list|(
literal|"extractsB"
argument_list|)
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|thatRootDir
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Must specify \"extractsB\" -- directory for 'B' extracts"
argument_list|)
throw|;
block|}
name|Path
name|inputRootDir
init|=
name|PropsUtil
operator|.
name|getPath
argument_list|(
name|localAttrs
operator|.
name|get
argument_list|(
literal|"inputDir"
argument_list|)
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|long
name|minJsonLength
init|=
name|PropsUtil
operator|.
name|getLong
argument_list|(
name|localAttrs
operator|.
name|get
argument_list|(
literal|"minJsonFileSizeBytes"
argument_list|)
argument_list|,
operator|-
literal|1L
argument_list|)
decl_stmt|;
name|long
name|maxJsonLength
init|=
name|PropsUtil
operator|.
name|getLong
argument_list|(
name|localAttrs
operator|.
name|get
argument_list|(
literal|"maxJsonFileSizeBytes"
argument_list|)
argument_list|,
operator|-
literal|1L
argument_list|)
decl_stmt|;
name|ExtractReader
operator|.
name|ALTER_METADATA_LIST
name|alterExtractList
init|=
name|getAlterMetadata
argument_list|(
name|localAttrs
argument_list|)
decl_stmt|;
name|IDBWriter
name|writer
init|=
name|getDBWriter
argument_list|()
decl_stmt|;
comment|//TODO: clean up the writing of the ref tables!!!
try|try
block|{
name|populateRefTables
argument_list|(
name|writer
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Can't populate ref tables"
argument_list|,
name|e
argument_list|)
throw|;
block|}
if|if
condition|(
name|inputRootDir
operator|==
literal|null
condition|)
block|{
comment|//this is for the sake of the crawler
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Must specify an -inputDir"
argument_list|)
throw|;
block|}
return|return
operator|new
name|ExtractComparer
argument_list|(
name|queue
argument_list|,
name|inputRootDir
argument_list|,
name|thisRootDir
argument_list|,
name|thatRootDir
argument_list|,
name|writer
argument_list|,
name|minJsonLength
argument_list|,
name|maxJsonLength
argument_list|,
name|alterExtractList
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|protected
name|List
argument_list|<
name|TableInfo
argument_list|>
name|getTableInfo
parameter_list|()
block|{
name|List
argument_list|<
name|TableInfo
argument_list|>
name|tableInfos
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|tableInfos
operator|.
name|add
argument_list|(
name|ExtractComparer
operator|.
name|COMPARISON_CONTAINERS
argument_list|)
expr_stmt|;
name|tableInfos
operator|.
name|add
argument_list|(
name|ExtractComparer
operator|.
name|PROFILES_A
argument_list|)
expr_stmt|;
name|tableInfos
operator|.
name|add
argument_list|(
name|ExtractComparer
operator|.
name|PROFILES_B
argument_list|)
expr_stmt|;
name|tableInfos
operator|.
name|add
argument_list|(
name|ExtractComparer
operator|.
name|ERROR_TABLE_A
argument_list|)
expr_stmt|;
name|tableInfos
operator|.
name|add
argument_list|(
name|ExtractComparer
operator|.
name|ERROR_TABLE_B
argument_list|)
expr_stmt|;
name|tableInfos
operator|.
name|add
argument_list|(
name|ExtractComparer
operator|.
name|EXCEPTION_TABLE_A
argument_list|)
expr_stmt|;
name|tableInfos
operator|.
name|add
argument_list|(
name|ExtractComparer
operator|.
name|EXCEPTION_TABLE_B
argument_list|)
expr_stmt|;
name|tableInfos
operator|.
name|add
argument_list|(
name|ExtractComparer
operator|.
name|ERROR_TABLE_A
argument_list|)
expr_stmt|;
name|tableInfos
operator|.
name|add
argument_list|(
name|ExtractComparer
operator|.
name|ERROR_TABLE_B
argument_list|)
expr_stmt|;
name|tableInfos
operator|.
name|add
argument_list|(
name|ExtractComparer
operator|.
name|CONTENTS_TABLE_A
argument_list|)
expr_stmt|;
name|tableInfos
operator|.
name|add
argument_list|(
name|ExtractComparer
operator|.
name|CONTENTS_TABLE_B
argument_list|)
expr_stmt|;
name|tableInfos
operator|.
name|add
argument_list|(
name|ExtractComparer
operator|.
name|EMBEDDED_FILE_PATH_TABLE_A
argument_list|)
expr_stmt|;
name|tableInfos
operator|.
name|add
argument_list|(
name|ExtractComparer
operator|.
name|EMBEDDED_FILE_PATH_TABLE_B
argument_list|)
expr_stmt|;
name|tableInfos
operator|.
name|add
argument_list|(
name|ExtractComparer
operator|.
name|CONTENT_COMPARISONS
argument_list|)
expr_stmt|;
name|tableInfos
operator|.
name|add
argument_list|(
name|AbstractProfiler
operator|.
name|MIME_TABLE
argument_list|)
expr_stmt|;
name|tableInfos
operator|.
name|add
argument_list|(
name|ExtractComparer
operator|.
name|REF_PAIR_NAMES
argument_list|)
expr_stmt|;
name|tableInfos
operator|.
name|add
argument_list|(
name|AbstractProfiler
operator|.
name|REF_PARSE_ERROR_TYPES
argument_list|)
expr_stmt|;
name|tableInfos
operator|.
name|add
argument_list|(
name|AbstractProfiler
operator|.
name|REF_PARSE_EXCEPTION_TYPES
argument_list|)
expr_stmt|;
name|tableInfos
operator|.
name|add
argument_list|(
name|AbstractProfiler
operator|.
name|REF_EXTRACT_ERROR_TYPES
argument_list|)
expr_stmt|;
return|return
name|tableInfos
return|;
block|}
annotation|@
name|Override
specifier|protected
name|IDBWriter
name|getDBWriter
parameter_list|()
throws|throws
name|IOException
throws|,
name|SQLException
block|{
return|return
operator|new
name|DBWriter
argument_list|(
name|getTableInfo
argument_list|()
argument_list|,
name|TikaConfig
operator|.
name|getDefaultConfig
argument_list|()
argument_list|,
name|dbUtil
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|addErrorLogTablePairs
parameter_list|(
name|DBConsumersManager
name|manager
parameter_list|)
block|{
name|Path
name|errorLogA
init|=
name|PropsUtil
operator|.
name|getPath
argument_list|(
name|localAttrs
operator|.
name|get
argument_list|(
literal|"errorLogFileA"
argument_list|)
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|errorLogA
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|manager
operator|.
name|addErrorLogTablePair
argument_list|(
name|errorLogA
argument_list|,
name|ExtractComparer
operator|.
name|ERROR_TABLE_A
argument_list|)
expr_stmt|;
name|Path
name|errorLogB
init|=
name|PropsUtil
operator|.
name|getPath
argument_list|(
name|localAttrs
operator|.
name|get
argument_list|(
literal|"errorLogFileB"
argument_list|)
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|errorLogB
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|manager
operator|.
name|addErrorLogTablePair
argument_list|(
name|errorLogB
argument_list|,
name|ExtractComparer
operator|.
name|ERROR_TABLE_B
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

