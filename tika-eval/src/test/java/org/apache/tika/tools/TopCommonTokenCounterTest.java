begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|tools
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|Charset
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|TikaTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|eval
operator|.
name|tools
operator|.
name|TopCommonTokenCounter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|utils
operator|.
name|ProcessUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|TopCommonTokenCounterTest
extends|extends
name|TikaTest
block|{
specifier|private
specifier|final
specifier|static
name|String
name|INPUT_FILE
init|=
literal|"lang_file.txt"
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|String
name|COMMON_TOKENS_FILE
init|=
literal|"common_tokens"
decl_stmt|;
specifier|private
specifier|static
name|Path
name|WORKING_DIR
decl_stmt|;
comment|//    private static Path LUCENE_DIR;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|String
index|[]
name|docs
init|=
operator|new
name|String
index|[]
block|{
literal|"th quick brown fox"
block|,
literal|"jumped over th brown lazy"
block|,
literal|"brown lazy fox"
block|,
literal|"\u666e\u6797\u65af\u987f\u5927\u5b66"
block|,
literal|"\u666e\u6797\u65af\u987f\u5927\u5b66"
block|}
decl_stmt|;
name|WORKING_DIR
operator|=
name|Files
operator|.
name|createTempDirectory
argument_list|(
literal|"tika-eval-common-tokens"
argument_list|)
expr_stmt|;
try|try
init|(
name|BufferedWriter
name|writer
init|=
name|Files
operator|.
name|newBufferedWriter
argument_list|(
name|WORKING_DIR
operator|.
name|resolve
argument_list|(
name|INPUT_FILE
argument_list|)
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
init|)
block|{
comment|//do this 10 times to bump the numbers above the TopCommonTokenCounter's MIN_DOC_FREQ
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
for|for
control|(
name|String
name|d
range|:
name|docs
control|)
block|{
name|writer
operator|.
name|write
argument_list|(
name|d
argument_list|)
expr_stmt|;
name|writer
operator|.
name|newLine
argument_list|()
expr_stmt|;
block|}
block|}
name|writer
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
name|TopCommonTokenCounter
operator|.
name|main
argument_list|(
operator|new
name|String
index|[]
block|{
name|ProcessUtils
operator|.
name|escapeCommandLine
argument_list|(
name|WORKING_DIR
operator|.
name|resolve
argument_list|(
name|COMMON_TOKENS_FILE
argument_list|)
operator|.
name|toAbsolutePath
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
block|,
name|ProcessUtils
operator|.
name|escapeCommandLine
argument_list|(
name|WORKING_DIR
operator|.
name|resolve
argument_list|(
name|INPUT_FILE
argument_list|)
operator|.
name|toAbsolutePath
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|FileUtils
operator|.
name|deleteDirectory
argument_list|(
name|WORKING_DIR
operator|.
name|toFile
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSimple
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|String
argument_list|>
name|rows
init|=
name|FileUtils
operator|.
name|readLines
argument_list|(
name|WORKING_DIR
operator|.
name|resolve
argument_list|(
name|COMMON_TOKENS_FILE
argument_list|)
operator|.
name|toFile
argument_list|()
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|tokens
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|row
range|:
name|rows
control|)
block|{
if|if
condition|(
operator|!
name|row
operator|.
name|startsWith
argument_list|(
literal|"#"
argument_list|)
condition|)
block|{
name|tokens
operator|.
name|add
argument_list|(
name|row
operator|.
name|split
argument_list|(
literal|"\t"
argument_list|)
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
block|}
name|assertEquals
argument_list|(
literal|"brown"
argument_list|,
name|tokens
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"lazy"
argument_list|,
name|tokens
operator|.
name|get
argument_list|(
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotContained
argument_list|(
literal|"th"
argument_list|,
name|tokens
argument_list|)
expr_stmt|;
comment|//3 char word should be dropped
name|assertNotContained
argument_list|(
literal|"\u987f\u5927\u5b66"
argument_list|,
name|tokens
argument_list|)
expr_stmt|;
comment|//cjk trigram should not be included
name|assertNotContained
argument_list|(
literal|"\u5b66"
argument_list|,
name|tokens
argument_list|)
expr_stmt|;
comment|//cjk unigram should not be included
name|assertContains
argument_list|(
literal|"\u5927\u5b66"
argument_list|,
name|tokens
argument_list|)
expr_stmt|;
comment|//cjk bigrams only
block|}
block|}
end_class

end_unit

