begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|eval
operator|.
name|util
package|;
end_package

begin_import
import|import static
name|junit
operator|.
name|framework
operator|.
name|TestCase
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|config
operator|.
name|TikaConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|mime
operator|.
name|MimeType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|mime
operator|.
name|MimeTypeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|mime
operator|.
name|MimeTypes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Ignore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
annotation|@
name|Ignore
argument_list|(
literal|"Fix mimetype.getExtension to work with these and then we can get rid of MimeUtil"
argument_list|)
specifier|public
class|class
name|MimeUtilTest
block|{
specifier|private
specifier|final
name|TikaConfig
name|config
init|=
name|TikaConfig
operator|.
name|getDefaultConfig
argument_list|()
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|testBasic
parameter_list|()
throws|throws
name|Exception
block|{
name|assertResult
argument_list|(
literal|"application/pdf"
argument_list|,
literal|".pdf"
argument_list|)
expr_stmt|;
name|assertResult
argument_list|(
literal|"APPLICATION/PDF"
argument_list|,
literal|".pdf"
argument_list|)
expr_stmt|;
name|assertResult
argument_list|(
literal|"text/plain; charset=ISO-8859-1"
argument_list|,
literal|".txt"
argument_list|)
expr_stmt|;
name|assertResult
argument_list|(
literal|"application/xhtml+xml; charset=UTF-8\n"
argument_list|,
literal|".html"
argument_list|)
expr_stmt|;
name|assertResult
argument_list|(
literal|"application/xml; charset=UTF-8\n"
argument_list|,
literal|".xml"
argument_list|)
expr_stmt|;
name|assertException
argument_list|(
literal|"bogosity"
argument_list|,
literal|"xml"
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|assertException
parameter_list|(
name|String
name|contentType
parameter_list|,
name|String
name|expected
parameter_list|)
block|{
name|boolean
name|ex
init|=
literal|false
decl_stmt|;
try|try
block|{
name|assertResult
argument_list|(
name|contentType
argument_list|,
name|expected
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MimeTypeException
name|e
parameter_list|)
block|{
name|ex
operator|=
literal|true
expr_stmt|;
block|}
name|assertTrue
argument_list|(
literal|"Should have had exception for: "
operator|+
name|contentType
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|assertResult
parameter_list|(
name|String
name|contentType
parameter_list|,
name|String
name|expected
parameter_list|)
throws|throws
name|MimeTypeException
block|{
name|TikaConfig
name|tikaConfig
init|=
name|TikaConfig
operator|.
name|getDefaultConfig
argument_list|()
decl_stmt|;
name|MimeTypes
name|r
init|=
name|tikaConfig
operator|.
name|getMimeRepository
argument_list|()
decl_stmt|;
name|MimeType
name|mt
init|=
name|r
operator|.
name|forName
argument_list|(
name|contentType
argument_list|)
decl_stmt|;
comment|//        String ext = MimeUtil.getExtension(contentType, config);
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|mt
operator|.
name|getExtension
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

