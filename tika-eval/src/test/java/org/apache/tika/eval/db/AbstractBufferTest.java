begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|eval
operator|.
name|db
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CompletionService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorCompletionService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Future
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|AbstractBufferTest
block|{
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
specifier|public
name|void
name|runTest
parameter_list|()
throws|throws
name|InterruptedException
throws|,
name|ExecutionException
block|{
name|List
argument_list|<
name|String
argument_list|>
name|keys
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|Collections
operator|.
name|addAll
argument_list|(
name|keys
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"a"
block|,
literal|"b"
block|,
literal|"c"
block|,
literal|"d"
block|,
literal|"e"
block|,
literal|"f"
block|,
literal|"g"
block|,
literal|"h"
block|,
literal|"i"
block|,
literal|"j"
block|,
literal|"k"
block|}
argument_list|)
expr_stmt|;
name|int
name|numGets
init|=
literal|100
decl_stmt|;
name|int
name|numTesters
init|=
literal|20
decl_stmt|;
name|AbstractDBBuffer
name|b
init|=
operator|new
name|TestBuffer
argument_list|()
decl_stmt|;
name|ExecutorService
name|ex
init|=
name|Executors
operator|.
name|newFixedThreadPool
argument_list|(
name|numTesters
argument_list|)
decl_stmt|;
name|CompletionService
argument_list|<
name|MyTestResult
argument_list|>
name|completionService
init|=
operator|new
name|ExecutorCompletionService
argument_list|<>
argument_list|(
name|ex
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numTesters
condition|;
name|i
operator|++
control|)
block|{
name|completionService
operator|.
name|submit
argument_list|(
operator|new
name|Tester
argument_list|(
name|keys
argument_list|,
name|b
argument_list|,
name|numGets
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|int
name|results
init|=
literal|0
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|combined
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
while|while
condition|(
name|results
operator|<
name|numTesters
condition|)
block|{
name|Future
argument_list|<
name|MyTestResult
argument_list|>
name|futureResult
init|=
name|completionService
operator|.
name|poll
argument_list|(
literal|1
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
decl_stmt|;
if|if
condition|(
name|futureResult
operator|!=
literal|null
condition|)
block|{
name|results
operator|++
expr_stmt|;
name|assertEquals
argument_list|(
name|keys
operator|.
name|size
argument_list|()
argument_list|,
name|futureResult
operator|.
name|get
argument_list|()
operator|.
name|getMap
argument_list|()
operator|.
name|keySet
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|e
range|:
name|futureResult
operator|.
name|get
argument_list|()
operator|.
name|getMap
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|combined
operator|.
name|containsKey
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|)
condition|)
block|{
name|combined
operator|.
name|put
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|,
name|e
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertEquals
argument_list|(
name|combined
operator|.
name|get
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|,
name|e
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
name|assertEquals
argument_list|(
name|keys
operator|.
name|size
argument_list|()
argument_list|,
name|b
operator|.
name|getNumWrites
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
class|class
name|Tester
implements|implements
name|Callable
argument_list|<
name|MyTestResult
argument_list|>
block|{
specifier|private
name|Random
name|r
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|m
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|keys
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|AbstractDBBuffer
name|dbBuffer
decl_stmt|;
specifier|private
specifier|final
name|int
name|numGets
decl_stmt|;
specifier|private
name|Tester
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|inputKeys
parameter_list|,
name|AbstractDBBuffer
name|buffer
parameter_list|,
name|int
name|numGets
parameter_list|)
block|{
name|keys
operator|.
name|addAll
argument_list|(
name|inputKeys
argument_list|)
expr_stmt|;
name|dbBuffer
operator|=
name|buffer
expr_stmt|;
name|this
operator|.
name|numGets
operator|=
name|numGets
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|MyTestResult
name|call
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numGets
condition|;
name|i
operator|++
control|)
block|{
name|int
name|index
init|=
name|r
operator|.
name|nextInt
argument_list|(
name|keys
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|k
init|=
name|keys
operator|.
name|get
argument_list|(
name|index
argument_list|)
decl_stmt|;
if|if
condition|(
name|k
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"keys can't be null"
argument_list|)
throw|;
block|}
name|Integer
name|expected
init|=
name|m
operator|.
name|get
argument_list|(
name|k
argument_list|)
decl_stmt|;
name|Integer
name|val
init|=
name|dbBuffer
operator|.
name|getId
argument_list|(
name|k
argument_list|)
decl_stmt|;
if|if
condition|(
name|val
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Val can't be null!"
argument_list|)
throw|;
block|}
if|if
condition|(
name|expected
operator|!=
literal|null
condition|)
block|{
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|val
argument_list|)
expr_stmt|;
block|}
name|m
operator|.
name|put
argument_list|(
name|k
argument_list|,
name|val
argument_list|)
expr_stmt|;
block|}
comment|//now add the val for every key
comment|//just in case the rand() process didn't hit
comment|//all indices
for|for
control|(
name|String
name|k
range|:
name|keys
control|)
block|{
name|Integer
name|val
init|=
name|dbBuffer
operator|.
name|getId
argument_list|(
name|k
argument_list|)
decl_stmt|;
name|m
operator|.
name|put
argument_list|(
name|k
argument_list|,
name|val
argument_list|)
expr_stmt|;
block|}
name|MyTestResult
name|r
init|=
operator|new
name|MyTestResult
argument_list|(
name|m
argument_list|)
decl_stmt|;
return|return
name|r
return|;
block|}
block|}
specifier|private
class|class
name|MyTestResult
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|m
decl_stmt|;
specifier|private
name|MyTestResult
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|m
parameter_list|)
block|{
name|this
operator|.
name|m
operator|=
name|m
expr_stmt|;
block|}
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|getMap
parameter_list|()
block|{
return|return
name|m
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"MyTester: "
operator|+
name|m
operator|.
name|size
argument_list|()
return|;
block|}
block|}
specifier|private
class|class
name|TestBuffer
extends|extends
name|AbstractDBBuffer
block|{
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|int
name|id
parameter_list|,
name|String
name|value
parameter_list|)
throws|throws
name|RuntimeException
block|{
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|SQLException
block|{
comment|//no-op
block|}
block|}
block|}
end_class

end_unit

