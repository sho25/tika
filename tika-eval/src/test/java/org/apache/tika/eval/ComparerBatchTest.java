begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|eval
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|FileSystems
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|ResultSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|ResultSetMetaData
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Statement
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|batch
operator|.
name|fs
operator|.
name|FSBatchTestBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|eval
operator|.
name|db
operator|.
name|Cols
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Ignore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
annotation|@
name|Ignore
argument_list|(
literal|"need to fix tika-batch tests to make this work"
argument_list|)
specifier|public
class|class
name|ComparerBatchTest
extends|extends
name|FSBatchTestBase
block|{
specifier|public
specifier|final
specifier|static
name|String
name|COMPARER_PROCESS_CLASS
init|=
literal|"org.apache.tika.batch.fs.FSBatchProcessCLI"
decl_stmt|;
specifier|private
specifier|static
name|Path
name|dbDir
decl_stmt|;
specifier|private
specifier|static
name|Connection
name|conn
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|String
name|compJoinCont
init|=
literal|""
decl_stmt|;
comment|/*ExtractComparer.COMPARISONS_TABLE+" cmp " +             "join "+ExtractComparer.CONTAINERS_TABLE + " cnt "+             "on cmp."+AbstractProfiler.CONTAINER_HEADERS.CONTAINER_ID+             " = cnt."+AbstractProfiler.CONTAINER_HEADERS.CONTAINER_ID;*/
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|File
name|inputRoot
init|=
operator|new
name|File
argument_list|(
name|ComparerBatchTest
operator|.
name|class
operator|.
name|getResource
argument_list|(
literal|"/test-dirs"
argument_list|)
operator|.
name|toURI
argument_list|()
argument_list|)
decl_stmt|;
name|dbDir
operator|=
name|Files
operator|.
name|createTempDirectory
argument_list|(
name|inputRoot
operator|.
name|toPath
argument_list|()
argument_list|,
literal|"tika-test-db-dir-"
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|args
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|Path
name|db
init|=
name|FileSystems
operator|.
name|getDefault
argument_list|()
operator|.
name|getPath
argument_list|(
name|dbDir
operator|.
name|toString
argument_list|()
argument_list|,
literal|"comparisons_test"
argument_list|)
decl_stmt|;
name|args
operator|.
name|put
argument_list|(
literal|"-db"
argument_list|,
name|db
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|//for debugging, you can use this to select only one file pair to load
comment|//args.put("-includeFilePat", "file8.*");
comment|/*         BatchProcessTestExecutor ex = new BatchProcessTestExecutor(COMPARER_PROCESS_CLASS, args,                 "/tika-batch-comparison-eval-config.xml");         StreamStrings streamStrings = ex.execute();         System.out.println(streamStrings.getErrString());         System.out.println(streamStrings.getOutString());         H2Util dbUtil = new H2Util(db);         conn = dbUtil.getConnection();*/
block|}
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|conn
operator|.
name|close
argument_list|()
expr_stmt|;
name|FileUtils
operator|.
name|deleteDirectory
argument_list|(
name|dbDir
operator|.
name|toFile
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSimpleDBWriteAndRead
parameter_list|()
throws|throws
name|Exception
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|set
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
comment|//filenames
name|List
argument_list|<
name|String
argument_list|>
name|list
init|=
name|getColStrings
argument_list|(
name|Cols
operator|.
name|FILE_NAME
operator|.
name|name
argument_list|()
argument_list|,
name|ExtractComparer
operator|.
name|PROFILES_A
operator|.
name|getName
argument_list|()
argument_list|,
literal|""
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|7
argument_list|,
name|list
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|list
operator|.
name|contains
argument_list|(
literal|"file1.pdf"
argument_list|)
argument_list|)
expr_stmt|;
comment|//container ids in comparisons table
name|list
operator|=
name|getColStrings
argument_list|(
name|Cols
operator|.
name|CONTAINER_ID
operator|.
name|name
argument_list|()
argument_list|,
name|ExtractComparer
operator|.
name|COMPARISON_CONTAINERS
operator|.
name|getName
argument_list|()
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|list
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|set
operator|.
name|clear
argument_list|()
expr_stmt|;
name|set
operator|.
name|addAll
argument_list|(
name|list
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|set
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|/*         //ids in comparisons table         list = getColStrings(AbstractProfiler.HEADERS.ID.name(),                 compTable,"");         assertEquals(9, list.size());         set.clear(); set.addAll(list);         assertEquals(9, set.size());*/
block|}
comment|/*         @Test         public void testFile1PDFRow() throws Exception {             String where = fp+"='file1.pdf'";             Map<String, String> data = getRow(compJoinCont, where);             String result = data.get(ExtractComparer.COMPARISON_HEADERS.TOP_10_UNIQUE_TOKEN_DIFFS + "_A");             assertTrue(result.startsWith("over: 1"));              result = data.get(ExtractComparer.COMPARISON_HEADERS.TOP_10_UNIQUE_TOKEN_DIFFS + "_B");             assertTrue(result.startsWith("aardvark: 3 | bear: 2"));               assertEquals("aardvark: 3 | bear: 2",                     data.get(ExtractComparer.COMPARISON_HEADERS.TOP_10_MORE_IN_B.toString()));             assertEquals("fox: 2 | lazy: 1 | over: 1",                     data.get(ExtractComparer.COMPARISON_HEADERS.TOP_10_MORE_IN_A.toString()));             assertEquals("12", data.get(ExtractComparer.HEADERS.NUM_TOKENS+"_A"));             assertEquals("13", data.get(ExtractComparer.HEADERS.NUM_TOKENS+"_B"));             assertEquals("8", data.get(ExtractComparer.HEADERS.NUM_UNIQUE_TOKENS+"_A"));             assertEquals("9", data.get(ExtractComparer.HEADERS.NUM_UNIQUE_TOKENS+"_B"));              assertEquals(ExtractComparer.COMPARISON_HEADERS.OVERLAP.name(),                     0.64f, Float.parseFloat(data.get("OVERLAP")), 0.0001f);              assertEquals(ExtractComparer.COMPARISON_HEADERS.DICE_COEFFICIENT.name(),                     0.8235294f, Float.parseFloat(data.get("DICE_COEFFICIENT")), 0.0001f);              assertEquals(ExtractComparer.HEADERS.TOKEN_LENGTH_MEAN+"_A", 3.83333d,                     Double.parseDouble(                             data.get(ExtractComparer.HEADERS.TOKEN_LENGTH_MEAN+"_A")), 0.0001d);              assertEquals(ExtractComparer.HEADERS.TOKEN_LENGTH_MEAN+"_B", 4.923d,                     Double.parseDouble(                             data.get(ExtractComparer.HEADERS.TOKEN_LENGTH_MEAN+"_B")), 0.0001d);              assertEquals(ExtractComparer.HEADERS.TOKEN_LENGTH_STD_DEV+"_A", 1.0298d,                     Double.parseDouble(                             data.get(ExtractComparer.HEADERS.TOKEN_LENGTH_STD_DEV+"_A")), 0.0001d);              assertEquals(ExtractComparer.HEADERS.TOKEN_LENGTH_STD_DEV+"_B", 1.9774d,                     Double.parseDouble(data.get(ExtractComparer.HEADERS.TOKEN_LENGTH_STD_DEV+"_B")), 0.0001d);              assertEquals(ExtractComparer.HEADERS.TOKEN_LENGTH_SUM+"_A", 46,                     Integer.parseInt(                             data.get(ExtractComparer.HEADERS.TOKEN_LENGTH_SUM+"_A")));              assertEquals(ExtractComparer.HEADERS.TOKEN_LENGTH_SUM+"_B", 64,                     Integer.parseInt(data.get(ExtractComparer.HEADERS.TOKEN_LENGTH_SUM+"_B")));              assertEquals("TOKEN_ENTROPY_RATE_A", 0.237949,                     Double.parseDouble(data.get("TOKEN_ENTROPY_RATE_A")), 0.0001d);              assertEquals("TOKEN_ENTROPY_RATE_B", 0.232845,                     Double.parseDouble(data.get("TOKEN_ENTROPY_RATE_B")), 0.0001d);          }           @Test         public void testEmpty() throws Exception {             String where = fp+"='file4_emptyB.pdf'";             Map<String, String> data = getRow(contTable, where);             assertNull(data.get(AbstractProfiler.CONTAINER_HEADERS.JSON_EX +                     ExtractComparer.aExtension));             assertTrue(data.get(AbstractProfiler.CONTAINER_HEADERS.JSON_EX +                     ExtractComparer.bExtension).equals(AbstractProfiler.JSON_PARSE_EXCEPTION));              where = fp+"='file5_emptyA.pdf'";             data = getRow(contTable, where);             assertNull(data.get(AbstractProfiler.CONTAINER_HEADERS.JSON_EX +                     ExtractComparer.bExtension));             assertTrue(data.get(AbstractProfiler.CONTAINER_HEADERS.JSON_EX+                     ExtractComparer.aExtension).equals(AbstractProfiler.JSON_PARSE_EXCEPTION));         }              @Test             public void testMissingAttachment() throws Exception {                 String where = fp+"='file2_attachANotB.doc' and "+AbstractProfiler.HEADERS.EMBEDDED_FILE_PATH+                         "='inner.txt'";                 Map<String, String> data = getRow(compJoinCont, where);                 assertContains("attachment: 1", data.get(ExtractComparer.COMPARISON_HEADERS.TOP_10_MORE_IN_A.name()));                 assertNotContained("fox", data.get(ExtractComparer.COMPARISON_HEADERS.TOP_10_MORE_IN_B.name()));                 assertNull(data.get(ExtractComparer.HEADERS.TOP_N_TOKENS +                         ExtractComparer.bExtension));                 assertNotContained("fox", data.get(ExtractComparer.COMPARISON_HEADERS.TOP_10_UNIQUE_TOKEN_DIFFS +                         ExtractComparer.bExtension));                  assertEquals("3", data.get("NUM_METADATA_VALUES_A"));                 assertNull(data.get("DIFF_NUM_ATTACHMENTS"));                 assertNull(data.get("NUM_METADATA_VALUES_B"));                 assertEquals("0", data.get("NUM_UNIQUE_TOKENS_B"));                 assertNull(data.get("TOKEN_ENTROPY_RATE_B"));                 assertNull(data.get("NUM_EN_STOPS_TOP_N_B"));                  where = fp+"='file3_attachBNotA.doc' and "+AbstractProfiler.HEADERS.EMBEDDED_FILE_PATH+                         "='inner.txt'";                 data = getRow(compJoinCont, where);                 assertContains("attachment: 1", data.get(ExtractComparer.COMPARISON_HEADERS.TOP_10_MORE_IN_B.name()));                 assertNotContained("fox", data.get(ExtractComparer.COMPARISON_HEADERS.TOP_10_MORE_IN_A.name()));                 assertNull(data.get(ExtractComparer.HEADERS.TOP_N_TOKENS +                         ExtractComparer.aExtension));                 assertNotContained("fox", data.get(ExtractComparer.COMPARISON_HEADERS.TOP_10_UNIQUE_TOKEN_DIFFS +                         ExtractComparer.aExtension));                  assertEquals("3", data.get("NUM_METADATA_VALUES_B"));                 assertNull(data.get("DIFF_NUM_ATTACHMENTS"));                 assertNull(data.get("NUM_METADATA_VALUES_A"));                 assertEquals("0", data.get("NUM_UNIQUE_TOKENS_A"));                 assertNull(data.get("TOKEN_ENTROPY_RATE_A"));                 assertNull(data.get("NUM_EN_STOPS_TOP_N_A"));              }              @Test             public void testBothBadJson() throws Exception {                 debugDumpAll(contTable);                 String where = fp+"='file7_badJson.pdf'";                 Map<String, String> data = getRow(contTable, where);                 assertEquals(AbstractProfiler.JSON_PARSE_EXCEPTION,                         data.get(AbstractProfiler.CONTAINER_HEADERS.JSON_EX+ ExtractComparer.aExtension));                 assertEquals(AbstractProfiler.JSON_PARSE_EXCEPTION,                         data.get(AbstractProfiler.CONTAINER_HEADERS.JSON_EX+ ExtractComparer.bExtension));                 assertEquals("file7_badJson.pdf",                         data.get(AbstractProfiler.CONTAINER_HEADERS.FILE_PATH.name()));                 assertEquals("61", data.get("JSON_FILE_LENGTH_A"));                 assertEquals("0", data.get("JSON_FILE_LENGTH_B"));                 assertEquals("pdf", data.get(AbstractProfiler.CONTAINER_HEADERS.FILE_EXTENSION.name()));              }              @Test             public void testAccessPermissionException() throws Exception {                 String sql = "select "+                         AbstractProfiler.EXCEPTION_HEADERS.ACCESS_PERMISSION_EXCEPTION.name() +                         " from " + AbstractProfiler.EXCEPTIONS_TABLE+"_A exA "+                         " join " + ExtractComparer.COMPARISONS_TABLE + " cmp on cmp.ID=exA.ID "+                         " join " + ExtractComparer.CONTAINERS_TABLE + " cont on cmp.CONTAINER_ID=cont.CONTAINER_ID "+                         " where "+fp+"='file6_accessEx.pdf'";                 Statement st = conn.createStatement();                 ResultSet rs = st.executeQuery(sql);                 List<String> results = new ArrayList<String>();                 while (rs.next()) {                     results.add(rs.getString(1));                 }                 assertEquals(1, results.size());                 assertEquals("TRUE", results.get(0));                  sql = "select "+                         AbstractProfiler.EXCEPTION_HEADERS.ACCESS_PERMISSION_EXCEPTION.name() +                         " from " + AbstractProfiler.EXCEPTIONS_TABLE+"_B exB "+                         " join " + ExtractComparer.COMPARISONS_TABLE + " cmp on cmp.ID=exB.ID "+                         " join " + ExtractComparer.CONTAINERS_TABLE + " cont on cmp.CONTAINER_ID=cont.CONTAINER_ID "+                         " where "+fp+"='file6_accessEx.pdf'";                 st = conn.createStatement();                 rs = st.executeQuery(sql);                 results = new ArrayList<String>();                 while (rs.next()) {                     results.add(rs.getString(1));                 }                 assertEquals(1, results.size());                 assertEquals("TRUE", results.get(0));              }              @Test             public void testContainerException() throws Exception {                 String sql = "select * "+                         " from " + AbstractProfiler.EXCEPTIONS_TABLE+"_A exA "+                         " join " + ExtractComparer.COMPARISONS_TABLE + " cmp on cmp.ID=exA.ID "+                         " join " + ExtractComparer.CONTAINERS_TABLE + " cont on cmp.CONTAINER_ID=cont.CONTAINER_ID "+                         "where "+fp+"='file8_IOEx.pdf'";                 Statement st = conn.createStatement();                 ResultSet rs = st.executeQuery(sql);                  Map<String, String> data = new HashMap<String,String>();                 ResultSetMetaData rsM = rs.getMetaData();                 while (rs.next()) {                     for (int i = 1; i<= rsM.getColumnCount(); i++)                     data.put(rsM.getColumnName(i), rs.getString(i));                 }                  String sortStack = data.get(AbstractProfiler.EXCEPTION_HEADERS.SORT_STACK_TRACE.name());                 sortStack = sortStack.replaceAll("[\r\n]", "<N>");                 assertTrue(sortStack.startsWith("java.lang.RuntimeException<N>"));                  String fullStack = data.get(AbstractProfiler.EXCEPTION_HEADERS.ORIG_STACK_TRACE.name());                 assertTrue(                         fullStack.startsWith("java.lang.RuntimeException: java.io.IOException: Value is not an integer"));             }          private void debugDumpAll(String table) throws Exception {             Statement st = conn.createStatement();             String sql = "select * from "+table;             ResultSet rs = st.executeQuery(sql);             ResultSetMetaData m = rs.getMetaData();             for (int i = 1; i<= m.getColumnCount(); i++) {                 System.out.print(m.getColumnName(i) + ", ");             }             System.out.println("\n");             while (rs.next()) {                 for (int i = 1; i<= m.getColumnCount(); i++) {                     System.out.print(rs.getString(i)+", ");                 }                 System.out.println("\n");             }             st.close();          }         */
specifier|private
name|void
name|debugShowColumns
parameter_list|(
name|String
name|table
parameter_list|)
throws|throws
name|Exception
block|{
name|Statement
name|st
init|=
name|conn
operator|.
name|createStatement
argument_list|()
decl_stmt|;
name|String
name|sql
init|=
literal|"select * from "
operator|+
name|table
decl_stmt|;
name|ResultSet
name|rs
init|=
name|st
operator|.
name|executeQuery
argument_list|(
name|sql
argument_list|)
decl_stmt|;
name|ResultSetMetaData
name|m
init|=
name|rs
operator|.
name|getMetaData
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
name|m
operator|.
name|getColumnCount
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|i
operator|+
literal|" : "
operator|+
name|m
operator|.
name|getColumnName
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|st
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|//return the string value for one cell
specifier|private
name|String
name|getString
parameter_list|(
name|String
name|colName
parameter_list|,
name|String
name|table
parameter_list|,
name|String
name|where
parameter_list|)
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|String
argument_list|>
name|results
init|=
name|getColStrings
argument_list|(
name|colName
argument_list|,
name|table
argument_list|,
name|where
argument_list|)
decl_stmt|;
if|if
condition|(
name|results
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"more than one result"
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
name|results
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"no results"
argument_list|)
throw|;
block|}
return|return
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
return|;
block|}
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getRow
parameter_list|(
name|String
name|table
parameter_list|,
name|String
name|where
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|sql
init|=
name|getSql
argument_list|(
literal|"*"
argument_list|,
name|table
argument_list|,
name|where
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|results
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|Statement
name|st
init|=
literal|null
decl_stmt|;
try|try
block|{
name|st
operator|=
name|conn
operator|.
name|createStatement
argument_list|()
expr_stmt|;
name|ResultSet
name|rs
init|=
name|st
operator|.
name|executeQuery
argument_list|(
name|sql
argument_list|)
decl_stmt|;
name|ResultSetMetaData
name|m
init|=
name|rs
operator|.
name|getMetaData
argument_list|()
decl_stmt|;
name|int
name|rows
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|rs
operator|.
name|next
argument_list|()
condition|)
block|{
if|if
condition|(
name|rows
operator|>
literal|0
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"returned more than one row!"
argument_list|)
throw|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
name|m
operator|.
name|getColumnCount
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|results
operator|.
name|put
argument_list|(
name|m
operator|.
name|getColumnName
argument_list|(
name|i
argument_list|)
argument_list|,
name|rs
operator|.
name|getString
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|rows
operator|++
expr_stmt|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|st
operator|!=
literal|null
condition|)
block|{
name|st
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|results
return|;
block|}
comment|//return the string representations of the column values for one column
comment|//as a list of strings
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|getColStrings
parameter_list|(
name|String
name|colName
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|getColStrings
argument_list|(
name|colName
argument_list|,
name|ExtractComparer
operator|.
name|CONTENT_COMPARISONS
operator|.
name|getName
argument_list|()
argument_list|,
literal|null
argument_list|)
return|;
block|}
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|getColStrings
parameter_list|(
name|String
name|colName
parameter_list|,
name|String
name|table
parameter_list|,
name|String
name|where
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|sql
init|=
name|getSql
argument_list|(
name|colName
argument_list|,
name|table
argument_list|,
name|where
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|results
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|Statement
name|st
init|=
literal|null
decl_stmt|;
try|try
block|{
name|st
operator|=
name|conn
operator|.
name|createStatement
argument_list|()
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"SQL: "
operator|+
name|sql
argument_list|)
expr_stmt|;
name|ResultSet
name|rs
init|=
name|st
operator|.
name|executeQuery
argument_list|(
name|sql
argument_list|)
decl_stmt|;
while|while
condition|(
name|rs
operator|.
name|next
argument_list|()
condition|)
block|{
name|results
operator|.
name|add
argument_list|(
name|rs
operator|.
name|getString
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|st
operator|!=
literal|null
condition|)
block|{
name|st
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|results
return|;
block|}
specifier|private
name|String
name|getSql
parameter_list|(
name|String
name|colName
parameter_list|,
name|String
name|table
parameter_list|,
name|String
name|where
parameter_list|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"select "
argument_list|)
operator|.
name|append
argument_list|(
name|colName
argument_list|)
operator|.
name|append
argument_list|(
literal|" from "
argument_list|)
operator|.
name|append
argument_list|(
name|table
argument_list|)
expr_stmt|;
if|if
condition|(
name|where
operator|!=
literal|null
operator|&&
operator|!
name|where
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|" where "
argument_list|)
operator|.
name|append
argument_list|(
name|where
argument_list|)
expr_stmt|;
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

