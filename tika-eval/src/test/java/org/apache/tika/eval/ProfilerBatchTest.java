begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|eval
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|DirectoryStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Paths
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|ResultSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Statement
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|eval
operator|.
name|db
operator|.
name|Cols
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|eval
operator|.
name|db
operator|.
name|H2Util
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|eval
operator|.
name|db
operator|.
name|TableInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Ignore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
annotation|@
name|Ignore
specifier|public
class|class
name|ProfilerBatchTest
block|{
specifier|public
specifier|final
specifier|static
name|String
name|COMPARER_PROCESS_CLASS
init|=
literal|"org.apache.tika.batch.fs.FSBatchProcessCLI"
decl_stmt|;
specifier|private
specifier|static
name|Path
name|dbDir
decl_stmt|;
specifier|private
specifier|static
name|Connection
name|conn
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|String
name|profileTable
init|=
name|ExtractProfiler
operator|.
name|PROFILE_TABLE
operator|.
name|getName
argument_list|()
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|String
name|exTable
init|=
name|ExtractProfiler
operator|.
name|EXCEPTION_TABLE
operator|.
name|getName
argument_list|()
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|String
name|fpCol
init|=
name|Cols
operator|.
name|FILE_PATH
operator|.
name|name
argument_list|()
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|Path
name|inputRoot
init|=
name|Paths
operator|.
name|get
argument_list|(
operator|new
name|ComparerBatchTest
argument_list|()
operator|.
name|getClass
argument_list|()
operator|.
name|getResource
argument_list|(
literal|"/test-dirs/extractsA"
argument_list|)
operator|.
name|toURI
argument_list|()
argument_list|)
decl_stmt|;
name|dbDir
operator|=
name|Files
operator|.
name|createTempDirectory
argument_list|(
name|inputRoot
argument_list|,
literal|"tika-test-db-dir-"
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|args
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|Path
name|db
init|=
name|dbDir
operator|.
name|resolve
argument_list|(
literal|"profiler_test"
argument_list|)
decl_stmt|;
name|args
operator|.
name|put
argument_list|(
literal|"-db"
argument_list|,
name|db
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|//for debugging, you can use this to select only one file pair to load
comment|//args.put("-includeFilePat", "file8.*");
comment|/* BatchProcessTestExecutor ex = new BatchProcessTestExecutor(COMPARER_PROCESS_CLASS, args,                 "/single-file-profiler-crawl-input-config.xml");         StreamStrings streamStrings = ex.execute();         System.out.println(streamStrings.getErrString());         System.out.println(streamStrings.getOutString());*/
name|H2Util
name|dbUtil
init|=
operator|new
name|H2Util
argument_list|(
name|db
argument_list|)
decl_stmt|;
name|conn
operator|=
name|dbUtil
operator|.
name|getConnection
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|tearDown
parameter_list|()
throws|throws
name|IOException
block|{
try|try
block|{
name|conn
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|DirectoryStream
argument_list|<
name|Path
argument_list|>
name|dStream
init|=
name|Files
operator|.
name|newDirectoryStream
argument_list|(
name|dbDir
argument_list|)
decl_stmt|;
name|Iterator
argument_list|<
name|Path
argument_list|>
name|it
init|=
name|dStream
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Path
name|p
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|Files
operator|.
name|delete
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
name|dStream
operator|.
name|close
argument_list|()
expr_stmt|;
name|Files
operator|.
name|delete
argument_list|(
name|dbDir
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSimpleDBWriteAndRead
parameter_list|()
throws|throws
name|Exception
block|{
name|Statement
name|st
init|=
literal|null
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|fNameList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
try|try
block|{
name|String
name|sql
init|=
literal|"select * from "
operator|+
name|ExtractProfiler
operator|.
name|CONTAINER_TABLE
operator|.
name|getName
argument_list|()
decl_stmt|;
name|st
operator|=
name|conn
operator|.
name|createStatement
argument_list|()
expr_stmt|;
name|ResultSet
name|rs
init|=
name|st
operator|.
name|executeQuery
argument_list|(
name|sql
argument_list|)
decl_stmt|;
while|while
condition|(
name|rs
operator|.
name|next
argument_list|()
condition|)
block|{
name|String
name|fileName
init|=
name|rs
operator|.
name|getString
argument_list|(
name|Cols
operator|.
name|FILE_PATH
operator|.
name|name
argument_list|()
argument_list|)
decl_stmt|;
name|fNameList
operator|.
name|add
argument_list|(
name|fileName
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|st
operator|!=
literal|null
condition|)
block|{
name|st
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
name|debugTable
argument_list|(
name|ExtractProfiler
operator|.
name|CONTAINER_TABLE
argument_list|)
expr_stmt|;
name|debugTable
argument_list|(
name|ExtractProfiler
operator|.
name|PROFILE_TABLE
argument_list|)
expr_stmt|;
name|debugTable
argument_list|(
name|ExtractProfiler
operator|.
name|CONTENTS_TABLE
argument_list|)
expr_stmt|;
name|debugTable
argument_list|(
name|ExtractProfiler
operator|.
name|EXCEPTION_TABLE
argument_list|)
expr_stmt|;
name|debugTable
argument_list|(
name|ExtractProfiler
operator|.
name|ERROR_TABLE
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|fNameList
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"file1.pdf"
argument_list|,
name|fNameList
operator|.
name|contains
argument_list|(
literal|"file1.pdf"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"file2_attachANotB.doc"
argument_list|,
name|fNameList
operator|.
name|contains
argument_list|(
literal|"file2_attachANotB.doc"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"file3_attachBNotA.doc"
argument_list|,
name|fNameList
operator|.
name|contains
argument_list|(
literal|"file3_attachBNotA.doc"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"file4_emptyB.pdf"
argument_list|,
name|fNameList
operator|.
name|contains
argument_list|(
literal|"file4_emptyB.pdf"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"file7_badJson.pdf"
argument_list|,
name|fNameList
operator|.
name|contains
argument_list|(
literal|"file7_badJson.pdf"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testExtractErrors
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|sql
init|=
literal|"select EXTRACT_ERROR_TYPE_ID from errors e"
operator|+
literal|" join containers c on c.container_id = e.container_id "
operator|+
literal|" where c.file_path='file9_noextract.txt'"
decl_stmt|;
name|assertEquals
argument_list|(
literal|"missing extract: file9_noextract.txt"
argument_list|,
literal|"0"
argument_list|,
name|getSingleResult
argument_list|(
name|sql
argument_list|)
argument_list|)
expr_stmt|;
name|debugTable
argument_list|(
name|ExtractProfiler
operator|.
name|CONTAINER_TABLE
argument_list|)
expr_stmt|;
name|debugTable
argument_list|(
name|ExtractProfiler
operator|.
name|PROFILE_TABLE
argument_list|)
expr_stmt|;
name|debugTable
argument_list|(
name|ExtractProfiler
operator|.
name|CONTENTS_TABLE
argument_list|)
expr_stmt|;
name|debugTable
argument_list|(
name|ExtractProfiler
operator|.
name|EXCEPTION_TABLE
argument_list|)
expr_stmt|;
name|debugTable
argument_list|(
name|ExtractProfiler
operator|.
name|ERROR_TABLE
argument_list|)
expr_stmt|;
name|sql
operator|=
literal|"select EXTRACT_ERROR_TYPE_ID from errors e"
operator|+
literal|" join containers c on c.container_id = e.container_id "
operator|+
literal|" where c.file_path='file5_emptyA.pdf'"
expr_stmt|;
name|assertEquals
argument_list|(
literal|"empty extract: file5_emptyA.pdf"
argument_list|,
literal|"1"
argument_list|,
name|getSingleResult
argument_list|(
name|sql
argument_list|)
argument_list|)
expr_stmt|;
name|sql
operator|=
literal|"select EXTRACT_ERROR_TYPE_ID from errors e"
operator|+
literal|" join containers c on c.container_id = e.container_id "
operator|+
literal|" where c.file_path='file7_badJson.pdf'"
expr_stmt|;
name|assertEquals
argument_list|(
literal|"extract error:file7_badJson.pdf"
argument_list|,
literal|"2"
argument_list|,
name|getSingleResult
argument_list|(
name|sql
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testParseErrors
parameter_list|()
throws|throws
name|Exception
block|{
name|debugTable
argument_list|(
name|ExtractProfiler
operator|.
name|ERROR_TABLE
argument_list|)
expr_stmt|;
name|String
name|sql
init|=
literal|"select file_path from errors where container_id is null"
decl_stmt|;
name|assertEquals
argument_list|(
literal|"file10_permahang.txt"
argument_list|,
name|getSingleResult
argument_list|(
name|sql
argument_list|)
argument_list|)
expr_stmt|;
name|sql
operator|=
literal|"select extract_error_type_id from errors where file_path='file11_oom.txt'"
expr_stmt|;
name|assertEquals
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|AbstractProfiler
operator|.
name|EXTRACT_ERROR_TYPE
operator|.
name|ZERO_BYTE_EXTRACT_FILE
operator|.
name|ordinal
argument_list|()
argument_list|)
argument_list|,
name|getSingleResult
argument_list|(
name|sql
argument_list|)
argument_list|)
expr_stmt|;
name|sql
operator|=
literal|"select parse_error_type_id from errors where file_path='file11_oom.txt'"
expr_stmt|;
name|assertEquals
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|AbstractProfiler
operator|.
name|PARSE_ERROR_TYPE
operator|.
name|OOM
operator|.
name|ordinal
argument_list|()
argument_list|)
argument_list|,
name|getSingleResult
argument_list|(
name|sql
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testParseExceptions
parameter_list|()
throws|throws
name|Exception
block|{
name|debugTable
argument_list|(
name|ExtractProfiler
operator|.
name|EXCEPTION_TABLE
argument_list|)
expr_stmt|;
block|}
specifier|private
name|String
name|getSingleResult
parameter_list|(
name|String
name|sql
parameter_list|)
throws|throws
name|Exception
block|{
name|Statement
name|st
init|=
literal|null
decl_stmt|;
name|st
operator|=
name|conn
operator|.
name|createStatement
argument_list|()
expr_stmt|;
name|ResultSet
name|rs
init|=
name|st
operator|.
name|executeQuery
argument_list|(
name|sql
argument_list|)
decl_stmt|;
name|int
name|hits
init|=
literal|0
decl_stmt|;
name|String
name|val
init|=
literal|""
decl_stmt|;
while|while
condition|(
name|rs
operator|.
name|next
argument_list|()
condition|)
block|{
name|assertEquals
argument_list|(
literal|"must have only one column in result"
argument_list|,
literal|1
argument_list|,
name|rs
operator|.
name|getMetaData
argument_list|()
operator|.
name|getColumnCount
argument_list|()
argument_list|)
expr_stmt|;
name|val
operator|=
name|rs
operator|.
name|getString
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|hits
operator|++
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"must have only one hit"
argument_list|,
literal|1
argument_list|,
name|hits
argument_list|)
expr_stmt|;
return|return
name|val
return|;
block|}
comment|//TODO: lots more testing!
specifier|public
name|void
name|debugTable
parameter_list|(
name|TableInfo
name|table
parameter_list|)
throws|throws
name|Exception
block|{
name|Statement
name|st
init|=
literal|null
decl_stmt|;
try|try
block|{
name|String
name|sql
init|=
literal|"select * from "
operator|+
name|table
operator|.
name|getName
argument_list|()
decl_stmt|;
name|st
operator|=
name|conn
operator|.
name|createStatement
argument_list|()
expr_stmt|;
name|ResultSet
name|rs
init|=
name|st
operator|.
name|executeQuery
argument_list|(
name|sql
argument_list|)
decl_stmt|;
name|int
name|colCount
init|=
name|rs
operator|.
name|getMetaData
argument_list|()
operator|.
name|getColumnCount
argument_list|()
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"TABLE: "
operator|+
name|table
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
name|colCount
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|>
literal|1
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|print
argument_list|(
literal|" | "
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|print
argument_list|(
name|rs
operator|.
name|getMetaData
argument_list|()
operator|.
name|getColumnName
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|int
name|rowCount
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|rs
operator|.
name|next
argument_list|()
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
name|colCount
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|>
literal|1
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|print
argument_list|(
literal|" | "
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|print
argument_list|(
name|rs
operator|.
name|getString
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|rowCount
operator|++
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|""
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|rowCount
operator|==
literal|0
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|table
operator|.
name|getName
argument_list|()
operator|+
literal|" was empty"
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|st
operator|!=
literal|null
condition|)
block|{
name|st
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

