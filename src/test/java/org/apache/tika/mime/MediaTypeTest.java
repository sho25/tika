begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|mime
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_class
specifier|public
class|class
name|MediaTypeTest
extends|extends
name|TestCase
block|{
specifier|public
name|void
name|testBasics
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|"application/octet-stream"
argument_list|,
operator|new
name|MediaType
argument_list|(
literal|"application"
argument_list|,
literal|"octet-stream"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"text/plain"
argument_list|,
operator|new
name|MediaType
argument_list|(
literal|"text"
argument_list|,
literal|"plain"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|parameters
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"text/plain"
argument_list|,
operator|new
name|MediaType
argument_list|(
literal|"text"
argument_list|,
literal|"plain"
argument_list|,
name|parameters
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|parameters
operator|.
name|put
argument_list|(
literal|"charset"
argument_list|,
literal|"UTF-8"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"text/plain; charset=UTF-8"
argument_list|,
operator|new
name|MediaType
argument_list|(
literal|"text"
argument_list|,
literal|"plain"
argument_list|,
name|parameters
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|parameters
operator|.
name|put
argument_list|(
literal|"x-eol-style"
argument_list|,
literal|"crlf"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"text/plain; charset=UTF-8; x-eol-style=crlf"
argument_list|,
operator|new
name|MediaType
argument_list|(
literal|"text"
argument_list|,
literal|"plain"
argument_list|,
name|parameters
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testLowerCase
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|"text/plain"
argument_list|,
operator|new
name|MediaType
argument_list|(
literal|"TEXT"
argument_list|,
literal|"PLAIN"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"text/plain"
argument_list|,
operator|new
name|MediaType
argument_list|(
literal|"Text"
argument_list|,
literal|"Plain"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|parameters
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"text/plain"
argument_list|,
operator|new
name|MediaType
argument_list|(
literal|"text"
argument_list|,
literal|"PLAIN"
argument_list|,
name|parameters
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|parameters
operator|.
name|put
argument_list|(
literal|"CHARSET"
argument_list|,
literal|"UTF-8"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"text/plain; charset=UTF-8"
argument_list|,
operator|new
name|MediaType
argument_list|(
literal|"TEXT"
argument_list|,
literal|"plain"
argument_list|,
name|parameters
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|parameters
operator|.
name|put
argument_list|(
literal|"X-Eol-Style"
argument_list|,
literal|"crlf"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"text/plain; charset=UTF-8; x-eol-style=crlf"
argument_list|,
operator|new
name|MediaType
argument_list|(
literal|"TeXt"
argument_list|,
literal|"PlAiN"
argument_list|,
name|parameters
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testTrim
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|"text/plain"
argument_list|,
operator|new
name|MediaType
argument_list|(
literal|" text "
argument_list|,
literal|" plain "
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"text/plain"
argument_list|,
operator|new
name|MediaType
argument_list|(
literal|"\ttext"
argument_list|,
literal|"plain\t"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|parameters
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"text/plain"
argument_list|,
operator|new
name|MediaType
argument_list|(
literal|"text\r\n"
argument_list|,
literal|" \tplain"
argument_list|,
name|parameters
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|parameters
operator|.
name|put
argument_list|(
literal|" charset"
argument_list|,
literal|"UTF-8"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"text/plain; charset=UTF-8"
argument_list|,
operator|new
name|MediaType
argument_list|(
literal|"\n\ntext"
argument_list|,
literal|"plain \r"
argument_list|,
name|parameters
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|parameters
operator|.
name|put
argument_list|(
literal|"\r\n\tx-eol-style  \t"
argument_list|,
literal|"crlf"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"text/plain; charset=UTF-8; x-eol-style=crlf"
argument_list|,
operator|new
name|MediaType
argument_list|(
literal|"    text"
argument_list|,
literal|"\tplain "
argument_list|,
name|parameters
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testQuote
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|parameters
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|parameters
operator|.
name|put
argument_list|(
literal|"a"
argument_list|,
literal|" value with spaces "
argument_list|)
expr_stmt|;
name|parameters
operator|.
name|put
argument_list|(
literal|"b"
argument_list|,
literal|"text/plain"
argument_list|)
expr_stmt|;
name|parameters
operator|.
name|put
argument_list|(
literal|"c"
argument_list|,
literal|"()<>@,;:\\\"/[]?="
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"text/plain; a=\" value with spaces \"; b=\"text\\/plain\""
operator|+
literal|"; c=\"\\(\\)\\<\\>\\@\\,\\;\\:\\\\\\\"\\/\\[\\]\\?\\=\""
argument_list|,
operator|new
name|MediaType
argument_list|(
literal|"text"
argument_list|,
literal|"plain"
argument_list|,
name|parameters
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

