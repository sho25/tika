begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|sax
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|sax
operator|.
name|WriteOutContentHandler
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_comment
comment|/**  * Test case for {@link AppendableAdaptor}.  *  * @version $Revision$  */
end_comment

begin_class
specifier|public
class|class
name|AppendableAdaptorTest
extends|extends
name|TestCase
block|{
comment|/**      * Test {@link AppendableAdaptor#append(char)}.      */
specifier|public
name|void
name|testAppendChar
parameter_list|()
block|{
name|StringWriter
name|writer
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|WriteOutContentHandler
name|handler
init|=
operator|new
name|WriteOutContentHandler
argument_list|(
name|writer
argument_list|)
decl_stmt|;
name|Appendable
name|appendable
init|=
operator|new
name|AppendableAdaptor
argument_list|(
name|handler
argument_list|)
decl_stmt|;
try|try
block|{
name|appendable
operator|.
name|append
argument_list|(
literal|'F'
argument_list|)
operator|.
name|append
argument_list|(
literal|'o'
argument_list|)
operator|.
name|append
argument_list|(
literal|'o'
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|fail
argument_list|(
literal|"Threw: "
operator|+
name|t
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"Foo"
argument_list|,
name|writer
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Test {@link AppendableAdaptor#append(String)}.      */
specifier|public
name|void
name|testAppendString
parameter_list|()
block|{
name|StringWriter
name|writer
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|WriteOutContentHandler
name|handler
init|=
operator|new
name|WriteOutContentHandler
argument_list|(
name|writer
argument_list|)
decl_stmt|;
name|Appendable
name|appendable
init|=
operator|new
name|AppendableAdaptor
argument_list|(
name|handler
argument_list|)
decl_stmt|;
try|try
block|{
name|appendable
operator|.
name|append
argument_list|(
literal|"Foo"
argument_list|)
operator|.
name|append
argument_list|(
literal|"Bar"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|fail
argument_list|(
literal|"Threw: "
operator|+
name|t
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"FooBar"
argument_list|,
name|writer
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Test {@link AppendableAdaptor#append(String)}.      */
specifier|public
name|void
name|testAppendStringBuilder
parameter_list|()
block|{
name|StringWriter
name|writer
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|WriteOutContentHandler
name|handler
init|=
operator|new
name|WriteOutContentHandler
argument_list|(
name|writer
argument_list|)
decl_stmt|;
name|Appendable
name|appendable
init|=
operator|new
name|AppendableAdaptor
argument_list|(
name|handler
argument_list|)
decl_stmt|;
try|try
block|{
name|appendable
operator|.
name|append
argument_list|(
operator|new
name|StringBuilder
argument_list|(
literal|"Foo"
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
operator|new
name|StringBuilder
argument_list|(
literal|"Bar"
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|fail
argument_list|(
literal|"Threw: "
operator|+
name|t
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"FooBar"
argument_list|,
name|writer
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Test {@link AppendableAdaptor#append(String, int, int)}.      */
specifier|public
name|void
name|testAppendPortion
parameter_list|()
block|{
name|StringWriter
name|writer
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|WriteOutContentHandler
name|handler
init|=
operator|new
name|WriteOutContentHandler
argument_list|(
name|writer
argument_list|)
decl_stmt|;
name|Appendable
name|appendable
init|=
operator|new
name|AppendableAdaptor
argument_list|(
name|handler
argument_list|)
decl_stmt|;
try|try
block|{
name|appendable
operator|.
name|append
argument_list|(
literal|"12345"
argument_list|,
literal|1
argument_list|,
literal|3
argument_list|)
operator|.
name|append
argument_list|(
literal|"ABC"
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|fail
argument_list|(
literal|"Threw: "
operator|+
name|t
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"23C"
argument_list|,
name|writer
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Test errors      */
specifier|public
name|void
name|testErrors
parameter_list|()
block|{
try|try
block|{
operator|new
name|AppendableAdaptor
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected IllegalArgumentException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
comment|// expected result
block|}
name|WriteOutContentHandler
name|handler
init|=
operator|new
name|WriteOutContentHandler
argument_list|(
operator|new
name|StringWriter
argument_list|()
argument_list|)
decl_stmt|;
name|Appendable
name|appendable
init|=
operator|new
name|AppendableAdaptor
argument_list|(
name|handler
argument_list|)
decl_stmt|;
try|try
block|{
name|appendable
operator|.
name|append
argument_list|(
literal|"123"
argument_list|,
literal|2
argument_list|,
literal|8
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"End too big, expected IndexOutOfBoundsException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|fail
argument_list|(
literal|"Threw: "
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IndexOutOfBoundsException
name|e
parameter_list|)
block|{
comment|// expected result
block|}
try|try
block|{
name|appendable
operator|.
name|append
argument_list|(
literal|"123"
argument_list|,
literal|5
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Start too big, expected IndexOutOfBoundsException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|fail
argument_list|(
literal|"Threw: "
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IndexOutOfBoundsException
name|e
parameter_list|)
block|{
comment|// expected result
block|}
block|}
block|}
end_class

end_unit

