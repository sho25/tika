begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|sax
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|input
operator|.
name|CountingInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|input
operator|.
name|NullInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|helpers
operator|.
name|DefaultHandler
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_comment
comment|/**  * Tests for the {@link SecureContentHandler} class.  */
end_comment

begin_class
specifier|public
class|class
name|SecureContentHandlerTest
extends|extends
name|TestCase
block|{
specifier|private
specifier|static
specifier|final
name|int
name|MANY_BYTES
init|=
literal|2000000
decl_stmt|;
specifier|private
name|CountingInputStream
name|stream
decl_stmt|;
specifier|private
name|SecureContentHandler
name|handler
decl_stmt|;
specifier|protected
name|void
name|setUp
parameter_list|()
block|{
name|stream
operator|=
operator|new
name|CountingInputStream
argument_list|(
operator|new
name|NullInputStream
argument_list|(
name|MANY_BYTES
argument_list|)
argument_list|)
expr_stmt|;
name|handler
operator|=
operator|new
name|SecureContentHandler
argument_list|(
operator|new
name|DefaultHandler
argument_list|()
argument_list|,
name|stream
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testZeroCharactersPerByte
parameter_list|()
throws|throws
name|IOException
block|{
try|try
block|{
name|char
index|[]
name|ch
init|=
operator|new
name|char
index|[]
block|{
literal|'x'
block|}
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|MANY_BYTES
condition|;
name|i
operator|++
control|)
block|{
name|stream
operator|.
name|read
argument_list|()
expr_stmt|;
block|}
name|handler
operator|.
name|characters
argument_list|(
name|ch
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SAXException
name|e
parameter_list|)
block|{
name|fail
argument_list|(
literal|"Unexpected SAXException"
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testOneCharacterPerByte
parameter_list|()
throws|throws
name|IOException
block|{
try|try
block|{
name|char
index|[]
name|ch
init|=
operator|new
name|char
index|[
literal|1
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|MANY_BYTES
condition|;
name|i
operator|++
control|)
block|{
name|stream
operator|.
name|read
argument_list|()
expr_stmt|;
name|handler
operator|.
name|characters
argument_list|(
name|ch
argument_list|,
literal|0
argument_list|,
name|ch
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|SAXException
name|e
parameter_list|)
block|{
name|fail
argument_list|(
literal|"Unexpected SAXException"
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testTenCharactersPerByte
parameter_list|()
throws|throws
name|IOException
block|{
try|try
block|{
name|char
index|[]
name|ch
init|=
operator|new
name|char
index|[
literal|10
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|MANY_BYTES
condition|;
name|i
operator|++
control|)
block|{
name|stream
operator|.
name|read
argument_list|()
expr_stmt|;
name|handler
operator|.
name|characters
argument_list|(
name|ch
argument_list|,
literal|0
argument_list|,
name|ch
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|SAXException
name|e
parameter_list|)
block|{
name|fail
argument_list|(
literal|"Unexpected SAXException"
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testManyCharactersPerByte
parameter_list|()
throws|throws
name|IOException
block|{
try|try
block|{
name|char
index|[]
name|ch
init|=
operator|new
name|char
index|[
literal|1000
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|MANY_BYTES
condition|;
name|i
operator|++
control|)
block|{
name|stream
operator|.
name|read
argument_list|()
expr_stmt|;
name|handler
operator|.
name|characters
argument_list|(
name|ch
argument_list|,
literal|0
argument_list|,
name|ch
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
name|fail
argument_list|(
literal|"Expected SAXException not thrown"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SAXException
name|e
parameter_list|)
block|{
comment|// expected
block|}
block|}
specifier|public
name|void
name|testSomeCharactersWithoutInput
parameter_list|()
throws|throws
name|IOException
block|{
try|try
block|{
name|char
index|[]
name|ch
init|=
operator|new
name|char
index|[
literal|100
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|100
condition|;
name|i
operator|++
control|)
block|{
name|handler
operator|.
name|characters
argument_list|(
name|ch
argument_list|,
literal|0
argument_list|,
name|ch
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|SAXException
name|e
parameter_list|)
block|{
name|fail
argument_list|(
literal|"Unexpected SAXException"
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testManyCharactersWithoutInput
parameter_list|()
throws|throws
name|IOException
block|{
try|try
block|{
name|char
index|[]
name|ch
init|=
operator|new
name|char
index|[
literal|100
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|20000
condition|;
name|i
operator|++
control|)
block|{
name|handler
operator|.
name|characters
argument_list|(
name|ch
argument_list|,
literal|0
argument_list|,
name|ch
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
name|fail
argument_list|(
literal|"Expected SAXException not thrown"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SAXException
name|e
parameter_list|)
block|{
comment|// expected
block|}
block|}
block|}
end_class

end_unit

