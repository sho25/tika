begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|config
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jdom
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jdom
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jdom
operator|.
name|JDOMException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jdom
operator|.
name|input
operator|.
name|SAXBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jdom
operator|.
name|xpath
operator|.
name|XPath
import|;
end_import

begin_comment
comment|/**  * Parse xml config file. Use cache mecanisme to store multiple configs     * @author Rida Benjelloun (ridabenjelloun@apache.org)    */
end_comment

begin_class
specifier|public
class|class
name|LiusConfig
block|{
specifier|static
name|Logger
name|logger
init|=
name|Logger
operator|.
name|getRootLogger
argument_list|()
decl_stmt|;
specifier|private
specifier|static
name|Map
name|configsCache
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|LiusConfig
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|static
name|List
argument_list|<
name|ParserConfig
argument_list|>
name|parsersConfigs
decl_stmt|;
specifier|private
specifier|static
name|LiusConfig
name|tc
decl_stmt|;
specifier|private
name|LiusConfig
parameter_list|()
block|{     }
specifier|private
specifier|static
name|String
name|currentFile
decl_stmt|;
specifier|public
specifier|static
name|LiusConfig
name|getInstance
parameter_list|(
name|String
name|configFile
parameter_list|)
throws|throws
name|JDOMException
throws|,
name|IOException
block|{
if|if
condition|(
name|configsCache
operator|.
name|containsKey
argument_list|(
name|configFile
argument_list|)
condition|)
block|{
return|return
operator|(
name|LiusConfig
operator|)
name|configsCache
operator|.
name|get
argument_list|(
name|configFile
argument_list|)
return|;
block|}
else|else
block|{
name|Document
name|doc
init|=
name|parse
argument_list|(
name|configFile
argument_list|)
decl_stmt|;
name|tc
operator|=
operator|new
name|LiusConfig
argument_list|()
expr_stmt|;
name|populateConfig
argument_list|(
name|doc
argument_list|,
name|tc
argument_list|)
expr_stmt|;
name|configsCache
operator|.
name|put
argument_list|(
name|configFile
argument_list|,
name|tc
argument_list|)
expr_stmt|;
block|}
name|currentFile
operator|=
name|configFile
expr_stmt|;
return|return
name|tc
return|;
block|}
specifier|public
name|List
argument_list|<
name|ParserConfig
argument_list|>
name|getParsersConfigs
parameter_list|()
block|{
return|return
name|parsersConfigs
return|;
block|}
specifier|public
name|void
name|setParsersConfigs
parameter_list|(
name|List
argument_list|<
name|ParserConfig
argument_list|>
name|parsersConfigs
parameter_list|)
block|{
name|this
operator|.
name|parsersConfigs
operator|=
name|parsersConfigs
expr_stmt|;
block|}
specifier|public
name|ParserConfig
name|getParserConfig
parameter_list|(
name|String
name|mimeType
parameter_list|)
block|{
name|ParserConfig
name|pc
init|=
literal|null
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|parsersConfigs
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|(
operator|(
name|ParserConfig
operator|)
name|parsersConfigs
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|)
operator|.
name|getMimes
argument_list|()
operator|.
name|containsKey
argument_list|(
name|mimeType
argument_list|)
condition|)
block|{
return|return
operator|(
name|ParserConfig
operator|)
name|parsersConfigs
operator|.
name|get
argument_list|(
name|i
argument_list|)
return|;
block|}
block|}
return|return
name|pc
return|;
block|}
specifier|private
specifier|static
name|Document
name|parse
parameter_list|(
name|String
name|file
parameter_list|)
throws|throws
name|JDOMException
throws|,
name|IOException
block|{
name|org
operator|.
name|jdom
operator|.
name|Document
name|xmlDoc
init|=
operator|new
name|org
operator|.
name|jdom
operator|.
name|Document
argument_list|()
decl_stmt|;
try|try
block|{
name|SAXBuilder
name|builder
init|=
operator|new
name|SAXBuilder
argument_list|()
decl_stmt|;
name|xmlDoc
operator|=
name|builder
operator|.
name|build
argument_list|(
operator|new
name|File
argument_list|(
name|file
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|JDOMException
name|jde
parameter_list|)
block|{
name|logger
operator|.
name|error
argument_list|(
name|jde
operator|.
name|getMessage
argument_list|()
argument_list|,
name|jde
argument_list|)
expr_stmt|;
throw|throw
name|jde
throw|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|logger
operator|.
name|error
argument_list|(
name|ioe
operator|.
name|getMessage
argument_list|()
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
throw|throw
name|ioe
throw|;
block|}
return|return
name|xmlDoc
return|;
block|}
specifier|private
specifier|static
name|void
name|populateConfig
parameter_list|(
name|Document
name|doc
parameter_list|,
name|LiusConfig
name|tc
parameter_list|)
block|{
name|parsersConfigs
operator|=
operator|new
name|ArrayList
argument_list|<
name|ParserConfig
argument_list|>
argument_list|()
expr_stmt|;
try|try
block|{
name|List
name|parsersList
init|=
name|XPath
operator|.
name|selectNodes
argument_list|(
name|doc
argument_list|,
literal|"//parser"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|parsersList
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|ParserConfig
name|pc
init|=
operator|new
name|ParserConfig
argument_list|()
decl_stmt|;
name|Element
name|parserElem
init|=
operator|(
name|Element
operator|)
name|parsersList
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|pc
operator|.
name|setName
argument_list|(
name|parserElem
operator|.
name|getAttributeValue
argument_list|(
literal|"name"
argument_list|)
argument_list|)
expr_stmt|;
name|pc
operator|.
name|setParserClass
argument_list|(
name|parserElem
operator|.
name|getAttributeValue
argument_list|(
literal|"class"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|parserElem
operator|.
name|getChild
argument_list|(
literal|"namespace"
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|pc
operator|.
name|setNameSpace
argument_list|(
name|parserElem
operator|.
name|getChild
argument_list|(
literal|"namespace"
argument_list|)
operator|.
name|getTextTrim
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|mimes
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|List
name|mimesElems
init|=
name|parserElem
operator|.
name|getChildren
argument_list|(
literal|"mime"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|mimesElems
operator|.
name|size
argument_list|()
condition|;
name|j
operator|++
control|)
block|{
name|String
name|mime
init|=
operator|(
operator|(
name|Element
operator|)
name|mimesElems
operator|.
name|get
argument_list|(
name|j
argument_list|)
operator|)
operator|.
name|getTextTrim
argument_list|()
decl_stmt|;
name|mimes
operator|.
name|put
argument_list|(
name|mime
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
name|pc
operator|.
name|setMimes
argument_list|(
name|mimes
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Content
argument_list|>
name|contents
init|=
operator|new
name|ArrayList
argument_list|<
name|Content
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|parserElem
operator|.
name|getChild
argument_list|(
literal|"extract"
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|List
name|contentsElems
init|=
name|parserElem
operator|.
name|getChild
argument_list|(
literal|"extract"
argument_list|)
operator|.
name|getChildren
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|contentsElems
operator|.
name|size
argument_list|()
condition|;
name|j
operator|++
control|)
block|{
name|Content
name|content
init|=
operator|new
name|Content
argument_list|()
decl_stmt|;
name|Element
name|contentElem
init|=
operator|(
name|Element
operator|)
name|contentsElems
operator|.
name|get
argument_list|(
name|j
argument_list|)
decl_stmt|;
name|content
operator|.
name|setName
argument_list|(
name|contentElem
operator|.
name|getAttributeValue
argument_list|(
literal|"name"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|contentElem
operator|.
name|getAttribute
argument_list|(
literal|"xpathSelect"
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|content
operator|.
name|setXPathSelect
argument_list|(
name|contentElem
operator|.
name|getAttributeValue
argument_list|(
literal|"xpathSelect"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|contentElem
operator|.
name|getAttribute
argument_list|(
literal|"textSelect"
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|content
operator|.
name|setTextSelect
argument_list|(
name|contentElem
operator|.
name|getAttributeValue
argument_list|(
literal|"textSelect"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|contentElem
operator|.
name|getChild
argument_list|(
literal|"regexSelect"
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|content
operator|.
name|setRegexSelect
argument_list|(
name|contentElem
operator|.
name|getChild
argument_list|(
literal|"regexSelect"
argument_list|)
operator|.
name|getTextTrim
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|contents
operator|.
name|add
argument_list|(
name|content
argument_list|)
expr_stmt|;
block|}
block|}
name|pc
operator|.
name|setContents
argument_list|(
name|contents
argument_list|)
expr_stmt|;
name|parsersConfigs
operator|.
name|add
argument_list|(
name|pc
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|JDOMException
name|e
parameter_list|)
block|{
name|logger
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|tc
operator|.
name|setParsersConfigs
argument_list|(
name|parsersConfigs
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

