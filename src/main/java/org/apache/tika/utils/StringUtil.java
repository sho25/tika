begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|utils
package|;
end_package

begin_comment
comment|// JDK imports
end_comment

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|Charset
import|;
end_import

begin_comment
comment|/**  * A collection of String processing utility methods.  */
end_comment

begin_class
specifier|public
class|class
name|StringUtil
block|{
comment|/**      * Returns a copy of<code>s</code> padded with trailing spaces so that      * it's length is<code>length</code>. Strings already      *<code>length</code> characters long or longer are not altered.      */
specifier|public
specifier|static
name|String
name|rightPad
parameter_list|(
name|String
name|s
parameter_list|,
name|int
name|length
parameter_list|)
block|{
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|(
name|s
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|length
operator|-
name|s
operator|.
name|length
argument_list|()
init|;
name|i
operator|>
literal|0
condition|;
name|i
operator|--
control|)
name|sb
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**      * Returns a copy of<code>s</code> padded with leading spaces so that      * it's length is<code>length</code>. Strings already      *<code>length</code> characters long or longer are not altered.      */
specifier|public
specifier|static
name|String
name|leftPad
parameter_list|(
name|String
name|s
parameter_list|,
name|int
name|length
parameter_list|)
block|{
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|length
operator|-
name|s
operator|.
name|length
argument_list|()
init|;
name|i
operator|>
literal|0
condition|;
name|i
operator|--
control|)
name|sb
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|s
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|private
specifier|static
specifier|final
name|char
index|[]
name|HEX_DIGITS
init|=
block|{
literal|'0'
block|,
literal|'1'
block|,
literal|'2'
block|,
literal|'3'
block|,
literal|'4'
block|,
literal|'5'
block|,
literal|'6'
block|,
literal|'7'
block|,
literal|'8'
block|,
literal|'9'
block|,
literal|'a'
block|,
literal|'b'
block|,
literal|'c'
block|,
literal|'d'
block|,
literal|'e'
block|,
literal|'f'
block|}
decl_stmt|;
comment|/**      * Convenience call for {@link #toHexString(byte[], String, int)}, where      *<code>sep = null; lineLen = Integer.MAX_VALUE</code>.      *       * @param buf      */
specifier|public
specifier|static
name|String
name|toHexString
parameter_list|(
name|byte
index|[]
name|buf
parameter_list|)
block|{
return|return
name|toHexString
argument_list|(
name|buf
argument_list|,
literal|null
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
return|;
block|}
comment|/**      * Get a text representation of a byte[] as hexadecimal String, where each      * pair of hexadecimal digits corresponds to consecutive bytes in the array.      *       * @param buf      *            input data      * @param sep      *            separate every pair of hexadecimal digits with this separator,      *            or null if no separation is needed.      * @param lineLen      *            break the output String into lines containing output for      *            lineLen bytes.      */
specifier|public
specifier|static
name|String
name|toHexString
parameter_list|(
name|byte
index|[]
name|buf
parameter_list|,
name|String
name|sep
parameter_list|,
name|int
name|lineLen
parameter_list|)
block|{
if|if
condition|(
name|buf
operator|==
literal|null
condition|)
return|return
literal|null
return|;
if|if
condition|(
name|lineLen
operator|<=
literal|0
condition|)
name|lineLen
operator|=
name|Integer
operator|.
name|MAX_VALUE
expr_stmt|;
name|StringBuffer
name|res
init|=
operator|new
name|StringBuffer
argument_list|(
name|buf
operator|.
name|length
operator|*
literal|2
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|buf
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|int
name|b
init|=
name|buf
index|[
name|i
index|]
decl_stmt|;
name|res
operator|.
name|append
argument_list|(
name|HEX_DIGITS
index|[
operator|(
name|b
operator|>>
literal|4
operator|)
operator|&
literal|0xf
index|]
argument_list|)
expr_stmt|;
name|res
operator|.
name|append
argument_list|(
name|HEX_DIGITS
index|[
name|b
operator|&
literal|0xf
index|]
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|>
literal|0
operator|&&
operator|(
name|i
operator|%
name|lineLen
operator|)
operator|==
literal|0
condition|)
name|res
operator|.
name|append
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|sep
operator|!=
literal|null
operator|&&
name|i
operator|<
name|lineLen
operator|-
literal|1
condition|)
name|res
operator|.
name|append
argument_list|(
name|sep
argument_list|)
expr_stmt|;
block|}
return|return
name|res
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**      * Convert a String containing consecutive (no inside whitespace)      * hexadecimal digits into a corresponding byte array. If the number of      * digits is not even, a '0' will be appended in the front of the String      * prior to conversion. Leading and trailing whitespace is ignored.      *       * @param text      *            input text      * @return converted byte array, or null if unable to convert      */
specifier|public
specifier|static
name|byte
index|[]
name|fromHexString
parameter_list|(
name|String
name|text
parameter_list|)
block|{
name|text
operator|=
name|text
operator|.
name|trim
argument_list|()
expr_stmt|;
if|if
condition|(
name|text
operator|.
name|length
argument_list|()
operator|%
literal|2
operator|!=
literal|0
condition|)
name|text
operator|=
literal|"0"
operator|+
name|text
expr_stmt|;
name|int
name|resLen
init|=
name|text
operator|.
name|length
argument_list|()
operator|/
literal|2
decl_stmt|;
name|int
name|loNibble
decl_stmt|,
name|hiNibble
decl_stmt|;
name|byte
index|[]
name|res
init|=
operator|new
name|byte
index|[
name|resLen
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|resLen
condition|;
name|i
operator|++
control|)
block|{
name|int
name|j
init|=
name|i
operator|<<
literal|1
decl_stmt|;
name|hiNibble
operator|=
name|charToNibble
argument_list|(
name|text
operator|.
name|charAt
argument_list|(
name|j
argument_list|)
argument_list|)
expr_stmt|;
name|loNibble
operator|=
name|charToNibble
argument_list|(
name|text
operator|.
name|charAt
argument_list|(
name|j
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|loNibble
operator|==
operator|-
literal|1
operator|||
name|hiNibble
operator|==
operator|-
literal|1
condition|)
return|return
literal|null
return|;
name|res
index|[
name|i
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
name|hiNibble
operator|<<
literal|4
operator||
name|loNibble
argument_list|)
expr_stmt|;
block|}
return|return
name|res
return|;
block|}
specifier|private
specifier|static
specifier|final
name|int
name|charToNibble
parameter_list|(
name|char
name|c
parameter_list|)
block|{
if|if
condition|(
name|c
operator|>=
literal|'0'
operator|&&
name|c
operator|<=
literal|'9'
condition|)
block|{
return|return
name|c
operator|-
literal|'0'
return|;
block|}
elseif|else
if|if
condition|(
name|c
operator|>=
literal|'a'
operator|&&
name|c
operator|<=
literal|'f'
condition|)
block|{
return|return
literal|0xa
operator|+
operator|(
name|c
operator|-
literal|'a'
operator|)
return|;
block|}
elseif|else
if|if
condition|(
name|c
operator|>=
literal|'A'
operator|&&
name|c
operator|<=
literal|'F'
condition|)
block|{
return|return
literal|0xA
operator|+
operator|(
name|c
operator|-
literal|'A'
operator|)
return|;
block|}
else|else
block|{
return|return
operator|-
literal|1
return|;
block|}
block|}
comment|/**      * Parse the character encoding from the specified content type header. If      * the content type is null, or there is no explicit character encoding,      *<code>null</code> is returned.<br />      * This method was copy from org.apache.catalina.util.RequestUtil is      * licensed under the Apache License, Version 2.0 (the "License").      *       * @param contentType      *            a content type header      */
specifier|public
specifier|static
name|String
name|parseCharacterEncoding
parameter_list|(
name|String
name|contentType
parameter_list|)
block|{
if|if
condition|(
name|contentType
operator|==
literal|null
condition|)
return|return
operator|(
literal|null
operator|)
return|;
name|int
name|start
init|=
name|contentType
operator|.
name|indexOf
argument_list|(
literal|"charset="
argument_list|)
decl_stmt|;
if|if
condition|(
name|start
operator|<
literal|0
condition|)
return|return
operator|(
literal|null
operator|)
return|;
name|String
name|encoding
init|=
name|contentType
operator|.
name|substring
argument_list|(
name|start
operator|+
literal|8
argument_list|)
decl_stmt|;
name|int
name|end
init|=
name|encoding
operator|.
name|indexOf
argument_list|(
literal|';'
argument_list|)
decl_stmt|;
if|if
condition|(
name|end
operator|>=
literal|0
condition|)
name|encoding
operator|=
name|encoding
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|end
argument_list|)
expr_stmt|;
name|encoding
operator|=
name|encoding
operator|.
name|trim
argument_list|()
expr_stmt|;
if|if
condition|(
operator|(
name|encoding
operator|.
name|length
argument_list|()
operator|>
literal|2
operator|)
operator|&&
operator|(
name|encoding
operator|.
name|startsWith
argument_list|(
literal|"\""
argument_list|)
operator|)
operator|&&
operator|(
name|encoding
operator|.
name|endsWith
argument_list|(
literal|"\""
argument_list|)
operator|)
condition|)
name|encoding
operator|=
name|encoding
operator|.
name|substring
argument_list|(
literal|1
argument_list|,
name|encoding
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
return|return
operator|(
name|encoding
operator|.
name|trim
argument_list|()
operator|)
return|;
block|}
comment|/**      * Checks if a string is empty (ie is null or empty).      */
specifier|public
specifier|static
name|boolean
name|isEmpty
parameter_list|(
name|String
name|str
parameter_list|)
block|{
return|return
operator|(
name|str
operator|==
literal|null
operator|)
operator|||
operator|(
name|str
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
operator|)
return|;
block|}
specifier|private
specifier|static
name|HashMap
name|encodingAliases
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
comment|/**      * the following map is not an alias mapping table, but maps character      * encodings which are often used in mislabelled documents to their correct      * encodings. For instance, there are a lot of documents labelled      * 'ISO-8859-1' which contain characters not covered by ISO-8859-1 but      * covered by windows-1252. Because windows-1252 is a superset of ISO-8859-1      * (sharing code points for the common part), it's better to treat      * ISO-8859-1 as synonymous with windows-1252 than to reject, as invalid,      * documents labelled as ISO-8859-1 that have characters outside ISO-8859-1.      */
static|static
block|{
name|encodingAliases
operator|.
name|put
argument_list|(
literal|"ISO-8859-1"
argument_list|,
literal|"windows-1252"
argument_list|)
expr_stmt|;
name|encodingAliases
operator|.
name|put
argument_list|(
literal|"EUC-KR"
argument_list|,
literal|"x-windows-949"
argument_list|)
expr_stmt|;
name|encodingAliases
operator|.
name|put
argument_list|(
literal|"x-EUC-CN"
argument_list|,
literal|"GB18030"
argument_list|)
expr_stmt|;
name|encodingAliases
operator|.
name|put
argument_list|(
literal|"GBK"
argument_list|,
literal|"GB18030"
argument_list|)
expr_stmt|;
comment|// encodingAliases.put("Big5", "Big5HKSCS");
comment|// encodingAliases.put("TIS620", "Cp874");
comment|// encodingAliases.put("ISO-8859-11", "Cp874");
block|}
specifier|public
specifier|static
name|String
name|resolveEncodingAlias
parameter_list|(
name|String
name|encoding
parameter_list|)
block|{
if|if
condition|(
operator|!
name|Charset
operator|.
name|isSupported
argument_list|(
name|encoding
argument_list|)
condition|)
return|return
literal|null
return|;
name|String
name|canonicalName
init|=
operator|new
name|String
argument_list|(
name|Charset
operator|.
name|forName
argument_list|(
name|encoding
argument_list|)
operator|.
name|name
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|encodingAliases
operator|.
name|containsKey
argument_list|(
name|canonicalName
argument_list|)
condition|?
operator|(
name|String
operator|)
name|encodingAliases
operator|.
name|get
argument_list|(
name|canonicalName
argument_list|)
else|:
name|canonicalName
return|;
block|}
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
if|if
condition|(
name|args
operator|.
name|length
operator|!=
literal|1
condition|)
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Usage: StringUtil<encoding name>"
argument_list|)
expr_stmt|;
else|else
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|args
index|[
literal|0
index|]
operator|+
literal|" is resolved to "
operator|+
name|resolveEncodingAlias
argument_list|(
name|args
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

