begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|utils
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|oro
operator|.
name|text
operator|.
name|regex
operator|.
name|MalformedPatternException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|oro
operator|.
name|text
operator|.
name|regex
operator|.
name|MatchResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|oro
operator|.
name|text
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|oro
operator|.
name|text
operator|.
name|regex
operator|.
name|PatternCompiler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|oro
operator|.
name|text
operator|.
name|regex
operator|.
name|PatternMatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|oro
operator|.
name|text
operator|.
name|regex
operator|.
name|PatternMatcherInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|oro
operator|.
name|text
operator|.
name|regex
operator|.
name|Perl5Compiler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|oro
operator|.
name|text
operator|.
name|regex
operator|.
name|Perl5Matcher
import|;
end_import

begin_comment
comment|/**  * Inspired from Nutch code class OutlinkExtractor. Apply regex to extract  * content  *   *   */
end_comment

begin_class
specifier|public
class|class
name|RegexUtils
block|{
specifier|static
name|Logger
name|logger
init|=
name|Logger
operator|.
name|getRootLogger
argument_list|()
decl_stmt|;
specifier|public
specifier|static
name|List
argument_list|<
name|String
argument_list|>
name|extract
parameter_list|(
name|String
name|content
parameter_list|,
name|String
name|regex
parameter_list|)
throws|throws
name|MalformedPatternException
block|{
name|List
argument_list|<
name|String
argument_list|>
name|extractions
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
specifier|final
name|PatternCompiler
name|cp
init|=
operator|new
name|Perl5Compiler
argument_list|()
decl_stmt|;
specifier|final
name|Pattern
name|pattern
init|=
name|cp
operator|.
name|compile
argument_list|(
name|regex
argument_list|,
name|Perl5Compiler
operator|.
name|CASE_INSENSITIVE_MASK
operator||
name|Perl5Compiler
operator|.
name|READ_ONLY_MASK
operator||
name|Perl5Compiler
operator|.
name|MULTILINE_MASK
argument_list|)
decl_stmt|;
specifier|final
name|PatternMatcher
name|matcher
init|=
operator|new
name|Perl5Matcher
argument_list|()
decl_stmt|;
specifier|final
name|PatternMatcherInput
name|input
init|=
operator|new
name|PatternMatcherInput
argument_list|(
name|content
argument_list|)
decl_stmt|;
name|MatchResult
name|result
decl_stmt|;
name|String
name|extractedContent
decl_stmt|;
while|while
condition|(
name|matcher
operator|.
name|contains
argument_list|(
name|input
argument_list|,
name|pattern
argument_list|)
condition|)
block|{
name|result
operator|=
name|matcher
operator|.
name|getMatch
argument_list|()
expr_stmt|;
name|extractedContent
operator|=
name|result
operator|.
name|group
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|extractions
operator|.
name|add
argument_list|(
name|extractedContent
argument_list|)
expr_stmt|;
block|}
return|return
name|extractions
return|;
block|}
block|}
end_class

end_unit

