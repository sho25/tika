begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|utils
package|;
end_package

begin_comment
comment|// JDK imports
end_comment

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_comment
comment|// TIKA imports
end_comment

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|config
operator|.
name|LiusConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|exception
operator|.
name|LiusException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|metadata
operator|.
name|TikaMimeKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|mime
operator|.
name|MimeUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|Parser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|ParserFactory
import|;
end_import

begin_comment
comment|/**  * Contains utility methods for parsing documents. Intended to provide simple  * entry points into the Tika framework.  */
end_comment

begin_class
specifier|public
class|class
name|ParseUtils
implements|implements
name|TikaMimeKeys
block|{
specifier|private
specifier|static
specifier|final
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
static|static
block|{
name|conf
operator|.
name|set
argument_list|(
name|TIKA_MIME_FILE
argument_list|,
literal|"org/apache/tika/mime/tika-mimetypes.xml"
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
specifier|final
name|MimeUtils
name|mimeUtils
init|=
operator|new
name|MimeUtils
argument_list|(
name|conf
argument_list|)
decl_stmt|;
comment|/**      * Returns a parser that can handle the specified MIME type, and is set to      * receive input from a stream opened from the specified URL. NB: Close the      * input stream when it is no longer needed!      *       * @param inputStream      *            stream containing document data to parse      * @param config      * @param mimeType      *            the document's MIME type      * @return a parser appropriate to this MIME type and ready to read input      *         from the specified document      * @throws LiusException      * @throws IOException      */
specifier|public
specifier|static
name|Parser
name|getParser
parameter_list|(
name|InputStream
name|inputStream
parameter_list|,
name|LiusConfig
name|config
parameter_list|,
name|String
name|mimeType
parameter_list|)
throws|throws
name|LiusException
throws|,
name|IOException
block|{
if|if
condition|(
name|inputStream
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|LiusException
argument_list|(
literal|"Document input stream not provided."
argument_list|)
throw|;
block|}
return|return
name|ParserFactory
operator|.
name|getParser
argument_list|(
name|inputStream
argument_list|,
name|mimeType
argument_list|,
name|config
argument_list|)
return|;
block|}
comment|// Note that we cannot provide a method that takes an InputStream
comment|// but not a MIME type, since we will not have a resource
comment|// name from which to derive it.
comment|/**      * Returns a parser that can handle the specified MIME type, and is set to      * receive input from a stream opened from the specified URL. NB: Close the      * input stream when it is no longer needed!      *       * @param documentUrl      *            URL pointing to the document to parse      * @param config      * @param mimeType      *            the document's MIME type      * @return a parser appropriate to this MIME type and ready to read input      *         from the specified document      * @throws LiusException      * @throws IOException      */
specifier|public
specifier|static
name|Parser
name|getParser
parameter_list|(
name|URL
name|documentUrl
parameter_list|,
name|LiusConfig
name|config
parameter_list|,
name|String
name|mimeType
parameter_list|)
throws|throws
name|LiusException
throws|,
name|IOException
block|{
if|if
condition|(
name|documentUrl
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|LiusException
argument_list|(
literal|"Document URL not provided."
argument_list|)
throw|;
block|}
return|return
name|ParserFactory
operator|.
name|getParser
argument_list|(
name|documentUrl
operator|.
name|openStream
argument_list|()
argument_list|,
name|mimeType
argument_list|,
name|config
argument_list|)
return|;
block|}
comment|/**      * Returns a parser that can handle the specified MIME type, and is set to      * receive input from a stream opened from the specified URL. The MIME type      * is determined automatically. NB: Close the input stream when it is no      * longer needed!      *       * @param documentUrl      *            URL pointing to the document to parse      * @param config      * @return a parser appropriate to this MIME type and ready to read input      *         from the specified document      * @throws LiusException      * @throws IOException      */
specifier|public
specifier|static
name|Parser
name|getParser
parameter_list|(
name|URL
name|documentUrl
parameter_list|,
name|LiusConfig
name|config
parameter_list|)
throws|throws
name|LiusException
throws|,
name|IOException
block|{
name|String
name|mimetype
init|=
name|mimeUtils
operator|.
name|getRepository
argument_list|()
operator|.
name|getMimeType
argument_list|(
name|documentUrl
argument_list|)
operator|.
name|getName
argument_list|()
decl_stmt|;
return|return
name|getParser
argument_list|(
name|documentUrl
argument_list|,
name|config
argument_list|,
name|mimetype
argument_list|)
return|;
block|}
comment|/**      * Returns a parser that can handle the specified MIME type, and is set to      * receive input from a stream opened from the specified URL. NB: Close the      * input stream when it is no longer needed!      *       * @param documentFile      *            File object pointing to the document to parse      * @param config      * @param mimeType      *            the document's MIME type      * @return a parser appropriate to this MIME type and ready to read input      *         from the specified document      * @throws LiusException      * @throws IOException      */
specifier|public
specifier|static
name|Parser
name|getParser
parameter_list|(
name|File
name|documentFile
parameter_list|,
name|LiusConfig
name|config
parameter_list|,
name|String
name|mimeType
parameter_list|)
throws|throws
name|LiusException
throws|,
name|IOException
block|{
if|if
condition|(
name|documentFile
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|LiusException
argument_list|(
literal|"Document file not provided."
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|documentFile
operator|.
name|canRead
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|LiusException
argument_list|(
literal|"Document file does not exist or is not readable."
argument_list|)
throw|;
block|}
name|FileInputStream
name|inputStream
init|=
operator|new
name|FileInputStream
argument_list|(
name|documentFile
argument_list|)
decl_stmt|;
comment|// TODO: Do we want to wrap a BufferedInputStream, or does the
comment|// file's buffering suffice?
return|return
name|ParserFactory
operator|.
name|getParser
argument_list|(
name|inputStream
argument_list|,
name|mimeType
argument_list|,
name|config
argument_list|)
return|;
block|}
comment|/**      * Returns a parser that can handle the specified MIME type, and is set to      * receive input from a stream opened from the specified URL. NB: Close the      * input stream when it is no longer needed!      *       * @param documentFile      *            File object pointing to the document to parse      * @param config      * @return a parser appropriate to this MIME type and ready to read input      *         from the specified document      * @throws LiusException      * @throws IOException      */
specifier|public
specifier|static
name|Parser
name|getParser
parameter_list|(
name|File
name|documentFile
parameter_list|,
name|LiusConfig
name|config
parameter_list|)
throws|throws
name|LiusException
throws|,
name|IOException
block|{
name|String
name|mimetype
init|=
name|mimeUtils
operator|.
name|getRepository
argument_list|()
operator|.
name|getMimeType
argument_list|(
name|documentFile
argument_list|)
operator|.
name|getName
argument_list|()
decl_stmt|;
return|return
name|getParser
argument_list|(
name|documentFile
argument_list|,
name|config
argument_list|,
name|mimetype
argument_list|)
return|;
block|}
comment|/**      * Gets the string content of a document read from an input stream.      *       * @param inputStream      *            the stream from which to read document data      * @param config      * @param mimeType      *            MIME type of the data      * @return the string content parsed from the document      * @throws LiusException      * @throws IOException      */
specifier|public
specifier|static
name|String
name|getStringContent
parameter_list|(
name|InputStream
name|inputStream
parameter_list|,
name|LiusConfig
name|config
parameter_list|,
name|String
name|mimeType
parameter_list|)
throws|throws
name|LiusException
throws|,
name|IOException
block|{
name|Parser
name|parser
init|=
name|getParser
argument_list|(
name|inputStream
argument_list|,
name|config
argument_list|,
name|mimeType
argument_list|)
decl_stmt|;
return|return
name|getStringContent
argument_list|(
name|parser
argument_list|)
return|;
block|}
comment|/**      * Gets the string content of a document read from an input stream.      *       * @param documentUrl      *            URL pointing to the document to parse      * @param config      * @return the string content parsed from the document      * @throws LiusException      * @throws IOException      */
specifier|public
specifier|static
name|String
name|getStringContent
parameter_list|(
name|URL
name|documentUrl
parameter_list|,
name|LiusConfig
name|config
parameter_list|)
throws|throws
name|LiusException
throws|,
name|IOException
block|{
name|Parser
name|parser
init|=
name|getParser
argument_list|(
name|documentUrl
argument_list|,
name|config
argument_list|)
decl_stmt|;
return|return
name|getStringContent
argument_list|(
name|parser
argument_list|)
return|;
block|}
comment|/**      * Gets the string content of a document read from an input stream.      *       * @param documentUrl      *            URL pointing to the document to parse      * @param config      * @param mimeType      *            MIME type of the data      * @return the string content parsed from the document      * @throws LiusException      * @throws IOException      */
specifier|public
specifier|static
name|String
name|getStringContent
parameter_list|(
name|URL
name|documentUrl
parameter_list|,
name|LiusConfig
name|config
parameter_list|,
name|String
name|mimeType
parameter_list|)
throws|throws
name|LiusException
throws|,
name|IOException
block|{
name|Parser
name|parser
init|=
name|getParser
argument_list|(
name|documentUrl
argument_list|,
name|config
argument_list|,
name|mimeType
argument_list|)
decl_stmt|;
return|return
name|getStringContent
argument_list|(
name|parser
argument_list|)
return|;
block|}
comment|/**      * Gets the string content of a document read from an input stream.      *       * @param documentFile      *            File object pointing to the document to parse      * @param config      * @param mimeType      *            MIME type of the data      * @return the string content parsed from the document      * @throws LiusException      * @throws IOException      */
specifier|public
specifier|static
name|String
name|getStringContent
parameter_list|(
name|File
name|documentFile
parameter_list|,
name|LiusConfig
name|config
parameter_list|,
name|String
name|mimeType
parameter_list|)
throws|throws
name|LiusException
throws|,
name|IOException
block|{
name|Parser
name|parser
init|=
name|getParser
argument_list|(
name|documentFile
argument_list|,
name|config
argument_list|,
name|mimeType
argument_list|)
decl_stmt|;
return|return
name|getStringContent
argument_list|(
name|parser
argument_list|)
return|;
block|}
comment|/**      * Gets the string content of a document read from an input stream.      *       * @param documentFile      *            File object pointing to the document to parse      * @param config      * @return the string content parsed from the document      * @throws LiusException      * @throws IOException      */
specifier|public
specifier|static
name|String
name|getStringContent
parameter_list|(
name|File
name|documentFile
parameter_list|,
name|LiusConfig
name|config
parameter_list|)
throws|throws
name|LiusException
throws|,
name|IOException
block|{
name|Parser
name|parser
init|=
name|getParser
argument_list|(
name|documentFile
argument_list|,
name|config
argument_list|)
decl_stmt|;
return|return
name|getStringContent
argument_list|(
name|parser
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|String
name|getStringContent
parameter_list|(
name|Parser
name|parser
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|content
init|=
name|parser
operator|.
name|getStrContent
argument_list|()
decl_stmt|;
name|parser
operator|.
name|getInputStream
argument_list|()
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|content
return|;
block|}
block|}
end_class

end_unit

