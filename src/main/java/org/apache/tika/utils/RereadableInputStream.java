begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|utils
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_class
specifier|public
class|class
name|RereadableInputStream
extends|extends
name|InputStream
block|{
specifier|private
name|InputStream
name|inputStream
decl_stmt|;
specifier|private
name|int
name|maxBytesInMemory
decl_stmt|;
specifier|private
name|boolean
name|firstPass
init|=
literal|true
decl_stmt|;
specifier|private
name|boolean
name|bufferIsInFile
decl_stmt|;
specifier|private
name|byte
index|[]
name|byteBuffer
decl_stmt|;
specifier|private
name|int
name|size
decl_stmt|;
specifier|private
name|File
name|storeFile
decl_stmt|;
specifier|private
name|OutputStream
name|storeOutputStream
decl_stmt|;
specifier|public
name|RereadableInputStream
parameter_list|(
name|InputStream
name|inputStream
parameter_list|,
name|int
name|maxBytesInMemory
parameter_list|)
block|{
name|this
operator|.
name|inputStream
operator|=
name|inputStream
expr_stmt|;
name|this
operator|.
name|maxBytesInMemory
operator|=
name|maxBytesInMemory
expr_stmt|;
name|byteBuffer
operator|=
operator|new
name|byte
index|[
name|maxBytesInMemory
index|]
expr_stmt|;
block|}
specifier|public
name|int
name|read
parameter_list|()
throws|throws
name|IOException
block|{
name|int
name|inputByte
init|=
name|inputStream
operator|.
name|read
argument_list|()
decl_stmt|;
if|if
condition|(
name|firstPass
condition|)
block|{
name|saveByte
argument_list|(
name|inputByte
argument_list|)
expr_stmt|;
block|}
return|return
name|inputByte
return|;
block|}
specifier|private
name|void
name|saveByte
parameter_list|(
name|int
name|inputByte
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|bufferIsInFile
condition|)
block|{
name|boolean
name|switchToFile
init|=
operator|(
name|size
operator|==
operator|(
name|maxBytesInMemory
operator|)
operator|)
decl_stmt|;
if|if
condition|(
name|switchToFile
condition|)
block|{
name|storeFile
operator|=
name|File
operator|.
name|createTempFile
argument_list|(
literal|"streamstore_"
argument_list|,
literal|".tmp"
argument_list|)
expr_stmt|;
name|bufferIsInFile
operator|=
literal|true
expr_stmt|;
name|storeOutputStream
operator|=
operator|new
name|BufferedOutputStream
argument_list|(
operator|new
name|FileOutputStream
argument_list|(
name|storeFile
argument_list|)
argument_list|)
expr_stmt|;
name|storeOutputStream
operator|.
name|write
argument_list|(
name|byteBuffer
argument_list|,
literal|0
argument_list|,
name|size
argument_list|)
expr_stmt|;
name|storeOutputStream
operator|.
name|write
argument_list|(
name|inputByte
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|byteBuffer
index|[
name|size
index|]
operator|=
operator|(
name|byte
operator|)
name|inputByte
expr_stmt|;
block|}
block|}
else|else
block|{
name|storeOutputStream
operator|.
name|write
argument_list|(
name|inputByte
argument_list|)
expr_stmt|;
block|}
operator|++
name|size
expr_stmt|;
block|}
specifier|public
name|void
name|rewind
parameter_list|()
throws|throws
name|IOException
block|{
name|closeStream
argument_list|()
expr_stmt|;
if|if
condition|(
name|storeOutputStream
operator|!=
literal|null
condition|)
block|{
name|storeOutputStream
operator|.
name|close
argument_list|()
expr_stmt|;
name|storeOutputStream
operator|=
literal|null
expr_stmt|;
block|}
name|firstPass
operator|=
literal|false
expr_stmt|;
name|boolean
name|newStreamIsInMemory
init|=
operator|(
name|size
operator|<
name|maxBytesInMemory
operator|)
decl_stmt|;
name|inputStream
operator|=
name|newStreamIsInMemory
condition|?
operator|new
name|ByteArrayInputStream
argument_list|(
name|byteBuffer
argument_list|)
else|:
operator|new
name|BufferedInputStream
argument_list|(
operator|new
name|FileInputStream
argument_list|(
name|storeFile
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|closeStream
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|inputStream
operator|!=
literal|null
condition|)
block|{
name|inputStream
operator|.
name|close
argument_list|()
expr_stmt|;
name|inputStream
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|closeStream
argument_list|()
expr_stmt|;
name|super
operator|.
name|close
argument_list|()
expr_stmt|;
if|if
condition|(
name|storeFile
operator|!=
literal|null
condition|)
block|{
name|storeFile
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

