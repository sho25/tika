begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|utils
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_comment
comment|/**  * Detect the MIME type of a document from file name given as  * a String, a File, or a URL.  */
end_comment

begin_class
specifier|public
class|class
name|MimeTypesUtils
block|{
comment|/**      * Returns the MIME type as specified by the ending of the name.      *      * @param name the resource name, e.g. "filename.pdf"      * @return the MIME type, e.g. "application/pdf"      */
specifier|public
specifier|static
name|String
name|getMimeType
parameter_list|(
name|String
name|name
parameter_list|)
block|{
comment|// FIXME: See TIKA-8
name|name
operator|=
name|name
operator|.
name|toLowerCase
argument_list|()
expr_stmt|;
if|if
condition|(
name|name
operator|.
name|endsWith
argument_list|(
literal|".txt"
argument_list|)
condition|)
block|{
return|return
literal|"text/plain"
return|;
block|}
elseif|else
if|if
condition|(
name|name
operator|.
name|endsWith
argument_list|(
literal|".pdf"
argument_list|)
condition|)
block|{
return|return
literal|"application/pdf"
return|;
block|}
elseif|else
if|if
condition|(
name|name
operator|.
name|endsWith
argument_list|(
literal|".htm"
argument_list|)
condition|)
block|{
return|return
literal|"text/html"
return|;
block|}
elseif|else
if|if
condition|(
name|name
operator|.
name|endsWith
argument_list|(
literal|".html"
argument_list|)
condition|)
block|{
return|return
literal|"text/html"
return|;
block|}
elseif|else
if|if
condition|(
name|name
operator|.
name|endsWith
argument_list|(
literal|".xhtml"
argument_list|)
condition|)
block|{
return|return
literal|"application/xhtml+xml"
return|;
block|}
elseif|else
if|if
condition|(
name|name
operator|.
name|endsWith
argument_list|(
literal|".xml"
argument_list|)
condition|)
block|{
return|return
literal|"application/xml"
return|;
block|}
elseif|else
if|if
condition|(
name|name
operator|.
name|endsWith
argument_list|(
literal|".doc"
argument_list|)
condition|)
block|{
return|return
literal|"application/msword"
return|;
block|}
elseif|else
if|if
condition|(
name|name
operator|.
name|endsWith
argument_list|(
literal|".ppt"
argument_list|)
condition|)
block|{
return|return
literal|"application/vnd.ms-powerpoint"
return|;
block|}
elseif|else
if|if
condition|(
name|name
operator|.
name|endsWith
argument_list|(
literal|".xls"
argument_list|)
condition|)
block|{
return|return
literal|"application/vnd.ms-excel"
return|;
block|}
elseif|else
if|if
condition|(
name|name
operator|.
name|endsWith
argument_list|(
literal|".zip"
argument_list|)
condition|)
block|{
return|return
literal|"application/zip"
return|;
block|}
else|else
block|{
return|return
literal|"application/octet-stream"
return|;
block|}
block|}
comment|/**      * Returns the MIME type as specified by the ending of the file's name.      *      * @param file the file to test, e.g. new File("filename.pdf")      * @return the MIME type, e.g. "application/pdf"      */
specifier|public
specifier|static
name|String
name|getMimeType
parameter_list|(
name|File
name|file
parameter_list|)
block|{
return|return
name|getMimeType
argument_list|(
name|file
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * Returns the MIME type as specified by the ending of the URL's file name.      *      * @param url the url to test, e.g. new URL("http://mydomain.com/filename.pdf")      * @return the MIME type, e.g. "application/pdf"      */
specifier|public
specifier|static
name|String
name|getMimeType
parameter_list|(
name|URL
name|url
parameter_list|)
block|{
return|return
name|getMimeType
argument_list|(
name|url
operator|.
name|getPath
argument_list|()
argument_list|)
return|;
block|}
block|}
end_class

end_unit

