begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|ms
package|;
end_package

begin_comment
comment|// JDK imports
end_comment

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|hpsf
operator|.
name|SummaryInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|poifs
operator|.
name|eventfilesystem
operator|.
name|POIFSReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|exception
operator|.
name|TikaException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|metadata
operator|.
name|Metadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|Parser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|utils
operator|.
name|RereadableInputStream
import|;
end_import

begin_comment
comment|/**  * Defines a Microsoft document content extractor.  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|MSParser
implements|implements
name|Parser
block|{
specifier|private
specifier|final
name|int
name|MEMORY_THRESHOLD
init|=
literal|1024
operator|*
literal|1024
decl_stmt|;
comment|/**      * Extracts properties and text from an MS Document input stream      */
specifier|public
name|String
name|parse
parameter_list|(
name|InputStream
name|input
parameter_list|,
name|Metadata
name|metadata
parameter_list|)
throws|throws
name|IOException
throws|,
name|TikaException
block|{
name|RereadableInputStream
name|ris
init|=
operator|new
name|RereadableInputStream
argument_list|(
name|input
argument_list|,
name|MEMORY_THRESHOLD
argument_list|)
decl_stmt|;
try|try
block|{
comment|// First, extract properties
name|POIFSReader
name|reader
init|=
operator|new
name|POIFSReader
argument_list|()
decl_stmt|;
name|reader
operator|.
name|registerListener
argument_list|(
operator|new
name|PropertiesReaderListener
argument_list|(
name|metadata
argument_list|)
argument_list|,
name|SummaryInformation
operator|.
name|DEFAULT_STREAM_NAME
argument_list|)
expr_stmt|;
if|if
condition|(
name|input
operator|.
name|available
argument_list|()
operator|>
literal|0
condition|)
block|{
name|reader
operator|.
name|read
argument_list|(
name|ris
argument_list|)
expr_stmt|;
block|}
while|while
condition|(
name|ris
operator|.
name|read
argument_list|()
operator|!=
operator|-
literal|1
condition|)
block|{             }
name|ris
operator|.
name|rewind
argument_list|()
expr_stmt|;
comment|// Extract document full text
return|return
name|extractText
argument_list|(
name|ris
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|TikaException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|TikaException
argument_list|(
literal|"Parse error"
argument_list|,
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|ris
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * Extracts the text content from a Microsoft document input stream.      */
specifier|protected
specifier|abstract
name|String
name|extractText
parameter_list|(
name|InputStream
name|input
parameter_list|)
throws|throws
name|Exception
function_decl|;
block|}
end_class

end_unit

