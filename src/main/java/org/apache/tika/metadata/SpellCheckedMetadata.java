begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|metadata
package|;
end_package

begin_comment
comment|//JDK imports
end_comment

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Modifier
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|//Apache imports
end_comment

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
import|;
end_import

begin_comment
comment|/**  * A decorator to Metadata that adds spellchecking capabilities to property  * names. Currently used spelling vocabulary contains just the httpheaders from  * {@link HttpHeaders} class.  *   */
end_comment

begin_class
specifier|public
class|class
name|SpellCheckedMetadata
extends|extends
name|Metadata
block|{
comment|/**    * Treshold divider.    *    *<code>threshold = searched.length() / TRESHOLD_DIVIDER;</code>    */
specifier|private
specifier|static
specifier|final
name|int
name|TRESHOLD_DIVIDER
init|=
literal|3
decl_stmt|;
comment|/**    * Normalized name to name mapping.    */
specifier|private
specifier|final
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|NAMES_IDX
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
comment|/**    * Array holding map keys.    */
specifier|private
specifier|static
name|String
index|[]
name|normalized
init|=
literal|null
decl_stmt|;
static|static
block|{
comment|// Uses following array to fill the metanames index and the
comment|// metanames list.
name|Class
index|[]
name|spellthese
init|=
block|{
name|HttpHeaders
operator|.
name|class
block|}
decl_stmt|;
for|for
control|(
name|Class
name|spellCheckedNames
range|:
name|spellthese
control|)
block|{
for|for
control|(
name|Field
name|field
range|:
name|spellCheckedNames
operator|.
name|getFields
argument_list|()
control|)
block|{
name|int
name|mods
init|=
name|field
operator|.
name|getModifiers
argument_list|()
decl_stmt|;
if|if
condition|(
name|Modifier
operator|.
name|isFinal
argument_list|(
name|mods
argument_list|)
operator|&&
name|Modifier
operator|.
name|isPublic
argument_list|(
name|mods
argument_list|)
operator|&&
name|Modifier
operator|.
name|isStatic
argument_list|(
name|mods
argument_list|)
operator|&&
name|field
operator|.
name|getType
argument_list|()
operator|.
name|equals
argument_list|(
name|String
operator|.
name|class
argument_list|)
condition|)
block|{
try|try
block|{
name|String
name|val
init|=
operator|(
name|String
operator|)
name|field
operator|.
name|get
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|NAMES_IDX
operator|.
name|put
argument_list|(
name|normalize
argument_list|(
name|val
argument_list|)
argument_list|,
name|val
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// Simply ignore...
block|}
block|}
block|}
block|}
name|normalized
operator|=
name|NAMES_IDX
operator|.
name|keySet
argument_list|()
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|NAMES_IDX
operator|.
name|size
argument_list|()
index|]
argument_list|)
expr_stmt|;
block|}
comment|/**    * Normalizes String.    *    * @param str    *          the string to normalize    * @return normalized String    */
specifier|private
specifier|static
name|String
name|normalize
parameter_list|(
specifier|final
name|String
name|str
parameter_list|)
block|{
name|char
name|c
decl_stmt|;
name|StringBuffer
name|buf
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|str
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|c
operator|=
name|str
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
expr_stmt|;
if|if
condition|(
name|Character
operator|.
name|isLetter
argument_list|(
name|c
argument_list|)
condition|)
block|{
name|buf
operator|.
name|append
argument_list|(
name|Character
operator|.
name|toLowerCase
argument_list|(
name|c
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|buf
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**    * Get the normalized name of metadata attribute name. This method tries to    * find a well-known metadata name (one of the metadata names defined in this    * class) that matches the specified name. The matching is error tolerent. For    * instance,    *<ul>    *<li>content-type gives Content-Type</li>    *<li>CoNtEntType gives Content-Type</li>    *<li>ConTnTtYpe gives Content-Type</li>    *</ul>    * If no matching with a well-known metadata name is found, then the original    * name is returned.    *    * @param name    *          Name to normalize    * @return normalized name    */
specifier|public
specifier|static
name|String
name|getNormalizedName
parameter_list|(
specifier|final
name|String
name|name
parameter_list|)
block|{
name|String
name|searched
init|=
name|normalize
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|String
name|value
init|=
name|NAMES_IDX
operator|.
name|get
argument_list|(
name|searched
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|value
operator|==
literal|null
operator|)
operator|&&
operator|(
name|normalized
operator|!=
literal|null
operator|)
condition|)
block|{
name|int
name|threshold
init|=
name|searched
operator|.
name|length
argument_list|()
operator|/
name|TRESHOLD_DIVIDER
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|normalized
operator|.
name|length
operator|&&
name|value
operator|==
literal|null
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|StringUtils
operator|.
name|getLevenshteinDistance
argument_list|(
name|searched
argument_list|,
name|normalized
index|[
name|i
index|]
argument_list|)
operator|<
name|threshold
condition|)
block|{
name|value
operator|=
name|NAMES_IDX
operator|.
name|get
argument_list|(
name|normalized
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
operator|(
name|value
operator|!=
literal|null
operator|)
condition|?
name|value
else|:
name|name
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|remove
parameter_list|(
specifier|final
name|String
name|name
parameter_list|)
block|{
name|super
operator|.
name|remove
argument_list|(
name|getNormalizedName
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|add
parameter_list|(
specifier|final
name|String
name|name
parameter_list|,
specifier|final
name|String
name|value
parameter_list|)
block|{
name|super
operator|.
name|add
argument_list|(
name|getNormalizedName
argument_list|(
name|name
argument_list|)
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
index|[]
name|getValues
parameter_list|(
specifier|final
name|String
name|name
parameter_list|)
block|{
return|return
name|super
operator|.
name|getValues
argument_list|(
name|getNormalizedName
argument_list|(
name|name
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|get
parameter_list|(
specifier|final
name|String
name|name
parameter_list|)
block|{
return|return
name|super
operator|.
name|get
argument_list|(
name|getNormalizedName
argument_list|(
name|name
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|set
parameter_list|(
specifier|final
name|String
name|name
parameter_list|,
specifier|final
name|String
name|value
parameter_list|)
block|{
name|super
operator|.
name|set
argument_list|(
name|getNormalizedName
argument_list|(
name|name
argument_list|)
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

