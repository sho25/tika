begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|gui
package|;
end_package

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|datatransfer
operator|.
name|Clipboard
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|datatransfer
operator|.
name|DataFlavor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|datatransfer
operator|.
name|Transferable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|event
operator|.
name|InputEvent
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|Icon
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JComponent
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|TransferHandler
import|;
end_import

begin_comment
comment|/**  * Utility class that turns drag-and-drop events into Tika parse requests.  */
end_comment

begin_class
class|class
name|ParsingTransferHandler
extends|extends
name|TransferHandler
block|{
specifier|private
specifier|final
name|TransferHandler
name|delegate
decl_stmt|;
specifier|private
specifier|final
name|TikaGUI
name|tika
decl_stmt|;
specifier|public
name|ParsingTransferHandler
parameter_list|(
name|TransferHandler
name|delegate
parameter_list|,
name|TikaGUI
name|tika
parameter_list|)
block|{
name|this
operator|.
name|delegate
operator|=
name|delegate
expr_stmt|;
name|this
operator|.
name|tika
operator|=
name|tika
expr_stmt|;
block|}
specifier|public
name|boolean
name|canImport
parameter_list|(
name|JComponent
name|component
parameter_list|,
name|DataFlavor
index|[]
name|flavors
parameter_list|)
block|{
for|for
control|(
name|DataFlavor
name|flavor
range|:
name|flavors
control|)
block|{
if|if
condition|(
name|flavor
operator|.
name|equals
argument_list|(
name|DataFlavor
operator|.
name|javaFileListFlavor
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|importData
parameter_list|(
name|JComponent
name|component
parameter_list|,
name|Transferable
name|transferable
parameter_list|)
block|{
try|try
block|{
name|List
argument_list|<
name|?
argument_list|>
name|files
init|=
operator|(
name|List
argument_list|<
name|?
argument_list|>
operator|)
name|transferable
operator|.
name|getTransferData
argument_list|(
name|DataFlavor
operator|.
name|javaFileListFlavor
argument_list|)
decl_stmt|;
for|for
control|(
name|Object
name|file
range|:
name|files
control|)
block|{
name|tika
operator|.
name|importFile
argument_list|(
operator|(
name|File
operator|)
name|file
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
block|}
specifier|public
name|void
name|exportAsDrag
parameter_list|(
name|JComponent
name|arg0
parameter_list|,
name|InputEvent
name|arg1
parameter_list|,
name|int
name|arg2
parameter_list|)
block|{
name|delegate
operator|.
name|exportAsDrag
argument_list|(
name|arg0
argument_list|,
name|arg1
argument_list|,
name|arg2
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|exportToClipboard
parameter_list|(
name|JComponent
name|arg0
parameter_list|,
name|Clipboard
name|arg1
parameter_list|,
name|int
name|arg2
parameter_list|)
throws|throws
name|IllegalStateException
block|{
name|delegate
operator|.
name|exportToClipboard
argument_list|(
name|arg0
argument_list|,
name|arg1
argument_list|,
name|arg2
argument_list|)
expr_stmt|;
block|}
specifier|public
name|int
name|getSourceActions
parameter_list|(
name|JComponent
name|arg0
parameter_list|)
block|{
return|return
name|delegate
operator|.
name|getSourceActions
argument_list|(
name|arg0
argument_list|)
return|;
block|}
specifier|public
name|Icon
name|getVisualRepresentation
parameter_list|(
name|Transferable
name|arg0
parameter_list|)
block|{
return|return
name|delegate
operator|.
name|getVisualRepresentation
argument_list|(
name|arg0
argument_list|)
return|;
block|}
block|}
end_class

end_unit

