begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|mime
package|;
end_package

begin_comment
comment|// JDK imports
end_comment

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|DocumentBuilder
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|DocumentBuilderFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|metadata
operator|.
name|TikaMimeKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jdom
operator|.
name|JDOMException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|InputSource
import|;
end_import

begin_comment
comment|// Tika imports
end_comment

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|config
operator|.
name|TikaConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|exception
operator|.
name|TikaException
import|;
end_import

begin_comment
comment|/**  *   * Wrapper external interface around a {@link MimeTypes} repository.  */
end_comment

begin_class
specifier|public
class|class
name|MimeUtils
implements|implements
name|TikaMimeKeys
block|{
comment|/** My logger */
specifier|private
specifier|final
specifier|static
name|Logger
name|LOG
init|=
name|Logger
operator|.
name|getLogger
argument_list|(
name|MimeUtils
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
comment|/** The MimeTypes repository instance */
specifier|private
name|MimeTypes
name|repository
init|=
literal|null
decl_stmt|;
comment|/** Creates a new instance of MimeUtils */
specifier|public
name|MimeUtils
parameter_list|(
name|String
name|resPath
parameter_list|)
block|{
if|if
condition|(
name|repository
operator|==
literal|null
condition|)
block|{
name|repository
operator|=
name|load
argument_list|(
name|resPath
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** Creates a new instance of MimeUtils */
specifier|public
name|MimeUtils
parameter_list|()
throws|throws
name|TikaException
block|{
try|try
block|{
name|repository
operator|=
name|TikaConfig
operator|.
name|getDefaultConfig
argument_list|()
operator|.
name|getMimeRepository
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|TikaException
argument_list|(
literal|"Unable to load default MIME type repository."
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|JDOMException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|TikaException
argument_list|(
literal|"Unable to load default MIME type repository."
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
specifier|final
name|MimeTypes
name|getRepository
parameter_list|()
block|{
return|return
name|repository
return|;
block|}
specifier|public
name|String
name|getType
parameter_list|(
name|String
name|typeName
parameter_list|,
name|String
name|url
parameter_list|,
name|byte
index|[]
name|data
parameter_list|)
block|{
name|MimeType
name|type
init|=
literal|null
decl_stmt|;
try|try
block|{
name|typeName
operator|=
name|MimeType
operator|.
name|clean
argument_list|(
name|typeName
argument_list|)
expr_stmt|;
name|type
operator|=
name|typeName
operator|==
literal|null
condition|?
literal|null
else|:
name|repository
operator|.
name|forName
argument_list|(
name|typeName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MimeTypeException
name|mte
parameter_list|)
block|{
comment|// Seems to be a malformed mime type name...
block|}
if|if
condition|(
name|typeName
operator|==
literal|null
operator|||
name|type
operator|==
literal|null
operator|||
operator|!
name|type
operator|.
name|matches
argument_list|(
name|url
argument_list|)
condition|)
block|{
comment|// If no mime-type header, or cannot find a corresponding registered
comment|// mime-type, or the one found doesn't match the url pattern
comment|// it shouldbe, then guess a mime-type from the url pattern
name|type
operator|=
name|repository
operator|.
name|getMimeType
argument_list|(
name|url
argument_list|)
expr_stmt|;
name|typeName
operator|=
name|type
operator|==
literal|null
condition|?
name|typeName
else|:
name|type
operator|.
name|getName
argument_list|()
expr_stmt|;
block|}
comment|// if (typeName == null || type == null ||
comment|// (this.magic&& type.hasMagic()&& !type.matches(data))) {
comment|// If no mime-type already found, or the one found doesn't match
comment|// the magic bytes it should be, then, guess a mime-type from the
comment|// document content (magic bytes)
name|type
operator|=
name|repository
operator|.
name|getMimeType
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|typeName
operator|=
name|type
operator|==
literal|null
condition|?
name|typeName
else|:
name|type
operator|.
name|getName
argument_list|()
expr_stmt|;
comment|// }
return|return
name|typeName
return|;
block|}
comment|/**      * Determines the MIME type of the resource pointed to by the specified URL.      * Examines the file's header, and if it cannot determine the MIME type      * from the header, guesses the MIME type from the URL extension      * (e.g. "pdf).      *      * @param url      * @return      * @throws IOException      */
specifier|public
name|String
name|getType
parameter_list|(
name|URL
name|url
parameter_list|)
throws|throws
name|IOException
block|{
name|InputStream
name|stream
init|=
name|url
operator|.
name|openStream
argument_list|()
decl_stmt|;
try|try
block|{
return|return
name|getType
argument_list|(
literal|null
argument_list|,
name|url
operator|.
name|toString
argument_list|()
argument_list|,
name|getHeader
argument_list|(
name|stream
argument_list|)
argument_list|)
return|;
block|}
finally|finally
block|{
name|stream
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
specifier|final
name|MimeTypes
name|load
parameter_list|(
name|String
name|tikaMimeFile
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Loading ["
operator|+
name|tikaMimeFile
operator|+
literal|"]"
argument_list|)
expr_stmt|;
name|Document
name|document
init|=
name|getDocumentRoot
argument_list|(
name|MimeUtils
operator|.
name|class
operator|.
name|getClassLoader
argument_list|()
operator|.
name|getResourceAsStream
argument_list|(
name|tikaMimeFile
argument_list|)
argument_list|)
decl_stmt|;
name|MimeTypes
name|types
init|=
operator|new
name|MimeTypes
argument_list|(
name|document
argument_list|)
decl_stmt|;
return|return
name|types
return|;
block|}
specifier|private
specifier|final
name|Document
name|getDocumentRoot
parameter_list|(
name|InputStream
name|is
parameter_list|)
block|{
comment|// open up the XML file
name|DocumentBuilderFactory
name|factory
init|=
literal|null
decl_stmt|;
name|DocumentBuilder
name|parser
init|=
literal|null
decl_stmt|;
name|Document
name|document
init|=
literal|null
decl_stmt|;
name|InputSource
name|inputSource
init|=
literal|null
decl_stmt|;
name|inputSource
operator|=
operator|new
name|InputSource
argument_list|(
name|is
argument_list|)
expr_stmt|;
try|try
block|{
name|factory
operator|=
name|DocumentBuilderFactory
operator|.
name|newInstance
argument_list|()
expr_stmt|;
name|parser
operator|=
name|factory
operator|.
name|newDocumentBuilder
argument_list|()
expr_stmt|;
name|document
operator|=
name|parser
operator|.
name|parse
argument_list|(
name|inputSource
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|WARNING
argument_list|,
literal|"Unable to parse xml stream"
operator|+
literal|": Reason is ["
operator|+
name|e
operator|+
literal|"]"
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
return|return
name|document
return|;
block|}
comment|/**      * Read the resource's header for use in determination of the MIME type.      */
specifier|private
name|byte
index|[]
name|getHeader
parameter_list|(
name|InputStream
name|stream
parameter_list|)
throws|throws
name|IOException
block|{
name|byte
index|[]
name|bytes
init|=
operator|new
name|byte
index|[
name|repository
operator|.
name|getMinLength
argument_list|()
index|]
decl_stmt|;
name|int
name|totalRead
init|=
literal|0
decl_stmt|;
name|int
name|lastRead
init|=
name|stream
operator|.
name|read
argument_list|(
name|bytes
argument_list|)
decl_stmt|;
while|while
condition|(
name|lastRead
operator|!=
operator|-
literal|1
condition|)
block|{
name|totalRead
operator|+=
name|lastRead
expr_stmt|;
if|if
condition|(
name|totalRead
operator|==
name|bytes
operator|.
name|length
condition|)
block|{
return|return
name|bytes
return|;
block|}
name|lastRead
operator|=
name|stream
operator|.
name|read
argument_list|(
name|bytes
argument_list|,
name|totalRead
argument_list|,
name|bytes
operator|.
name|length
operator|-
name|totalRead
argument_list|)
expr_stmt|;
block|}
name|byte
index|[]
name|shorter
init|=
operator|new
name|byte
index|[
name|totalRead
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|bytes
argument_list|,
literal|0
argument_list|,
name|shorter
argument_list|,
literal|0
argument_list|,
name|totalRead
argument_list|)
expr_stmt|;
return|return
name|shorter
return|;
block|}
block|}
end_class

end_unit

