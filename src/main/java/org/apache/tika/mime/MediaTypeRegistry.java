begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|mime
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * Registry of Internet media types.  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|MediaTypeRegistry
block|{
specifier|private
specifier|final
name|Map
argument_list|<
name|MediaType
argument_list|,
name|MediaType
argument_list|>
name|aliases
init|=
operator|new
name|HashMap
argument_list|<
name|MediaType
argument_list|,
name|MediaType
argument_list|>
argument_list|()
decl_stmt|;
specifier|public
name|void
name|addAlias
parameter_list|(
name|MediaType
name|canonical
parameter_list|,
name|MediaType
name|alias
parameter_list|)
block|{
name|aliases
operator|.
name|put
argument_list|(
name|alias
argument_list|,
name|canonical
argument_list|)
expr_stmt|;
block|}
specifier|public
name|MediaType
name|unalias
parameter_list|(
name|MediaType
name|type
parameter_list|)
block|{
name|MediaType
name|canonical
init|=
name|aliases
operator|.
name|get
argument_list|(
name|type
operator|.
name|getBaseType
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|canonical
operator|!=
literal|null
condition|)
block|{
return|return
operator|new
name|MediaType
argument_list|(
name|canonical
argument_list|,
name|type
operator|.
name|getParameters
argument_list|()
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|type
return|;
block|}
block|}
block|}
end_class

end_unit

