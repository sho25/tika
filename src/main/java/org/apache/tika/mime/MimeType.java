begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright 2007 The Apache Software Foundation  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|mime
package|;
end_package

begin_comment
comment|// JDK imports
end_comment

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|utils
operator|.
name|StringUtil
import|;
end_import

begin_comment
comment|/**  * Defines a Mime Content Type.  *   * @author J&eacute;r&ocirc;me Charron  * @author Hari Kodungallur  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|MimeType
block|{
comment|/** The primary and sub types separator */
specifier|private
specifier|final
specifier|static
name|String
name|SEPARATOR
init|=
literal|"/"
decl_stmt|;
comment|/** The parameters separator */
specifier|private
specifier|final
specifier|static
name|String
name|PARAMS_SEP
init|=
literal|";"
decl_stmt|;
comment|/** Special characters not allowed in content types. */
specifier|private
specifier|final
specifier|static
name|String
name|SPECIALS
init|=
literal|"()<>@,;:\\\"/[]?="
decl_stmt|;
comment|/** The Mime-Type full name */
specifier|private
name|String
name|name
init|=
literal|null
decl_stmt|;
comment|/** The Mime-Type primary type */
specifier|private
name|String
name|primary
init|=
literal|null
decl_stmt|;
comment|/** The Mime-Type sub type */
specifier|private
name|String
name|sub
init|=
literal|null
decl_stmt|;
comment|/** The Mime-Type description */
specifier|private
name|String
name|description
init|=
literal|null
decl_stmt|;
comment|/** The Mime-Type associated recognition patterns */
specifier|private
name|Patterns
name|patterns
init|=
literal|null
decl_stmt|;
comment|/** The magics associated to this Mime-Type */
specifier|private
name|ArrayList
name|magics
init|=
literal|null
decl_stmt|;
comment|/** The aliases Mime-Types for this one */
specifier|private
name|ArrayList
name|aliases
init|=
literal|null
decl_stmt|;
comment|/** The root-XML associated to this Mime-Type */
specifier|private
name|ArrayList
name|rootXML
init|=
literal|null
decl_stmt|;
comment|/** The sub-class-of associated to this Mime-Type */
specifier|private
name|ArrayList
name|superTypes
init|=
literal|null
decl_stmt|;
comment|/** The mime-type level (regarding its subTypes) */
specifier|private
name|int
name|level
init|=
literal|0
decl_stmt|;
comment|/** The minimum length of data to provides for magic analyzis */
specifier|private
name|int
name|minLength
init|=
literal|0
decl_stmt|;
comment|/**      * Creates a MimeType from a String.      *       * @param name      *            the MIME content type String.      */
specifier|public
name|MimeType
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|MimeTypeException
block|{
if|if
condition|(
name|name
operator|==
literal|null
operator|||
name|name
operator|.
name|length
argument_list|()
operator|<=
literal|0
condition|)
block|{
throw|throw
operator|new
name|MimeTypeException
argument_list|(
literal|"The type can not be null or empty"
argument_list|)
throw|;
block|}
comment|// Split the two parts of the Mime Content Type
name|String
index|[]
name|parts
init|=
name|name
operator|.
name|split
argument_list|(
name|SEPARATOR
argument_list|,
literal|2
argument_list|)
decl_stmt|;
comment|// Checks validity of the parts
if|if
condition|(
name|parts
operator|.
name|length
operator|!=
literal|2
condition|)
block|{
throw|throw
operator|new
name|MimeTypeException
argument_list|(
literal|"Invalid Content Type "
operator|+
name|name
argument_list|)
throw|;
block|}
name|init
argument_list|(
name|parts
index|[
literal|0
index|]
argument_list|,
name|parts
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
comment|/**      * Creates a MimeType with the given primary type and sub type.      *       * @param primary      *            the content type primary type.      * @param sub      *            the content type sub type.      */
specifier|public
name|MimeType
parameter_list|(
name|String
name|primary
parameter_list|,
name|String
name|sub
parameter_list|)
throws|throws
name|MimeTypeException
block|{
name|init
argument_list|(
name|primary
argument_list|,
name|sub
argument_list|)
expr_stmt|;
block|}
comment|/** Init method used by constructors. */
specifier|private
name|void
name|init
parameter_list|(
name|String
name|primary
parameter_list|,
name|String
name|sub
parameter_list|)
throws|throws
name|MimeTypeException
block|{
comment|// Preliminary checks...
if|if
condition|(
operator|(
name|primary
operator|==
literal|null
operator|)
operator|||
operator|(
name|primary
operator|.
name|length
argument_list|()
operator|<=
literal|0
operator|)
operator|||
operator|(
operator|!
name|isValid
argument_list|(
name|primary
argument_list|)
operator|)
condition|)
block|{
throw|throw
operator|new
name|MimeTypeException
argument_list|(
literal|"Invalid Primary Type "
operator|+
name|primary
argument_list|)
throw|;
block|}
comment|// Remove optional parameters from the sub type
name|String
name|clearedSub
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|sub
operator|!=
literal|null
condition|)
block|{
name|clearedSub
operator|=
name|sub
operator|.
name|split
argument_list|(
name|PARAMS_SEP
argument_list|)
index|[
literal|0
index|]
expr_stmt|;
block|}
if|if
condition|(
operator|(
name|clearedSub
operator|==
literal|null
operator|)
operator|||
operator|(
name|clearedSub
operator|.
name|length
argument_list|()
operator|<=
literal|0
operator|)
operator|||
operator|(
operator|!
name|isValid
argument_list|(
name|clearedSub
argument_list|)
operator|)
condition|)
block|{
throw|throw
operator|new
name|MimeTypeException
argument_list|(
literal|"Invalid Sub Type "
operator|+
name|clearedSub
argument_list|)
throw|;
block|}
comment|// All is ok, assign values
name|this
operator|.
name|primary
operator|=
name|primary
operator|.
name|toLowerCase
argument_list|()
operator|.
name|trim
argument_list|()
expr_stmt|;
name|this
operator|.
name|sub
operator|=
name|clearedSub
operator|.
name|toLowerCase
argument_list|()
operator|.
name|trim
argument_list|()
expr_stmt|;
name|this
operator|.
name|name
operator|=
name|this
operator|.
name|primary
operator|+
name|SEPARATOR
operator|+
name|this
operator|.
name|sub
expr_stmt|;
name|this
operator|.
name|patterns
operator|=
operator|new
name|Patterns
argument_list|()
expr_stmt|;
name|this
operator|.
name|magics
operator|=
operator|new
name|ArrayList
argument_list|()
expr_stmt|;
name|this
operator|.
name|aliases
operator|=
operator|new
name|ArrayList
argument_list|()
expr_stmt|;
name|this
operator|.
name|rootXML
operator|=
operator|new
name|ArrayList
argument_list|()
expr_stmt|;
name|this
operator|.
name|superTypes
operator|=
operator|new
name|ArrayList
argument_list|()
expr_stmt|;
block|}
comment|/**      * Cleans a content-type. This method cleans a content-type by removing its      * optional parameters and returning only its      *<code>primary-type/sub-type</code>.      *       * @param type      *            is the content-type to clean.      * @return the cleaned version of the specified content-type.      * @throws MimeTypeException      *             if something wrong occurs during the parsing/cleaning of the      *             specified type.      */
specifier|public
specifier|final
specifier|static
name|String
name|clean
parameter_list|(
name|String
name|type
parameter_list|)
throws|throws
name|MimeTypeException
block|{
return|return
operator|(
operator|new
name|MimeType
argument_list|(
name|type
argument_list|)
operator|)
operator|.
name|getName
argument_list|()
return|;
block|}
comment|/**      * Return the name of this mime-type.      *       * @return the name of this mime-type.      */
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
comment|/**      * Return the primary type of this mime-type.      *       * @return the primary type of this mime-type.      */
specifier|public
name|String
name|getPrimaryType
parameter_list|()
block|{
return|return
name|primary
return|;
block|}
comment|/**      * Return the sub type of this mime-type.      *       * @return the sub type of this mime-type.      */
specifier|public
name|String
name|getSubType
parameter_list|()
block|{
return|return
name|sub
return|;
block|}
comment|// Inherited Javadoc
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuffer
name|buf
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|buf
operator|.
name|append
argument_list|(
name|name
argument_list|)
operator|.
name|append
argument_list|(
literal|" -- "
argument_list|)
operator|.
name|append
argument_list|(
name|getDescription
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
operator|.
name|append
argument_list|(
literal|"Aliases: "
argument_list|)
expr_stmt|;
if|if
condition|(
name|aliases
operator|.
name|size
argument_list|()
operator|<
literal|1
condition|)
block|{
name|buf
operator|.
name|append
argument_list|(
literal|" NONE"
argument_list|)
expr_stmt|;
block|}
name|buf
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|aliases
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|buf
operator|.
name|append
argument_list|(
literal|"\t"
argument_list|)
operator|.
name|append
argument_list|(
operator|(
name|String
operator|)
name|aliases
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
block|}
name|buf
operator|.
name|append
argument_list|(
literal|"Patterns:"
argument_list|)
expr_stmt|;
name|String
index|[]
name|patterns
init|=
name|this
operator|.
name|patterns
operator|.
name|getPatterns
argument_list|()
decl_stmt|;
if|if
condition|(
name|patterns
operator|.
name|length
operator|<
literal|1
condition|)
block|{
name|buf
operator|.
name|append
argument_list|(
literal|" NONE"
argument_list|)
expr_stmt|;
block|}
name|buf
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|patterns
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|buf
operator|.
name|append
argument_list|(
literal|"\t"
argument_list|)
operator|.
name|append
argument_list|(
name|patterns
index|[
name|i
index|]
argument_list|)
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
block|}
name|buf
operator|.
name|append
argument_list|(
literal|"Magics:  "
argument_list|)
expr_stmt|;
if|if
condition|(
name|magics
operator|.
name|size
argument_list|()
operator|<
literal|1
condition|)
block|{
name|buf
operator|.
name|append
argument_list|(
literal|" NONE"
argument_list|)
expr_stmt|;
block|}
name|buf
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|magics
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|buf
operator|.
name|append
argument_list|(
literal|"\t"
argument_list|)
operator|.
name|append
argument_list|(
operator|(
name|Magic
operator|)
name|magics
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
block|}
return|return
name|buf
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**      * Indicates if an object is equal to this mime-type. The specified object      * is equal to this mime-type if it is not null, and it is an instance of      * MimeType and its name is equals to this mime-type.      *       * @param object      *            the reference object with which to compare.      * @return<code>true</code> if this mime-type is equal to the object      *         argument;<code>false</code> otherwise.      */
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|object
parameter_list|)
block|{
try|try
block|{
return|return
operator|(
operator|(
name|MimeType
operator|)
name|object
operator|)
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|this
operator|.
name|name
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
block|}
comment|// Inherited Javadoc
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|name
operator|.
name|hashCode
argument_list|()
return|;
block|}
comment|/**      * Return the description of this mime-type.      *       * @return the description of this mime-type.      */
specifier|public
name|String
name|getDescription
parameter_list|()
block|{
return|return
name|description
return|;
block|}
comment|/**      * Set the description of this mime-type.      *       * @param description      *            the description of this mime-type.      */
name|void
name|setDescription
parameter_list|(
name|String
name|description
parameter_list|)
block|{
name|this
operator|.
name|description
operator|=
name|description
expr_stmt|;
block|}
comment|/**      * Add a supported file-naming pattern.      *       * @param pattern      *            to add to the list of recognition pattern for this mime-type.      */
name|void
name|addPattern
parameter_list|(
name|String
name|pattern
parameter_list|)
block|{
name|patterns
operator|.
name|add
argument_list|(
name|pattern
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
comment|/**      * Return the recogition patterns for this mime-type      *       * @return the recoginition patterns associated to this mime-type.      */
name|String
index|[]
name|getPatterns
parameter_list|()
block|{
return|return
name|patterns
operator|.
name|getPatterns
argument_list|()
return|;
block|}
comment|/**      * Add an alias to this mime-type      *       * @param alias      *            to add to this mime-type.      */
name|void
name|addAlias
parameter_list|(
name|String
name|alias
parameter_list|)
block|{
name|aliases
operator|.
name|add
argument_list|(
name|alias
argument_list|)
expr_stmt|;
block|}
comment|/**      * Add some rootXML info to this mime-type      *       * @param namespaceURI      * @param localName      */
name|void
name|addRootXML
parameter_list|(
name|String
name|namespaceURI
parameter_list|,
name|String
name|localName
parameter_list|)
block|{
name|rootXML
operator|.
name|add
argument_list|(
operator|new
name|RootXML
argument_list|(
name|this
argument_list|,
name|namespaceURI
argument_list|,
name|localName
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|boolean
name|matchesXML
parameter_list|(
name|byte
index|[]
name|data
parameter_list|)
block|{
name|RootXML
name|xml
init|=
literal|null
decl_stmt|;
name|String
name|content
init|=
operator|new
name|String
argument_list|(
name|data
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|rootXML
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|xml
operator|=
operator|(
name|RootXML
operator|)
name|rootXML
operator|.
name|get
argument_list|(
name|i
argument_list|)
expr_stmt|;
if|if
condition|(
name|xml
operator|.
name|matches
argument_list|(
name|content
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
name|boolean
name|hasRootXML
parameter_list|()
block|{
return|return
operator|(
name|rootXML
operator|.
name|size
argument_list|()
operator|>
literal|0
operator|)
return|;
block|}
name|RootXML
index|[]
name|getRootXMLs
parameter_list|()
block|{
return|return
operator|(
name|RootXML
index|[]
operator|)
name|rootXML
operator|.
name|toArray
argument_list|(
operator|new
name|RootXML
index|[
name|rootXML
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
name|void
name|addSuperType
parameter_list|(
name|String
name|type
parameter_list|)
block|{
name|superTypes
operator|.
name|add
argument_list|(
name|type
argument_list|)
expr_stmt|;
block|}
name|boolean
name|hasSuperType
parameter_list|()
block|{
return|return
operator|(
name|superTypes
operator|.
name|size
argument_list|()
operator|>
literal|0
operator|)
return|;
block|}
comment|/**      * Returns the super types of this mime-type. A type is a super type of      * another type if any instance of the second type is also an instance of      * the first.      */
specifier|public
name|String
index|[]
name|getSuperTypes
parameter_list|()
block|{
return|return
operator|(
name|String
index|[]
operator|)
name|superTypes
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|superTypes
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
name|int
name|getLevel
parameter_list|()
block|{
return|return
name|level
return|;
block|}
name|void
name|incLevel
parameter_list|()
block|{
name|this
operator|.
name|level
operator|++
expr_stmt|;
block|}
comment|/**      * Return the recogition patterns for this mime-type      *       * @return the recoginition patterns associated to this mime-type.      */
specifier|public
name|String
index|[]
name|getAliases
parameter_list|()
block|{
return|return
operator|(
name|String
index|[]
operator|)
name|aliases
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|aliases
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
name|Magic
index|[]
name|getMagics
parameter_list|()
block|{
return|return
operator|(
name|Magic
index|[]
operator|)
name|magics
operator|.
name|toArray
argument_list|(
operator|new
name|Magic
index|[
name|magics
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
name|void
name|addMagic
parameter_list|(
name|Magic
name|magic
parameter_list|)
block|{
if|if
condition|(
name|magic
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|magics
operator|.
name|add
argument_list|(
name|magic
argument_list|)
expr_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|magics
argument_list|,
name|MimeTypes
operator|.
name|MAGICS_COMPARATOR
argument_list|)
expr_stmt|;
block|}
name|int
name|getMinLength
parameter_list|()
block|{
return|return
name|minLength
return|;
block|}
specifier|public
name|boolean
name|hasMagic
parameter_list|()
block|{
return|return
operator|(
name|magics
operator|.
name|size
argument_list|()
operator|>
literal|0
operator|)
return|;
block|}
specifier|public
name|boolean
name|matches
parameter_list|(
name|String
name|url
parameter_list|)
block|{
return|return
operator|(
name|patterns
operator|.
name|matches
argument_list|(
name|url
argument_list|)
operator|==
name|this
operator|)
return|;
block|}
specifier|public
name|boolean
name|matchesMagic
parameter_list|(
name|byte
index|[]
name|data
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|magics
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Magic
name|magic
init|=
operator|(
name|Magic
operator|)
name|magics
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|magic
operator|.
name|eval
argument_list|(
name|data
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|matches
parameter_list|(
name|byte
index|[]
name|data
parameter_list|)
block|{
return|return
name|matchesXML
argument_list|(
name|data
argument_list|)
operator|||
name|matchesMagic
argument_list|(
name|data
argument_list|)
return|;
block|}
comment|/** Checks if the specified primary or sub type is valid. */
specifier|private
name|boolean
name|isValid
parameter_list|(
name|String
name|type
parameter_list|)
block|{
return|return
operator|(
name|type
operator|!=
literal|null
operator|)
operator|&&
operator|(
name|type
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|>
literal|0
operator|)
operator|&&
operator|!
name|hasCtrlOrSpecials
argument_list|(
name|type
argument_list|)
return|;
block|}
comment|/** Checks if the specified string contains some special characters. */
specifier|private
name|boolean
name|hasCtrlOrSpecials
parameter_list|(
name|String
name|type
parameter_list|)
block|{
name|int
name|len
init|=
name|type
operator|.
name|length
argument_list|()
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|i
operator|<
name|len
condition|)
block|{
name|char
name|c
init|=
name|type
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|<=
literal|'\032'
operator|||
name|SPECIALS
operator|.
name|indexOf
argument_list|(
name|c
argument_list|)
operator|>
literal|0
condition|)
block|{
return|return
literal|true
return|;
block|}
name|i
operator|++
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
comment|/**      * Defines a RootXML description. RootXML is made of a localName and/or a      * namespaceURI.      */
class|class
name|RootXML
block|{
specifier|private
specifier|final
specifier|static
name|int
name|PATTERN_FLAGS
init|=
name|Pattern
operator|.
name|CASE_INSENSITIVE
operator||
name|Pattern
operator|.
name|DOTALL
operator||
name|Pattern
operator|.
name|MULTILINE
decl_stmt|;
specifier|private
name|MimeType
name|type
init|=
literal|null
decl_stmt|;
specifier|private
name|String
name|namespaceURI
init|=
literal|null
decl_stmt|;
specifier|private
name|String
name|localName
init|=
literal|null
decl_stmt|;
specifier|private
name|Pattern
name|pattern
init|=
literal|null
decl_stmt|;
name|RootXML
parameter_list|(
name|MimeType
name|type
parameter_list|,
name|String
name|namespaceURI
parameter_list|,
name|String
name|localName
parameter_list|)
block|{
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
name|this
operator|.
name|namespaceURI
operator|=
name|namespaceURI
expr_stmt|;
name|this
operator|.
name|localName
operator|=
name|localName
expr_stmt|;
if|if
condition|(
operator|(
name|StringUtil
operator|.
name|isEmpty
argument_list|(
name|namespaceURI
argument_list|)
operator|)
operator|&&
operator|(
name|StringUtil
operator|.
name|isEmpty
argument_list|(
name|localName
argument_list|)
operator|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Both namespaceURI and localName cannot be null"
argument_list|)
throw|;
block|}
name|String
name|regex
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|StringUtil
operator|.
name|isEmpty
argument_list|(
name|namespaceURI
argument_list|)
condition|)
block|{
name|regex
operator|=
literal|".*<"
operator|+
name|localName
operator|+
literal|"[^<>]*>.*"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|StringUtil
operator|.
name|isEmpty
argument_list|(
name|localName
argument_list|)
condition|)
block|{
name|regex
operator|=
literal|".*<[^<>]*\\p{Space}xmlns=[\"\']?"
operator|+
name|namespaceURI
operator|+
literal|"[\"\']?[^<>]*>.*"
expr_stmt|;
block|}
else|else
block|{
name|regex
operator|=
literal|".*<"
operator|+
name|localName
operator|+
literal|"[^<>]*\\p{Space}xmlns=[\"\']?"
operator|+
name|namespaceURI
operator|+
literal|"[\"\']?[^<>]*>.*"
expr_stmt|;
block|}
name|this
operator|.
name|pattern
operator|=
name|Pattern
operator|.
name|compile
argument_list|(
name|regex
argument_list|,
name|PATTERN_FLAGS
argument_list|)
expr_stmt|;
block|}
name|boolean
name|matches
parameter_list|(
name|byte
index|[]
name|data
parameter_list|)
block|{
return|return
name|matches
argument_list|(
operator|new
name|String
argument_list|(
name|data
argument_list|)
argument_list|)
return|;
block|}
name|boolean
name|matches
parameter_list|(
name|String
name|data
parameter_list|)
block|{
return|return
name|pattern
operator|.
name|matcher
argument_list|(
name|data
argument_list|)
operator|.
name|matches
argument_list|()
return|;
block|}
name|MimeType
name|getType
parameter_list|()
block|{
return|return
name|type
return|;
block|}
name|String
name|getNameSpaceURI
parameter_list|()
block|{
return|return
name|namespaceURI
return|;
block|}
name|String
name|getLocalName
parameter_list|()
block|{
return|return
name|localName
return|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
operator|new
name|StringBuffer
argument_list|()
operator|.
name|append
argument_list|(
name|type
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
operator|.
name|append
argument_list|(
name|namespaceURI
argument_list|)
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
operator|.
name|append
argument_list|(
name|localName
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
block|}
end_class

end_unit

