begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|mime
package|;
end_package

begin_comment
comment|/**  *   * A set of Hex encoding and decoding utility methods.  *   */
end_comment

begin_class
specifier|public
class|class
name|HexCoDec
block|{
specifier|private
specifier|final
specifier|static
name|char
index|[]
name|HEX_CHARS
init|=
block|{
literal|'0'
block|,
literal|'1'
block|,
literal|'2'
block|,
literal|'3'
block|,
literal|'4'
block|,
literal|'5'
block|,
literal|'6'
block|,
literal|'7'
block|,
literal|'8'
block|,
literal|'9'
block|,
literal|'a'
block|,
literal|'b'
block|,
literal|'c'
block|,
literal|'d'
block|,
literal|'e'
block|,
literal|'f'
block|}
decl_stmt|;
comment|/**      * Decode a hex string      *       * @param hexValue      *            the string of hex characters      * @return the decode hex string as bytes.      */
specifier|public
specifier|static
name|byte
index|[]
name|decode
parameter_list|(
name|String
name|hexValue
parameter_list|)
block|{
return|return
name|decode
argument_list|(
name|hexValue
operator|.
name|toCharArray
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * Decode an array of hex chars      *       * @param hexChars      *            an array of hex characters.      * @return the decode hex chars as bytes.      */
specifier|public
specifier|static
name|byte
index|[]
name|decode
parameter_list|(
name|char
index|[]
name|hexChars
parameter_list|)
block|{
return|return
name|decode
argument_list|(
name|hexChars
argument_list|,
literal|0
argument_list|,
name|hexChars
operator|.
name|length
argument_list|)
return|;
block|}
comment|/**      * Decode an array of hex chars.      *       * @param hexChars      *            an array of hex characters.      * @param startIndex      *            the index of the first character to decode      * @param length      *            the number of characters to decode.      * @return the decode hex chars as bytes.      */
specifier|public
specifier|static
name|byte
index|[]
name|decode
parameter_list|(
name|char
index|[]
name|hexChars
parameter_list|,
name|int
name|startIndex
parameter_list|,
name|int
name|length
parameter_list|)
block|{
if|if
condition|(
operator|(
name|length
operator|&
literal|1
operator|)
operator|!=
literal|0
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Length must be even"
argument_list|)
throw|;
name|byte
index|[]
name|result
init|=
operator|new
name|byte
index|[
name|length
operator|/
literal|2
index|]
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|result
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
name|result
index|[
name|j
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
name|hexCharToNibble
argument_list|(
name|hexChars
index|[
name|startIndex
operator|++
index|]
argument_list|)
operator|*
literal|16
operator|+
name|hexCharToNibble
argument_list|(
name|hexChars
index|[
name|startIndex
operator|++
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
comment|/**      * Hex encode an array of bytes      *       * @param bites      *            the array of bytes to encode.      * @return the array of hex characters.      */
specifier|public
specifier|static
name|char
index|[]
name|encode
parameter_list|(
name|byte
index|[]
name|bites
parameter_list|)
block|{
return|return
name|encode
argument_list|(
name|bites
argument_list|,
literal|0
argument_list|,
name|bites
operator|.
name|length
argument_list|)
return|;
block|}
comment|/**      * Hex encode an array of bytes      *       * @param bites      *            the array of bytes to encode.      * @param startIndex      *            the index of the first character to encode.      * @param length      *            the number of characters to encode.      * @return the array of hex characters.      */
specifier|public
specifier|static
name|char
index|[]
name|encode
parameter_list|(
name|byte
index|[]
name|bites
parameter_list|,
name|int
name|startIndex
parameter_list|,
name|int
name|length
parameter_list|)
block|{
name|char
index|[]
name|result
init|=
operator|new
name|char
index|[
name|length
operator|*
literal|2
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|,
name|j
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
name|i
operator|++
control|)
block|{
name|int
name|bite
init|=
name|bites
index|[
name|startIndex
operator|++
index|]
operator|&
literal|0xff
decl_stmt|;
name|result
index|[
name|j
operator|++
index|]
operator|=
name|HEX_CHARS
index|[
name|bite
operator|>>
literal|4
index|]
expr_stmt|;
name|result
index|[
name|j
operator|++
index|]
operator|=
name|HEX_CHARS
index|[
name|bite
operator|&
literal|0xf
index|]
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
comment|/**      * Internal method to turn a hex char into a nibble.      */
specifier|private
specifier|static
name|int
name|hexCharToNibble
parameter_list|(
name|char
name|ch
parameter_list|)
block|{
if|if
condition|(
operator|(
name|ch
operator|>=
literal|'0'
operator|)
operator|&&
operator|(
name|ch
operator|<=
literal|'9'
operator|)
condition|)
return|return
name|ch
operator|-
literal|'0'
return|;
elseif|else
if|if
condition|(
operator|(
name|ch
operator|>=
literal|'a'
operator|)
operator|&&
operator|(
name|ch
operator|<=
literal|'f'
operator|)
condition|)
return|return
name|ch
operator|-
literal|'a'
operator|+
literal|10
return|;
elseif|else
if|if
condition|(
operator|(
name|ch
operator|>=
literal|'A'
operator|)
operator|&&
operator|(
name|ch
operator|<=
literal|'F'
operator|)
condition|)
return|return
name|ch
operator|-
literal|'A'
operator|+
literal|10
return|;
else|else
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Not a hex char - '"
operator|+
name|ch
operator|+
literal|"'"
argument_list|)
throw|;
block|}
block|}
end_class

end_unit

