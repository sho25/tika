begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|mime
package|;
end_package

begin_comment
comment|// JDK imports
end_comment

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * Defines a MimeType pattern.  */
end_comment

begin_class
class|class
name|Patterns
block|{
specifier|private
specifier|static
name|Map
argument_list|<
name|Character
argument_list|,
name|String
argument_list|>
name|escapeMap
init|=
operator|new
name|HashMap
argument_list|<
name|Character
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
name|escapeMap
operator|.
name|put
argument_list|(
literal|'\\'
argument_list|,
literal|"\\\\"
argument_list|)
expr_stmt|;
name|escapeMap
operator|.
name|put
argument_list|(
literal|'?'
argument_list|,
literal|"\\?"
argument_list|)
expr_stmt|;
name|escapeMap
operator|.
name|put
argument_list|(
literal|'['
argument_list|,
literal|"\\["
argument_list|)
expr_stmt|;
name|escapeMap
operator|.
name|put
argument_list|(
literal|']'
argument_list|,
literal|"\\]"
argument_list|)
expr_stmt|;
name|escapeMap
operator|.
name|put
argument_list|(
literal|'^'
argument_list|,
literal|"\\^"
argument_list|)
expr_stmt|;
name|escapeMap
operator|.
name|put
argument_list|(
literal|'.'
argument_list|,
literal|"\\."
argument_list|)
expr_stmt|;
name|escapeMap
operator|.
name|put
argument_list|(
literal|'-'
argument_list|,
literal|"\\-"
argument_list|)
expr_stmt|;
name|escapeMap
operator|.
name|put
argument_list|(
literal|'$'
argument_list|,
literal|"\\$"
argument_list|)
expr_stmt|;
name|escapeMap
operator|.
name|put
argument_list|(
literal|'+'
argument_list|,
literal|"\\+"
argument_list|)
expr_stmt|;
name|escapeMap
operator|.
name|put
argument_list|(
literal|'('
argument_list|,
literal|"\\("
argument_list|)
expr_stmt|;
name|escapeMap
operator|.
name|put
argument_list|(
literal|')'
argument_list|,
literal|"\\)"
argument_list|)
expr_stmt|;
name|escapeMap
operator|.
name|put
argument_list|(
literal|'{'
argument_list|,
literal|"\\{"
argument_list|)
expr_stmt|;
name|escapeMap
operator|.
name|put
argument_list|(
literal|'}'
argument_list|,
literal|"\\}"
argument_list|)
expr_stmt|;
name|escapeMap
operator|.
name|put
argument_list|(
literal|'|'
argument_list|,
literal|"\\|"
argument_list|)
expr_stmt|;
name|escapeMap
operator|.
name|put
argument_list|(
literal|'*'
argument_list|,
literal|".*"
argument_list|)
expr_stmt|;
block|}
comment|/** Gathers all the patterns */
specifier|private
name|ArrayList
argument_list|<
name|String
argument_list|>
name|patterns
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
comment|/** An index of exact matching patterns */
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|MimeType
argument_list|>
name|exactIdx
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|MimeType
argument_list|>
argument_list|()
decl_stmt|;
comment|/** An index of the patterns of the form "*.ext" */
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|MimeType
argument_list|>
name|extIdx
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|MimeType
argument_list|>
argument_list|()
decl_stmt|;
comment|/** A list of other patterns */
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|MimeType
argument_list|>
name|others
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|MimeType
argument_list|>
argument_list|()
decl_stmt|;
name|void
name|add
parameter_list|(
name|String
index|[]
name|patterns
parameter_list|,
name|MimeType
name|type
parameter_list|)
block|{
comment|// Some preliminary checks
if|if
condition|(
operator|(
name|patterns
operator|==
literal|null
operator|)
operator|||
operator|(
name|type
operator|==
literal|null
operator|)
condition|)
block|{
return|return;
block|}
comment|// All is ok, so add the patterns
for|for
control|(
name|String
name|pattern
range|:
name|patterns
control|)
block|{
name|add
argument_list|(
name|pattern
argument_list|,
name|type
argument_list|)
expr_stmt|;
block|}
block|}
name|void
name|add
parameter_list|(
name|String
name|pattern
parameter_list|,
name|MimeType
name|type
parameter_list|)
block|{
comment|// Some preliminary checks
if|if
condition|(
operator|(
name|pattern
operator|==
literal|null
operator|)
operator|||
operator|(
name|type
operator|==
literal|null
operator|)
condition|)
block|{
return|return;
block|}
comment|// Add the pattern in the good index
if|if
condition|(
operator|(
name|pattern
operator|.
name|indexOf
argument_list|(
literal|'*'
argument_list|)
operator|==
operator|-
literal|1
operator|)
operator|&&
operator|(
name|pattern
operator|.
name|indexOf
argument_list|(
literal|'?'
argument_list|)
operator|==
operator|-
literal|1
operator|)
operator|&&
operator|(
name|pattern
operator|.
name|indexOf
argument_list|(
literal|'['
argument_list|)
operator|==
operator|-
literal|1
operator|)
condition|)
block|{
name|exactIdx
operator|.
name|put
argument_list|(
name|pattern
argument_list|,
name|type
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|pattern
operator|.
name|startsWith
argument_list|(
literal|"*."
argument_list|)
condition|)
block|{
name|extIdx
operator|.
name|put
argument_list|(
name|pattern
operator|.
name|substring
argument_list|(
literal|2
argument_list|)
argument_list|,
name|type
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|others
operator|.
name|put
argument_list|(
name|escape
argument_list|(
name|pattern
argument_list|)
argument_list|,
name|type
argument_list|)
expr_stmt|;
block|}
comment|// Add the pattern in the list of patterns
name|patterns
operator|.
name|add
argument_list|(
name|pattern
argument_list|)
expr_stmt|;
block|}
name|String
index|[]
name|getPatterns
parameter_list|()
block|{
return|return
name|patterns
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|patterns
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
comment|/**      * Find the MimeType corresponding to a filename.      *       * It applies the recommandations detailed in FreeDesktop Shared MIME-info      * Database for guessing MimeType from a filename: It first try a      * case-sensitive match, then try again with the filename converted to      * lower-case if that fails. If several patterns match then the longest      * pattern is used. In particular, files with multiple extensions (such as      * Data.tar.gz) match the longest sequence of extensions (eg '*.tar.gz' in      * preference to '*.gz'). Literal patterns (eg, 'Makefile') are matched      * before all others. Patterns beginning with `*.' and containing no other      * special characters (`*?[') are matched before other wildcarded patterns      * (since this covers the majority of the patterns).      */
name|MimeType
name|matches
parameter_list|(
name|String
name|filename
parameter_list|)
block|{
comment|// Preliminary check...
if|if
condition|(
name|filename
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
comment|// First, try exact match of the provided filename
name|MimeType
name|type
init|=
name|exactIdx
operator|.
name|get
argument_list|(
name|filename
argument_list|)
decl_stmt|;
if|if
condition|(
name|type
operator|!=
literal|null
condition|)
block|{
return|return
name|type
return|;
block|}
comment|// Then try exact match with only the filename
name|String
name|str
init|=
name|last
argument_list|(
name|filename
argument_list|,
literal|'/'
argument_list|)
decl_stmt|;
if|if
condition|(
name|str
operator|!=
literal|null
condition|)
block|{
name|type
operator|=
name|exactIdx
operator|.
name|get
argument_list|(
name|str
argument_list|)
expr_stmt|;
if|if
condition|(
name|type
operator|!=
literal|null
condition|)
block|{
return|return
name|type
return|;
block|}
block|}
name|str
operator|=
name|last
argument_list|(
name|filename
argument_list|,
literal|'\\'
argument_list|)
expr_stmt|;
if|if
condition|(
name|str
operator|!=
literal|null
condition|)
block|{
name|type
operator|=
name|exactIdx
operator|.
name|get
argument_list|(
name|str
argument_list|)
expr_stmt|;
if|if
condition|(
name|type
operator|!=
literal|null
condition|)
block|{
return|return
name|type
return|;
block|}
block|}
comment|// Then try "extension" (*.xxx) matching
name|int
name|idx
init|=
name|filename
operator|.
name|indexOf
argument_list|(
literal|'.'
argument_list|,
literal|0
argument_list|)
decl_stmt|;
while|while
condition|(
name|idx
operator|!=
operator|-
literal|1
condition|)
block|{
name|type
operator|=
name|extIdx
operator|.
name|get
argument_list|(
name|filename
operator|.
name|substring
argument_list|(
name|idx
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|type
operator|!=
literal|null
condition|)
block|{
return|return
name|type
return|;
block|}
name|idx
operator|=
name|filename
operator|.
name|indexOf
argument_list|(
literal|'.'
argument_list|,
name|idx
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
comment|// And finally, try complex regexp matching
name|String
name|longest
init|=
literal|null
decl_stmt|;
for|for
control|(
name|String
name|pattern
range|:
name|others
operator|.
name|keySet
argument_list|()
control|)
block|{
if|if
condition|(
operator|(
name|filename
operator|.
name|matches
argument_list|(
name|pattern
argument_list|)
operator|)
operator|&&
operator|(
name|pattern
operator|.
name|length
argument_list|()
operator|>
name|longest
operator|.
name|length
argument_list|()
operator|)
condition|)
block|{
name|longest
operator|=
name|pattern
expr_stmt|;
block|}
block|}
if|if
condition|(
name|longest
operator|!=
literal|null
condition|)
block|{
name|type
operator|=
name|others
operator|.
name|get
argument_list|(
name|longest
argument_list|)
expr_stmt|;
block|}
return|return
name|type
return|;
block|}
specifier|private
specifier|final
specifier|static
name|String
name|last
parameter_list|(
name|String
name|str
parameter_list|,
name|char
name|c
parameter_list|)
block|{
if|if
condition|(
name|str
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|int
name|idx
init|=
name|str
operator|.
name|lastIndexOf
argument_list|(
name|c
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|idx
operator|<
literal|0
operator|)
operator|||
operator|(
name|idx
operator|>=
operator|(
name|str
operator|.
name|length
argument_list|()
operator|-
literal|1
operator|)
operator|)
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|str
operator|.
name|substring
argument_list|(
name|idx
operator|+
literal|1
argument_list|)
return|;
block|}
specifier|private
specifier|final
specifier|static
name|String
name|escape
parameter_list|(
name|String
name|str
parameter_list|)
block|{
name|StringBuffer
name|result
init|=
operator|new
name|StringBuffer
argument_list|(
name|str
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|str
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|String
name|charAt
init|=
name|String
operator|.
name|valueOf
argument_list|(
name|str
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|replace
init|=
name|escapeMap
operator|.
name|get
argument_list|(
name|charAt
argument_list|)
decl_stmt|;
name|result
operator|.
name|append
argument_list|(
operator|(
name|replace
operator|!=
literal|null
operator|)
condition|?
name|replace
else|:
name|charAt
argument_list|)
expr_stmt|;
block|}
return|return
name|result
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

