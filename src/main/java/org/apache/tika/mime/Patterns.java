begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|mime
package|;
end_package

begin_comment
comment|// JDK imports
end_comment

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_comment
comment|/**  * Defines a MimeType pattern.  */
end_comment

begin_class
class|class
name|Patterns
block|{
comment|/**      * Index of exact name patterns.      */
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|MimeType
argument_list|>
name|names
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|MimeType
argument_list|>
argument_list|()
decl_stmt|;
comment|/**      * Index of extension patterns of the form "*extension".      */
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|MimeType
argument_list|>
name|extensions
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|MimeType
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|int
name|minExtensionLength
init|=
name|Integer
operator|.
name|MAX_VALUE
decl_stmt|;
specifier|private
name|int
name|maxExtensionLength
init|=
literal|0
decl_stmt|;
comment|/**      * Index of generic glob patterns, sorted by length.      */
specifier|private
specifier|final
name|SortedMap
argument_list|<
name|String
argument_list|,
name|MimeType
argument_list|>
name|globs
init|=
operator|new
name|TreeMap
argument_list|<
name|String
argument_list|,
name|MimeType
argument_list|>
argument_list|(
operator|new
name|Comparator
argument_list|<
name|String
argument_list|>
argument_list|()
block|{
specifier|public
name|int
name|compare
parameter_list|(
name|String
name|a
parameter_list|,
name|String
name|b
parameter_list|)
block|{
name|int
name|diff
init|=
name|b
operator|.
name|length
argument_list|()
operator|-
name|a
operator|.
name|length
argument_list|()
decl_stmt|;
if|if
condition|(
name|diff
operator|==
literal|0
condition|)
block|{
name|diff
operator|=
name|a
operator|.
name|compareTo
argument_list|(
name|b
argument_list|)
expr_stmt|;
block|}
return|return
name|diff
return|;
block|}
block|}
argument_list|)
decl_stmt|;
specifier|public
name|void
name|add
parameter_list|(
name|String
name|pattern
parameter_list|,
name|MimeType
name|type
parameter_list|)
throws|throws
name|MimeTypeException
block|{
name|this
operator|.
name|add
argument_list|(
name|pattern
argument_list|,
literal|false
argument_list|,
name|type
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|add
parameter_list|(
name|String
name|pattern
parameter_list|,
name|boolean
name|isJavaRegex
parameter_list|,
name|MimeType
name|type
parameter_list|)
throws|throws
name|MimeTypeException
block|{
if|if
condition|(
name|pattern
operator|==
literal|null
operator|||
name|type
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Pattern and/or mime type is missing"
argument_list|)
throw|;
block|}
if|if
condition|(
name|isJavaRegex
condition|)
block|{
comment|// in this case, we don't need to build a regex pattern
comment|// it's already there for us, so just add the pattern as is
name|addGlob
argument_list|(
name|pattern
argument_list|,
name|type
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|pattern
operator|.
name|indexOf
argument_list|(
literal|'*'
argument_list|)
operator|==
operator|-
literal|1
operator|&&
name|pattern
operator|.
name|indexOf
argument_list|(
literal|'?'
argument_list|)
operator|==
operator|-
literal|1
operator|&&
name|pattern
operator|.
name|indexOf
argument_list|(
literal|'['
argument_list|)
operator|==
operator|-
literal|1
condition|)
block|{
name|addName
argument_list|(
name|pattern
argument_list|,
name|type
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|pattern
operator|.
name|startsWith
argument_list|(
literal|"*"
argument_list|)
operator|&&
name|pattern
operator|.
name|indexOf
argument_list|(
literal|'*'
argument_list|,
literal|1
argument_list|)
operator|==
operator|-
literal|1
operator|&&
name|pattern
operator|.
name|indexOf
argument_list|(
literal|'?'
argument_list|)
operator|==
operator|-
literal|1
operator|&&
name|pattern
operator|.
name|indexOf
argument_list|(
literal|'['
argument_list|)
operator|==
operator|-
literal|1
condition|)
block|{
name|addExtension
argument_list|(
name|pattern
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
argument_list|,
name|type
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|addGlob
argument_list|(
name|compile
argument_list|(
name|pattern
argument_list|)
argument_list|,
name|type
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|addName
parameter_list|(
name|String
name|name
parameter_list|,
name|MimeType
name|type
parameter_list|)
throws|throws
name|MimeTypeException
block|{
name|MimeType
name|previous
init|=
name|names
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|previous
operator|==
literal|null
operator|||
name|previous
operator|.
name|isDescendantOf
argument_list|(
name|type
argument_list|)
condition|)
block|{
name|names
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|type
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|previous
operator|==
name|type
operator|||
name|type
operator|.
name|isDescendantOf
argument_list|(
name|previous
argument_list|)
condition|)
block|{
comment|// do nothing
block|}
else|else
block|{
throw|throw
operator|new
name|MimeTypeException
argument_list|(
literal|"Conflicting name pattern: "
operator|+
name|name
argument_list|)
throw|;
block|}
block|}
specifier|private
name|void
name|addExtension
parameter_list|(
name|String
name|extension
parameter_list|,
name|MimeType
name|type
parameter_list|)
throws|throws
name|MimeTypeException
block|{
name|MimeType
name|previous
init|=
name|extensions
operator|.
name|get
argument_list|(
name|extension
argument_list|)
decl_stmt|;
if|if
condition|(
name|previous
operator|==
literal|null
operator|||
name|previous
operator|.
name|isDescendantOf
argument_list|(
name|type
argument_list|)
condition|)
block|{
name|extensions
operator|.
name|put
argument_list|(
name|extension
argument_list|,
name|type
argument_list|)
expr_stmt|;
name|int
name|length
init|=
name|extension
operator|.
name|length
argument_list|()
decl_stmt|;
name|minExtensionLength
operator|=
name|Math
operator|.
name|min
argument_list|(
name|minExtensionLength
argument_list|,
name|length
argument_list|)
expr_stmt|;
name|maxExtensionLength
operator|=
name|Math
operator|.
name|max
argument_list|(
name|maxExtensionLength
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|previous
operator|==
name|type
operator|||
name|type
operator|.
name|isDescendantOf
argument_list|(
name|previous
argument_list|)
condition|)
block|{
comment|// do nothing
block|}
else|else
block|{
throw|throw
operator|new
name|MimeTypeException
argument_list|(
literal|"Conflicting extension pattern: "
operator|+
name|extension
argument_list|)
throw|;
block|}
block|}
specifier|private
name|void
name|addGlob
parameter_list|(
name|String
name|glob
parameter_list|,
name|MimeType
name|type
parameter_list|)
throws|throws
name|MimeTypeException
block|{
name|MimeType
name|previous
init|=
name|globs
operator|.
name|get
argument_list|(
name|glob
argument_list|)
decl_stmt|;
if|if
condition|(
name|previous
operator|==
literal|null
operator|||
name|previous
operator|.
name|isDescendantOf
argument_list|(
name|type
argument_list|)
condition|)
block|{
name|globs
operator|.
name|put
argument_list|(
name|glob
argument_list|,
name|type
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|previous
operator|==
name|type
operator|||
name|type
operator|.
name|isDescendantOf
argument_list|(
name|previous
argument_list|)
condition|)
block|{
comment|// do nothing
block|}
else|else
block|{
throw|throw
operator|new
name|MimeTypeException
argument_list|(
literal|"Conflicting glob pattern: "
operator|+
name|glob
argument_list|)
throw|;
block|}
block|}
comment|/**      * Find the MimeType corresponding to a resource name.      *       * It applies the recommendations detailed in FreeDesktop Shared MIME-info      * Database for guessing MimeType from a resource name: It first tries a      * case-sensitive match, then try again with the resource name converted to      * lower-case if that fails. If several patterns match then the longest      * pattern is used. In particular, files with multiple extensions (such as      * Data.tar.gz) match the longest sequence of extensions (eg '*.tar.gz' in      * preference to '*.gz'). Literal patterns (eg, 'Makefile') are matched      * before all others. Patterns beginning with `*.' and containing no other      * special characters (`*?[') are matched before other wildcarded patterns      * (since this covers the majority of the patterns).      */
specifier|public
name|MimeType
name|matches
parameter_list|(
name|String
name|name
parameter_list|)
block|{
if|if
condition|(
name|name
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Name is missing"
argument_list|)
throw|;
block|}
comment|// First, try exact match of the provided resource name
if|if
condition|(
name|names
operator|.
name|containsKey
argument_list|(
name|name
argument_list|)
condition|)
block|{
return|return
name|names
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
comment|// Then try "extension" (*.xxx) matching
name|int
name|maxLength
init|=
name|Math
operator|.
name|min
argument_list|(
name|maxExtensionLength
argument_list|,
name|name
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|n
init|=
name|maxLength
init|;
name|n
operator|>=
name|minExtensionLength
condition|;
name|n
operator|--
control|)
block|{
name|String
name|extension
init|=
name|name
operator|.
name|substring
argument_list|(
name|name
operator|.
name|length
argument_list|()
operator|-
name|n
argument_list|)
decl_stmt|;
if|if
condition|(
name|extensions
operator|.
name|containsKey
argument_list|(
name|extension
argument_list|)
condition|)
block|{
return|return
name|extensions
operator|.
name|get
argument_list|(
name|extension
argument_list|)
return|;
block|}
block|}
comment|// And finally, try complex regexp matching
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|MimeType
argument_list|>
name|entry
range|:
name|globs
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|name
operator|.
name|matches
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|entry
operator|.
name|getValue
argument_list|()
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|private
name|String
name|compile
parameter_list|(
name|String
name|glob
parameter_list|)
block|{
name|StringBuilder
name|pattern
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|pattern
operator|.
name|append
argument_list|(
literal|"\\A"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|glob
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|char
name|ch
init|=
name|glob
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|ch
operator|==
literal|'?'
condition|)
block|{
name|pattern
operator|.
name|append
argument_list|(
literal|'.'
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ch
operator|==
literal|'*'
condition|)
block|{
name|pattern
operator|.
name|append
argument_list|(
literal|".*"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"\\[]^.-$+(){}|"
operator|.
name|indexOf
argument_list|(
name|ch
argument_list|)
operator|!=
operator|-
literal|1
condition|)
block|{
name|pattern
operator|.
name|append
argument_list|(
literal|'\\'
argument_list|)
expr_stmt|;
name|pattern
operator|.
name|append
argument_list|(
name|ch
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|pattern
operator|.
name|append
argument_list|(
name|ch
argument_list|)
expr_stmt|;
block|}
block|}
name|pattern
operator|.
name|append
argument_list|(
literal|"\\z"
argument_list|)
expr_stmt|;
return|return
name|pattern
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

