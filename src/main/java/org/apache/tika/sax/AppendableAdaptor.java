begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|sax
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|IOExceptionWithCause
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|ContentHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_comment
comment|/**  * Adaptor which turns a {@link ContentHandler} into an {@link Appendable}.  *  * @see ContentHandler  * @version $Revision$  */
end_comment

begin_class
specifier|public
class|class
name|AppendableAdaptor
implements|implements
name|Appendable
block|{
comment|/**      * Decorated SAX event handler.      */
specifier|private
specifier|final
name|ContentHandler
name|handler
decl_stmt|;
comment|/**      * Creates a adaptor for the given SAX event handler.      *      * @param handler SAX event handler to be decorated, throws      * {@link IllegalArgumentException} if null.      */
specifier|public
name|AppendableAdaptor
parameter_list|(
name|ContentHandler
name|handler
parameter_list|)
block|{
if|if
condition|(
name|handler
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Content Handler is missing"
argument_list|)
throw|;
block|}
name|this
operator|.
name|handler
operator|=
name|handler
expr_stmt|;
block|}
comment|/**      * Return the content handler.      *      * @return The content handler      */
specifier|public
name|ContentHandler
name|getHandler
parameter_list|()
block|{
return|return
name|handler
return|;
block|}
comment|/**      * Write a single character to the underling content handler.      *      * @param c The character to write      * @return This appendabale instance      * @throws IOException if an error occurs writing to the content handler      */
specifier|public
name|Appendable
name|append
parameter_list|(
name|char
name|c
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|append
argument_list|(
name|Character
operator|.
name|toString
argument_list|(
name|c
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Write a character sequence to the underling content handler.      *      * @param charSeq The sequence of characters, ignored if null      * @return This appendabale instance      * @throws IOException if an error occurs writing to the content handler      */
specifier|public
name|Appendable
name|append
parameter_list|(
name|CharSequence
name|charSeq
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|charSeq
operator|!=
literal|null
condition|)
block|{
name|append
argument_list|(
name|charSeq
argument_list|,
literal|0
argument_list|,
name|charSeq
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
comment|/**      * Write the specified characters to the underling content handler.      *      * @param charSeq The sequence of characters, ignored if null      * @param start The starting index of the characters to write      * @param end The index of the last character +1 to write      * @return This appendabale instance      * @throws IOException if a {@link SAXException} occurs writing to the      *  content handler      */
specifier|public
name|Appendable
name|append
parameter_list|(
name|CharSequence
name|charSeq
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|end
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|charSeq
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|char
index|[]
name|chars
init|=
name|charSeq
operator|.
name|toString
argument_list|()
operator|.
name|toCharArray
argument_list|()
decl_stmt|;
name|handler
operator|.
name|characters
argument_list|(
name|chars
argument_list|,
name|start
argument_list|,
operator|(
name|end
operator|-
name|start
operator|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SAXException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOExceptionWithCause
argument_list|(
literal|"Error processing character content: "
operator|+
name|charSeq
operator|.
name|subSequence
argument_list|(
name|start
argument_list|,
name|end
argument_list|)
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
return|return
name|this
return|;
block|}
block|}
end_class

end_unit

