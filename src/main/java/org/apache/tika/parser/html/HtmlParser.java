begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|html
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|config
operator|.
name|Content
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|exception
operator|.
name|TikaException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|Parser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|NodeList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|tidy
operator|.
name|Tidy
import|;
end_import

begin_comment
comment|/**  * Html parser  *   */
end_comment

begin_class
specifier|public
class|class
name|HtmlParser
implements|implements
name|Parser
block|{
specifier|static
name|Logger
name|logger
init|=
name|Logger
operator|.
name|getRootLogger
argument_list|()
decl_stmt|;
specifier|public
name|String
name|parse
parameter_list|(
name|InputStream
name|stream
parameter_list|,
name|Iterable
argument_list|<
name|Content
argument_list|>
name|contents
parameter_list|)
throws|throws
name|IOException
throws|,
name|TikaException
block|{
name|Tidy
name|tidy
init|=
operator|new
name|Tidy
argument_list|()
decl_stmt|;
name|tidy
operator|.
name|setQuiet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|tidy
operator|.
name|setShowWarnings
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|Node
name|root
init|=
name|tidy
operator|.
name|parseDOM
argument_list|(
name|stream
argument_list|,
literal|null
argument_list|)
operator|.
name|getDocumentElement
argument_list|()
decl_stmt|;
for|for
control|(
name|Content
name|content
range|:
name|contents
control|)
block|{
name|String
name|text
init|=
name|content
operator|.
name|getTextSelect
argument_list|()
decl_stmt|;
if|if
condition|(
name|text
operator|!=
literal|null
operator|&&
operator|!
name|text
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"fulltext"
argument_list|)
operator|&&
operator|!
name|text
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"summary"
argument_list|)
condition|)
block|{
name|extractElementTxt
argument_list|(
operator|(
name|Element
operator|)
name|root
argument_list|,
name|content
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|getTextContent
argument_list|(
name|root
argument_list|)
return|;
block|}
specifier|private
name|void
name|extractElementTxt
parameter_list|(
name|Element
name|root
parameter_list|,
name|Content
name|content
parameter_list|)
block|{
name|NodeList
name|children
init|=
name|root
operator|.
name|getElementsByTagName
argument_list|(
name|content
operator|.
name|getTextSelect
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|children
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|children
operator|.
name|getLength
argument_list|()
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|children
operator|.
name|getLength
argument_list|()
operator|==
literal|1
condition|)
block|{
name|Element
name|node
init|=
operator|(
name|Element
operator|)
name|children
operator|.
name|item
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Text
name|txt
init|=
operator|(
name|Text
operator|)
name|node
operator|.
name|getFirstChild
argument_list|()
decl_stmt|;
if|if
condition|(
name|txt
operator|!=
literal|null
condition|)
block|{
name|content
operator|.
name|setValue
argument_list|(
name|txt
operator|.
name|getData
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|String
index|[]
name|values
init|=
operator|new
name|String
index|[
literal|100
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|children
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Element
name|node
init|=
operator|(
name|Element
operator|)
name|children
operator|.
name|item
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|Text
name|txt
init|=
operator|(
name|Text
operator|)
name|node
operator|.
name|getFirstChild
argument_list|()
decl_stmt|;
if|if
condition|(
name|txt
operator|!=
literal|null
condition|)
block|{
name|values
index|[
name|i
index|]
operator|=
name|txt
operator|.
name|getData
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|values
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|content
operator|.
name|setValue
argument_list|(
name|values
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|content
operator|.
name|setValues
argument_list|(
name|values
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
specifier|private
name|String
name|getTextContent
parameter_list|(
name|Node
name|node
parameter_list|)
block|{
name|NodeList
name|children
init|=
name|node
operator|.
name|getChildNodes
argument_list|()
decl_stmt|;
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|children
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Node
name|child
init|=
name|children
operator|.
name|item
argument_list|(
name|i
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|child
operator|.
name|getNodeType
argument_list|()
condition|)
block|{
case|case
name|Node
operator|.
name|ELEMENT_NODE
case|:
name|sb
operator|.
name|append
argument_list|(
name|getTextContent
argument_list|(
name|child
argument_list|)
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
break|break;
case|case
name|Node
operator|.
name|TEXT_NODE
case|:
name|sb
operator|.
name|append
argument_list|(
operator|(
operator|(
name|Text
operator|)
name|child
operator|)
operator|.
name|getData
argument_list|()
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

