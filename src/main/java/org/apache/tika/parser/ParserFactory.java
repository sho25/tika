begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|config
operator|.
name|LiusConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|config
operator|.
name|ParserConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|exception
operator|.
name|LiusException
import|;
end_import

begin_comment
comment|/**  * Factory class. Build parser from xml config file.  *   * @author Rida Benjelloun (ridabenjelloun@apache.org)  */
end_comment

begin_class
specifier|public
class|class
name|ParserFactory
block|{
specifier|static
name|Logger
name|logger
init|=
name|Logger
operator|.
name|getRootLogger
argument_list|()
decl_stmt|;
specifier|public
specifier|static
name|Parser
name|getParser
parameter_list|(
name|InputStream
name|inputStream
parameter_list|,
name|String
name|mimeType
parameter_list|,
name|LiusConfig
name|tc
parameter_list|)
throws|throws
name|LiusException
block|{
comment|// Verify that all passed parameters are (probably) valid.
if|if
condition|(
name|StringUtils
operator|.
name|isBlank
argument_list|(
name|mimeType
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|LiusException
argument_list|(
literal|"Mime type not specified."
argument_list|)
throw|;
block|}
if|if
condition|(
name|inputStream
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|LiusException
argument_list|(
literal|"Input stream is null."
argument_list|)
throw|;
block|}
if|if
condition|(
name|tc
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|LiusException
argument_list|(
literal|"Configuration object is null."
argument_list|)
throw|;
block|}
name|ParserConfig
name|pc
init|=
name|getParserConfig
argument_list|(
name|mimeType
argument_list|,
name|tc
argument_list|)
decl_stmt|;
if|if
condition|(
name|pc
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|LiusException
argument_list|(
literal|"Could not find parser config for mime type "
operator|+
name|mimeType
operator|+
literal|"."
argument_list|)
throw|;
block|}
name|String
name|className
init|=
name|pc
operator|.
name|getParserClass
argument_list|()
decl_stmt|;
name|Parser
name|parser
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|StringUtils
operator|.
name|isBlank
argument_list|(
name|className
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|LiusException
argument_list|(
literal|"Parser class name missing from ParserConfig."
argument_list|)
throw|;
block|}
try|try
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"Loading parser class = "
operator|+
name|className
operator|+
literal|" MimeType = "
operator|+
name|mimeType
argument_list|)
expr_stmt|;
name|Class
argument_list|<
name|?
argument_list|>
name|parserClass
init|=
name|Class
operator|.
name|forName
argument_list|(
name|className
argument_list|)
decl_stmt|;
name|parser
operator|=
operator|(
name|Parser
operator|)
name|parserClass
operator|.
name|newInstance
argument_list|()
expr_stmt|;
name|parser
operator|.
name|setMimeType
argument_list|(
name|mimeType
argument_list|)
expr_stmt|;
name|parser
operator|.
name|setContents
argument_list|(
name|pc
operator|.
name|getContents
argument_list|()
argument_list|)
expr_stmt|;
name|parser
operator|.
name|setInputStream
argument_list|(
name|inputStream
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
name|logger
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|LiusException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|InstantiationException
name|e
parameter_list|)
block|{
name|logger
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|LiusException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IllegalAccessException
name|e
parameter_list|)
block|{
name|logger
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|LiusException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
return|return
name|parser
return|;
block|}
specifier|private
specifier|static
name|ParserConfig
name|getParserConfig
parameter_list|(
name|String
name|mimeType
parameter_list|,
name|LiusConfig
name|tc
parameter_list|)
throws|throws
name|LiusException
block|{
name|ParserConfig
name|pc
init|=
name|tc
operator|.
name|getParserConfig
argument_list|(
name|mimeType
argument_list|)
decl_stmt|;
if|if
condition|(
name|pc
operator|==
literal|null
condition|)
block|{
name|String
name|message
init|=
literal|"Could not find parser configuration for mime type "
operator|+
name|mimeType
operator|+
literal|"."
decl_stmt|;
name|logger
operator|.
name|error
argument_list|(
name|message
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|LiusException
argument_list|(
name|message
argument_list|)
throw|;
block|}
return|return
name|pc
return|;
block|}
block|}
end_class

end_unit

