begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|mp3
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_comment
comment|/**  *<p>  * This class parses and represents a ID3v1 Tag. Implemented based on http://www.id3.org/ID3v1.  *</p>  */
end_comment

begin_class
specifier|public
class|class
name|ID3v1Tag
block|{
comment|/**      * Static Map of genre codes.      */
specifier|private
specifier|static
name|Map
name|genres
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
static|static
block|{
name|genres
operator|.
name|put
argument_list|(
literal|0
argument_list|,
literal|"Blues"
argument_list|)
expr_stmt|;
name|genres
operator|.
name|put
argument_list|(
literal|1
argument_list|,
literal|"Classic Rock"
argument_list|)
expr_stmt|;
name|genres
operator|.
name|put
argument_list|(
literal|2
argument_list|,
literal|"Country"
argument_list|)
expr_stmt|;
name|genres
operator|.
name|put
argument_list|(
literal|3
argument_list|,
literal|"Dance"
argument_list|)
expr_stmt|;
name|genres
operator|.
name|put
argument_list|(
literal|4
argument_list|,
literal|"Disco"
argument_list|)
expr_stmt|;
name|genres
operator|.
name|put
argument_list|(
literal|5
argument_list|,
literal|"Funk"
argument_list|)
expr_stmt|;
name|genres
operator|.
name|put
argument_list|(
literal|6
argument_list|,
literal|"Grunge"
argument_list|)
expr_stmt|;
name|genres
operator|.
name|put
argument_list|(
literal|7
argument_list|,
literal|"Hip-Hop"
argument_list|)
expr_stmt|;
name|genres
operator|.
name|put
argument_list|(
literal|8
argument_list|,
literal|"Jazz"
argument_list|)
expr_stmt|;
name|genres
operator|.
name|put
argument_list|(
literal|9
argument_list|,
literal|"Metal"
argument_list|)
expr_stmt|;
name|genres
operator|.
name|put
argument_list|(
literal|10
argument_list|,
literal|"New Age"
argument_list|)
expr_stmt|;
name|genres
operator|.
name|put
argument_list|(
literal|11
argument_list|,
literal|"Oldies"
argument_list|)
expr_stmt|;
name|genres
operator|.
name|put
argument_list|(
literal|12
argument_list|,
literal|"Other"
argument_list|)
expr_stmt|;
name|genres
operator|.
name|put
argument_list|(
literal|13
argument_list|,
literal|"Pop"
argument_list|)
expr_stmt|;
name|genres
operator|.
name|put
argument_list|(
literal|14
argument_list|,
literal|"R&B"
argument_list|)
expr_stmt|;
name|genres
operator|.
name|put
argument_list|(
literal|15
argument_list|,
literal|"Rap"
argument_list|)
expr_stmt|;
name|genres
operator|.
name|put
argument_list|(
literal|16
argument_list|,
literal|"Reggae"
argument_list|)
expr_stmt|;
name|genres
operator|.
name|put
argument_list|(
literal|17
argument_list|,
literal|"Rock"
argument_list|)
expr_stmt|;
name|genres
operator|.
name|put
argument_list|(
literal|18
argument_list|,
literal|"Techno"
argument_list|)
expr_stmt|;
name|genres
operator|.
name|put
argument_list|(
literal|19
argument_list|,
literal|"Industrial"
argument_list|)
expr_stmt|;
name|genres
operator|.
name|put
argument_list|(
literal|20
argument_list|,
literal|"Alternative"
argument_list|)
expr_stmt|;
name|genres
operator|.
name|put
argument_list|(
literal|21
argument_list|,
literal|"Ska"
argument_list|)
expr_stmt|;
name|genres
operator|.
name|put
argument_list|(
literal|22
argument_list|,
literal|"Death Metal"
argument_list|)
expr_stmt|;
name|genres
operator|.
name|put
argument_list|(
literal|23
argument_list|,
literal|"Pranks"
argument_list|)
expr_stmt|;
name|genres
operator|.
name|put
argument_list|(
literal|24
argument_list|,
literal|"Soundtrack"
argument_list|)
expr_stmt|;
name|genres
operator|.
name|put
argument_list|(
literal|25
argument_list|,
literal|"Euro-Techno"
argument_list|)
expr_stmt|;
name|genres
operator|.
name|put
argument_list|(
literal|26
argument_list|,
literal|"Ambient"
argument_list|)
expr_stmt|;
name|genres
operator|.
name|put
argument_list|(
literal|27
argument_list|,
literal|"Trip-Hop"
argument_list|)
expr_stmt|;
name|genres
operator|.
name|put
argument_list|(
literal|28
argument_list|,
literal|"Vocal"
argument_list|)
expr_stmt|;
name|genres
operator|.
name|put
argument_list|(
literal|29
argument_list|,
literal|"Jazz+Funk"
argument_list|)
expr_stmt|;
name|genres
operator|.
name|put
argument_list|(
literal|30
argument_list|,
literal|"Fusion"
argument_list|)
expr_stmt|;
name|genres
operator|.
name|put
argument_list|(
literal|31
argument_list|,
literal|"Trance"
argument_list|)
expr_stmt|;
name|genres
operator|.
name|put
argument_list|(
literal|32
argument_list|,
literal|"Classical"
argument_list|)
expr_stmt|;
name|genres
operator|.
name|put
argument_list|(
literal|33
argument_list|,
literal|"Instrumental"
argument_list|)
expr_stmt|;
name|genres
operator|.
name|put
argument_list|(
literal|34
argument_list|,
literal|"Acid"
argument_list|)
expr_stmt|;
name|genres
operator|.
name|put
argument_list|(
literal|35
argument_list|,
literal|"House"
argument_list|)
expr_stmt|;
name|genres
operator|.
name|put
argument_list|(
literal|36
argument_list|,
literal|"Game"
argument_list|)
expr_stmt|;
name|genres
operator|.
name|put
argument_list|(
literal|37
argument_list|,
literal|"Sound Clip"
argument_list|)
expr_stmt|;
name|genres
operator|.
name|put
argument_list|(
literal|38
argument_list|,
literal|"Gospel"
argument_list|)
expr_stmt|;
name|genres
operator|.
name|put
argument_list|(
literal|39
argument_list|,
literal|"Noise"
argument_list|)
expr_stmt|;
name|genres
operator|.
name|put
argument_list|(
literal|40
argument_list|,
literal|"AlternRock"
argument_list|)
expr_stmt|;
name|genres
operator|.
name|put
argument_list|(
literal|41
argument_list|,
literal|"Bass"
argument_list|)
expr_stmt|;
name|genres
operator|.
name|put
argument_list|(
literal|42
argument_list|,
literal|"Soul"
argument_list|)
expr_stmt|;
name|genres
operator|.
name|put
argument_list|(
literal|43
argument_list|,
literal|"Punk"
argument_list|)
expr_stmt|;
name|genres
operator|.
name|put
argument_list|(
literal|44
argument_list|,
literal|"Space"
argument_list|)
expr_stmt|;
name|genres
operator|.
name|put
argument_list|(
literal|45
argument_list|,
literal|"Meditative"
argument_list|)
expr_stmt|;
name|genres
operator|.
name|put
argument_list|(
literal|46
argument_list|,
literal|"Instrumental Pop"
argument_list|)
expr_stmt|;
name|genres
operator|.
name|put
argument_list|(
literal|47
argument_list|,
literal|"Instrumental Rock"
argument_list|)
expr_stmt|;
name|genres
operator|.
name|put
argument_list|(
literal|48
argument_list|,
literal|"Ethnic"
argument_list|)
expr_stmt|;
name|genres
operator|.
name|put
argument_list|(
literal|49
argument_list|,
literal|"Gothic"
argument_list|)
expr_stmt|;
name|genres
operator|.
name|put
argument_list|(
literal|50
argument_list|,
literal|"Darkwave"
argument_list|)
expr_stmt|;
name|genres
operator|.
name|put
argument_list|(
literal|51
argument_list|,
literal|"Techno-Industrial"
argument_list|)
expr_stmt|;
name|genres
operator|.
name|put
argument_list|(
literal|52
argument_list|,
literal|"Electronic"
argument_list|)
expr_stmt|;
name|genres
operator|.
name|put
argument_list|(
literal|53
argument_list|,
literal|"Pop-Folk"
argument_list|)
expr_stmt|;
name|genres
operator|.
name|put
argument_list|(
literal|54
argument_list|,
literal|"Eurodance"
argument_list|)
expr_stmt|;
name|genres
operator|.
name|put
argument_list|(
literal|55
argument_list|,
literal|"Dream"
argument_list|)
expr_stmt|;
name|genres
operator|.
name|put
argument_list|(
literal|56
argument_list|,
literal|"Southern Rock"
argument_list|)
expr_stmt|;
name|genres
operator|.
name|put
argument_list|(
literal|57
argument_list|,
literal|"Comedy"
argument_list|)
expr_stmt|;
name|genres
operator|.
name|put
argument_list|(
literal|58
argument_list|,
literal|"Cult"
argument_list|)
expr_stmt|;
name|genres
operator|.
name|put
argument_list|(
literal|59
argument_list|,
literal|"Gangsta"
argument_list|)
expr_stmt|;
name|genres
operator|.
name|put
argument_list|(
literal|60
argument_list|,
literal|"Top 40"
argument_list|)
expr_stmt|;
name|genres
operator|.
name|put
argument_list|(
literal|61
argument_list|,
literal|"Christian Rap"
argument_list|)
expr_stmt|;
name|genres
operator|.
name|put
argument_list|(
literal|62
argument_list|,
literal|"Pop/Funk"
argument_list|)
expr_stmt|;
name|genres
operator|.
name|put
argument_list|(
literal|63
argument_list|,
literal|"Jungle"
argument_list|)
expr_stmt|;
name|genres
operator|.
name|put
argument_list|(
literal|64
argument_list|,
literal|"Native American"
argument_list|)
expr_stmt|;
name|genres
operator|.
name|put
argument_list|(
literal|65
argument_list|,
literal|"Cabaret"
argument_list|)
expr_stmt|;
name|genres
operator|.
name|put
argument_list|(
literal|66
argument_list|,
literal|"New Wave"
argument_list|)
expr_stmt|;
name|genres
operator|.
name|put
argument_list|(
literal|67
argument_list|,
literal|"Psychadelic"
argument_list|)
expr_stmt|;
name|genres
operator|.
name|put
argument_list|(
literal|68
argument_list|,
literal|"Rave"
argument_list|)
expr_stmt|;
name|genres
operator|.
name|put
argument_list|(
literal|69
argument_list|,
literal|"Showtunes"
argument_list|)
expr_stmt|;
name|genres
operator|.
name|put
argument_list|(
literal|70
argument_list|,
literal|"Trailer"
argument_list|)
expr_stmt|;
name|genres
operator|.
name|put
argument_list|(
literal|71
argument_list|,
literal|"Lo-Fi"
argument_list|)
expr_stmt|;
name|genres
operator|.
name|put
argument_list|(
literal|72
argument_list|,
literal|"Tribal"
argument_list|)
expr_stmt|;
name|genres
operator|.
name|put
argument_list|(
literal|73
argument_list|,
literal|"Acid Punk"
argument_list|)
expr_stmt|;
name|genres
operator|.
name|put
argument_list|(
literal|74
argument_list|,
literal|"Acid Jazz"
argument_list|)
expr_stmt|;
name|genres
operator|.
name|put
argument_list|(
literal|75
argument_list|,
literal|"Polka"
argument_list|)
expr_stmt|;
name|genres
operator|.
name|put
argument_list|(
literal|76
argument_list|,
literal|"Retro"
argument_list|)
expr_stmt|;
name|genres
operator|.
name|put
argument_list|(
literal|77
argument_list|,
literal|"Musical"
argument_list|)
expr_stmt|;
name|genres
operator|.
name|put
argument_list|(
literal|78
argument_list|,
literal|"Rock& Roll"
argument_list|)
expr_stmt|;
name|genres
operator|.
name|put
argument_list|(
literal|79
argument_list|,
literal|"Hard Rock"
argument_list|)
expr_stmt|;
block|}
specifier|private
name|String
name|title
decl_stmt|;
specifier|private
name|String
name|artist
decl_stmt|;
specifier|private
name|String
name|album
decl_stmt|;
specifier|private
name|String
name|year
decl_stmt|;
specifier|private
name|String
name|comment
decl_stmt|;
specifier|private
name|int
name|genre
decl_stmt|;
comment|/**      * Default Private Contructor.      *      * @param title   the title.      * @param artist  the artist.      * @param album   the album.      * @param year    the year.      * @param comment the comment.      * @param genre   the genre code.      */
specifier|private
name|ID3v1Tag
parameter_list|(
name|String
name|title
parameter_list|,
name|String
name|artist
parameter_list|,
name|String
name|album
parameter_list|,
name|String
name|year
parameter_list|,
name|String
name|comment
parameter_list|,
name|int
name|genre
parameter_list|)
block|{
name|this
operator|.
name|title
operator|=
name|title
expr_stmt|;
name|this
operator|.
name|artist
operator|=
name|artist
expr_stmt|;
name|this
operator|.
name|album
operator|=
name|album
expr_stmt|;
name|this
operator|.
name|year
operator|=
name|year
expr_stmt|;
name|this
operator|.
name|comment
operator|=
name|comment
expr_stmt|;
name|this
operator|.
name|genre
operator|=
name|genre
expr_stmt|;
block|}
specifier|public
name|String
name|getTitle
parameter_list|()
block|{
return|return
name|title
return|;
block|}
specifier|public
name|String
name|getArtist
parameter_list|()
block|{
return|return
name|artist
return|;
block|}
specifier|public
name|String
name|getAlbum
parameter_list|()
block|{
return|return
name|album
return|;
block|}
specifier|public
name|String
name|getYear
parameter_list|()
block|{
return|return
name|year
return|;
block|}
specifier|public
name|String
name|getComment
parameter_list|()
block|{
return|return
name|comment
return|;
block|}
specifier|public
name|int
name|getGenre
parameter_list|()
block|{
return|return
name|genre
return|;
block|}
specifier|public
name|String
name|getGenreAsString
parameter_list|()
block|{
return|return
operator|(
name|String
operator|)
name|genres
operator|.
name|get
argument_list|(
name|genre
argument_list|)
return|;
block|}
comment|/**      * Create an<code>ID3v1Tag</code> from an<code>InputStream</code>.      *      * @param stream the<code>InputStream</code> to parse.      * @return a<code>ID3v1Tag</code> if ID3 v1 information is available, null otherwise.      */
specifier|public
specifier|static
name|ID3v1Tag
name|createID3v1Tag
parameter_list|(
name|InputStream
name|stream
parameter_list|)
block|{
name|byte
index|[]
name|buffer
decl_stmt|;
try|try
block|{
name|buffer
operator|=
name|getSuffix
argument_list|(
name|stream
argument_list|,
literal|128
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
comment|// We have read what we think is the tag, first check and if ok extract values
name|String
name|tag
init|=
operator|new
name|String
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
literal|128
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|StringUtils
operator|.
name|equals
argument_list|(
name|StringUtils
operator|.
name|substring
argument_list|(
name|tag
argument_list|,
literal|0
argument_list|,
literal|3
argument_list|)
argument_list|,
literal|"TAG"
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
name|String
name|title
init|=
name|StringUtils
operator|.
name|substring
argument_list|(
name|tag
argument_list|,
literal|3
argument_list|,
literal|33
argument_list|)
operator|.
name|trim
argument_list|()
decl_stmt|;
name|String
name|artist
init|=
name|StringUtils
operator|.
name|substring
argument_list|(
name|tag
argument_list|,
literal|33
argument_list|,
literal|63
argument_list|)
operator|.
name|trim
argument_list|()
decl_stmt|;
name|String
name|album
init|=
name|StringUtils
operator|.
name|substring
argument_list|(
name|tag
argument_list|,
literal|63
argument_list|,
literal|93
argument_list|)
operator|.
name|trim
argument_list|()
decl_stmt|;
name|String
name|year
init|=
name|StringUtils
operator|.
name|substring
argument_list|(
name|tag
argument_list|,
literal|93
argument_list|,
literal|97
argument_list|)
operator|.
name|trim
argument_list|()
decl_stmt|;
name|String
name|comment
init|=
name|StringUtils
operator|.
name|substring
argument_list|(
name|tag
argument_list|,
literal|97
argument_list|,
literal|127
argument_list|)
operator|.
name|trim
argument_list|()
decl_stmt|;
name|int
name|genre
init|=
operator|new
name|Byte
argument_list|(
operator|(
name|byte
operator|)
name|tag
operator|.
name|charAt
argument_list|(
literal|127
argument_list|)
argument_list|)
operator|.
name|intValue
argument_list|()
decl_stmt|;
comment|// Return new ID3v1Tag instance.
return|return
operator|new
name|ID3v1Tag
argument_list|(
name|title
argument_list|,
name|artist
argument_list|,
name|album
argument_list|,
name|year
argument_list|,
name|comment
argument_list|,
name|genre
argument_list|)
return|;
block|}
comment|/**      * Reads and returns the last<code>length</code> bytes from the      * given stream.      * @param stream input stream      * @param length number of bytes from the end to read and return      * @return stream the<code>InputStream</code> to read from.      * @throws IOException if the stream could not be read from.      */
specifier|private
specifier|static
name|byte
index|[]
name|getSuffix
parameter_list|(
name|InputStream
name|stream
parameter_list|,
name|int
name|length
parameter_list|)
throws|throws
name|IOException
block|{
name|byte
index|[]
name|buffer
init|=
operator|new
name|byte
index|[
literal|2
operator|*
name|length
index|]
decl_stmt|;
name|int
name|bytesInBuffer
init|=
literal|0
decl_stmt|;
name|int
name|n
init|=
name|stream
operator|.
name|read
argument_list|(
name|buffer
argument_list|)
decl_stmt|;
while|while
condition|(
name|n
operator|!=
operator|-
literal|1
condition|)
block|{
name|bytesInBuffer
operator|+=
name|n
expr_stmt|;
if|if
condition|(
name|bytesInBuffer
operator|==
name|buffer
operator|.
name|length
condition|)
block|{
name|System
operator|.
name|arraycopy
argument_list|(
name|buffer
argument_list|,
name|bytesInBuffer
operator|-
name|length
argument_list|,
name|buffer
argument_list|,
literal|0
argument_list|,
name|length
argument_list|)
expr_stmt|;
name|bytesInBuffer
operator|=
name|length
expr_stmt|;
block|}
name|n
operator|=
name|stream
operator|.
name|read
argument_list|(
name|buffer
argument_list|,
name|bytesInBuffer
argument_list|,
name|buffer
operator|.
name|length
operator|-
name|bytesInBuffer
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|bytesInBuffer
operator|<
name|length
condition|)
block|{
name|length
operator|=
name|bytesInBuffer
expr_stmt|;
block|}
name|byte
index|[]
name|result
init|=
operator|new
name|byte
index|[
name|length
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|buffer
argument_list|,
name|bytesInBuffer
operator|-
name|length
argument_list|,
name|result
argument_list|,
literal|0
argument_list|,
name|length
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
block|}
end_class

end_unit

