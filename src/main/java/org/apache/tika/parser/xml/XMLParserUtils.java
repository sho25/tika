begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|xml
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|exception
operator|.
name|TikaException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|metadata
operator|.
name|Metadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|Parser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|sax
operator|.
name|AppendableAdaptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|sax
operator|.
name|XHTMLContentHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|utils
operator|.
name|Utils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jaxen
operator|.
name|JaxenException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jaxen
operator|.
name|SimpleNamespaceContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jaxen
operator|.
name|jdom
operator|.
name|JDOMXPath
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jdom
operator|.
name|Attribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jdom
operator|.
name|Comment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jdom
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jdom
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jdom
operator|.
name|EntityRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jdom
operator|.
name|Namespace
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jdom
operator|.
name|ProcessingInstruction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jdom
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|ContentHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_comment
comment|/**  * XML parser utils  */
end_comment

begin_class
specifier|public
class|class
name|XMLParserUtils
block|{
specifier|static
name|Logger
name|logger
init|=
name|Logger
operator|.
name|getRootLogger
argument_list|()
decl_stmt|;
specifier|private
name|SimpleNamespaceContext
name|nsContext
decl_stmt|;
specifier|public
name|void
name|concatOccurrence
parameter_list|(
name|Object
name|xmlDoc
parameter_list|,
name|String
name|xpath
parameter_list|,
name|String
name|concatSep
parameter_list|,
name|Appendable
name|chaineConcat
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|JDOMXPath
name|xp
init|=
operator|new
name|JDOMXPath
argument_list|(
name|xpath
argument_list|)
decl_stmt|;
if|if
condition|(
name|nsContext
operator|!=
literal|null
condition|)
block|{
name|xp
operator|.
name|setNamespaceContext
argument_list|(
name|nsContext
argument_list|)
expr_stmt|;
block|}
name|List
name|ls
init|=
name|xp
operator|.
name|selectNodes
argument_list|(
name|xmlDoc
argument_list|)
decl_stmt|;
name|Iterator
name|i
init|=
name|ls
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|int
name|j
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|i
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|j
operator|++
expr_stmt|;
name|String
name|text
init|=
literal|""
decl_stmt|;
name|Object
name|obj
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|obj
operator|instanceof
name|Element
condition|)
block|{
name|Element
name|elem
init|=
operator|(
name|Element
operator|)
name|obj
decl_stmt|;
name|text
operator|=
name|elem
operator|.
name|getText
argument_list|()
operator|.
name|trim
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|obj
operator|instanceof
name|Attribute
condition|)
block|{
name|Attribute
name|att
init|=
operator|(
name|Attribute
operator|)
name|obj
decl_stmt|;
name|text
operator|=
name|att
operator|.
name|getValue
argument_list|()
operator|.
name|trim
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|obj
operator|instanceof
name|Text
condition|)
block|{
name|Text
name|txt
init|=
operator|(
name|Text
operator|)
name|obj
decl_stmt|;
name|text
operator|=
name|txt
operator|.
name|getText
argument_list|()
operator|.
name|trim
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|obj
operator|instanceof
name|Comment
condition|)
block|{
name|Comment
name|com
init|=
operator|(
name|Comment
operator|)
name|obj
decl_stmt|;
name|text
operator|=
name|com
operator|.
name|getText
argument_list|()
operator|.
name|trim
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|obj
operator|instanceof
name|ProcessingInstruction
condition|)
block|{
name|ProcessingInstruction
name|pi
init|=
operator|(
name|ProcessingInstruction
operator|)
name|obj
decl_stmt|;
name|text
operator|=
name|pi
operator|.
name|getData
argument_list|()
operator|.
name|trim
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|obj
operator|instanceof
name|EntityRef
condition|)
block|{
name|EntityRef
name|er
init|=
operator|(
name|EntityRef
operator|)
name|obj
decl_stmt|;
name|text
operator|=
name|er
operator|.
name|toString
argument_list|()
operator|.
name|trim
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|StringUtils
operator|.
name|isNotEmpty
argument_list|(
name|text
argument_list|)
condition|)
block|{
name|chaineConcat
operator|.
name|append
argument_list|(
name|text
argument_list|)
expr_stmt|;
if|if
condition|(
name|ls
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
return|return;
block|}
else|else
block|{
if|if
condition|(
name|ls
operator|.
name|size
argument_list|()
operator|!=
name|j
condition|)
block|{
name|chaineConcat
operator|.
name|append
argument_list|(
literal|' '
argument_list|)
operator|.
name|append
argument_list|(
name|concatSep
argument_list|)
operator|.
name|append
argument_list|(
literal|' '
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|JaxenException
name|j
parameter_list|)
block|{
name|logger
operator|.
name|error
argument_list|(
name|j
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|List
name|getAllDocumentNs
parameter_list|(
name|org
operator|.
name|jdom
operator|.
name|Document
name|doc
parameter_list|)
block|{
name|List
name|ls
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
name|processChildren
argument_list|(
name|doc
operator|.
name|getRootElement
argument_list|()
argument_list|,
name|ls
argument_list|)
expr_stmt|;
return|return
name|ls
return|;
block|}
specifier|private
name|boolean
name|exist
parameter_list|(
name|List
name|nsLs
parameter_list|,
name|String
name|nsUri
parameter_list|)
block|{
if|if
condition|(
name|nsLs
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
literal|false
return|;
for|for
control|(
name|Object
name|nsL
range|:
name|nsLs
control|)
block|{
if|if
condition|(
name|nsL
operator|.
name|equals
argument_list|(
name|nsUri
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
specifier|private
name|void
name|processChildren
parameter_list|(
name|Element
name|elem
parameter_list|,
name|List
name|ns
parameter_list|)
block|{
name|Namespace
name|nsCourent
init|=
name|elem
operator|.
name|getNamespace
argument_list|()
decl_stmt|;
name|String
name|nsUri
init|=
operator|(
name|nsCourent
operator|.
name|getURI
argument_list|()
operator|)
decl_stmt|;
if|if
condition|(
operator|!
name|exist
argument_list|(
name|ns
argument_list|,
name|nsUri
argument_list|)
condition|)
block|{
name|ns
operator|.
name|add
argument_list|(
name|nsUri
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|List
name|additionalNs
init|=
name|elem
operator|.
name|getAdditionalNamespaces
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|additionalNs
operator|.
name|isEmpty
argument_list|()
condition|)
name|copyNsList
argument_list|(
name|additionalNs
argument_list|,
name|ns
argument_list|)
expr_stmt|;
if|if
condition|(
name|elem
operator|.
name|getChildren
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|List
name|elemChildren
init|=
name|elem
operator|.
name|getChildren
argument_list|()
decl_stmt|;
for|for
control|(
name|Object
name|anElemChildren
range|:
name|elemChildren
control|)
block|{
name|processChildren
argument_list|(
operator|(
name|Element
operator|)
name|anElemChildren
argument_list|,
name|ns
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|copyNsList
parameter_list|(
name|List
name|nsElem
parameter_list|,
name|List
name|nsRes
parameter_list|)
block|{
for|for
control|(
name|Object
name|aNsElem
range|:
name|nsElem
control|)
block|{
name|nsRes
operator|.
name|add
argument_list|(
operator|(
operator|(
name|Namespace
operator|)
name|aNsElem
operator|)
operator|.
name|getURI
argument_list|()
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|extractContent
parameter_list|(
name|Document
name|xmlDoc
parameter_list|,
name|String
name|name
parameter_list|,
name|String
name|xpath
parameter_list|,
name|Metadata
name|metadata
parameter_list|)
block|{
try|try
block|{
name|JDOMXPath
name|xp
init|=
operator|new
name|JDOMXPath
argument_list|(
name|xpath
argument_list|)
decl_stmt|;
if|if
condition|(
name|nsContext
operator|!=
literal|null
condition|)
block|{
name|xp
operator|.
name|setNamespaceContext
argument_list|(
name|nsContext
argument_list|)
expr_stmt|;
block|}
name|List
name|selectNodes
init|=
name|xp
operator|.
name|selectNodes
argument_list|(
name|xmlDoc
argument_list|)
decl_stmt|;
name|Iterator
name|nodes
init|=
name|selectNodes
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|nodes
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Object
name|node
init|=
name|nodes
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|node
operator|instanceof
name|Element
condition|)
block|{
name|Element
name|elem
init|=
operator|(
name|Element
operator|)
name|node
decl_stmt|;
if|if
condition|(
name|StringUtils
operator|.
name|isNotBlank
argument_list|(
name|elem
operator|.
name|getText
argument_list|()
argument_list|)
condition|)
block|{
name|metadata
operator|.
name|add
argument_list|(
name|name
argument_list|,
name|elem
operator|.
name|getText
argument_list|()
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|node
operator|instanceof
name|Attribute
condition|)
block|{
name|Attribute
name|att
init|=
operator|(
name|Attribute
operator|)
name|node
decl_stmt|;
name|metadata
operator|.
name|add
argument_list|(
name|name
argument_list|,
name|att
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|node
operator|instanceof
name|Text
condition|)
block|{
name|Text
name|text
init|=
operator|(
name|Text
operator|)
name|node
decl_stmt|;
name|metadata
operator|.
name|add
argument_list|(
name|name
argument_list|,
name|text
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|node
operator|instanceof
name|Comment
condition|)
block|{
name|Comment
name|com
init|=
operator|(
name|Comment
operator|)
name|node
decl_stmt|;
name|metadata
operator|.
name|add
argument_list|(
name|name
argument_list|,
name|com
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|node
operator|instanceof
name|ProcessingInstruction
condition|)
block|{
name|ProcessingInstruction
name|pi
init|=
operator|(
name|ProcessingInstruction
operator|)
name|node
decl_stmt|;
name|metadata
operator|.
name|add
argument_list|(
name|name
argument_list|,
name|pi
operator|.
name|getData
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|node
operator|instanceof
name|EntityRef
condition|)
block|{
name|EntityRef
name|er
init|=
operator|(
name|EntityRef
operator|)
name|node
decl_stmt|;
name|metadata
operator|.
name|add
argument_list|(
name|name
argument_list|,
name|er
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|JaxenException
name|e
parameter_list|)
block|{
name|logger
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setXmlParserNameSpaceContext
parameter_list|(
name|SimpleNamespaceContext
name|nsContext
parameter_list|)
block|{
name|this
operator|.
name|nsContext
operator|=
name|nsContext
expr_stmt|;
block|}
block|}
end_class

end_unit

