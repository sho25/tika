begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|msexcel
package|;
end_package

begin_comment
comment|// JDK imports
end_comment

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|utils
operator|.
name|MSExtractor
import|;
end_import

begin_comment
comment|// Jakarta POI imports
end_comment

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|hssf
operator|.
name|usermodel
operator|.
name|HSSFCell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|hssf
operator|.
name|usermodel
operator|.
name|HSSFRow
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|hssf
operator|.
name|usermodel
operator|.
name|HSSFSheet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|hssf
operator|.
name|usermodel
operator|.
name|HSSFWorkbook
import|;
end_import

begin_comment
comment|/**  * Excel Text and Properties extractor.  *  *  */
end_comment

begin_class
class|class
name|ExcelExtractor
extends|extends
name|MSExtractor
block|{
specifier|public
name|String
name|extractText
parameter_list|(
name|InputStream
name|input
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|resultText
init|=
literal|""
decl_stmt|;
name|HSSFWorkbook
name|wb
init|=
operator|new
name|HSSFWorkbook
argument_list|(
name|input
argument_list|)
decl_stmt|;
if|if
condition|(
name|wb
operator|==
literal|null
condition|)
block|{
return|return
name|resultText
return|;
block|}
name|HSSFSheet
name|sheet
decl_stmt|;
name|HSSFRow
name|row
decl_stmt|;
name|HSSFCell
name|cell
decl_stmt|;
name|int
name|sNum
init|=
literal|0
decl_stmt|;
name|int
name|rNum
init|=
literal|0
decl_stmt|;
name|int
name|cNum
init|=
literal|0
decl_stmt|;
name|sNum
operator|=
name|wb
operator|.
name|getNumberOfSheets
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|sNum
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|(
name|sheet
operator|=
name|wb
operator|.
name|getSheetAt
argument_list|(
name|i
argument_list|)
operator|)
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
name|rNum
operator|=
name|sheet
operator|.
name|getLastRowNum
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<=
name|rNum
condition|;
name|j
operator|++
control|)
block|{
if|if
condition|(
operator|(
name|row
operator|=
name|sheet
operator|.
name|getRow
argument_list|(
name|j
argument_list|)
operator|)
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
name|cNum
operator|=
name|row
operator|.
name|getLastCellNum
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|k
init|=
literal|0
init|;
name|k
operator|<
name|cNum
condition|;
name|k
operator|++
control|)
block|{
if|if
condition|(
operator|(
name|cell
operator|=
name|row
operator|.
name|getCell
argument_list|(
operator|(
name|short
operator|)
name|k
argument_list|)
operator|)
operator|!=
literal|null
condition|)
block|{
comment|/*if(HSSFDateUtil.isCellDateFormatted(cell) == true) {                 resultText += cell.getDateCellValue().toString() + " ";               } else              */
if|if
condition|(
name|cell
operator|.
name|getCellType
argument_list|()
operator|==
name|HSSFCell
operator|.
name|CELL_TYPE_STRING
condition|)
block|{
name|resultText
operator|+=
name|cell
operator|.
name|getStringCellValue
argument_list|()
operator|+
literal|" "
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|cell
operator|.
name|getCellType
argument_list|()
operator|==
name|HSSFCell
operator|.
name|CELL_TYPE_NUMERIC
condition|)
block|{
name|Double
name|d
init|=
operator|new
name|Double
argument_list|(
name|cell
operator|.
name|getNumericCellValue
argument_list|()
argument_list|)
decl_stmt|;
name|resultText
operator|+=
name|d
operator|.
name|toString
argument_list|()
operator|+
literal|" "
expr_stmt|;
block|}
comment|/* else if(cell.getCellType() == HSSFCell.CELL_TYPE_FORMULA){                  resultText += cell.getCellFormula() + " ";                }               */
block|}
block|}
block|}
block|}
return|return
name|resultText
return|;
block|}
block|}
end_class

end_unit

