begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|exception
operator|.
name|TikaException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|metadata
operator|.
name|Metadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|utils
operator|.
name|RegexUtils
import|;
end_import

begin_comment
comment|/**  * Parser decorator that post-processes the results from a decorated parser.  * The post-processing takes care of filling in any "fulltext", "summary", and  * regexp {@link Content} objects with the full text content returned by  * the decorated parser. The post-processing also catches and logs any  * exceptions thrown by the decorated parser.  */
end_comment

begin_class
specifier|public
class|class
name|ParserPostProcessor
extends|extends
name|ParserDecorator
block|{
comment|/**      * Logger instance.      */
specifier|private
specifier|static
specifier|final
name|Logger
name|logger
init|=
name|Logger
operator|.
name|getLogger
argument_list|(
name|ParserPostProcessor
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|LINK_PATTERN
init|=
literal|"([A-Za-z][A-Za-z0-9+.-]{1,120}:"
operator|+
literal|"[A-Za-z0-9/](([A-Za-z0-9$_.+!*,;/?:@&~=-])|%[A-Fa-f0-9]{2}){1,333}"
operator|+
literal|"(#([a-zA-Z0-9][a-zA-Z0-9$_.+!*,;/?:@&~=%-]{0,1000}))?)"
decl_stmt|;
comment|/**      * Creates a post-processing decorator for the given parser.      *      * @param parser the parser to be decorated      */
specifier|public
name|ParserPostProcessor
parameter_list|(
name|Parser
name|parser
parameter_list|)
block|{
name|super
argument_list|(
name|parser
argument_list|)
expr_stmt|;
block|}
comment|/**      * Forwards the call to the delegated parser and post-processes the      * results as described above.      */
specifier|public
name|String
name|parse
parameter_list|(
name|InputStream
name|stream
parameter_list|,
name|Metadata
name|metadata
parameter_list|)
throws|throws
name|IOException
throws|,
name|TikaException
block|{
try|try
block|{
name|String
name|contentStr
init|=
name|super
operator|.
name|parse
argument_list|(
name|stream
argument_list|,
name|metadata
argument_list|)
decl_stmt|;
name|metadata
operator|.
name|set
argument_list|(
literal|"fulltext"
argument_list|,
name|contentStr
argument_list|)
expr_stmt|;
name|int
name|length
init|=
name|Math
operator|.
name|min
argument_list|(
name|contentStr
operator|.
name|length
argument_list|()
argument_list|,
literal|500
argument_list|)
decl_stmt|;
name|String
name|summary
init|=
name|contentStr
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|length
argument_list|)
decl_stmt|;
name|metadata
operator|.
name|set
argument_list|(
literal|"summary"
argument_list|,
name|summary
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|link
range|:
name|RegexUtils
operator|.
name|extract
argument_list|(
name|contentStr
argument_list|,
name|LINK_PATTERN
argument_list|)
control|)
block|{
name|metadata
operator|.
name|add
argument_list|(
literal|"outlinks"
argument_list|,
name|link
argument_list|)
expr_stmt|;
block|}
return|return
name|contentStr
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|logger
operator|.
name|error
argument_list|(
literal|"Parse error: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|""
return|;
block|}
block|}
block|}
end_class

end_unit

