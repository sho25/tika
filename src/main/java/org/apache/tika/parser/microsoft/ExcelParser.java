begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|microsoft
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|hssf
operator|.
name|usermodel
operator|.
name|HSSFCell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|hssf
operator|.
name|usermodel
operator|.
name|HSSFRow
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|hssf
operator|.
name|usermodel
operator|.
name|HSSFSheet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|hssf
operator|.
name|usermodel
operator|.
name|HSSFWorkbook
import|;
end_import

begin_comment
comment|/**  * Excel parser  */
end_comment

begin_class
specifier|public
class|class
name|ExcelParser
extends|extends
name|MSParser
block|{
specifier|protected
name|String
name|extractText
parameter_list|(
name|InputStream
name|input
parameter_list|)
throws|throws
name|Exception
block|{
name|StringBuilder
name|builder
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|extractText
argument_list|(
operator|new
name|HSSFWorkbook
argument_list|(
name|input
argument_list|)
argument_list|,
name|builder
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|private
name|void
name|extractText
parameter_list|(
name|HSSFWorkbook
name|book
parameter_list|,
name|StringBuilder
name|builder
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|book
operator|!=
literal|null
operator|&&
name|i
operator|<
name|book
operator|.
name|getNumberOfSheets
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|extractText
argument_list|(
name|book
operator|.
name|getSheetAt
argument_list|(
name|i
argument_list|)
argument_list|,
name|builder
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|extractText
parameter_list|(
name|HSSFSheet
name|sheet
parameter_list|,
name|StringBuilder
name|builder
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|sheet
operator|!=
literal|null
operator|&&
name|i
operator|<=
name|sheet
operator|.
name|getLastRowNum
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|extractText
argument_list|(
name|sheet
operator|.
name|getRow
argument_list|(
name|i
argument_list|)
argument_list|,
name|builder
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|extractText
parameter_list|(
name|HSSFRow
name|row
parameter_list|,
name|StringBuilder
name|builder
parameter_list|)
block|{
for|for
control|(
name|short
name|i
init|=
literal|0
init|;
name|row
operator|!=
literal|null
operator|&&
name|i
operator|<
name|row
operator|.
name|getLastCellNum
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|extractText
argument_list|(
name|row
operator|.
name|getCell
argument_list|(
name|i
argument_list|)
argument_list|,
name|builder
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|extractText
parameter_list|(
name|HSSFCell
name|cell
parameter_list|,
name|StringBuilder
name|builder
parameter_list|)
block|{
if|if
condition|(
name|cell
operator|!=
literal|null
condition|)
block|{
switch|switch
condition|(
name|cell
operator|.
name|getCellType
argument_list|()
condition|)
block|{
case|case
name|HSSFCell
operator|.
name|CELL_TYPE_STRING
case|:
name|addText
argument_list|(
name|cell
operator|.
name|getRichStringCellValue
argument_list|()
operator|.
name|getString
argument_list|()
argument_list|,
name|builder
argument_list|)
expr_stmt|;
break|break;
case|case
name|HSSFCell
operator|.
name|CELL_TYPE_NUMERIC
case|:
case|case
name|HSSFCell
operator|.
name|CELL_TYPE_FORMULA
case|:
name|addText
argument_list|(
name|Double
operator|.
name|toString
argument_list|(
name|cell
operator|.
name|getNumericCellValue
argument_list|()
argument_list|)
argument_list|,
name|builder
argument_list|)
expr_stmt|;
break|break;
default|default:
comment|// ignore
block|}
block|}
block|}
specifier|private
name|void
name|addText
parameter_list|(
name|String
name|text
parameter_list|,
name|StringBuilder
name|builder
parameter_list|)
block|{
if|if
condition|(
name|text
operator|!=
literal|null
condition|)
block|{
name|text
operator|=
name|text
operator|.
name|trim
argument_list|()
expr_stmt|;
if|if
condition|(
name|text
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|builder
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
literal|' '
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|append
argument_list|(
name|text
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

