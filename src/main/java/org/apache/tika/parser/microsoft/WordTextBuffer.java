begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  Copyright 2004 Ryan Ackley  *  *  Licensed under the Apache License, Version 2.0 (the "License");  *  you may not use this file except in compliance with the License.  *  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|microsoft
package|;
end_package

begin_comment
comment|/**  * This class acts as a StringBuffer for text from a word document. It allows  * processing of character before they  *   */
end_comment

begin_class
specifier|public
class|class
name|WordTextBuffer
block|{
name|StringBuffer
name|_buf
decl_stmt|;
name|boolean
name|_hold
decl_stmt|;
specifier|public
name|WordTextBuffer
parameter_list|()
block|{
name|_buf
operator|=
operator|new
name|StringBuffer
argument_list|()
expr_stmt|;
name|_hold
operator|=
literal|false
expr_stmt|;
block|}
specifier|public
name|void
name|append
parameter_list|(
name|String
name|text
parameter_list|)
block|{
name|char
index|[]
name|letters
init|=
name|text
operator|.
name|toCharArray
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|letters
operator|.
name|length
condition|;
name|x
operator|++
control|)
block|{
switch|switch
condition|(
name|letters
index|[
name|x
index|]
condition|)
block|{
case|case
literal|'\r'
case|:
name|_buf
operator|.
name|append
argument_list|(
literal|"\r\n"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|0x13
case|:
name|_hold
operator|=
literal|true
expr_stmt|;
break|break;
case|case
literal|0x14
case|:
name|_hold
operator|=
literal|false
expr_stmt|;
break|break;
default|default:
if|if
condition|(
operator|!
name|_hold
condition|)
block|{
name|_buf
operator|.
name|append
argument_list|(
name|letters
index|[
name|x
index|]
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|_buf
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

