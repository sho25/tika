begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|microsoft
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|hssf
operator|.
name|eventusermodel
operator|.
name|HSSFEventFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|hssf
operator|.
name|eventusermodel
operator|.
name|HSSFListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|hssf
operator|.
name|eventusermodel
operator|.
name|HSSFRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|hssf
operator|.
name|record
operator|.
name|BOFRecord
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|hssf
operator|.
name|record
operator|.
name|BoundSheetRecord
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|hssf
operator|.
name|record
operator|.
name|CellValueRecordInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|hssf
operator|.
name|record
operator|.
name|CountryRecord
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|hssf
operator|.
name|record
operator|.
name|DateWindow1904Record
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|hssf
operator|.
name|record
operator|.
name|EOFRecord
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|hssf
operator|.
name|record
operator|.
name|ExtendedFormatRecord
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|hssf
operator|.
name|record
operator|.
name|FormatRecord
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|hssf
operator|.
name|record
operator|.
name|FormulaRecord
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|hssf
operator|.
name|record
operator|.
name|LabelRecord
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|hssf
operator|.
name|record
operator|.
name|LabelSSTRecord
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|hssf
operator|.
name|record
operator|.
name|NumberRecord
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|hssf
operator|.
name|record
operator|.
name|RKRecord
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|hssf
operator|.
name|record
operator|.
name|Record
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|hssf
operator|.
name|record
operator|.
name|SSTRecord
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|hssf
operator|.
name|record
operator|.
name|UnicodeString
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|poifs
operator|.
name|filesystem
operator|.
name|DocumentInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|poifs
operator|.
name|filesystem
operator|.
name|POIFSFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_comment
comment|/**  * Excel parser implementation which uses POI's Event API  * to handle the contents of a Workbook.  *<p>  * This is an alternative implementation to Tika's  * {@link ExcelParser} implementation which uses POI's  *<code>HSSFWorkbook</code> to parse excel files.  *<p>  * The Event API uses a much smaller memory footprint than  *<code>HSSFWorkbook</code> when processing excel files  * but at the cost of more complexity.  *<p>  * With the Event API a<i>listener</i> is registered for  * specific record types and those records are created,  * fired off to the listener and then discarded as the stream  * is being processed.  *  * @see org.apache.poi.hssf.eventusermodel.HSSFListener  * @see<a href="http://poi.apache.org/hssf/how-to.html#event_api">  * POI Event API How To</a>  */
end_comment

begin_class
specifier|public
class|class
name|ExcelEventParser
extends|extends
name|OfficeParser
implements|implements
name|Serializable
block|{
comment|/** Logging instance */
specifier|private
specifier|static
name|Log
name|log
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|ExcelEventParser
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**      *<code>true</code> if the HSSFListener should be registered      * to listen for all records or<code>false</code> if the listener      * should be configured to only receive specified records.      */
specifier|private
specifier|final
name|boolean
name|listenForAllRecords
decl_stmt|;
comment|/**      * Create an instance which only listens for the specified      * records (i.e.<code>listenForAllRecords</code> is      *<code>false</code>).      */
specifier|public
name|ExcelEventParser
parameter_list|()
block|{
name|this
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
comment|/**      * Create an instance specifying whether to listen for all      * records or just for the specified few.      *<p>      *<strong>Note</strong> This constructor is intended primarily      * for testing and debugging - under normal operation      *<code>listenForAllRecords</code> should be<code>false</code>.      *      * @param listenForAllRecords<code>true</code> if the HSSFListener      * should be registered to listen for all records or<code>false</code>      * if the listener should be configured to only receive specified records.      */
specifier|public
name|ExcelEventParser
parameter_list|(
name|boolean
name|listenForAllRecords
parameter_list|)
block|{
name|this
operator|.
name|listenForAllRecords
operator|=
name|listenForAllRecords
expr_stmt|;
block|}
comment|/**      * Return the content type handled by this parser.      *      * @return The content type handled      */
specifier|protected
name|String
name|getContentType
parameter_list|()
block|{
return|return
literal|"application/vnd.ms-excel"
return|;
block|}
comment|/**      * Extracts text from an Excel Workbook writing the extracted content      * to the specified {@link Appendable}.      *      * @param filesystem POI file system      * @param appendable Where to output the parsed contents      * @throws IOException if an error occurs processing the workbook      * or writing the extracted content      */
specifier|protected
name|void
name|extractText
parameter_list|(
specifier|final
name|POIFSFileSystem
name|filesystem
parameter_list|,
specifier|final
name|Appendable
name|appendable
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|log
operator|.
name|isInfoEnabled
argument_list|()
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Starting listenForAllRecords="
operator|+
name|listenForAllRecords
argument_list|)
expr_stmt|;
block|}
comment|// Set up listener and register the records we want to process
name|TikaHSSFListener
name|listener
init|=
operator|new
name|TikaHSSFListener
argument_list|(
name|appendable
argument_list|)
decl_stmt|;
name|HSSFRequest
name|hssfRequest
init|=
operator|new
name|HSSFRequest
argument_list|()
decl_stmt|;
if|if
condition|(
name|listenForAllRecords
condition|)
block|{
name|hssfRequest
operator|.
name|addListenerForAllRecords
argument_list|(
name|listener
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|hssfRequest
operator|.
name|addListener
argument_list|(
name|listener
argument_list|,
name|BOFRecord
operator|.
name|sid
argument_list|)
expr_stmt|;
name|hssfRequest
operator|.
name|addListener
argument_list|(
name|listener
argument_list|,
name|EOFRecord
operator|.
name|sid
argument_list|)
expr_stmt|;
name|hssfRequest
operator|.
name|addListener
argument_list|(
name|listener
argument_list|,
name|DateWindow1904Record
operator|.
name|sid
argument_list|)
expr_stmt|;
name|hssfRequest
operator|.
name|addListener
argument_list|(
name|listener
argument_list|,
name|CountryRecord
operator|.
name|sid
argument_list|)
expr_stmt|;
name|hssfRequest
operator|.
name|addListener
argument_list|(
name|listener
argument_list|,
name|BoundSheetRecord
operator|.
name|sid
argument_list|)
expr_stmt|;
name|hssfRequest
operator|.
name|addListener
argument_list|(
name|listener
argument_list|,
name|FormatRecord
operator|.
name|sid
argument_list|)
expr_stmt|;
name|hssfRequest
operator|.
name|addListener
argument_list|(
name|listener
argument_list|,
name|ExtendedFormatRecord
operator|.
name|sid
argument_list|)
expr_stmt|;
name|hssfRequest
operator|.
name|addListener
argument_list|(
name|listener
argument_list|,
name|SSTRecord
operator|.
name|sid
argument_list|)
expr_stmt|;
name|hssfRequest
operator|.
name|addListener
argument_list|(
name|listener
argument_list|,
name|FormulaRecord
operator|.
name|sid
argument_list|)
expr_stmt|;
name|hssfRequest
operator|.
name|addListener
argument_list|(
name|listener
argument_list|,
name|LabelRecord
operator|.
name|sid
argument_list|)
expr_stmt|;
name|hssfRequest
operator|.
name|addListener
argument_list|(
name|listener
argument_list|,
name|LabelSSTRecord
operator|.
name|sid
argument_list|)
expr_stmt|;
name|hssfRequest
operator|.
name|addListener
argument_list|(
name|listener
argument_list|,
name|NumberRecord
operator|.
name|sid
argument_list|)
expr_stmt|;
name|hssfRequest
operator|.
name|addListener
argument_list|(
name|listener
argument_list|,
name|RKRecord
operator|.
name|sid
argument_list|)
expr_stmt|;
block|}
comment|// Create event factory and process Workbook (fire events)
name|DocumentInputStream
name|documentInputStream
init|=
name|filesystem
operator|.
name|createDocumentInputStream
argument_list|(
literal|"Workbook"
argument_list|)
decl_stmt|;
name|HSSFEventFactory
name|eventFactory
init|=
operator|new
name|HSSFEventFactory
argument_list|()
decl_stmt|;
name|eventFactory
operator|.
name|processEvents
argument_list|(
name|hssfRequest
argument_list|,
name|documentInputStream
argument_list|)
expr_stmt|;
if|if
condition|(
name|log
operator|.
name|isInfoEnabled
argument_list|()
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Processed "
operator|+
name|listener
operator|.
name|getRecordCount
argument_list|()
operator|+
literal|" records"
argument_list|)
expr_stmt|;
block|}
block|}
comment|// ======================================================================
comment|/**      * HSSF Listener implementation which processes the HSSF records.      */
specifier|private
specifier|static
class|class
name|TikaHSSFListener
implements|implements
name|HSSFListener
implements|,
name|Serializable
block|{
comment|/** Logging instance */
specifier|private
specifier|static
name|Log
name|log
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|ExcelEventParser
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|Appendable
name|appendable
decl_stmt|;
specifier|private
name|int
name|recordCount
decl_stmt|;
specifier|private
name|SSTRecord
name|sstRecord
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|Short
argument_list|,
name|String
argument_list|>
name|formats
init|=
operator|new
name|HashMap
argument_list|<
name|Short
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|Short
argument_list|,
name|Short
argument_list|>
name|extendedFormats
init|=
operator|new
name|HashMap
argument_list|<
name|Short
argument_list|,
name|Short
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|sheetNames
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|short
name|bofRecordType
decl_stmt|;
specifier|private
name|short
name|defualtCountry
decl_stmt|;
specifier|private
name|short
name|currentCountry
decl_stmt|;
specifier|private
name|short
name|currentXFormatIdx
decl_stmt|;
specifier|private
name|short
name|currentSheetIndex
decl_stmt|;
specifier|private
name|String
name|currentSheetName
decl_stmt|;
specifier|private
name|boolean
name|firstElement
init|=
literal|true
decl_stmt|;
specifier|private
name|boolean
name|use1904windowing
init|=
literal|false
decl_stmt|;
comment|/**          * Contstruct a new listener instance outputting parsed data to          * the specified Appendable.          *          * @param appendable Destination to write the parsed output to          */
specifier|private
name|TikaHSSFListener
parameter_list|(
specifier|final
name|Appendable
name|appendable
parameter_list|)
block|{
name|this
operator|.
name|appendable
operator|=
name|appendable
expr_stmt|;
block|}
comment|/**          * Return a count of the number of records processed.          *          * @return The number of records processed by this listener          */
specifier|private
name|int
name|getRecordCount
parameter_list|()
block|{
return|return
name|recordCount
return|;
block|}
comment|/**          * Process a HSSF record.          *          * @param record HSSF Record          */
specifier|public
name|void
name|processRecord
parameter_list|(
specifier|final
name|Record
name|record
parameter_list|)
block|{
name|recordCount
operator|++
expr_stmt|;
specifier|final
name|short
name|sid
init|=
name|record
operator|.
name|getSid
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|sid
condition|)
block|{
comment|/* BOFRecord: indicates start of workbook, worksheet etc. records */
case|case
name|BOFRecord
operator|.
name|sid
case|:
name|BOFRecord
name|bofRecord
init|=
operator|(
name|BOFRecord
operator|)
name|record
decl_stmt|;
name|bofRecordType
operator|=
name|bofRecord
operator|.
name|getType
argument_list|()
expr_stmt|;
switch|switch
condition|(
name|bofRecordType
condition|)
block|{
case|case
name|BOFRecord
operator|.
name|TYPE_WORKBOOK
case|:
name|currentSheetIndex
operator|=
operator|-
literal|1
expr_stmt|;
name|debug
argument_list|(
name|record
argument_list|,
literal|".Workbook"
argument_list|)
expr_stmt|;
break|break;
case|case
name|BOFRecord
operator|.
name|TYPE_WORKSHEET
case|:
name|currentSheetIndex
operator|++
expr_stmt|;
name|currentSheetName
operator|=
literal|null
expr_stmt|;
if|if
condition|(
name|currentSheetIndex
operator|<
name|sheetNames
operator|.
name|size
argument_list|()
condition|)
block|{
name|currentSheetName
operator|=
name|sheetNames
operator|.
name|get
argument_list|(
name|currentSheetIndex
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|log
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|debug
argument_list|(
name|record
argument_list|,
literal|".Worksheet["
operator|+
name|currentSheetIndex
operator|+
literal|"], Name=["
operator|+
name|currentSheetName
operator|+
literal|"]"
argument_list|)
expr_stmt|;
block|}
name|addText
argument_list|(
name|currentSheetName
argument_list|)
expr_stmt|;
break|break;
default|default:
if|if
condition|(
name|log
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|debug
argument_list|(
name|record
argument_list|,
literal|"["
operator|+
name|bofRecordType
operator|+
literal|"]"
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
break|break;
comment|/* BOFRecord: indicates end of workbook, worksheet etc. records */
case|case
name|EOFRecord
operator|.
name|sid
case|:
name|debug
argument_list|(
name|record
argument_list|)
expr_stmt|;
name|bofRecordType
operator|=
literal|0
expr_stmt|;
break|break;
comment|/* Indicates whether to use 1904 Date Windowing or not */
case|case
name|DateWindow1904Record
operator|.
name|sid
case|:
name|DateWindow1904Record
name|dw1904Rec
init|=
operator|(
name|DateWindow1904Record
operator|)
name|record
decl_stmt|;
name|use1904windowing
operator|=
operator|(
name|dw1904Rec
operator|.
name|getWindowing
argument_list|()
operator|==
literal|1
operator|)
expr_stmt|;
if|if
condition|(
name|log
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|debug
argument_list|(
name|record
argument_list|,
literal|"["
operator|+
name|use1904windowing
operator|+
literal|"]"
argument_list|)
expr_stmt|;
block|}
break|break;
comment|/* CountryRecord: holds all the strings for LabelSSTRecords */
case|case
name|CountryRecord
operator|.
name|sid
case|:
name|CountryRecord
name|countryRecord
init|=
operator|(
name|CountryRecord
operator|)
name|record
decl_stmt|;
name|defualtCountry
operator|=
name|countryRecord
operator|.
name|getDefaultCountry
argument_list|()
expr_stmt|;
name|currentCountry
operator|=
name|countryRecord
operator|.
name|getCurrentCountry
argument_list|()
expr_stmt|;
if|if
condition|(
name|log
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|debug
argument_list|(
name|record
argument_list|,
literal|" default=["
operator|+
name|defualtCountry
operator|+
literal|"], current=["
operator|+
name|currentCountry
operator|+
literal|"]"
argument_list|)
expr_stmt|;
block|}
break|break;
comment|/* SSTRecord: holds all the strings for LabelSSTRecords */
case|case
name|SSTRecord
operator|.
name|sid
case|:
name|sstRecord
operator|=
operator|(
name|SSTRecord
operator|)
name|record
expr_stmt|;
name|debug
argument_list|(
name|record
argument_list|)
expr_stmt|;
break|break;
comment|/* BoundSheetRecord: Worksheet index record */
case|case
name|BoundSheetRecord
operator|.
name|sid
case|:
name|BoundSheetRecord
name|boundSheetRecord
init|=
operator|(
name|BoundSheetRecord
operator|)
name|record
decl_stmt|;
name|String
name|sheetName
init|=
name|boundSheetRecord
operator|.
name|getSheetname
argument_list|()
decl_stmt|;
name|sheetNames
operator|.
name|add
argument_list|(
name|sheetName
argument_list|)
expr_stmt|;
if|if
condition|(
name|log
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|debug
argument_list|(
name|record
argument_list|,
literal|"["
operator|+
name|sheetNames
operator|.
name|size
argument_list|()
operator|+
literal|"], Name=["
operator|+
name|sheetName
operator|+
literal|"]"
argument_list|)
expr_stmt|;
block|}
break|break;
comment|/* FormatRecord */
case|case
name|FormatRecord
operator|.
name|sid
case|:
name|FormatRecord
name|formatRecord
init|=
operator|(
name|FormatRecord
operator|)
name|record
decl_stmt|;
name|String
name|dataFormat
init|=
name|formatRecord
operator|.
name|getFormatString
argument_list|()
decl_stmt|;
name|short
name|formatIdx
init|=
name|formatRecord
operator|.
name|getIndexCode
argument_list|()
decl_stmt|;
name|formats
operator|.
name|put
argument_list|(
name|formatIdx
argument_list|,
name|dataFormat
argument_list|)
expr_stmt|;
if|if
condition|(
name|log
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|debug
argument_list|(
name|record
argument_list|,
literal|"["
operator|+
name|formatIdx
operator|+
literal|"]=["
operator|+
name|dataFormat
operator|+
literal|"]"
argument_list|)
expr_stmt|;
block|}
break|break;
comment|/* ExtendedFormatRecord */
case|case
name|ExtendedFormatRecord
operator|.
name|sid
case|:
name|ExtendedFormatRecord
name|xFormatRecord
init|=
operator|(
name|ExtendedFormatRecord
operator|)
name|record
decl_stmt|;
if|if
condition|(
name|xFormatRecord
operator|.
name|getXFType
argument_list|()
operator|==
name|ExtendedFormatRecord
operator|.
name|XF_CELL
condition|)
block|{
name|short
name|dataFormatIdx
init|=
name|xFormatRecord
operator|.
name|getFormatIndex
argument_list|()
decl_stmt|;
if|if
condition|(
name|dataFormatIdx
operator|>
literal|0
condition|)
block|{
name|extendedFormats
operator|.
name|put
argument_list|(
name|currentXFormatIdx
argument_list|,
name|dataFormatIdx
argument_list|)
expr_stmt|;
if|if
condition|(
name|log
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|debug
argument_list|(
name|record
argument_list|,
literal|"["
operator|+
name|currentXFormatIdx
operator|+
literal|"]=FormatRecord["
operator|+
name|dataFormatIdx
operator|+
literal|"]"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|currentXFormatIdx
operator|++
expr_stmt|;
break|break;
default|default:
if|if
condition|(
name|bofRecordType
operator|==
name|BOFRecord
operator|.
name|TYPE_WORKSHEET
operator|&&
name|record
operator|instanceof
name|CellValueRecordInterface
condition|)
block|{
name|processCellValue
argument_list|(
name|sid
argument_list|,
operator|(
name|CellValueRecordInterface
operator|)
name|record
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|debug
argument_list|(
name|record
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
comment|/**          * Process a Cell Value record.          *          * @param sid record type identifier          * @param record The cell value record          */
specifier|private
name|void
name|processCellValue
parameter_list|(
specifier|final
name|short
name|sid
parameter_list|,
specifier|final
name|CellValueRecordInterface
name|record
parameter_list|)
block|{
name|short
name|xfIdx
init|=
name|record
operator|.
name|getXFIndex
argument_list|()
decl_stmt|;
name|Short
name|dfIdx
init|=
name|extendedFormats
operator|.
name|get
argument_list|(
name|xfIdx
argument_list|)
decl_stmt|;
name|String
name|dataFormat
init|=
name|dfIdx
operator|!=
literal|null
condition|?
name|formats
operator|.
name|get
argument_list|(
name|dfIdx
argument_list|)
else|:
literal|null
decl_stmt|;
name|String
name|str
init|=
literal|null
decl_stmt|;
switch|switch
condition|(
name|sid
condition|)
block|{
comment|/* FormulaRecord: Cell value from a formula */
case|case
name|FormulaRecord
operator|.
name|sid
case|:
name|FormulaRecord
name|formulaRecord
init|=
operator|(
name|FormulaRecord
operator|)
name|record
decl_stmt|;
name|double
name|fmlValue
init|=
name|formulaRecord
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|str
operator|=
name|toString
argument_list|(
name|fmlValue
argument_list|,
name|dfIdx
argument_list|,
name|dataFormat
argument_list|)
expr_stmt|;
name|str
operator|=
name|addText
argument_list|(
name|str
argument_list|)
expr_stmt|;
break|break;
comment|/* LabelRecord: strings stored directly in the cell */
case|case
name|LabelRecord
operator|.
name|sid
case|:
name|LabelRecord
name|labelRecord
init|=
operator|(
name|LabelRecord
operator|)
name|record
decl_stmt|;
name|str
operator|=
name|addText
argument_list|(
name|labelRecord
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
break|break;
comment|/* LabelSSTRecord: Ref. a string in the shared string table */
case|case
name|LabelSSTRecord
operator|.
name|sid
case|:
name|LabelSSTRecord
name|labelSSTRecord
init|=
operator|(
name|LabelSSTRecord
operator|)
name|record
decl_stmt|;
name|int
name|sstIndex
init|=
name|labelSSTRecord
operator|.
name|getSSTIndex
argument_list|()
decl_stmt|;
name|UnicodeString
name|unicodeStr
init|=
name|sstRecord
operator|.
name|getString
argument_list|(
name|sstIndex
argument_list|)
decl_stmt|;
name|str
operator|=
name|addText
argument_list|(
name|unicodeStr
operator|.
name|getString
argument_list|()
argument_list|)
expr_stmt|;
break|break;
comment|/* NumberRecord: Contains a numeric cell value */
case|case
name|NumberRecord
operator|.
name|sid
case|:
name|double
name|numValue
init|=
operator|(
operator|(
name|NumberRecord
operator|)
name|record
operator|)
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|Double
operator|.
name|isNaN
argument_list|(
name|numValue
argument_list|)
condition|)
block|{
name|str
operator|=
name|Double
operator|.
name|toString
argument_list|(
name|numValue
argument_list|)
expr_stmt|;
block|}
name|str
operator|=
name|toString
argument_list|(
name|numValue
argument_list|,
name|dfIdx
argument_list|,
name|dataFormat
argument_list|)
expr_stmt|;
name|str
operator|=
name|addText
argument_list|(
name|str
argument_list|)
expr_stmt|;
break|break;
comment|/* RKRecord: Excel internal number record */
case|case
name|RKRecord
operator|.
name|sid
case|:
name|double
name|rkValue
init|=
operator|(
operator|(
name|RKRecord
operator|)
name|record
operator|)
operator|.
name|getRKNumber
argument_list|()
decl_stmt|;
name|str
operator|=
name|toString
argument_list|(
name|rkValue
argument_list|,
name|dfIdx
argument_list|,
name|dataFormat
argument_list|)
expr_stmt|;
name|str
operator|=
name|addText
argument_list|(
name|str
argument_list|)
expr_stmt|;
break|break;
block|}
comment|// =========== Debug Mess: START ===========
if|if
condition|(
name|log
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|StringBuilder
name|builder
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|'['
argument_list|)
expr_stmt|;
comment|// builder.append(ExcelUtils.columnIndexToLabel(record.getColumn()));
name|builder
operator|.
name|append
argument_list|(
name|record
operator|.
name|getColumn
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|":"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
operator|(
name|record
operator|.
name|getRow
argument_list|()
operator|+
literal|1
operator|)
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|']'
argument_list|)
expr_stmt|;
if|if
condition|(
name|dfIdx
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
literal|" xfIdx["
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|xfIdx
argument_list|)
operator|.
name|append
argument_list|(
literal|']'
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|"=dfIdx["
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|dfIdx
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|']'
argument_list|)
expr_stmt|;
if|if
condition|(
name|dataFormat
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
literal|"=["
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|dataFormat
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|']'
argument_list|)
expr_stmt|;
block|}
block|}
name|builder
operator|.
name|append
argument_list|(
literal|", value=["
argument_list|)
expr_stmt|;
if|if
condition|(
name|str
operator|!=
literal|null
operator|&&
name|str
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
name|str
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|append
argument_list|(
literal|']'
argument_list|)
expr_stmt|;
name|debug
argument_list|(
operator|(
name|Record
operator|)
name|record
argument_list|,
name|builder
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// =========== Debug Mess: END =============
block|}
comment|/**          * Converts a numeric excel cell value to a String.          *          * @param value The cell value          * @param dfIdx The data format index          * @param dataFormat The data format          * @return Formatted string value          */
specifier|private
name|String
name|toString
parameter_list|(
name|double
name|value
parameter_list|,
name|Short
name|dfIdx
parameter_list|,
name|String
name|dataFormat
parameter_list|)
block|{
if|if
condition|(
name|Double
operator|.
name|isNaN
argument_list|(
name|value
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
comment|// **** TODO: Data Format parsing ****
comment|// return ExcelUtils.format(value, dfIdx, dataFormat, use1904windowing);
return|return
name|Double
operator|.
name|toString
argument_list|(
name|value
argument_list|)
return|;
block|}
comment|/**          * Add a parsed text value to this listners appendable.          *<p>          * Null and zero length values are ignored.          *          * @param text The text value          * @return the added text          */
specifier|private
name|String
name|addText
parameter_list|(
name|String
name|text
parameter_list|)
block|{
if|if
condition|(
name|text
operator|!=
literal|null
condition|)
block|{
name|text
operator|=
name|text
operator|.
name|trim
argument_list|()
expr_stmt|;
if|if
condition|(
name|text
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
try|try
block|{
if|if
condition|(
operator|!
name|firstElement
condition|)
block|{
name|appendable
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
block|}
name|appendable
operator|.
name|append
argument_list|(
name|text
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|firstElement
operator|=
literal|false
expr_stmt|;
block|}
block|}
return|return
name|text
return|;
block|}
comment|/**          * Record debugging.          *          * @param record The Record          */
specifier|private
name|void
name|debug
parameter_list|(
name|Record
name|record
parameter_list|)
block|{
name|debug
argument_list|(
name|record
argument_list|,
literal|""
argument_list|)
expr_stmt|;
block|}
comment|/**          * Record debugging.          *          * @param record The Record          * @param msg Debug Message          */
specifier|private
name|void
name|debug
parameter_list|(
name|Record
name|record
parameter_list|,
name|String
name|msg
parameter_list|)
block|{
if|if
condition|(
name|log
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|String
name|className
init|=
name|record
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
decl_stmt|;
name|String
name|text
init|=
operator|(
name|msg
operator|==
literal|null
condition|?
name|className
else|:
name|className
operator|+
name|msg
operator|)
decl_stmt|;
if|if
condition|(
name|record
operator|.
name|getSid
argument_list|()
operator|==
name|BOFRecord
operator|.
name|sid
operator|||
name|record
operator|.
name|getSid
argument_list|()
operator|==
name|EOFRecord
operator|.
name|sid
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
name|text
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"    "
operator|+
name|text
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
end_class

end_unit

