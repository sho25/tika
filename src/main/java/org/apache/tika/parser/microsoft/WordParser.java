begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|microsoft
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|xml
operator|.
name|SAXErrorHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|hwpf
operator|.
name|HWPFDocument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|hwpf
operator|.
name|usermodel
operator|.
name|CharacterRun
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|hwpf
operator|.
name|usermodel
operator|.
name|Range
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|poifs
operator|.
name|filesystem
operator|.
name|DocumentEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|poifs
operator|.
name|filesystem
operator|.
name|DocumentInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|poifs
operator|.
name|filesystem
operator|.
name|POIFSFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|util
operator|.
name|LittleEndian
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|exception
operator|.
name|TikaException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|metadata
operator|.
name|Metadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|sax
operator|.
name|AppendableAdaptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|sax
operator|.
name|XHTMLContentHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|ContentHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_comment
comment|/**  * Word parser  */
end_comment

begin_class
specifier|public
class|class
name|WordParser
extends|extends
name|OfficeParser
block|{
specifier|protected
name|String
name|getContentType
parameter_list|()
block|{
return|return
literal|"application/msword"
return|;
block|}
comment|/**      * Gets the text from a Word document.      *      * @param fsys the<code>POIFSFileSystem</code> to read the word document from.      * @param appendable the<code>Appendable</code> to add the text content to.      */
specifier|public
name|void
name|parse
parameter_list|(
name|POIFSFileSystem
name|fsys
parameter_list|,
name|ContentHandler
name|handler
parameter_list|,
name|Metadata
name|metadata
parameter_list|)
throws|throws
name|IOException
throws|,
name|SAXException
throws|,
name|TikaException
block|{
name|XHTMLContentHandler
name|xhtml
init|=
operator|new
name|XHTMLContentHandler
argument_list|(
name|handler
argument_list|,
name|metadata
argument_list|)
decl_stmt|;
name|xhtml
operator|.
name|startDocument
argument_list|()
expr_stmt|;
name|xhtml
operator|.
name|startElement
argument_list|(
literal|"p"
argument_list|)
expr_stmt|;
name|Appendable
name|appendable
init|=
operator|new
name|AppendableAdaptor
argument_list|(
name|xhtml
argument_list|)
decl_stmt|;
comment|// load our POIFS document streams.
name|DocumentEntry
name|headerProps
init|=
operator|(
name|DocumentEntry
operator|)
name|fsys
operator|.
name|getRoot
argument_list|()
operator|.
name|getEntry
argument_list|(
literal|"WordDocument"
argument_list|)
decl_stmt|;
name|DocumentInputStream
name|din
init|=
name|fsys
operator|.
name|createDocumentInputStream
argument_list|(
literal|"WordDocument"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|header
init|=
operator|new
name|byte
index|[
name|headerProps
operator|.
name|getSize
argument_list|()
index|]
decl_stmt|;
name|din
operator|.
name|read
argument_list|(
name|header
argument_list|)
expr_stmt|;
name|din
operator|.
name|close
argument_list|()
expr_stmt|;
name|int
name|info
init|=
name|LittleEndian
operator|.
name|getShort
argument_list|(
name|header
argument_list|,
literal|0xa
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|info
operator|&
literal|0x4
operator|)
operator|!=
literal|0
condition|)
block|{
throw|throw
operator|new
name|TikaException
argument_list|(
literal|"Fast-saved files are unsupported"
argument_list|)
throw|;
block|}
if|if
condition|(
operator|(
name|info
operator|&
literal|0x100
operator|)
operator|!=
literal|0
condition|)
block|{
throw|throw
operator|new
name|TikaException
argument_list|(
literal|"This document is password protected"
argument_list|)
throw|;
block|}
comment|// determine the version of Word this document came from.
name|int
name|nFib
init|=
name|LittleEndian
operator|.
name|getShort
argument_list|(
name|header
argument_list|,
literal|0x2
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|nFib
condition|)
block|{
case|case
literal|101
case|:
case|case
literal|102
case|:
case|case
literal|103
case|:
case|case
literal|104
case|:
comment|// this is a Word 6.0 doc send it to the extractor for that version.
name|Word6Extractor
name|oldExtractor
init|=
operator|new
name|Word6Extractor
argument_list|(
name|appendable
argument_list|)
decl_stmt|;
name|oldExtractor
operator|.
name|extractText
argument_list|(
name|header
argument_list|)
expr_stmt|;
comment|// Set POI values to null
name|headerProps
operator|=
literal|null
expr_stmt|;
name|header
operator|=
literal|null
expr_stmt|;
name|din
operator|=
literal|null
expr_stmt|;
name|fsys
operator|=
literal|null
expr_stmt|;
return|return;
block|}
name|WordTextBuffer
name|finalTextBuf
init|=
operator|new
name|WordTextBuffer
argument_list|(
name|appendable
argument_list|)
decl_stmt|;
name|HWPFDocument
name|doc
init|=
operator|new
name|HWPFDocument
argument_list|(
name|fsys
argument_list|)
decl_stmt|;
name|Range
name|range
init|=
name|doc
operator|.
name|getRange
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|range
operator|.
name|numCharacterRuns
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|CharacterRun
name|cr
init|=
name|range
operator|.
name|getCharacterRun
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|cr
operator|.
name|isMarkedDeleted
argument_list|()
condition|)
block|{
name|finalTextBuf
operator|.
name|append
argument_list|(
name|cr
operator|.
name|text
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|xhtml
operator|.
name|endElement
argument_list|(
literal|"p"
argument_list|)
expr_stmt|;
name|xhtml
operator|.
name|endDocument
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

