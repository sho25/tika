begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  Copyright 2004 Ryan Ackley  *  *  Licensed under the Apache License, Version 2.0 (the "License");  *  you may not use this file except in compliance with the License.  *  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|microsoft
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|util
operator|.
name|LittleEndian
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|hwpf
operator|.
name|model
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * This class is used to extract text from Word 6 documents only. It should  * only be called from the org.textmining.text.extraction.WordExtractor because  * it will automatically determine the version.  *  *  */
end_comment

begin_class
class|class
name|Word6Extractor
block|{
specifier|public
name|Word6Extractor
parameter_list|()
block|{   }
comment|/**    * Extracts the text    *    * @param mainStream The POIFS document stream entitled "WordDocument".    *    * @return The text from the document    * @throws Exception If there are any unexpected exceptions.    */
specifier|public
name|String
name|extractText
parameter_list|(
name|byte
index|[]
name|mainStream
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|fcMin
init|=
name|LittleEndian
operator|.
name|getInt
argument_list|(
name|mainStream
argument_list|,
literal|0x18
argument_list|)
decl_stmt|;
name|int
name|fcMax
init|=
name|LittleEndian
operator|.
name|getInt
argument_list|(
name|mainStream
argument_list|,
literal|0x1C
argument_list|)
decl_stmt|;
name|int
name|chpTableOffset
init|=
name|LittleEndian
operator|.
name|getInt
argument_list|(
name|mainStream
argument_list|,
literal|0xb8
argument_list|)
decl_stmt|;
name|int
name|chpTableSize
init|=
name|LittleEndian
operator|.
name|getInt
argument_list|(
name|mainStream
argument_list|,
literal|0xbc
argument_list|)
decl_stmt|;
comment|// get a list of character properties
name|Word6CHPBinTable
name|chpTable
init|=
operator|new
name|Word6CHPBinTable
argument_list|(
name|mainStream
argument_list|,
name|chpTableOffset
argument_list|,
name|chpTableSize
argument_list|,
name|fcMin
argument_list|)
decl_stmt|;
name|List
name|textRuns
init|=
name|chpTable
operator|.
name|getTextRuns
argument_list|()
decl_stmt|;
comment|// iterate through the
name|WordTextBuffer
name|finalTextBuf
init|=
operator|new
name|WordTextBuffer
argument_list|()
decl_stmt|;
name|Iterator
name|runsIt
init|=
name|textRuns
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|runsIt
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|CHPX
name|chpx
init|=
operator|(
name|CHPX
operator|)
name|runsIt
operator|.
name|next
argument_list|()
decl_stmt|;
name|int
name|runStart
init|=
name|chpx
operator|.
name|getStart
argument_list|()
operator|+
name|fcMin
decl_stmt|;
name|int
name|runEnd
init|=
name|chpx
operator|.
name|getEnd
argument_list|()
operator|+
name|fcMin
decl_stmt|;
if|if
condition|(
operator|!
name|isDeleted
argument_list|(
name|chpx
operator|.
name|getGrpprl
argument_list|()
argument_list|)
condition|)
block|{
name|String
name|s
init|=
operator|new
name|String
argument_list|(
name|mainStream
argument_list|,
name|runStart
argument_list|,
name|Math
operator|.
name|min
argument_list|(
name|runEnd
argument_list|,
name|fcMax
argument_list|)
operator|-
name|runStart
argument_list|,
literal|"Cp1252"
argument_list|)
decl_stmt|;
name|finalTextBuf
operator|.
name|append
argument_list|(
name|s
argument_list|)
expr_stmt|;
if|if
condition|(
name|runEnd
operator|>=
name|fcMax
condition|)
block|{
break|break;
block|}
block|}
block|}
return|return
name|finalTextBuf
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**    * Used to determine if a run of text has been deleted.    * @param grpprl The list of sprms for this run of text.    * @return    */
specifier|private
name|boolean
name|isDeleted
parameter_list|(
name|byte
index|[]
name|grpprl
parameter_list|)
block|{
name|int
name|offset
init|=
literal|0
decl_stmt|;
name|boolean
name|deleted
init|=
literal|false
decl_stmt|;
while|while
condition|(
name|offset
operator|<
name|grpprl
operator|.
name|length
condition|)
block|{
switch|switch
condition|(
name|LittleEndian
operator|.
name|getUnsignedByte
argument_list|(
name|grpprl
argument_list|,
name|offset
operator|++
argument_list|)
condition|)
block|{
case|case
literal|65
case|:
name|deleted
operator|=
name|grpprl
index|[
name|offset
operator|++
index|]
operator|!=
literal|0
expr_stmt|;
break|break;
case|case
literal|66
case|:
name|offset
operator|++
expr_stmt|;
break|break;
case|case
literal|67
case|:
name|offset
operator|++
expr_stmt|;
break|break;
case|case
literal|68
case|:
name|offset
operator|+=
name|grpprl
index|[
name|offset
index|]
expr_stmt|;
break|break;
case|case
literal|69
case|:
name|offset
operator|+=
literal|2
expr_stmt|;
break|break;
case|case
literal|70
case|:
name|offset
operator|+=
literal|4
expr_stmt|;
break|break;
case|case
literal|71
case|:
name|offset
operator|++
expr_stmt|;
break|break;
case|case
literal|72
case|:
name|offset
operator|+=
literal|2
expr_stmt|;
break|break;
case|case
literal|73
case|:
name|offset
operator|+=
literal|3
expr_stmt|;
break|break;
case|case
literal|74
case|:
name|offset
operator|+=
name|grpprl
index|[
name|offset
index|]
expr_stmt|;
break|break;
case|case
literal|75
case|:
name|offset
operator|++
expr_stmt|;
break|break;
case|case
literal|80
case|:
name|offset
operator|+=
literal|2
expr_stmt|;
break|break;
case|case
literal|81
case|:
name|offset
operator|+=
name|grpprl
index|[
name|offset
index|]
expr_stmt|;
break|break;
case|case
literal|82
case|:
name|offset
operator|+=
name|grpprl
index|[
name|offset
index|]
expr_stmt|;
break|break;
case|case
literal|83
case|:
break|break;
case|case
literal|85
case|:
name|offset
operator|++
expr_stmt|;
break|break;
case|case
literal|86
case|:
name|offset
operator|++
expr_stmt|;
break|break;
case|case
literal|87
case|:
name|offset
operator|++
expr_stmt|;
break|break;
case|case
literal|88
case|:
name|offset
operator|++
expr_stmt|;
break|break;
case|case
literal|89
case|:
name|offset
operator|++
expr_stmt|;
break|break;
case|case
literal|90
case|:
name|offset
operator|++
expr_stmt|;
break|break;
case|case
literal|91
case|:
name|offset
operator|++
expr_stmt|;
break|break;
case|case
literal|92
case|:
name|offset
operator|++
expr_stmt|;
break|break;
case|case
literal|93
case|:
name|offset
operator|+=
literal|2
expr_stmt|;
break|break;
case|case
literal|94
case|:
name|offset
operator|++
expr_stmt|;
break|break;
case|case
literal|95
case|:
name|offset
operator|+=
literal|3
expr_stmt|;
break|break;
case|case
literal|96
case|:
name|offset
operator|+=
literal|2
expr_stmt|;
break|break;
case|case
literal|97
case|:
name|offset
operator|+=
literal|2
expr_stmt|;
break|break;
case|case
literal|98
case|:
name|offset
operator|++
expr_stmt|;
break|break;
case|case
literal|99
case|:
name|offset
operator|++
expr_stmt|;
break|break;
case|case
literal|100
case|:
name|offset
operator|++
expr_stmt|;
break|break;
case|case
literal|101
case|:
name|offset
operator|++
expr_stmt|;
break|break;
case|case
literal|102
case|:
name|offset
operator|++
expr_stmt|;
break|break;
case|case
literal|103
case|:
name|offset
operator|+=
name|grpprl
index|[
name|offset
index|]
expr_stmt|;
break|break;
case|case
literal|104
case|:
name|offset
operator|++
expr_stmt|;
break|break;
case|case
literal|105
case|:
name|offset
operator|+=
name|grpprl
index|[
name|offset
index|]
expr_stmt|;
break|break;
case|case
literal|106
case|:
name|offset
operator|+=
name|grpprl
index|[
name|offset
index|]
expr_stmt|;
break|break;
case|case
literal|107
case|:
name|offset
operator|+=
literal|2
expr_stmt|;
break|break;
case|case
literal|108
case|:
name|offset
operator|+=
name|grpprl
index|[
name|offset
index|]
expr_stmt|;
break|break;
case|case
literal|109
case|:
name|offset
operator|+=
literal|2
expr_stmt|;
break|break;
case|case
literal|110
case|:
name|offset
operator|+=
literal|2
expr_stmt|;
break|break;
case|case
literal|117
case|:
name|offset
operator|++
expr_stmt|;
break|break;
case|case
literal|118
case|:
name|offset
operator|++
expr_stmt|;
break|break;
block|}
block|}
return|return
name|deleted
return|;
block|}
block|}
end_class

end_unit

