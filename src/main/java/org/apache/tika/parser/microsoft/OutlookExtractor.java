begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|microsoft
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|hsmf
operator|.
name|datatypes
operator|.
name|Chunks
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|hsmf
operator|.
name|datatypes
operator|.
name|StringChunk
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|hsmf
operator|.
name|exceptions
operator|.
name|ChunkNotFoundException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|hsmf
operator|.
name|parsers
operator|.
name|POIFSChunkParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|poifs
operator|.
name|filesystem
operator|.
name|POIFSFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|exception
operator|.
name|TikaException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|metadata
operator|.
name|Metadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|sax
operator|.
name|XHTMLContentHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_comment
comment|/**  * Outlook Message Parser.  */
end_comment

begin_class
class|class
name|OutlookExtractor
block|{
specifier|private
specifier|static
specifier|final
name|Chunks
name|CHUNKS
init|=
name|Chunks
operator|.
name|getInstance
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|POIFSChunkParser
name|parser
decl_stmt|;
specifier|public
name|OutlookExtractor
parameter_list|(
name|POIFSFileSystem
name|filesystem
parameter_list|)
throws|throws
name|TikaException
block|{
try|try
block|{
name|this
operator|.
name|parser
operator|=
operator|new
name|POIFSChunkParser
argument_list|(
name|filesystem
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|TikaException
argument_list|(
literal|"Failed to parse Outlook chunks"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|void
name|parse
parameter_list|(
name|XHTMLContentHandler
name|xhtml
parameter_list|,
name|Metadata
name|metadata
parameter_list|)
throws|throws
name|TikaException
throws|,
name|SAXException
block|{
name|String
name|subject
init|=
name|getChunk
argument_list|(
name|CHUNKS
operator|.
name|subjectChunk
argument_list|)
decl_stmt|;
name|String
name|from
init|=
name|getChunk
argument_list|(
name|CHUNKS
operator|.
name|displayFromChunk
argument_list|)
decl_stmt|;
name|metadata
operator|.
name|set
argument_list|(
name|Metadata
operator|.
name|AUTHOR
argument_list|,
name|from
argument_list|)
expr_stmt|;
name|metadata
operator|.
name|set
argument_list|(
name|Metadata
operator|.
name|TITLE
argument_list|,
name|subject
argument_list|)
expr_stmt|;
name|metadata
operator|.
name|set
argument_list|(
name|Metadata
operator|.
name|SUBJECT
argument_list|,
name|getChunk
argument_list|(
name|CHUNKS
operator|.
name|conversationTopic
argument_list|)
argument_list|)
expr_stmt|;
name|xhtml
operator|.
name|element
argument_list|(
literal|"h1"
argument_list|,
name|subject
argument_list|)
expr_stmt|;
name|xhtml
operator|.
name|characters
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|xhtml
operator|.
name|startElement
argument_list|(
literal|"dl"
argument_list|)
expr_stmt|;
name|header
argument_list|(
name|xhtml
argument_list|,
literal|"From"
argument_list|,
name|from
argument_list|)
expr_stmt|;
name|header
argument_list|(
name|xhtml
argument_list|,
literal|"To"
argument_list|,
name|getChunk
argument_list|(
name|CHUNKS
operator|.
name|displayToChunk
argument_list|)
argument_list|)
expr_stmt|;
name|header
argument_list|(
name|xhtml
argument_list|,
literal|"Cc"
argument_list|,
name|getChunk
argument_list|(
name|CHUNKS
operator|.
name|displayCCChunk
argument_list|)
argument_list|)
expr_stmt|;
name|header
argument_list|(
name|xhtml
argument_list|,
literal|"Bcc"
argument_list|,
name|getChunk
argument_list|(
name|CHUNKS
operator|.
name|displayBCCChunk
argument_list|)
argument_list|)
expr_stmt|;
name|xhtml
operator|.
name|endElement
argument_list|(
literal|"dl"
argument_list|)
expr_stmt|;
name|xhtml
operator|.
name|characters
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|xhtml
operator|.
name|element
argument_list|(
literal|"p"
argument_list|,
name|getChunk
argument_list|(
name|CHUNKS
operator|.
name|textBodyChunk
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|header
parameter_list|(
name|XHTMLContentHandler
name|xhtml
parameter_list|,
name|String
name|key
parameter_list|,
name|String
name|value
parameter_list|)
throws|throws
name|SAXException
block|{
if|if
condition|(
name|value
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|xhtml
operator|.
name|element
argument_list|(
literal|"dt"
argument_list|,
name|key
argument_list|)
expr_stmt|;
name|xhtml
operator|.
name|characters
argument_list|(
literal|"\t"
argument_list|)
expr_stmt|;
name|xhtml
operator|.
name|element
argument_list|(
literal|"dd"
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|xhtml
operator|.
name|characters
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Returns the content of the identified string chunk in the      * current document. Returns the empty string if the identified      * chunk does not exist in the current document.      *      * @param chunk string chunk identifier      * @return content of the identified chunk, or the empty string      */
specifier|private
name|String
name|getChunk
parameter_list|(
name|StringChunk
name|chunk
parameter_list|)
block|{
try|try
block|{
return|return
name|parser
operator|.
name|getDocumentNode
argument_list|(
name|chunk
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|ChunkNotFoundException
name|e
parameter_list|)
block|{
return|return
literal|""
return|;
block|}
block|}
block|}
end_class

end_unit

