begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|pdf
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|config
operator|.
name|Content
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|Parser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|utils
operator|.
name|RegexUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|oro
operator|.
name|text
operator|.
name|regex
operator|.
name|MalformedPatternException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|pdfbox
operator|.
name|exceptions
operator|.
name|CryptographyException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|pdfbox
operator|.
name|exceptions
operator|.
name|InvalidPasswordException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|PDDocument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|PDDocumentInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|pdfbox
operator|.
name|util
operator|.
name|PDFTextStripper
import|;
end_import

begin_comment
comment|/**  * PDF parser  *   *   */
end_comment

begin_class
specifier|public
class|class
name|PDFParser
extends|extends
name|Parser
block|{
specifier|static
name|Logger
name|logger
init|=
name|Logger
operator|.
name|getRootLogger
argument_list|()
decl_stmt|;
specifier|private
name|String
name|contentStr
init|=
literal|""
decl_stmt|;
specifier|private
name|PDDocument
name|pdfDocument
init|=
literal|null
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Content
argument_list|>
name|contentsMap
decl_stmt|;
specifier|public
name|String
name|getStrContent
parameter_list|()
block|{
try|try
block|{
name|pdfDocument
operator|=
name|PDDocument
operator|.
name|load
argument_list|(
name|getInputStream
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|pdfDocument
operator|.
name|isEncrypted
argument_list|()
condition|)
block|{
name|pdfDocument
operator|.
name|decrypt
argument_list|(
literal|""
argument_list|)
expr_stmt|;
block|}
name|StringWriter
name|writer
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|PDFTextStripper
name|stripper
init|=
operator|new
name|PDFTextStripper
argument_list|()
decl_stmt|;
name|stripper
operator|.
name|writeText
argument_list|(
name|pdfDocument
argument_list|,
name|writer
argument_list|)
expr_stmt|;
name|contentStr
operator|=
name|writer
operator|.
name|getBuffer
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CryptographyException
name|e
parameter_list|)
block|{
name|logger
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|logger
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidPasswordException
name|e
parameter_list|)
block|{
name|logger
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|pdfDocument
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|pdfDocument
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|logger
operator|.
name|error
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|contentStr
return|;
block|}
specifier|public
name|List
argument_list|<
name|Content
argument_list|>
name|getContents
parameter_list|()
block|{
comment|// String contents = getContent();
if|if
condition|(
name|contentStr
operator|==
literal|null
condition|)
block|{
name|contentStr
operator|=
name|getStrContent
argument_list|()
expr_stmt|;
block|}
name|List
argument_list|<
name|Content
argument_list|>
name|ctt
init|=
name|super
operator|.
name|getContents
argument_list|()
decl_stmt|;
name|contentsMap
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Content
argument_list|>
argument_list|()
expr_stmt|;
name|Iterator
name|i
init|=
name|ctt
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|i
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Content
name|ct
init|=
operator|(
name|Content
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|ct
operator|.
name|getTextSelect
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|ct
operator|.
name|getTextSelect
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"fulltext"
argument_list|)
condition|)
block|{
name|ct
operator|.
name|setValue
argument_list|(
name|contentStr
argument_list|)
expr_stmt|;
block|}
else|else
block|{
try|try
block|{
name|PDDocumentInformation
name|metaData
init|=
name|pdfDocument
operator|.
name|getDocumentInformation
argument_list|()
decl_stmt|;
if|if
condition|(
name|ct
operator|.
name|getTextSelect
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"title"
argument_list|)
condition|)
block|{
if|if
condition|(
name|metaData
operator|.
name|getTitle
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|ct
operator|.
name|setValue
argument_list|(
name|metaData
operator|.
name|getTitle
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|ct
operator|.
name|getTextSelect
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"author"
argument_list|)
condition|)
block|{
if|if
condition|(
name|metaData
operator|.
name|getAuthor
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|ct
operator|.
name|setValue
argument_list|(
name|metaData
operator|.
name|getAuthor
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|ct
operator|.
name|getTextSelect
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"creator"
argument_list|)
condition|)
block|{
if|if
condition|(
name|metaData
operator|.
name|getCreator
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|ct
operator|.
name|setValue
argument_list|(
name|metaData
operator|.
name|getCreator
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|ct
operator|.
name|getTextSelect
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"keywords"
argument_list|)
condition|)
block|{
if|if
condition|(
name|metaData
operator|.
name|getKeywords
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|ct
operator|.
name|setValue
argument_list|(
name|metaData
operator|.
name|getKeywords
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|ct
operator|.
name|getTextSelect
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"producer"
argument_list|)
condition|)
block|{
if|if
condition|(
name|metaData
operator|.
name|getProducer
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|ct
operator|.
name|setValue
argument_list|(
name|metaData
operator|.
name|getProducer
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|ct
operator|.
name|getTextSelect
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"subject"
argument_list|)
condition|)
block|{
if|if
condition|(
name|metaData
operator|.
name|getSubject
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|ct
operator|.
name|setValue
argument_list|(
name|metaData
operator|.
name|getSubject
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|ct
operator|.
name|getTextSelect
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"trapped"
argument_list|)
condition|)
block|{
if|if
condition|(
name|metaData
operator|.
name|getTrapped
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|ct
operator|.
name|setValue
argument_list|(
name|metaData
operator|.
name|getTrapped
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|ct
operator|.
name|getTextSelect
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"creationDate"
argument_list|)
condition|)
block|{
if|if
condition|(
name|metaData
operator|.
name|getCreationDate
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|ct
operator|.
name|setValue
argument_list|(
name|metaData
operator|.
name|getCreationDate
argument_list|()
operator|.
name|getTime
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|ct
operator|.
name|getTextSelect
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"modificationDate"
argument_list|)
condition|)
block|{
if|if
condition|(
name|metaData
operator|.
name|getModificationDate
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|ct
operator|.
name|setValue
argument_list|(
name|metaData
operator|.
name|getModificationDate
argument_list|()
operator|.
name|getTime
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|ct
operator|.
name|getTextSelect
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"summary"
argument_list|)
condition|)
block|{
name|int
name|summarySize
init|=
name|Math
operator|.
name|min
argument_list|(
name|contentStr
operator|.
name|length
argument_list|()
argument_list|,
literal|500
argument_list|)
decl_stmt|;
name|String
name|summary
init|=
name|contentStr
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|summarySize
argument_list|)
decl_stmt|;
name|ct
operator|.
name|setValue
argument_list|(
name|summary
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|logger
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|ct
operator|.
name|getRegexSelect
argument_list|()
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|List
argument_list|<
name|String
argument_list|>
name|valuesLs
init|=
name|RegexUtils
operator|.
name|extract
argument_list|(
name|contentStr
argument_list|,
name|ct
operator|.
name|getRegexSelect
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|valuesLs
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|ct
operator|.
name|setValue
argument_list|(
name|valuesLs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|ct
operator|.
name|setValues
argument_list|(
name|valuesLs
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|MalformedPatternException
name|e
parameter_list|)
block|{
name|logger
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|contentsMap
operator|.
name|put
argument_list|(
name|ct
operator|.
name|getName
argument_list|()
argument_list|,
name|ct
argument_list|)
expr_stmt|;
block|}
return|return
name|ctt
return|;
block|}
specifier|public
name|Content
name|getContent
parameter_list|(
name|String
name|name
parameter_list|)
block|{
if|if
condition|(
name|contentsMap
operator|==
literal|null
operator|||
name|contentsMap
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|getContents
argument_list|()
expr_stmt|;
block|}
return|return
name|contentsMap
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
block|}
end_class

end_unit

