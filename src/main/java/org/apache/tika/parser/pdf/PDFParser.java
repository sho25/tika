begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|pdf
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Calendar
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|config
operator|.
name|Content
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|exception
operator|.
name|TikaException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|Parser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|PDDocument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|PDDocumentInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|pdfbox
operator|.
name|util
operator|.
name|PDFTextStripper
import|;
end_import

begin_comment
comment|/**  * PDF parser  */
end_comment

begin_class
specifier|public
class|class
name|PDFParser
implements|implements
name|Parser
block|{
specifier|public
name|String
name|parse
parameter_list|(
name|InputStream
name|stream
parameter_list|,
name|Iterable
argument_list|<
name|Content
argument_list|>
name|contents
parameter_list|)
throws|throws
name|IOException
throws|,
name|TikaException
block|{
try|try
block|{
name|PDDocument
name|pdfDocument
init|=
name|PDDocument
operator|.
name|load
argument_list|(
name|stream
argument_list|)
decl_stmt|;
try|try
block|{
if|if
condition|(
name|pdfDocument
operator|.
name|isEncrypted
argument_list|()
condition|)
block|{
name|pdfDocument
operator|.
name|decrypt
argument_list|(
literal|""
argument_list|)
expr_stmt|;
block|}
name|PDDocumentInformation
name|metaData
init|=
name|pdfDocument
operator|.
name|getDocumentInformation
argument_list|()
decl_stmt|;
for|for
control|(
name|Content
name|content
range|:
name|contents
control|)
block|{
name|String
name|text
init|=
name|content
operator|.
name|getTextSelect
argument_list|()
decl_stmt|;
if|if
condition|(
literal|"title"
operator|.
name|equalsIgnoreCase
argument_list|(
name|text
argument_list|)
condition|)
block|{
name|content
operator|.
name|setValue
argument_list|(
name|metaData
operator|.
name|getTitle
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"author"
operator|.
name|equalsIgnoreCase
argument_list|(
name|text
argument_list|)
condition|)
block|{
name|content
operator|.
name|setValue
argument_list|(
name|metaData
operator|.
name|getAuthor
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"creator"
operator|.
name|equalsIgnoreCase
argument_list|(
name|text
argument_list|)
condition|)
block|{
name|content
operator|.
name|setValue
argument_list|(
name|metaData
operator|.
name|getCreator
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"keywords"
operator|.
name|equalsIgnoreCase
argument_list|(
name|text
argument_list|)
condition|)
block|{
name|content
operator|.
name|setValue
argument_list|(
name|metaData
operator|.
name|getKeywords
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"producer"
operator|.
name|equalsIgnoreCase
argument_list|(
name|text
argument_list|)
condition|)
block|{
name|content
operator|.
name|setValue
argument_list|(
name|metaData
operator|.
name|getProducer
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"subject"
operator|.
name|equalsIgnoreCase
argument_list|(
name|text
argument_list|)
condition|)
block|{
name|content
operator|.
name|setValue
argument_list|(
name|metaData
operator|.
name|getSubject
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"trapped"
operator|.
name|equalsIgnoreCase
argument_list|(
name|text
argument_list|)
condition|)
block|{
name|content
operator|.
name|setValue
argument_list|(
name|metaData
operator|.
name|getTrapped
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"creationDate"
operator|.
name|equalsIgnoreCase
argument_list|(
name|text
argument_list|)
condition|)
block|{
name|Calendar
name|calendar
init|=
name|metaData
operator|.
name|getCreationDate
argument_list|()
decl_stmt|;
if|if
condition|(
name|calendar
operator|!=
literal|null
condition|)
block|{
name|content
operator|.
name|setValue
argument_list|(
name|calendar
operator|.
name|getTime
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
literal|"modificationDate"
operator|.
name|equalsIgnoreCase
argument_list|(
name|text
argument_list|)
condition|)
block|{
name|Calendar
name|calendar
init|=
name|metaData
operator|.
name|getModificationDate
argument_list|()
decl_stmt|;
if|if
condition|(
name|calendar
operator|!=
literal|null
condition|)
block|{
name|content
operator|.
name|setValue
argument_list|(
name|calendar
operator|.
name|getTime
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|StringWriter
name|writer
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
operator|new
name|PDFTextStripper
argument_list|()
operator|.
name|writeText
argument_list|(
name|pdfDocument
argument_list|,
name|writer
argument_list|)
expr_stmt|;
return|return
name|writer
operator|.
name|getBuffer
argument_list|()
operator|.
name|toString
argument_list|()
return|;
block|}
finally|finally
block|{
name|pdfDocument
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|TikaException
argument_list|(
literal|"Error parsing a PDF document"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

