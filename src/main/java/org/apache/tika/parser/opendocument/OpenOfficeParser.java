begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|opendocument
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|ZipEntry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|ZipInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|config
operator|.
name|Content
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|Parser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|xml
operator|.
name|XMLParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|utils
operator|.
name|RegexUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|utils
operator|.
name|Utils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|oro
operator|.
name|text
operator|.
name|regex
operator|.
name|MalformedPatternException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jdom
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jdom
operator|.
name|JDOMException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jdom
operator|.
name|Namespace
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jdom
operator|.
name|input
operator|.
name|SAXBuilder
import|;
end_import

begin_comment
comment|/**  * OpenOffice parser  *   * @author Rida Benjelloun (ridabenjelloun@apache.org)  */
end_comment

begin_class
specifier|public
class|class
name|OpenOfficeParser
extends|extends
name|Parser
block|{
specifier|static
name|Logger
name|logger
init|=
name|Logger
operator|.
name|getRootLogger
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Namespace
name|NS_DC
init|=
name|Namespace
operator|.
name|getNamespace
argument_list|(
literal|"dc"
argument_list|,
literal|"http://purl.org/dc/elements/1.1/"
argument_list|)
decl_stmt|;
specifier|private
name|XMLParser
name|xp
init|=
operator|new
name|XMLParser
argument_list|()
decl_stmt|;
specifier|private
name|org
operator|.
name|jdom
operator|.
name|Document
name|xmlDoc
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Content
argument_list|>
name|contentsMap
decl_stmt|;
specifier|private
name|String
name|contentStr
decl_stmt|;
specifier|public
name|org
operator|.
name|jdom
operator|.
name|Document
name|parse
parameter_list|(
name|InputStream
name|is
parameter_list|)
block|{
name|xmlDoc
operator|=
operator|new
name|org
operator|.
name|jdom
operator|.
name|Document
argument_list|()
expr_stmt|;
name|org
operator|.
name|jdom
operator|.
name|Document
name|xmlMeta
init|=
operator|new
name|org
operator|.
name|jdom
operator|.
name|Document
argument_list|()
decl_stmt|;
try|try
block|{
name|List
name|files
init|=
name|unzip
argument_list|(
name|is
argument_list|)
decl_stmt|;
name|SAXBuilder
name|builder
init|=
operator|new
name|SAXBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|setEntityResolver
argument_list|(
operator|new
name|OpenOfficeEntityResolver
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setValidation
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|xmlDoc
operator|=
name|builder
operator|.
name|build
argument_list|(
operator|(
name|InputStream
operator|)
name|files
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|xmlMeta
operator|=
name|builder
operator|.
name|build
argument_list|(
operator|(
name|InputStream
operator|)
name|files
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|Element
name|rootMeta
init|=
name|xmlMeta
operator|.
name|getRootElement
argument_list|()
decl_stmt|;
name|Element
name|meta
init|=
literal|null
decl_stmt|;
name|List
name|ls
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
name|ls
operator|=
name|rootMeta
operator|.
name|getChildren
argument_list|()
operator|)
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|meta
operator|=
operator|(
name|Element
operator|)
name|ls
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
name|xmlDoc
operator|.
name|getRootElement
argument_list|()
operator|.
name|addContent
argument_list|(
name|meta
operator|.
name|detach
argument_list|()
argument_list|)
expr_stmt|;
name|xmlDoc
operator|.
name|getRootElement
argument_list|()
operator|.
name|addNamespaceDeclaration
argument_list|(
name|NS_DC
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|JDOMException
name|e
parameter_list|)
block|{
name|logger
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|logger
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Utils
operator|.
name|saveInXmlFile
argument_list|(
name|xmlDoc
argument_list|,
literal|"C:\\oo.xml"
argument_list|)
expr_stmt|;
return|return
name|xmlDoc
return|;
block|}
specifier|public
name|List
argument_list|<
name|Content
argument_list|>
name|getContents
parameter_list|()
block|{
if|if
condition|(
name|contentStr
operator|==
literal|null
condition|)
block|{
name|contentStr
operator|=
name|getStrContent
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|xmlDoc
operator|==
literal|null
condition|)
name|xmlDoc
operator|=
name|Utils
operator|.
name|parse
argument_list|(
name|getInputStream
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|documentNs
init|=
name|xp
operator|.
name|getAllDocumentNs
argument_list|(
name|xmlDoc
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Content
argument_list|>
name|ctt
init|=
name|super
operator|.
name|getContents
argument_list|()
decl_stmt|;
name|Iterator
name|it
init|=
name|ctt
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|contentsMap
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Content
argument_list|>
argument_list|()
expr_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Content
name|content
init|=
operator|(
name|Content
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|content
operator|.
name|getXPathSelect
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|xp
operator|.
name|extractContent
argument_list|(
name|xmlDoc
argument_list|,
name|content
argument_list|,
name|contentsMap
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|content
operator|.
name|getRegexSelect
argument_list|()
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|List
argument_list|<
name|String
argument_list|>
name|valuesLs
init|=
name|RegexUtils
operator|.
name|extract
argument_list|(
name|contentStr
argument_list|,
name|content
operator|.
name|getRegexSelect
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|valuesLs
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|content
operator|.
name|setValue
argument_list|(
name|valuesLs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|content
operator|.
name|setValues
argument_list|(
name|valuesLs
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|MalformedPatternException
name|e
parameter_list|)
block|{
name|logger
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|ctt
return|;
block|}
specifier|public
name|String
name|getStrContent
parameter_list|()
block|{
if|if
condition|(
name|xmlDoc
operator|==
literal|null
condition|)
name|xmlDoc
operator|=
name|parse
argument_list|(
name|getInputStream
argument_list|()
argument_list|)
expr_stmt|;
name|contentStr
operator|=
name|xp
operator|.
name|concatOccurance
argument_list|(
name|xmlDoc
argument_list|,
literal|"//*"
argument_list|,
literal|" "
argument_list|)
expr_stmt|;
return|return
name|contentStr
return|;
block|}
specifier|public
name|List
name|unzip
parameter_list|(
name|InputStream
name|is
parameter_list|)
block|{
name|List
name|res
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
try|try
block|{
name|ZipInputStream
name|in
init|=
operator|new
name|ZipInputStream
argument_list|(
name|is
argument_list|)
decl_stmt|;
name|ZipEntry
name|entry
init|=
literal|null
decl_stmt|;
while|while
condition|(
operator|(
name|entry
operator|=
name|in
operator|.
name|getNextEntry
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|entry
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"meta.xml"
argument_list|)
operator|||
name|entry
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"content.xml"
argument_list|)
condition|)
block|{
name|ByteArrayOutputStream
name|stream
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|byte
index|[]
name|buf
init|=
operator|new
name|byte
index|[
literal|1024
index|]
decl_stmt|;
name|int
name|len
decl_stmt|;
while|while
condition|(
operator|(
name|len
operator|=
name|in
operator|.
name|read
argument_list|(
name|buf
argument_list|)
operator|)
operator|>
literal|0
condition|)
block|{
name|stream
operator|.
name|write
argument_list|(
name|buf
argument_list|,
literal|0
argument_list|,
name|len
argument_list|)
expr_stmt|;
block|}
name|InputStream
name|isEntry
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|stream
operator|.
name|toByteArray
argument_list|()
argument_list|)
decl_stmt|;
name|res
operator|.
name|add
argument_list|(
name|isEntry
argument_list|)
expr_stmt|;
block|}
block|}
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|logger
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|res
return|;
block|}
specifier|public
name|Content
name|getContent
parameter_list|(
name|String
name|name
parameter_list|)
block|{
if|if
condition|(
name|contentsMap
operator|==
literal|null
operator|||
name|contentsMap
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|getContents
argument_list|()
expr_stmt|;
block|}
return|return
name|contentsMap
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|protected
name|void
name|copyInputStream
parameter_list|(
name|InputStream
name|in
parameter_list|,
name|OutputStream
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|byte
index|[]
name|buffer
init|=
operator|new
name|byte
index|[
literal|1024
index|]
decl_stmt|;
name|int
name|len
decl_stmt|;
while|while
condition|(
operator|(
name|len
operator|=
name|in
operator|.
name|read
argument_list|(
name|buffer
argument_list|)
operator|)
operator|>=
literal|0
condition|)
name|out
operator|.
name|write
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
name|len
argument_list|)
expr_stmt|;
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

