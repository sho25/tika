begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|msword
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|hwpf
operator|.
name|model
operator|.
name|CHPBinTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|hwpf
operator|.
name|model
operator|.
name|CHPX
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|hwpf
operator|.
name|model
operator|.
name|ComplexFileTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|hwpf
operator|.
name|model
operator|.
name|TextPiece
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|hwpf
operator|.
name|model
operator|.
name|TextPieceTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|hwpf
operator|.
name|sprm
operator|.
name|SprmIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|hwpf
operator|.
name|sprm
operator|.
name|SprmOperation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|poifs
operator|.
name|filesystem
operator|.
name|DocumentEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|poifs
operator|.
name|filesystem
operator|.
name|DocumentInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|poifs
operator|.
name|filesystem
operator|.
name|POIFSFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|util
operator|.
name|LittleEndian
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|ms
operator|.
name|MSParser
import|;
end_import

begin_comment
comment|/**  * Word parser  */
end_comment

begin_class
specifier|public
class|class
name|MsWordParser
extends|extends
name|MSParser
block|{
comment|/**      * Gets the text from a Word document.      *      * @param in The InputStream representing the Word file.      */
specifier|public
name|String
name|extractText
parameter_list|(
name|InputStream
name|in
parameter_list|)
throws|throws
name|Exception
block|{
name|POIFSFileSystem
name|fsys
init|=
operator|new
name|POIFSFileSystem
argument_list|(
name|in
argument_list|)
decl_stmt|;
comment|// load our POIFS document streams.
name|DocumentEntry
name|headerProps
init|=
operator|(
name|DocumentEntry
operator|)
name|fsys
operator|.
name|getRoot
argument_list|()
operator|.
name|getEntry
argument_list|(
literal|"WordDocument"
argument_list|)
decl_stmt|;
name|DocumentInputStream
name|din
init|=
name|fsys
operator|.
name|createDocumentInputStream
argument_list|(
literal|"WordDocument"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|header
init|=
operator|new
name|byte
index|[
name|headerProps
operator|.
name|getSize
argument_list|()
index|]
decl_stmt|;
name|din
operator|.
name|read
argument_list|(
name|header
argument_list|)
expr_stmt|;
name|din
operator|.
name|close
argument_list|()
expr_stmt|;
name|int
name|info
init|=
name|LittleEndian
operator|.
name|getShort
argument_list|(
name|header
argument_list|,
literal|0xa
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|info
operator|&
literal|0x4
operator|)
operator|!=
literal|0
condition|)
block|{
throw|throw
operator|new
name|FastSavedException
argument_list|(
literal|"Fast-saved files are unsupported at this time"
argument_list|)
throw|;
block|}
if|if
condition|(
operator|(
name|info
operator|&
literal|0x100
operator|)
operator|!=
literal|0
condition|)
block|{
throw|throw
operator|new
name|PasswordProtectedException
argument_list|(
literal|"This document is password protected"
argument_list|)
throw|;
block|}
comment|// determine the version of Word this document came from.
name|int
name|nFib
init|=
name|LittleEndian
operator|.
name|getShort
argument_list|(
name|header
argument_list|,
literal|0x2
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|nFib
condition|)
block|{
case|case
literal|101
case|:
case|case
literal|102
case|:
case|case
literal|103
case|:
case|case
literal|104
case|:
comment|// this is a Word 6.0 doc send it to the extractor for that version.
name|Word6Extractor
name|oldExtractor
init|=
operator|new
name|Word6Extractor
argument_list|()
decl_stmt|;
return|return
name|oldExtractor
operator|.
name|extractText
argument_list|(
name|header
argument_list|)
return|;
block|}
comment|//get the location of the piece table
name|int
name|complexOffset
init|=
name|LittleEndian
operator|.
name|getInt
argument_list|(
name|header
argument_list|,
literal|0x1a2
argument_list|)
decl_stmt|;
comment|// determine which table stream we must use.
comment|//Get the information we need from the header
name|String
name|tableName
init|=
literal|null
decl_stmt|;
name|boolean
name|useTable1
init|=
operator|(
name|info
operator|&
literal|0x200
operator|)
operator|!=
literal|0
decl_stmt|;
if|if
condition|(
name|useTable1
condition|)
block|{
name|tableName
operator|=
literal|"1Table"
expr_stmt|;
block|}
else|else
block|{
name|tableName
operator|=
literal|"0Table"
expr_stmt|;
block|}
name|DocumentEntry
name|table
init|=
operator|(
name|DocumentEntry
operator|)
name|fsys
operator|.
name|getRoot
argument_list|()
operator|.
name|getEntry
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|byte
index|[]
name|tableStream
init|=
operator|new
name|byte
index|[
name|table
operator|.
name|getSize
argument_list|()
index|]
decl_stmt|;
name|din
operator|=
name|fsys
operator|.
name|createDocumentInputStream
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|din
operator|.
name|read
argument_list|(
name|tableStream
argument_list|)
expr_stmt|;
name|din
operator|.
name|close
argument_list|()
expr_stmt|;
name|int
name|chpOffset
init|=
name|LittleEndian
operator|.
name|getInt
argument_list|(
name|header
argument_list|,
literal|0xfa
argument_list|)
decl_stmt|;
name|int
name|chpSize
init|=
name|LittleEndian
operator|.
name|getInt
argument_list|(
name|header
argument_list|,
literal|0xfe
argument_list|)
decl_stmt|;
name|int
name|fcMin
init|=
name|LittleEndian
operator|.
name|getInt
argument_list|(
name|header
argument_list|,
literal|0x18
argument_list|)
decl_stmt|;
name|CHPBinTable
name|cbt
init|=
operator|new
name|CHPBinTable
argument_list|(
name|header
argument_list|,
name|tableStream
argument_list|,
name|chpOffset
argument_list|,
name|chpSize
argument_list|,
name|fcMin
argument_list|)
decl_stmt|;
comment|// load our text pieces and our character runs
name|ComplexFileTable
name|cft
init|=
operator|new
name|ComplexFileTable
argument_list|(
name|header
argument_list|,
name|tableStream
argument_list|,
name|complexOffset
argument_list|,
name|fcMin
argument_list|)
decl_stmt|;
name|TextPieceTable
name|tpt
init|=
name|cft
operator|.
name|getTextPieceTable
argument_list|()
decl_stmt|;
name|List
name|textPieces
init|=
name|tpt
operator|.
name|getTextPieces
argument_list|()
decl_stmt|;
comment|// make the POIFS objects available for garbage collection
name|din
operator|=
literal|null
expr_stmt|;
name|fsys
operator|=
literal|null
expr_stmt|;
name|table
operator|=
literal|null
expr_stmt|;
name|headerProps
operator|=
literal|null
expr_stmt|;
name|List
name|textRuns
init|=
name|cbt
operator|.
name|getTextRuns
argument_list|()
decl_stmt|;
name|Iterator
name|runIt
init|=
name|textRuns
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|Iterator
name|textIt
init|=
name|textPieces
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|TextPiece
name|currentPiece
init|=
operator|(
name|TextPiece
operator|)
name|textIt
operator|.
name|next
argument_list|()
decl_stmt|;
name|int
name|currentTextStart
init|=
name|currentPiece
operator|.
name|getStart
argument_list|()
decl_stmt|;
name|int
name|currentTextEnd
init|=
name|currentPiece
operator|.
name|getEnd
argument_list|()
decl_stmt|;
name|WordTextBuffer
name|finalTextBuf
init|=
operator|new
name|WordTextBuffer
argument_list|()
decl_stmt|;
comment|// iterate through all text runs extract the text only if they haven't been
comment|// deleted
while|while
condition|(
name|runIt
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|CHPX
name|chpx
init|=
operator|(
name|CHPX
operator|)
name|runIt
operator|.
name|next
argument_list|()
decl_stmt|;
name|boolean
name|deleted
init|=
name|isDeleted
argument_list|(
name|chpx
operator|.
name|getGrpprl
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|deleted
condition|)
block|{
continue|continue;
block|}
name|int
name|runStart
init|=
name|chpx
operator|.
name|getStart
argument_list|()
decl_stmt|;
name|int
name|runEnd
init|=
name|chpx
operator|.
name|getEnd
argument_list|()
decl_stmt|;
while|while
condition|(
name|runStart
operator|>=
name|currentTextEnd
condition|)
block|{
name|currentPiece
operator|=
operator|(
name|TextPiece
operator|)
name|textIt
operator|.
name|next
argument_list|()
expr_stmt|;
name|currentTextStart
operator|=
name|currentPiece
operator|.
name|getStart
argument_list|()
expr_stmt|;
name|currentTextEnd
operator|=
name|currentPiece
operator|.
name|getEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|runEnd
operator|<
name|currentTextEnd
condition|)
block|{
name|String
name|str
init|=
name|currentPiece
operator|.
name|substring
argument_list|(
name|runStart
operator|-
name|currentTextStart
argument_list|,
name|runEnd
operator|-
name|currentTextStart
argument_list|)
decl_stmt|;
name|finalTextBuf
operator|.
name|append
argument_list|(
name|str
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|runEnd
operator|>
name|currentTextEnd
condition|)
block|{
while|while
condition|(
name|runEnd
operator|>
name|currentTextEnd
condition|)
block|{
name|String
name|str
init|=
name|currentPiece
operator|.
name|substring
argument_list|(
name|runStart
operator|-
name|currentTextStart
argument_list|,
name|currentTextEnd
operator|-
name|currentTextStart
argument_list|)
decl_stmt|;
name|finalTextBuf
operator|.
name|append
argument_list|(
name|str
argument_list|)
expr_stmt|;
if|if
condition|(
name|textIt
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|currentPiece
operator|=
operator|(
name|TextPiece
operator|)
name|textIt
operator|.
name|next
argument_list|()
expr_stmt|;
name|currentTextStart
operator|=
name|currentPiece
operator|.
name|getStart
argument_list|()
expr_stmt|;
name|runStart
operator|=
name|currentTextStart
expr_stmt|;
name|currentTextEnd
operator|=
name|currentPiece
operator|.
name|getEnd
argument_list|()
expr_stmt|;
block|}
else|else
block|{
return|return
name|finalTextBuf
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
name|String
name|str
init|=
name|currentPiece
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|runEnd
operator|-
name|currentTextStart
argument_list|)
decl_stmt|;
name|finalTextBuf
operator|.
name|append
argument_list|(
name|str
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|String
name|str
init|=
name|currentPiece
operator|.
name|substring
argument_list|(
name|runStart
operator|-
name|currentTextStart
argument_list|,
name|runEnd
operator|-
name|currentTextStart
argument_list|)
decl_stmt|;
if|if
condition|(
name|textIt
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|currentPiece
operator|=
operator|(
name|TextPiece
operator|)
name|textIt
operator|.
name|next
argument_list|()
expr_stmt|;
name|currentTextStart
operator|=
name|currentPiece
operator|.
name|getStart
argument_list|()
expr_stmt|;
name|currentTextEnd
operator|=
name|currentPiece
operator|.
name|getEnd
argument_list|()
expr_stmt|;
block|}
name|finalTextBuf
operator|.
name|append
argument_list|(
name|str
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|finalTextBuf
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**      * Used to determine if a run of text has been deleted.      *      * @param grpprl The list of sprms for a particular run of text.      * @return true if this run of text has been deleted.      */
specifier|private
name|boolean
name|isDeleted
parameter_list|(
name|byte
index|[]
name|grpprl
parameter_list|)
block|{
name|SprmIterator
name|iterator
init|=
operator|new
name|SprmIterator
argument_list|(
name|grpprl
argument_list|,
literal|0
argument_list|)
decl_stmt|;
while|while
condition|(
name|iterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|SprmOperation
name|op
init|=
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
comment|// 0 is the operation that signals a FDelRMark operation
if|if
condition|(
name|op
operator|.
name|getOperation
argument_list|()
operator|==
literal|0
operator|&&
name|op
operator|.
name|getOperand
argument_list|()
operator|!=
literal|0
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
block|}
end_class

end_unit

