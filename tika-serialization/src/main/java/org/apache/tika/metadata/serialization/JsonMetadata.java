begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|metadata
operator|.
name|serialization
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Reader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Writer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|exception
operator|.
name|TikaException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|metadata
operator|.
name|Metadata
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gson
operator|.
name|Gson
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gson
operator|.
name|GsonBuilder
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gson
operator|.
name|JsonIOException
import|;
end_import

begin_class
specifier|public
class|class
name|JsonMetadata
block|{
specifier|private
specifier|static
name|Gson
name|GSON
decl_stmt|;
static|static
block|{
name|GsonBuilder
name|builder
init|=
operator|new
name|GsonBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|registerTypeHierarchyAdapter
argument_list|(
name|Metadata
operator|.
name|class
argument_list|,
operator|new
name|JsonMetadataSerializer
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|registerTypeHierarchyAdapter
argument_list|(
name|Metadata
operator|.
name|class
argument_list|,
operator|new
name|JsonMetadataDeserializer
argument_list|()
argument_list|)
expr_stmt|;
name|GSON
operator|=
name|builder
operator|.
name|create
argument_list|()
expr_stmt|;
block|}
comment|/**      * Serializes a Metadata object to Json.  This does not flush or close the writer.      *       * @param metadata metadata to write      * @param writer writer      * @throws TikaException if there is an IOException during writing      */
specifier|public
specifier|static
name|void
name|toJson
parameter_list|(
name|Metadata
name|metadata
parameter_list|,
name|Writer
name|writer
parameter_list|)
throws|throws
name|TikaException
block|{
try|try
block|{
name|GSON
operator|.
name|toJson
argument_list|(
name|metadata
argument_list|,
name|writer
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|JsonIOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|TikaException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
comment|/**      * Read metadata from reader.      *      * @param reader reader to read from      * @return Metadata or null if nothing could be read from the reader      * @throws TikaException in case of parse failure by Gson or IO failure with Reader      */
specifier|public
specifier|static
name|Metadata
name|fromJson
parameter_list|(
name|Reader
name|reader
parameter_list|)
throws|throws
name|TikaException
block|{
name|Metadata
name|m
init|=
literal|null
decl_stmt|;
try|try
block|{
name|m
operator|=
name|GSON
operator|.
name|fromJson
argument_list|(
name|reader
argument_list|,
name|Metadata
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|com
operator|.
name|google
operator|.
name|gson
operator|.
name|JsonParseException
name|e
parameter_list|)
block|{
comment|//covers both io and parse exceptions
throw|throw
operator|new
name|TikaException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
return|return
name|m
return|;
block|}
comment|/**      * Enables setting custom configurations on Gson.  Remember to register      * a serializer and a deserializer for Metadata.  This does a literal set      * and does not add the default serializer and deserializers.      *       * @param gson      */
specifier|public
specifier|static
name|void
name|setGson
parameter_list|(
name|Gson
name|gson
parameter_list|)
block|{
name|GSON
operator|=
name|gson
expr_stmt|;
block|}
block|}
end_class

end_unit

