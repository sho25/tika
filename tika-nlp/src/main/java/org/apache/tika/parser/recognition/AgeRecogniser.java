begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright owlocationNameEntitieship.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|recognition
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Reader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|Tika
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|config
operator|.
name|Initializable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|config
operator|.
name|InitializableProblemHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|config
operator|.
name|Param
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|config
operator|.
name|TikaConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|exception
operator|.
name|TikaConfigException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|metadata
operator|.
name|Metadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|mime
operator|.
name|MediaType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|AbstractParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|ParseContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|ContentHandler
import|;
end_import

begin_import
import|import
name|edu
operator|.
name|usc
operator|.
name|irds
operator|.
name|agepredictor
operator|.
name|authorage
operator|.
name|AgePredicterLocal
import|;
end_import

begin_import
import|import
name|opennlp
operator|.
name|tools
operator|.
name|util
operator|.
name|InvalidFormatException
import|;
end_import

begin_comment
comment|/**  * Parser for extracting features from text. Below features are extracted  *  *<ul>  *<li>Author Age</li>  *</ul>  */
end_comment

begin_class
specifier|public
class|class
name|AgeRecogniser
extends|extends
name|AbstractParser
implements|implements
name|Initializable
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1108439049093046832L
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|Logger
operator|.
name|getLogger
argument_list|(
name|AgeRecogniser
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|MD_KEY_ESTIMATED_AGE_RANGE
init|=
literal|"Estimated-Author-Age-Range"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|MD_KEY_ESTIMATED_AGE
init|=
literal|"Estimated-Author-Age"
decl_stmt|;
specifier|private
specifier|static
name|AgePredicterLocal
name|agePredictor
decl_stmt|;
specifier|private
name|AgeRecogniserConfig
name|config
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|MediaType
name|MEDIA_TYPE
init|=
name|MediaType
operator|.
name|TEXT_PLAIN
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Set
argument_list|<
name|MediaType
argument_list|>
name|SUPPORTED_TYPES
init|=
name|Collections
operator|.
name|singleton
argument_list|(
name|MEDIA_TYPE
argument_list|)
decl_stmt|;
specifier|public
name|Tika
name|secondaryParser
decl_stmt|;
specifier|private
specifier|static
specifier|volatile
name|boolean
name|available
init|=
literal|false
decl_stmt|;
specifier|public
name|AgeRecogniser
parameter_list|()
block|{
try|try
block|{
name|secondaryParser
operator|=
operator|new
name|Tika
argument_list|(
operator|new
name|TikaConfig
argument_list|()
argument_list|)
expr_stmt|;
name|available
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|available
operator|=
literal|false
expr_stmt|;
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|SEVERE
argument_list|,
literal|"Unable to initialize secondary parser"
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|checkInitialization
parameter_list|(
name|InitializableProblemHandler
name|problemHandler
parameter_list|)
throws|throws
name|TikaConfigException
block|{
comment|//TODO: what do we want to check here?
block|}
annotation|@
name|Override
specifier|public
name|Set
argument_list|<
name|MediaType
argument_list|>
name|getSupportedTypes
parameter_list|(
name|ParseContext
name|parseContext
parameter_list|)
block|{
return|return
name|SUPPORTED_TYPES
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|initialize
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Param
argument_list|>
name|params
parameter_list|)
throws|throws
name|TikaConfigException
block|{
name|config
operator|=
operator|new
name|AgeRecogniserConfig
argument_list|(
name|params
argument_list|)
expr_stmt|;
block|}
comment|/** 	 * USED in test cases to mock response of AgeClassifier 	 */
specifier|protected
specifier|static
name|void
name|setAgePredictorClient
parameter_list|(
name|AgePredicterLocal
name|agePredicter
parameter_list|)
block|{
if|if
condition|(
name|AgeRecogniser
operator|.
name|agePredictor
operator|==
literal|null
condition|)
block|{
name|AgeRecogniser
operator|.
name|agePredictor
operator|=
name|agePredicter
expr_stmt|;
block|}
block|}
specifier|public
name|AgePredicterLocal
name|getAgePredictorClient
parameter_list|()
throws|throws
name|InvalidFormatException
throws|,
name|IOException
block|{
if|if
condition|(
name|agePredictor
operator|==
literal|null
condition|)
block|{
name|agePredictor
operator|=
operator|new
name|AgePredicterLocal
argument_list|(
name|config
operator|.
name|getPathClassifyModel
argument_list|()
argument_list|,
name|config
operator|.
name|getPathClassifyRegression
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|agePredictor
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|parse
parameter_list|(
name|InputStream
name|inputStream
parameter_list|,
name|ContentHandler
name|handler
parameter_list|,
name|Metadata
name|metadata
parameter_list|,
name|ParseContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|config
operator|=
name|context
operator|.
name|get
argument_list|(
name|AgeRecogniserConfig
operator|.
name|class
argument_list|,
name|config
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|available
condition|)
block|{
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|SEVERE
argument_list|,
literal|"Parser Unavailable, check your configuration"
argument_list|)
expr_stmt|;
return|return;
block|}
comment|/** 		 * If content is not plain text use Tika to extract text out of content.  		 */
name|Reader
name|reader
decl_stmt|;
if|if
condition|(
name|MediaType
operator|.
name|TEXT_PLAIN
operator|.
name|toString
argument_list|()
operator|.
name|equals
argument_list|(
name|metadata
operator|.
name|get
argument_list|(
name|Metadata
operator|.
name|CONTENT_TYPE
argument_list|)
argument_list|)
condition|)
block|{
name|reader
operator|=
operator|new
name|InputStreamReader
argument_list|(
name|inputStream
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|reader
operator|=
name|secondaryParser
operator|.
name|parse
argument_list|(
name|inputStream
argument_list|)
expr_stmt|;
block|}
comment|/** 		 * Use Spark AgePredictor to get predicted Age 		 */
try|try
block|{
name|double
name|predictAuthorAge
init|=
name|getAgePredictorClient
argument_list|()
operator|.
name|predictAge
argument_list|(
name|IOUtils
operator|.
name|toString
argument_list|(
name|reader
argument_list|)
argument_list|)
decl_stmt|;
name|metadata
operator|.
name|add
argument_list|(
name|MD_KEY_ESTIMATED_AGE
argument_list|,
name|Double
operator|.
name|toString
argument_list|(
name|predictAuthorAge
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|SEVERE
argument_list|,
literal|"Age Predictor is not available. Please check wiki for detailed instructions"
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
block|}
end_class

end_unit

