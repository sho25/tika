begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|filetypedetector
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|spi
operator|.
name|FileTypeDetector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|Tika
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|mime
operator|.
name|MimeTypes
import|;
end_import

begin_class
specifier|public
class|class
name|TikaFileTypeDetector
extends|extends
name|FileTypeDetector
block|{
specifier|private
specifier|final
name|Tika
name|tika
init|=
operator|new
name|Tika
argument_list|()
decl_stmt|;
specifier|public
name|TikaFileTypeDetector
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|probeContentType
parameter_list|(
name|Path
name|path
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Try to detect based on the file name only for efficiency
name|String
name|fileNameDetect
init|=
name|tika
operator|.
name|detect
argument_list|(
name|path
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|fileNameDetect
operator|.
name|equals
argument_list|(
name|MimeTypes
operator|.
name|OCTET_STREAM
argument_list|)
condition|)
block|{
return|return
name|fileNameDetect
return|;
block|}
comment|// Then check the file content if necessary
name|String
name|fileContentDetect
init|=
name|tika
operator|.
name|detect
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|fileContentDetect
operator|.
name|equals
argument_list|(
name|MimeTypes
operator|.
name|OCTET_STREAM
argument_list|)
condition|)
block|{
return|return
name|fileContentDetect
return|;
block|}
comment|// Specification says to return null if we could not
comment|// conclusively determine the file type
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

