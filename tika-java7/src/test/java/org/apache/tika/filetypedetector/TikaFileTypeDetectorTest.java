begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|filetypedetector
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|spi
operator|.
name|FileTypeDetector
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ServiceLoader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TemporaryFolder
import|;
end_import

begin_class
specifier|public
class|class
name|TikaFileTypeDetectorTest
block|{
annotation|@
name|Rule
specifier|public
name|TemporaryFolder
name|tempDir
init|=
operator|new
name|TemporaryFolder
argument_list|()
decl_stmt|;
specifier|private
name|Path
name|testDirectory
init|=
literal|null
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|TEST_CLASSPATH
init|=
literal|"/test-documents/test.html"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|TEST_HTML
init|=
literal|"test.html"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|TEST_UNRECOGNISED_EXTENSION
init|=
literal|"test.unrecognisedextension"
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|testDirectory
operator|=
name|tempDir
operator|.
name|newFolder
argument_list|()
operator|.
name|toPath
argument_list|()
expr_stmt|;
name|Files
operator|.
name|copy
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getResourceAsStream
argument_list|(
name|TEST_CLASSPATH
argument_list|)
argument_list|,
name|testDirectory
operator|.
name|resolve
argument_list|(
name|TEST_HTML
argument_list|)
argument_list|)
expr_stmt|;
name|Files
operator|.
name|copy
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getResourceAsStream
argument_list|(
name|TEST_CLASSPATH
argument_list|)
argument_list|,
name|testDirectory
operator|.
name|resolve
argument_list|(
name|TEST_UNRECOGNISED_EXTENSION
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{     }
annotation|@
name|Test
specifier|public
specifier|final
name|void
name|testDirectAccess
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|contentType
init|=
operator|new
name|TikaFileTypeDetector
argument_list|()
operator|.
name|probeContentType
argument_list|(
name|testDirectory
operator|.
name|resolve
argument_list|(
name|TEST_HTML
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|contentType
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"text/html"
argument_list|,
name|contentType
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
specifier|final
name|void
name|testFilesProbeContentTypePathExtension
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|contentType
init|=
name|Files
operator|.
name|probeContentType
argument_list|(
name|testDirectory
operator|.
name|resolve
argument_list|(
name|TEST_HTML
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|contentType
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"text/html"
argument_list|,
name|contentType
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
specifier|final
name|void
name|testFilesProbeContentTypePathUnrecognised
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|contentType
init|=
name|Files
operator|.
name|probeContentType
argument_list|(
name|testDirectory
operator|.
name|resolve
argument_list|(
name|TEST_UNRECOGNISED_EXTENSION
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|contentType
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"text/html"
argument_list|,
name|contentType
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
specifier|final
name|void
name|testMetaInfServicesLoad
parameter_list|()
throws|throws
name|Exception
block|{
name|ServiceLoader
argument_list|<
name|FileTypeDetector
argument_list|>
name|serviceLoader
init|=
name|ServiceLoader
operator|.
name|load
argument_list|(
name|FileTypeDetector
operator|.
name|class
argument_list|)
decl_stmt|;
name|Iterator
argument_list|<
name|FileTypeDetector
argument_list|>
name|iterator
init|=
name|serviceLoader
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|iterator
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
while|while
condition|(
name|iterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|FileTypeDetector
name|fileTypeDetector
init|=
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|fileTypeDetector
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fileTypeDetector
operator|instanceof
name|TikaFileTypeDetector
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

