begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|xmp
operator|.
name|convert
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|exception
operator|.
name|TikaException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|metadata
operator|.
name|Metadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|metadata
operator|.
name|TikaCoreProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|mime
operator|.
name|MediaType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|ParseContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|microsoft
operator|.
name|OfficeParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|microsoft
operator|.
name|ooxml
operator|.
name|OOXMLParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|odf
operator|.
name|OpenDocumentParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|rtf
operator|.
name|RTFParser
import|;
end_import

begin_import
import|import
name|com
operator|.
name|adobe
operator|.
name|xmp
operator|.
name|XMPException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|adobe
operator|.
name|xmp
operator|.
name|XMPMeta
import|;
end_import

begin_import
import|import
name|com
operator|.
name|adobe
operator|.
name|xmp
operator|.
name|XMPMetaFactory
import|;
end_import

begin_class
specifier|public
class|class
name|TikaToXMP
block|{
comment|/**      * Map from mimetype to converter class Must only be accessed through      *<code>getConverterMap</code>      */
specifier|private
specifier|static
name|Map
argument_list|<
name|MediaType
argument_list|,
name|Class
argument_list|<
name|?
extends|extends
name|ITikaToXMPConverter
argument_list|>
argument_list|>
name|converterMap
decl_stmt|;
comment|// --- public API implementation---
specifier|public
name|TikaToXMP
parameter_list|()
block|{
comment|// Nothing to do
block|}
comment|/**      * @see TikaToXMP#convert(Metadata, String) But the mimetype is retrieved from the metadata      *      map.      */
specifier|public
specifier|static
name|XMPMeta
name|convert
parameter_list|(
name|Metadata
name|tikaMetadata
parameter_list|)
throws|throws
name|TikaException
block|{
if|if
condition|(
name|tikaMetadata
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Metadata parameter must not be null"
argument_list|)
throw|;
block|}
name|String
name|mimetype
init|=
name|tikaMetadata
operator|.
name|get
argument_list|(
name|Metadata
operator|.
name|CONTENT_TYPE
argument_list|)
decl_stmt|;
if|if
condition|(
name|mimetype
operator|==
literal|null
condition|)
block|{
name|mimetype
operator|=
name|tikaMetadata
operator|.
name|get
argument_list|(
name|TikaCoreProperties
operator|.
name|FORMAT
argument_list|)
expr_stmt|;
block|}
return|return
name|convert
argument_list|(
name|tikaMetadata
argument_list|,
name|mimetype
argument_list|)
return|;
block|}
comment|/**      * Convert the given Tika metadata map to XMP object. If a mimetype is provided in the Metadata      * map, a specific converter can be used, that converts all available metadata. If there is no      * mimetype provided or no specific converter available a generic conversion is done which will      * convert only those properties that are in known namespaces and are using the correct      * prefixes.      *      * @param tikaMetadata      *            the Metadata map from Tika      * @param mimetype      *            depicts the format's converter to use      * @return XMP object      * @throws TikaException      */
specifier|public
specifier|static
name|XMPMeta
name|convert
parameter_list|(
name|Metadata
name|tikaMetadata
parameter_list|,
name|String
name|mimetype
parameter_list|)
throws|throws
name|TikaException
block|{
if|if
condition|(
name|tikaMetadata
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Metadata parameter must not be null"
argument_list|)
throw|;
block|}
name|ITikaToXMPConverter
name|converter
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|isConverterAvailable
argument_list|(
name|mimetype
argument_list|)
condition|)
block|{
name|converter
operator|=
name|getConverter
argument_list|(
name|mimetype
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|converter
operator|=
operator|new
name|GenericConverter
argument_list|()
expr_stmt|;
block|}
name|XMPMeta
name|xmp
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|converter
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|xmp
operator|=
name|converter
operator|.
name|process
argument_list|(
name|tikaMetadata
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XMPException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|TikaException
argument_list|(
literal|"Tika metadata could not be converted to XMP"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
else|else
block|{
name|xmp
operator|=
name|XMPMetaFactory
operator|.
name|create
argument_list|()
expr_stmt|;
comment|// empty packet
block|}
return|return
name|xmp
return|;
block|}
comment|/**      * Check if there is a converter available which allows to convert the Tika metadata to XMP      *      * @param mimetype      *            the Mimetype      * @return true if the Metadata object can be converted or false if not      */
specifier|public
specifier|static
name|boolean
name|isConverterAvailable
parameter_list|(
name|String
name|mimetype
parameter_list|)
block|{
name|MediaType
name|type
init|=
name|MediaType
operator|.
name|parse
argument_list|(
name|mimetype
argument_list|)
decl_stmt|;
if|if
condition|(
name|type
operator|!=
literal|null
condition|)
block|{
return|return
operator|(
name|getConverterMap
argument_list|()
operator|.
name|get
argument_list|(
name|type
argument_list|)
operator|!=
literal|null
operator|)
return|;
block|}
return|return
literal|false
return|;
block|}
comment|/**      * Retrieve a specific converter according to the mimetype      *      * @param mimetype      *            the Mimetype      * @return the converter or null, if none exists      * @throws TikaException      */
specifier|public
specifier|static
name|ITikaToXMPConverter
name|getConverter
parameter_list|(
name|String
name|mimetype
parameter_list|)
throws|throws
name|TikaException
block|{
if|if
condition|(
name|mimetype
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"mimetype must not be null"
argument_list|)
throw|;
block|}
name|ITikaToXMPConverter
name|converter
init|=
literal|null
decl_stmt|;
name|MediaType
name|type
init|=
name|MediaType
operator|.
name|parse
argument_list|(
name|mimetype
argument_list|)
decl_stmt|;
if|if
condition|(
name|type
operator|!=
literal|null
condition|)
block|{
name|Class
argument_list|<
name|?
extends|extends
name|ITikaToXMPConverter
argument_list|>
name|clazz
init|=
name|getConverterMap
argument_list|()
operator|.
name|get
argument_list|(
name|type
argument_list|)
decl_stmt|;
if|if
condition|(
name|clazz
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|converter
operator|=
name|clazz
operator|.
name|newInstance
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|TikaException
argument_list|(
literal|"TikaToXMP converter class cannot be instantiated for mimetype: "
operator|+
name|type
operator|.
name|toString
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
return|return
name|converter
return|;
block|}
comment|// --- Private methods ---
specifier|private
specifier|static
name|Map
argument_list|<
name|MediaType
argument_list|,
name|Class
argument_list|<
name|?
extends|extends
name|ITikaToXMPConverter
argument_list|>
argument_list|>
name|getConverterMap
parameter_list|()
block|{
if|if
condition|(
name|converterMap
operator|==
literal|null
condition|)
block|{
name|converterMap
operator|=
operator|new
name|HashMap
argument_list|<
name|MediaType
argument_list|,
name|Class
argument_list|<
name|?
extends|extends
name|ITikaToXMPConverter
argument_list|>
argument_list|>
argument_list|()
expr_stmt|;
name|initialize
argument_list|()
expr_stmt|;
block|}
return|return
name|converterMap
return|;
block|}
comment|/**      * Initializes the map with supported converters.      */
specifier|private
specifier|static
name|void
name|initialize
parameter_list|()
block|{
comment|// No particular parsing context is needed
name|ParseContext
name|parseContext
init|=
operator|new
name|ParseContext
argument_list|()
decl_stmt|;
comment|// MS Office Binary File Format
name|addConverter
argument_list|(
operator|new
name|OfficeParser
argument_list|()
operator|.
name|getSupportedTypes
argument_list|(
name|parseContext
argument_list|)
argument_list|,
name|MSOfficeBinaryConverter
operator|.
name|class
argument_list|)
expr_stmt|;
comment|// Rich Text Format
name|addConverter
argument_list|(
operator|new
name|RTFParser
argument_list|()
operator|.
name|getSupportedTypes
argument_list|(
name|parseContext
argument_list|)
argument_list|,
name|RTFConverter
operator|.
name|class
argument_list|)
expr_stmt|;
comment|// MS Open XML Format
name|addConverter
argument_list|(
operator|new
name|OOXMLParser
argument_list|()
operator|.
name|getSupportedTypes
argument_list|(
name|parseContext
argument_list|)
argument_list|,
name|MSOfficeXMLConverter
operator|.
name|class
argument_list|)
expr_stmt|;
comment|// Open document format
name|addConverter
argument_list|(
operator|new
name|OpenDocumentParser
argument_list|()
operator|.
name|getSupportedTypes
argument_list|(
name|parseContext
argument_list|)
argument_list|,
name|OpenDocumentConverter
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|addConverter
parameter_list|(
name|Set
argument_list|<
name|MediaType
argument_list|>
name|supportedTypes
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|ITikaToXMPConverter
argument_list|>
name|converter
parameter_list|)
block|{
for|for
control|(
name|MediaType
name|type
range|:
name|supportedTypes
control|)
block|{
name|getConverterMap
argument_list|()
operator|.
name|put
argument_list|(
name|type
argument_list|,
name|converter
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

